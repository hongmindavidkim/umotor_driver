
motor_driver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010314  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c0  080104e8  080104e8  000204e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ea8  08011ea8  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08011ea8  08011ea8  00021ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eb0  08011eb0  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011eb0  08011eb0  00021eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011eb4  08011eb4  00021eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011eb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009484  20000220  080120d8  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200096a4  080120d8  000396a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea3c  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e4  00000000  00000000  0004ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00053570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  00054d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029094  00000000  00000000  00056348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222ce  00000000  00000000  0007f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7694  00000000  00000000  000a16aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a54  00000000  00000000  00188d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080104cc 	.word	0x080104cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	080104cc 	.word	0x080104cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001058:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_ADC1_Init+0xcc>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC1_Init+0xc8>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001072:	2200      	movs	r2, #0
 8001074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <MX_ADC1_Init+0xd0>)
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001092:	2201      	movs	r2, #1
 8001094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a6:	f005 ff25 	bl	8006ef4 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010b0:	f004 f9dc 	bl	800546c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010b4:	2316      	movs	r3, #22
 80010b6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010c8:	f006 faf0 	bl	80076ac <HAL_ADCEx_MultiModeConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f004 f9cb 	bl	800546c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010e8:	f006 f8b2 	bl	8007250 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010f2:	f004 f9bb 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000023c 	.word	0x2000023c
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_ADC2_Init+0x90>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_ADC2_Init+0x8c>)
 800113a:	2200      	movs	r2, #0
 800113c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_ADC2_Init+0x8c>)
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ADC2_Init+0x8c>)
 800115c:	2201      	movs	r2, #1
 800115e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001162:	f005 fec7 	bl	8006ef4 <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800116c:	f004 f97e 	bl	800546c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001170:	230b      	movs	r3, #11
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001182:	f006 f865 	bl	8007250 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800118c:	f004 f96e 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000284 	.word	0x20000284
 800119c:	40012100 	.word	0x40012100

080011a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC3_Init+0x8c>)
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_ADC3_Init+0x90>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_ADC3_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f6:	f005 fe7d 	bl	8006ef4 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001200:	f004 f934 	bl	800546c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_ADC3_Init+0x8c>)
 8001216:	f006 f81b 	bl	8007250 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001220:	f004 f924 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002cc 	.word	0x200002cc
 8001230:	40012200 	.word	0x40012200

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_ADC_MspInit+0x134>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d128      	bne.n	80012a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_ADC_MspInit+0x138>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_ADC_MspInit+0x138>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4833      	ldr	r0, [pc, #204]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012a2:	f006 fffb 	bl	800829c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012a6:	e05a      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_ADC_MspInit+0x140>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ea:	2302      	movs	r3, #2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012fe:	f006 ffcd 	bl	800829c <HAL_GPIO_Init>
}
 8001302:	e02c      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_ADC_MspInit+0x144>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d127      	bne.n	800135e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_ADC_MspInit+0x138>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_ADC_MspInit+0x148>)
 800135a:	f006 ff9f 	bl	800829c <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	; 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012000 	.word	0x40012000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40012100 	.word	0x40012100
 8001378:	40012200 	.word	0x40012200
 800137c:	40020000 	.word	0x40020000

08001380 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <order_phases+0x1e8>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7c1b      	ldrb	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d108      	bne.n	80013ae <order_phases+0x2e>
		printf("\n\r\n\rChecking phase sign, pole pairs\r\n");
 800139c:	4873      	ldr	r0, [pc, #460]	; (800156c <order_phases+0x1ec>)
 800139e:	f00b f909 	bl	800c5b4 <puts>
		cal->started = 1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001570 <order_phases+0x1f0>
 80013c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80013d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d529      	bpl.n	8001434 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80013f2:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        cal->cal_position.elec_velocity = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013fc:	461a      	mov	r2, r3
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
        controller->i_d_des = I_CAL;
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <order_phases+0x1f4>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001420:	332c      	adds	r3, #44	; 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f001 fe37 	bl	8003098 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
    	return;
 8001432:	e096      	b.n	8001562 <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a05 	vldr	s15, [r3, #20]
 800143a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001578 <order_phases+0x1f8>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d51d      	bpl.n	8001484 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a05 	vldr	s15, [r3, #20]
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001456:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800146e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001478:	332c      	adds	r3, #44	; 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f001 fe0b 	bl	8003098 <commutate>
    	return;
 8001482:	e06e      	b.n	8001562 <order_phases+0x1e2>
    }

	reset_foc(controller);
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f001 fd93 	bl	8002fb0 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a06 	vldr	s15, [r3, #24]
 8001496:	ed97 7a05 	vldr	s14, [r7, #20]
 800149a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149e:	eef0 7ae7 	vabs.f32	s15, s15
 80014a2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800157c <order_phases+0x1fc>
 80014a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014aa:	ee16 0a90 	vmov	r0, s13
 80014ae:	f7ff f86b 	bl	8000588 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	ec43 2b10 	vmov	d0, r2, r3
 80014ba:	f00e fca5 	bl	800fe08 <round>
 80014be:	ec53 2b10 	vmov	r2, r3, d0
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb8f 	bl	8000be8 <__aeabi_d2uiz>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd07      	ble.n	80014f6 <order_phases+0x176>
		cal->phase_order = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80014ee:	4824      	ldr	r0, [pc, #144]	; (8001580 <order_phases+0x200>)
 80014f0:	f00b f860 	bl	800c5b4 <puts>
 80014f4:	e006      	b.n	8001504 <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80014fe:	4821      	ldr	r0, [pc, #132]	; (8001584 <order_phases+0x204>)
 8001500:	f00b f858 	bl	800c5b4 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	481f      	ldr	r0, [pc, #124]	; (8001588 <order_phases+0x208>)
 800150c:	f00a ffcc 	bl	800c4a8 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4604      	mov	r4, r0
 800151c:	460d      	mov	r5, r1
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff f832 	bl	8000588 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9cd 2300 	strd	r2, r3, [sp]
 800152c:	4622      	mov	r2, r4
 800152e:	462b      	mov	r3, r5
 8001530:	4816      	ldr	r0, [pc, #88]	; (800158c <order_phases+0x20c>)
 8001532:	f00a ffb9 	bl	800c4a8 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	461a      	mov	r2, r3
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <order_phases+0x1e8>)
 8001540:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <order_phases+0x1f4>)
 8001550:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    cal->started = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}
 8001568:	2000043c 	.word	0x2000043c
 800156c:	080104e8 	.word	0x080104e8
 8001570:	3851b717 	.word	0x3851b717
 8001574:	2000033c 	.word	0x2000033c
 8001578:	3fd06cbe 	.word	0x3fd06cbe
 800157c:	40c90fdb 	.word	0x40c90fdb
 8001580:	08010510 	.word	0x08010510
 8001584:	08010528 	.word	0x08010528
 8001588:	08010540 	.word	0x08010540
 800158c:	08010554 	.word	0x08010554

08001590 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af02      	add	r7, sp, #8
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonlinearity */

	if(!cal->started){
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7c1b      	ldrb	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 80015a6:	489c      	ldr	r0, [pc, #624]	; (8001818 <calibrate_encoder+0x288>)
 80015a8:	f00b f804 	bl	800c5b4 <puts>
			cal->started = 1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	84da      	strh	r2, [r3, #38]	; 0x26
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800181c <calibrate_encoder+0x28c>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d525      	bpl.n	8001644 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800160a:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 800160e:	4b84      	ldr	r3, [pc, #528]	; (8001820 <calibrate_encoder+0x290>)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001628:	332c      	adds	r3, #44	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f001 fd33 	bl	8003098 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001642:	e26b      	b.n	8001b1c <calibrate_encoder+0x58c>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	ed93 7a05 	vldr	s14, [r3, #20]
 800164a:	4b75      	ldr	r3, [pc, #468]	; (8001820 <calibrate_encoder+0x290>)
 800164c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001650:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001824 <calibrate_encoder+0x294>
 8001654:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001658:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800165c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	f140 808a 	bpl.w	8001788 <calibrate_encoder+0x1f8>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edd3 7a02 	vldr	s15, [r3, #8]
 800167a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001828 <calibrate_encoder+0x298>
 800167e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001692:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800169c:	332c      	adds	r3, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f001 fcf9 	bl	8003098 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	dc00      	bgt.n	80016be <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016bc:	e22e      	b.n	8001b1c <calibrate_encoder+0x58c>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80016c4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800183c <calibrate_encoder+0x2ac>
 80016c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <calibrate_encoder+0x290>)
 80016ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001824 <calibrate_encoder+0x294>
 80016d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e2:	ee17 3a90 	vmov	r3, s15
 80016e6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	131b      	asrs	r3, r3, #12
 80016f6:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016fe:	4618      	mov	r0, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	441a      	add	r2, r3
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	f100 030a 	add.w	r3, r0, #10
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	605a      	str	r2, [r3, #4]
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff37 	bl	8000588 <__aeabi_f2d>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	330a      	adds	r3, #10
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	483e      	ldr	r0, [pc, #248]	; (800182c <calibrate_encoder+0x29c>)
 8001734:	f00a feb8 	bl	800c4a8 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800173e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001830 <calibrate_encoder+0x2a0>
 8001742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <calibrate_encoder+0x290>)
 800175a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800175e:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001834 <calibrate_encoder+0x2a4>
 8001762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800176a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800176e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	f000 81ce 	beq.w	8001b16 <calibrate_encoder+0x586>
			cal->sample_count++;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800177e:	3301      	adds	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	84da      	strh	r2, [r3, #38]	; 0x26
		return;
 8001786:	e1c9      	b.n	8001b1c <calibrate_encoder+0x58c>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	ed93 7a05 	vldr	s14, [r3, #20]
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <calibrate_encoder+0x290>)
 8001790:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001794:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001838 <calibrate_encoder+0x2a8>
 8001798:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800179c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80017a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	f140 80a5 	bpl.w	8001902 <calibrate_encoder+0x372>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80017be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001828 <calibrate_encoder+0x298>
 80017c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <calibrate_encoder+0x290>)
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80017ea:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017f4:	332c      	adds	r3, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f001 fc4d 	bl	8003098 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	ed93 7a05 	vldr	s14, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800180a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	dc15      	bgt.n	8001840 <calibrate_encoder+0x2b0>
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);

			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001814:	e181      	b.n	8001b1a <calibrate_encoder+0x58a>
 8001816:	bf00      	nop
 8001818:	08010570 	.word	0x08010570
 800181c:	3851b717 	.word	0x3851b717
 8001820:	2000033c 	.word	0x2000033c
 8001824:	40c90fdb 	.word	0x40c90fdb
 8001828:	3a03126e 	.word	0x3a03126e
 800182c:	08010598 	.word	0x08010598
 8001830:	3ba0d97c 	.word	0x3ba0d97c
 8001834:	43000000 	.word	0x43000000
 8001838:	41490fdb 	.word	0x41490fdb
 800183c:	49000000 	.word	0x49000000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8168 	beq.w	8001b1a <calibrate_encoder+0x58a>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001850:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800183c <calibrate_encoder+0x2ac>
 8001854:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001858:	4bb2      	ldr	r3, [pc, #712]	; (8001b24 <calibrate_encoder+0x594>)
 800185a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800185e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001b28 <calibrate_encoder+0x598>
 8001862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800186a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186e:	ee17 3a90 	vmov	r3, s15
 8001872:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	131b      	asrs	r3, r3, #12
 8001882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	330a      	adds	r3, #10
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80018a2:	4610      	mov	r0, r2
 80018a4:	0fda      	lsrs	r2, r3, #31
 80018a6:	4413      	add	r3, r2
 80018a8:	105b      	asrs	r3, r3, #1
 80018aa:	4619      	mov	r1, r3
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	f100 030a 	add.w	r3, r0, #10
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	6059      	str	r1, [r3, #4]
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe63 	bl	8000588 <__aeabi_f2d>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	330a      	adds	r3, #10
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4894      	ldr	r0, [pc, #592]	; (8001b2c <calibrate_encoder+0x59c>)
 80018dc:	f00a fde4 	bl	800c4a8 <iprintf>
			cal->sample_count--;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	84da      	strh	r2, [r3, #38]	; 0x26
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018f2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001b30 <calibrate_encoder+0x5a0>
 80018f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001900:	e10b      	b.n	8001b1a <calibrate_encoder+0x58a>
    }

    reset_foc(controller);
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f001 fb54 	bl	8002fb0 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800190c:	2300      	movs	r3, #0
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
 8001910:	e00b      	b.n	800192a <calibrate_encoder+0x39a>
		ezero_mean += cal->error_arr[i];
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001916:	330a      	adds	r3, #10
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001920:	4413      	add	r3, r2
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	3301      	adds	r3, #1
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
 800192a:	4b7e      	ldr	r3, [pc, #504]	; (8001b24 <calibrate_encoder+0x594>)
 800192c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001934:	ee17 3a90 	vmov	r3, s15
 8001938:	01db      	lsls	r3, r3, #7
 800193a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800193c:	429a      	cmp	r2, r3
 800193e:	dbe8      	blt.n	8001912 <calibrate_encoder+0x382>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <calibrate_encoder+0x594>)
 800194c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001950:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001b34 <calibrate_encoder+0x5a4>
 8001954:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 2a90 	vmov	r2, s15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	61da      	str	r2, [r3, #28]

	// check for valid calibration...ezero mean is in counts, should be less than CPR
	if (cal->ezero < ENC_CPR){
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001970:	f280 80bf 	bge.w	8001af2 <calibrate_encoder+0x562>
		printf("Valid calibration. Mean elec zero: %d\n\r", cal->ezero);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	4619      	mov	r1, r3
 800197a:	486f      	ldr	r0, [pc, #444]	; (8001b38 <calibrate_encoder+0x5a8>)
 800197c:	f00a fd94 	bl	800c4a8 <iprintf>
		cal->valid_cal = 1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		// Moving average to filter out cogging ripple
		int window = SAMPLES_PER_PPAIR;
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
		int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f5c3 2300 	rsb	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	da01      	bge.n	800199c <calibrate_encoder+0x40c>
 8001998:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800199c:	131b      	asrs	r3, r3, #12
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i = 0; i<N_LUT; i++){
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a4:	e0a0      	b.n	8001ae8 <calibrate_encoder+0x558>
				int moving_avg = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int j = (-window)/2; j<(window)/2; j++){
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	0fda      	lsrs	r2, r3, #31
 80019ae:	4413      	add	r3, r2
 80019b0:	105b      	asrs	r3, r3, #1
 80019b2:	425b      	negs	r3, r3
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
 80019b6:	e068      	b.n	8001a8a <calibrate_encoder+0x4fa>
					int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80019b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <calibrate_encoder+0x594>)
 80019c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001b34 <calibrate_encoder+0x5a4>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001b34 <calibrate_encoder+0x5a4>
 80019d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 3a90 	vmov	r3, s15
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
					if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da13      	bge.n	8001a22 <calibrate_encoder+0x492>
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <calibrate_encoder+0x594>)
 8001a06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a0a:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001b34 <calibrate_encoder+0x5a4>
 8001a0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1a:	ee17 3a90 	vmov	r3, s15
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a20:	e027      	b.n	8001a72 <calibrate_encoder+0x4e2>
					else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <calibrate_encoder+0x594>)
 8001a2e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a32:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001b34 <calibrate_encoder+0x5a4>
 8001a36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dd12      	ble.n	8001a72 <calibrate_encoder+0x4e2>
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a56:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <calibrate_encoder+0x594>)
 8001a58:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a5c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001b34 <calibrate_encoder+0x5a4>
 8001a60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6c:	ee17 3a90 	vmov	r3, s15
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
					moving_avg += cal->error_arr[index];
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a76:	330a      	adds	r3, #10
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a80:	4413      	add	r3, r2
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int j = (-window)/2; j<(window)/2; j++){
 8001a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a86:	3301      	adds	r3, #1
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	0fda      	lsrs	r2, r3, #31
 8001a8e:	4413      	add	r3, r2
 8001a90:	105b      	asrs	r3, r3, #1
 8001a92:	461a      	mov	r2, r3
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	4293      	cmp	r3, r2
 8001a98:	db8e      	blt.n	80019b8 <calibrate_encoder+0x428>
				}
				moving_avg = moving_avg/window;
 8001a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
				int lut_index = lut_offset + i;
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa8:	4413      	add	r3, r2
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
				if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab0:	dd02      	ble.n	8001ab8 <calibrate_encoder+0x528>
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	3b80      	subs	r3, #128	; 0x80
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
				cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ac8:	330a      	adds	r3, #10
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	605a      	str	r2, [r3, #4]
				printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001adc:	4817      	ldr	r0, [pc, #92]	; (8001b3c <calibrate_encoder+0x5ac>)
 8001ade:	f00a fce3 	bl	800c4a8 <iprintf>
		for(int i = 0; i<N_LUT; i++){
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	2b7f      	cmp	r3, #127	; 0x7f
 8001aec:	f77f af5b 	ble.w	80019a6 <calibrate_encoder+0x416>
 8001af0:	e009      	b.n	8001b06 <calibrate_encoder+0x576>
			}

	} else {
		printf("Bad calibration, won't save the data. Mean elec zero: %d\n\r", cal->ezero);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <calibrate_encoder+0x5b0>)
 8001afa:	f00a fcd5 	bl	800c4a8 <iprintf>
		cal->valid_cal = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	}

	cal->started = 0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b14:	e002      	b.n	8001b1c <calibrate_encoder+0x58c>
				return;
 8001b16:	bf00      	nop
 8001b18:	e000      	b.n	8001b1c <calibrate_encoder+0x58c>
		return;
 8001b1a:	bf00      	nop

}
 8001b1c:	3748      	adds	r7, #72	; 0x48
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000033c 	.word	0x2000033c
 8001b28:	40c90fdb 	.word	0x40c90fdb
 8001b2c:	08010598 	.word	0x08010598
 8001b30:	3ba0d97c 	.word	0x3ba0d97c
 8001b34:	43000000 	.word	0x43000000
 8001b38:	080105a8 	.word	0x080105a8
 8001b3c:	080105d0 	.word	0x080105d0
 8001b40:	080105dc 	.word	0x080105dc

08001b44 <check_encoder_init>:
void measure_lr(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
	// TODO: implement this?
}


int check_encoder_init(EncoderStruct *encoder, ControllerStruct *controller, CalStruct *cal){
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b091      	sub	sp, #68	; 0x44
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]

	printf("\n\r Checking encoder initialization\n\r");
 8001b50:	4892      	ldr	r0, [pc, #584]	; (8001d9c <check_encoder_init+0x258>)
 8001b52:	f00a fca9 	bl	800c4a8 <iprintf>

	float theta_elec_read = 0.0f;
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float theta_elec_err = 0.0f;
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
	int theta_elec_counts = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	e026      	b.n	8001bba <check_encoder_init+0x76>
		cal->theta_ref = PI_F/2.0f;//W_CAL*cal->time;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a8c      	ldr	r2, [pc, #560]	; (8001da0 <check_encoder_init+0x25c>)
 8001b70:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001b7c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b86:	461a      	mov	r2, r3
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001b90:	4b84      	ldr	r3, [pc, #528]	; (8001da4 <check_encoder_init+0x260>)
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001baa:	332c      	adds	r3, #44	; 0x2c
 8001bac:	4619      	mov	r1, r3
 8001bae:	68b8      	ldr	r0, [r7, #8]
 8001bb0:	f001 fa72 	bl	8003098 <commutate>
	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	ddd3      	ble.n	8001b6c <check_encoder_init+0x28>
	}

	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e033      	b.n	8001c32 <check_encoder_init+0xee>
		cal->theta_ref = 0.0f;//W_CAL*cal->time;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bdc:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001be6:	461a      	mov	r2, r3
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001bf0:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <check_encoder_init+0x260>)
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001c0a:	332c      	adds	r3, #44	; 0x2c
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	f001 fa42 	bl	8003098 <commutate>
		if (i==15000) {
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d106      	bne.n	8001c2c <check_encoder_init+0xe8>
			theta_elec_read = encoder->elec_angle;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
			theta_elec_counts = encoder->count;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	ddc6      	ble.n	8001bca <check_encoder_init+0x86>
		}
	}

	// how far from elec angle of 0?
	if (theta_elec_read > PI_F) { theta_elec_err = theta_elec_read - 2.0f*PI_F; } // wrap from -PI to PI instead of 0 to 2*PI
 8001c3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c40:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001da8 <check_encoder_init+0x264>
 8001c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	dd08      	ble.n	8001c60 <check_encoder_init+0x11c>
 8001c4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c52:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001dac <check_encoder_init+0x268>
 8001c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c5a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001c5e:	e001      	b.n	8001c64 <check_encoder_init+0x120>
	else { theta_elec_err = theta_elec_read; };
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28

	float diff_zeros = ((float)(theta_elec_counts-E_ZERO))*PPAIRS/((float)ENC_CPR);
 8001c64:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <check_encoder_init+0x26c>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <check_encoder_init+0x260>)
 8001c76:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001db4 <check_encoder_init+0x270>
 8001c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c86:	edc7 7a06 	vstr	s15, [r7, #24]
	int diff_int = diff_zeros;
 8001c8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c92:	ee17 3a90 	vmov	r3, s15
 8001c96:	617b      	str	r3, [r7, #20]
	diff_zeros = diff_zeros - (float)diff_int;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001caa:	edc7 7a06 	vstr	s15, [r7, #24]
	diff_zeros = diff_zeros>0.5 ? diff_zeros-1.0 : diff_zeros<-0.5 ? diff_zeros+1.0 : diff_zeros;
 8001cae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	dd06      	ble.n	8001cce <check_encoder_init+0x18a>
 8001cc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ccc:	e011      	b.n	8001cf2 <check_encoder_init+0x1ae>
 8001cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cd2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	d506      	bpl.n	8001cee <check_encoder_init+0x1aa>
 8001ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cec:	e001      	b.n	8001cf2 <check_encoder_init+0x1ae>
 8001cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf2:	edc7 7a06 	vstr	s15, [r7, #24]

	// Print difference and status of initialization
	if ((theta_elec_err < (PI_F/2.0f)) && (theta_elec_err > (-PI_F/2.0f)) ) { // initialization is good
 8001cf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cfa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001db8 <check_encoder_init+0x274>
 8001cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d526      	bpl.n	8001d56 <check_encoder_init+0x212>
 8001d08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d0c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001dbc <check_encoder_init+0x278>
 8001d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	dd1d      	ble.n	8001d56 <check_encoder_init+0x212>
		printf(" Good initialization! \n\r");
 8001d1a:	4829      	ldr	r0, [pc, #164]	; (8001dc0 <check_encoder_init+0x27c>)
 8001d1c:	f00a fbc4 	bl	800c4a8 <iprintf>
		printf(" Angle Error = %.2f, Old Zero = %d, New Zero = %d, Zero Diff (Elec Rots) = %.2f\r\n", theta_elec_err, E_ZERO, theta_elec_counts, diff_zeros);
 8001d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d22:	f7fe fc31 	bl	8000588 <__aeabi_f2d>
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <check_encoder_init+0x26c>)
 8001d2c:	69de      	ldr	r6, [r3, #28]
 8001d2e:	69b8      	ldr	r0, [r7, #24]
 8001d30:	f7fe fc2a 	bl	8000588 <__aeabi_f2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	9600      	str	r6, [sp, #0]
 8001d42:	4622      	mov	r2, r4
 8001d44:	462b      	mov	r3, r5
 8001d46:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <check_encoder_init+0x280>)
 8001d48:	f00a fbae 	bl	800c4a8 <iprintf>
		encoder->init_status = 1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001d54:	e01c      	b.n	8001d90 <check_encoder_init+0x24c>
	} else { // electrical angle error is larger than 90deg
		printf(" BAD initialization! \n\r");
 8001d56:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <check_encoder_init+0x284>)
 8001d58:	f00a fba6 	bl	800c4a8 <iprintf>
		printf(" Angle Error = %.2f, Old Zero = %d, New Zero = %d, Zero Diff (Elec Rots) = %.2f\r\n", theta_elec_err, E_ZERO, theta_elec_counts, diff_zeros);
 8001d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d5e:	f7fe fc13 	bl	8000588 <__aeabi_f2d>
 8001d62:	4604      	mov	r4, r0
 8001d64:	460d      	mov	r5, r1
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <check_encoder_init+0x26c>)
 8001d68:	69de      	ldr	r6, [r3, #28]
 8001d6a:	69b8      	ldr	r0, [r7, #24]
 8001d6c:	f7fe fc0c 	bl	8000588 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9600      	str	r6, [sp, #0]
 8001d7e:	4622      	mov	r2, r4
 8001d80:	462b      	mov	r3, r5
 8001d82:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <check_encoder_init+0x280>)
 8001d84:	f00a fb90 	bl	800c4a8 <iprintf>
		encoder->init_status = 0;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	}

	// return encoder->elec_angle? encoder->count?
	return theta_elec_counts; //theta_elec_read;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24

} // end check_encoder_init function
 8001d92:	4618      	mov	r0, r3
 8001d94:	3734      	adds	r7, #52	; 0x34
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08010618 	.word	0x08010618
 8001da0:	3fc90fdb 	.word	0x3fc90fdb
 8001da4:	2000033c 	.word	0x2000033c
 8001da8:	40490fdb 	.word	0x40490fdb
 8001dac:	40c90fdb 	.word	0x40c90fdb
 8001db0:	2000043c 	.word	0x2000043c
 8001db4:	49000000 	.word	0x49000000
 8001db8:	3fc90fdb 	.word	0x3fc90fdb
 8001dbc:	bfc90fdb 	.word	0xbfc90fdb
 8001dc0:	08010640 	.word	0x08010640
 8001dc4:	0801065c 	.word	0x0801065c
 8001dc8:	080106b0 	.word	0x080106b0

08001dcc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001dd8:	2203      	movs	r2, #3
 8001dda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001dea:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001dee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001df6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <MX_CAN1_Init+0x64>)
 8001e1e:	f005 fc8b 	bl	8007738 <HAL_CAN_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001e28:	f003 fb20 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000314 	.word	0x20000314
 8001e34:	40006400 	.word	0x40006400

08001e38 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_CAN_MspInit+0x84>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d12c      	bne.n	8001eb4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_CAN_MspInit+0x88>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_CAN_MspInit+0x88>)
 8001e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_CAN_MspInit+0x88>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_CAN_MspInit+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <HAL_CAN_MspInit+0x88>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_CAN_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ea4:	2309      	movs	r3, #9
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_CAN_MspInit+0x8c>)
 8001eb0:	f006 f9f4 	bl	800829c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40006400 	.word	0x40006400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <can_rx_init+0x54>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	015b      	lsls	r3, r3, #5
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3328      	adds	r3, #40	; 0x28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <can_rx_init+0x58>)
 8001f10:	f005 fd0e 	bl	8007930 <HAL_CAN_ConfigFilter>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000043c 	.word	0x2000043c
 8001f20:	20000314 	.word	0x20000314

08001f24 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 6; 			// message size of 8 byte
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2206      	movs	r2, #6
 8001f30:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <can_tx_init+0x30>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	2000043c 	.word	0x2000043c

08001f58 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6178      	str	r0, [r7, #20]
 8001f60:	460b      	mov	r3, r1
 8001f62:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f66:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f6a:	ed87 1a01 	vstr	s2, [r7, #4]
 8001f6e:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <pack_reply+0xec>)
 8001f72:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <pack_reply+0xec>)
 8001f78:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001f7c:	2010      	movs	r0, #16
 8001f7e:	eeb0 1a47 	vmov.f32	s2, s14
 8001f82:	eef0 0a67 	vmov.f32	s1, s15
 8001f86:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f8a:	f003 fb5f 	bl	800564c <float_to_uint>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <pack_reply+0xec>)
 8001f92:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <pack_reply+0xec>)
 8001f98:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8001f9c:	200c      	movs	r0, #12
 8001f9e:	eeb0 1a47 	vmov.f32	s2, s14
 8001fa2:	eef0 0a67 	vmov.f32	s1, s15
 8001fa6:	ed97 0a02 	vldr	s0, [r7, #8]
 8001faa:	f003 fb4f 	bl	800564c <float_to_uint>
 8001fae:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <pack_reply+0xec>)
 8001fb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fb6:	eeb1 7a67 	vneg.f32	s14, s15
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <pack_reply+0xec>)
 8001fbc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <pack_reply+0xec>)
 8001fc6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <pack_reply+0xec>)
 8001fd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <pack_reply+0xec>)
 8001fd6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <pack_reply+0xec>)
 8001fe0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe8:	200c      	movs	r0, #12
 8001fea:	eeb0 1a67 	vmov.f32	s2, s15
 8001fee:	eef0 0a66 	vmov.f32	s1, s13
 8001ff2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff6:	f003 fb29 	bl	800564c <float_to_uint>
 8001ffa:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	7cfa      	ldrb	r2, [r7, #19]
 8002000:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	121b      	asrs	r3, r3, #8
 8002006:	b2da      	uxtb	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	b2da      	uxtb	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	111b      	asrs	r3, r3, #4
 8002018:	b2da      	uxtb	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	b2da      	uxtb	r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	121b      	asrs	r3, r3, #8
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4413      	add	r3, r2
 800202c:	b2da      	uxtb	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	719a      	strb	r2, [r3, #6]
    }
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000033c 	.word	0x2000033c

08002048 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8002048:	b084      	sub	sp, #16
 800204a:	b590      	push	{r4, r7, lr}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8002058:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8002066:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002070:	0912      	lsrs	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002078:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002082:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 800208a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002094:	0912      	lsrs	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	4313      	orrs	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 800209c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020a6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80020aa:	4313      	orrs	r3, r2
 80020ac:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80020ae:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <unpack_cmd+0x160>)
 80020b0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80020b4:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <unpack_cmd+0x160>)
 80020b6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80020ba:	2110      	movs	r1, #16
 80020bc:	eef0 0a47 	vmov.f32	s1, s14
 80020c0:	eeb0 0a67 	vmov.f32	s0, s15
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f003 faf4 	bl	80056b2 <uint_to_float>
 80020ca:	eef0 7a40 	vmov.f32	s15, s0
 80020ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d0:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <unpack_cmd+0x160>)
 80020d6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80020da:	4b33      	ldr	r3, [pc, #204]	; (80021a8 <unpack_cmd+0x160>)
 80020dc:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80020e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e2:	1d1c      	adds	r4, r3, #4
 80020e4:	210c      	movs	r1, #12
 80020e6:	eef0 0a47 	vmov.f32	s1, s14
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	6938      	ldr	r0, [r7, #16]
 80020f0:	f003 fadf 	bl	80056b2 <uint_to_float>
 80020f4:	eef0 7a40 	vmov.f32	s15, s0
 80020f8:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <unpack_cmd+0x160>)
 80020fe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002104:	f103 0408 	add.w	r4, r3, #8
 8002108:	210c      	movs	r1, #12
 800210a:	eef0 0a67 	vmov.f32	s1, s15
 800210e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80021ac <unpack_cmd+0x164>
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f003 facd 	bl	80056b2 <uint_to_float>
 8002118:	eef0 7a40 	vmov.f32	s15, s0
 800211c:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <unpack_cmd+0x160>)
 8002122:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002128:	f103 040c 	add.w	r4, r3, #12
 800212c:	210c      	movs	r1, #12
 800212e:	eef0 0a67 	vmov.f32	s1, s15
 8002132:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80021ac <unpack_cmd+0x164>
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f003 fabb 	bl	80056b2 <uint_to_float>
 800213c:	eef0 7a40 	vmov.f32	s15, s0
 8002140:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <unpack_cmd+0x160>)
 8002146:	edd3 7a03 	vldr	s15, [r3, #12]
 800214a:	eeb1 7a67 	vneg.f32	s14, s15
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <unpack_cmd+0x160>)
 8002150:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <unpack_cmd+0x160>)
 800215a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800215e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <unpack_cmd+0x160>)
 8002164:	ed93 7a03 	vldr	s14, [r3, #12]
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <unpack_cmd+0x160>)
 800216a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800216e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <unpack_cmd+0x160>)
 8002174:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217e:	f103 0410 	add.w	r4, r3, #16
 8002182:	210c      	movs	r1, #12
 8002184:	eef0 0a67 	vmov.f32	s1, s15
 8002188:	eeb0 0a66 	vmov.f32	s0, s13
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f003 fa90 	bl	80056b2 <uint_to_float>
 8002192:	eef0 7a40 	vmov.f32	s15, s0
 8002196:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021a4:	b004      	add	sp, #16
 80021a6:	4770      	bx	lr
 80021a8:	2000033c 	.word	0x2000033c
 80021ac:	00000000 	.word	0x00000000

080021b0 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80021c2:	2200      	movs	r2, #0
 80021c4:	2110      	movs	r1, #16
 80021c6:	480f      	ldr	r0, [pc, #60]	; (8002204 <drv_spi_write+0x54>)
 80021c8:	f006 f9fc 	bl	80085c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1c9a      	adds	r2, r3, #2
 80021d2:	2364      	movs	r3, #100	; 0x64
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <drv_spi_write+0x58>)
 80021da:	f007 f8ce 	bl	800937a <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80021de:	bf00      	nop
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <drv_spi_write+0x58>)
 80021e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d0f9      	beq.n	80021e0 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80021ec:	2201      	movs	r2, #1
 80021ee:	2110      	movs	r1, #16
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <drv_spi_write+0x54>)
 80021f2:	f006 f9e7 	bl	80085c4 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	885b      	ldrh	r3, [r3, #2]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40020000 	.word	0x40020000
 8002208:	200094c0 	.word	0x200094c0

0800220c <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	463b      	mov	r3, r7
 8002214:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8002218:	463b      	mov	r3, r7
 800221a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ffc6 	bl	80021b0 <drv_spi_write>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	463b      	mov	r3, r7
 8002236:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 800223a:	463b      	mov	r3, r7
 800223c:	f248 0101 	movw	r1, #32769	; 0x8001
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffb5 	bl	80021b0 <drv_spi_write>
 8002246:	4603      	mov	r3, r0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	e883 0003 	stmia.w	r3, {r0, r1}
 800225e:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	02db      	lsls	r3, r3, #11
 8002264:	b21b      	sxth	r3, r3
 8002266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226e:	b21b      	sxth	r3, r3
 8002270:	b29a      	uxth	r2, r3
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff99 	bl	80021b0 <drv_spi_write>
 800227e:	4603      	mov	r3, r0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	f107 0408 	add.w	r4, r7, #8
 8002292:	e884 0003 	stmia.w	r4, {r0, r1}
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	02db      	lsls	r3, r3, #11
 800229e:	b21a      	sxth	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff7d 	bl	80021b0 <drv_spi_write>
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd90      	pop	{r4, r7, pc}

080022be <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80022be:	b590      	push	{r4, r7, lr}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	f107 0408 	add.w	r4, r7, #8
 80022c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022da:	b21a      	sxth	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	01db      	lsls	r3, r3, #7
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b21a      	sxth	r2, r3
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	b21b      	sxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	b21a      	sxth	r2, r3
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	b21b      	sxth	r3, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	b21a      	sxth	r2, r3
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	b21b      	sxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	b21a      	sxth	r2, r3
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	b21b      	sxth	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b21a      	sxth	r2, r3
 8002322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21b      	sxth	r3, r3
 800232a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800232c:	8afa      	ldrh	r2, [r7, #22]
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff3b 	bl	80021b0 <drv_spi_write>
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}

08002342 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8002342:	b590      	push	{r4, r7, lr}
 8002344:	b087      	sub	sp, #28
 8002346:	af00      	add	r7, sp, #0
 8002348:	f107 0408 	add.w	r4, r7, #8
 800234c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	029b      	lsls	r3, r3, #10
 8002358:	b21b      	sxth	r3, r3
 800235a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800235e:	b21a      	sxth	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21b      	sxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b21a      	sxth	r2, r3
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	b21b      	sxth	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	b21a      	sxth	r2, r3
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21a      	sxth	r2, r3
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	b21b      	sxth	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b21b      	sxth	r3, r3
 8002386:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002388:	8afa      	ldrh	r2, [r7, #22]
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff0d 	bl	80021b0 <drv_spi_write>
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}

0800239e <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 800239e:	b590      	push	{r4, r7, lr}
 80023a0:	b087      	sub	sp, #28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	f107 0408 	add.w	r4, r7, #8
 80023a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	019b      	lsls	r3, r3, #6
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21a      	sxth	r2, r3
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	015b      	lsls	r3, r3, #5
 80023de:	b21b      	sxth	r3, r3
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	b21a      	sxth	r2, r3
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	4313      	orrs	r3, r2
 8002400:	b21a      	sxth	r2, r3
 8002402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b21b      	sxth	r3, r3
 800240a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800240c:	8afa      	ldrh	r2, [r7, #22]
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fecb 	bl	80021b0 <drv_spi_write>
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}

08002422 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	463b      	mov	r3, r7
 800242a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 800242e:	2202      	movs	r2, #2
 8002430:	463b      	mov	r3, r7
 8002432:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002436:	f7ff ff0b 	bl	8002250 <drv_read_register>
 800243a:	4603      	mov	r3, r0
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	2202      	movs	r2, #2
 8002446:	4639      	mov	r1, r7
 8002448:	c903      	ldmia	r1, {r0, r1}
 800244a:	f7ff ff1d 	bl	8002288 <drv_write_register>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	463b      	mov	r3, r7
 800245e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002462:	2202      	movs	r2, #2
 8002464:	463b      	mov	r3, r7
 8002466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800246a:	f7ff fef1 	bl	8002250 <drv_read_register>
 800246e:	4603      	mov	r3, r0
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	2202      	movs	r2, #2
 800247a:	4639      	mov	r1, r7
 800247c:	c903      	ldmia	r1, {r0, r1}
 800247e:	f7ff ff03 	bl	8002288 <drv_write_register>
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <drv_check_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_check_faults(DRVStruct drv, FSMStruct* fsmstate){
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	e883 0003 	stmia.w	r3, {r0, r1}
 800249a:	607a      	str	r2, [r7, #4]
    uint16_t val1 = drv_read_FSR1(drv);
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024a4:	f7ff feb2 	bl	800220c <drv_read_FSR1>
 80024a8:	4603      	mov	r3, r0
 80024aa:	82fb      	strh	r3, [r7, #22]
    uint16_t val2 = drv_read_FSR2(drv);
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024b4:	f7ff febb 	bl	800222e <drv_read_FSR2>
 80024b8:	4603      	mov	r3, r0
 80024ba:	82bb      	strh	r3, [r7, #20]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 80024bc:	8afb      	ldrh	r3, [r7, #22]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <drv_check_faults+0x40>
 80024c6:	485b      	ldr	r0, [pc, #364]	; (8002634 <drv_check_faults+0x1a8>)
 80024c8:	f009 ffee 	bl	800c4a8 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 80024cc:	8afb      	ldrh	r3, [r7, #22]
 80024ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <drv_check_faults+0x50>
 80024d6:	4858      	ldr	r0, [pc, #352]	; (8002638 <drv_check_faults+0x1ac>)
 80024d8:	f009 ffe6 	bl	800c4a8 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 80024dc:	8afb      	ldrh	r3, [r7, #22]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <drv_check_faults+0x60>
 80024e6:	4855      	ldr	r0, [pc, #340]	; (800263c <drv_check_faults+0x1b0>)
 80024e8:	f009 ffde 	bl	800c4a8 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 80024ec:	8afb      	ldrh	r3, [r7, #22]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <drv_check_faults+0x70>
 80024f6:	4852      	ldr	r0, [pc, #328]	; (8002640 <drv_check_faults+0x1b4>)
 80024f8:	f009 ffd6 	bl	800c4a8 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 80024fc:	8afb      	ldrh	r3, [r7, #22]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <drv_check_faults+0x80>
 8002506:	484f      	ldr	r0, [pc, #316]	; (8002644 <drv_check_faults+0x1b8>)
 8002508:	f009 ffce 	bl	800c4a8 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 800250c:	8afb      	ldrh	r3, [r7, #22]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <drv_check_faults+0x90>
 8002516:	484c      	ldr	r0, [pc, #304]	; (8002648 <drv_check_faults+0x1bc>)
 8002518:	f009 ffc6 	bl	800c4a8 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 800251c:	8afb      	ldrh	r3, [r7, #22]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <drv_check_faults+0xa0>
 8002526:	4849      	ldr	r0, [pc, #292]	; (800264c <drv_check_faults+0x1c0>)
 8002528:	f009 ffbe 	bl	800c4a8 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 800252c:	8afb      	ldrh	r3, [r7, #22]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <drv_check_faults+0xb0>
 8002536:	4846      	ldr	r0, [pc, #280]	; (8002650 <drv_check_faults+0x1c4>)
 8002538:	f009 ffb6 	bl	800c4a8 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <drv_check_faults+0xc0>
 8002546:	4843      	ldr	r0, [pc, #268]	; (8002654 <drv_check_faults+0x1c8>)
 8002548:	f009 ffae 	bl	800c4a8 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 800254c:	8afb      	ldrh	r3, [r7, #22]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <drv_check_faults+0xd0>
 8002556:	4840      	ldr	r0, [pc, #256]	; (8002658 <drv_check_faults+0x1cc>)
 8002558:	f009 ffa6 	bl	800c4a8 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 800255c:	8afb      	ldrh	r3, [r7, #22]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <drv_check_faults+0xe0>
 8002566:	483d      	ldr	r0, [pc, #244]	; (800265c <drv_check_faults+0x1d0>)
 8002568:	f009 ff9e 	bl	800c4a8 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 800256c:	8abb      	ldrh	r3, [r7, #20]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <drv_check_faults+0xf0>
 8002576:	483a      	ldr	r0, [pc, #232]	; (8002660 <drv_check_faults+0x1d4>)
 8002578:	f009 ff96 	bl	800c4a8 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 800257c:	8abb      	ldrh	r3, [r7, #20]
 800257e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <drv_check_faults+0x100>
 8002586:	4837      	ldr	r0, [pc, #220]	; (8002664 <drv_check_faults+0x1d8>)
 8002588:	f009 ff8e 	bl	800c4a8 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 800258c:	8abb      	ldrh	r3, [r7, #20]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <drv_check_faults+0x110>
 8002596:	4834      	ldr	r0, [pc, #208]	; (8002668 <drv_check_faults+0x1dc>)
 8002598:	f009 ff86 	bl	800c4a8 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 800259c:	8abb      	ldrh	r3, [r7, #20]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <drv_check_faults+0x120>
 80025a6:	4831      	ldr	r0, [pc, #196]	; (800266c <drv_check_faults+0x1e0>)
 80025a8:	f009 ff7e 	bl	800c4a8 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80025ac:	8abb      	ldrh	r3, [r7, #20]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <drv_check_faults+0x130>
 80025b6:	482e      	ldr	r0, [pc, #184]	; (8002670 <drv_check_faults+0x1e4>)
 80025b8:	f009 ff76 	bl	800c4a8 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 80025bc:	8abb      	ldrh	r3, [r7, #20]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <drv_check_faults+0x140>
 80025c6:	482b      	ldr	r0, [pc, #172]	; (8002674 <drv_check_faults+0x1e8>)
 80025c8:	f009 ff6e 	bl	800c4a8 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 80025cc:	8abb      	ldrh	r3, [r7, #20]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <drv_check_faults+0x150>
 80025d6:	4828      	ldr	r0, [pc, #160]	; (8002678 <drv_check_faults+0x1ec>)
 80025d8:	f009 ff66 	bl	800c4a8 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 80025dc:	8abb      	ldrh	r3, [r7, #20]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <drv_check_faults+0x160>
 80025e6:	4825      	ldr	r0, [pc, #148]	; (800267c <drv_check_faults+0x1f0>)
 80025e8:	f009 ff5e 	bl	800c4a8 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 80025ec:	8abb      	ldrh	r3, [r7, #20]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <drv_check_faults+0x170>
 80025f6:	4822      	ldr	r0, [pc, #136]	; (8002680 <drv_check_faults+0x1f4>)
 80025f8:	f009 ff56 	bl	800c4a8 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 80025fc:	8abb      	ldrh	r3, [r7, #20]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <drv_check_faults+0x180>
 8002606:	481f      	ldr	r0, [pc, #124]	; (8002684 <drv_check_faults+0x1f8>)
 8002608:	f009 ff4e 	bl	800c4a8 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 800260c:	8abb      	ldrh	r3, [r7, #20]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <drv_check_faults+0x190>
 8002616:	481c      	ldr	r0, [pc, #112]	; (8002688 <drv_check_faults+0x1fc>)
 8002618:	f009 ff46 	bl	800c4a8 <iprintf>

    // TODO: store fault values for using in fault mode?
    if(val1 & (1<<10)){
 800261c:	8afb      	ldrh	r3, [r7, #22]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <drv_check_faults+0x1a0>
    	fsmstate->next_state = FAULT_MODE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2207      	movs	r2, #7
 800262a:	705a      	strb	r2, [r3, #1]
    }

}
 800262c:	bf00      	nop
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	080106c8 	.word	0x080106c8
 8002638:	080106d4 	.word	0x080106d4
 800263c:	080106e0 	.word	0x080106e0
 8002640:	080106e8 	.word	0x080106e8
 8002644:	080106f0 	.word	0x080106f0
 8002648:	080106f8 	.word	0x080106f8
 800264c:	08010704 	.word	0x08010704
 8002650:	08010710 	.word	0x08010710
 8002654:	0801071c 	.word	0x0801071c
 8002658:	08010728 	.word	0x08010728
 800265c:	08010734 	.word	0x08010734
 8002660:	08010740 	.word	0x08010740
 8002664:	08010748 	.word	0x08010748
 8002668:	08010750 	.word	0x08010750
 800266c:	08010758 	.word	0x08010758
 8002670:	08010760 	.word	0x08010760
 8002674:	08010768 	.word	0x08010768
 8002678:	08010774 	.word	0x08010774
 800267c:	08010780 	.word	0x08010780
 8002680:	0801078c 	.word	0x0801078c
 8002684:	08010798 	.word	0x08010798
 8002688:	080107a4 	.word	0x080107a4

0800268c <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b07      	cmp	r3, #7
 800269a:	d901      	bls.n	80026a0 <flash_writer_init+0x14>
 800269c:	2307      	movs	r3, #7
 800269e:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <flash_writer_init+0x38>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20000000 	.word	0x20000000

080026c8 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 80026d0:	f003 fcfa 	bl	80060c8 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80026d4:	20f1      	movs	r0, #241	; 0xf1
 80026d6:	f003 fdb3 	bl	8006240 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <flash_writer_open+0x34>)
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	2102      	movs	r1, #2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fd16 	bl	8006118 <FLASH_EraseSector>
    fw->ready = true;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000020 	.word	0x20000020

08002700 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	1d3c      	adds	r4, r7, #4
 8002708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800270c:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fd5a 	bl	80061d8 <FLASH_ProgramWord>
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}

0800272c <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	f107 040c 	add.w	r4, r7, #12
 8002736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fd41 	bl	80061d8 <FLASH_ProgramWord>
}
 8002756:	bf00      	nop
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd90      	pop	{r4, r7, pc}

0800275e <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 8002766:	f003 fcc7 	bl	80060f8 <FLASH_Lock>
    fw->ready = false;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 8002778:	b490      	push	{r4, r7}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	1d3c      	adds	r4, r7, #4
 8002780:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002784:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <flash_read_int+0x28>)
 800278a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	681b      	ldr	r3, [r3, #0]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bc90      	pop	{r4, r7}
 800279e:	4770      	bx	lr
 80027a0:	20000000 	.word	0x20000000

080027a4 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80027a4:	b490      	push	{r4, r7}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	1d3c      	adds	r4, r7, #4
 80027ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027b0:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <flash_read_float+0x30>)
 80027b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	ee07 3a90 	vmov	s15, r3
}
 80027c6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc90      	pop	{r4, r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000

080027d8 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80027f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800280a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800280e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002812:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800281c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002824:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002828:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <set_dtc+0x140>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d136      	bne.n	800289e <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002830:	4b3a      	ldr	r3, [pc, #232]	; (800291c <set_dtc+0x144>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800283e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	4b35      	ldr	r3, [pc, #212]	; (800291c <set_dtc+0x144>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800284e:	ee17 2a90 	vmov	r2, s15
 8002852:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002854:	4b31      	ldr	r3, [pc, #196]	; (800291c <set_dtc+0x144>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002862:	edd7 7a04 	vldr	s15, [r7, #16]
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <set_dtc+0x144>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002872:	ee17 2a90 	vmov	r2, s15
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <set_dtc+0x144>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002886:	edd7 7a03 	vldr	s15, [r7, #12]
 800288a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <set_dtc+0x144>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002896:	ee17 2a90 	vmov	r2, s15
 800289a:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 800289c:	e035      	b.n	800290a <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <set_dtc+0x144>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80028b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <set_dtc+0x144>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028bc:	ee17 2a90 	vmov	r2, s15
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <set_dtc+0x144>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <set_dtc+0x144>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e0:	ee17 2a90 	vmov	r2, s15
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <set_dtc+0x144>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <set_dtc+0x144>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002904:	ee17 2a90 	vmov	r2, s15
 8002908:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000043c 	.word	0x2000043c
 800291c:	20009574 	.word	0x20009574

08002920 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <analog_sample+0xec>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10e      	bne.n	800294e <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002930:	4837      	ldr	r0, [pc, #220]	; (8002a10 <analog_sample+0xf0>)
 8002932:	f004 fc80 	bl	8007236 <HAL_ADC_GetValue>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800293e:	4835      	ldr	r0, [pc, #212]	; (8002a14 <analog_sample+0xf4>)
 8002940:	f004 fc79 	bl	8007236 <HAL_ADC_GetValue>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e00d      	b.n	800296a <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800294e:	4831      	ldr	r0, [pc, #196]	; (8002a14 <analog_sample+0xf4>)
 8002950:	f004 fc71 	bl	8007236 <HAL_ADC_GetValue>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800295c:	482c      	ldr	r0, [pc, #176]	; (8002a10 <analog_sample+0xf0>)
 800295e:	f004 fc6a 	bl	8007236 <HAL_ADC_GetValue>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 800296a:	4829      	ldr	r0, [pc, #164]	; (8002a10 <analog_sample+0xf0>)
 800296c:	f004 fb06 	bl	8006f7c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002974:	4826      	ldr	r0, [pc, #152]	; (8002a10 <analog_sample+0xf0>)
 8002976:	f004 fbd3 	bl	8007120 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 800297a:	4827      	ldr	r0, [pc, #156]	; (8002a18 <analog_sample+0xf8>)
 800297c:	f004 fc5b 	bl	8007236 <HAL_ADC_GetValue>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002994:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002a1c <analog_sample+0xfc>
 8002998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80029f0:	eeb1 7a67 	vneg.f32	s14, s15
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80029fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	2000043c 	.word	0x2000043c
 8002a10:	2000023c 	.word	0x2000023c
 8002a14:	20000284 	.word	0x20000284
 8002a18:	200002cc 	.word	0x200002cc
 8002a1c:	3c533318 	.word	0x3c533318

08002a20 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a2a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a2e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002a32:	60b8      	str	r0, [r7, #8]
 8002a34:	6079      	str	r1, [r7, #4]
 8002a36:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002a38:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a3c:	f002 fea6 	bl	800578c <cos_lut>
 8002a40:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002a44:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a48:	f002 fe66 	bl	8005718 <sin_lut>
 8002a4c:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002a50:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a76:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002b20 <abc+0x100>
 8002a7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a82:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a96:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a9a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002b24 <abc+0x104>
 8002a9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aa6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002aaa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002aae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ab2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002ac4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b24 <abc+0x104>
 8002acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ad0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002ad8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002adc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aec:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002b20 <abc+0x100>
 8002af0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002af4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002af8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002afc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	edc3 7a00 	vstr	s15, [r3]
    }
 8002b16:	bf00      	nop
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	3f5db3d7 	.word	0x3f5db3d7
 8002b24:	bf5db3d7 	.word	0xbf5db3d7

08002b28 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002b32:	edc7 0a04 	vstr	s1, [r7, #16]
 8002b36:	ed87 1a03 	vstr	s2, [r7, #12]
 8002b3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002b42:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b46:	f002 fe21 	bl	800578c <cos_lut>
 8002b4a:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002b4e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b52:	f002 fde1 	bl	8005718 <sin_lut>
 8002b56:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002b5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b66:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b6a:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002c3c <dq0+0x114>
 8002b6e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b72:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b76:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b92:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002c40 <dq0+0x118>
 8002b96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b9e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002ba2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ba6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c44 <dq0+0x11c>
 8002bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002bc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bc8:	eeb1 7a67 	vneg.f32	s14, s15
 8002bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bd8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002c40 <dq0+0x118>
 8002bdc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002be8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002bec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c00:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002c3c <dq0+0x114>
 8002c04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c24:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c44 <dq0+0x11c>
 8002c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	edc3 7a00 	vstr	s15, [r3]

    }
 8002c32:	bf00      	nop
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	3f5db3d7 	.word	0x3f5db3d7
 8002c40:	bf5db3d7 	.word	0xbf5db3d7
 8002c44:	3f2aaaab 	.word	0x3f2aaaab

08002c48 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	ed2d 8b02 	vpush	{d8}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	ed87 0a07 	vstr	s0, [r7, #28]
 8002c56:	edc7 0a06 	vstr	s1, [r7, #24]
 8002c5a:	ed87 1a05 	vstr	s2, [r7, #20]
 8002c5e:	edc7 1a04 	vstr	s3, [r7, #16]
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002c68:	ed97 1a04 	vldr	s2, [r7, #16]
 8002c6c:	edd7 0a05 	vldr	s1, [r7, #20]
 8002c70:	ed97 0a06 	vldr	s0, [r7, #24]
 8002c74:	f002 fc6d 	bl	8005552 <fminf3>
 8002c78:	eeb0 8a40 	vmov.f32	s16, s0
 8002c7c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002c80:	edd7 0a05 	vldr	s1, [r7, #20]
 8002c84:	ed97 0a06 	vldr	s0, [r7, #24]
 8002c88:	f002 fc2f 	bl	80054ea <fmaxf3>
 8002c8c:	eef0 7a40 	vmov.f32	s15, s0
 8002c90:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002c94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <svm+0x160>)
 8002ca2:	623b      	str	r3, [r7, #32]
//    // Dead-time compensation
//	float u_comp = DTC_COMP*(-(i_sector==4) + (i_sector==3));
//	float v_comp = DTC_COMP*(-(i_sector==2) + (i_sector==5));
//	float w_comp = DTC_COMP*((i_sector==6) - (i_sector==1));

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002ca4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ca8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002dac <svm+0x164>
 8002cbc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002db0 <svm+0x168>
 8002cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd8:	f002 fbcf 	bl	800547a <fast_fmaxf>
 8002cdc:	eef0 7a40 	vmov.f32	s15, s0
 8002ce0:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002db4 <svm+0x16c>
 8002ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce8:	f002 fbe3 	bl	80054b2 <fast_fminf>
 8002cec:	eef0 7a40 	vmov.f32	s15, s0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002cf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002dac <svm+0x164>
 8002d0e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d12:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d22:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002db0 <svm+0x168>
 8002d26:	eeb0 0a67 	vmov.f32	s0, s15
 8002d2a:	f002 fba6 	bl	800547a <fast_fmaxf>
 8002d2e:	eef0 7a40 	vmov.f32	s15, s0
 8002d32:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002db4 <svm+0x16c>
 8002d36:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3a:	f002 fbba 	bl	80054b2 <fast_fminf>
 8002d3e:	eef0 7a40 	vmov.f32	s15, s0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002dac <svm+0x164>
 8002d60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d64:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d74:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002db0 <svm+0x168>
 8002d78:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7c:	f002 fb7d 	bl	800547a <fast_fmaxf>
 8002d80:	eef0 7a40 	vmov.f32	s15, s0
 8002d84:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002db4 <svm+0x16c>
 8002d88:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8c:	f002 fb91 	bl	80054b2 <fast_fminf>
 8002d90:	eef0 7a40 	vmov.f32	s15, s0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	edc3 7a00 	vstr	s15, [r3]
//	*dtc_v = fminf(fmaxf((v/v_bus + .5f), DTC_MIN), DTC_MAX);
//	*dtc_w = fminf(fmaxf((w/v_bus + .5f), DTC_MIN), DTC_MAX);
//	*/


    }
 8002d9a:	bf00      	nop
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	ecbd 8b02 	vpop	{d8}
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	3ef0a3d7 	.word	0x3ef0a3d7
 8002dac:	3f933333 	.word	0x3f933333
 8002db0:	00000000 	.word	0x00000000
 8002db4:	3f70a3d7 	.word	0x3f70a3d7

08002db8 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dcc:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fcf6 	bl	80027d8 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e00f      	b.n	8002e12 <zero_current+0x5a>
    	analog_sample(controller);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fd94 	bl	8002920 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4413      	add	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dbeb      	blt.n	8002df2 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a4b      	ldr	r2, [pc, #300]	; (8002f78 <init_controller_params+0x138>)
 8002e4c:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a49      	ldr	r2, [pc, #292]	; (8002f78 <init_controller_params+0x138>)
 8002e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <init_controller_params+0x13c>)
 8002e58:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e5c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002f80 <init_controller_params+0x140>
 8002e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 8002e6a:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <init_controller_params+0x13c>)
 8002e6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e70:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002f80 <init_controller_params+0x140>
 8002e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <init_controller_params+0x13c>)
 8002e80:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e84:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002f84 <init_controller_params+0x144>
 8002e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002f88 <init_controller_params+0x148>
 8002e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002eb8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002f8c <init_controller_params+0x14c>
 8002ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 8002ec6:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <init_controller_params+0x150>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002ed0:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <init_controller_params+0x13c>)
 8002ed2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ed6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f94 <init_controller_params+0x154>
 8002eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	d803      	bhi.n	8002eec <init_controller_params+0xac>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <init_controller_params+0x158>)
 8002ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8002eea:	e002      	b.n	8002ef2 <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <init_controller_params+0x15c>)
 8002ef0:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e037      	b.n	8002f68 <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f02:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002fa0 <init_controller_params+0x160>
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002fa4 <init_controller_params+0x164>
 8002f0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f12:	ee16 0a90 	vmov	r0, s13
 8002f16:	f7fd fb37 	bl	8000588 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	ec43 2b10 	vmov	d0, r2, r3
 8002f22:	f00d f809 	bl	800ff38 <exp>
 8002f26:	ec51 0b10 	vmov	r0, r1, d0
 8002f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <init_controller_params+0x168>)
 8002f30:	f7fd fb82 	bl	8000638 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <init_controller_params+0x16c>)
 8002f42:	f7fd f9c3 	bl	80002cc <__adddf3>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f7fd fe6b 	bl	8000c28 <__aeabi_d2f>
 8002f52:	4601      	mov	r1, r0
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	333c      	adds	r3, #60	; 0x3c
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3301      	adds	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f6c:	ddc4      	ble.n	8002ef8 <init_controller_params+0xb8>
    }

    }
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	3d18c7e3 	.word	0x3d18c7e3
 8002f7c:	2000033c 	.word	0x2000033c
 8002f80:	390b75ea 	.word	0x390b75ea
 8002f84:	3851b717 	.word	0x3851b717
 8002f88:	40c90fdb 	.word	0x40c90fdb
 8002f8c:	3dcccccd 	.word	0x3dcccccd
 8002f90:	2000043c 	.word	0x2000043c
 8002f94:	42200000 	.word	0x42200000
 8002f98:	3ca4ffff 	.word	0x3ca4ffff
 8002f9c:	3d24ffff 	.word	0x3d24ffff
 8002fa0:	bc000000 	.word	0xbc000000
 8002fa4:	3d03126f 	.word	0x3d03126f
 8002fa8:	3ff33333 	.word	0x3ff33333
 8002fac:	3ff00000 	.word	0x3ff00000

08002fb0 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <reset_foc+0xe4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fce:	4b31      	ldr	r3, [pc, #196]	; (8003094 <reset_foc+0xe4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd6:	ee17 2a90 	vmov	r2, s15
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <reset_foc+0xe4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <reset_foc+0xe4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffa:	ee17 2a90 	vmov	r2, s15
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <reset_foc+0xe4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003016:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <reset_foc+0xe4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301e:	ee17 2a90 	vmov	r2, s15
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20009574 	.word	0x20009574

08003098 <commutate>:
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);


}
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80030b8:	4bd7      	ldr	r3, [pc, #860]	; (8003418 <commutate+0x380>)
 80030ba:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80030be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	edd3 6a05 	vldr	s13, [r3, #20]
 80030ce:	4bd2      	ldr	r3, [pc, #840]	; (8003418 <commutate+0x380>)
 80030d0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80030d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	ed93 7a05 	vldr	s14, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	edd3 6a06 	vldr	s13, [r3, #24]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	ed93 6a07 	vldr	s12, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3340      	adds	r3, #64	; 0x40
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	eef0 1a46 	vmov.f32	s3, s12
 8003108:	eeb0 1a66 	vmov.f32	s2, s13
 800310c:	eef0 0a47 	vmov.f32	s1, s14
 8003110:	eeb0 0a67 	vmov.f32	s0, s15
 8003114:	f7ff fd08 	bl	8002b28 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800311e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800341c <commutate+0x384>
 8003122:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800312c:	eddf 6abc 	vldr	s13, [pc, #752]	; 8003420 <commutate+0x388>
 8003130:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003144:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800341c <commutate+0x384>
 8003148:	ee27 7a87 	vmul.f32	s14, s15, s14
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003152:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8003420 <commutate+0x388>
 8003156:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800316a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800341c <commutate+0x384>
 800316e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edd3 7a08 	vldr	s15, [r3, #32]
 8003178:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8003420 <commutate+0x388>
 800317c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003190:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003424 <commutate+0x38c>
 8003194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003198:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003428 <commutate+0x390>
 800319c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a0:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800342c <commutate+0x394>
 80031a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80031ae:	4b9a      	ldr	r3, [pc, #616]	; (8003418 <commutate+0x380>)
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80031ca:	eeb0 0a67 	vmov.f32	s0, s15
 80031ce:	4610      	mov	r0, r2
 80031d0:	f002 f9f3 	bl	80055ba <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80031e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e4:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f8:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800320e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800321c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003220:	edd7 7a05 	vldr	s15, [r7, #20]
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800323a:	eef0 0a47 	vmov.f32	s1, s14
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	f002 f936 	bl	80054b2 <fast_fminf>
 8003246:	eeb0 7a40 	vmov.f32	s14, s0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003250:	eef1 7a67 	vneg.f32	s15, s15
 8003254:	eef0 0a67 	vmov.f32	s1, s15
 8003258:	eeb0 0a47 	vmov.f32	s0, s14
 800325c:	f002 f90d 	bl	800547a <fast_fmaxf>
 8003260:	eef0 7a40 	vmov.f32	s15, s0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800327c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003280:	edd7 7a07 	vldr	s15, [r7, #28]
 8003284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800329e:	eef0 0a47 	vmov.f32	s1, s14
 80032a2:	eeb0 0a67 	vmov.f32	s0, s15
 80032a6:	f002 f904 	bl	80054b2 <fast_fminf>
 80032aa:	eeb0 7a40 	vmov.f32	s14, s0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	eef0 0a67 	vmov.f32	s1, s15
 80032bc:	eeb0 0a47 	vmov.f32	s0, s14
 80032c0:	f002 f8db 	bl	800547a <fast_fmaxf>
 80032c4:	eef0 7a40 	vmov.f32	s15, s0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80032da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80032ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	f00c fe87 	bl	8010008 <sqrtf>
 80032fa:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003304:	edd7 7a06 	vldr	s15, [r7, #24]
 8003308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003316:	edd7 7a04 	vldr	s15, [r7, #16]
 800331a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003336:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800333a:	edd7 7a06 	vldr	s15, [r7, #24]
 800333e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003358:	eef0 0a47 	vmov.f32	s1, s14
 800335c:	eeb0 0a67 	vmov.f32	s0, s15
 8003360:	f002 f8a7 	bl	80054b2 <fast_fminf>
 8003364:	eeb0 7a40 	vmov.f32	s14, s0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800336e:	eef1 7a67 	vneg.f32	s15, s15
 8003372:	eef0 0a67 	vmov.f32	s1, s15
 8003376:	eeb0 0a47 	vmov.f32	s0, s14
 800337a:	f002 f87e 	bl	800547a <fast_fmaxf>
 800337e:	eef0 7a40 	vmov.f32	s15, s0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80033a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ac:	eeb0 0a67 	vmov.f32	s0, s15
 80033b0:	f00c fe2a 	bl	8010008 <sqrtf>
 80033b4:	eef0 7a40 	vmov.f32	s15, s0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80033c4:	edd7 0a03 	vldr	s1, [r7, #12]
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f002 f871 	bl	80054b2 <fast_fminf>
 80033d0:	eeb0 7a40 	vmov.f32	s14, s0
 80033d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80033d8:	eef1 7a67 	vneg.f32	s15, s15
 80033dc:	eef0 0a67 	vmov.f32	s1, s15
 80033e0:	eeb0 0a47 	vmov.f32	s0, s14
 80033e4:	f002 f849 	bl	800547a <fast_fmaxf>
 80033e8:	eef0 7a40 	vmov.f32	s15, s0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003404:	eeb0 0a67 	vmov.f32	s0, s15
 8003408:	4610      	mov	r0, r2
 800340a:	f002 f8d6 	bl	80055ba <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	e00d      	b.n	8003434 <commutate+0x39c>
 8003418:	2000033c 	.word	0x2000033c
 800341c:	3f733333 	.word	0x3f733333
 8003420:	3d4ccccd 	.word	0x3d4ccccd
 8003424:	3f933333 	.word	0x3f933333
 8003428:	3f70a3d7 	.word	0x3f70a3d7
 800342c:	3f13cd3a 	.word	0x3f13cd3a
 8003430:	389d4951 	.word	0x389d4951
 8003434:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003438:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003430 <commutate+0x398>
 800343c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	336c      	adds	r3, #108	; 0x6c
 8003460:	461a      	mov	r2, r3
 8003462:	eeb0 1a66 	vmov.f32	s2, s13
 8003466:	eef0 0a47 	vmov.f32	s1, s14
 800346a:	eeb0 0a67 	vmov.f32	s0, s15
 800346e:	f7ff fad7 	bl	8002a20 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3360      	adds	r3, #96	; 0x60
 800349a:	461a      	mov	r2, r3
 800349c:	eef0 1a46 	vmov.f32	s3, s12
 80034a0:	eeb0 1a66 	vmov.f32	s2, s13
 80034a4:	eef0 0a47 	vmov.f32	s1, s14
 80034a8:	eeb0 0a67 	vmov.f32	s0, s15
 80034ac:	f7ff fbcc 	bl	8002c48 <svm>

       set_dtc(controller);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff f991 	bl	80027d8 <set_dtc>

    }
 80034b6:	bf00      	nop
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop

080034c0 <torque_control>:


void torque_control(ControllerStruct *controller){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80034da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80034e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80034fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350a:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <torque_control+0xb0>)
 8003510:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <torque_control+0xb0>)
 8003516:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003522:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800352c:	eef0 0a67 	vmov.f32	s1, s15
 8003530:	eeb0 0a66 	vmov.f32	s0, s13
 8003534:	f001 ffbd 	bl	80054b2 <fast_fminf>
 8003538:	eeb0 7a40 	vmov.f32	s14, s0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003542:	eef1 7a67 	vneg.f32	s15, s15
 8003546:	eef0 0a67 	vmov.f32	s1, s15
 800354a:	eeb0 0a47 	vmov.f32	s0, s14
 800354e:	f001 ff94 	bl	800547a <fast_fmaxf>
 8003552:	eef0 7a40 	vmov.f32	s15, s0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	2000033c 	.word	0x2000033c

08003574 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	785a      	ldrb	r2, [r3, #1]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d00d      	beq.n	80035f4 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9a7 	bl	800392c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	78db      	ldrb	r3, [r3, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	785a      	ldrb	r2, [r3, #1]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f91a 	bl	8003828 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b07      	cmp	r3, #7
 80035fa:	f200 80fc 	bhi.w	80037f6 <run_fsm+0x232>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <run_fsm+0x40>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	080037f1 	.word	0x080037f1
 8003608:	08003625 	.word	0x08003625
 800360c:	08003735 	.word	0x08003735
 8003610:	080037f7 	.word	0x080037f7
 8003614:	080037f1 	.word	0x080037f1
 8003618:	08003771 	.word	0x08003771
 800361c:	080037f1 	.word	0x080037f1
 8003620:	08003795 	.word	0x08003795
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003624:	4b76      	ldr	r3, [pc, #472]	; (8003800 <run_fsm+0x23c>)
 8003626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <run_fsm+0x7c>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800362e:	4b75      	ldr	r3, [pc, #468]	; (8003804 <run_fsm+0x240>)
 8003630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003634:	4a72      	ldr	r2, [pc, #456]	; (8003800 <run_fsm+0x23c>)
 8003636:	4973      	ldr	r1, [pc, #460]	; (8003804 <run_fsm+0x240>)
 8003638:	4873      	ldr	r0, [pc, #460]	; (8003808 <run_fsm+0x244>)
 800363a:	f7fd fea1 	bl	8001380 <order_phases>
				 // exit to menu state
				 fsmstate->next_state = MENU_MODE;
				 fsmstate->ready = 0;
			 }

			 break;
 800363e:	e0da      	b.n	80037f6 <run_fsm+0x232>
			 else if(!comm_encoder_cal.done_cal){
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <run_fsm+0x23c>)
 8003642:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <run_fsm+0x98>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800364a:	4b6e      	ldr	r3, [pc, #440]	; (8003804 <run_fsm+0x240>)
 800364c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003650:	4a6b      	ldr	r2, [pc, #428]	; (8003800 <run_fsm+0x23c>)
 8003652:	496c      	ldr	r1, [pc, #432]	; (8003804 <run_fsm+0x240>)
 8003654:	486c      	ldr	r0, [pc, #432]	; (8003808 <run_fsm+0x244>)
 8003656:	f7fd ff9b 	bl	8001590 <calibrate_encoder>
			 break;
 800365a:	e0cc      	b.n	80037f6 <run_fsm+0x232>
				 if (comm_encoder_cal.valid_cal == 1){
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <run_fsm+0x23c>)
 800365e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003662:	2b01      	cmp	r3, #1
 8003664:	d15f      	bne.n	8003726 <run_fsm+0x162>
					 E_ZERO = comm_encoder_cal.ezero;
 8003666:	4b66      	ldr	r3, [pc, #408]	; (8003800 <run_fsm+0x23c>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4a68      	ldr	r2, [pc, #416]	; (800380c <run_fsm+0x248>)
 800366c:	61d3      	str	r3, [r2, #28]
					 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 800366e:	4b67      	ldr	r3, [pc, #412]	; (800380c <run_fsm+0x248>)
 8003670:	69dc      	ldr	r4, [r3, #28]
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <run_fsm+0x244>)
 8003674:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003678:	4b64      	ldr	r3, [pc, #400]	; (800380c <run_fsm+0x248>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	425b      	negs	r3, r3
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368a:	eddf 6a61 	vldr	s13, [pc, #388]	; 8003810 <run_fsm+0x24c>
 800368e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003692:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003696:	eeb0 0a47 	vmov.f32	s0, s14
 800369a:	f00c fc95 	bl	800ffc8 <fmodf>
 800369e:	eef0 7a40 	vmov.f32	s15, s0
 80036a2:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003814 <run_fsm+0x250>
 80036a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036aa:	ee17 0a90 	vmov	r0, s15
 80036ae:	f7fc ff6b 	bl	8000588 <__aeabi_f2d>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4621      	mov	r1, r4
 80036b8:	4857      	ldr	r0, [pc, #348]	; (8003818 <run_fsm+0x254>)
 80036ba:	f008 fef5 	bl	800c4a8 <iprintf>
					 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80036be:	4b52      	ldr	r3, [pc, #328]	; (8003808 <run_fsm+0x244>)
 80036c0:	4a4f      	ldr	r2, [pc, #316]	; (8003800 <run_fsm+0x23c>)
 80036c2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80036c6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80036ca:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80036ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d2:	4618      	mov	r0, r3
 80036d4:	f008 fa68 	bl	800bba8 <memcpy>
					 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <run_fsm+0x248>)
 80036da:	4a49      	ldr	r2, [pc, #292]	; (8003800 <run_fsm+0x23c>)
 80036dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80036e0:	3320      	adds	r3, #32
 80036e2:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80036e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ea:	4618      	mov	r0, r3
 80036ec:	f008 fa5c 	bl	800bba8 <memcpy>
					 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80036f0:	4b4a      	ldr	r3, [pc, #296]	; (800381c <run_fsm+0x258>)
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f8:	f002 fb5f 	bl	8005dba <preference_writer_ready>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <run_fsm+0x14a>
 8003708:	4844      	ldr	r0, [pc, #272]	; (800381c <run_fsm+0x258>)
 800370a:	f002 fb47 	bl	8005d9c <preference_writer_open>
					 preference_writer_flush(&prefs);
 800370e:	4843      	ldr	r0, [pc, #268]	; (800381c <run_fsm+0x258>)
 8003710:	f002 fb60 	bl	8005dd4 <preference_writer_flush>
					 preference_writer_close(&prefs);
 8003714:	4841      	ldr	r0, [pc, #260]	; (800381c <run_fsm+0x258>)
 8003716:	f002 fbdb 	bl	8005ed0 <preference_writer_close>
					 preference_writer_load(prefs);
 800371a:	4b40      	ldr	r3, [pc, #256]	; (800381c <run_fsm+0x258>)
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	9200      	str	r2, [sp, #0]
 8003720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003722:	f002 fb93 	bl	8005e4c <preference_writer_load>
				 fsmstate->next_state = MENU_MODE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	705a      	strb	r2, [r3, #1]
				 fsmstate->ready = 0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	70da      	strb	r2, [r3, #3]
			 break;
 8003732:	e060      	b.n	80037f6 <run_fsm+0x232>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003734:	4b35      	ldr	r3, [pc, #212]	; (800380c <run_fsm+0x248>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	dd0a      	ble.n	8003752 <run_fsm+0x18e>
 800373c:	4b31      	ldr	r3, [pc, #196]	; (8003804 <run_fsm+0x240>)
 800373e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003742:	4b32      	ldr	r3, [pc, #200]	; (800380c <run_fsm+0x248>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	429a      	cmp	r2, r3
 8003748:	dd03      	ble.n	8003752 <run_fsm+0x18e>
				 zero_commands(&controller);
 800374a:	482e      	ldr	r0, [pc, #184]	; (8003804 <run_fsm+0x240>)
 800374c:	f7ff ff12 	bl	8003574 <zero_commands>
 8003750:	e006      	b.n	8003760 <run_fsm+0x19c>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003752:	482c      	ldr	r0, [pc, #176]	; (8003804 <run_fsm+0x240>)
 8003754:	f7ff feb4 	bl	80034c0 <torque_control>
				 //field_weaken(&controller); // TODO: add field-weakening back at some point
				 commutate(&controller, &comm_encoder);
 8003758:	492b      	ldr	r1, [pc, #172]	; (8003808 <run_fsm+0x244>)
 800375a:	482a      	ldr	r0, [pc, #168]	; (8003804 <run_fsm+0x240>)
 800375c:	f7ff fc9c 	bl	8003098 <commutate>
			 }
			 controller.timeout ++;
 8003760:	4b28      	ldr	r3, [pc, #160]	; (8003804 <run_fsm+0x240>)
 8003762:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003766:	3301      	adds	r3, #1
 8003768:	4a26      	ldr	r2, [pc, #152]	; (8003804 <run_fsm+0x240>)
 800376a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 800376e:	e042      	b.n	80037f6 <run_fsm+0x232>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 if (fsmstate->print_iter == 800){
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003778:	d106      	bne.n	8003788 <run_fsm+0x1c4>
				 ps_print(&comm_encoder);
 800377a:	4823      	ldr	r0, [pc, #140]	; (8003808 <run_fsm+0x244>)
 800377c:	f002 fa94 	bl	8005ca8 <ps_print>
				 fsmstate->print_iter = 0;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
			 } else {
				 fsmstate->print_iter +=1;
			 }
			 break;
 8003786:	e036      	b.n	80037f6 <run_fsm+0x232>
				 fsmstate->print_iter +=1;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	605a      	str	r2, [r3, #4]
			 break;
 8003792:	e030      	b.n	80037f6 <run_fsm+0x232>
			 break;

		 case FAULT_MODE:
			 // depending on fault, display different LED blink patterns

			 if((controller.loop_count%5000)==0){
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <run_fsm+0x240>)
 8003796:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800379a:	4b21      	ldr	r3, [pc, #132]	; (8003820 <run_fsm+0x25c>)
 800379c:	fb83 1302 	smull	r1, r3, r3, r2
 80037a0:	12d9      	asrs	r1, r3, #11
 80037a2:	17d3      	asrs	r3, r2, #31
 80037a4:	1acb      	subs	r3, r1, r3
 80037a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <run_fsm+0x1fc>
				 HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80037b4:	2201      	movs	r2, #1
 80037b6:	2120      	movs	r1, #32
 80037b8:	481a      	ldr	r0, [pc, #104]	; (8003824 <run_fsm+0x260>)
 80037ba:	f004 ff03 	bl	80085c4 <HAL_GPIO_WritePin>
			 } else if ((controller.loop_count%5000)==2500){
				 HAL_GPIO_WritePin(LED, GPIO_PIN_RESET);
			 }

			 break;
 80037be:	e019      	b.n	80037f4 <run_fsm+0x230>
			 } else if ((controller.loop_count%5000)==2500){
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <run_fsm+0x240>)
 80037c2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <run_fsm+0x25c>)
 80037c8:	fb83 1302 	smull	r1, r3, r3, r2
 80037cc:	12d9      	asrs	r1, r3, #11
 80037ce:	17d3      	asrs	r3, r2, #31
 80037d0:	1acb      	subs	r3, r1, r3
 80037d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d107      	bne.n	80037f4 <run_fsm+0x230>
				 HAL_GPIO_WritePin(LED, GPIO_PIN_RESET);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2120      	movs	r1, #32
 80037e8:	480e      	ldr	r0, [pc, #56]	; (8003824 <run_fsm+0x260>)
 80037ea:	f004 feeb 	bl	80085c4 <HAL_GPIO_WritePin>
			 break;
 80037ee:	e001      	b.n	80037f4 <run_fsm+0x230>
			 break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <run_fsm+0x232>
			 break;
 80037f4:	bf00      	nop
	 }

 }
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000ec0 	.word	0x20000ec0
 8003804:	20000850 	.word	0x20000850
 8003808:	20000b5c 	.word	0x20000b5c
 800380c:	2000043c 	.word	0x2000043c
 8003810:	49000000 	.word	0x49000000
 8003814:	40c90fdb 	.word	0x40c90fdb
 8003818:	080107b0 	.word	0x080107b0
 800381c:	2000083c 	.word	0x2000083c
 8003820:	68db8bad 	.word	0x68db8bad
 8003824:	40020800 	.word	0x40020800

08003828 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b07      	cmp	r3, #7
 8003836:	d865      	bhi.n	8003904 <fsm_enter_state+0xdc>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <fsm_enter_state+0x18>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003861 	.word	0x08003861
 8003844:	080038ab 	.word	0x080038ab
 8003848:	0800387d 	.word	0x0800387d
 800384c:	08003905 	.word	0x08003905
 8003850:	08003867 	.word	0x08003867
 8003854:	0800386d 	.word	0x0800386d
 8003858:	08003905 	.word	0x08003905
 800385c:	080038fd 	.word	0x080038fd
			case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003860:	f000 f9c0 	bl	8003be4 <enter_menu_state>
				break;
 8003864:	e04e      	b.n	8003904 <fsm_enter_state+0xdc>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8003866:	f000 f9ef 	bl	8003c48 <enter_setup_state>
				break;
 800386a:	e04b      	b.n	8003904 <fsm_enter_state+0xdc>
			case ENCODER_MODE:
				//printf("Entering Encoder Mode\r\n");
				fsmstate->print_iter = 0;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	605a      	str	r2, [r3, #4]
				comm_encoder.filt_enable = 0;
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <fsm_enter_state+0xe4>)
 8003874:	2200      	movs	r2, #0
 8003876:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				break;
 800387a:	e043      	b.n	8003904 <fsm_enter_state+0xdc>
			case MOTOR_MODE:
				printf("\n\r\n\r Entering Motor Mode\r\n");
 800387c:	4824      	ldr	r0, [pc, #144]	; (8003910 <fsm_enter_state+0xe8>)
 800387e:	f008 fe99 	bl	800c5b4 <puts>
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003882:	2201      	movs	r2, #1
 8003884:	2120      	movs	r1, #32
 8003886:	4823      	ldr	r0, [pc, #140]	; (8003914 <fsm_enter_state+0xec>)
 8003888:	f004 fe9c 	bl	80085c4 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 800388c:	4822      	ldr	r0, [pc, #136]	; (8003918 <fsm_enter_state+0xf0>)
 800388e:	f7ff fb8f 	bl	8002fb0 <reset_foc>
				drv_enable_gd(drv);
 8003892:	4b22      	ldr	r3, [pc, #136]	; (800391c <fsm_enter_state+0xf4>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4611      	mov	r1, r2
 8003898:	889a      	ldrh	r2, [r3, #4]
 800389a:	2300      	movs	r3, #0
 800389c:	f362 030f 	bfi	r3, r2, #0, #16
 80038a0:	4608      	mov	r0, r1
 80038a2:	4619      	mov	r1, r3
 80038a4:	f7fe fdbd 	bl	8002422 <drv_enable_gd>
				break;
 80038a8:	e02c      	b.n	8003904 <fsm_enter_state+0xdc>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */
				comm_encoder_cal.done_cal = 0;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <fsm_enter_state+0xf8>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <fsm_enter_state+0xf8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.valid_cal = 0;
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <fsm_enter_state+0xf8>)
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				comm_encoder_cal.started = 0;
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <fsm_enter_state+0xf8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	741a      	strb	r2, [r3, #16]
				// reset electrical zero and encoder filter
				comm_encoder.e_zero = 0;
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <fsm_enter_state+0xe4>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
				comm_encoder.filt_enable = 0;
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <fsm_enter_state+0xe4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				// clear lookup table
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 80038d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038dc:	2100      	movs	r1, #0
 80038de:	4811      	ldr	r0, [pc, #68]	; (8003924 <fsm_enter_state+0xfc>)
 80038e0:	f008 f970 	bl	800bbc4 <memset>
				drv_enable_gd(drv);
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <fsm_enter_state+0xf4>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4611      	mov	r1, r2
 80038ea:	889a      	ldrh	r2, [r3, #4]
 80038ec:	2300      	movs	r3, #0
 80038ee:	f362 030f 	bfi	r3, r2, #0, #16
 80038f2:	4608      	mov	r0, r1
 80038f4:	4619      	mov	r1, r3
 80038f6:	f7fe fd94 	bl	8002422 <drv_enable_gd>
				break;
 80038fa:	e003      	b.n	8003904 <fsm_enter_state+0xdc>
			case FAULT_MODE:
				printf("\n\r\n\r Entering Fault Mode\n\r");
 80038fc:	480a      	ldr	r0, [pc, #40]	; (8003928 <fsm_enter_state+0x100>)
 80038fe:	f008 fdd3 	bl	800c4a8 <iprintf>
				break;
 8003902:	bf00      	nop

		}
 }
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000b5c 	.word	0x20000b5c
 8003910:	080107c4 	.word	0x080107c4
 8003914:	40020800 	.word	0x40020800
 8003918:	20000850 	.word	0x20000850
 800391c:	20000eb8 	.word	0x20000eb8
 8003920:	20000ec0 	.word	0x20000ec0
 8003924:	20000cb4 	.word	0x20000cb4
 8003928:	080107e0 	.word	0x080107e0

0800392c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d857      	bhi.n	80039ec <fsm_exit_state+0xc0>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <fsm_exit_state+0x18>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	0800395d 	.word	0x0800395d
 8003948:	080039bf 	.word	0x080039bf
 800394c:	08003985 	.word	0x08003985
 8003950:	080039ed 	.word	0x080039ed
 8003954:	08003965 	.word	0x08003965
 8003958:	0800396d 	.word	0x0800396d
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	70da      	strb	r2, [r3, #3]
				break;
 8003962:	e043      	b.n	80039ec <fsm_exit_state+0xc0>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	70da      	strb	r2, [r3, #3]
				break;
 800396a:	e03f      	b.n	80039ec <fsm_exit_state+0xc0>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				if (EN_ENC_FILTER == 1){
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <fsm_exit_state+0xc8>)
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d103      	bne.n	800397c <fsm_exit_state+0x50>
					comm_encoder.filt_enable = 1;
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <fsm_exit_state+0xcc>)
 8003976:	2201      	movs	r2, #1
 8003978:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
				fsmstate->ready = 1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	70da      	strb	r2, [r3, #3]
				break;
 8003982:	e033      	b.n	80039ec <fsm_exit_state+0xc0>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
				fsmstate->ready = 1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	70da      	strb	r2, [r3, #3]
				drv_disable_gd(drv);
 800398a:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <fsm_exit_state+0xd0>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4611      	mov	r1, r2
 8003990:	889a      	ldrh	r2, [r3, #4]
 8003992:	2300      	movs	r3, #0
 8003994:	f362 030f 	bfi	r3, r2, #0, #16
 8003998:	4608      	mov	r0, r1
 800399a:	4619      	mov	r1, r3
 800399c:	f7fe fd5b 	bl	8002456 <drv_disable_gd>
				reset_foc(&controller);
 80039a0:	4817      	ldr	r0, [pc, #92]	; (8003a00 <fsm_exit_state+0xd4>)
 80039a2:	f7ff fb05 	bl	8002fb0 <reset_foc>
				printf("\n\r Leaving Motor Mode\r\n");
 80039a6:	4817      	ldr	r0, [pc, #92]	; (8003a04 <fsm_exit_state+0xd8>)
 80039a8:	f008 fe04 	bl	800c5b4 <puts>
				HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80039ac:	2200      	movs	r2, #0
 80039ae:	2120      	movs	r1, #32
 80039b0:	4815      	ldr	r0, [pc, #84]	; (8003a08 <fsm_exit_state+0xdc>)
 80039b2:	f004 fe07 	bl	80085c4 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 80039b6:	4812      	ldr	r0, [pc, #72]	; (8003a00 <fsm_exit_state+0xd4>)
 80039b8:	f7ff fddc 	bl	8003574 <zero_commands>
				break;
 80039bc:	e016      	b.n	80039ec <fsm_exit_state+0xc0>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <fsm_exit_state+0xd0>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4611      	mov	r1, r2
 80039c4:	889a      	ldrh	r2, [r3, #4]
 80039c6:	2300      	movs	r3, #0
 80039c8:	f362 030f 	bfi	r3, r2, #0, #16
 80039cc:	4608      	mov	r0, r1
 80039ce:	4619      	mov	r1, r3
 80039d0:	f7fe fd41 	bl	8002456 <drv_disable_gd>
				if (EN_ENC_FILTER == 1){
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <fsm_exit_state+0xc8>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d103      	bne.n	80039e4 <fsm_exit_state+0xb8>
					comm_encoder.filt_enable = 1;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <fsm_exit_state+0xcc>)
 80039de:	2201      	movs	r2, #1
 80039e0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	70da      	strb	r2, [r3, #3]
				break;
 80039ea:	bf00      	nop
		}

 }
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000043c 	.word	0x2000043c
 80039f8:	20000b5c 	.word	0x20000b5c
 80039fc:	20000eb8 	.word	0x20000eb8
 8003a00:	20000850 	.word	0x20000850
 8003a04:	080107fc 	.word	0x080107fc
 8003a08:	40020800 	.word	0x40020800

08003a0c <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	2b1b      	cmp	r3, #27
 8003a1c:	d10d      	bne.n	8003a3a <update_fsm+0x2e>
		fsmstate->next_state = MENU_MODE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	70da      	strb	r2, [r3, #3]
		if (fsmstate->state == MENU_MODE){
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 80c6 	bne.w	8003bc0 <update_fsm+0x1b4>
			enter_menu_state(); // re-print menu
 8003a34:	f000 f8d6 	bl	8003be4 <enter_menu_state>
		}
		return;
 8003a38:	e0c2      	b.n	8003bc0 <update_fsm+0x1b4>
	}
	switch(fsmstate->state){
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	f200 80c1 	bhi.w	8003bc6 <update_fsm+0x1ba>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <update_fsm+0x40>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a65 	.word	0x08003a65
 8003a50:	08003bc7 	.word	0x08003bc7
 8003a54:	08003bc7 	.word	0x08003bc7
 8003a58:	08003bc7 	.word	0x08003bc7
 8003a5c:	08003b87 	.word	0x08003b87
 8003a60:	08003bc7 	.word	0x08003bc7
		case MENU_MODE:
			switch (fsm_input){
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	3b63      	subs	r3, #99	; 0x63
 8003a68:	2b17      	cmp	r3, #23
 8003a6a:	f200 80ab 	bhi.w	8003bc4 <update_fsm+0x1b8>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <update_fsm+0x68>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003ad5 	.word	0x08003ad5
 8003a78:	08003bc5 	.word	0x08003bc5
 8003a7c:	08003af1 	.word	0x08003af1
 8003a80:	08003bc5 	.word	0x08003bc5
 8003a84:	08003bc5 	.word	0x08003bc5
 8003a88:	08003bc5 	.word	0x08003bc5
 8003a8c:	08003bc5 	.word	0x08003bc5
 8003a90:	08003bc5 	.word	0x08003bc5
 8003a94:	08003bc5 	.word	0x08003bc5
 8003a98:	08003bc5 	.word	0x08003bc5
 8003a9c:	08003ae3 	.word	0x08003ae3
 8003aa0:	08003bc5 	.word	0x08003bc5
 8003aa4:	08003bc5 	.word	0x08003bc5
 8003aa8:	08003b75 	.word	0x08003b75
 8003aac:	08003bc5 	.word	0x08003bc5
 8003ab0:	08003bc5 	.word	0x08003bc5
 8003ab4:	08003aff 	.word	0x08003aff
 8003ab8:	08003bc5 	.word	0x08003bc5
 8003abc:	08003bc5 	.word	0x08003bc5
 8003ac0:	08003bc5 	.word	0x08003bc5
 8003ac4:	08003bc5 	.word	0x08003bc5
 8003ac8:	08003bc5 	.word	0x08003bc5
 8003acc:	08003bc5 	.word	0x08003bc5
 8003ad0:	08003b0d 	.word	0x08003b0d
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	70da      	strb	r2, [r3, #3]
					break;
 8003ae0:	e050      	b.n	8003b84 <update_fsm+0x178>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	70da      	strb	r2, [r3, #3]
					break;
 8003aee:	e049      	b.n	8003b84 <update_fsm+0x178>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2205      	movs	r2, #5
 8003af4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	70da      	strb	r2, [r3, #3]
					break;
 8003afc:	e042      	b.n	8003b84 <update_fsm+0x178>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2204      	movs	r2, #4
 8003b02:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	70da      	strb	r2, [r3, #3]
					break;
 8003b0a:	e03b      	b.n	8003b84 <update_fsm+0x178>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <update_fsm+0x1c0>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
					ps_sample(&comm_encoder, DT);
 8003b14:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003bd0 <update_fsm+0x1c4>
 8003b18:	482c      	ldr	r0, [pc, #176]	; (8003bcc <update_fsm+0x1c0>)
 8003b1a:	f001 fe95 	bl	8005848 <ps_sample>
					int zero_count = comm_encoder.count;
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <update_fsm+0x1c0>)
 8003b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b24:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003b26:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <update_fsm+0x1c8>)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6193      	str	r3, [r2, #24]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <update_fsm+0x1cc>)
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	9200      	str	r2, [sp, #0]
 8003b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b34:	f002 f941 	bl	8005dba <preference_writer_ready>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f083 0301 	eor.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <update_fsm+0x13e>
 8003b44:	4824      	ldr	r0, [pc, #144]	; (8003bd8 <update_fsm+0x1cc>)
 8003b46:	f002 f929 	bl	8005d9c <preference_writer_open>
					preference_writer_flush(&prefs);
 8003b4a:	4823      	ldr	r0, [pc, #140]	; (8003bd8 <update_fsm+0x1cc>)
 8003b4c:	f002 f942 	bl	8005dd4 <preference_writer_flush>
					preference_writer_close(&prefs);
 8003b50:	4821      	ldr	r0, [pc, #132]	; (8003bd8 <update_fsm+0x1cc>)
 8003b52:	f002 f9bd 	bl	8005ed0 <preference_writer_close>
					preference_writer_load(prefs);
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <update_fsm+0x1cc>)
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	9200      	str	r2, [sp, #0]
 8003b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b5e:	f002 f975 	bl	8005e4c <preference_writer_load>
					printf("\n\r\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <update_fsm+0x1c8>)
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	4619      	mov	r1, r3
 8003b68:	481c      	ldr	r0, [pc, #112]	; (8003bdc <update_fsm+0x1d0>)
 8003b6a:	f008 fc9d 	bl	800c4a8 <iprintf>
					enter_menu_state(); // re-print menu
 8003b6e:	f000 f839 	bl	8003be4 <enter_menu_state>
					break;
 8003b72:	e007      	b.n	8003b84 <update_fsm+0x178>
				case RESET_CMD:
					reset_flash_values();
 8003b74:	f000 fed4 	bl	8004920 <reset_flash_values>
					printf("\n\r\n\r Flash values have been reset. Power cycle to be safe! \n\r\n\r");
 8003b78:	4819      	ldr	r0, [pc, #100]	; (8003be0 <update_fsm+0x1d4>)
 8003b7a:	f008 fc95 	bl	800c4a8 <iprintf>
					enter_menu_state(); // re-print menu
 8003b7e:	f000 f831 	bl	8003be4 <enter_menu_state>
					break;
 8003b82:	bf00      	nop
				}
			break;
 8003b84:	e01e      	b.n	8003bc4 <update_fsm+0x1b8>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	2b0d      	cmp	r3, #13
 8003b8a:	d103      	bne.n	8003b94 <update_fsm+0x188>
				process_user_input(fsmstate);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb11 	bl	80041b4 <process_user_input>
				break;
 8003b92:	e018      	b.n	8003bc6 <update_fsm+0x1ba>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7c1b      	ldrb	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <update_fsm+0x198>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	745a      	strb	r2, [r3, #17]
 8003ba2:	e006      	b.n	8003bb2 <update_fsm+0x1a6>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7c1b      	ldrb	r3, [r3, #16]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	721a      	strb	r2, [r3, #8]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7c1b      	ldrb	r3, [r3, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	741a      	strb	r2, [r3, #16]
			/* If enter is typed, process user input */

			break;
 8003bbe:	e002      	b.n	8003bc6 <update_fsm+0x1ba>
		return;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <update_fsm+0x1ba>
			break;
 8003bc4:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000b5c 	.word	0x20000b5c
 8003bd0:	3851b717 	.word	0x3851b717
 8003bd4:	2000043c 	.word	0x2000043c
 8003bd8:	2000083c 	.word	0x2000083c
 8003bdc:	08010814 	.word	0x08010814
 8003be0:	0801083c 	.word	0x0801083c

08003be4 <enter_menu_state>:


 void enter_menu_state(void){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003be8:	480e      	ldr	r0, [pc, #56]	; (8003c24 <enter_menu_state+0x40>)
 8003bea:	f008 fc5d 	bl	800c4a8 <iprintf>
	    printf(" Commands:\n\r");
 8003bee:	480e      	ldr	r0, [pc, #56]	; (8003c28 <enter_menu_state+0x44>)
 8003bf0:	f008 fc5a 	bl	800c4a8 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003bf4:	480d      	ldr	r0, [pc, #52]	; (8003c2c <enter_menu_state+0x48>)
 8003bf6:	f008 fc57 	bl	800c4a8 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003bfa:	480d      	ldr	r0, [pc, #52]	; (8003c30 <enter_menu_state+0x4c>)
 8003bfc:	f008 fc54 	bl	800c4a8 <iprintf>
	    printf(" s - Setup\n\r");
 8003c00:	480c      	ldr	r0, [pc, #48]	; (8003c34 <enter_menu_state+0x50>)
 8003c02:	f008 fc51 	bl	800c4a8 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003c06:	480c      	ldr	r0, [pc, #48]	; (8003c38 <enter_menu_state+0x54>)
 8003c08:	f008 fc4e 	bl	800c4a8 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003c0c:	480b      	ldr	r0, [pc, #44]	; (8003c3c <enter_menu_state+0x58>)
 8003c0e:	f008 fc4b 	bl	800c4a8 <iprintf>
	    printf(" p - !!! Reset Flash Memory Values !!!\n\r");
 8003c12:	480b      	ldr	r0, [pc, #44]	; (8003c40 <enter_menu_state+0x5c>)
 8003c14:	f008 fc48 	bl	800c4a8 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003c18:	480a      	ldr	r0, [pc, #40]	; (8003c44 <enter_menu_state+0x60>)
 8003c1a:	f008 fc45 	bl	800c4a8 <iprintf>

	    //gpio.led->write(0);
 }
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	0801087c 	.word	0x0801087c
 8003c28:	08010884 	.word	0x08010884
 8003c2c:	08010894 	.word	0x08010894
 8003c30:	080108a8 	.word	0x080108a8
 8003c34:	080108c4 	.word	0x080108c4
 8003c38:	080108d4 	.word	0x080108d4
 8003c3c:	080108ec 	.word	0x080108ec
 8003c40:	08010908 	.word	0x08010908
 8003c44:	08010934 	.word	0x08010934

08003c48 <enter_setup_state>:

 void enter_setup_state(void){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003c4e:	4898      	ldr	r0, [pc, #608]	; (8003eb0 <enter_setup_state+0x268>)
 8003c50:	f008 fc2a 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-29s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003c54:	4b97      	ldr	r3, [pc, #604]	; (8003eb4 <enter_setup_state+0x26c>)
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	4b97      	ldr	r3, [pc, #604]	; (8003eb8 <enter_setup_state+0x270>)
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	4b97      	ldr	r3, [pc, #604]	; (8003ebc <enter_setup_state+0x274>)
 8003c5e:	4a98      	ldr	r2, [pc, #608]	; (8003ec0 <enter_setup_state+0x278>)
 8003c60:	4998      	ldr	r1, [pc, #608]	; (8003ec4 <enter_setup_state+0x27c>)
 8003c62:	4899      	ldr	r0, [pc, #612]	; (8003ec8 <enter_setup_state+0x280>)
 8003c64:	f008 fc20 	bl	800c4a8 <iprintf>

	    printf("\r\n Motor:\r\n");
 8003c68:	4898      	ldr	r0, [pc, #608]	; (8003ecc <enter_setup_state+0x284>)
 8003c6a:	f008 fca3 	bl	800c5b4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Encoder Mech Zero", "0", "524288", M_ZERO);
 8003c6e:	4b98      	ldr	r3, [pc, #608]	; (8003ed0 <enter_setup_state+0x288>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	4b97      	ldr	r3, [pc, #604]	; (8003ed4 <enter_setup_state+0x28c>)
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4b97      	ldr	r3, [pc, #604]	; (8003ed8 <enter_setup_state+0x290>)
 8003c7a:	4a98      	ldr	r2, [pc, #608]	; (8003edc <enter_setup_state+0x294>)
 8003c7c:	4998      	ldr	r1, [pc, #608]	; (8003ee0 <enter_setup_state+0x298>)
 8003c7e:	4899      	ldr	r0, [pc, #612]	; (8003ee4 <enter_setup_state+0x29c>)
 8003c80:	f008 fc12 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Encoder Elec Zero", "0", "524288", E_ZERO);
 8003c84:	4b92      	ldr	r3, [pc, #584]	; (8003ed0 <enter_setup_state+0x288>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	4b92      	ldr	r3, [pc, #584]	; (8003ed4 <enter_setup_state+0x28c>)
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <enter_setup_state+0x290>)
 8003c90:	4a95      	ldr	r2, [pc, #596]	; (8003ee8 <enter_setup_state+0x2a0>)
 8003c92:	4993      	ldr	r1, [pc, #588]	; (8003ee0 <enter_setup_state+0x298>)
 8003c94:	4893      	ldr	r0, [pc, #588]	; (8003ee4 <enter_setup_state+0x29c>)
 8003c96:	f008 fc07 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003c9a:	4b94      	ldr	r3, [pc, #592]	; (8003eec <enter_setup_state+0x2a4>)
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc72 	bl	8000588 <__aeabi_f2d>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cac:	4b8c      	ldr	r3, [pc, #560]	; (8003ee0 <enter_setup_state+0x298>)
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4b89      	ldr	r3, [pc, #548]	; (8003ed8 <enter_setup_state+0x290>)
 8003cb2:	4a8f      	ldr	r2, [pc, #572]	; (8003ef0 <enter_setup_state+0x2a8>)
 8003cb4:	498f      	ldr	r1, [pc, #572]	; (8003ef4 <enter_setup_state+0x2ac>)
 8003cb6:	4890      	ldr	r0, [pc, #576]	; (8003ef8 <enter_setup_state+0x2b0>)
 8003cb8:	f008 fbf6 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003cbc:	4b8b      	ldr	r3, [pc, #556]	; (8003eec <enter_setup_state+0x2a4>)
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc fc61 	bl	8000588 <__aeabi_f2d>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cce:	4b84      	ldr	r3, [pc, #528]	; (8003ee0 <enter_setup_state+0x298>)
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4b81      	ldr	r3, [pc, #516]	; (8003ed8 <enter_setup_state+0x290>)
 8003cd4:	4a89      	ldr	r2, [pc, #548]	; (8003efc <enter_setup_state+0x2b4>)
 8003cd6:	498a      	ldr	r1, [pc, #552]	; (8003f00 <enter_setup_state+0x2b8>)
 8003cd8:	488a      	ldr	r0, [pc, #552]	; (8003f04 <enter_setup_state+0x2bc>)
 8003cda:	f008 fbe5 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "o", "Motor Phase Resistance (ohms)", "0.0", "10.0", R_PHASE);
 8003cde:	4b83      	ldr	r3, [pc, #524]	; (8003eec <enter_setup_state+0x2a4>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc50 	bl	8000588 <__aeabi_f2d>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cf0:	4b85      	ldr	r3, [pc, #532]	; (8003f08 <enter_setup_state+0x2c0>)
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	4b85      	ldr	r3, [pc, #532]	; (8003f0c <enter_setup_state+0x2c4>)
 8003cf6:	4a86      	ldr	r2, [pc, #536]	; (8003f10 <enter_setup_state+0x2c8>)
 8003cf8:	4986      	ldr	r1, [pc, #536]	; (8003f14 <enter_setup_state+0x2cc>)
 8003cfa:	4887      	ldr	r0, [pc, #540]	; (8003f18 <enter_setup_state+0x2d0>)
 8003cfc:	f008 fbd4 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "j", "D-axis inductance (H)", "0", "0.1", L_D);
 8003d00:	4b7a      	ldr	r3, [pc, #488]	; (8003eec <enter_setup_state+0x2a4>)
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fc3f 	bl	8000588 <__aeabi_f2d>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <enter_setup_state+0x2d4>)
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4b70      	ldr	r3, [pc, #448]	; (8003ed8 <enter_setup_state+0x290>)
 8003d18:	4a81      	ldr	r2, [pc, #516]	; (8003f20 <enter_setup_state+0x2d8>)
 8003d1a:	4982      	ldr	r1, [pc, #520]	; (8003f24 <enter_setup_state+0x2dc>)
 8003d1c:	487e      	ldr	r0, [pc, #504]	; (8003f18 <enter_setup_state+0x2d0>)
 8003d1e:	f008 fbc3 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "e", "Q-axis inductance (H)", "0", "0.1", L_Q);
 8003d22:	4b72      	ldr	r3, [pc, #456]	; (8003eec <enter_setup_state+0x2a4>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc2e 	bl	8000588 <__aeabi_f2d>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d34:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <enter_setup_state+0x2d4>)
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <enter_setup_state+0x290>)
 8003d3a:	4a7b      	ldr	r2, [pc, #492]	; (8003f28 <enter_setup_state+0x2e0>)
 8003d3c:	497b      	ldr	r1, [pc, #492]	; (8003f2c <enter_setup_state+0x2e4>)
 8003d3e:	4876      	ldr	r0, [pc, #472]	; (8003f18 <enter_setup_state+0x2d0>)
 8003d40:	f008 fbb2 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "n", "Number of Pole Pairs (NPP)", "0", "40", PPAIRS);
 8003d44:	4b69      	ldr	r3, [pc, #420]	; (8003eec <enter_setup_state+0x2a4>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fc1d 	bl	8000588 <__aeabi_f2d>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d56:	4b76      	ldr	r3, [pc, #472]	; (8003f30 <enter_setup_state+0x2e8>)
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <enter_setup_state+0x290>)
 8003d5c:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <enter_setup_state+0x2ec>)
 8003d5e:	4976      	ldr	r1, [pc, #472]	; (8003f38 <enter_setup_state+0x2f0>)
 8003d60:	486d      	ldr	r0, [pc, #436]	; (8003f18 <enter_setup_state+0x2d0>)
 8003d62:	f008 fba1 	bl	800c4a8 <iprintf>

	    printf("\r\n Control:\r\n");
 8003d66:	4875      	ldr	r0, [pc, #468]	; (8003f3c <enter_setup_state+0x2f4>)
 8003d68:	f008 fc24 	bl	800c5b4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "y", "Encoder Linearization Enable", "0", "1", EN_ENC_LINEARIZE);
 8003d6c:	4b58      	ldr	r3, [pc, #352]	; (8003ed0 <enter_setup_state+0x288>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <enter_setup_state+0x2f8>)
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <enter_setup_state+0x290>)
 8003d78:	4a72      	ldr	r2, [pc, #456]	; (8003f44 <enter_setup_state+0x2fc>)
 8003d7a:	4973      	ldr	r1, [pc, #460]	; (8003f48 <enter_setup_state+0x300>)
 8003d7c:	4859      	ldr	r0, [pc, #356]	; (8003ee4 <enter_setup_state+0x29c>)
 8003d7e:	f008 fb93 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "z", "Encoder Filter Enable", "0", "1", EN_ENC_FILTER);
 8003d82:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <enter_setup_state+0x288>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	4b6d      	ldr	r3, [pc, #436]	; (8003f40 <enter_setup_state+0x2f8>)
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	4b52      	ldr	r3, [pc, #328]	; (8003ed8 <enter_setup_state+0x290>)
 8003d8e:	4a6f      	ldr	r2, [pc, #444]	; (8003f4c <enter_setup_state+0x304>)
 8003d90:	496f      	ldr	r1, [pc, #444]	; (8003f50 <enter_setup_state+0x308>)
 8003d92:	4854      	ldr	r0, [pc, #336]	; (8003ee4 <enter_setup_state+0x29c>)
 8003d94:	f008 fb88 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Phase Order", "0", "1", PHASE_ORDER);
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <enter_setup_state+0x288>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	4b68      	ldr	r3, [pc, #416]	; (8003f40 <enter_setup_state+0x2f8>)
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <enter_setup_state+0x290>)
 8003da4:	4a6b      	ldr	r2, [pc, #428]	; (8003f54 <enter_setup_state+0x30c>)
 8003da6:	494e      	ldr	r1, [pc, #312]	; (8003ee0 <enter_setup_state+0x298>)
 8003da8:	484e      	ldr	r0, [pc, #312]	; (8003ee4 <enter_setup_state+0x29c>)
 8003daa:	f008 fb7d 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller K_SCALE", "-", "-", K_SCALE); // TODO: decide if these should be in flash or not
 8003dae:	a33c      	add	r3, pc, #240	; (adr r3, 8003ea0 <enter_setup_state+0x258>)
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003db8:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <enter_setup_state+0x298>)
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4b48      	ldr	r3, [pc, #288]	; (8003ee0 <enter_setup_state+0x298>)
 8003dbe:	4a66      	ldr	r2, [pc, #408]	; (8003f58 <enter_setup_state+0x310>)
 8003dc0:	4947      	ldr	r1, [pc, #284]	; (8003ee0 <enter_setup_state+0x298>)
 8003dc2:	4855      	ldr	r0, [pc, #340]	; (8003f18 <enter_setup_state+0x2d0>)
 8003dc4:	f008 fb70 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller KI_D", "-", "-", KI_D);
 8003dc8:	a337      	add	r3, pc, #220	; (adr r3, 8003ea8 <enter_setup_state+0x260>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dd2:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <enter_setup_state+0x298>)
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <enter_setup_state+0x298>)
 8003dd8:	4a60      	ldr	r2, [pc, #384]	; (8003f5c <enter_setup_state+0x314>)
 8003dda:	4941      	ldr	r1, [pc, #260]	; (8003ee0 <enter_setup_state+0x298>)
 8003ddc:	484e      	ldr	r0, [pc, #312]	; (8003f18 <enter_setup_state+0x2d0>)
 8003dde:	f008 fb63 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller KI_Q", "-", "-", KI_Q);
 8003de2:	a331      	add	r3, pc, #196	; (adr r3, 8003ea8 <enter_setup_state+0x260>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dec:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <enter_setup_state+0x298>)
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <enter_setup_state+0x298>)
 8003df2:	4a5b      	ldr	r2, [pc, #364]	; (8003f60 <enter_setup_state+0x318>)
 8003df4:	493a      	ldr	r1, [pc, #232]	; (8003ee0 <enter_setup_state+0x298>)
 8003df6:	4848      	ldr	r0, [pc, #288]	; (8003f18 <enter_setup_state+0x2d0>)
 8003df8:	f008 fb56 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <enter_setup_state+0x2a4>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc fbc1 	bl	8000588 <__aeabi_f2d>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e0e:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <enter_setup_state+0x31c>)
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <enter_setup_state+0x320>)
 8003e14:	4a55      	ldr	r2, [pc, #340]	; (8003f6c <enter_setup_state+0x324>)
 8003e16:	4956      	ldr	r1, [pc, #344]	; (8003f70 <enter_setup_state+0x328>)
 8003e18:	4856      	ldr	r0, [pc, #344]	; (8003f74 <enter_setup_state+0x32c>)
 8003e1a:	f008 fb45 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003e1e:	4b33      	ldr	r3, [pc, #204]	; (8003eec <enter_setup_state+0x2a4>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fbb0 	bl	8000588 <__aeabi_f2d>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e30:	4b51      	ldr	r3, [pc, #324]	; (8003f78 <enter_setup_state+0x330>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <enter_setup_state+0x2c4>)
 8003e36:	4a51      	ldr	r2, [pc, #324]	; (8003f7c <enter_setup_state+0x334>)
 8003e38:	4951      	ldr	r1, [pc, #324]	; (8003f80 <enter_setup_state+0x338>)
 8003e3a:	484e      	ldr	r0, [pc, #312]	; (8003f74 <enter_setup_state+0x32c>)
 8003e3c:	f008 fb34 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <enter_setup_state+0x2a4>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fb9f 	bl	8000588 <__aeabi_f2d>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e52:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <enter_setup_state+0x33c>)
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <enter_setup_state+0x2c4>)
 8003e58:	4a4b      	ldr	r2, [pc, #300]	; (8003f88 <enter_setup_state+0x340>)
 8003e5a:	494c      	ldr	r1, [pc, #304]	; (8003f8c <enter_setup_state+0x344>)
 8003e5c:	4845      	ldr	r0, [pc, #276]	; (8003f74 <enter_setup_state+0x32c>)
 8003e5e:	f008 fb23 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <enter_setup_state+0x2a4>)
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fb8e 	bl	8000588 <__aeabi_f2d>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e74:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <enter_setup_state+0x348>)
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <enter_setup_state+0x2c4>)
 8003e7a:	4a46      	ldr	r2, [pc, #280]	; (8003f94 <enter_setup_state+0x34c>)
 8003e7c:	4946      	ldr	r1, [pc, #280]	; (8003f98 <enter_setup_state+0x350>)
 8003e7e:	483d      	ldr	r0, [pc, #244]	; (8003f74 <enter_setup_state+0x32c>)
 8003e80:	f008 fb12 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <enter_setup_state+0x2a4>)
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc fb7d 	bl	8000588 <__aeabi_f2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e96:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <enter_setup_state+0x354>)
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <enter_setup_state+0x2c4>)
 8003e9c:	e080      	b.n	8003fa0 <enter_setup_state+0x358>
 8003e9e:	bf00      	nop
 8003ea0:	40000000 	.word	0x40000000
 8003ea4:	3f216ebd 	.word	0x3f216ebd
 8003ea8:	60000000 	.word	0x60000000
 8003eac:	3fa318fc 	.word	0x3fa318fc
 8003eb0:	0801094c 	.word	0x0801094c
 8003eb4:	080109a0 	.word	0x080109a0
 8003eb8:	080109b0 	.word	0x080109b0
 8003ebc:	08010968 	.word	0x08010968
 8003ec0:	0801096c 	.word	0x0801096c
 8003ec4:	08010978 	.word	0x08010978
 8003ec8:	08010980 	.word	0x08010980
 8003ecc:	080109b4 	.word	0x080109b4
 8003ed0:	2000043c 	.word	0x2000043c
 8003ed4:	080109f8 	.word	0x080109f8
 8003ed8:	080109c0 	.word	0x080109c0
 8003edc:	080109c4 	.word	0x080109c4
 8003ee0:	080109d8 	.word	0x080109d8
 8003ee4:	080109dc 	.word	0x080109dc
 8003ee8:	08010a00 	.word	0x08010a00
 8003eec:	2000033c 	.word	0x2000033c
 8003ef0:	08010a14 	.word	0x08010a14
 8003ef4:	08010a20 	.word	0x08010a20
 8003ef8:	08010a24 	.word	0x08010a24
 8003efc:	08010a44 	.word	0x08010a44
 8003f00:	08010a5c 	.word	0x08010a5c
 8003f04:	08010a60 	.word	0x08010a60
 8003f08:	08010ac4 	.word	0x08010ac4
 8003f0c:	08010a80 	.word	0x08010a80
 8003f10:	08010a84 	.word	0x08010a84
 8003f14:	08010aa4 	.word	0x08010aa4
 8003f18:	08010aa8 	.word	0x08010aa8
 8003f1c:	08010ae8 	.word	0x08010ae8
 8003f20:	08010acc 	.word	0x08010acc
 8003f24:	08010ae4 	.word	0x08010ae4
 8003f28:	08010aec 	.word	0x08010aec
 8003f2c:	08010b04 	.word	0x08010b04
 8003f30:	08010b28 	.word	0x08010b28
 8003f34:	08010b08 	.word	0x08010b08
 8003f38:	08010b24 	.word	0x08010b24
 8003f3c:	08010b2c 	.word	0x08010b2c
 8003f40:	08010b60 	.word	0x08010b60
 8003f44:	08010b3c 	.word	0x08010b3c
 8003f48:	08010b5c 	.word	0x08010b5c
 8003f4c:	08010b64 	.word	0x08010b64
 8003f50:	08010b7c 	.word	0x08010b7c
 8003f54:	08010b80 	.word	0x08010b80
 8003f58:	08010b8c 	.word	0x08010b8c
 8003f5c:	08010ba8 	.word	0x08010ba8
 8003f60:	08010bc0 	.word	0x08010bc0
 8003f64:	08010c18 	.word	0x08010c18
 8003f68:	08010bd8 	.word	0x08010bd8
 8003f6c:	08010bdc 	.word	0x08010bdc
 8003f70:	08010bf4 	.word	0x08010bf4
 8003f74:	08010bf8 	.word	0x08010bf8
 8003f78:	08010c38 	.word	0x08010c38
 8003f7c:	08010c20 	.word	0x08010c20
 8003f80:	08010c34 	.word	0x08010c34
 8003f84:	08010c5c 	.word	0x08010c5c
 8003f88:	08010c40 	.word	0x08010c40
 8003f8c:	08010c58 	.word	0x08010c58
 8003f90:	08010c80 	.word	0x08010c80
 8003f94:	08010c64 	.word	0x08010c64
 8003f98:	08010c7c 	.word	0x08010c7c
 8003f9c:	08010ca4 	.word	0x08010ca4
 8003fa0:	4a5e      	ldr	r2, [pc, #376]	; (800411c <enter_setup_state+0x4d4>)
 8003fa2:	495f      	ldr	r1, [pc, #380]	; (8004120 <enter_setup_state+0x4d8>)
 8003fa4:	485f      	ldr	r0, [pc, #380]	; (8004124 <enter_setup_state+0x4dc>)
 8003fa6:	f008 fa7f 	bl	800c4a8 <iprintf>

	    printf("\r\n Thermal:\r\n");
 8003faa:	485f      	ldr	r0, [pc, #380]	; (8004128 <enter_setup_state+0x4e0>)
 8003fac:	f008 fb02 	bl	800c5b4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0.0", "150.0", TEMP_MAX);
 8003fb0:	4b5e      	ldr	r3, [pc, #376]	; (800412c <enter_setup_state+0x4e4>)
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc fae7 	bl	8000588 <__aeabi_f2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fc2:	4b5b      	ldr	r3, [pc, #364]	; (8004130 <enter_setup_state+0x4e8>)
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <enter_setup_state+0x4ec>)
 8003fc8:	4a5b      	ldr	r2, [pc, #364]	; (8004138 <enter_setup_state+0x4f0>)
 8003fca:	495c      	ldr	r1, [pc, #368]	; (800413c <enter_setup_state+0x4f4>)
 8003fcc:	4855      	ldr	r0, [pc, #340]	; (8004124 <enter_setup_state+0x4dc>)
 8003fce:	f008 fa6b 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.2f\n\r", "-", "Thermal Resistance (K-W/J)", "-", "-", R_TH);
 8003fd2:	4b56      	ldr	r3, [pc, #344]	; (800412c <enter_setup_state+0x4e4>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc fad6 	bl	8000588 <__aeabi_f2d>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fe4:	4b56      	ldr	r3, [pc, #344]	; (8004140 <enter_setup_state+0x4f8>)
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4b55      	ldr	r3, [pc, #340]	; (8004140 <enter_setup_state+0x4f8>)
 8003fea:	4a56      	ldr	r2, [pc, #344]	; (8004144 <enter_setup_state+0x4fc>)
 8003fec:	4954      	ldr	r1, [pc, #336]	; (8004140 <enter_setup_state+0x4f8>)
 8003fee:	4856      	ldr	r0, [pc, #344]	; (8004148 <enter_setup_state+0x500>)
 8003ff0:	f008 fa5a 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Observer M Matrix (K/J)", "-", "-", INV_M_TH);
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	; (800412c <enter_setup_state+0x4e4>)
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fac5 	bl	8000588 <__aeabi_f2d>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004006:	4b4e      	ldr	r3, [pc, #312]	; (8004140 <enter_setup_state+0x4f8>)
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <enter_setup_state+0x4f8>)
 800400c:	4a4f      	ldr	r2, [pc, #316]	; (800414c <enter_setup_state+0x504>)
 800400e:	494c      	ldr	r1, [pc, #304]	; (8004140 <enter_setup_state+0x4f8>)
 8004010:	484f      	ldr	r0, [pc, #316]	; (8004150 <enter_setup_state+0x508>)
 8004012:	f008 fa49 	bl	800c4a8 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "-", "Ambient Temp @ Calibration (C)", "-", "-", T_AMBIENT);
 8004016:	4b45      	ldr	r3, [pc, #276]	; (800412c <enter_setup_state+0x4e4>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fab4 	bl	8000588 <__aeabi_f2d>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004028:	4b45      	ldr	r3, [pc, #276]	; (8004140 <enter_setup_state+0x4f8>)
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4b44      	ldr	r3, [pc, #272]	; (8004140 <enter_setup_state+0x4f8>)
 800402e:	4a49      	ldr	r2, [pc, #292]	; (8004154 <enter_setup_state+0x50c>)
 8004030:	4943      	ldr	r1, [pc, #268]	; (8004140 <enter_setup_state+0x4f8>)
 8004032:	483c      	ldr	r0, [pc, #240]	; (8004124 <enter_setup_state+0x4dc>)
 8004034:	f008 fa38 	bl	800c4a8 <iprintf>

	    printf("\r\n CAN:\r\n");
 8004038:	4847      	ldr	r0, [pc, #284]	; (8004158 <enter_setup_state+0x510>)
 800403a:	f008 fabb 	bl	800c5b4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 800403e:	4b47      	ldr	r3, [pc, #284]	; (800415c <enter_setup_state+0x514>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	4b46      	ldr	r3, [pc, #280]	; (8004160 <enter_setup_state+0x518>)
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <enter_setup_state+0x51c>)
 800404a:	4a47      	ldr	r2, [pc, #284]	; (8004168 <enter_setup_state+0x520>)
 800404c:	4947      	ldr	r1, [pc, #284]	; (800416c <enter_setup_state+0x524>)
 800404e:	4848      	ldr	r0, [pc, #288]	; (8004170 <enter_setup_state+0x528>)
 8004050:	f008 fa2a 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8004054:	4b41      	ldr	r3, [pc, #260]	; (800415c <enter_setup_state+0x514>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	4b41      	ldr	r3, [pc, #260]	; (8004160 <enter_setup_state+0x518>)
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	4b41      	ldr	r3, [pc, #260]	; (8004164 <enter_setup_state+0x51c>)
 8004060:	4a44      	ldr	r2, [pc, #272]	; (8004174 <enter_setup_state+0x52c>)
 8004062:	4945      	ldr	r1, [pc, #276]	; (8004178 <enter_setup_state+0x530>)
 8004064:	4842      	ldr	r0, [pc, #264]	; (8004170 <enter_setup_state+0x528>)
 8004066:	f008 fa1f 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 800406a:	4b3c      	ldr	r3, [pc, #240]	; (800415c <enter_setup_state+0x514>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	4b42      	ldr	r3, [pc, #264]	; (800417c <enter_setup_state+0x534>)
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <enter_setup_state+0x51c>)
 8004076:	4a42      	ldr	r2, [pc, #264]	; (8004180 <enter_setup_state+0x538>)
 8004078:	4942      	ldr	r1, [pc, #264]	; (8004184 <enter_setup_state+0x53c>)
 800407a:	4843      	ldr	r0, [pc, #268]	; (8004188 <enter_setup_state+0x540>)
 800407c:	f008 fa14 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <enter_setup_state+0x4e4>)
 8004082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa7f 	bl	8000588 <__aeabi_f2d>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004092:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <enter_setup_state+0x4f8>)
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <enter_setup_state+0x4f8>)
 8004098:	4a3c      	ldr	r2, [pc, #240]	; (800418c <enter_setup_state+0x544>)
 800409a:	493d      	ldr	r1, [pc, #244]	; (8004190 <enter_setup_state+0x548>)
 800409c:	4821      	ldr	r0, [pc, #132]	; (8004124 <enter_setup_state+0x4dc>)
 800409e:	f008 fa03 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <enter_setup_state+0x4e4>)
 80040a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fa6e 	bl	8000588 <__aeabi_f2d>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <enter_setup_state+0x4f8>)
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <enter_setup_state+0x4f8>)
 80040ba:	4a36      	ldr	r2, [pc, #216]	; (8004194 <enter_setup_state+0x54c>)
 80040bc:	4936      	ldr	r1, [pc, #216]	; (8004198 <enter_setup_state+0x550>)
 80040be:	4819      	ldr	r0, [pc, #100]	; (8004124 <enter_setup_state+0x4dc>)
 80040c0:	f008 f9f2 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "-", "-", KP_MAX);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <enter_setup_state+0x4e4>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc fa5d 	bl	8000588 <__aeabi_f2d>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <enter_setup_state+0x4f8>)
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	4b19      	ldr	r3, [pc, #100]	; (8004140 <enter_setup_state+0x4f8>)
 80040dc:	4a2f      	ldr	r2, [pc, #188]	; (800419c <enter_setup_state+0x554>)
 80040de:	4930      	ldr	r1, [pc, #192]	; (80041a0 <enter_setup_state+0x558>)
 80040e0:	4810      	ldr	r0, [pc, #64]	; (8004124 <enter_setup_state+0x4dc>)
 80040e2:	f008 f9e1 	bl	800c4a8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "-", "-", KD_MAX);
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <enter_setup_state+0x4e4>)
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fa4c 	bl	8000588 <__aeabi_f2d>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <enter_setup_state+0x4f8>)
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <enter_setup_state+0x4f8>)
 80040fe:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <enter_setup_state+0x55c>)
 8004100:	4929      	ldr	r1, [pc, #164]	; (80041a8 <enter_setup_state+0x560>)
 8004102:	4808      	ldr	r0, [pc, #32]	; (8004124 <enter_setup_state+0x4dc>)
 8004104:	f008 f9d0 	bl	800c4a8 <iprintf>

	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8004108:	4828      	ldr	r0, [pc, #160]	; (80041ac <enter_setup_state+0x564>)
 800410a:	f008 f9cd 	bl	800c4a8 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 800410e:	4828      	ldr	r0, [pc, #160]	; (80041b0 <enter_setup_state+0x568>)
 8004110:	f008 f9ca 	bl	800c4a8 <iprintf>
 }
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	08010c88 	.word	0x08010c88
 8004120:	08010ca0 	.word	0x08010ca0
 8004124:	08010bf8 	.word	0x08010bf8
 8004128:	08010cac 	.word	0x08010cac
 800412c:	2000033c 	.word	0x2000033c
 8004130:	08010cdc 	.word	0x08010cdc
 8004134:	08010a80 	.word	0x08010a80
 8004138:	08010cbc 	.word	0x08010cbc
 800413c:	08010cd8 	.word	0x08010cd8
 8004140:	080109d8 	.word	0x080109d8
 8004144:	08010ce4 	.word	0x08010ce4
 8004148:	08010d00 	.word	0x08010d00
 800414c:	08010d20 	.word	0x08010d20
 8004150:	08010aa8 	.word	0x08010aa8
 8004154:	08010d38 	.word	0x08010d38
 8004158:	08010d58 	.word	0x08010d58
 800415c:	2000043c 	.word	0x2000043c
 8004160:	08010d90 	.word	0x08010d90
 8004164:	080109c0 	.word	0x080109c0
 8004168:	08010d64 	.word	0x08010d64
 800416c:	08010d6c 	.word	0x08010d6c
 8004170:	08010d70 	.word	0x08010d70
 8004174:	08010d94 	.word	0x08010d94
 8004178:	08010da0 	.word	0x08010da0
 800417c:	08010dc8 	.word	0x08010dc8
 8004180:	08010da4 	.word	0x08010da4
 8004184:	08010dc4 	.word	0x08010dc4
 8004188:	080109dc 	.word	0x080109dc
 800418c:	08010dd0 	.word	0x08010dd0
 8004190:	08010dec 	.word	0x08010dec
 8004194:	08010df0 	.word	0x08010df0
 8004198:	08010e10 	.word	0x08010e10
 800419c:	08010e14 	.word	0x08010e14
 80041a0:	08010e30 	.word	0x08010e30
 80041a4:	08010e34 	.word	0x08010e34
 80041a8:	08010e54 	.word	0x08010e54
 80041ac:	08010e58 	.word	0x08010e58
 80041b0:	08010ea4 	.word	0x08010ea4

080041b4 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7c5b      	ldrb	r3, [r3, #17]
 80041c0:	3b61      	subs	r3, #97	; 0x61
 80041c2:	2b19      	cmp	r3, #25
 80041c4:	f200 8355 	bhi.w	8004872 <process_user_input+0x6be>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <process_user_input+0x1c>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080044e3 	.word	0x080044e3
 80041d4:	080042e5 	.word	0x080042e5
 80041d8:	0800448f 	.word	0x0800448f
 80041dc:	08004787 	.word	0x08004787
 80041e0:	0800466d 	.word	0x0800466d
 80041e4:	080043c9 	.word	0x080043c9
 80041e8:	08004591 	.word	0x08004591
 80041ec:	0800443b 	.word	0x0800443b
 80041f0:	08004339 	.word	0x08004339
 80041f4:	08004619 	.word	0x08004619
 80041f8:	080045d5 	.word	0x080045d5
 80041fc:	08004375 	.word	0x08004375
 8004200:	08004357 	.word	0x08004357
 8004204:	080046c1 	.word	0x080046c1
 8004208:	08004291 	.word	0x08004291
 800420c:	080047cb 	.word	0x080047cb
 8004210:	08004873 	.word	0x08004873
 8004214:	08004873 	.word	0x08004873
 8004218:	08004873 	.word	0x08004873
 800421c:	0800441d 	.word	0x0800441d
 8004220:	08004873 	.word	0x08004873
 8004224:	0800481f 	.word	0x0800481f
 8004228:	08004873 	.word	0x08004873
 800422c:	08004743 	.word	0x08004743
 8004230:	08004239 	.word	0x08004239
 8004234:	08004265 	.word	0x08004265
//		 case 'q':
//			 KI_Q = fmaxf(fminf(atof(fsmstate->cmd_buff), 1.0f), 0.0f);
//			 printf("KI_Q set to %f\r\n", KI_Q);
//			 break;
 		 case 'y':
 			 EN_ENC_LINEARIZE = atoi(fsmstate->cmd_buff);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3308      	adds	r3, #8
 800423c:	4618      	mov	r0, r3
 800423e:	f007 fc84 	bl	800bb4a <atoi>
 8004242:	4603      	mov	r3, r0
 8004244:	4abc      	ldr	r2, [pc, #752]	; (8004538 <process_user_input+0x384>)
 8004246:	6153      	str	r3, [r2, #20]
 			 if (EN_ENC_LINEARIZE!=0) { EN_ENC_LINEARIZE = 1; }
 8004248:	4bbb      	ldr	r3, [pc, #748]	; (8004538 <process_user_input+0x384>)
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <process_user_input+0xa2>
 8004250:	4bb9      	ldr	r3, [pc, #740]	; (8004538 <process_user_input+0x384>)
 8004252:	2201      	movs	r2, #1
 8004254:	615a      	str	r2, [r3, #20]
 			 printf("EN_ENC_LINEARIZE set to %d\r\n", EN_ENC_LINEARIZE);
 8004256:	4bb8      	ldr	r3, [pc, #736]	; (8004538 <process_user_input+0x384>)
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4619      	mov	r1, r3
 800425c:	48b7      	ldr	r0, [pc, #732]	; (800453c <process_user_input+0x388>)
 800425e:	f008 f923 	bl	800c4a8 <iprintf>
 			 break;
 8004262:	e30d      	b.n	8004880 <process_user_input+0x6cc>
 		 case 'z':
 			 EN_ENC_FILTER = atoi(fsmstate->cmd_buff);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3308      	adds	r3, #8
 8004268:	4618      	mov	r0, r3
 800426a:	f007 fc6e 	bl	800bb4a <atoi>
 800426e:	4603      	mov	r3, r0
 8004270:	4ab1      	ldr	r2, [pc, #708]	; (8004538 <process_user_input+0x384>)
 8004272:	6113      	str	r3, [r2, #16]
 			 if (EN_ENC_FILTER!=0) { EN_ENC_FILTER = 1; }
 8004274:	4bb0      	ldr	r3, [pc, #704]	; (8004538 <process_user_input+0x384>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <process_user_input+0xce>
 800427c:	4bae      	ldr	r3, [pc, #696]	; (8004538 <process_user_input+0x384>)
 800427e:	2201      	movs	r2, #1
 8004280:	611a      	str	r2, [r3, #16]
			 printf("EN_ENC_FILTER set to %d\r\n", EN_ENC_FILTER);
 8004282:	4bad      	ldr	r3, [pc, #692]	; (8004538 <process_user_input+0x384>)
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	4619      	mov	r1, r3
 8004288:	48ad      	ldr	r0, [pc, #692]	; (8004540 <process_user_input+0x38c>)
 800428a:	f008 f90d 	bl	800c4a8 <iprintf>
			 break;
 800428e:	e2f7      	b.n	8004880 <process_user_input+0x6cc>
 		 case 'o':
			 R_PHASE = fmaxf(fminf(atof(fsmstate->cmd_buff), 10.0f), 0.0f);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3308      	adds	r3, #8
 8004294:	4618      	mov	r0, r3
 8004296:	f007 fc55 	bl	800bb44 <atof>
 800429a:	ec53 2b10 	vmov	r2, r3, d0
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	f7fc fcc1 	bl	8000c28 <__aeabi_d2f>
 80042a6:	4603      	mov	r3, r0
 80042a8:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80042ac:	ee00 3a10 	vmov	s0, r3
 80042b0:	f00b fe0b 	bl	800feca <fminf>
 80042b4:	eef0 7a40 	vmov.f32	s15, s0
 80042b8:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8004544 <process_user_input+0x390>
 80042bc:	eeb0 0a67 	vmov.f32	s0, s15
 80042c0:	f00b fde8 	bl	800fe94 <fmaxf>
 80042c4:	eef0 7a40 	vmov.f32	s15, s0
 80042c8:	4b9f      	ldr	r3, [pc, #636]	; (8004548 <process_user_input+0x394>)
 80042ca:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("R_PHASE set to %f\r\n", R_PHASE);
 80042ce:	4b9e      	ldr	r3, [pc, #632]	; (8004548 <process_user_input+0x394>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc f958 	bl	8000588 <__aeabi_f2d>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	489b      	ldr	r0, [pc, #620]	; (800454c <process_user_input+0x398>)
 80042de:	f008 f8e3 	bl	800c4a8 <iprintf>
			 break;
 80042e2:	e2cd      	b.n	8004880 <process_user_input+0x6cc>
	 	 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3308      	adds	r3, #8
 80042e8:	4618      	mov	r0, r3
 80042ea:	f007 fc2b 	bl	800bb44 <atof>
 80042ee:	ec53 2b10 	vmov	r2, r3, d0
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fc fc97 	bl	8000c28 <__aeabi_d2f>
 80042fa:	4603      	mov	r3, r0
 80042fc:	eddf 0a94 	vldr	s1, [pc, #592]	; 8004550 <process_user_input+0x39c>
 8004300:	ee00 3a10 	vmov	s0, r3
 8004304:	f00b fde1 	bl	800feca <fminf>
 8004308:	eef0 7a40 	vmov.f32	s15, s0
 800430c:	eddf 0a91 	vldr	s1, [pc, #580]	; 8004554 <process_user_input+0x3a0>
 8004310:	eeb0 0a67 	vmov.f32	s0, s15
 8004314:	f00b fdbe 	bl	800fe94 <fmaxf>
 8004318:	eef0 7a40 	vmov.f32	s15, s0
 800431c:	4b8a      	ldr	r3, [pc, #552]	; (8004548 <process_user_input+0x394>)
 800431e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8004322:	4b89      	ldr	r3, [pc, #548]	; (8004548 <process_user_input+0x394>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc f92e 	bl	8000588 <__aeabi_f2d>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4889      	ldr	r0, [pc, #548]	; (8004558 <process_user_input+0x3a4>)
 8004332:	f008 f8b9 	bl	800c4a8 <iprintf>
			 break;
 8004336:	e2a3      	b.n	8004880 <process_user_input+0x6cc>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3308      	adds	r3, #8
 800433c:	4618      	mov	r0, r3
 800433e:	f007 fc04 	bl	800bb4a <atoi>
 8004342:	4603      	mov	r3, r0
 8004344:	4a7c      	ldr	r2, [pc, #496]	; (8004538 <process_user_input+0x384>)
 8004346:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8004348:	4b7b      	ldr	r3, [pc, #492]	; (8004538 <process_user_input+0x384>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4619      	mov	r1, r3
 800434e:	4883      	ldr	r0, [pc, #524]	; (800455c <process_user_input+0x3a8>)
 8004350:	f008 f8aa 	bl	800c4a8 <iprintf>
			 break;
 8004354:	e294      	b.n	8004880 <process_user_input+0x6cc>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3308      	adds	r3, #8
 800435a:	4618      	mov	r0, r3
 800435c:	f007 fbf5 	bl	800bb4a <atoi>
 8004360:	4603      	mov	r3, r0
 8004362:	4a75      	ldr	r2, [pc, #468]	; (8004538 <process_user_input+0x384>)
 8004364:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 8004366:	4b74      	ldr	r3, [pc, #464]	; (8004538 <process_user_input+0x384>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4619      	mov	r1, r3
 800436c:	487c      	ldr	r0, [pc, #496]	; (8004560 <process_user_input+0x3ac>)
 800436e:	f008 f89b 	bl	800c4a8 <iprintf>
			 break;
 8004372:	e285      	b.n	8004880 <process_user_input+0x6cc>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3308      	adds	r3, #8
 8004378:	4618      	mov	r0, r3
 800437a:	f007 fbe3 	bl	800bb44 <atof>
 800437e:	ec53 2b10 	vmov	r2, r3, d0
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	f7fc fc4f 	bl	8000c28 <__aeabi_d2f>
 800438a:	4603      	mov	r3, r0
 800438c:	eddf 0a75 	vldr	s1, [pc, #468]	; 8004564 <process_user_input+0x3b0>
 8004390:	ee00 3a10 	vmov	s0, r3
 8004394:	f00b fd99 	bl	800feca <fminf>
 8004398:	eef0 7a40 	vmov.f32	s15, s0
 800439c:	eddf 0a69 	vldr	s1, [pc, #420]	; 8004544 <process_user_input+0x390>
 80043a0:	eeb0 0a67 	vmov.f32	s0, s15
 80043a4:	f00b fd76 	bl	800fe94 <fmaxf>
 80043a8:	eef0 7a40 	vmov.f32	s15, s0
 80043ac:	4b66      	ldr	r3, [pc, #408]	; (8004548 <process_user_input+0x394>)
 80043ae:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 80043b2:	4b65      	ldr	r3, [pc, #404]	; (8004548 <process_user_input+0x394>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc f8e6 	bl	8000588 <__aeabi_f2d>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4869      	ldr	r0, [pc, #420]	; (8004568 <process_user_input+0x3b4>)
 80043c2:	f008 f871 	bl	800c4a8 <iprintf>
			 break;
 80043c6:	e25b      	b.n	8004880 <process_user_input+0x6cc>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3308      	adds	r3, #8
 80043cc:	4618      	mov	r0, r3
 80043ce:	f007 fbb9 	bl	800bb44 <atof>
 80043d2:	ec53 2b10 	vmov	r2, r3, d0
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	f7fc fc25 	bl	8000c28 <__aeabi_d2f>
 80043de:	4603      	mov	r3, r0
 80043e0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800456c <process_user_input+0x3b8>
 80043e4:	ee00 3a10 	vmov	s0, r3
 80043e8:	f00b fd6f 	bl	800feca <fminf>
 80043ec:	eef0 7a40 	vmov.f32	s15, s0
 80043f0:	eddf 0a54 	vldr	s1, [pc, #336]	; 8004544 <process_user_input+0x390>
 80043f4:	eeb0 0a67 	vmov.f32	s0, s15
 80043f8:	f00b fd4c 	bl	800fe94 <fmaxf>
 80043fc:	eef0 7a40 	vmov.f32	s15, s0
 8004400:	4b51      	ldr	r3, [pc, #324]	; (8004548 <process_user_input+0x394>)
 8004402:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8004406:	4b50      	ldr	r3, [pc, #320]	; (8004548 <process_user_input+0x394>)
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc f8bc 	bl	8000588 <__aeabi_f2d>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4856      	ldr	r0, [pc, #344]	; (8004570 <process_user_input+0x3bc>)
 8004416:	f008 f847 	bl	800c4a8 <iprintf>
			 break;
 800441a:	e231      	b.n	8004880 <process_user_input+0x6cc>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3308      	adds	r3, #8
 8004420:	4618      	mov	r0, r3
 8004422:	f007 fb92 	bl	800bb4a <atoi>
 8004426:	4603      	mov	r3, r0
 8004428:	4a43      	ldr	r2, [pc, #268]	; (8004538 <process_user_input+0x384>)
 800442a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 800442c:	4b42      	ldr	r3, [pc, #264]	; (8004538 <process_user_input+0x384>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4619      	mov	r1, r3
 8004432:	4850      	ldr	r0, [pc, #320]	; (8004574 <process_user_input+0x3c0>)
 8004434:	f008 f838 	bl	800c4a8 <iprintf>
			 break;
 8004438:	e222      	b.n	8004880 <process_user_input+0x6cc>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3308      	adds	r3, #8
 800443e:	4618      	mov	r0, r3
 8004440:	f007 fb80 	bl	800bb44 <atof>
 8004444:	ec53 2b10 	vmov	r2, r3, d0
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	f7fc fbec 	bl	8000c28 <__aeabi_d2f>
 8004450:	4603      	mov	r3, r0
 8004452:	eddf 0a49 	vldr	s1, [pc, #292]	; 8004578 <process_user_input+0x3c4>
 8004456:	ee00 3a10 	vmov	s0, r3
 800445a:	f00b fd36 	bl	800feca <fminf>
 800445e:	eef0 7a40 	vmov.f32	s15, s0
 8004462:	eddf 0a38 	vldr	s1, [pc, #224]	; 8004544 <process_user_input+0x390>
 8004466:	eeb0 0a67 	vmov.f32	s0, s15
 800446a:	f00b fd13 	bl	800fe94 <fmaxf>
 800446e:	eef0 7a40 	vmov.f32	s15, s0
 8004472:	4b35      	ldr	r3, [pc, #212]	; (8004548 <process_user_input+0x394>)
 8004474:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8004478:	4b33      	ldr	r3, [pc, #204]	; (8004548 <process_user_input+0x394>)
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc f883 	bl	8000588 <__aeabi_f2d>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	483d      	ldr	r0, [pc, #244]	; (800457c <process_user_input+0x3c8>)
 8004488:	f008 f80e 	bl	800c4a8 <iprintf>
			 break;
 800448c:	e1f8      	b.n	8004880 <process_user_input+0x6cc>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3308      	adds	r3, #8
 8004492:	4618      	mov	r0, r3
 8004494:	f007 fb56 	bl	800bb44 <atof>
 8004498:	ec53 2b10 	vmov	r2, r3, d0
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f7fc fbc2 	bl	8000c28 <__aeabi_d2f>
 80044a4:	4603      	mov	r3, r0
 80044a6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004580 <process_user_input+0x3cc>
 80044aa:	ee00 3a10 	vmov	s0, r3
 80044ae:	f00b fd0c 	bl	800feca <fminf>
 80044b2:	eef0 7a40 	vmov.f32	s15, s0
 80044b6:	eddf 0a23 	vldr	s1, [pc, #140]	; 8004544 <process_user_input+0x390>
 80044ba:	eeb0 0a67 	vmov.f32	s0, s15
 80044be:	f00b fce9 	bl	800fe94 <fmaxf>
 80044c2:	eef0 7a40 	vmov.f32	s15, s0
 80044c6:	4b20      	ldr	r3, [pc, #128]	; (8004548 <process_user_input+0x394>)
 80044c8:	edc3 7a04 	vstr	s15, [r3, #16]
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 80044cc:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <process_user_input+0x394>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc f859 	bl	8000588 <__aeabi_f2d>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	482a      	ldr	r0, [pc, #168]	; (8004584 <process_user_input+0x3d0>)
 80044dc:	f007 ffe4 	bl	800c4a8 <iprintf>
			 break;
 80044e0:	e1ce      	b.n	8004880 <process_user_input+0x6cc>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3308      	adds	r3, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f007 fb2c 	bl	800bb44 <atof>
 80044ec:	ec53 2b10 	vmov	r2, r3, d0
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7fc fb98 	bl	8000c28 <__aeabi_d2f>
 80044f8:	4603      	mov	r3, r0
 80044fa:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80044fe:	ee00 3a10 	vmov	s0, r3
 8004502:	f00b fce2 	bl	800feca <fminf>
 8004506:	eef0 7a40 	vmov.f32	s15, s0
 800450a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8004544 <process_user_input+0x390>
 800450e:	eeb0 0a67 	vmov.f32	s0, s15
 8004512:	f00b fcbf 	bl	800fe94 <fmaxf>
 8004516:	eef0 7a40 	vmov.f32	s15, s0
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <process_user_input+0x394>)
 800451c:	edc3 7a05 	vstr	s15, [r3, #20]
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <process_user_input+0x394>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	4618      	mov	r0, r3
 8004526:	f7fc f82f 	bl	8000588 <__aeabi_f2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4816      	ldr	r0, [pc, #88]	; (8004588 <process_user_input+0x3d4>)
 8004530:	f007 ffba 	bl	800c4a8 <iprintf>
			 break;
 8004534:	e1a4      	b.n	8004880 <process_user_input+0x6cc>
 8004536:	bf00      	nop
 8004538:	2000043c 	.word	0x2000043c
 800453c:	08010ed0 	.word	0x08010ed0
 8004540:	08010ef0 	.word	0x08010ef0
 8004544:	00000000 	.word	0x00000000
 8004548:	2000033c 	.word	0x2000033c
 800454c:	08010f0c 	.word	0x08010f0c
 8004550:	44fa0000 	.word	0x44fa0000
 8004554:	42c80000 	.word	0x42c80000
 8004558:	08010f20 	.word	0x08010f20
 800455c:	08010f34 	.word	0x08010f34
 8004560:	08010f48 	.word	0x08010f48
 8004564:	42700000 	.word	0x42700000
 8004568:	08010f60 	.word	0x08010f60
 800456c:	42040000 	.word	0x42040000
 8004570:	08010f74 	.word	0x08010f74
 8004574:	08010f8c 	.word	0x08010f8c
 8004578:	43160000 	.word	0x43160000
 800457c:	08010fa4 	.word	0x08010fa4
 8004580:	42200000 	.word	0x42200000
 8004584:	08010fbc 	.word	0x08010fbc
 8004588:	08010fd4 	.word	0x08010fd4
 800458c:	3a83126f 	.word	0x3a83126f
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3308      	adds	r3, #8
 8004594:	4618      	mov	r0, r3
 8004596:	f007 fad5 	bl	800bb44 <atof>
 800459a:	ec53 2b10 	vmov	r2, r3, d0
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	f7fc fb41 	bl	8000c28 <__aeabi_d2f>
 80045a6:	4603      	mov	r3, r0
 80045a8:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 800458c <process_user_input+0x3d8>
 80045ac:	ee00 3a10 	vmov	s0, r3
 80045b0:	f00b fc70 	bl	800fe94 <fmaxf>
 80045b4:	eef0 7a40 	vmov.f32	s15, s0
 80045b8:	4bc8      	ldr	r3, [pc, #800]	; (80048dc <process_user_input+0x728>)
 80045ba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			 printf("GR set to %f\r\n", GR);
 80045be:	4bc7      	ldr	r3, [pc, #796]	; (80048dc <process_user_input+0x728>)
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fb ffe0 	bl	8000588 <__aeabi_f2d>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	48c4      	ldr	r0, [pc, #784]	; (80048e0 <process_user_input+0x72c>)
 80045ce:	f007 ff6b 	bl	800c4a8 <iprintf>
			 break;
 80045d2:	e155      	b.n	8004880 <process_user_input+0x6cc>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3308      	adds	r3, #8
 80045d8:	4618      	mov	r0, r3
 80045da:	f007 fab3 	bl	800bb44 <atof>
 80045de:	ec53 2b10 	vmov	r2, r3, d0
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	f7fc fb1f 	bl	8000c28 <__aeabi_d2f>
 80045ea:	4603      	mov	r3, r0
 80045ec:	eddf 0abd 	vldr	s1, [pc, #756]	; 80048e4 <process_user_input+0x730>
 80045f0:	ee00 3a10 	vmov	s0, r3
 80045f4:	f00b fc4e 	bl	800fe94 <fmaxf>
 80045f8:	eef0 7a40 	vmov.f32	s15, s0
 80045fc:	4bb7      	ldr	r3, [pc, #732]	; (80048dc <process_user_input+0x728>)
 80045fe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8004602:	4bb6      	ldr	r3, [pc, #728]	; (80048dc <process_user_input+0x728>)
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb ffbe 	bl	8000588 <__aeabi_f2d>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	48b5      	ldr	r0, [pc, #724]	; (80048e8 <process_user_input+0x734>)
 8004612:	f007 ff49 	bl	800c4a8 <iprintf>
			 break;
 8004616:	e133      	b.n	8004880 <process_user_input+0x6cc>

		 case 'j':
			 L_D = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3308      	adds	r3, #8
 800461c:	4618      	mov	r0, r3
 800461e:	f007 fa91 	bl	800bb44 <atof>
 8004622:	ec53 2b10 	vmov	r2, r3, d0
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f7fc fafd 	bl	8000c28 <__aeabi_d2f>
 800462e:	4603      	mov	r3, r0
 8004630:	eddf 0aae 	vldr	s1, [pc, #696]	; 80048ec <process_user_input+0x738>
 8004634:	ee00 3a10 	vmov	s0, r3
 8004638:	f00b fc47 	bl	800feca <fminf>
 800463c:	eef0 7a40 	vmov.f32	s15, s0
 8004640:	eddf 0aab 	vldr	s1, [pc, #684]	; 80048f0 <process_user_input+0x73c>
 8004644:	eeb0 0a67 	vmov.f32	s0, s15
 8004648:	f00b fc24 	bl	800fe94 <fmaxf>
 800464c:	eef0 7a40 	vmov.f32	s15, s0
 8004650:	4ba2      	ldr	r3, [pc, #648]	; (80048dc <process_user_input+0x728>)
 8004652:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("L_D set to %f\r\n", L_D);
 8004656:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <process_user_input+0x728>)
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb ff94 	bl	8000588 <__aeabi_f2d>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	48a3      	ldr	r0, [pc, #652]	; (80048f4 <process_user_input+0x740>)
 8004666:	f007 ff1f 	bl	800c4a8 <iprintf>
			 break;
 800466a:	e109      	b.n	8004880 <process_user_input+0x6cc>
		 case 'e':
			 L_Q = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3308      	adds	r3, #8
 8004670:	4618      	mov	r0, r3
 8004672:	f007 fa67 	bl	800bb44 <atof>
 8004676:	ec53 2b10 	vmov	r2, r3, d0
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	f7fc fad3 	bl	8000c28 <__aeabi_d2f>
 8004682:	4603      	mov	r3, r0
 8004684:	eddf 0a99 	vldr	s1, [pc, #612]	; 80048ec <process_user_input+0x738>
 8004688:	ee00 3a10 	vmov	s0, r3
 800468c:	f00b fc1d 	bl	800feca <fminf>
 8004690:	eef0 7a40 	vmov.f32	s15, s0
 8004694:	eddf 0a96 	vldr	s1, [pc, #600]	; 80048f0 <process_user_input+0x73c>
 8004698:	eeb0 0a67 	vmov.f32	s0, s15
 800469c:	f00b fbfa 	bl	800fe94 <fmaxf>
 80046a0:	eef0 7a40 	vmov.f32	s15, s0
 80046a4:	4b8d      	ldr	r3, [pc, #564]	; (80048dc <process_user_input+0x728>)
 80046a6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("L_Q set to %f\r\n", L_Q);
 80046aa:	4b8c      	ldr	r3, [pc, #560]	; (80048dc <process_user_input+0x728>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb ff6a 	bl	8000588 <__aeabi_f2d>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	488f      	ldr	r0, [pc, #572]	; (80048f8 <process_user_input+0x744>)
 80046ba:	f007 fef5 	bl	800c4a8 <iprintf>
			 break;
 80046be:	e0df      	b.n	8004880 <process_user_input+0x6cc>
		 case 'n':
			 PPAIRS = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3308      	adds	r3, #8
 80046c4:	4618      	mov	r0, r3
 80046c6:	f007 fa3d 	bl	800bb44 <atof>
 80046ca:	ec53 2b10 	vmov	r2, r3, d0
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fc faa9 	bl	8000c28 <__aeabi_d2f>
 80046d6:	4603      	mov	r3, r0
 80046d8:	eddf 0a88 	vldr	s1, [pc, #544]	; 80048fc <process_user_input+0x748>
 80046dc:	ee00 3a10 	vmov	s0, r3
 80046e0:	f00b fbf3 	bl	800feca <fminf>
 80046e4:	eef0 7a40 	vmov.f32	s15, s0
 80046e8:	eddf 0a81 	vldr	s1, [pc, #516]	; 80048f0 <process_user_input+0x73c>
 80046ec:	eeb0 0a67 	vmov.f32	s0, s15
 80046f0:	f00b fbd0 	bl	800fe94 <fmaxf>
 80046f4:	eef0 7a40 	vmov.f32	s15, s0
 80046f8:	4b78      	ldr	r3, [pc, #480]	; (80048dc <process_user_input+0x728>)
 80046fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 if (PPAIRS>40.0) {PPAIRS=40.0f;}
 80046fe:	4b77      	ldr	r3, [pc, #476]	; (80048dc <process_user_input+0x728>)
 8004700:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004704:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80048fc <process_user_input+0x748>
 8004708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004710:	dd02      	ble.n	8004718 <process_user_input+0x564>
 8004712:	4b72      	ldr	r3, [pc, #456]	; (80048dc <process_user_input+0x728>)
 8004714:	4a7a      	ldr	r2, [pc, #488]	; (8004900 <process_user_input+0x74c>)
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
			 PPAIRS = (float)( (int)PPAIRS ); // remove any decimal part
 8004718:	4b70      	ldr	r3, [pc, #448]	; (80048dc <process_user_input+0x728>)
 800471a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800471e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004726:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <process_user_input+0x728>)
 8004728:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("PPAIRS set to %f\r\n", PPAIRS);
 800472c:	4b6b      	ldr	r3, [pc, #428]	; (80048dc <process_user_input+0x728>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb ff29 	bl	8000588 <__aeabi_f2d>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4872      	ldr	r0, [pc, #456]	; (8004904 <process_user_input+0x750>)
 800473c:	f007 feb4 	bl	800c4a8 <iprintf>
			 break;
 8004740:	e09e      	b.n	8004880 <process_user_input+0x6cc>

		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3308      	adds	r3, #8
 8004746:	4618      	mov	r0, r3
 8004748:	f007 f9fc 	bl	800bb44 <atof>
 800474c:	ec53 2b10 	vmov	r2, r3, d0
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f7fc fa68 	bl	8000c28 <__aeabi_d2f>
 8004758:	4603      	mov	r3, r0
 800475a:	eddf 0a65 	vldr	s1, [pc, #404]	; 80048f0 <process_user_input+0x73c>
 800475e:	ee00 3a10 	vmov	s0, r3
 8004762:	f00b fb97 	bl	800fe94 <fmaxf>
 8004766:	eef0 7a40 	vmov.f32	s15, s0
 800476a:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <process_user_input+0x728>)
 800476c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8004770:	4b5a      	ldr	r3, [pc, #360]	; (80048dc <process_user_input+0x728>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb ff07 	bl	8000588 <__aeabi_f2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4862      	ldr	r0, [pc, #392]	; (8004908 <process_user_input+0x754>)
 8004780:	f007 fe92 	bl	800c4a8 <iprintf>
			 break;
 8004784:	e07c      	b.n	8004880 <process_user_input+0x6cc>
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3308      	adds	r3, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f007 f9da 	bl	800bb44 <atof>
 8004790:	ec53 2b10 	vmov	r2, r3, d0
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f7fc fa46 	bl	8000c28 <__aeabi_d2f>
 800479c:	4603      	mov	r3, r0
 800479e:	eddf 0a54 	vldr	s1, [pc, #336]	; 80048f0 <process_user_input+0x73c>
 80047a2:	ee00 3a10 	vmov	s0, r3
 80047a6:	f00b fb75 	bl	800fe94 <fmaxf>
 80047aa:	eef0 7a40 	vmov.f32	s15, s0
 80047ae:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <process_user_input+0x728>)
 80047b0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80047b4:	4b49      	ldr	r3, [pc, #292]	; (80048dc <process_user_input+0x728>)
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fb fee5 	bl	8000588 <__aeabi_f2d>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4852      	ldr	r0, [pc, #328]	; (800490c <process_user_input+0x758>)
 80047c4:	f007 fe70 	bl	800c4a8 <iprintf>
			 break;
 80047c8:	e05a      	b.n	8004880 <process_user_input+0x6cc>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3308      	adds	r3, #8
 80047ce:	4618      	mov	r0, r3
 80047d0:	f007 f9b8 	bl	800bb44 <atof>
 80047d4:	ec53 2b10 	vmov	r2, r3, d0
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	f7fc fa24 	bl	8000c28 <__aeabi_d2f>
 80047e0:	4603      	mov	r3, r0
 80047e2:	eddf 0a43 	vldr	s1, [pc, #268]	; 80048f0 <process_user_input+0x73c>
 80047e6:	ee00 3a10 	vmov	s0, r3
 80047ea:	f00b fb53 	bl	800fe94 <fmaxf>
 80047ee:	eef0 7a40 	vmov.f32	s15, s0
 80047f2:	4b3a      	ldr	r3, [pc, #232]	; (80048dc <process_user_input+0x728>)
 80047f4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			 P_MIN = -P_MAX;
 80047f8:	4b38      	ldr	r3, [pc, #224]	; (80048dc <process_user_input+0x728>)
 80047fa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80047fe:	eef1 7a67 	vneg.f32	s15, s15
 8004802:	4b36      	ldr	r3, [pc, #216]	; (80048dc <process_user_input+0x728>)
 8004804:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("P_MAX set to %f\r\n", P_MAX);
 8004808:	4b34      	ldr	r3, [pc, #208]	; (80048dc <process_user_input+0x728>)
 800480a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb febb 	bl	8000588 <__aeabi_f2d>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	483e      	ldr	r0, [pc, #248]	; (8004910 <process_user_input+0x75c>)
 8004818:	f007 fe46 	bl	800c4a8 <iprintf>
			 break;
 800481c:	e030      	b.n	8004880 <process_user_input+0x6cc>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3308      	adds	r3, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f007 f98e 	bl	800bb44 <atof>
 8004828:	ec53 2b10 	vmov	r2, r3, d0
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	f7fc f9fa 	bl	8000c28 <__aeabi_d2f>
 8004834:	4603      	mov	r3, r0
 8004836:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80048f0 <process_user_input+0x73c>
 800483a:	ee00 3a10 	vmov	s0, r3
 800483e:	f00b fb29 	bl	800fe94 <fmaxf>
 8004842:	eef0 7a40 	vmov.f32	s15, s0
 8004846:	4b25      	ldr	r3, [pc, #148]	; (80048dc <process_user_input+0x728>)
 8004848:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			 V_MIN = -V_MAX;
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <process_user_input+0x728>)
 800484e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004852:	eef1 7a67 	vneg.f32	s15, s15
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <process_user_input+0x728>)
 8004858:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			 printf("V_MAX set to %f\r\n", V_MAX);
 800485c:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <process_user_input+0x728>)
 800485e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004860:	4618      	mov	r0, r3
 8004862:	f7fb fe91 	bl	8000588 <__aeabi_f2d>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	482a      	ldr	r0, [pc, #168]	; (8004914 <process_user_input+0x760>)
 800486c:	f007 fe1c 	bl	800c4a8 <iprintf>
			 break;
 8004870:	e006      	b.n	8004880 <process_user_input+0x6cc>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", (char)fsmstate->cmd_buff[0]);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7a1b      	ldrb	r3, [r3, #8]
 8004876:	4619      	mov	r1, r3
 8004878:	4827      	ldr	r0, [pc, #156]	; (8004918 <process_user_input+0x764>)
 800487a:	f007 fe15 	bl	800c4a8 <iprintf>
			 break;
 800487e:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8004880:	4b26      	ldr	r3, [pc, #152]	; (800491c <process_user_input+0x768>)
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	9200      	str	r2, [sp, #0]
 8004886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004888:	f001 fa97 	bl	8005dba <preference_writer_ready>
 800488c:	4603      	mov	r3, r0
 800488e:	f083 0301 	eor.w	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <process_user_input+0x6ea>
 8004898:	4820      	ldr	r0, [pc, #128]	; (800491c <process_user_input+0x768>)
 800489a:	f001 fa7f 	bl	8005d9c <preference_writer_open>
	 preference_writer_flush(&prefs);
 800489e:	481f      	ldr	r0, [pc, #124]	; (800491c <process_user_input+0x768>)
 80048a0:	f001 fa98 	bl	8005dd4 <preference_writer_flush>
	 preference_writer_close(&prefs);
 80048a4:	481d      	ldr	r0, [pc, #116]	; (800491c <process_user_input+0x768>)
 80048a6:	f001 fb13 	bl	8005ed0 <preference_writer_close>
	 preference_writer_load(prefs);
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <process_user_input+0x768>)
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	9200      	str	r2, [sp, #0]
 80048b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048b2:	f001 facb 	bl	8005e4c <preference_writer_load>

	 enter_setup_state();
 80048b6:	f7ff f9c7 	bl	8003c48 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	741a      	strb	r2, [r3, #16]
	 fsmstate->cmd_id = 0;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	745a      	strb	r2, [r3, #17]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3308      	adds	r3, #8
 80048ca:	2208      	movs	r2, #8
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f007 f978 	bl	800bbc4 <memset>
 }
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	2000033c 	.word	0x2000033c
 80048e0:	08010fe8 	.word	0x08010fe8
 80048e4:	38d1b717 	.word	0x38d1b717
 80048e8:	08010ff8 	.word	0x08010ff8
 80048ec:	3dcccccd 	.word	0x3dcccccd
 80048f0:	00000000 	.word	0x00000000
 80048f4:	08011008 	.word	0x08011008
 80048f8:	08011018 	.word	0x08011018
 80048fc:	42200000 	.word	0x42200000
 8004900:	42200000 	.word	0x42200000
 8004904:	08011028 	.word	0x08011028
 8004908:	0801103c 	.word	0x0801103c
 800490c:	08011050 	.word	0x08011050
 8004910:	08011064 	.word	0x08011064
 8004914:	08011078 	.word	0x08011078
 8004918:	0801108c 	.word	0x0801108c
 800491c:	2000083c 	.word	0x2000083c

08004920 <reset_flash_values>:


 void reset_flash_values(){
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af02      	add	r7, sp, #8

	PHASE_ORDER = 0;
 8004926:	4b40      	ldr	r3, [pc, #256]	; (8004a28 <reset_flash_values+0x108>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
	CAN_ID = 1;
 800492c:	4b3e      	ldr	r3, [pc, #248]	; (8004a28 <reset_flash_values+0x108>)
 800492e:	2201      	movs	r2, #1
 8004930:	605a      	str	r2, [r3, #4]
	CAN_MASTER = 0;
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <reset_flash_values+0x108>)
 8004934:	2200      	movs	r2, #0
 8004936:	609a      	str	r2, [r3, #8]
	CAN_TIMEOUT = 1000;
 8004938:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <reset_flash_values+0x108>)
 800493a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800493e:	60da      	str	r2, [r3, #12]
	EN_ENC_FILTER = 0;
 8004940:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <reset_flash_values+0x108>)
 8004942:	2200      	movs	r2, #0
 8004944:	611a      	str	r2, [r3, #16]
	EN_ENC_LINEARIZE = 0;
 8004946:	4b38      	ldr	r3, [pc, #224]	; (8004a28 <reset_flash_values+0x108>)
 8004948:	2200      	movs	r2, #0
 800494a:	615a      	str	r2, [r3, #20]
	E_ZERO = 0;
 800494c:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <reset_flash_values+0x108>)
 800494e:	2200      	movs	r2, #0
 8004950:	61da      	str	r2, [r3, #28]
	M_ZERO = 0;
 8004952:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <reset_flash_values+0x108>)
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]

	I_BW = 1000;
 8004958:	4b34      	ldr	r3, [pc, #208]	; (8004a2c <reset_flash_values+0x10c>)
 800495a:	4a35      	ldr	r2, [pc, #212]	; (8004a30 <reset_flash_values+0x110>)
 800495c:	609a      	str	r2, [r3, #8]
	I_MAX=40;
 800495e:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <reset_flash_values+0x10c>)
 8004960:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <reset_flash_values+0x114>)
 8004962:	60da      	str	r2, [r3, #12]
	I_MAX_CONT = 14.0f;
 8004964:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <reset_flash_values+0x10c>)
 8004966:	4a34      	ldr	r2, [pc, #208]	; (8004a38 <reset_flash_values+0x118>)
 8004968:	611a      	str	r2, [r3, #16]
	I_CAL = 5.0f;
 800496a:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <reset_flash_values+0x10c>)
 800496c:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <reset_flash_values+0x11c>)
 800496e:	615a      	str	r2, [r3, #20]
	I_FW_MAX=0;
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <reset_flash_values+0x10c>)
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	619a      	str	r2, [r3, #24]

//	K_SCALE = 0.000133f;          // K_loop/Loop BW (Hz) 0.0042
//	KI_D = 0.0373f;                // PI zero, in radians per sample
//	KI_Q = 0.0373f;                // PI zero, in radians per sample

	PPAIRS = 21.0f;
 8004978:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <reset_flash_values+0x10c>)
 800497a:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <reset_flash_values+0x120>)
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
	GR = 6.0f;
 800497e:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <reset_flash_values+0x10c>)
 8004980:	4a30      	ldr	r2, [pc, #192]	; (8004a44 <reset_flash_values+0x124>)
 8004982:	635a      	str	r2, [r3, #52]	; 0x34
	KT = 1.0f;
 8004984:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <reset_flash_values+0x10c>)
 8004986:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
	L_D = 0.000003f;
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <reset_flash_values+0x10c>)
 800498e:	4a2e      	ldr	r2, [pc, #184]	; (8004a48 <reset_flash_values+0x128>)
 8004990:	63da      	str	r2, [r3, #60]	; 0x3c
	L_Q = 0.000003f;
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <reset_flash_values+0x10c>)
 8004994:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <reset_flash_values+0x128>)
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
	R_PHASE = 0.433f;
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <reset_flash_values+0x10c>)
 800499a:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <reset_flash_values+0x12c>)
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
	R_NOMINAL = 0.0f;
 800499e:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <reset_flash_values+0x10c>)
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	649a      	str	r2, [r3, #72]	; 0x48

	R_TH = 1.25f;
 80049a6:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <reset_flash_values+0x10c>)
 80049a8:	4a29      	ldr	r2, [pc, #164]	; (8004a50 <reset_flash_values+0x130>)
 80049aa:	64da      	str	r2, [r3, #76]	; 0x4c
	C_TH = 0.0f;
 80049ac:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <reset_flash_values+0x10c>)
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	651a      	str	r2, [r3, #80]	; 0x50
	INV_M_TH = 0.02825f;
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <reset_flash_values+0x10c>)
 80049b6:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <reset_flash_values+0x134>)
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
	T_AMBIENT = 25.0f;
 80049ba:	4b1c      	ldr	r3, [pc, #112]	; (8004a2c <reset_flash_values+0x10c>)
 80049bc:	4a26      	ldr	r2, [pc, #152]	; (8004a58 <reset_flash_values+0x138>)
 80049be:	659a      	str	r2, [r3, #88]	; 0x58
	TEMP_MAX = 125.0f;
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <reset_flash_values+0x10c>)
 80049c2:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <reset_flash_values+0x13c>)
 80049c4:	65da      	str	r2, [r3, #92]	; 0x5c

	P_MIN = -12.5f;
 80049c6:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <reset_flash_values+0x10c>)
 80049c8:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <reset_flash_values+0x140>)
 80049ca:	661a      	str	r2, [r3, #96]	; 0x60
	P_MAX = 12.5f;
 80049cc:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <reset_flash_values+0x10c>)
 80049ce:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <reset_flash_values+0x144>)
 80049d0:	665a      	str	r2, [r3, #100]	; 0x64
	V_MIN = -65.0f;
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <reset_flash_values+0x10c>)
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <reset_flash_values+0x148>)
 80049d6:	669a      	str	r2, [r3, #104]	; 0x68
	V_MAX = 65.0f;
 80049d8:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <reset_flash_values+0x10c>)
 80049da:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <reset_flash_values+0x14c>)
 80049dc:	66da      	str	r2, [r3, #108]	; 0x6c
	KP_MAX = 500.0f;
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <reset_flash_values+0x10c>)
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <reset_flash_values+0x150>)
 80049e2:	671a      	str	r2, [r3, #112]	; 0x70
	KD_MAX = 10.0f;
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <reset_flash_values+0x10c>)
 80049e6:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <reset_flash_values+0x154>)
 80049e8:	675a      	str	r2, [r3, #116]	; 0x74

	/* Write new settings to flash */
	if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <reset_flash_values+0x158>)
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	9200      	str	r2, [sp, #0]
 80049f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049f2:	f001 f9e2 	bl	8005dba <preference_writer_ready>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f083 0301 	eor.w	r3, r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <reset_flash_values+0xe8>
 8004a02:	481d      	ldr	r0, [pc, #116]	; (8004a78 <reset_flash_values+0x158>)
 8004a04:	f001 f9ca 	bl	8005d9c <preference_writer_open>
	preference_writer_flush(&prefs);
 8004a08:	481b      	ldr	r0, [pc, #108]	; (8004a78 <reset_flash_values+0x158>)
 8004a0a:	f001 f9e3 	bl	8005dd4 <preference_writer_flush>
	preference_writer_close(&prefs);
 8004a0e:	481a      	ldr	r0, [pc, #104]	; (8004a78 <reset_flash_values+0x158>)
 8004a10:	f001 fa5e 	bl	8005ed0 <preference_writer_close>
	preference_writer_load(prefs);
 8004a14:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <reset_flash_values+0x158>)
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	9200      	str	r2, [sp, #0]
 8004a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a1c:	f001 fa16 	bl	8005e4c <preference_writer_load>

 }
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	2000043c 	.word	0x2000043c
 8004a2c:	2000033c 	.word	0x2000033c
 8004a30:	447a0000 	.word	0x447a0000
 8004a34:	42200000 	.word	0x42200000
 8004a38:	41600000 	.word	0x41600000
 8004a3c:	40a00000 	.word	0x40a00000
 8004a40:	41a80000 	.word	0x41a80000
 8004a44:	40c00000 	.word	0x40c00000
 8004a48:	3649539c 	.word	0x3649539c
 8004a4c:	3eddb22d 	.word	0x3eddb22d
 8004a50:	3fa00000 	.word	0x3fa00000
 8004a54:	3ce76c8b 	.word	0x3ce76c8b
 8004a58:	41c80000 	.word	0x41c80000
 8004a5c:	42fa0000 	.word	0x42fa0000
 8004a60:	c1480000 	.word	0xc1480000
 8004a64:	41480000 	.word	0x41480000
 8004a68:	c2820000 	.word	0xc2820000
 8004a6c:	42820000 	.word	0x42820000
 8004a70:	43fa0000 	.word	0x43fa0000
 8004a74:	41200000 	.word	0x41200000
 8004a78:	2000083c 	.word	0x2000083c

08004a7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a82:	f107 0314 	add.w	r3, r7, #20
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	605a      	str	r2, [r3, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
 8004a8e:	60da      	str	r2, [r3, #12]
 8004a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	4a37      	ldr	r2, [pc, #220]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004a9c:	f043 0304 	orr.w	r3, r3, #4
 8004aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa2:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4a30      	ldr	r2, [pc, #192]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	6313      	str	r3, [r2, #48]	; 0x30
 8004abe:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ada:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	4a22      	ldr	r2, [pc, #136]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	6313      	str	r3, [r2, #48]	; 0x30
 8004af6:	4b20      	ldr	r3, [pc, #128]	; (8004b78 <MX_GPIO_Init+0xfc>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin, GPIO_PIN_RESET);
 8004b02:	2200      	movs	r2, #0
 8004b04:	f648 0110 	movw	r1, #34832	; 0x8810
 8004b08:	481c      	ldr	r0, [pc, #112]	; (8004b7c <MX_GPIO_Init+0x100>)
 8004b0a:	f003 fd5b 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2120      	movs	r1, #32
 8004b12:	481b      	ldr	r0, [pc, #108]	; (8004b80 <MX_GPIO_Init+0x104>)
 8004b14:	f003 fd56 	bl	80085c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4814      	ldr	r0, [pc, #80]	; (8004b80 <MX_GPIO_Init+0x104>)
 8004b30:	f003 fbb4 	bl	800829c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin;
 8004b34:	f648 0310 	movw	r3, #34832	; 0x8810
 8004b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b42:	2303      	movs	r3, #3
 8004b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	480b      	ldr	r0, [pc, #44]	; (8004b7c <MX_GPIO_Init+0x100>)
 8004b4e:	f003 fba5 	bl	800829c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b52:	2320      	movs	r3, #32
 8004b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b56:	2301      	movs	r3, #1
 8004b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	4619      	mov	r1, r3
 8004b68:	4805      	ldr	r0, [pc, #20]	; (8004b80 <MX_GPIO_Init+0x104>)
 8004b6a:	f003 fb97 	bl	800829c <HAL_GPIO_Init>

}
 8004b6e:	bf00      	nop
 8004b70:	3728      	adds	r7, #40	; 0x28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020000 	.word	0x40020000
 8004b80:	40020800 	.word	0x40020800
 8004b84:	00000000 	.word	0x00000000

08004b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b8e:	f002 f91b 	bl	8006dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b92:	f000 fbf9 	bl	8005388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b96:	f7ff ff71 	bl	8004a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004b9a:	f002 f84d 	bl	8006c38 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004b9e:	f001 fe53 	bl	8006848 <MX_TIM1_Init>
  MX_CAN1_Init();
 8004ba2:	f7fd f913 	bl	8001dcc <MX_CAN1_Init>
  MX_SPI1_Init();
 8004ba6:	f001 f9a3 	bl	8005ef0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8004baa:	f001 f9d9 	bl	8005f60 <MX_SPI3_Init>
  MX_ADC1_Init();
 8004bae:	f7fc fa43 	bl	8001038 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004bb2:	f7fc faab 	bl	800110c <MX_ADC2_Init>
  MX_ADC3_Init();
 8004bb6:	f7fc faf3 	bl	80011a0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8004bba:	f001 fefd 	bl	80069b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004bbe:	f001 ff47 	bl	8006a50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // enable this to use delay_us() function
 8004bc2:	48ac      	ldr	r0, [pc, #688]	; (8004e74 <main+0x2ec>)
 8004bc4:	f004 fe96 	bl	80098f4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); // enable this to time functions in us
 8004bc8:	48ab      	ldr	r0, [pc, #684]	; (8004e78 <main+0x2f0>)
 8004bca:	f004 fe93 	bl	80098f4 <HAL_TIM_Base_Start>

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8004bce:	2106      	movs	r1, #6
 8004bd0:	48aa      	ldr	r0, [pc, #680]	; (8004e7c <main+0x2f4>)
 8004bd2:	f001 f8d2 	bl	8005d7a <preference_writer_init>
  preference_writer_load(prefs);
 8004bd6:	4ba9      	ldr	r3, [pc, #676]	; (8004e7c <main+0x2f4>)
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	9200      	str	r2, [sp, #0]
 8004bdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bde:	f001 f935 	bl	8005e4c <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(PHASE_ORDER==-1){PHASE_ORDER = 0;};
 8004be2:	4ba7      	ldr	r3, [pc, #668]	; (8004e80 <main+0x2f8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bea:	d102      	bne.n	8004bf2 <main+0x6a>
 8004bec:	4ba4      	ldr	r3, [pc, #656]	; (8004e80 <main+0x2f8>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004bf2:	4ba3      	ldr	r3, [pc, #652]	; (8004e80 <main+0x2f8>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bfa:	d102      	bne.n	8004c02 <main+0x7a>
 8004bfc:	4ba0      	ldr	r3, [pc, #640]	; (8004e80 <main+0x2f8>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004c02:	4b9f      	ldr	r3, [pc, #636]	; (8004e80 <main+0x2f8>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0a:	d102      	bne.n	8004c12 <main+0x8a>
 8004c0c:	4b9c      	ldr	r3, [pc, #624]	; (8004e80 <main+0x2f8>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8004c12:	4b9b      	ldr	r3, [pc, #620]	; (8004e80 <main+0x2f8>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1a:	d103      	bne.n	8004c24 <main+0x9c>
 8004c1c:	4b98      	ldr	r3, [pc, #608]	; (8004e80 <main+0x2f8>)
 8004c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c22:	60da      	str	r2, [r3, #12]
  if(EN_ENC_FILTER ==-1){EN_ENC_FILTER = 0;}
 8004c24:	4b96      	ldr	r3, [pc, #600]	; (8004e80 <main+0x2f8>)
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c2c:	d102      	bne.n	8004c34 <main+0xac>
 8004c2e:	4b94      	ldr	r3, [pc, #592]	; (8004e80 <main+0x2f8>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	611a      	str	r2, [r3, #16]
  if(EN_ENC_LINEARIZE ==-1){EN_ENC_LINEARIZE = 0;}
 8004c34:	4b92      	ldr	r3, [pc, #584]	; (8004e80 <main+0x2f8>)
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c3c:	d102      	bne.n	8004c44 <main+0xbc>
 8004c3e:	4b90      	ldr	r3, [pc, #576]	; (8004e80 <main+0x2f8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	615a      	str	r2, [r3, #20]
  if(E_ZERO==-1){E_ZERO = 0;}
 8004c44:	4b8e      	ldr	r3, [pc, #568]	; (8004e80 <main+0x2f8>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c4c:	d102      	bne.n	8004c54 <main+0xcc>
 8004c4e:	4b8c      	ldr	r3, [pc, #560]	; (8004e80 <main+0x2f8>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	61da      	str	r2, [r3, #28]
  if(M_ZERO==-1){M_ZERO = 0;}
 8004c54:	4b8a      	ldr	r3, [pc, #552]	; (8004e80 <main+0x2f8>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5c:	d102      	bne.n	8004c64 <main+0xdc>
 8004c5e:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <main+0x2f8>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]

  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8004c64:	4b87      	ldr	r3, [pc, #540]	; (8004e84 <main+0x2fc>)
 8004c66:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c6a:	eef4 7a67 	vcmp.f32	s15, s15
 8004c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c72:	d609      	bvs.n	8004c88 <main+0x100>
 8004c74:	4b83      	ldr	r3, [pc, #524]	; (8004e84 <main+0x2fc>)
 8004c76:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c7a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c7e:	eef4 7a47 	vcmp.f32	s15, s14
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	d102      	bne.n	8004c8e <main+0x106>
 8004c88:	4b7e      	ldr	r3, [pc, #504]	; (8004e84 <main+0x2fc>)
 8004c8a:	4a7f      	ldr	r2, [pc, #508]	; (8004e88 <main+0x300>)
 8004c8c:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004c8e:	4b7d      	ldr	r3, [pc, #500]	; (8004e84 <main+0x2fc>)
 8004c90:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c94:	eef4 7a67 	vcmp.f32	s15, s15
 8004c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9c:	d609      	bvs.n	8004cb2 <main+0x12a>
 8004c9e:	4b79      	ldr	r3, [pc, #484]	; (8004e84 <main+0x2fc>)
 8004ca0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ca4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ca8:	eef4 7a47 	vcmp.f32	s15, s14
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	d102      	bne.n	8004cb8 <main+0x130>
 8004cb2:	4b74      	ldr	r3, [pc, #464]	; (8004e84 <main+0x2fc>)
 8004cb4:	4a75      	ldr	r2, [pc, #468]	; (8004e8c <main+0x304>)
 8004cb6:	60da      	str	r2, [r3, #12]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004cb8:	4b72      	ldr	r3, [pc, #456]	; (8004e84 <main+0x2fc>)
 8004cba:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cbe:	eef4 7a67 	vcmp.f32	s15, s15
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	d609      	bvs.n	8004cdc <main+0x154>
 8004cc8:	4b6e      	ldr	r3, [pc, #440]	; (8004e84 <main+0x2fc>)
 8004cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004cd2:	eef4 7a47 	vcmp.f32	s15, s14
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	d102      	bne.n	8004ce2 <main+0x15a>
 8004cdc:	4b69      	ldr	r3, [pc, #420]	; (8004e84 <main+0x2fc>)
 8004cde:	4a6c      	ldr	r2, [pc, #432]	; (8004e90 <main+0x308>)
 8004ce0:	611a      	str	r2, [r3, #16]
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004ce2:	4b68      	ldr	r3, [pc, #416]	; (8004e84 <main+0x2fc>)
 8004ce4:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ce8:	eef4 7a67 	vcmp.f32	s15, s15
 8004cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf0:	d609      	bvs.n	8004d06 <main+0x17e>
 8004cf2:	4b64      	ldr	r3, [pc, #400]	; (8004e84 <main+0x2fc>)
 8004cf4:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004cfc:	eef4 7a47 	vcmp.f32	s15, s14
 8004d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d04:	d102      	bne.n	8004d0c <main+0x184>
 8004d06:	4b5f      	ldr	r3, [pc, #380]	; (8004e84 <main+0x2fc>)
 8004d08:	4a62      	ldr	r2, [pc, #392]	; (8004e94 <main+0x30c>)
 8004d0a:	615a      	str	r2, [r3, #20]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004d0c:	4b5d      	ldr	r3, [pc, #372]	; (8004e84 <main+0x2fc>)
 8004d0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d12:	eef4 7a67 	vcmp.f32	s15, s15
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	d609      	bvs.n	8004d30 <main+0x1a8>
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <main+0x2fc>)
 8004d1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d26:	eef4 7a47 	vcmp.f32	s15, s14
 8004d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2e:	d103      	bne.n	8004d38 <main+0x1b0>
 8004d30:	4b54      	ldr	r3, [pc, #336]	; (8004e84 <main+0x2fc>)
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	619a      	str	r2, [r3, #24]

//  if(isnan(K_SCALE) || K_SCALE==-1){K_SCALE = 0.000133f;}
//  if(isnan(KI_D) || KI_D==-1){KI_D = 0.0373f;}
//  if(isnan(KI_Q) || KI_Q ==-1){KI_Q = 0.0373f;}

  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8004d38:	4b52      	ldr	r3, [pc, #328]	; (8004e84 <main+0x2fc>)
 8004d3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004d3e:	eef4 7a67 	vcmp.f32	s15, s15
 8004d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d46:	d609      	bvs.n	8004d5c <main+0x1d4>
 8004d48:	4b4e      	ldr	r3, [pc, #312]	; (8004e84 <main+0x2fc>)
 8004d4a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004d4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d52:	eef4 7a47 	vcmp.f32	s15, s14
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	d102      	bne.n	8004d62 <main+0x1da>
 8004d5c:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <main+0x2fc>)
 8004d5e:	4a4e      	ldr	r2, [pc, #312]	; (8004e98 <main+0x310>)
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(GR) || GR==-1){GR = 6.0f;}
 8004d62:	4b48      	ldr	r3, [pc, #288]	; (8004e84 <main+0x2fc>)
 8004d64:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d68:	eef4 7a67 	vcmp.f32	s15, s15
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	d609      	bvs.n	8004d86 <main+0x1fe>
 8004d72:	4b44      	ldr	r3, [pc, #272]	; (8004e84 <main+0x2fc>)
 8004d74:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d78:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d7c:	eef4 7a47 	vcmp.f32	s15, s14
 8004d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d84:	d102      	bne.n	8004d8c <main+0x204>
 8004d86:	4b3f      	ldr	r3, [pc, #252]	; (8004e84 <main+0x2fc>)
 8004d88:	4a44      	ldr	r2, [pc, #272]	; (8004e9c <main+0x314>)
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004d8c:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <main+0x2fc>)
 8004d8e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004d92:	eef4 7a67 	vcmp.f32	s15, s15
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	d609      	bvs.n	8004db0 <main+0x228>
 8004d9c:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <main+0x2fc>)
 8004d9e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004da2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004da6:	eef4 7a47 	vcmp.f32	s15, s14
 8004daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dae:	d103      	bne.n	8004db8 <main+0x230>
 8004db0:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <main+0x2fc>)
 8004db2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(L_D) || L_D==-1){L_D = 0.000003f;}
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <main+0x2fc>)
 8004dba:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004dbe:	eef4 7a67 	vcmp.f32	s15, s15
 8004dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc6:	d609      	bvs.n	8004ddc <main+0x254>
 8004dc8:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <main+0x2fc>)
 8004dca:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004dce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004dd2:	eef4 7a47 	vcmp.f32	s15, s14
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	d102      	bne.n	8004de2 <main+0x25a>
 8004ddc:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <main+0x2fc>)
 8004dde:	4a30      	ldr	r2, [pc, #192]	; (8004ea0 <main+0x318>)
 8004de0:	63da      	str	r2, [r3, #60]	; 0x3c
  if(isnan(L_Q) || L_Q==-1){L_Q = 0.000003f;}
 8004de2:	4b28      	ldr	r3, [pc, #160]	; (8004e84 <main+0x2fc>)
 8004de4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004de8:	eef4 7a67 	vcmp.f32	s15, s15
 8004dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df0:	d609      	bvs.n	8004e06 <main+0x27e>
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <main+0x2fc>)
 8004df4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004df8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004dfc:	eef4 7a47 	vcmp.f32	s15, s14
 8004e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e04:	d102      	bne.n	8004e0c <main+0x284>
 8004e06:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <main+0x2fc>)
 8004e08:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <main+0x318>)
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
  if(isnan(R_PHASE) || R_PHASE==-1){R_PHASE = 0.433f;}
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <main+0x2fc>)
 8004e0e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004e12:	eef4 7a67 	vcmp.f32	s15, s15
 8004e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1a:	d609      	bvs.n	8004e30 <main+0x2a8>
 8004e1c:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <main+0x2fc>)
 8004e1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004e22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e26:	eef4 7a47 	vcmp.f32	s15, s14
 8004e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2e:	d102      	bne.n	8004e36 <main+0x2ae>
 8004e30:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <main+0x2fc>)
 8004e32:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <main+0x31c>)
 8004e34:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <main+0x2fc>)
 8004e38:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004e3c:	eef4 7a67 	vcmp.f32	s15, s15
 8004e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e44:	d609      	bvs.n	8004e5a <main+0x2d2>
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <main+0x2fc>)
 8004e48:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004e4c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e50:	eef4 7a47 	vcmp.f32	s15, s14
 8004e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e58:	d103      	bne.n	8004e62 <main+0x2da>
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <main+0x2fc>)
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	649a      	str	r2, [r3, #72]	; 0x48

  if(isnan(R_TH) || R_TH==-1){R_TH = 1.25f;}
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <main+0x2fc>)
 8004e64:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004e68:	eef4 7a67 	vcmp.f32	s15, s15
 8004e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e70:	e01a      	b.n	8004ea8 <main+0x320>
 8004e72:	bf00      	nop
 8004e74:	200095bc 	.word	0x200095bc
 8004e78:	20009604 	.word	0x20009604
 8004e7c:	2000083c 	.word	0x2000083c
 8004e80:	2000043c 	.word	0x2000043c
 8004e84:	2000033c 	.word	0x2000033c
 8004e88:	447a0000 	.word	0x447a0000
 8004e8c:	42200000 	.word	0x42200000
 8004e90:	41600000 	.word	0x41600000
 8004e94:	40a00000 	.word	0x40a00000
 8004e98:	41a80000 	.word	0x41a80000
 8004e9c:	40c00000 	.word	0x40c00000
 8004ea0:	3649539c 	.word	0x3649539c
 8004ea4:	3eddb22d 	.word	0x3eddb22d
 8004ea8:	d609      	bvs.n	8004ebe <main+0x336>
 8004eaa:	4ba7      	ldr	r3, [pc, #668]	; (8005148 <main+0x5c0>)
 8004eac:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004eb0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004eb4:	eef4 7a47 	vcmp.f32	s15, s14
 8004eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebc:	d102      	bne.n	8004ec4 <main+0x33c>
 8004ebe:	4ba2      	ldr	r3, [pc, #648]	; (8005148 <main+0x5c0>)
 8004ec0:	4aa2      	ldr	r2, [pc, #648]	; (800514c <main+0x5c4>)
 8004ec2:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(C_TH) || C_TH==-1){C_TH = 0.0f;}
 8004ec4:	4ba0      	ldr	r3, [pc, #640]	; (8005148 <main+0x5c0>)
 8004ec6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004eca:	eef4 7a67 	vcmp.f32	s15, s15
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	d609      	bvs.n	8004ee8 <main+0x360>
 8004ed4:	4b9c      	ldr	r3, [pc, #624]	; (8005148 <main+0x5c0>)
 8004ed6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004eda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ede:	eef4 7a47 	vcmp.f32	s15, s14
 8004ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee6:	d103      	bne.n	8004ef0 <main+0x368>
 8004ee8:	4b97      	ldr	r3, [pc, #604]	; (8005148 <main+0x5c0>)
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(INV_M_TH) || INV_M_TH==-1){INV_M_TH = 0.02825f;}
 8004ef0:	4b95      	ldr	r3, [pc, #596]	; (8005148 <main+0x5c0>)
 8004ef2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004ef6:	eef4 7a67 	vcmp.f32	s15, s15
 8004efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efe:	d609      	bvs.n	8004f14 <main+0x38c>
 8004f00:	4b91      	ldr	r3, [pc, #580]	; (8005148 <main+0x5c0>)
 8004f02:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004f06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f0a:	eef4 7a47 	vcmp.f32	s15, s14
 8004f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f12:	d102      	bne.n	8004f1a <main+0x392>
 8004f14:	4b8c      	ldr	r3, [pc, #560]	; (8005148 <main+0x5c0>)
 8004f16:	4a8e      	ldr	r2, [pc, #568]	; (8005150 <main+0x5c8>)
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(T_AMBIENT) || T_AMBIENT==-1){T_AMBIENT = 25.0f;}
 8004f1a:	4b8b      	ldr	r3, [pc, #556]	; (8005148 <main+0x5c0>)
 8004f1c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f20:	eef4 7a67 	vcmp.f32	s15, s15
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	d609      	bvs.n	8004f3e <main+0x3b6>
 8004f2a:	4b87      	ldr	r3, [pc, #540]	; (8005148 <main+0x5c0>)
 8004f2c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f30:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f34:	eef4 7a47 	vcmp.f32	s15, s14
 8004f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3c:	d102      	bne.n	8004f44 <main+0x3bc>
 8004f3e:	4b82      	ldr	r3, [pc, #520]	; (8005148 <main+0x5c0>)
 8004f40:	4a84      	ldr	r2, [pc, #528]	; (8005154 <main+0x5cc>)
 8004f42:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004f44:	4b80      	ldr	r3, [pc, #512]	; (8005148 <main+0x5c0>)
 8004f46:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f4a:	eef4 7a67 	vcmp.f32	s15, s15
 8004f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f52:	d609      	bvs.n	8004f68 <main+0x3e0>
 8004f54:	4b7c      	ldr	r3, [pc, #496]	; (8005148 <main+0x5c0>)
 8004f56:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f5a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f5e:	eef4 7a47 	vcmp.f32	s15, s14
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	d102      	bne.n	8004f6e <main+0x3e6>
 8004f68:	4b77      	ldr	r3, [pc, #476]	; (8005148 <main+0x5c0>)
 8004f6a:	4a7b      	ldr	r2, [pc, #492]	; (8005158 <main+0x5d0>)
 8004f6c:	65da      	str	r2, [r3, #92]	; 0x5c

  if(isnan(P_MIN) || P_MIN==-1){P_MIN = -12.5f;}
 8004f6e:	4b76      	ldr	r3, [pc, #472]	; (8005148 <main+0x5c0>)
 8004f70:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f74:	eef4 7a67 	vcmp.f32	s15, s15
 8004f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7c:	d609      	bvs.n	8004f92 <main+0x40a>
 8004f7e:	4b72      	ldr	r3, [pc, #456]	; (8005148 <main+0x5c0>)
 8004f80:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f84:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f88:	eef4 7a47 	vcmp.f32	s15, s14
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	d102      	bne.n	8004f98 <main+0x410>
 8004f92:	4b6d      	ldr	r3, [pc, #436]	; (8005148 <main+0x5c0>)
 8004f94:	4a71      	ldr	r2, [pc, #452]	; (800515c <main+0x5d4>)
 8004f96:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX) || P_MAX==-1){P_MAX = 12.5f;}
 8004f98:	4b6b      	ldr	r3, [pc, #428]	; (8005148 <main+0x5c0>)
 8004f9a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004f9e:	eef4 7a67 	vcmp.f32	s15, s15
 8004fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa6:	d609      	bvs.n	8004fbc <main+0x434>
 8004fa8:	4b67      	ldr	r3, [pc, #412]	; (8005148 <main+0x5c0>)
 8004faa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004fae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004fb2:	eef4 7a47 	vcmp.f32	s15, s14
 8004fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fba:	d102      	bne.n	8004fc2 <main+0x43a>
 8004fbc:	4b62      	ldr	r3, [pc, #392]	; (8005148 <main+0x5c0>)
 8004fbe:	4a68      	ldr	r2, [pc, #416]	; (8005160 <main+0x5d8>)
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64
  if(isnan(V_MIN) || V_MIN==-1){V_MIN = -65.0f;}
 8004fc2:	4b61      	ldr	r3, [pc, #388]	; (8005148 <main+0x5c0>)
 8004fc4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004fc8:	eef4 7a67 	vcmp.f32	s15, s15
 8004fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd0:	d609      	bvs.n	8004fe6 <main+0x45e>
 8004fd2:	4b5d      	ldr	r3, [pc, #372]	; (8005148 <main+0x5c0>)
 8004fd4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004fd8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004fdc:	eef4 7a47 	vcmp.f32	s15, s14
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	d102      	bne.n	8004fec <main+0x464>
 8004fe6:	4b58      	ldr	r3, [pc, #352]	; (8005148 <main+0x5c0>)
 8004fe8:	4a5e      	ldr	r2, [pc, #376]	; (8005164 <main+0x5dc>)
 8004fea:	669a      	str	r2, [r3, #104]	; 0x68
  if(isnan(V_MAX) || V_MAX==-1){V_MAX = 65.0f;}
 8004fec:	4b56      	ldr	r3, [pc, #344]	; (8005148 <main+0x5c0>)
 8004fee:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004ff2:	eef4 7a67 	vcmp.f32	s15, s15
 8004ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffa:	d609      	bvs.n	8005010 <main+0x488>
 8004ffc:	4b52      	ldr	r3, [pc, #328]	; (8005148 <main+0x5c0>)
 8004ffe:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8005002:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005006:	eef4 7a47 	vcmp.f32	s15, s14
 800500a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500e:	d102      	bne.n	8005016 <main+0x48e>
 8005010:	4b4d      	ldr	r3, [pc, #308]	; (8005148 <main+0x5c0>)
 8005012:	4a55      	ldr	r2, [pc, #340]	; (8005168 <main+0x5e0>)
 8005014:	66da      	str	r2, [r3, #108]	; 0x6c
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8005016:	4b4c      	ldr	r3, [pc, #304]	; (8005148 <main+0x5c0>)
 8005018:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800501c:	eef4 7a67 	vcmp.f32	s15, s15
 8005020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005024:	d609      	bvs.n	800503a <main+0x4b2>
 8005026:	4b48      	ldr	r3, [pc, #288]	; (8005148 <main+0x5c0>)
 8005028:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800502c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005030:	eef4 7a47 	vcmp.f32	s15, s14
 8005034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005038:	d102      	bne.n	8005040 <main+0x4b8>
 800503a:	4b43      	ldr	r3, [pc, #268]	; (8005148 <main+0x5c0>)
 800503c:	4a4b      	ldr	r2, [pc, #300]	; (800516c <main+0x5e4>)
 800503e:	671a      	str	r2, [r3, #112]	; 0x70
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 10.0f;}
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <main+0x5c0>)
 8005042:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005046:	eef4 7a67 	vcmp.f32	s15, s15
 800504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504e:	d609      	bvs.n	8005064 <main+0x4dc>
 8005050:	4b3d      	ldr	r3, [pc, #244]	; (8005148 <main+0x5c0>)
 8005052:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8005056:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800505a:	eef4 7a47 	vcmp.f32	s15, s14
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d102      	bne.n	800506a <main+0x4e2>
 8005064:	4b38      	ldr	r3, [pc, #224]	; (8005148 <main+0x5c0>)
 8005066:	4a42      	ldr	r2, [pc, #264]	; (8005170 <main+0x5e8>)
 8005068:	675a      	str	r2, [r3, #116]	; 0x74

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 800506a:	a335      	add	r3, pc, #212	; (adr r3, 8005140 <main+0x5b8>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	4840      	ldr	r0, [pc, #256]	; (8005174 <main+0x5ec>)
 8005072:	f007 fa19 	bl	800c4a8 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8005076:	4840      	ldr	r0, [pc, #256]	; (8005178 <main+0x5f0>)
 8005078:	f7fd fee2 	bl	8002e40 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800507c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8005080:	2100      	movs	r1, #0
 8005082:	483e      	ldr	r0, [pc, #248]	; (800517c <main+0x5f4>)
 8005084:	f006 fd9e 	bl	800bbc4 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8005088:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <main+0x5f8>)
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	4a3d      	ldr	r2, [pc, #244]	; (8005184 <main+0x5fc>)
 800508e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  comm_encoder.e_zero = E_ZERO;
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <main+0x5f8>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	4a3b      	ldr	r2, [pc, #236]	; (8005184 <main+0x5fc>)
 8005098:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  comm_encoder.ppairs = PPAIRS;
 800509c:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <main+0x5c0>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	4a38      	ldr	r2, [pc, #224]	; (8005184 <main+0x5fc>)
 80050a2:	6713      	str	r3, [r2, #112]	; 0x70
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 80050a4:	2164      	movs	r1, #100	; 0x64
 80050a6:	4837      	ldr	r0, [pc, #220]	; (8005184 <main+0x5fc>)
 80050a8:	f000 fb88 	bl	80057bc <ps_warmup>

  memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));	// Copy the linearization lookup table
 80050ac:	4b35      	ldr	r3, [pc, #212]	; (8005184 <main+0x5fc>)
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <main+0x5f8>)
 80050b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80050b4:	f102 0120 	add.w	r1, r2, #32
 80050b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050bc:	4618      	mov	r0, r3
 80050be:	f006 fd73 	bl	800bba8 <memcpy>
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 80050c2:	4831      	ldr	r0, [pc, #196]	; (8005188 <main+0x600>)
 80050c4:	f001 ff5a 	bl	8006f7c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80050c8:	4830      	ldr	r0, [pc, #192]	; (800518c <main+0x604>)
 80050ca:	f001 ff57 	bl	8006f7c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80050ce:	4830      	ldr	r0, [pc, #192]	; (8005190 <main+0x608>)
 80050d0:	f001 ff54 	bl	8006f7c <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80050d4:	2201      	movs	r2, #1
 80050d6:	2110      	movs	r1, #16
 80050d8:	482e      	ldr	r0, [pc, #184]	; (8005194 <main+0x60c>)
 80050da:	f003 fa73 	bl	80085c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 80050de:	2201      	movs	r2, #1
 80050e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050e4:	482b      	ldr	r0, [pc, #172]	; (8005194 <main+0x60c>)
 80050e6:	f003 fa6d 	bl	80085c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80050ea:	2001      	movs	r0, #1
 80050ec:	f001 fede 	bl	8006eac <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 80050f0:	2001      	movs	r0, #1
 80050f2:	f001 fedb 	bl	8006eac <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80050f6:	4928      	ldr	r1, [pc, #160]	; (8005198 <main+0x610>)
 80050f8:	2301      	movs	r3, #1
 80050fa:	9306      	str	r3, [sp, #24]
 80050fc:	2300      	movs	r3, #0
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	2300      	movs	r3, #0
 8005102:	9304      	str	r3, [sp, #16]
 8005104:	2300      	movs	r3, #0
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	2300      	movs	r3, #0
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	2301      	movs	r3, #1
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	2300      	movs	r3, #0
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	2200      	movs	r2, #0
 8005118:	c903      	ldmia	r1, {r0, r1}
 800511a:	f7fd f8d0 	bl	80022be <drv_write_DCR>
  HAL_Delay(1);
 800511e:	2001      	movs	r0, #1
 8005120:	f001 fec4 	bl	8006eac <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <main+0x5c0>)
 8005126:	edd3 7a03 	vldr	s15, [r3, #12]
 800512a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800519c <main+0x614>
 800512e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005136:	d833      	bhi.n	80051a0 <main+0x618>
 8005138:	2303      	movs	r3, #3
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	e032      	b.n	80051a4 <main+0x61c>
 800513e:	bf00      	nop
 8005140:	a0000000 	.word	0xa0000000
 8005144:	40019999 	.word	0x40019999
 8005148:	2000033c 	.word	0x2000033c
 800514c:	3fa00000 	.word	0x3fa00000
 8005150:	3ce76c8b 	.word	0x3ce76c8b
 8005154:	41c80000 	.word	0x41c80000
 8005158:	42fa0000 	.word	0x42fa0000
 800515c:	c1480000 	.word	0xc1480000
 8005160:	41480000 	.word	0x41480000
 8005164:	c2820000 	.word	0xc2820000
 8005168:	42820000 	.word	0x42820000
 800516c:	43fa0000 	.word	0x43fa0000
 8005170:	41200000 	.word	0x41200000
 8005174:	080110b4 	.word	0x080110b4
 8005178:	20000850 	.word	0x20000850
 800517c:	200090ec 	.word	0x200090ec
 8005180:	2000043c 	.word	0x2000043c
 8005184:	20000b5c 	.word	0x20000b5c
 8005188:	2000023c 	.word	0x2000023c
 800518c:	20000284 	.word	0x20000284
 8005190:	200002cc 	.word	0x200002cc
 8005194:	40020000 	.word	0x40020000
 8005198:	20000eb8 	.word	0x20000eb8
 800519c:	42200000 	.word	0x42200000
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 80051a0:	2302      	movs	r3, #2
 80051a2:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 80051a4:	4968      	ldr	r1, [pc, #416]	; (8005348 <main+0x7c0>)
 80051a6:	2300      	movs	r3, #0
 80051a8:	9306      	str	r3, [sp, #24]
 80051aa:	2301      	movs	r3, #1
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	2301      	movs	r3, #1
 80051b0:	9304      	str	r3, [sp, #16]
 80051b2:	2301      	movs	r3, #1
 80051b4:	9303      	str	r3, [sp, #12]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9302      	str	r3, [sp, #8]
 80051ba:	2303      	movs	r3, #3
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	2300      	movs	r3, #0
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2301      	movs	r3, #1
 80051c4:	2200      	movs	r2, #0
 80051c6:	c903      	ldmia	r1, {r0, r1}
 80051c8:	f7fd f8e9 	bl	800239e <drv_write_CSACR>
  HAL_Delay(1);
 80051cc:	2001      	movs	r0, #1
 80051ce:	f001 fe6d 	bl	8006eac <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 80051d2:	495d      	ldr	r1, [pc, #372]	; (8005348 <main+0x7c0>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	9306      	str	r3, [sp, #24]
 80051d8:	2300      	movs	r3, #0
 80051da:	9305      	str	r3, [sp, #20]
 80051dc:	2300      	movs	r3, #0
 80051de:	9304      	str	r3, [sp, #16]
 80051e0:	2300      	movs	r3, #0
 80051e2:	9303      	str	r3, [sp, #12]
 80051e4:	2301      	movs	r3, #1
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	2300      	movs	r3, #0
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	2301      	movs	r3, #1
 80051f2:	2200      	movs	r2, #0
 80051f4:	c903      	ldmia	r1, {r0, r1}
 80051f6:	f7fd f8d2 	bl	800239e <drv_write_CSACR>
  HAL_Delay(1);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f001 fe56 	bl	8006eac <HAL_Delay>
  zero_current(&controller);
 8005200:	4852      	ldr	r0, [pc, #328]	; (800534c <main+0x7c4>)
 8005202:	f7fd fdd9 	bl	8002db8 <zero_current>
  HAL_Delay(1);
 8005206:	2001      	movs	r0, #1
 8005208:	f001 fe50 	bl	8006eac <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_4US, VDS_LVL_0_45);
 800520c:	494e      	ldr	r1, [pc, #312]	; (8005348 <main+0x7c0>)
 800520e:	2305      	movs	r3, #5
 8005210:	9302      	str	r3, [sp, #8]
 8005212:	2301      	movs	r3, #1
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	2301      	movs	r3, #1
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2300      	movs	r3, #0
 800521c:	2201      	movs	r2, #1
 800521e:	c903      	ldmia	r1, {r0, r1}
 8005220:	f7fd f88f 	bl	8002342 <drv_write_OCPCR>
  HAL_Delay(1);
 8005224:	2001      	movs	r0, #1
 8005226:	f001 fe41 	bl	8006eac <HAL_Delay>
  drv_disable_gd(drv);
 800522a:	4b47      	ldr	r3, [pc, #284]	; (8005348 <main+0x7c0>)
 800522c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005230:	f7fd f911 	bl	8002456 <drv_disable_gd>
  HAL_Delay(1);
 8005234:	2001      	movs	r0, #1
 8005236:	f001 fe39 	bl	8006eac <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 800523a:	4b44      	ldr	r3, [pc, #272]	; (800534c <main+0x7c4>)
 800523c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005240:	4a42      	ldr	r2, [pc, #264]	; (800534c <main+0x7c4>)
 8005242:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8005246:	4619      	mov	r1, r3
 8005248:	4841      	ldr	r0, [pc, #260]	; (8005350 <main+0x7c8>)
 800524a:	f007 f92d 	bl	800c4a8 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800524e:	2100      	movs	r1, #0
 8005250:	4840      	ldr	r0, [pc, #256]	; (8005354 <main+0x7cc>)
 8005252:	f004 fc81 	bl	8009b58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8005256:	2104      	movs	r1, #4
 8005258:	483e      	ldr	r0, [pc, #248]	; (8005354 <main+0x7cc>)
 800525a:	f004 fc7d 	bl	8009b58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800525e:	2108      	movs	r1, #8
 8005260:	483c      	ldr	r0, [pc, #240]	; (8005354 <main+0x7cc>)
 8005262:	f004 fc79 	bl	8009b58 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8005266:	483c      	ldr	r0, [pc, #240]	; (8005358 <main+0x7d0>)
 8005268:	f7fc fe2e 	bl	8001ec8 <can_rx_init>
  can_tx_init(&can_tx);
 800526c:	483b      	ldr	r0, [pc, #236]	; (800535c <main+0x7d4>)
 800526e:	f7fc fe59 	bl	8001f24 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8005272:	483b      	ldr	r0, [pc, #236]	; (8005360 <main+0x7d8>)
 8005274:	f002 fc3c 	bl	8007af0 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x01,0x01); // commutation > communication
 8005278:	2201      	movs	r2, #1
 800527a:	2101      	movs	r1, #1
 800527c:	2019      	movs	r0, #25
 800527e:	f002 ff44 	bl	800810a <HAL_NVIC_SetPriority>
//  HAL_NVIC_SetPriority(CAN_ISR, 0x02, 0x02);

  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005282:	2201      	movs	r2, #1
 8005284:	4937      	ldr	r1, [pc, #220]	; (8005364 <main+0x7dc>)
 8005286:	4838      	ldr	r0, [pc, #224]	; (8005368 <main+0x7e0>)
 8005288:	f005 fcc3 	bl	800ac12 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1); // start main control interrupt
 800528c:	4831      	ldr	r0, [pc, #196]	; (8005354 <main+0x7cc>)
 800528e:	f004 fb99 	bl	80099c4 <HAL_TIM_Base_Start_IT>

  // Check encoder initialization here
  int new_offset = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	603b      	str	r3, [r7, #0]
  ps_sample(&comm_encoder, 0.001);
 8005296:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800536c <main+0x7e4>
 800529a:	4835      	ldr	r0, [pc, #212]	; (8005370 <main+0x7e8>)
 800529c:	f000 fad4 	bl	8005848 <ps_sample>
  HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80052a0:	2201      	movs	r2, #1
 80052a2:	2120      	movs	r1, #32
 80052a4:	4833      	ldr	r0, [pc, #204]	; (8005374 <main+0x7ec>)
 80052a6:	f003 f98d 	bl	80085c4 <HAL_GPIO_WritePin>
  drv_enable_gd(drv);
 80052aa:	4b27      	ldr	r3, [pc, #156]	; (8005348 <main+0x7c0>)
 80052ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052b0:	f7fd f8b7 	bl	8002422 <drv_enable_gd>
  new_offset = check_encoder_init(&comm_encoder, &controller, &comm_encoder_cal);             // status = 1 is good
 80052b4:	4a30      	ldr	r2, [pc, #192]	; (8005378 <main+0x7f0>)
 80052b6:	4925      	ldr	r1, [pc, #148]	; (800534c <main+0x7c4>)
 80052b8:	482d      	ldr	r0, [pc, #180]	; (8005370 <main+0x7e8>)
 80052ba:	f7fc fc43 	bl	8001b44 <check_encoder_init>
 80052be:	6038      	str	r0, [r7, #0]
  HAL_Delay(100);
 80052c0:	2064      	movs	r0, #100	; 0x64
 80052c2:	f001 fdf3 	bl	8006eac <HAL_Delay>
  drv_disable_gd(drv);
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <main+0x7c0>)
 80052c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052cc:	f7fd f8c3 	bl	8002456 <drv_disable_gd>
  HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80052d0:	2200      	movs	r2, #0
 80052d2:	2120      	movs	r1, #32
 80052d4:	4827      	ldr	r0, [pc, #156]	; (8005374 <main+0x7ec>)
 80052d6:	f003 f975 	bl	80085c4 <HAL_GPIO_WritePin>

  E_ZERO = new_offset;
 80052da:	4a28      	ldr	r2, [pc, #160]	; (800537c <main+0x7f4>)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	61d3      	str	r3, [r2, #28]
  comm_encoder.e_zero = E_ZERO;
 80052e0:	4b26      	ldr	r3, [pc, #152]	; (800537c <main+0x7f4>)
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	4a22      	ldr	r2, [pc, #136]	; (8005370 <main+0x7e8>)
 80052e6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  printf(" Position Sensor Electrical Offset: %d\n\r", E_ZERO);
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <main+0x7f4>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	4619      	mov	r1, r3
 80052f0:	4823      	ldr	r0, [pc, #140]	; (8005380 <main+0x7f8>)
 80052f2:	f007 f8d9 	bl	800c4a8 <iprintf>

  // initialize filter here for position sensor
  HAL_Delay(100);
 80052f6:	2064      	movs	r0, #100	; 0x64
 80052f8:	f001 fdd8 	bl	8006eac <HAL_Delay>
  ps_filter_init(&comm_encoder);
 80052fc:	481c      	ldr	r0, [pc, #112]	; (8005370 <main+0x7e8>)
 80052fe:	f000 fd29 	bl	8005d54 <ps_filter_init>
  if (EN_ENC_FILTER == 1){
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <main+0x7f4>)
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d103      	bne.n	8005312 <main+0x78a>
	  comm_encoder.filt_enable = 1;
 800530a:	4b19      	ldr	r3, [pc, #100]	; (8005370 <main+0x7e8>)
 800530c:	2201      	movs	r2, #1
 800530e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  }
  // reset encoder sample count
  comm_encoder.first_sample = 0;
 8005312:	4b17      	ldr	r3, [pc, #92]	; (8005370 <main+0x7e8>)
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

  /* Start the FSM */
  state.state = MENU_MODE;
 800531a:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <main+0x7fc>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8005320:	4b18      	ldr	r3, [pc, #96]	; (8005384 <main+0x7fc>)
 8005322:	2200      	movs	r2, #0
 8005324:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8005326:	4b17      	ldr	r3, [pc, #92]	; (8005384 <main+0x7fc>)
 8005328:	2201      	movs	r2, #1
 800532a:	70da      	strb	r2, [r3, #3]
  fsm_enter_state(&state);
 800532c:	4815      	ldr	r0, [pc, #84]	; (8005384 <main+0x7fc>)
 800532e:	f7fe fa7b 	bl	8003828 <fsm_enter_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8005332:	2064      	movs	r0, #100	; 0x64
 8005334:	f001 fdba 	bl	8006eac <HAL_Delay>
//	  printf("%d\n\r", loop_time);
	  drv_check_faults(drv, &state);
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <main+0x7c0>)
 800533a:	4a12      	ldr	r2, [pc, #72]	; (8005384 <main+0x7fc>)
 800533c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005340:	f7fd f8a4 	bl	800248c <drv_check_faults>
	  HAL_Delay(100);
 8005344:	e7f5      	b.n	8005332 <main+0x7aa>
 8005346:	bf00      	nop
 8005348:	20000eb8 	.word	0x20000eb8
 800534c:	20000850 	.word	0x20000850
 8005350:	080110d8 	.word	0x080110d8
 8005354:	20009574 	.word	0x20009574
 8005358:	20009468 	.word	0x20009468
 800535c:	20009448 	.word	0x20009448
 8005360:	20000314 	.word	0x20000314
 8005364:	200094b8 	.word	0x200094b8
 8005368:	2000964c 	.word	0x2000964c
 800536c:	3a83126f 	.word	0x3a83126f
 8005370:	20000b5c 	.word	0x20000b5c
 8005374:	40020800 	.word	0x40020800
 8005378:	20000ec0 	.word	0x20000ec0
 800537c:	2000043c 	.word	0x2000043c
 8005380:	08011100 	.word	0x08011100
 8005384:	20000b48 	.word	0x20000b48

08005388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b094      	sub	sp, #80	; 0x50
 800538c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800538e:	f107 031c 	add.w	r3, r7, #28
 8005392:	2234      	movs	r2, #52	; 0x34
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f006 fc14 	bl	800bbc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <SystemClock_Config+0xdc>)
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <SystemClock_Config+0xdc>)
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6413      	str	r3, [r2, #64]	; 0x40
 80053bc:	4b29      	ldr	r3, [pc, #164]	; (8005464 <SystemClock_Config+0xdc>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053c8:	2300      	movs	r3, #0
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4b26      	ldr	r3, [pc, #152]	; (8005468 <SystemClock_Config+0xe0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a25      	ldr	r2, [pc, #148]	; (8005468 <SystemClock_Config+0xe0>)
 80053d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	4b23      	ldr	r3, [pc, #140]	; (8005468 <SystemClock_Config+0xe0>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053ee:	2302      	movs	r3, #2
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80053f8:	2304      	movs	r3, #4
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80053fc:	23b4      	movs	r3, #180	; 0xb4
 80053fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005400:	2302      	movs	r3, #2
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005404:	2302      	movs	r3, #2
 8005406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005408:	2302      	movs	r3, #2
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800540c:	f107 031c 	add.w	r3, r7, #28
 8005410:	4618      	mov	r0, r3
 8005412:	f003 fc8b 	bl	8008d2c <HAL_RCC_OscConfig>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800541c:	f000 f826 	bl	800546c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005420:	f003 f8ea 	bl	80085f8 <HAL_PWREx_EnableOverDrive>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800542a:	f000 f81f 	bl	800546c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800542e:	230f      	movs	r3, #15
 8005430:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005432:	2302      	movs	r3, #2
 8005434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800543a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800543e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005444:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005446:	f107 0308 	add.w	r3, r7, #8
 800544a:	2105      	movs	r1, #5
 800544c:	4618      	mov	r0, r3
 800544e:	f003 f923 	bl	8008698 <HAL_RCC_ClockConfig>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005458:	f000 f808 	bl	800546c <Error_Handler>
  }
}
 800545c:	bf00      	nop
 800545e:	3750      	adds	r7, #80	; 0x50
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	40007000 	.word	0x40007000

0800546c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005470:	bf00      	nop
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	ed87 0a01 	vstr	s0, [r7, #4]
 8005484:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8005488:	ed97 7a01 	vldr	s14, [r7, #4]
 800548c:	edd7 7a00 	vldr	s15, [r7]
 8005490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	dd01      	ble.n	800549e <fast_fmaxf+0x24>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	e000      	b.n	80054a0 <fast_fmaxf+0x26>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	ee07 3a90 	vmov	s15, r3
    }
 80054a4:	eeb0 0a67 	vmov.f32	s0, s15
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <fast_fminf>:

float fast_fminf(float x, float y){
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	ed87 0a01 	vstr	s0, [r7, #4]
 80054bc:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80054c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80054c4:	edd7 7a00 	vldr	s15, [r7]
 80054c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d0:	d501      	bpl.n	80054d6 <fast_fminf+0x24>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	e000      	b.n	80054d8 <fast_fminf+0x26>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	ee07 3a90 	vmov	s15, r3
    }
 80054dc:	eeb0 0a67 	vmov.f32	s0, s15
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	ed87 0a03 	vstr	s0, [r7, #12]
 80054f4:	edc7 0a02 	vstr	s1, [r7, #8]
 80054f8:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80054fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8005500:	edd7 7a02 	vldr	s15, [r7, #8]
 8005504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550c:	dd0c      	ble.n	8005528 <fmaxf3+0x3e>
 800550e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005512:	edd7 7a01 	vldr	s15, [r7, #4]
 8005516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	dd01      	ble.n	8005524 <fmaxf3+0x3a>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	e00d      	b.n	8005540 <fmaxf3+0x56>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	e00b      	b.n	8005540 <fmaxf3+0x56>
 8005528:	ed97 7a02 	vldr	s14, [r7, #8]
 800552c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005538:	dd01      	ble.n	800553e <fmaxf3+0x54>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	e000      	b.n	8005540 <fmaxf3+0x56>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	ee07 3a90 	vmov	s15, r3
    }
 8005544:	eeb0 0a67 	vmov.f32	s0, s15
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <fminf3>:

float fminf3(float x, float y, float z){
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	ed87 0a03 	vstr	s0, [r7, #12]
 800555c:	edc7 0a02 	vstr	s1, [r7, #8]
 8005560:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8005564:	ed97 7a03 	vldr	s14, [r7, #12]
 8005568:	edd7 7a02 	vldr	s15, [r7, #8]
 800556c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	d50c      	bpl.n	8005590 <fminf3+0x3e>
 8005576:	ed97 7a03 	vldr	s14, [r7, #12]
 800557a:	edd7 7a01 	vldr	s15, [r7, #4]
 800557e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	d501      	bpl.n	800558c <fminf3+0x3a>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	e00d      	b.n	80055a8 <fminf3+0x56>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	e00b      	b.n	80055a8 <fminf3+0x56>
 8005590:	ed97 7a02 	vldr	s14, [r7, #8]
 8005594:	edd7 7a01 	vldr	s15, [r7, #4]
 8005598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	d501      	bpl.n	80055a6 <fminf3+0x54>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	e000      	b.n	80055a8 <fminf3+0x56>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	ee07 3a90 	vmov	s15, r3
    }
 80055ac:	eeb0 0a67 	vmov.f32	s0, s15
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	ed93 7a00 	vldr	s14, [r3]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	edd3 6a00 	vldr	s13, [r3]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	edd3 7a00 	vldr	s15, [r3]
 80055e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ec:	eeb0 0a67 	vmov.f32	s0, s15
 80055f0:	f00a fd0a 	bl	8010008 <sqrtf>
 80055f4:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 80055f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80055fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	dc00      	bgt.n	800560c <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 800560a:	e01b      	b.n	8005644 <limit_norm+0x8a>
        *x = *x * limit/norm;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	ed93 7a00 	vldr	s14, [r3]
 8005612:	edd7 7a01 	vldr	s15, [r7, #4]
 8005616:	ee67 6a27 	vmul.f32	s13, s14, s15
 800561a:	ed97 7a05 	vldr	s14, [r7, #20]
 800561e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	ed93 7a00 	vldr	s14, [r3]
 800562e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005632:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005636:	ed97 7a05 	vldr	s14, [r7, #20]
 800563a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	edc3 7a00 	vstr	s15, [r3]
    }
 8005644:	bf00      	nop
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	ed87 0a03 	vstr	s0, [r7, #12]
 8005656:	edc7 0a02 	vstr	s1, [r7, #8]
 800565a:	ed87 1a01 	vstr	s2, [r7, #4]
 800565e:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8005660:	ed97 7a01 	vldr	s14, [r7, #4]
 8005664:	edd7 7a02 	vldr	s15, [r7, #8]
 8005668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800566c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8005674:	ed97 7a03 	vldr	s14, [r7, #12]
 8005678:	edd7 7a04 	vldr	s15, [r7, #16]
 800567c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005680:	2201      	movs	r2, #1
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005692:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005696:	ed97 7a05 	vldr	s14, [r7, #20]
 800569a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056a2:	ee17 3a90 	vmov	r3, s15
    }
 80056a6:	4618      	mov	r0, r3
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 80056b2:	b480      	push	{r7}
 80056b4:	b087      	sub	sp, #28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80056be:	edc7 0a01 	vstr	s1, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 80056c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80056c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80056cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056d0:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	ee07 3a90 	vmov	s15, r3
 80056de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80056e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056ea:	2201      	movs	r2, #1
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005700:	edd7 7a04 	vldr	s15, [r7, #16]
 8005704:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8005708:	eeb0 0a67 	vmov.f32	s0, s15
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <sin_lut>:

float sin_lut(float theta){
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8005722:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005780 <sin_lut+0x68>
 8005726:	ed97 0a01 	vldr	s0, [r7, #4]
 800572a:	f00a fc4d 	bl	800ffc8 <fmodf>
 800572e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8005732:	edd7 7a01 	vldr	s15, [r7, #4]
 8005736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d506      	bpl.n	800574e <sin_lut+0x36>
 8005740:	edd7 7a01 	vldr	s15, [r7, #4]
 8005744:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005780 <sin_lut+0x68>
 8005748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800574c:	e001      	b.n	8005752 <sin_lut+0x3a>
 800574e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005752:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8005756:	edd7 7a01 	vldr	s15, [r7, #4]
 800575a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005784 <sin_lut+0x6c>
 800575e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005766:	ee17 3a90 	vmov	r3, s15
 800576a:	4a07      	ldr	r2, [pc, #28]	; (8005788 <sin_lut+0x70>)
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	ee07 3a90 	vmov	s15, r3
}
 8005776:	eeb0 0a67 	vmov.f32	s0, s15
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40c90fdb 	.word	0x40c90fdb
 8005784:	42a2f983 	.word	0x42a2f983
 8005788:	080111ac 	.word	0x080111ac

0800578c <cos_lut>:

float cos_lut(float theta){
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8005796:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80057b8 <cos_lut+0x2c>
 800579a:	edd7 7a01 	vldr	s15, [r7, #4]
 800579e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a2:	eeb0 0a67 	vmov.f32	s0, s15
 80057a6:	f7ff ffb7 	bl	8005718 <sin_lut>
 80057aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80057ae:	eeb0 0a67 	vmov.f32	s0, s15
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	3fc90fdb 	.word	0x3fc90fdb

080057bc <ps_warmup>:
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"


void ps_warmup(EncoderStruct * encoder, int n){
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
//	int raw;
	for(int i = 0; i<n; i++){
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e030      	b.n	800582e <ps_warmup+0x72>
		encoder->spi_tx_buff[0] = 0xA6;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	22a6      	movs	r2, #166	; 0xa6
 80057d0:	701a      	strb	r2, [r3, #0]
		encoder->spi_tx_buff[1] = 0x00;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	705a      	strb	r2, [r3, #1]
		encoder->spi_tx_buff[2] = 0x00;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	709a      	strb	r2, [r3, #2]
		encoder->spi_tx_buff[3] = 0x00;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80057e4:	2200      	movs	r2, #0
 80057e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057ea:	4815      	ldr	r0, [pc, #84]	; (8005840 <ps_warmup+0x84>)
 80057ec:	f002 feea 	bl	80085c4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1d1a      	adds	r2, r3, #4
 80057f6:	2364      	movs	r3, #100	; 0x64
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	2304      	movs	r3, #4
 80057fc:	4811      	ldr	r0, [pc, #68]	; (8005844 <ps_warmup+0x88>)
 80057fe:	f003 fdbc 	bl	800937a <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005802:	bf00      	nop
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <ps_warmup+0x88>)
 8005806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d0f9      	beq.n	8005804 <ps_warmup+0x48>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8005810:	2201      	movs	r2, #1
 8005812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005816:	480a      	ldr	r0, [pc, #40]	; (8005840 <ps_warmup+0x84>)
 8005818:	f002 fed4 	bl	80085c4 <HAL_GPIO_WritePin>
		delay_us(100);
 800581c:	2064      	movs	r0, #100	; 0x64
 800581e:	f001 f9f1 	bl	8006c04 <delay_us>
//		raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
//		printf("%d\n\r", raw);
		delay_us(100);
 8005822:	2064      	movs	r0, #100	; 0x64
 8005824:	f001 f9ee 	bl	8006c04 <delay_us>
	for(int i = 0; i<n; i++){
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	dbca      	blt.n	80057cc <ps_warmup+0x10>
	}
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40020000 	.word	0x40020000
 8005844:	20009518 	.word	0x20009518

08005848 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8005848:	b580      	push	{r7, lr}
 800584a:	b08c      	sub	sp, #48	; 0x30
 800584c:	af02      	add	r7, sp, #8
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	611a      	str	r2, [r3, #16]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 800585c:	2313      	movs	r3, #19
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
 8005860:	e011      	b.n	8005886 <ps_sample+0x3e>
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	3b01      	subs	r3, #1
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	3304      	adds	r3, #4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	3304      	adds	r3, #4
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	3304      	adds	r3, #4
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	3b01      	subs	r3, #1
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	dcea      	bgt.n	8005862 <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_buff[0] = 0xA6;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	22a6      	movs	r2, #166	; 0xa6
 8005890:	701a      	strb	r2, [r3, #0]
	encoder->spi_tx_buff[1] = 0x00;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	705a      	strb	r2, [r3, #1]
	encoder->spi_tx_buff[2] = 0x00;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	709a      	strb	r2, [r3, #2]
	encoder->spi_tx_buff[3] = 0x00;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	70da      	strb	r2, [r3, #3]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80058a4:	2200      	movs	r2, #0
 80058a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058aa:	489d      	ldr	r0, [pc, #628]	; (8005b20 <ps_sample+0x2d8>)
 80058ac:	f002 fe8a 	bl	80085c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	2364      	movs	r3, #100	; 0x64
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	2304      	movs	r3, #4
 80058bc:	4899      	ldr	r0, [pc, #612]	; (8005b24 <ps_sample+0x2dc>)
 80058be:	f003 fd5c 	bl	800937a <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80058c2:	bf00      	nop
 80058c4:	4b97      	ldr	r3, [pc, #604]	; (8005b24 <ps_sample+0x2dc>)
 80058c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d0f9      	beq.n	80058c4 <ps_sample+0x7c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80058d0:	2201      	movs	r2, #1
 80058d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058d6:	4892      	ldr	r0, [pc, #584]	; (8005b20 <ps_sample+0x2d8>)
 80058d8:	f002 fe74 	bl	80085c4 <HAL_GPIO_WritePin>

	encoder->raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	795b      	ldrb	r3, [r3, #5]
 80058e0:	041a      	lsls	r2, r3, #16
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	799b      	ldrb	r3, [r3, #6]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	4313      	orrs	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	79d2      	ldrb	r2, [r2, #7]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	115b      	asrs	r3, r3, #5
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]

	/* Linearization */
	encoder->offset_ind1 = (encoder->raw)>>LUT_SHIFT;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	0b1b      	lsrs	r3, r3, #12
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	encoder->offset_ind2 = ((encoder->raw>>LUT_SHIFT)+1)%128;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	0b1b      	lsrs	r3, r3, #12
 800590c:	3301      	adds	r3, #1
 800590e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	encoder->offset1 = encoder->offset_lut[(encoder->raw)>>LUT_SHIFT];				// lookup table lower entry
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	0b1a      	lsrs	r2, r3, #12
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3256      	adds	r2, #86	; 0x56
 8005922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	encoder->offset2 = encoder->offset_lut[((encoder->raw>>LUT_SHIFT)+1)%128];		// lookup table higher entry
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	0b1b      	lsrs	r3, r3, #12
 8005932:	3301      	adds	r3, #1
 8005934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3256      	adds	r2, #86	; 0x56
 800593c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	int raw_mod = encoder->raw & LUT_MASK;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594e:	617b      	str	r3, [r7, #20]
	encoder->offset_interp = encoder->offset1 + ( (encoder->offset2-encoder->offset1) * raw_mod / (1<<LUT_SHIFT) );     // Interpolate between lookup table entries
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	fb01 f303 	mul.w	r3, r1, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	da01      	bge.n	8005972 <ps_sample+0x12a>
 800596e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005972:	131b      	asrs	r3, r3, #12
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0


	if (EN_ENC_LINEARIZE == 1){
 800597c:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <ps_sample+0x2e0>)
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d10a      	bne.n	800599a <ps_sample+0x152>
		encoder->count = encoder->raw + encoder->offset_interp;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 800598e:	4413      	add	r3, r2
 8005990:	461a      	mov	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8005998:	e005      	b.n	80059a6 <ps_sample+0x15e>
	} else {
		encoder->count = encoder->raw;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	}

	/* Real angles in radians */
	// MAPPED FROM -PI to PI, instead of 0 to 2*PI
	encoder->angle_singleturn = TWO_PI_F*((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80059ac:	4b5e      	ldr	r3, [pc, #376]	; (8005b28 <ps_sample+0x2e0>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ba:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005b38 <ps_sample+0x2f0>
 80059be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059c2:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8005b2c <ps_sample+0x2e4>
 80059c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	edc3 7a03 	vstr	s15, [r3, #12]
//	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
	encoder->angle_singleturn = encoder->angle_singleturn<-PI_F ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80059d6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005b30 <ps_sample+0x2e8>
 80059da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e2:	d507      	bpl.n	80059f4 <ps_sample+0x1ac>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80059ea:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005b38 <ps_sample+0x2f0>
 80059ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059f2:	e002      	b.n	80059fa <ps_sample+0x1b2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	edc3 7a03 	vstr	s15, [r3, #12]
	encoder->angle_singleturn = encoder->angle_singleturn>PI_F  ? encoder->angle_singleturn - TWO_PI_F : encoder->angle_singleturn;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a06:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005b34 <ps_sample+0x2ec>
 8005a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	dd07      	ble.n	8005a24 <ps_sample+0x1dc>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a1a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005b38 <ps_sample+0x2f0>
 8005a1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a22:	e002      	b.n	8005a2a <ps_sample+0x1e2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005a3c:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <ps_sample+0x2e0>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a4e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005b2c <ps_sample+0x2e4>
 8005a52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	int mod_angle = (int)encoder->elec_angle;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a66:	ee17 3a90 	vmov	r3, s15
 8005a6a:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)mod_angle);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a80:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005b38 <ps_sample+0x2f0>
 8005a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005a94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9c:	d507      	bpl.n	8005aae <ps_sample+0x266>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005aa4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005b38 <ps_sample+0x2f0>
 8005aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aac:	e002      	b.n	8005ab4 <ps_sample+0x26c>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	/* Rollover */
	int rollover = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	edd3 7a04 	vldr	s15, [r3, #16]
 8005aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ace:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ad6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005b34 <ps_sample+0x2ec>
 8005ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae2:	dd03      	ble.n	8005aec <ps_sample+0x2a4>
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	e00a      	b.n	8005b02 <ps_sample+0x2ba>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8005af0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005b30 <ps_sample+0x2e8>
 8005af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afc:	d501      	bpl.n	8005b02 <ps_sample+0x2ba>
 8005afe:	2301      	movs	r3, #1
 8005b00:	623b      	str	r3, [r7, #32]
	if(!encoder->first_sample){
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3358 	ldrb.w	r3, [r3, #856]	; 0x358
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d117      	bne.n	8005b3c <ps_sample+0x2f4>
		encoder->turns = 0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		encoder->first_sample = 1;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8005b1c:	e016      	b.n	8005b4c <ps_sample+0x304>
 8005b1e:	bf00      	nop
 8005b20:	40020000 	.word	0x40020000
 8005b24:	20009518 	.word	0x20009518
 8005b28:	2000043c 	.word	0x2000043c
 8005b2c:	49000000 	.word	0x49000000
 8005b30:	c0490fdb 	.word	0xc0490fdb
 8005b34:	40490fdb 	.word	0x40490fdb
 8005b38:	40c90fdb 	.word	0x40c90fdb
	} else {
		encoder->turns += rollover;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005b58:	ee07 3a90 	vmov	s15, r3
 8005b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b60:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 8005b38 <ps_sample+0x2f0>
 8005b64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Velocity */

	// old velocity calculation modified to match MBed code calculation of velocity!
	//encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
	encoder->single_vel = (encoder->angle_multiturn[0] - encoder->angle_multiturn[1])/dt;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	ed93 7a05 	vldr	s14, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005b82:	ed97 7a00 	vldr	s14, [r7]
 8005b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	// Filter out bad position samples
	if ( (encoder->filt_enable==1) && ((encoder->single_vel > (V_MAX*GR)) || (encoder->single_vel < (V_MIN*GR))) ) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d12e      	bne.n	8005bf8 <ps_sample+0x3b0>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8005ba0:	4b40      	ldr	r3, [pc, #256]	; (8005ca4 <ps_sample+0x45c>)
 8005ba2:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8005ba6:	4b3f      	ldr	r3, [pc, #252]	; (8005ca4 <ps_sample+0x45c>)
 8005ba8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb8:	dc0f      	bgt.n	8005bda <ps_sample+0x392>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8005bc0:	4b38      	ldr	r3, [pc, #224]	; (8005ca4 <ps_sample+0x45c>)
 8005bc2:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <ps_sample+0x45c>)
 8005bc8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd8:	d50e      	bpl.n	8005bf8 <ps_sample+0x3b0>
		encoder->angle_multiturn[0] = encoder->filt_prev_mech;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	615a      	str	r2, [r3, #20]
		encoder->elec_angle = encoder->filt_prev_elec;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	665a      	str	r2, [r3, #100]	; 0x64
		encoder->single_vel = 0.0;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005bf6:	e008      	b.n	8005c0a <ps_sample+0x3c2>
	}
	else {
		encoder->filt_prev_mech = encoder->angle_multiturn[0];
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	67da      	str	r2, [r3, #124]	; 0x7c
		encoder->filt_prev_elec = encoder->elec_angle;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	float sum = encoder->single_vel;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005c10:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i < N_POS_SAMPLES; i++){
 8005c12:	2301      	movs	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e024      	b.n	8005c62 <ps_sample+0x41a>
		encoder->vel_vec[N_POS_SAMPLES - i] = encoder->vel_vec[N_POS_SAMPLES-i-1];
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f1c3 0213 	rsb	r2, r3, #19
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f1c3 0314 	rsb	r3, r3, #20
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	3220      	adds	r2, #32
 8005c28:	0092      	lsls	r2, r2, #2
 8005c2a:	440a      	add	r2, r1
 8005c2c:	3204      	adds	r2, #4
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	3320      	adds	r3, #32
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	3304      	adds	r3, #4
 8005c3a:	601a      	str	r2, [r3, #0]
		sum += encoder->vel_vec[N_POS_SAMPLES-i];
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f1c3 0314 	rsb	r3, r3, #20
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	3320      	adds	r3, #32
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c58:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 1; i < N_POS_SAMPLES; i++){
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b13      	cmp	r3, #19
 8005c66:	ddd7      	ble.n	8005c18 <ps_sample+0x3d0>
		}
	encoder->vel_vec[0] = encoder->single_vel;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	encoder->velocity =  sum/((float)N_POS_SAMPLES);
 8005c74:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c78:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

}
 8005c9c:	bf00      	nop
 8005c9e:	3728      	adds	r7, #40	; 0x28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	2000033c 	.word	0x2000033c

08005ca8 <ps_print>:

void ps_print(EncoderStruct * encoder){
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	printf("   Raw: %u", (unsigned int)encoder->raw);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4820      	ldr	r0, [pc, #128]	; (8005d38 <ps_print+0x90>)
 8005cb8:	f006 fbf6 	bl	800c4a8 <iprintf>
//	printf("   LUT ind 1: %d", encoder->offset_ind1);
//	printf("   LUT ind 2: %d", encoder->offset_ind2);
//	printf("   Offset 1: %d", encoder->offset1);
//	printf("   Offset 2: %d", encoder->offset2);
//	printf("   Offset Interp: %d", encoder->offset_interp);
	printf("   Linearized: %d", encoder->count);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	481d      	ldr	r0, [pc, #116]	; (8005d3c <ps_print+0x94>)
 8005cc6:	f006 fbef 	bl	800c4a8 <iprintf>
	printf("   Single Turn: %.3f", encoder->angle_singleturn);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fa fc5a 	bl	8000588 <__aeabi_f2d>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4819      	ldr	r0, [pc, #100]	; (8005d40 <ps_print+0x98>)
 8005cda:	f006 fbe5 	bl	800c4a8 <iprintf>
	printf("   Multiturn: %.3f", encoder->angle_multiturn[0]);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fa fc50 	bl	8000588 <__aeabi_f2d>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4815      	ldr	r0, [pc, #84]	; (8005d44 <ps_print+0x9c>)
 8005cee:	f006 fbdb 	bl	800c4a8 <iprintf>
	printf("   Electrical: %.3f", encoder->elec_angle);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fa fc46 	bl	8000588 <__aeabi_f2d>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4811      	ldr	r0, [pc, #68]	; (8005d48 <ps_print+0xa0>)
 8005d02:	f006 fbd1 	bl	800c4a8 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	480f      	ldr	r0, [pc, #60]	; (8005d4c <ps_print+0xa4>)
 8005d10:	f006 fbca 	bl	800c4a8 <iprintf>
	printf("   Vel: %.4f\n\r", encoder->velocity);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fa fc35 	bl	8000588 <__aeabi_f2d>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	480b      	ldr	r0, [pc, #44]	; (8005d50 <ps_print+0xa8>)
 8005d24:	f006 fbc0 	bl	800c4a8 <iprintf>
	delay_us(10000);
 8005d28:	f242 7010 	movw	r0, #10000	; 0x2710
 8005d2c:	f000 ff6a 	bl	8006c04 <delay_us>
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	0801112c 	.word	0x0801112c
 8005d3c:	08011138 	.word	0x08011138
 8005d40:	0801114c 	.word	0x0801114c
 8005d44:	08011164 	.word	0x08011164
 8005d48:	08011178 	.word	0x08011178
 8005d4c:	0801118c 	.word	0x0801118c
 8005d50:	0801119c 	.word	0x0801119c

08005d54 <ps_filter_init>:

void WriteLUT(EncoderStruct * encoder,  int new_lut[N_LUT]){
	memcpy(encoder->offset_lut, new_lut, sizeof(encoder->offset_lut));
}

void ps_filter_init(EncoderStruct * encoder){
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	encoder->filt_prev_mech = encoder->angle_multiturn[0];
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	67da      	str	r2, [r3, #124]	; 0x7c
	encoder->filt_prev_elec = encoder->elec_angle;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fc fc7f 	bl	800268c <flash_writer_init>
	pr->sector = sector;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	60da      	str	r2, [r3, #12]
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fc fc8e 	bl	80026c8 <flash_writer_open>
    pr->ready = true;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	741a      	strb	r2, [r3, #16]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005dba:	b084      	sub	sp, #16
 8005dbc:	b490      	push	{r4, r7}
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	f107 0408 	add.w	r4, r7, #8
 8005dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005dc8:	7e3b      	ldrb	r3, [r7, #24]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc90      	pop	{r4, r7}
 8005dd0:	b004      	add	sp, #16
 8005dd2:	4770      	bx	lr

08005dd4 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e00d      	b.n	8005dfe <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <preference_writer_flush+0x70>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	460b      	mov	r3, r1
 8005df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005df4:	f7fc fc84 	bl	8002700 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2bff      	cmp	r3, #255	; 0xff
 8005e02:	ddee      	ble.n	8005de2 <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005e04:	e012      	b.n	8005e2c <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e0e:	4a0e      	ldr	r2, [pc, #56]	; (8005e48 <preference_writer_flush+0x74>)
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	edd3 7a00 	vldr	s15, [r3]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e1e:	460b      	mov	r3, r1
 8005e20:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e22:	f7fc fc83 	bl	800272c <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005e32:	dbe8      	blt.n	8005e06 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	741a      	strb	r2, [r3, #16]
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000043c 	.word	0x2000043c
 8005e48:	2000033c 	.word	0x2000033c

08005e4c <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	b590      	push	{r4, r7, lr}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	f107 0418 	add.w	r4, r7, #24
 8005e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	e00d      	b.n	8005e7e <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f107 0218 	add.w	r2, r7, #24
 8005e68:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e6a:	f7fc fc85 	bl	8002778 <flash_read_int>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	4915      	ldr	r1, [pc, #84]	; (8005ec8 <preference_writer_load+0x7c>)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2bff      	cmp	r3, #255	; 0xff
 8005e82:	ddee      	ble.n	8005e62 <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8005e84:	e013      	b.n	8005eae <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8005e8e:	4613      	mov	r3, r2
 8005e90:	f107 0218 	add.w	r2, r7, #24
 8005e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e96:	f7fc fc85 	bl	80027a4 <flash_read_float>
 8005e9a:	eef0 7a40 	vmov.f32	s15, s0
 8005e9e:	4a0b      	ldr	r2, [pc, #44]	; (8005ecc <preference_writer_load+0x80>)
 8005ea0:	00a3      	lsls	r3, r4, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005eb4:	dbe7      	blt.n	8005e86 <preference_writer_load+0x3a>
    }
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005ec2:	b004      	add	sp, #16
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	2000043c 	.word	0x2000043c
 8005ecc:	2000033c 	.word	0x2000033c

08005ed0 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fc fc3c 	bl	800275e <flash_writer_close>
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005ef4:	4b18      	ldr	r3, [pc, #96]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005ef6:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <MX_SPI1_Init+0x6c>)
 8005ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005f08:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f10:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005f16:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f26:	2228      	movs	r2, #40	; 0x28
 8005f28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f3e:	220a      	movs	r2, #10
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005f42:	4805      	ldr	r0, [pc, #20]	; (8005f58 <MX_SPI1_Init+0x68>)
 8005f44:	f003 f990 	bl	8009268 <HAL_SPI_Init>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8005f4e:	f7ff fa8d 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	200094c0 	.word	0x200094c0
 8005f5c:	40013000 	.word	0x40013000

08005f60 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005f64:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f66:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <MX_SPI3_Init+0x68>)
 8005f68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005f6a:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005f72:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f9e:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005fac:	220a      	movs	r2, #10
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005fb0:	4804      	ldr	r0, [pc, #16]	; (8005fc4 <MX_SPI3_Init+0x64>)
 8005fb2:	f003 f959 	bl	8009268 <HAL_SPI_Init>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005fbc:	f7ff fa56 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005fc0:	bf00      	nop
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20009518 	.word	0x20009518
 8005fc8:	40003c00 	.word	0x40003c00

08005fcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	; 0x30
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd4:	f107 031c 	add.w	r3, r7, #28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a32      	ldr	r2, [pc, #200]	; (80060b4 <HAL_SPI_MspInit+0xe8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d12c      	bne.n	8006048 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	4a30      	ldr	r2, [pc, #192]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8005ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ffe:	4b2e      	ldr	r3, [pc, #184]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	4b2a      	ldr	r3, [pc, #168]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	4a29      	ldr	r2, [pc, #164]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	6313      	str	r3, [r2, #48]	; 0x30
 800601a:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006026:	23e0      	movs	r3, #224	; 0xe0
 8006028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800602a:	2302      	movs	r3, #2
 800602c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602e:	2300      	movs	r3, #0
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006032:	2303      	movs	r3, #3
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006036:	2305      	movs	r3, #5
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800603a:	f107 031c 	add.w	r3, r7, #28
 800603e:	4619      	mov	r1, r3
 8006040:	481e      	ldr	r0, [pc, #120]	; (80060bc <HAL_SPI_MspInit+0xf0>)
 8006042:	f002 f92b 	bl	800829c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006046:	e031      	b.n	80060ac <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <HAL_SPI_MspInit+0xf4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d12c      	bne.n	80060ac <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	4a17      	ldr	r2, [pc, #92]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 800605c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006060:	6413      	str	r3, [r2, #64]	; 0x40
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006078:	f043 0304 	orr.w	r3, r3, #4
 800607c:	6313      	str	r3, [r2, #48]	; 0x30
 800607e:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <HAL_SPI_MspInit+0xec>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800608a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800608e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006090:	2302      	movs	r3, #2
 8006092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006094:	2300      	movs	r3, #0
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006098:	2303      	movs	r3, #3
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800609c:	2306      	movs	r3, #6
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a0:	f107 031c 	add.w	r3, r7, #28
 80060a4:	4619      	mov	r1, r3
 80060a6:	4807      	ldr	r0, [pc, #28]	; (80060c4 <HAL_SPI_MspInit+0xf8>)
 80060a8:	f002 f8f8 	bl	800829c <HAL_GPIO_Init>
}
 80060ac:	bf00      	nop
 80060ae:	3730      	adds	r7, #48	; 0x30
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40013000 	.word	0x40013000
 80060b8:	40023800 	.word	0x40023800
 80060bc:	40020000 	.word	0x40020000
 80060c0:	40003c00 	.word	0x40003c00
 80060c4:	40020800 	.word	0x40020800

080060c8 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80060cc:	4b07      	ldr	r3, [pc, #28]	; (80060ec <FLASH_Unlock+0x24>)
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da05      	bge.n	80060e0 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <FLASH_Unlock+0x24>)
 80060d6:	4a06      	ldr	r2, [pc, #24]	; (80060f0 <FLASH_Unlock+0x28>)
 80060d8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80060da:	4b04      	ldr	r3, [pc, #16]	; (80060ec <FLASH_Unlock+0x24>)
 80060dc:	4a05      	ldr	r2, [pc, #20]	; (80060f4 <FLASH_Unlock+0x2c>)
 80060de:	605a      	str	r2, [r3, #4]
  }  
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40023c00 	.word	0x40023c00
 80060f0:	45670123 	.word	0x45670123
 80060f4:	cdef89ab 	.word	0xcdef89ab

080060f8 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <FLASH_Lock+0x1c>)
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <FLASH_Lock+0x1c>)
 8006102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006106:	6113      	str	r3, [r2, #16]
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40023c00 	.word	0x40023c00

08006118 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8006128:	2309      	movs	r3, #9
 800612a:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	e010      	b.n	800615a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d103      	bne.n	8006146 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800613e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e009      	b.n	800615a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d103      	bne.n	8006154 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800614c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e002      	b.n	800615a <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006154:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006158:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 800615a:	f000 f8bf 	bl	80062dc <FLASH_WaitForLastOperation2>
 800615e:	4603      	mov	r3, r0
 8006160:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	2b09      	cmp	r3, #9
 8006166:	d12f      	bne.n	80061c8 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8006168:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <FLASH_EraseSector+0xbc>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <FLASH_EraseSector+0xbc>)
 800616e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006172:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8006174:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <FLASH_EraseSector+0xbc>)
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	4916      	ldr	r1, [pc, #88]	; (80061d4 <FLASH_EraseSector+0xbc>)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8006180:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <FLASH_EraseSector+0xbc>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	4a13      	ldr	r2, [pc, #76]	; (80061d4 <FLASH_EraseSector+0xbc>)
 8006186:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800618a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <FLASH_EraseSector+0xbc>)
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4313      	orrs	r3, r2
 8006194:	4a0f      	ldr	r2, [pc, #60]	; (80061d4 <FLASH_EraseSector+0xbc>)
 8006196:	f043 0302 	orr.w	r3, r3, #2
 800619a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800619c:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <FLASH_EraseSector+0xbc>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4a0c      	ldr	r2, [pc, #48]	; (80061d4 <FLASH_EraseSector+0xbc>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a6:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 80061a8:	f000 f898 	bl	80062dc <FLASH_WaitForLastOperation2>
 80061ac:	4603      	mov	r3, r0
 80061ae:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80061b0:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <FLASH_EraseSector+0xbc>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	4a07      	ldr	r2, [pc, #28]	; (80061d4 <FLASH_EraseSector+0xbc>)
 80061b6:	f023 0302 	bic.w	r3, r3, #2
 80061ba:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <FLASH_EraseSector+0xbc>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <FLASH_EraseSector+0xbc>)
 80061c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061c6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 80061c8:	7afb      	ldrb	r3, [r7, #11]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40023c00 	.word	0x40023c00

080061d8 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 80061e2:	2309      	movs	r3, #9
 80061e4:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 80061e6:	f000 f879 	bl	80062dc <FLASH_WaitForLastOperation2>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b09      	cmp	r3, #9
 80061f2:	d11e      	bne.n	8006232 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80061f4:	4b11      	ldr	r3, [pc, #68]	; (800623c <FLASH_ProgramWord+0x64>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	4a10      	ldr	r2, [pc, #64]	; (800623c <FLASH_ProgramWord+0x64>)
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8006200:	4b0e      	ldr	r3, [pc, #56]	; (800623c <FLASH_ProgramWord+0x64>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4a0d      	ldr	r2, [pc, #52]	; (800623c <FLASH_ProgramWord+0x64>)
 8006206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800620a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <FLASH_ProgramWord+0x64>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	4a0a      	ldr	r2, [pc, #40]	; (800623c <FLASH_ProgramWord+0x64>)
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 800621e:	f000 f85d 	bl	80062dc <FLASH_WaitForLastOperation2>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <FLASH_ProgramWord+0x64>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	4a04      	ldr	r2, [pc, #16]	; (800623c <FLASH_ProgramWord+0x64>)
 800622c:	f023 0301 	bic.w	r3, r3, #1
 8006230:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40023c00 	.word	0x40023c00

08006240 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006248:	4a04      	ldr	r2, [pc, #16]	; (800625c <FLASH_ClearFlag+0x1c>)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60d3      	str	r3, [r2, #12]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40023c00 	.word	0x40023c00

08006260 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8006266:	2309      	movs	r3, #9
 8006268:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <FLASH_GetStatus+0x78>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006276:	d102      	bne.n	800627e <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8006278:	2301      	movs	r3, #1
 800627a:	71fb      	strb	r3, [r7, #7]
 800627c:	e025      	b.n	80062ca <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800627e:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <FLASH_GetStatus+0x78>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 800628a:	2306      	movs	r3, #6
 800628c:	71fb      	strb	r3, [r7, #7]
 800628e:	e01c      	b.n	80062ca <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <FLASH_GetStatus+0x78>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 800629c:	2302      	movs	r3, #2
 800629e:	71fb      	strb	r3, [r7, #7]
 80062a0:	e013      	b.n	80062ca <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <FLASH_GetStatus+0x78>)
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 80062ae:	2307      	movs	r3, #7
 80062b0:	71fb      	strb	r3, [r7, #7]
 80062b2:	e00a      	b.n	80062ca <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80062b4:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <FLASH_GetStatus+0x78>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 80062c0:	2308      	movs	r3, #8
 80062c2:	71fb      	strb	r3, [r7, #7]
 80062c4:	e001      	b.n	80062ca <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 80062c6:	2309      	movs	r3, #9
 80062c8:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80062ca:	79fb      	ldrb	r3, [r7, #7]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40023c00 	.word	0x40023c00

080062dc <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 80062e2:	2309      	movs	r3, #9
 80062e4:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80062e6:	f7ff ffbb 	bl	8006260 <FLASH_GetStatus>
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 80062ee:	e003      	b.n	80062f8 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 80062f0:	f7ff ffb6 	bl	8006260 <FLASH_GetStatus>
 80062f4:	4603      	mov	r3, r0
 80062f6:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d0f7      	beq.n	80062f0 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	b2db      	uxtb	r3, r3
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	4b10      	ldr	r3, [pc, #64]	; (8006358 <HAL_MspInit+0x4c>)
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	4a0f      	ldr	r2, [pc, #60]	; (8006358 <HAL_MspInit+0x4c>)
 800631c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006320:	6453      	str	r3, [r2, #68]	; 0x44
 8006322:	4b0d      	ldr	r3, [pc, #52]	; (8006358 <HAL_MspInit+0x4c>)
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800632a:	607b      	str	r3, [r7, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800632e:	2300      	movs	r3, #0
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <HAL_MspInit+0x4c>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	4a08      	ldr	r2, [pc, #32]	; (8006358 <HAL_MspInit+0x4c>)
 8006338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633c:	6413      	str	r3, [r2, #64]	; 0x40
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <HAL_MspInit+0x4c>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800634a:	2005      	movs	r0, #5
 800634c:	f001 fed2 	bl	80080f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40023800 	.word	0x40023800

0800635c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800636a:	b480      	push	{r7}
 800636c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800636e:	e7fe      	b.n	800636e <HardFault_Handler+0x4>

08006370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006374:	e7fe      	b.n	8006374 <MemManage_Handler+0x4>

08006376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800637a:	e7fe      	b.n	800637a <BusFault_Handler+0x4>

0800637c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006380:	e7fe      	b.n	8006380 <UsageFault_Handler+0x4>

08006382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006382:	b480      	push	{r7}
 8006384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006386:	bf00      	nop
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800639e:	b480      	push	{r7}
 80063a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063b0:	f000 fd5c 	bl	8006e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063b4:	bf00      	nop
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	// grab timer value and reset
	loop_time = __HAL_TIM_GET_COUNTER(&htim3);
 80063bc:	4b11      	ldr	r3, [pc, #68]	; (8006404 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <TIM1_UP_TIM10_IRQHandler+0x50>)
 80063c6:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80063c8:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2200      	movs	r2, #0
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

	/* Sample ADCs */
	analog_sample(&controller);
 80063d0:	480e      	ldr	r0, [pc, #56]	; (800640c <TIM1_UP_TIM10_IRQHandler+0x54>)
 80063d2:	f7fc faa5 	bl	8002920 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80063d6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006410 <TIM1_UP_TIM10_IRQHandler+0x58>
 80063da:	480e      	ldr	r0, [pc, #56]	; (8006414 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 80063dc:	f7ff fa34 	bl	8005848 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 80063e0:	480d      	ldr	r0, [pc, #52]	; (8006418 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80063e2:	f7fd f8ef 	bl	80035c4 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 80063e6:	f000 f837 	bl	8006458 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 80063ea:	4b08      	ldr	r3, [pc, #32]	; (800640c <TIM1_UP_TIM10_IRQHandler+0x54>)
 80063ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063f0:	3301      	adds	r3, #1
 80063f2:	4a06      	ldr	r2, [pc, #24]	; (800640c <TIM1_UP_TIM10_IRQHandler+0x54>)
 80063f4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063f8:	4808      	ldr	r0, [pc, #32]	; (800641c <TIM1_UP_TIM10_IRQHandler+0x64>)
 80063fa:	f003 fc75 	bl	8009ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */



  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20009604 	.word	0x20009604
 8006408:	200094bc 	.word	0x200094bc
 800640c:	20000850 	.word	0x20000850
 8006410:	3851b717 	.word	0x3851b717
 8006414:	20000b5c 	.word	0x20000b5c
 8006418:	20000b48 	.word	0x20000b48
 800641c:	20009574 	.word	0x20009574

08006420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8006426:	4809      	ldr	r0, [pc, #36]	; (800644c <USART2_IRQHandler+0x2c>)
 8006428:	f004 fc24 	bl	800ac74 <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 800642c:	4b08      	ldr	r3, [pc, #32]	; (8006450 <USART2_IRQHandler+0x30>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	4619      	mov	r1, r3
 8006436:	4807      	ldr	r0, [pc, #28]	; (8006454 <USART2_IRQHandler+0x34>)
 8006438:	f7fd fae8 	bl	8003a0c <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800643c:	4803      	ldr	r0, [pc, #12]	; (800644c <USART2_IRQHandler+0x2c>)
 800643e:	f004 fc19 	bl	800ac74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	2000964c 	.word	0x2000964c
 8006450:	200094b8 	.word	0x200094b8
 8006454:	20000b48 	.word	0x20000b48

08006458 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8006458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645a:	b095      	sub	sp, #84	; 0x54
 800645c:	af12      	add	r7, sp, #72	; 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800645e:	4b84      	ldr	r3, [pc, #528]	; (8006670 <can_tx_rx+0x218>)
 8006460:	4a84      	ldr	r2, [pc, #528]	; (8006674 <can_tx_rx+0x21c>)
 8006462:	2100      	movs	r1, #0
 8006464:	4884      	ldr	r0, [pc, #528]	; (8006678 <can_tx_rx+0x220>)
 8006466:	f001 fc62 	bl	8007d2e <HAL_CAN_GetRxMessage>
 800646a:	4603      	mov	r3, r0
 800646c:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 80f9 	bne.w	8006668 <can_tx_rx+0x210>
//		printf("RX!\n\r");
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 8006476:	4b81      	ldr	r3, [pc, #516]	; (800667c <can_tx_rx+0x224>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	4a80      	ldr	r2, [pc, #512]	; (8006680 <can_tx_rx+0x228>)
 800647e:	ed92 7a05 	vldr	s14, [r2, #20]
 8006482:	4a80      	ldr	r2, [pc, #512]	; (8006684 <can_tx_rx+0x22c>)
 8006484:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006488:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800648c:	4a7c      	ldr	r2, [pc, #496]	; (8006680 <can_tx_rx+0x228>)
 800648e:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8006492:	4a7c      	ldr	r2, [pc, #496]	; (8006684 <can_tx_rx+0x22c>)
 8006494:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006498:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800649c:	4a7a      	ldr	r2, [pc, #488]	; (8006688 <can_tx_rx+0x230>)
 800649e:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 80064a2:	4a78      	ldr	r2, [pc, #480]	; (8006684 <can_tx_rx+0x22c>)
 80064a4:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80064a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064ac:	4a75      	ldr	r2, [pc, #468]	; (8006684 <can_tx_rx+0x22c>)
 80064ae:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	eeb0 1a67 	vmov.f32	s2, s15
 80064ba:	eef0 0a46 	vmov.f32	s1, s12
 80064be:	eeb0 0a66 	vmov.f32	s0, s13
 80064c2:	4619      	mov	r1, r3
 80064c4:	4871      	ldr	r0, [pc, #452]	; (800668c <can_tx_rx+0x234>)
 80064c6:	f7fb fd47 	bl	8001f58 <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 80064ca:	463b      	mov	r3, r7
 80064cc:	4a70      	ldr	r2, [pc, #448]	; (8006690 <can_tx_rx+0x238>)
 80064ce:	4971      	ldr	r1, [pc, #452]	; (8006694 <can_tx_rx+0x23c>)
 80064d0:	4869      	ldr	r0, [pc, #420]	; (8006678 <can_tx_rx+0x220>)
 80064d2:	f001 fb51 	bl	8007b78 <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80064d6:	4b70      	ldr	r3, [pc, #448]	; (8006698 <can_tx_rx+0x240>)
 80064d8:	785a      	ldrb	r2, [r3, #1]
 80064da:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <can_tx_rx+0x240>)
 80064dc:	789b      	ldrb	r3, [r3, #2]
 80064de:	4013      	ands	r3, r2
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4b6d      	ldr	r3, [pc, #436]	; (8006698 <can_tx_rx+0x240>)
 80064e4:	78db      	ldrb	r3, [r3, #3]
 80064e6:	4013      	ands	r3, r2
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b6b      	ldr	r3, [pc, #428]	; (8006698 <can_tx_rx+0x240>)
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	4013      	ands	r3, r2
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	4b69      	ldr	r3, [pc, #420]	; (8006698 <can_tx_rx+0x240>)
 80064f4:	795b      	ldrb	r3, [r3, #5]
 80064f6:	4013      	ands	r3, r2
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	4b67      	ldr	r3, [pc, #412]	; (8006698 <can_tx_rx+0x240>)
 80064fc:	799b      	ldrb	r3, [r3, #6]
 80064fe:	4013      	ands	r3, r2
 8006500:	b2da      	uxtb	r2, r3
 8006502:	4b65      	ldr	r3, [pc, #404]	; (8006698 <can_tx_rx+0x240>)
 8006504:	79db      	ldrb	r3, [r3, #7]
 8006506:	4013      	ands	r3, r2
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2bff      	cmp	r3, #255	; 0xff
 800650c:	bf0c      	ite	eq
 800650e:	2301      	moveq	r3, #1
 8006510:	2300      	movne	r3, #0
 8006512:	b2da      	uxtb	r2, r3
 8006514:	4b60      	ldr	r3, [pc, #384]	; (8006698 <can_tx_rx+0x240>)
 8006516:	7a1b      	ldrb	r3, [r3, #8]
 8006518:	2bfc      	cmp	r3, #252	; 0xfc
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	4013      	ands	r3, r2
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d004      	beq.n	8006534 <can_tx_rx+0xdc>
			  update_fsm(&state, MOTOR_CMD);
 800652a:	216d      	movs	r1, #109	; 0x6d
 800652c:	485b      	ldr	r0, [pc, #364]	; (800669c <can_tx_rx+0x244>)
 800652e:	f7fd fa6d 	bl	8003a0c <update_fsm>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
			  controller.timeout = 0;					// Reset timeout counter
		}
	}

}
 8006532:	e099      	b.n	8006668 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8006534:	4b58      	ldr	r3, [pc, #352]	; (8006698 <can_tx_rx+0x240>)
 8006536:	785a      	ldrb	r2, [r3, #1]
 8006538:	4b57      	ldr	r3, [pc, #348]	; (8006698 <can_tx_rx+0x240>)
 800653a:	789b      	ldrb	r3, [r3, #2]
 800653c:	4013      	ands	r3, r2
 800653e:	b2da      	uxtb	r2, r3
 8006540:	4b55      	ldr	r3, [pc, #340]	; (8006698 <can_tx_rx+0x240>)
 8006542:	78db      	ldrb	r3, [r3, #3]
 8006544:	4013      	ands	r3, r2
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2bff      	cmp	r3, #255	; 0xff
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	4b50      	ldr	r3, [pc, #320]	; (8006698 <can_tx_rx+0x240>)
 8006556:	791b      	ldrb	r3, [r3, #4]
 8006558:	2bff      	cmp	r3, #255	; 0xff
 800655a:	bf0c      	ite	eq
 800655c:	2301      	moveq	r3, #1
 800655e:	2300      	movne	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4619      	mov	r1, r3
 8006564:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <can_tx_rx+0x240>)
 8006566:	795b      	ldrb	r3, [r3, #5]
 8006568:	2bff      	cmp	r3, #255	; 0xff
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	4013      	ands	r3, r2
 8006578:	4a47      	ldr	r2, [pc, #284]	; (8006698 <can_tx_rx+0x240>)
 800657a:	7992      	ldrb	r2, [r2, #6]
 800657c:	2aff      	cmp	r2, #255	; 0xff
 800657e:	bf0c      	ite	eq
 8006580:	2201      	moveq	r2, #1
 8006582:	2200      	movne	r2, #0
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	4013      	ands	r3, r2
 8006588:	4a43      	ldr	r2, [pc, #268]	; (8006698 <can_tx_rx+0x240>)
 800658a:	79d2      	ldrb	r2, [r2, #7]
 800658c:	2aff      	cmp	r2, #255	; 0xff
 800658e:	bf0c      	ite	eq
 8006590:	2201      	moveq	r2, #1
 8006592:	2200      	movne	r2, #0
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	4013      	ands	r3, r2
 8006598:	4a3f      	ldr	r2, [pc, #252]	; (8006698 <can_tx_rx+0x240>)
 800659a:	7a12      	ldrb	r2, [r2, #8]
 800659c:	2afd      	cmp	r2, #253	; 0xfd
 800659e:	bf0c      	ite	eq
 80065a0:	2201      	moveq	r2, #1
 80065a2:	2200      	movne	r2, #0
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <can_tx_rx+0x15e>
			update_fsm(&state, MENU_CMD);
 80065ac:	211b      	movs	r1, #27
 80065ae:	483b      	ldr	r0, [pc, #236]	; (800669c <can_tx_rx+0x244>)
 80065b0:	f7fd fa2c 	bl	8003a0c <update_fsm>
}
 80065b4:	e058      	b.n	8006668 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80065b6:	4b38      	ldr	r3, [pc, #224]	; (8006698 <can_tx_rx+0x240>)
 80065b8:	785a      	ldrb	r2, [r3, #1]
 80065ba:	4b37      	ldr	r3, [pc, #220]	; (8006698 <can_tx_rx+0x240>)
 80065bc:	789b      	ldrb	r3, [r3, #2]
 80065be:	4013      	ands	r3, r2
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4b35      	ldr	r3, [pc, #212]	; (8006698 <can_tx_rx+0x240>)
 80065c4:	78db      	ldrb	r3, [r3, #3]
 80065c6:	4013      	ands	r3, r2
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2bff      	cmp	r3, #255	; 0xff
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	4b30      	ldr	r3, [pc, #192]	; (8006698 <can_tx_rx+0x240>)
 80065d8:	791b      	ldrb	r3, [r3, #4]
 80065da:	2bff      	cmp	r3, #255	; 0xff
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	4619      	mov	r1, r3
 80065e6:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <can_tx_rx+0x240>)
 80065e8:	795b      	ldrb	r3, [r3, #5]
 80065ea:	2bff      	cmp	r3, #255	; 0xff
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	4013      	ands	r3, r2
 80065fa:	4a27      	ldr	r2, [pc, #156]	; (8006698 <can_tx_rx+0x240>)
 80065fc:	7992      	ldrb	r2, [r2, #6]
 80065fe:	2aff      	cmp	r2, #255	; 0xff
 8006600:	bf0c      	ite	eq
 8006602:	2201      	moveq	r2, #1
 8006604:	2200      	movne	r2, #0
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	4013      	ands	r3, r2
 800660a:	4a23      	ldr	r2, [pc, #140]	; (8006698 <can_tx_rx+0x240>)
 800660c:	79d2      	ldrb	r2, [r2, #7]
 800660e:	2aff      	cmp	r2, #255	; 0xff
 8006610:	bf0c      	ite	eq
 8006612:	2201      	moveq	r2, #1
 8006614:	2200      	movne	r2, #0
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	4013      	ands	r3, r2
 800661a:	4a1f      	ldr	r2, [pc, #124]	; (8006698 <can_tx_rx+0x240>)
 800661c:	7a12      	ldrb	r2, [r2, #8]
 800661e:	2afe      	cmp	r2, #254	; 0xfe
 8006620:	bf0c      	ite	eq
 8006622:	2201      	moveq	r2, #1
 8006624:	2200      	movne	r2, #0
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <can_tx_rx+0x1e0>
			  update_fsm(&state, ZERO_CMD);
 800662e:	217a      	movs	r1, #122	; 0x7a
 8006630:	481a      	ldr	r0, [pc, #104]	; (800669c <can_tx_rx+0x244>)
 8006632:	f7fd f9eb 	bl	8003a0c <update_fsm>
}
 8006636:	e017      	b.n	8006668 <can_tx_rx+0x210>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8006638:	4e17      	ldr	r6, [pc, #92]	; (8006698 <can_tx_rx+0x240>)
 800663a:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <can_tx_rx+0x248>)
 800663c:	9310      	str	r3, [sp, #64]	; 0x40
 800663e:	466d      	mov	r5, sp
 8006640:	f106 0410 	add.w	r4, r6, #16
 8006644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800664a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800664c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800664e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006654:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006658:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800665c:	f7fb fcf4 	bl	8002048 <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <can_tx_rx+0x230>)
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	20009469 	.word	0x20009469
 8006674:	20009474 	.word	0x20009474
 8006678:	20000314 	.word	0x20000314
 800667c:	2000043c 	.word	0x2000043c
 8006680:	20000b5c 	.word	0x20000b5c
 8006684:	2000033c 	.word	0x2000033c
 8006688:	20000850 	.word	0x20000850
 800668c:	20009448 	.word	0x20009448
 8006690:	20009449 	.word	0x20009449
 8006694:	20009450 	.word	0x20009450
 8006698:	20009468 	.word	0x20009468
 800669c:	20000b48 	.word	0x20000b48
 80066a0:	2000091c 	.word	0x2000091c

080066a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
	return 1;
 80066a8:	2301      	movs	r3, #1
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <_kill>:

int _kill(int pid, int sig)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80066be:	f005 fa49 	bl	800bb54 <__errno>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2216      	movs	r2, #22
 80066c6:	601a      	str	r2, [r3, #0]
	return -1;
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_exit>:

void _exit (int status)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80066dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff ffe7 	bl	80066b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80066e6:	e7fe      	b.n	80066e6 <_exit+0x12>

080066e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e00a      	b.n	8006710 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80066fa:	f3af 8000 	nop.w
 80066fe:	4601      	mov	r1, r0
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	60ba      	str	r2, [r7, #8]
 8006706:	b2ca      	uxtb	r2, r1
 8006708:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3301      	adds	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	dbf0      	blt.n	80066fa <_read+0x12>
	}

return len;
 8006718:	687b      	ldr	r3, [r7, #4]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	e009      	b.n	8006748 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	60ba      	str	r2, [r7, #8]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 faf5 	bl	8006d2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	3301      	adds	r3, #1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	dbf1      	blt.n	8006734 <_write+0x12>
	}
	return len;
 8006750:	687b      	ldr	r3, [r7, #4]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_close>:

int _close(int file)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
	return -1;
 8006762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006782:	605a      	str	r2, [r3, #4]
	return 0;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <_isatty>:

int _isatty(int file)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
	return 1;
 800679a:	2301      	movs	r3, #1
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
	return 0;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80067cc:	4b11      	ldr	r3, [pc, #68]	; (8006814 <_sbrk+0x50>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <_sbrk+0x16>
		heap_end = &end;
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <_sbrk+0x50>)
 80067d6:	4a10      	ldr	r2, [pc, #64]	; (8006818 <_sbrk+0x54>)
 80067d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <_sbrk+0x50>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80067e0:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <_sbrk+0x50>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	466a      	mov	r2, sp
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d907      	bls.n	80067fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80067ee:	f005 f9b1 	bl	800bb54 <__errno>
 80067f2:	4603      	mov	r3, r0
 80067f4:	220c      	movs	r2, #12
 80067f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80067f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067fc:	e006      	b.n	800680c <_sbrk+0x48>
	}

	heap_end += incr;
 80067fe:	4b05      	ldr	r3, [pc, #20]	; (8006814 <_sbrk+0x50>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	4a03      	ldr	r2, [pc, #12]	; (8006814 <_sbrk+0x50>)
 8006808:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800680a:	68fb      	ldr	r3, [r7, #12]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20009570 	.word	0x20009570
 8006818:	200096a8 	.word	0x200096a8

0800681c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <SystemInit+0x28>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	4a07      	ldr	r2, [pc, #28]	; (8006844 <SystemInit+0x28>)
 8006828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800682c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <SystemInit+0x28>)
 8006832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006836:	609a      	str	r2, [r3, #8]
#endif
}
 8006838:	bf00      	nop
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	e000ed00 	.word	0xe000ed00

08006848 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b096      	sub	sp, #88	; 0x58
 800684c:	af00      	add	r7, sp, #0
	// - 40kHz loop timing is 2250 timer period


  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800684e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	609a      	str	r2, [r3, #8]
 800685a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800685c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	605a      	str	r2, [r3, #4]
 8006870:	609a      	str	r2, [r3, #8]
 8006872:	60da      	str	r2, [r3, #12]
 8006874:	611a      	str	r2, [r3, #16]
 8006876:	615a      	str	r2, [r3, #20]
 8006878:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	2220      	movs	r2, #32
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f005 f99f 	bl	800bbc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006886:	4b4a      	ldr	r3, [pc, #296]	; (80069b0 <MX_TIM1_Init+0x168>)
 8006888:	4a4a      	ldr	r2, [pc, #296]	; (80069b4 <MX_TIM1_Init+0x16c>)
 800688a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800688c:	4b48      	ldr	r3, [pc, #288]	; (80069b0 <MX_TIM1_Init+0x168>)
 800688e:	2200      	movs	r2, #0
 8006890:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8006892:	4b47      	ldr	r3, [pc, #284]	; (80069b0 <MX_TIM1_Init+0x168>)
 8006894:	2220      	movs	r2, #32
 8006896:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 8006898:	4b45      	ldr	r3, [pc, #276]	; (80069b0 <MX_TIM1_Init+0x168>)
 800689a:	f241 1294 	movw	r2, #4500	; 0x1194
 800689e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068a0:	4b43      	ldr	r3, [pc, #268]	; (80069b0 <MX_TIM1_Init+0x168>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80068a6:	4b42      	ldr	r3, [pc, #264]	; (80069b0 <MX_TIM1_Init+0x168>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80068ac:	4b40      	ldr	r3, [pc, #256]	; (80069b0 <MX_TIM1_Init+0x168>)
 80068ae:	2280      	movs	r2, #128	; 0x80
 80068b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80068b2:	483f      	ldr	r0, [pc, #252]	; (80069b0 <MX_TIM1_Init+0x168>)
 80068b4:	f002 ffce 	bl	8009854 <HAL_TIM_Base_Init>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80068be:	f7fe fdd5 	bl	800546c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80068c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80068cc:	4619      	mov	r1, r3
 80068ce:	4838      	ldr	r0, [pc, #224]	; (80069b0 <MX_TIM1_Init+0x168>)
 80068d0:	f003 fbd4 	bl	800a07c <HAL_TIM_ConfigClockSource>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80068da:	f7fe fdc7 	bl	800546c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80068de:	4834      	ldr	r0, [pc, #208]	; (80069b0 <MX_TIM1_Init+0x168>)
 80068e0:	f003 f8e0 	bl	8009aa4 <HAL_TIM_PWM_Init>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80068ea:	f7fe fdbf 	bl	800546c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068ee:	2300      	movs	r3, #0
 80068f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80068f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068fa:	4619      	mov	r1, r3
 80068fc:	482c      	ldr	r0, [pc, #176]	; (80069b0 <MX_TIM1_Init+0x168>)
 80068fe:	f003 ffc7 	bl	800a890 <HAL_TIMEx_MasterConfigSynchronization>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006908:	f7fe fdb0 	bl	800546c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800690c:	2360      	movs	r3, #96	; 0x60
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006914:	2302      	movs	r3, #2
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006918:	2300      	movs	r3, #0
 800691a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800691c:	2304      	movs	r3, #4
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006920:	2300      	movs	r3, #0
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006924:	2300      	movs	r3, #0
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692c:	2200      	movs	r2, #0
 800692e:	4619      	mov	r1, r3
 8006930:	481f      	ldr	r0, [pc, #124]	; (80069b0 <MX_TIM1_Init+0x168>)
 8006932:	f003 fae1 	bl	8009ef8 <HAL_TIM_PWM_ConfigChannel>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800693c:	f7fe fd96 	bl	800546c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006944:	2204      	movs	r2, #4
 8006946:	4619      	mov	r1, r3
 8006948:	4819      	ldr	r0, [pc, #100]	; (80069b0 <MX_TIM1_Init+0x168>)
 800694a:	f003 fad5 	bl	8009ef8 <HAL_TIM_PWM_ConfigChannel>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006954:	f7fe fd8a 	bl	800546c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800695c:	2208      	movs	r2, #8
 800695e:	4619      	mov	r1, r3
 8006960:	4813      	ldr	r0, [pc, #76]	; (80069b0 <MX_TIM1_Init+0x168>)
 8006962:	f003 fac9 	bl	8009ef8 <HAL_TIM_PWM_ConfigChannel>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800696c:	f7fe fd7e 	bl	800546c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006970:	2300      	movs	r3, #0
 8006972:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006974:	2300      	movs	r3, #0
 8006976:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006988:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4807      	ldr	r0, [pc, #28]	; (80069b0 <MX_TIM1_Init+0x168>)
 8006994:	f003 fff8 	bl	800a988 <HAL_TIMEx_ConfigBreakDeadTime>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800699e:	f7fe fd65 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80069a2:	4803      	ldr	r0, [pc, #12]	; (80069b0 <MX_TIM1_Init+0x168>)
 80069a4:	f000 f8f4 	bl	8006b90 <HAL_TIM_MspPostInit>

}
 80069a8:	bf00      	nop
 80069aa:	3758      	adds	r7, #88	; 0x58
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20009574 	.word	0x20009574
 80069b4:	40010000 	.word	0x40010000

080069b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069be:	f107 0308 	add.w	r3, r7, #8
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	605a      	str	r2, [r3, #4]
 80069c8:	609a      	str	r2, [r3, #8]
 80069ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069cc:	463b      	mov	r3, r7
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80069d4:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <MX_TIM2_Init+0x94>)
 80069d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 80069dc:	4b1b      	ldr	r3, [pc, #108]	; (8006a4c <MX_TIM2_Init+0x94>)
 80069de:	225a      	movs	r2, #90	; 0x5a
 80069e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069e2:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <MX_TIM2_Init+0x94>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80069e8:	4b18      	ldr	r3, [pc, #96]	; (8006a4c <MX_TIM2_Init+0x94>)
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069f0:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <MX_TIM2_Init+0x94>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069f6:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <MX_TIM2_Init+0x94>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80069fc:	4813      	ldr	r0, [pc, #76]	; (8006a4c <MX_TIM2_Init+0x94>)
 80069fe:	f002 ff29 	bl	8009854 <HAL_TIM_Base_Init>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006a08:	f7fe fd30 	bl	800546c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a12:	f107 0308 	add.w	r3, r7, #8
 8006a16:	4619      	mov	r1, r3
 8006a18:	480c      	ldr	r0, [pc, #48]	; (8006a4c <MX_TIM2_Init+0x94>)
 8006a1a:	f003 fb2f 	bl	800a07c <HAL_TIM_ConfigClockSource>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006a24:	f7fe fd22 	bl	800546c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a30:	463b      	mov	r3, r7
 8006a32:	4619      	mov	r1, r3
 8006a34:	4805      	ldr	r0, [pc, #20]	; (8006a4c <MX_TIM2_Init+0x94>)
 8006a36:	f003 ff2b 	bl	800a890 <HAL_TIMEx_MasterConfigSynchronization>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006a40:	f7fe fd14 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a44:	bf00      	nop
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	200095bc 	.word	0x200095bc

08006a50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
 8006a60:	609a      	str	r2, [r3, #8]
 8006a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a64:	463b      	mov	r3, r7
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006a6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <MX_TIM3_Init+0x98>)
 8006a70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90;
 8006a72:	4b1c      	ldr	r3, [pc, #112]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006a74:	225a      	movs	r2, #90	; 0x5a
 8006a76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a78:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006a7e:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a86:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a8c:	4b15      	ldr	r3, [pc, #84]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006a92:	4814      	ldr	r0, [pc, #80]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006a94:	f002 fede 	bl	8009854 <HAL_TIM_Base_Init>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006a9e:	f7fe fce5 	bl	800546c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006aa8:	f107 0308 	add.w	r3, r7, #8
 8006aac:	4619      	mov	r1, r3
 8006aae:	480d      	ldr	r0, [pc, #52]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006ab0:	f003 fae4 	bl	800a07c <HAL_TIM_ConfigClockSource>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8006aba:	f7fe fcd7 	bl	800546c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4806      	ldr	r0, [pc, #24]	; (8006ae4 <MX_TIM3_Init+0x94>)
 8006acc:	f003 fee0 	bl	800a890 <HAL_TIMEx_MasterConfigSynchronization>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8006ad6:	f7fe fcc9 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006ada:	bf00      	nop
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20009604 	.word	0x20009604
 8006ae8:	40000400 	.word	0x40000400

08006aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a22      	ldr	r2, [pc, #136]	; (8006b84 <HAL_TIM_Base_MspInit+0x98>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d116      	bne.n	8006b2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	4b21      	ldr	r3, [pc, #132]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	4a20      	ldr	r2, [pc, #128]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	2019      	movs	r0, #25
 8006b20:	f001 faf3 	bl	800810a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006b24:	2019      	movs	r0, #25
 8006b26:	f001 fb0c 	bl	8008142 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006b2a:	e026      	b.n	8006b7a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b34:	d10e      	bne.n	8006b54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	4a12      	ldr	r2, [pc, #72]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	6413      	str	r3, [r2, #64]	; 0x40
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	693b      	ldr	r3, [r7, #16]
}
 8006b52:	e012      	b.n	8006b7a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a0c      	ldr	r2, [pc, #48]	; (8006b8c <HAL_TIM_Base_MspInit+0xa0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10d      	bne.n	8006b7a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b68:	f043 0302 	orr.w	r3, r3, #2
 8006b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <HAL_TIM_Base_MspInit+0x9c>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
}
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	40000400 	.word	0x40000400

08006b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b98:	f107 030c 	add.w	r3, r7, #12
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <HAL_TIM_MspPostInit+0x68>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d11e      	bne.n	8006bf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <HAL_TIM_MspPostInit+0x6c>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <HAL_TIM_MspPostInit+0x6c>)
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bc2:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <HAL_TIM_MspPostInit+0x6c>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006bce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006bd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006be0:	2301      	movs	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006be4:	f107 030c 	add.w	r3, r7, #12
 8006be8:	4619      	mov	r1, r3
 8006bea:	4805      	ldr	r0, [pc, #20]	; (8006c00 <HAL_TIM_MspPostInit+0x70>)
 8006bec:	f001 fb56 	bl	800829c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006bf0:	bf00      	nop
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	40020000 	.word	0x40020000

08006c04 <delay_us>:
}

/* USER CODE BEGIN 1 */

void delay_us (uint16_t us)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <delay_us+0x30>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8006c16:	bf00      	nop
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <delay_us+0x30>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d3f9      	bcc.n	8006c18 <delay_us+0x14>
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	200095bc 	.word	0x200095bc

08006c38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006c3c:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <MX_USART2_UART_Init+0x50>)
 8006c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c44:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8006c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c5e:	220c      	movs	r2, #12
 8006c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006c6e:	4805      	ldr	r0, [pc, #20]	; (8006c84 <MX_USART2_UART_Init+0x4c>)
 8006c70:	f003 fef0 	bl	800aa54 <HAL_UART_Init>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006c7a:	f7fe fbf7 	bl	800546c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	2000964c 	.word	0x2000964c
 8006c88:	40004400 	.word	0x40004400

08006c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <HAL_UART_MspInit+0x94>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d133      	bne.n	8006d16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <HAL_UART_MspInit+0x98>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <HAL_UART_MspInit+0x98>)
 8006cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cbe:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <HAL_UART_MspInit+0x98>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <HAL_UART_MspInit+0x98>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	4a14      	ldr	r2, [pc, #80]	; (8006d24 <HAL_UART_MspInit+0x98>)
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <HAL_UART_MspInit+0x98>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cea:	2302      	movs	r3, #2
 8006cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006cf6:	2307      	movs	r3, #7
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cfa:	f107 0314 	add.w	r3, r7, #20
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4809      	ldr	r0, [pc, #36]	; (8006d28 <HAL_UART_MspInit+0x9c>)
 8006d02:	f001 facb 	bl	800829c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8006d06:	2200      	movs	r2, #0
 8006d08:	2102      	movs	r1, #2
 8006d0a:	2026      	movs	r0, #38	; 0x26
 8006d0c:	f001 f9fd 	bl	800810a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006d10:	2026      	movs	r0, #38	; 0x26
 8006d12:	f001 fa16 	bl	8008142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006d16:	bf00      	nop
 8006d18:	3728      	adds	r7, #40	; 0x28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40004400 	.word	0x40004400
 8006d24:	40023800 	.word	0x40023800
 8006d28:	40020000 	.word	0x40020000

08006d2c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006d34:	1d39      	adds	r1, r7, #4
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	4803      	ldr	r0, [pc, #12]	; (8006d4c <__io_putchar+0x20>)
 8006d3e:	f003 fed6 	bl	800aaee <HAL_UART_Transmit>
  return ch;
 8006d42:	687b      	ldr	r3, [r7, #4]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	2000964c 	.word	0x2000964c

08006d50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8006d58:	2201      	movs	r2, #1
 8006d5a:	4904      	ldr	r1, [pc, #16]	; (8006d6c <HAL_UART_RxCpltCallback+0x1c>)
 8006d5c:	4804      	ldr	r0, [pc, #16]	; (8006d70 <HAL_UART_RxCpltCallback+0x20>)
 8006d5e:	f003 ff58 	bl	800ac12 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200094b8 	.word	0x200094b8
 8006d70:	2000964c 	.word	0x2000964c

08006d74 <Reset_Handler>:
 8006d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dac <LoopFillZerobss+0x12>
 8006d78:	480d      	ldr	r0, [pc, #52]	; (8006db0 <LoopFillZerobss+0x16>)
 8006d7a:	490e      	ldr	r1, [pc, #56]	; (8006db4 <LoopFillZerobss+0x1a>)
 8006d7c:	4a0e      	ldr	r2, [pc, #56]	; (8006db8 <LoopFillZerobss+0x1e>)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e002      	b.n	8006d88 <LoopCopyDataInit>

08006d82 <CopyDataInit>:
 8006d82:	58d4      	ldr	r4, [r2, r3]
 8006d84:	50c4      	str	r4, [r0, r3]
 8006d86:	3304      	adds	r3, #4

08006d88 <LoopCopyDataInit>:
 8006d88:	18c4      	adds	r4, r0, r3
 8006d8a:	428c      	cmp	r4, r1
 8006d8c:	d3f9      	bcc.n	8006d82 <CopyDataInit>
 8006d8e:	4a0b      	ldr	r2, [pc, #44]	; (8006dbc <LoopFillZerobss+0x22>)
 8006d90:	4c0b      	ldr	r4, [pc, #44]	; (8006dc0 <LoopFillZerobss+0x26>)
 8006d92:	2300      	movs	r3, #0
 8006d94:	e001      	b.n	8006d9a <LoopFillZerobss>

08006d96 <FillZerobss>:
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	3204      	adds	r2, #4

08006d9a <LoopFillZerobss>:
 8006d9a:	42a2      	cmp	r2, r4
 8006d9c:	d3fb      	bcc.n	8006d96 <FillZerobss>
 8006d9e:	f7ff fd3d 	bl	800681c <SystemInit>
 8006da2:	f004 fedd 	bl	800bb60 <__libc_init_array>
 8006da6:	f7fd feef 	bl	8004b88 <main>
 8006daa:	4770      	bx	lr
 8006dac:	20020000 	.word	0x20020000
 8006db0:	20000000 	.word	0x20000000
 8006db4:	20000220 	.word	0x20000220
 8006db8:	08011eb8 	.word	0x08011eb8
 8006dbc:	20000220 	.word	0x20000220
 8006dc0:	200096a4 	.word	0x200096a4

08006dc4 <ADC_IRQHandler>:
 8006dc4:	e7fe      	b.n	8006dc4 <ADC_IRQHandler>
	...

08006dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_Init+0x40>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0d      	ldr	r2, [pc, #52]	; (8006e08 <HAL_Init+0x40>)
 8006dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <HAL_Init+0x40>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <HAL_Init+0x40>)
 8006dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006de4:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <HAL_Init+0x40>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a07      	ldr	r2, [pc, #28]	; (8006e08 <HAL_Init+0x40>)
 8006dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006df0:	2003      	movs	r0, #3
 8006df2:	f001 f97f 	bl	80080f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006df6:	2000      	movs	r0, #0
 8006df8:	f000 f808 	bl	8006e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dfc:	f7ff fa86 	bl	800630c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	40023c00 	.word	0x40023c00

08006e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <HAL_InitTick+0x54>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <HAL_InitTick+0x58>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 f997 	bl	800815e <HAL_SYSTICK_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e00e      	b.n	8006e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b0f      	cmp	r3, #15
 8006e3e:	d80a      	bhi.n	8006e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e40:	2200      	movs	r2, #0
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e48:	f001 f95f 	bl	800810a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e4c:	4a06      	ldr	r2, [pc, #24]	; (8006e68 <HAL_InitTick+0x5c>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000040 	.word	0x20000040
 8006e64:	20000048 	.word	0x20000048
 8006e68:	20000044 	.word	0x20000044

08006e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <HAL_IncTick+0x20>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <HAL_IncTick+0x24>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <HAL_IncTick+0x24>)
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000048 	.word	0x20000048
 8006e90:	20009690 	.word	0x20009690

08006e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  return uwTick;
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <HAL_GetTick+0x14>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20009690 	.word	0x20009690

08006eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006eb4:	f7ff ffee 	bl	8006e94 <HAL_GetTick>
 8006eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec4:	d005      	beq.n	8006ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <HAL_Delay+0x44>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006ed2:	bf00      	nop
 8006ed4:	f7ff ffde 	bl	8006e94 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d8f7      	bhi.n	8006ed4 <HAL_Delay+0x28>
  {
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000048 	.word	0x20000048

08006ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e033      	b.n	8006f72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fa f98e 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d118      	bne.n	8006f64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f3a:	f023 0302 	bic.w	r3, r3, #2
 8006f3e:	f043 0202 	orr.w	r2, r3, #2
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fab4 	bl	80074b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	f043 0201 	orr.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	641a      	str	r2, [r3, #64]	; 0x40
 8006f62:	e001      	b.n	8006f68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_ADC_Start+0x1a>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0b2      	b.n	80070fc <HAL_ADC_Start+0x180>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d018      	beq.n	8006fde <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006fbc:	4b52      	ldr	r3, [pc, #328]	; (8007108 <HAL_ADC_Start+0x18c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a52      	ldr	r2, [pc, #328]	; (800710c <HAL_ADC_Start+0x190>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	0c9a      	lsrs	r2, r3, #18
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006fd0:	e002      	b.n	8006fd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1f9      	bne.n	8006fd2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d17a      	bne.n	80070e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702a:	d106      	bne.n	800703a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007030:	f023 0206 	bic.w	r2, r3, #6
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	645a      	str	r2, [r3, #68]	; 0x44
 8007038:	e002      	b.n	8007040 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007048:	4b31      	ldr	r3, [pc, #196]	; (8007110 <HAL_ADC_Start+0x194>)
 800704a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007054:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f003 031f 	and.w	r3, r3, #31
 800705e:	2b00      	cmp	r3, #0
 8007060:	d12a      	bne.n	80070b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <HAL_ADC_Start+0x198>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d015      	beq.n	8007098 <HAL_ADC_Start+0x11c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a29      	ldr	r2, [pc, #164]	; (8007118 <HAL_ADC_Start+0x19c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d105      	bne.n	8007082 <HAL_ADC_Start+0x106>
 8007076:	4b26      	ldr	r3, [pc, #152]	; (8007110 <HAL_ADC_Start+0x194>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a25      	ldr	r2, [pc, #148]	; (800711c <HAL_ADC_Start+0x1a0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d136      	bne.n	80070fa <HAL_ADC_Start+0x17e>
 800708c:	4b20      	ldr	r3, [pc, #128]	; (8007110 <HAL_ADC_Start+0x194>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d130      	bne.n	80070fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d129      	bne.n	80070fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80070b4:	609a      	str	r2, [r3, #8]
 80070b6:	e020      	b.n	80070fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a15      	ldr	r2, [pc, #84]	; (8007114 <HAL_ADC_Start+0x198>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d11b      	bne.n	80070fa <HAL_ADC_Start+0x17e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d114      	bne.n	80070fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80070de:	609a      	str	r2, [r3, #8]
 80070e0:	e00b      	b.n	80070fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	f043 0210 	orr.w	r2, r3, #16
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	f043 0201 	orr.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	20000040 	.word	0x20000040
 800710c:	431bde83 	.word	0x431bde83
 8007110:	40012300 	.word	0x40012300
 8007114:	40012000 	.word	0x40012000
 8007118:	40012100 	.word	0x40012100
 800711c:	40012200 	.word	0x40012200

08007120 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713c:	d113      	bne.n	8007166 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714c:	d10b      	bne.n	8007166 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f043 0220 	orr.w	r2, r3, #32
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e063      	b.n	800722e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007166:	f7ff fe95 	bl	8006e94 <HAL_GetTick>
 800716a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800716c:	e021      	b.n	80071b2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007174:	d01d      	beq.n	80071b2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <HAL_ADC_PollForConversion+0x6c>
 800717c:	f7ff fe8a 	bl	8006e94 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d212      	bcs.n	80071b2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b02      	cmp	r3, #2
 8007198:	d00b      	beq.n	80071b2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f043 0204 	orr.w	r2, r3, #4
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e03d      	b.n	800722e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d1d6      	bne.n	800716e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0212 	mvn.w	r2, #18
 80071c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d123      	bne.n	800722c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d11f      	bne.n	800722c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d006      	beq.n	8007208 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007204:	2b00      	cmp	r3, #0
 8007206:	d111      	bne.n	800722c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	f043 0201 	orr.w	r2, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_ADC_ConfigChannel+0x1c>
 8007268:	2302      	movs	r3, #2
 800726a:	e113      	b.n	8007494 <HAL_ADC_ConfigChannel+0x244>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b09      	cmp	r3, #9
 800727a:	d925      	bls.n	80072c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68d9      	ldr	r1, [r3, #12]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	4613      	mov	r3, r2
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	4413      	add	r3, r2
 8007290:	3b1e      	subs	r3, #30
 8007292:	2207      	movs	r2, #7
 8007294:	fa02 f303 	lsl.w	r3, r2, r3
 8007298:	43da      	mvns	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	400a      	ands	r2, r1
 80072a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68d9      	ldr	r1, [r3, #12]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	4618      	mov	r0, r3
 80072b4:	4603      	mov	r3, r0
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4403      	add	r3, r0
 80072ba:	3b1e      	subs	r3, #30
 80072bc:	409a      	lsls	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	60da      	str	r2, [r3, #12]
 80072c6:	e022      	b.n	800730e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6919      	ldr	r1, [r3, #16]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	4613      	mov	r3, r2
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	4413      	add	r3, r2
 80072dc:	2207      	movs	r2, #7
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	43da      	mvns	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	400a      	ands	r2, r1
 80072ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6919      	ldr	r1, [r3, #16]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	4618      	mov	r0, r3
 80072fe:	4603      	mov	r3, r0
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	4403      	add	r3, r0
 8007304:	409a      	lsls	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b06      	cmp	r3, #6
 8007314:	d824      	bhi.n	8007360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	3b05      	subs	r3, #5
 8007328:	221f      	movs	r2, #31
 800732a:	fa02 f303 	lsl.w	r3, r2, r3
 800732e:	43da      	mvns	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	400a      	ands	r2, r1
 8007336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	4618      	mov	r0, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	3b05      	subs	r3, #5
 8007352:	fa00 f203 	lsl.w	r2, r0, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	635a      	str	r2, [r3, #52]	; 0x34
 800735e:	e04c      	b.n	80073fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b0c      	cmp	r3, #12
 8007366:	d824      	bhi.n	80073b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	3b23      	subs	r3, #35	; 0x23
 800737a:	221f      	movs	r2, #31
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	43da      	mvns	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	400a      	ands	r2, r1
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	4618      	mov	r0, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	3b23      	subs	r3, #35	; 0x23
 80073a4:	fa00 f203 	lsl.w	r2, r0, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30
 80073b0:	e023      	b.n	80073fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	3b41      	subs	r3, #65	; 0x41
 80073c4:	221f      	movs	r2, #31
 80073c6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ca:	43da      	mvns	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	400a      	ands	r2, r1
 80073d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	4618      	mov	r0, r3
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	3b41      	subs	r3, #65	; 0x41
 80073ee:	fa00 f203 	lsl.w	r2, r0, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073fa:	4b29      	ldr	r3, [pc, #164]	; (80074a0 <HAL_ADC_ConfigChannel+0x250>)
 80073fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <HAL_ADC_ConfigChannel+0x254>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d10f      	bne.n	8007428 <HAL_ADC_ConfigChannel+0x1d8>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b12      	cmp	r3, #18
 800740e:	d10b      	bne.n	8007428 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <HAL_ADC_ConfigChannel+0x254>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d12b      	bne.n	800748a <HAL_ADC_ConfigChannel+0x23a>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <HAL_ADC_ConfigChannel+0x258>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <HAL_ADC_ConfigChannel+0x1f4>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b11      	cmp	r3, #17
 8007442:	d122      	bne.n	800748a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a11      	ldr	r2, [pc, #68]	; (80074a8 <HAL_ADC_ConfigChannel+0x258>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d111      	bne.n	800748a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_ADC_ConfigChannel+0x25c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a11      	ldr	r2, [pc, #68]	; (80074b0 <HAL_ADC_ConfigChannel+0x260>)
 800746c:	fba2 2303 	umull	r2, r3, r2, r3
 8007470:	0c9a      	lsrs	r2, r3, #18
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800747c:	e002      	b.n	8007484 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	3b01      	subs	r3, #1
 8007482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f9      	bne.n	800747e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40012300 	.word	0x40012300
 80074a4:	40012000 	.word	0x40012000
 80074a8:	10000012 	.word	0x10000012
 80074ac:	20000040 	.word	0x20000040
 80074b0:	431bde83 	.word	0x431bde83

080074b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074bc:	4b79      	ldr	r3, [pc, #484]	; (80076a4 <ADC_Init+0x1f0>)
 80074be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6859      	ldr	r1, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	021a      	lsls	r2, r3, #8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800750c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6859      	ldr	r1, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800752e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6899      	ldr	r1, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	4a58      	ldr	r2, [pc, #352]	; (80076a8 <ADC_Init+0x1f4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d022      	beq.n	8007592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800755a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6899      	ldr	r1, [r3, #8]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800757c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6899      	ldr	r1, [r3, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	609a      	str	r2, [r3, #8]
 8007590:	e00f      	b.n	80075b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0202 	bic.w	r2, r2, #2
 80075c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6899      	ldr	r1, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7e1b      	ldrb	r3, [r3, #24]
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01b      	beq.n	8007618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80075fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6859      	ldr	r1, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	3b01      	subs	r3, #1
 800760c:	035a      	lsls	r2, r3, #13
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	e007      	b.n	8007628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	3b01      	subs	r3, #1
 8007644:	051a      	lsls	r2, r3, #20
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800765c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6899      	ldr	r1, [r3, #8]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800766a:	025a      	lsls	r2, r3, #9
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6899      	ldr	r1, [r3, #8]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	029a      	lsls	r2, r3, #10
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40012300 	.word	0x40012300
 80076a8:	0f000001 	.word	0x0f000001

080076ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e031      	b.n	8007728 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076cc:	4b19      	ldr	r3, [pc, #100]	; (8007734 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f023 021f 	bic.w	r2, r3, #31
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	431a      	orrs	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	431a      	orrs	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	40012300 	.word	0x40012300

08007738 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e0ed      	b.n	8007926 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fa fb6e 	bl	8001e38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800776c:	f7ff fb92 	bl	8006e94 <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007772:	e012      	b.n	800779a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007774:	f7ff fb8e 	bl	8006e94 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b0a      	cmp	r3, #10
 8007780:	d90b      	bls.n	800779a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2205      	movs	r2, #5
 8007792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e0c5      	b.n	8007926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0e5      	beq.n	8007774 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0202 	bic.w	r2, r2, #2
 80077b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077b8:	f7ff fb6c 	bl	8006e94 <HAL_GetTick>
 80077bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80077be:	e012      	b.n	80077e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80077c0:	f7ff fb68 	bl	8006e94 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b0a      	cmp	r3, #10
 80077cc:	d90b      	bls.n	80077e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2205      	movs	r2, #5
 80077de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e09f      	b.n	8007926 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7e1b      	ldrb	r3, [r3, #24]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d108      	bne.n	800780e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	e007      	b.n	800781e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800781c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7e5b      	ldrb	r3, [r3, #25]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d108      	bne.n	8007838 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e007      	b.n	8007848 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007846:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7e9b      	ldrb	r3, [r3, #26]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d108      	bne.n	8007862 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0220 	orr.w	r2, r2, #32
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e007      	b.n	8007872 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0220 	bic.w	r2, r2, #32
 8007870:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7edb      	ldrb	r3, [r3, #27]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d108      	bne.n	800788c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0210 	bic.w	r2, r2, #16
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e007      	b.n	800789c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0210 	orr.w	r2, r2, #16
 800789a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7f1b      	ldrb	r3, [r3, #28]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d108      	bne.n	80078b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0208 	orr.w	r2, r2, #8
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e007      	b.n	80078c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0208 	bic.w	r2, r2, #8
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7f5b      	ldrb	r3, [r3, #29]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d108      	bne.n	80078e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0204 	orr.w	r2, r2, #4
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e007      	b.n	80078f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0204 	bic.w	r2, r2, #4
 80078ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	ea42 0103 	orr.w	r1, r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	1e5a      	subs	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007946:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007948:	7cfb      	ldrb	r3, [r7, #19]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d003      	beq.n	8007956 <HAL_CAN_ConfigFilter+0x26>
 800794e:	7cfb      	ldrb	r3, [r7, #19]
 8007950:	2b02      	cmp	r3, #2
 8007952:	f040 80be 	bne.w	8007ad2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007956:	4b65      	ldr	r3, [pc, #404]	; (8007aec <HAL_CAN_ConfigFilter+0x1bc>)
 8007958:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007960:	f043 0201 	orr.w	r2, r3, #1
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007970:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	431a      	orrs	r2, r3
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	2201      	movs	r2, #1
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	43db      	mvns	r3, r3
 80079a8:	401a      	ands	r2, r3
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d123      	bne.n	8007a00 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	43db      	mvns	r3, r3
 80079c2:	401a      	ands	r2, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80079da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	3248      	adds	r2, #72	; 0x48
 80079e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80079f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079f6:	6979      	ldr	r1, [r7, #20]
 80079f8:	3348      	adds	r3, #72	; 0x48
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	440b      	add	r3, r1
 80079fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d122      	bne.n	8007a4e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007a28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	3248      	adds	r2, #72	; 0x48
 8007a2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007a44:	6979      	ldr	r1, [r7, #20]
 8007a46:	3348      	adds	r3, #72	; 0x48
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	440b      	add	r3, r1
 8007a4c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	401a      	ands	r2, r3
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007a68:	e007      	b.n	8007a7a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	43db      	mvns	r3, r3
 8007a8c:	401a      	ands	r2, r3
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007a94:	e007      	b.n	8007aa6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d107      	bne.n	8007abe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ac4:	f023 0201 	bic.w	r2, r3, #1
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e006      	b.n	8007ae0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
  }
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	371c      	adds	r7, #28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	40006400 	.word	0x40006400

08007af0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d12e      	bne.n	8007b62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0201 	bic.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b1c:	f7ff f9ba 	bl	8006e94 <HAL_GetTick>
 8007b20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007b22:	e012      	b.n	8007b4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b24:	f7ff f9b6 	bl	8006e94 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b0a      	cmp	r3, #10
 8007b30:	d90b      	bls.n	8007b4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2205      	movs	r2, #5
 8007b42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e012      	b.n	8007b70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e5      	bne.n	8007b24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e006      	b.n	8007b70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b089      	sub	sp, #36	; 0x24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b96:	7ffb      	ldrb	r3, [r7, #31]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d003      	beq.n	8007ba4 <HAL_CAN_AddTxMessage+0x2c>
 8007b9c:	7ffb      	ldrb	r3, [r7, #31]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	f040 80b8 	bne.w	8007d14 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 80a0 	beq.w	8007d04 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	0e1b      	lsrs	r3, r3, #24
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d907      	bls.n	8007be4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e09e      	b.n	8007d22 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007be4:	2201      	movs	r2, #1
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	409a      	lsls	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10d      	bne.n	8007c12 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007c00:	68f9      	ldr	r1, [r7, #12]
 8007c02:	6809      	ldr	r1, [r1, #0]
 8007c04:	431a      	orrs	r2, r3
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	3318      	adds	r3, #24
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	440b      	add	r3, r1
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	e00f      	b.n	8007c32 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c1c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007c26:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3318      	adds	r3, #24
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	440b      	add	r3, r1
 8007c30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3318      	adds	r3, #24
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	440b      	add	r3, r1
 8007c42:	3304      	adds	r3, #4
 8007c44:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	7d1b      	ldrb	r3, [r3, #20]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d111      	bne.n	8007c72 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	3318      	adds	r3, #24
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	4413      	add	r3, r2
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	6811      	ldr	r1, [r2, #0]
 8007c62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	3318      	adds	r3, #24
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	440b      	add	r3, r1
 8007c6e:	3304      	adds	r3, #4
 8007c70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3307      	adds	r3, #7
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	061a      	lsls	r2, r3, #24
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3306      	adds	r3, #6
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	041b      	lsls	r3, r3, #16
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3305      	adds	r3, #5
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	3204      	adds	r2, #4
 8007c92:	7812      	ldrb	r2, [r2, #0]
 8007c94:	4610      	mov	r0, r2
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	6811      	ldr	r1, [r2, #0]
 8007c9a:	ea43 0200 	orr.w	r2, r3, r0
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	440b      	add	r3, r1
 8007ca4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007ca8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3303      	adds	r3, #3
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	061a      	lsls	r2, r3, #24
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3302      	adds	r3, #2
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	041b      	lsls	r3, r3, #16
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	7812      	ldrb	r2, [r2, #0]
 8007cca:	4610      	mov	r0, r2
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	6811      	ldr	r1, [r2, #0]
 8007cd0:	ea43 0200 	orr.w	r2, r3, r0
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	440b      	add	r3, r1
 8007cda:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007cde:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	4413      	add	r3, r2
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	6811      	ldr	r1, [r2, #0]
 8007cf2:	f043 0201 	orr.w	r2, r3, #1
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	3318      	adds	r3, #24
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	440b      	add	r3, r1
 8007cfe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	e00e      	b.n	8007d22 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e006      	b.n	8007d22 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
  }
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3724      	adds	r7, #36	; 0x24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b087      	sub	sp, #28
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
 8007d3a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d42:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d003      	beq.n	8007d52 <HAL_CAN_GetRxMessage+0x24>
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	f040 80f3 	bne.w	8007f38 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10e      	bne.n	8007d76 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d116      	bne.n	8007d94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0e7      	b.n	8007f46 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d107      	bne.n	8007d94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e0d8      	b.n	8007f46 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	331b      	adds	r3, #27
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	4413      	add	r3, r2
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0204 	and.w	r2, r3, #4
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10c      	bne.n	8007dcc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	331b      	adds	r3, #27
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	4413      	add	r3, r2
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	0d5b      	lsrs	r3, r3, #21
 8007dc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	e00b      	b.n	8007de4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	331b      	adds	r3, #27
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	4413      	add	r3, r2
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	08db      	lsrs	r3, r3, #3
 8007ddc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	331b      	adds	r3, #27
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	4413      	add	r3, r2
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0202 	and.w	r2, r3, #2
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	331b      	adds	r3, #27
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	4413      	add	r3, r2
 8007e06:	3304      	adds	r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 020f 	and.w	r2, r3, #15
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	331b      	adds	r3, #27
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3304      	adds	r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	0a1b      	lsrs	r3, r3, #8
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	331b      	adds	r3, #27
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	4413      	add	r3, r2
 8007e36:	3304      	adds	r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	0c1b      	lsrs	r3, r3, #16
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	0a1a      	lsrs	r2, r3, #8
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	0c1a      	lsrs	r2, r3, #16
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	3302      	adds	r3, #2
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	0e1a      	lsrs	r2, r3, #24
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	3303      	adds	r3, #3
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	0a1a      	lsrs	r2, r3, #8
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	3305      	adds	r3, #5
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	0c1a      	lsrs	r2, r3, #16
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	3306      	adds	r3, #6
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	0e1a      	lsrs	r2, r3, #24
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	3307      	adds	r3, #7
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0220 	orr.w	r2, r2, #32
 8007f20:	60da      	str	r2, [r3, #12]
 8007f22:	e007      	b.n	8007f34 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691a      	ldr	r2, [r3, #16]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0220 	orr.w	r2, r2, #32
 8007f32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e006      	b.n	8007f46 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
	...

08007f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f64:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <__NVIC_SetPriorityGrouping+0x44>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f70:	4013      	ands	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f86:	4a04      	ldr	r2, [pc, #16]	; (8007f98 <__NVIC_SetPriorityGrouping+0x44>)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	60d3      	str	r3, [r2, #12]
}
 8007f8c:	bf00      	nop
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	e000ed00 	.word	0xe000ed00

08007f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fa0:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	0a1b      	lsrs	r3, r3, #8
 8007fa6:	f003 0307 	and.w	r3, r3, #7
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	e000ed00 	.word	0xe000ed00

08007fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	db0b      	blt.n	8007fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	f003 021f 	and.w	r2, r3, #31
 8007fd0:	4907      	ldr	r1, [pc, #28]	; (8007ff0 <__NVIC_EnableIRQ+0x38>)
 8007fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	2001      	movs	r0, #1
 8007fda:	fa00 f202 	lsl.w	r2, r0, r2
 8007fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	e000e100 	.word	0xe000e100

08007ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	6039      	str	r1, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008004:	2b00      	cmp	r3, #0
 8008006:	db0a      	blt.n	800801e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	490c      	ldr	r1, [pc, #48]	; (8008040 <__NVIC_SetPriority+0x4c>)
 800800e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008012:	0112      	lsls	r2, r2, #4
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	440b      	add	r3, r1
 8008018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800801c:	e00a      	b.n	8008034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	4908      	ldr	r1, [pc, #32]	; (8008044 <__NVIC_SetPriority+0x50>)
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	3b04      	subs	r3, #4
 800802c:	0112      	lsls	r2, r2, #4
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	440b      	add	r3, r1
 8008032:	761a      	strb	r2, [r3, #24]
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	e000e100 	.word	0xe000e100
 8008044:	e000ed00 	.word	0xe000ed00

08008048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008048:	b480      	push	{r7}
 800804a:	b089      	sub	sp, #36	; 0x24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f1c3 0307 	rsb	r3, r3, #7
 8008062:	2b04      	cmp	r3, #4
 8008064:	bf28      	it	cs
 8008066:	2304      	movcs	r3, #4
 8008068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	3304      	adds	r3, #4
 800806e:	2b06      	cmp	r3, #6
 8008070:	d902      	bls.n	8008078 <NVIC_EncodePriority+0x30>
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3b03      	subs	r3, #3
 8008076:	e000      	b.n	800807a <NVIC_EncodePriority+0x32>
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800807c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	fa02 f303 	lsl.w	r3, r2, r3
 8008086:	43da      	mvns	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	401a      	ands	r2, r3
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	fa01 f303 	lsl.w	r3, r1, r3
 800809a:	43d9      	mvns	r1, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080a0:	4313      	orrs	r3, r2
         );
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3724      	adds	r7, #36	; 0x24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080c0:	d301      	bcc.n	80080c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080c2:	2301      	movs	r3, #1
 80080c4:	e00f      	b.n	80080e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080c6:	4a0a      	ldr	r2, [pc, #40]	; (80080f0 <SysTick_Config+0x40>)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080ce:	210f      	movs	r1, #15
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080d4:	f7ff ff8e 	bl	8007ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080d8:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <SysTick_Config+0x40>)
 80080da:	2200      	movs	r2, #0
 80080dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080de:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <SysTick_Config+0x40>)
 80080e0:	2207      	movs	r2, #7
 80080e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	e000e010 	.word	0xe000e010

080080f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff ff29 	bl	8007f54 <__NVIC_SetPriorityGrouping>
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800810a:	b580      	push	{r7, lr}
 800810c:	b086      	sub	sp, #24
 800810e:	af00      	add	r7, sp, #0
 8008110:	4603      	mov	r3, r0
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800811c:	f7ff ff3e 	bl	8007f9c <__NVIC_GetPriorityGrouping>
 8008120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	6978      	ldr	r0, [r7, #20]
 8008128:	f7ff ff8e 	bl	8008048 <NVIC_EncodePriority>
 800812c:	4602      	mov	r2, r0
 800812e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008132:	4611      	mov	r1, r2
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff ff5d 	bl	8007ff4 <__NVIC_SetPriority>
}
 800813a:	bf00      	nop
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	4603      	mov	r3, r0
 800814a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800814c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff ff31 	bl	8007fb8 <__NVIC_EnableIRQ>
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff ffa2 	bl	80080b0 <SysTick_Config>
 800816c:	4603      	mov	r3, r0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008182:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008184:	f7fe fe86 	bl	8006e94 <HAL_GetTick>
 8008188:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d008      	beq.n	80081a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2280      	movs	r2, #128	; 0x80
 800819a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e052      	b.n	800824e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0216 	bic.w	r2, r2, #22
 80081b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695a      	ldr	r2, [r3, #20]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <HAL_DMA_Abort+0x62>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0208 	bic.w	r2, r2, #8
 80081e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0201 	bic.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081f8:	e013      	b.n	8008222 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80081fa:	f7fe fe4b 	bl	8006e94 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	2b05      	cmp	r3, #5
 8008206:	d90c      	bls.n	8008222 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2220      	movs	r2, #32
 800820c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2203      	movs	r2, #3
 8008212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e015      	b.n	800824e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e4      	bne.n	80081fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008234:	223f      	movs	r2, #63	; 0x3f
 8008236:	409a      	lsls	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d004      	beq.n	8008274 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2280      	movs	r2, #128	; 0x80
 800826e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e00c      	b.n	800828e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2205      	movs	r2, #5
 8008278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800829c:	b480      	push	{r7}
 800829e:	b089      	sub	sp, #36	; 0x24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	e165      	b.n	8008584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80082b8:	2201      	movs	r2, #1
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4013      	ands	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	f040 8154 	bne.w	800857e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d005      	beq.n	80082ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d130      	bne.n	8008350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	2203      	movs	r2, #3
 80082fa:	fa02 f303 	lsl.w	r3, r2, r3
 80082fe:	43db      	mvns	r3, r3
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	4013      	ands	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4313      	orrs	r3, r2
 8008316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008324:	2201      	movs	r2, #1
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	43db      	mvns	r3, r3
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	4013      	ands	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f003 0201 	and.w	r2, r3, #1
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	4313      	orrs	r3, r2
 8008348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	2b03      	cmp	r3, #3
 800835a:	d017      	beq.n	800838c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	2203      	movs	r2, #3
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	4013      	ands	r3, r2
 8008372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	4313      	orrs	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d123      	bne.n	80083e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	08da      	lsrs	r2, r3, #3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3208      	adds	r2, #8
 80083a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	220f      	movs	r2, #15
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	43db      	mvns	r3, r3
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	4013      	ands	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	08da      	lsrs	r2, r3, #3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3208      	adds	r2, #8
 80083da:	69b9      	ldr	r1, [r7, #24]
 80083dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	2203      	movs	r2, #3
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	43db      	mvns	r3, r3
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	4013      	ands	r3, r2
 80083f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f003 0203 	and.w	r2, r3, #3
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	fa02 f303 	lsl.w	r3, r2, r3
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4313      	orrs	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80ae 	beq.w	800857e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	4b5d      	ldr	r3, [pc, #372]	; (800859c <HAL_GPIO_Init+0x300>)
 8008428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842a:	4a5c      	ldr	r2, [pc, #368]	; (800859c <HAL_GPIO_Init+0x300>)
 800842c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008430:	6453      	str	r3, [r2, #68]	; 0x44
 8008432:	4b5a      	ldr	r3, [pc, #360]	; (800859c <HAL_GPIO_Init+0x300>)
 8008434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800843e:	4a58      	ldr	r2, [pc, #352]	; (80085a0 <HAL_GPIO_Init+0x304>)
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	089b      	lsrs	r3, r3, #2
 8008444:	3302      	adds	r3, #2
 8008446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800844a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	220f      	movs	r2, #15
 8008456:	fa02 f303 	lsl.w	r3, r2, r3
 800845a:	43db      	mvns	r3, r3
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	4013      	ands	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a4f      	ldr	r2, [pc, #316]	; (80085a4 <HAL_GPIO_Init+0x308>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d025      	beq.n	80084b6 <HAL_GPIO_Init+0x21a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a4e      	ldr	r2, [pc, #312]	; (80085a8 <HAL_GPIO_Init+0x30c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01f      	beq.n	80084b2 <HAL_GPIO_Init+0x216>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a4d      	ldr	r2, [pc, #308]	; (80085ac <HAL_GPIO_Init+0x310>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d019      	beq.n	80084ae <HAL_GPIO_Init+0x212>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a4c      	ldr	r2, [pc, #304]	; (80085b0 <HAL_GPIO_Init+0x314>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d013      	beq.n	80084aa <HAL_GPIO_Init+0x20e>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a4b      	ldr	r2, [pc, #300]	; (80085b4 <HAL_GPIO_Init+0x318>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00d      	beq.n	80084a6 <HAL_GPIO_Init+0x20a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a4a      	ldr	r2, [pc, #296]	; (80085b8 <HAL_GPIO_Init+0x31c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d007      	beq.n	80084a2 <HAL_GPIO_Init+0x206>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a49      	ldr	r2, [pc, #292]	; (80085bc <HAL_GPIO_Init+0x320>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <HAL_GPIO_Init+0x202>
 800849a:	2306      	movs	r3, #6
 800849c:	e00c      	b.n	80084b8 <HAL_GPIO_Init+0x21c>
 800849e:	2307      	movs	r3, #7
 80084a0:	e00a      	b.n	80084b8 <HAL_GPIO_Init+0x21c>
 80084a2:	2305      	movs	r3, #5
 80084a4:	e008      	b.n	80084b8 <HAL_GPIO_Init+0x21c>
 80084a6:	2304      	movs	r3, #4
 80084a8:	e006      	b.n	80084b8 <HAL_GPIO_Init+0x21c>
 80084aa:	2303      	movs	r3, #3
 80084ac:	e004      	b.n	80084b8 <HAL_GPIO_Init+0x21c>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e002      	b.n	80084b8 <HAL_GPIO_Init+0x21c>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <HAL_GPIO_Init+0x21c>
 80084b6:	2300      	movs	r3, #0
 80084b8:	69fa      	ldr	r2, [r7, #28]
 80084ba:	f002 0203 	and.w	r2, r2, #3
 80084be:	0092      	lsls	r2, r2, #2
 80084c0:	4093      	lsls	r3, r2
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084c8:	4935      	ldr	r1, [pc, #212]	; (80085a0 <HAL_GPIO_Init+0x304>)
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	089b      	lsrs	r3, r3, #2
 80084ce:	3302      	adds	r3, #2
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084d6:	4b3a      	ldr	r3, [pc, #232]	; (80085c0 <HAL_GPIO_Init+0x324>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	43db      	mvns	r3, r3
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	4013      	ands	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084fa:	4a31      	ldr	r2, [pc, #196]	; (80085c0 <HAL_GPIO_Init+0x324>)
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008500:	4b2f      	ldr	r3, [pc, #188]	; (80085c0 <HAL_GPIO_Init+0x324>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	43db      	mvns	r3, r3
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	4013      	ands	r3, r2
 800850e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008524:	4a26      	ldr	r2, [pc, #152]	; (80085c0 <HAL_GPIO_Init+0x324>)
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800852a:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <HAL_GPIO_Init+0x324>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	43db      	mvns	r3, r3
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	4013      	ands	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4313      	orrs	r3, r2
 800854c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800854e:	4a1c      	ldr	r2, [pc, #112]	; (80085c0 <HAL_GPIO_Init+0x324>)
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008554:	4b1a      	ldr	r3, [pc, #104]	; (80085c0 <HAL_GPIO_Init+0x324>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	43db      	mvns	r3, r3
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	4013      	ands	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008578:	4a11      	ldr	r2, [pc, #68]	; (80085c0 <HAL_GPIO_Init+0x324>)
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	3301      	adds	r3, #1
 8008582:	61fb      	str	r3, [r7, #28]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b0f      	cmp	r3, #15
 8008588:	f67f ae96 	bls.w	80082b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	3724      	adds	r7, #36	; 0x24
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	40023800 	.word	0x40023800
 80085a0:	40013800 	.word	0x40013800
 80085a4:	40020000 	.word	0x40020000
 80085a8:	40020400 	.word	0x40020400
 80085ac:	40020800 	.word	0x40020800
 80085b0:	40020c00 	.word	0x40020c00
 80085b4:	40021000 	.word	0x40021000
 80085b8:	40021400 	.word	0x40021400
 80085bc:	40021800 	.word	0x40021800
 80085c0:	40013c00 	.word	0x40013c00

080085c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	807b      	strh	r3, [r7, #2]
 80085d0:	4613      	mov	r3, r2
 80085d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085d4:	787b      	ldrb	r3, [r7, #1]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085da:	887a      	ldrh	r2, [r7, #2]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085e0:	e003      	b.n	80085ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085e2:	887b      	ldrh	r3, [r7, #2]
 80085e4:	041a      	lsls	r2, r3, #16
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	619a      	str	r2, [r3, #24]
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008602:	2300      	movs	r3, #0
 8008604:	603b      	str	r3, [r7, #0]
 8008606:	4b20      	ldr	r3, [pc, #128]	; (8008688 <HAL_PWREx_EnableOverDrive+0x90>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	4a1f      	ldr	r2, [pc, #124]	; (8008688 <HAL_PWREx_EnableOverDrive+0x90>)
 800860c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008610:	6413      	str	r3, [r2, #64]	; 0x40
 8008612:	4b1d      	ldr	r3, [pc, #116]	; (8008688 <HAL_PWREx_EnableOverDrive+0x90>)
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800861e:	4b1b      	ldr	r3, [pc, #108]	; (800868c <HAL_PWREx_EnableOverDrive+0x94>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008624:	f7fe fc36 	bl	8006e94 <HAL_GetTick>
 8008628:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800862a:	e009      	b.n	8008640 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800862c:	f7fe fc32 	bl	8006e94 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800863a:	d901      	bls.n	8008640 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e01f      	b.n	8008680 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008640:	4b13      	ldr	r3, [pc, #76]	; (8008690 <HAL_PWREx_EnableOverDrive+0x98>)
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864c:	d1ee      	bne.n	800862c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008654:	f7fe fc1e 	bl	8006e94 <HAL_GetTick>
 8008658:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800865a:	e009      	b.n	8008670 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800865c:	f7fe fc1a 	bl	8006e94 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866a:	d901      	bls.n	8008670 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e007      	b.n	8008680 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008670:	4b07      	ldr	r3, [pc, #28]	; (8008690 <HAL_PWREx_EnableOverDrive+0x98>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800867c:	d1ee      	bne.n	800865c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40023800 	.word	0x40023800
 800868c:	420e0040 	.word	0x420e0040
 8008690:	40007000 	.word	0x40007000
 8008694:	420e0044 	.word	0x420e0044

08008698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0cc      	b.n	8008846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086ac:	4b68      	ldr	r3, [pc, #416]	; (8008850 <HAL_RCC_ClockConfig+0x1b8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 030f 	and.w	r3, r3, #15
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d90c      	bls.n	80086d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ba:	4b65      	ldr	r3, [pc, #404]	; (8008850 <HAL_RCC_ClockConfig+0x1b8>)
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c2:	4b63      	ldr	r3, [pc, #396]	; (8008850 <HAL_RCC_ClockConfig+0x1b8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d001      	beq.n	80086d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e0b8      	b.n	8008846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d020      	beq.n	8008722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086ec:	4b59      	ldr	r3, [pc, #356]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	4a58      	ldr	r2, [pc, #352]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 80086f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80086f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008704:	4b53      	ldr	r3, [pc, #332]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	4a52      	ldr	r2, [pc, #328]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 800870a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800870e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008710:	4b50      	ldr	r3, [pc, #320]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	494d      	ldr	r1, [pc, #308]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d044      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d107      	bne.n	8008746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008736:	4b47      	ldr	r3, [pc, #284]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d119      	bne.n	8008776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e07f      	b.n	8008846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d003      	beq.n	8008756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008752:	2b03      	cmp	r3, #3
 8008754:	d107      	bne.n	8008766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008756:	4b3f      	ldr	r3, [pc, #252]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d109      	bne.n	8008776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e06f      	b.n	8008846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008766:	4b3b      	ldr	r3, [pc, #236]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e067      	b.n	8008846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008776:	4b37      	ldr	r3, [pc, #220]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f023 0203 	bic.w	r2, r3, #3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4934      	ldr	r1, [pc, #208]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008784:	4313      	orrs	r3, r2
 8008786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008788:	f7fe fb84 	bl	8006e94 <HAL_GetTick>
 800878c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800878e:	e00a      	b.n	80087a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008790:	f7fe fb80 	bl	8006e94 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f241 3288 	movw	r2, #5000	; 0x1388
 800879e:	4293      	cmp	r3, r2
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e04f      	b.n	8008846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087a6:	4b2b      	ldr	r3, [pc, #172]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 020c 	and.w	r2, r3, #12
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d1eb      	bne.n	8008790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087b8:	4b25      	ldr	r3, [pc, #148]	; (8008850 <HAL_RCC_ClockConfig+0x1b8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d20c      	bcs.n	80087e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087c6:	4b22      	ldr	r3, [pc, #136]	; (8008850 <HAL_RCC_ClockConfig+0x1b8>)
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ce:	4b20      	ldr	r3, [pc, #128]	; (8008850 <HAL_RCC_ClockConfig+0x1b8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d001      	beq.n	80087e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e032      	b.n	8008846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d008      	beq.n	80087fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087ec:	4b19      	ldr	r3, [pc, #100]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	4916      	ldr	r1, [pc, #88]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	490e      	ldr	r1, [pc, #56]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	4313      	orrs	r3, r2
 800881c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800881e:	f000 f855 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 8008822:	4602      	mov	r2, r0
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	091b      	lsrs	r3, r3, #4
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	490a      	ldr	r1, [pc, #40]	; (8008858 <HAL_RCC_ClockConfig+0x1c0>)
 8008830:	5ccb      	ldrb	r3, [r1, r3]
 8008832:	fa22 f303 	lsr.w	r3, r2, r3
 8008836:	4a09      	ldr	r2, [pc, #36]	; (800885c <HAL_RCC_ClockConfig+0x1c4>)
 8008838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800883a:	4b09      	ldr	r3, [pc, #36]	; (8008860 <HAL_RCC_ClockConfig+0x1c8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fae4 	bl	8006e0c <HAL_InitTick>

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	40023c00 	.word	0x40023c00
 8008854:	40023800 	.word	0x40023800
 8008858:	080119ac 	.word	0x080119ac
 800885c:	20000040 	.word	0x20000040
 8008860:	20000044 	.word	0x20000044

08008864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008868:	4b03      	ldr	r3, [pc, #12]	; (8008878 <HAL_RCC_GetHCLKFreq+0x14>)
 800886a:	681b      	ldr	r3, [r3, #0]
}
 800886c:	4618      	mov	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000040 	.word	0x20000040

0800887c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008880:	f7ff fff0 	bl	8008864 <HAL_RCC_GetHCLKFreq>
 8008884:	4602      	mov	r2, r0
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	0a9b      	lsrs	r3, r3, #10
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	4903      	ldr	r1, [pc, #12]	; (80088a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008892:	5ccb      	ldrb	r3, [r1, r3]
 8008894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008898:	4618      	mov	r0, r3
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40023800 	.word	0x40023800
 80088a0:	080119bc 	.word	0x080119bc

080088a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088a8:	f7ff ffdc 	bl	8008864 <HAL_RCC_GetHCLKFreq>
 80088ac:	4602      	mov	r2, r0
 80088ae:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	0b5b      	lsrs	r3, r3, #13
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	4903      	ldr	r1, [pc, #12]	; (80088c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088ba:	5ccb      	ldrb	r3, [r1, r3]
 80088bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	40023800 	.word	0x40023800
 80088c8:	080119bc 	.word	0x080119bc

080088cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088d0:	b0ae      	sub	sp, #184	; 0xb8
 80088d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088f2:	4bcb      	ldr	r3, [pc, #812]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f003 030c 	and.w	r3, r3, #12
 80088fa:	2b0c      	cmp	r3, #12
 80088fc:	f200 8206 	bhi.w	8008d0c <HAL_RCC_GetSysClockFreq+0x440>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	0800893d 	.word	0x0800893d
 800890c:	08008d0d 	.word	0x08008d0d
 8008910:	08008d0d 	.word	0x08008d0d
 8008914:	08008d0d 	.word	0x08008d0d
 8008918:	08008945 	.word	0x08008945
 800891c:	08008d0d 	.word	0x08008d0d
 8008920:	08008d0d 	.word	0x08008d0d
 8008924:	08008d0d 	.word	0x08008d0d
 8008928:	0800894d 	.word	0x0800894d
 800892c:	08008d0d 	.word	0x08008d0d
 8008930:	08008d0d 	.word	0x08008d0d
 8008934:	08008d0d 	.word	0x08008d0d
 8008938:	08008b3d 	.word	0x08008b3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800893c:	4bb9      	ldr	r3, [pc, #740]	; (8008c24 <HAL_RCC_GetSysClockFreq+0x358>)
 800893e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008942:	e1e7      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008944:	4bb8      	ldr	r3, [pc, #736]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800894a:	e1e3      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800894c:	4bb4      	ldr	r3, [pc, #720]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008958:	4bb1      	ldr	r3, [pc, #708]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d071      	beq.n	8008a48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008964:	4bae      	ldr	r3, [pc, #696]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	099b      	lsrs	r3, r3, #6
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008970:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008980:	2300      	movs	r3, #0
 8008982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800898a:	4622      	mov	r2, r4
 800898c:	462b      	mov	r3, r5
 800898e:	f04f 0000 	mov.w	r0, #0
 8008992:	f04f 0100 	mov.w	r1, #0
 8008996:	0159      	lsls	r1, r3, #5
 8008998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800899c:	0150      	lsls	r0, r2, #5
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4621      	mov	r1, r4
 80089a4:	1a51      	subs	r1, r2, r1
 80089a6:	6439      	str	r1, [r7, #64]	; 0x40
 80089a8:	4629      	mov	r1, r5
 80089aa:	eb63 0301 	sbc.w	r3, r3, r1
 80089ae:	647b      	str	r3, [r7, #68]	; 0x44
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80089bc:	4649      	mov	r1, r9
 80089be:	018b      	lsls	r3, r1, #6
 80089c0:	4641      	mov	r1, r8
 80089c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089c6:	4641      	mov	r1, r8
 80089c8:	018a      	lsls	r2, r1, #6
 80089ca:	4641      	mov	r1, r8
 80089cc:	1a51      	subs	r1, r2, r1
 80089ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80089d0:	4649      	mov	r1, r9
 80089d2:	eb63 0301 	sbc.w	r3, r3, r1
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80089e4:	4649      	mov	r1, r9
 80089e6:	00cb      	lsls	r3, r1, #3
 80089e8:	4641      	mov	r1, r8
 80089ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ee:	4641      	mov	r1, r8
 80089f0:	00ca      	lsls	r2, r1, #3
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	4622      	mov	r2, r4
 80089fa:	189b      	adds	r3, r3, r2
 80089fc:	633b      	str	r3, [r7, #48]	; 0x30
 80089fe:	462b      	mov	r3, r5
 8008a00:	460a      	mov	r2, r1
 8008a02:	eb42 0303 	adc.w	r3, r2, r3
 8008a06:	637b      	str	r3, [r7, #52]	; 0x34
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a14:	4629      	mov	r1, r5
 8008a16:	024b      	lsls	r3, r1, #9
 8008a18:	4621      	mov	r1, r4
 8008a1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008a1e:	4621      	mov	r1, r4
 8008a20:	024a      	lsls	r2, r1, #9
 8008a22:	4610      	mov	r0, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008a38:	f7f8 f946 	bl	8000cc8 <__aeabi_uldivmod>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4613      	mov	r3, r2
 8008a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a46:	e067      	b.n	8008b18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a48:	4b75      	ldr	r3, [pc, #468]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	099b      	lsrs	r3, r3, #6
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a62:	2300      	movs	r3, #0
 8008a64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	f04f 0000 	mov.w	r0, #0
 8008a72:	f04f 0100 	mov.w	r1, #0
 8008a76:	0159      	lsls	r1, r3, #5
 8008a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a7c:	0150      	lsls	r0, r2, #5
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4621      	mov	r1, r4
 8008a84:	1a51      	subs	r1, r2, r1
 8008a86:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a88:	4629      	mov	r1, r5
 8008a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a90:	f04f 0200 	mov.w	r2, #0
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	018b      	lsls	r3, r1, #6
 8008aa0:	4641      	mov	r1, r8
 8008aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008aa6:	4641      	mov	r1, r8
 8008aa8:	018a      	lsls	r2, r1, #6
 8008aaa:	4641      	mov	r1, r8
 8008aac:	ebb2 0a01 	subs.w	sl, r2, r1
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ab6:	f04f 0200 	mov.w	r2, #0
 8008aba:	f04f 0300 	mov.w	r3, #0
 8008abe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ac2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ac6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aca:	4692      	mov	sl, r2
 8008acc:	469b      	mov	fp, r3
 8008ace:	4623      	mov	r3, r4
 8008ad0:	eb1a 0303 	adds.w	r3, sl, r3
 8008ad4:	623b      	str	r3, [r7, #32]
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008aea:	4629      	mov	r1, r5
 8008aec:	028b      	lsls	r3, r1, #10
 8008aee:	4621      	mov	r1, r4
 8008af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008af4:	4621      	mov	r1, r4
 8008af6:	028a      	lsls	r2, r1, #10
 8008af8:	4610      	mov	r0, r2
 8008afa:	4619      	mov	r1, r3
 8008afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b00:	2200      	movs	r2, #0
 8008b02:	673b      	str	r3, [r7, #112]	; 0x70
 8008b04:	677a      	str	r2, [r7, #116]	; 0x74
 8008b06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008b0a:	f7f8 f8dd 	bl	8000cc8 <__aeabi_uldivmod>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4613      	mov	r3, r2
 8008b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b18:	4b41      	ldr	r3, [pc, #260]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	3301      	adds	r3, #1
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008b3a:	e0eb      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b3c:	4b38      	ldr	r3, [pc, #224]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b48:	4b35      	ldr	r3, [pc, #212]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d06b      	beq.n	8008c2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b54:	4b32      	ldr	r3, [pc, #200]	; (8008c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	099b      	lsrs	r3, r3, #6
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b66:	663b      	str	r3, [r7, #96]	; 0x60
 8008b68:	2300      	movs	r3, #0
 8008b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8008b6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008b70:	4622      	mov	r2, r4
 8008b72:	462b      	mov	r3, r5
 8008b74:	f04f 0000 	mov.w	r0, #0
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	0159      	lsls	r1, r3, #5
 8008b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b82:	0150      	lsls	r0, r2, #5
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4621      	mov	r1, r4
 8008b8a:	1a51      	subs	r1, r2, r1
 8008b8c:	61b9      	str	r1, [r7, #24]
 8008b8e:	4629      	mov	r1, r5
 8008b90:	eb63 0301 	sbc.w	r3, r3, r1
 8008b94:	61fb      	str	r3, [r7, #28]
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008ba2:	4659      	mov	r1, fp
 8008ba4:	018b      	lsls	r3, r1, #6
 8008ba6:	4651      	mov	r1, sl
 8008ba8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bac:	4651      	mov	r1, sl
 8008bae:	018a      	lsls	r2, r1, #6
 8008bb0:	4651      	mov	r1, sl
 8008bb2:	ebb2 0801 	subs.w	r8, r2, r1
 8008bb6:	4659      	mov	r1, fp
 8008bb8:	eb63 0901 	sbc.w	r9, r3, r1
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bd0:	4690      	mov	r8, r2
 8008bd2:	4699      	mov	r9, r3
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	eb18 0303 	adds.w	r3, r8, r3
 8008bda:	613b      	str	r3, [r7, #16]
 8008bdc:	462b      	mov	r3, r5
 8008bde:	eb49 0303 	adc.w	r3, r9, r3
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	024b      	lsls	r3, r1, #9
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	024a      	lsls	r2, r1, #9
 8008bfe:	4610      	mov	r0, r2
 8008c00:	4619      	mov	r1, r3
 8008c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c06:	2200      	movs	r2, #0
 8008c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008c0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c10:	f7f8 f85a 	bl	8000cc8 <__aeabi_uldivmod>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4613      	mov	r3, r2
 8008c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c1e:	e065      	b.n	8008cec <HAL_RCC_GetSysClockFreq+0x420>
 8008c20:	40023800 	.word	0x40023800
 8008c24:	00f42400 	.word	0x00f42400
 8008c28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c2c:	4b3d      	ldr	r3, [pc, #244]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	099b      	lsrs	r3, r3, #6
 8008c32:	2200      	movs	r2, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	4611      	mov	r1, r2
 8008c38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008c3e:	2300      	movs	r3, #0
 8008c40:	657b      	str	r3, [r7, #84]	; 0x54
 8008c42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008c46:	4642      	mov	r2, r8
 8008c48:	464b      	mov	r3, r9
 8008c4a:	f04f 0000 	mov.w	r0, #0
 8008c4e:	f04f 0100 	mov.w	r1, #0
 8008c52:	0159      	lsls	r1, r3, #5
 8008c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c58:	0150      	lsls	r0, r2, #5
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4641      	mov	r1, r8
 8008c60:	1a51      	subs	r1, r2, r1
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	4649      	mov	r1, r9
 8008c66:	eb63 0301 	sbc.w	r3, r3, r1
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008c78:	4659      	mov	r1, fp
 8008c7a:	018b      	lsls	r3, r1, #6
 8008c7c:	4651      	mov	r1, sl
 8008c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c82:	4651      	mov	r1, sl
 8008c84:	018a      	lsls	r2, r1, #6
 8008c86:	4651      	mov	r1, sl
 8008c88:	1a54      	subs	r4, r2, r1
 8008c8a:	4659      	mov	r1, fp
 8008c8c:	eb63 0501 	sbc.w	r5, r3, r1
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	00eb      	lsls	r3, r5, #3
 8008c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c9e:	00e2      	lsls	r2, r4, #3
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	461d      	mov	r5, r3
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	18e3      	adds	r3, r4, r3
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	464b      	mov	r3, r9
 8008cac:	eb45 0303 	adc.w	r3, r5, r3
 8008cb0:	607b      	str	r3, [r7, #4]
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	f04f 0300 	mov.w	r3, #0
 8008cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	028b      	lsls	r3, r1, #10
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cc8:	4621      	mov	r1, r4
 8008cca:	028a      	lsls	r2, r1, #10
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008cda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008cde:	f7f7 fff3 	bl	8000cc8 <__aeabi_uldivmod>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	0f1b      	lsrs	r3, r3, #28
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d0a:	e003      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	37b8      	adds	r7, #184	; 0xb8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d22:	bf00      	nop
 8008d24:	40023800 	.word	0x40023800
 8008d28:	00f42400 	.word	0x00f42400

08008d2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e28d      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8083 	beq.w	8008e52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008d4c:	4b94      	ldr	r3, [pc, #592]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 030c 	and.w	r3, r3, #12
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d019      	beq.n	8008d8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d58:	4b91      	ldr	r3, [pc, #580]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d106      	bne.n	8008d72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d64:	4b8e      	ldr	r3, [pc, #568]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d70:	d00c      	beq.n	8008d8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d72:	4b8b      	ldr	r3, [pc, #556]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d7a:	2b0c      	cmp	r3, #12
 8008d7c:	d112      	bne.n	8008da4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d7e:	4b88      	ldr	r3, [pc, #544]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d8a:	d10b      	bne.n	8008da4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d8c:	4b84      	ldr	r3, [pc, #528]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d05b      	beq.n	8008e50 <HAL_RCC_OscConfig+0x124>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d157      	bne.n	8008e50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e25a      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dac:	d106      	bne.n	8008dbc <HAL_RCC_OscConfig+0x90>
 8008dae:	4b7c      	ldr	r3, [pc, #496]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a7b      	ldr	r2, [pc, #492]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	e01d      	b.n	8008df8 <HAL_RCC_OscConfig+0xcc>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dc4:	d10c      	bne.n	8008de0 <HAL_RCC_OscConfig+0xb4>
 8008dc6:	4b76      	ldr	r3, [pc, #472]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a75      	ldr	r2, [pc, #468]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	4b73      	ldr	r3, [pc, #460]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a72      	ldr	r2, [pc, #456]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	e00b      	b.n	8008df8 <HAL_RCC_OscConfig+0xcc>
 8008de0:	4b6f      	ldr	r3, [pc, #444]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a6e      	ldr	r2, [pc, #440]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	4b6c      	ldr	r3, [pc, #432]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a6b      	ldr	r2, [pc, #428]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d013      	beq.n	8008e28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e00:	f7fe f848 	bl	8006e94 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e08:	f7fe f844 	bl	8006e94 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b64      	cmp	r3, #100	; 0x64
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e21f      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e1a:	4b61      	ldr	r3, [pc, #388]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0f0      	beq.n	8008e08 <HAL_RCC_OscConfig+0xdc>
 8008e26:	e014      	b.n	8008e52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e28:	f7fe f834 	bl	8006e94 <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e30:	f7fe f830 	bl	8006e94 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b64      	cmp	r3, #100	; 0x64
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e20b      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e42:	4b57      	ldr	r3, [pc, #348]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1f0      	bne.n	8008e30 <HAL_RCC_OscConfig+0x104>
 8008e4e:	e000      	b.n	8008e52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d06f      	beq.n	8008f3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008e5e:	4b50      	ldr	r3, [pc, #320]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 030c 	and.w	r3, r3, #12
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d017      	beq.n	8008e9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e6a:	4b4d      	ldr	r3, [pc, #308]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008e72:	2b08      	cmp	r3, #8
 8008e74:	d105      	bne.n	8008e82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e76:	4b4a      	ldr	r3, [pc, #296]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e82:	4b47      	ldr	r3, [pc, #284]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e8a:	2b0c      	cmp	r3, #12
 8008e8c:	d11c      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e8e:	4b44      	ldr	r3, [pc, #272]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d116      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e9a:	4b41      	ldr	r3, [pc, #260]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x186>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d001      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e1d3      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eb2:	4b3b      	ldr	r3, [pc, #236]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4937      	ldr	r1, [pc, #220]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ec6:	e03a      	b.n	8008f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d020      	beq.n	8008f12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ed0:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <HAL_RCC_OscConfig+0x278>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed6:	f7fd ffdd 	bl	8006e94 <HAL_GetTick>
 8008eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ede:	f7fd ffd9 	bl	8006e94 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e1b4      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ef0:	4b2b      	ldr	r3, [pc, #172]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008efc:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	4925      	ldr	r1, [pc, #148]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	600b      	str	r3, [r1, #0]
 8008f10:	e015      	b.n	8008f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <HAL_RCC_OscConfig+0x278>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f18:	f7fd ffbc 	bl	8006e94 <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f20:	f7fd ffb8 	bl	8006e94 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e193      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f32:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f0      	bne.n	8008f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d036      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d016      	beq.n	8008f80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f52:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <HAL_RCC_OscConfig+0x27c>)
 8008f54:	2201      	movs	r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f58:	f7fd ff9c 	bl	8006e94 <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f60:	f7fd ff98 	bl	8006e94 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e173      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f72:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <HAL_RCC_OscConfig+0x274>)
 8008f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f0      	beq.n	8008f60 <HAL_RCC_OscConfig+0x234>
 8008f7e:	e01b      	b.n	8008fb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f80:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <HAL_RCC_OscConfig+0x27c>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f86:	f7fd ff85 	bl	8006e94 <HAL_GetTick>
 8008f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f8c:	e00e      	b.n	8008fac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f8e:	f7fd ff81 	bl	8006e94 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d907      	bls.n	8008fac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e15c      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	42470000 	.word	0x42470000
 8008fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fac:	4b8a      	ldr	r3, [pc, #552]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8008fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1ea      	bne.n	8008f8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8097 	beq.w	80090f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fca:	4b83      	ldr	r3, [pc, #524]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10f      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]
 8008fda:	4b7f      	ldr	r3, [pc, #508]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	4a7e      	ldr	r2, [pc, #504]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8008fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fe6:	4b7c      	ldr	r3, [pc, #496]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fee:	60bb      	str	r3, [r7, #8]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ff6:	4b79      	ldr	r3, [pc, #484]	; (80091dc <HAL_RCC_OscConfig+0x4b0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d118      	bne.n	8009034 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009002:	4b76      	ldr	r3, [pc, #472]	; (80091dc <HAL_RCC_OscConfig+0x4b0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a75      	ldr	r2, [pc, #468]	; (80091dc <HAL_RCC_OscConfig+0x4b0>)
 8009008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800900c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800900e:	f7fd ff41 	bl	8006e94 <HAL_GetTick>
 8009012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009014:	e008      	b.n	8009028 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009016:	f7fd ff3d 	bl	8006e94 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d901      	bls.n	8009028 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e118      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009028:	4b6c      	ldr	r3, [pc, #432]	; (80091dc <HAL_RCC_OscConfig+0x4b0>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0f0      	beq.n	8009016 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d106      	bne.n	800904a <HAL_RCC_OscConfig+0x31e>
 800903c:	4b66      	ldr	r3, [pc, #408]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 800903e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009040:	4a65      	ldr	r2, [pc, #404]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	6713      	str	r3, [r2, #112]	; 0x70
 8009048:	e01c      	b.n	8009084 <HAL_RCC_OscConfig+0x358>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	2b05      	cmp	r3, #5
 8009050:	d10c      	bne.n	800906c <HAL_RCC_OscConfig+0x340>
 8009052:	4b61      	ldr	r3, [pc, #388]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009056:	4a60      	ldr	r2, [pc, #384]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009058:	f043 0304 	orr.w	r3, r3, #4
 800905c:	6713      	str	r3, [r2, #112]	; 0x70
 800905e:	4b5e      	ldr	r3, [pc, #376]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009062:	4a5d      	ldr	r2, [pc, #372]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	6713      	str	r3, [r2, #112]	; 0x70
 800906a:	e00b      	b.n	8009084 <HAL_RCC_OscConfig+0x358>
 800906c:	4b5a      	ldr	r3, [pc, #360]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 800906e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009070:	4a59      	ldr	r2, [pc, #356]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	6713      	str	r3, [r2, #112]	; 0x70
 8009078:	4b57      	ldr	r3, [pc, #348]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	4a56      	ldr	r2, [pc, #344]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 800907e:	f023 0304 	bic.w	r3, r3, #4
 8009082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d015      	beq.n	80090b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800908c:	f7fd ff02 	bl	8006e94 <HAL_GetTick>
 8009090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009092:	e00a      	b.n	80090aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009094:	f7fd fefe 	bl	8006e94 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e0d7      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090aa:	4b4b      	ldr	r3, [pc, #300]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0ee      	beq.n	8009094 <HAL_RCC_OscConfig+0x368>
 80090b6:	e014      	b.n	80090e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b8:	f7fd feec 	bl	8006e94 <HAL_GetTick>
 80090bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090be:	e00a      	b.n	80090d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090c0:	f7fd fee8 	bl	8006e94 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e0c1      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090d6:	4b40      	ldr	r3, [pc, #256]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1ee      	bne.n	80090c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d105      	bne.n	80090f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090e8:	4b3b      	ldr	r3, [pc, #236]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	4a3a      	ldr	r2, [pc, #232]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 80090ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80ad 	beq.w	8009258 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090fe:	4b36      	ldr	r3, [pc, #216]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 030c 	and.w	r3, r3, #12
 8009106:	2b08      	cmp	r3, #8
 8009108:	d060      	beq.n	80091cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d145      	bne.n	800919e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009112:	4b33      	ldr	r3, [pc, #204]	; (80091e0 <HAL_RCC_OscConfig+0x4b4>)
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009118:	f7fd febc 	bl	8006e94 <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009120:	f7fd feb8 	bl	8006e94 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e093      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f0      	bne.n	8009120 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69da      	ldr	r2, [r3, #28]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	019b      	lsls	r3, r3, #6
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	3b01      	subs	r3, #1
 8009158:	041b      	lsls	r3, r3, #16
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	061b      	lsls	r3, r3, #24
 8009162:	431a      	orrs	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	071b      	lsls	r3, r3, #28
 800916a:	491b      	ldr	r1, [pc, #108]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 800916c:	4313      	orrs	r3, r2
 800916e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009170:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <HAL_RCC_OscConfig+0x4b4>)
 8009172:	2201      	movs	r2, #1
 8009174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009176:	f7fd fe8d 	bl	8006e94 <HAL_GetTick>
 800917a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800917c:	e008      	b.n	8009190 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800917e:	f7fd fe89 	bl	8006e94 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	2b02      	cmp	r3, #2
 800918a:	d901      	bls.n	8009190 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e064      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0f0      	beq.n	800917e <HAL_RCC_OscConfig+0x452>
 800919c:	e05c      	b.n	8009258 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800919e:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <HAL_RCC_OscConfig+0x4b4>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a4:	f7fd fe76 	bl	8006e94 <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091ac:	f7fd fe72 	bl	8006e94 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e04d      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091be:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <HAL_RCC_OscConfig+0x4ac>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0x480>
 80091ca:	e045      	b.n	8009258 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d107      	bne.n	80091e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e040      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
 80091d8:	40023800 	.word	0x40023800
 80091dc:	40007000 	.word	0x40007000
 80091e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80091e4:	4b1f      	ldr	r3, [pc, #124]	; (8009264 <HAL_RCC_OscConfig+0x538>)
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d030      	beq.n	8009254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d129      	bne.n	8009254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800920a:	429a      	cmp	r2, r3
 800920c:	d122      	bne.n	8009254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009214:	4013      	ands	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800921a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800921c:	4293      	cmp	r3, r2
 800921e:	d119      	bne.n	8009254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	085b      	lsrs	r3, r3, #1
 800922c:	3b01      	subs	r3, #1
 800922e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009230:	429a      	cmp	r2, r3
 8009232:	d10f      	bne.n	8009254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009240:	429a      	cmp	r2, r3
 8009242:	d107      	bne.n	8009254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009250:	429a      	cmp	r2, r3
 8009252:	d001      	beq.n	8009258 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	40023800 	.word	0x40023800

08009268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e07b      	b.n	8009372 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b00      	cmp	r3, #0
 8009280:	d108      	bne.n	8009294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800928a:	d009      	beq.n	80092a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	61da      	str	r2, [r3, #28]
 8009292:	e005      	b.n	80092a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fc fe86 	bl	8005fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	431a      	orrs	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009324:	ea42 0103 	orr.w	r1, r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	0c1b      	lsrs	r3, r3, #16
 800933e:	f003 0104 	and.w	r1, r3, #4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	f003 0210 	and.w	r2, r3, #16
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b08c      	sub	sp, #48	; 0x30
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009388:	2301      	movs	r3, #1
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_SPI_TransmitReceive+0x26>
 800939c:	2302      	movs	r3, #2
 800939e:	e18a      	b.n	80096b6 <HAL_SPI_TransmitReceive+0x33c>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093a8:	f7fd fd74 	bl	8006e94 <HAL_GetTick>
 80093ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80093be:	887b      	ldrh	r3, [r7, #2]
 80093c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d00f      	beq.n	80093ea <HAL_SPI_TransmitReceive+0x70>
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093d0:	d107      	bne.n	80093e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d103      	bne.n	80093e2 <HAL_SPI_TransmitReceive+0x68>
 80093da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d003      	beq.n	80093ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80093e2:	2302      	movs	r3, #2
 80093e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80093e8:	e15b      	b.n	80096a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <HAL_SPI_TransmitReceive+0x82>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <HAL_SPI_TransmitReceive+0x82>
 80093f6:	887b      	ldrh	r3, [r7, #2]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009402:	e14e      	b.n	80096a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b04      	cmp	r3, #4
 800940e:	d003      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2205      	movs	r2, #5
 8009414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	887a      	ldrh	r2, [r7, #2]
 8009428:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	887a      	ldrh	r2, [r7, #2]
 800942e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	887a      	ldrh	r2, [r7, #2]
 800943a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	887a      	ldrh	r2, [r7, #2]
 8009440:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b40      	cmp	r3, #64	; 0x40
 800945a:	d007      	beq.n	800946c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800946a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009474:	d178      	bne.n	8009568 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <HAL_SPI_TransmitReceive+0x10a>
 800947e:	8b7b      	ldrh	r3, [r7, #26]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d166      	bne.n	8009552 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	881a      	ldrh	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009494:	1c9a      	adds	r2, r3, #2
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800949e:	b29b      	uxth	r3, r3
 80094a0:	3b01      	subs	r3, #1
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094a8:	e053      	b.n	8009552 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d11b      	bne.n	80094f0 <HAL_SPI_TransmitReceive+0x176>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d016      	beq.n	80094f0 <HAL_SPI_TransmitReceive+0x176>
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d113      	bne.n	80094f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094cc:	881a      	ldrh	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d8:	1c9a      	adds	r2, r3, #2
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d119      	bne.n	8009532 <HAL_SPI_TransmitReceive+0x1b8>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009502:	b29b      	uxth	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d014      	beq.n	8009532 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	b292      	uxth	r2, r2
 8009514:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	1c9a      	adds	r2, r3, #2
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800952e:	2301      	movs	r3, #1
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009532:	f7fd fcaf 	bl	8006e94 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800953e:	429a      	cmp	r2, r3
 8009540:	d807      	bhi.n	8009552 <HAL_SPI_TransmitReceive+0x1d8>
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009548:	d003      	beq.n	8009552 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009550:	e0a7      	b.n	80096a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009556:	b29b      	uxth	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1a6      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x130>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009560:	b29b      	uxth	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1a1      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x130>
 8009566:	e07c      	b.n	8009662 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <HAL_SPI_TransmitReceive+0x1fc>
 8009570:	8b7b      	ldrh	r3, [r7, #26]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d16b      	bne.n	800964e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	7812      	ldrb	r2, [r2, #0]
 8009582:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800959c:	e057      	b.n	800964e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d11c      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x26c>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d017      	beq.n	80095e6 <HAL_SPI_TransmitReceive+0x26c>
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d114      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	330c      	adds	r3, #12
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	b29a      	uxth	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d119      	bne.n	8009628 <HAL_SPI_TransmitReceive+0x2ae>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d014      	beq.n	8009628 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961a:	b29b      	uxth	r3, r3
 800961c:	3b01      	subs	r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009624:	2301      	movs	r3, #1
 8009626:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009628:	f7fd fc34 	bl	8006e94 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009634:	429a      	cmp	r2, r3
 8009636:	d803      	bhi.n	8009640 <HAL_SPI_TransmitReceive+0x2c6>
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800963e:	d102      	bne.n	8009646 <HAL_SPI_TransmitReceive+0x2cc>
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	2b00      	cmp	r3, #0
 8009644:	d103      	bne.n	800964e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800964c:	e029      	b.n	80096a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009652:	b29b      	uxth	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1a2      	bne.n	800959e <HAL_SPI_TransmitReceive+0x224>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800965c:	b29b      	uxth	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d19d      	bne.n	800959e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 f8b2 	bl	80097d0 <SPI_EndRxTxTransaction>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d006      	beq.n	8009680 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800967e:	e010      	b.n	80096a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10b      	bne.n	80096a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	e000      	b.n	80096a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80096a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3730      	adds	r7, #48	; 0x30
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	4613      	mov	r3, r2
 80096ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096d0:	f7fd fbe0 	bl	8006e94 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	1a9b      	subs	r3, r3, r2
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	4413      	add	r3, r2
 80096de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096e0:	f7fd fbd8 	bl	8006e94 <HAL_GetTick>
 80096e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096e6:	4b39      	ldr	r3, [pc, #228]	; (80097cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	015b      	lsls	r3, r3, #5
 80096ec:	0d1b      	lsrs	r3, r3, #20
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	fb02 f303 	mul.w	r3, r2, r3
 80096f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096f6:	e054      	b.n	80097a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096fe:	d050      	beq.n	80097a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009700:	f7fd fbc8 	bl	8006e94 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	429a      	cmp	r2, r3
 800970e:	d902      	bls.n	8009716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d13d      	bne.n	8009792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800972e:	d111      	bne.n	8009754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009738:	d004      	beq.n	8009744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009742:	d107      	bne.n	8009754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800975c:	d10f      	bne.n	800977e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800977c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e017      	b.n	80097c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	3b01      	subs	r3, #1
 80097a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	4013      	ands	r3, r2
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	bf0c      	ite	eq
 80097b2:	2301      	moveq	r3, #1
 80097b4:	2300      	movne	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d19b      	bne.n	80096f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000040 	.word	0x20000040

080097d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80097dc:	4b1b      	ldr	r3, [pc, #108]	; (800984c <SPI_EndRxTxTransaction+0x7c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1b      	ldr	r2, [pc, #108]	; (8009850 <SPI_EndRxTxTransaction+0x80>)
 80097e2:	fba2 2303 	umull	r2, r3, r2, r3
 80097e6:	0d5b      	lsrs	r3, r3, #21
 80097e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097ec:	fb02 f303 	mul.w	r3, r2, r3
 80097f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097fa:	d112      	bne.n	8009822 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2200      	movs	r2, #0
 8009804:	2180      	movs	r1, #128	; 0x80
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff ff5a 	bl	80096c0 <SPI_WaitFlagStateUntilTimeout>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d016      	beq.n	8009840 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009816:	f043 0220 	orr.w	r2, r3, #32
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e00f      	b.n	8009842 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00a      	beq.n	800983e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	3b01      	subs	r3, #1
 800982c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009838:	2b80      	cmp	r3, #128	; 0x80
 800983a:	d0f2      	beq.n	8009822 <SPI_EndRxTxTransaction+0x52>
 800983c:	e000      	b.n	8009840 <SPI_EndRxTxTransaction+0x70>
        break;
 800983e:	bf00      	nop
  }

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000040 	.word	0x20000040
 8009850:	165e9f81 	.word	0x165e9f81

08009854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e041      	b.n	80098ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d106      	bne.n	8009880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7fd f936 	bl	8006aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	3304      	adds	r3, #4
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f000 fcec 	bl	800a270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b01      	cmp	r3, #1
 8009906:	d001      	beq.n	800990c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e046      	b.n	800999a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a23      	ldr	r2, [pc, #140]	; (80099a8 <HAL_TIM_Base_Start+0xb4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d022      	beq.n	8009964 <HAL_TIM_Base_Start+0x70>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009926:	d01d      	beq.n	8009964 <HAL_TIM_Base_Start+0x70>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a1f      	ldr	r2, [pc, #124]	; (80099ac <HAL_TIM_Base_Start+0xb8>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d018      	beq.n	8009964 <HAL_TIM_Base_Start+0x70>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a1e      	ldr	r2, [pc, #120]	; (80099b0 <HAL_TIM_Base_Start+0xbc>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d013      	beq.n	8009964 <HAL_TIM_Base_Start+0x70>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a1c      	ldr	r2, [pc, #112]	; (80099b4 <HAL_TIM_Base_Start+0xc0>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00e      	beq.n	8009964 <HAL_TIM_Base_Start+0x70>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a1b      	ldr	r2, [pc, #108]	; (80099b8 <HAL_TIM_Base_Start+0xc4>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d009      	beq.n	8009964 <HAL_TIM_Base_Start+0x70>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a19      	ldr	r2, [pc, #100]	; (80099bc <HAL_TIM_Base_Start+0xc8>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d004      	beq.n	8009964 <HAL_TIM_Base_Start+0x70>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a18      	ldr	r2, [pc, #96]	; (80099c0 <HAL_TIM_Base_Start+0xcc>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d111      	bne.n	8009988 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b06      	cmp	r3, #6
 8009974:	d010      	beq.n	8009998 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f042 0201 	orr.w	r2, r2, #1
 8009984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009986:	e007      	b.n	8009998 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	40010000 	.word	0x40010000
 80099ac:	40000400 	.word	0x40000400
 80099b0:	40000800 	.word	0x40000800
 80099b4:	40000c00 	.word	0x40000c00
 80099b8:	40010400 	.word	0x40010400
 80099bc:	40014000 	.word	0x40014000
 80099c0:	40001800 	.word	0x40001800

080099c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d001      	beq.n	80099dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e04e      	b.n	8009a7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a23      	ldr	r2, [pc, #140]	; (8009a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d022      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a06:	d01d      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d018      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d013      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00e      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d009      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a19      	ldr	r2, [pc, #100]	; (8009a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_TIM_Base_Start_IT+0x80>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a18      	ldr	r2, [pc, #96]	; (8009aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d111      	bne.n	8009a68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b06      	cmp	r3, #6
 8009a54:	d010      	beq.n	8009a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f042 0201 	orr.w	r2, r2, #1
 8009a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a66:	e007      	b.n	8009a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f042 0201 	orr.w	r2, r2, #1
 8009a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	40010000 	.word	0x40010000
 8009a8c:	40000400 	.word	0x40000400
 8009a90:	40000800 	.word	0x40000800
 8009a94:	40000c00 	.word	0x40000c00
 8009a98:	40010400 	.word	0x40010400
 8009a9c:	40014000 	.word	0x40014000
 8009aa0:	40001800 	.word	0x40001800

08009aa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e041      	b.n	8009b3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f839 	bl	8009b42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f000 fbc4 	bl	800a270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b083      	sub	sp, #12
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b4a:	bf00      	nop
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
	...

08009b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <HAL_TIM_PWM_Start+0x24>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	bf14      	ite	ne
 8009b74:	2301      	movne	r3, #1
 8009b76:	2300      	moveq	r3, #0
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	e022      	b.n	8009bc2 <HAL_TIM_PWM_Start+0x6a>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d109      	bne.n	8009b96 <HAL_TIM_PWM_Start+0x3e>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	bf14      	ite	ne
 8009b8e:	2301      	movne	r3, #1
 8009b90:	2300      	moveq	r3, #0
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	e015      	b.n	8009bc2 <HAL_TIM_PWM_Start+0x6a>
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	d109      	bne.n	8009bb0 <HAL_TIM_PWM_Start+0x58>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	bf14      	ite	ne
 8009ba8:	2301      	movne	r3, #1
 8009baa:	2300      	moveq	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	e008      	b.n	8009bc2 <HAL_TIM_PWM_Start+0x6a>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	bf14      	ite	ne
 8009bbc:	2301      	movne	r3, #1
 8009bbe:	2300      	moveq	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e07c      	b.n	8009cc4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d104      	bne.n	8009bda <HAL_TIM_PWM_Start+0x82>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd8:	e013      	b.n	8009c02 <HAL_TIM_PWM_Start+0xaa>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d104      	bne.n	8009bea <HAL_TIM_PWM_Start+0x92>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009be8:	e00b      	b.n	8009c02 <HAL_TIM_PWM_Start+0xaa>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d104      	bne.n	8009bfa <HAL_TIM_PWM_Start+0xa2>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bf8:	e003      	b.n	8009c02 <HAL_TIM_PWM_Start+0xaa>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2201      	movs	r2, #1
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fe1a 	bl	800a844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a2d      	ldr	r2, [pc, #180]	; (8009ccc <HAL_TIM_PWM_Start+0x174>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d004      	beq.n	8009c24 <HAL_TIM_PWM_Start+0xcc>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a2c      	ldr	r2, [pc, #176]	; (8009cd0 <HAL_TIM_PWM_Start+0x178>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d101      	bne.n	8009c28 <HAL_TIM_PWM_Start+0xd0>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <HAL_TIM_PWM_Start+0xd2>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d007      	beq.n	8009c3e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a22      	ldr	r2, [pc, #136]	; (8009ccc <HAL_TIM_PWM_Start+0x174>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d022      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x136>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c50:	d01d      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x136>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a1f      	ldr	r2, [pc, #124]	; (8009cd4 <HAL_TIM_PWM_Start+0x17c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d018      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x136>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a1d      	ldr	r2, [pc, #116]	; (8009cd8 <HAL_TIM_PWM_Start+0x180>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d013      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x136>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a1c      	ldr	r2, [pc, #112]	; (8009cdc <HAL_TIM_PWM_Start+0x184>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d00e      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x136>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a16      	ldr	r2, [pc, #88]	; (8009cd0 <HAL_TIM_PWM_Start+0x178>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d009      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x136>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a18      	ldr	r2, [pc, #96]	; (8009ce0 <HAL_TIM_PWM_Start+0x188>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d004      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x136>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a16      	ldr	r2, [pc, #88]	; (8009ce4 <HAL_TIM_PWM_Start+0x18c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d111      	bne.n	8009cb2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f003 0307 	and.w	r3, r3, #7
 8009c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b06      	cmp	r3, #6
 8009c9e:	d010      	beq.n	8009cc2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0201 	orr.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb0:	e007      	b.n	8009cc2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0201 	orr.w	r2, r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40010000 	.word	0x40010000
 8009cd0:	40010400 	.word	0x40010400
 8009cd4:	40000400 	.word	0x40000400
 8009cd8:	40000800 	.word	0x40000800
 8009cdc:	40000c00 	.word	0x40000c00
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	40001800 	.word	0x40001800

08009ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d122      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f003 0302 	and.w	r3, r3, #2
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d11b      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f06f 0202 	mvn.w	r2, #2
 8009d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa81 	bl	800a232 <HAL_TIM_IC_CaptureCallback>
 8009d30:	e005      	b.n	8009d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa73 	bl	800a21e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fa84 	bl	800a246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	d122      	bne.n	8009d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d11b      	bne.n	8009d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0204 	mvn.w	r2, #4
 8009d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2202      	movs	r2, #2
 8009d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa57 	bl	800a232 <HAL_TIM_IC_CaptureCallback>
 8009d84:	e005      	b.n	8009d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa49 	bl	800a21e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fa5a 	bl	800a246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0308 	and.w	r3, r3, #8
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d122      	bne.n	8009dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f003 0308 	and.w	r3, r3, #8
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d11b      	bne.n	8009dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0208 	mvn.w	r2, #8
 8009dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa2d 	bl	800a232 <HAL_TIM_IC_CaptureCallback>
 8009dd8:	e005      	b.n	8009de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa1f 	bl	800a21e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fa30 	bl	800a246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b10      	cmp	r3, #16
 8009df8:	d122      	bne.n	8009e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b10      	cmp	r3, #16
 8009e06:	d11b      	bne.n	8009e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f06f 0210 	mvn.w	r2, #16
 8009e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2208      	movs	r2, #8
 8009e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	69db      	ldr	r3, [r3, #28]
 8009e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa03 	bl	800a232 <HAL_TIM_IC_CaptureCallback>
 8009e2c:	e005      	b.n	8009e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f9f5 	bl	800a21e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fa06 	bl	800a246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d10e      	bne.n	8009e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d107      	bne.n	8009e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f06f 0201 	mvn.w	r2, #1
 8009e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9cf 	bl	800a20a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e76:	2b80      	cmp	r3, #128	; 0x80
 8009e78:	d10e      	bne.n	8009e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e84:	2b80      	cmp	r3, #128	; 0x80
 8009e86:	d107      	bne.n	8009e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fdd4 	bl	800aa40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea2:	2b40      	cmp	r3, #64	; 0x40
 8009ea4:	d10e      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d107      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f9cb 	bl	800a25a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	f003 0320 	and.w	r3, r3, #32
 8009ece:	2b20      	cmp	r3, #32
 8009ed0:	d10e      	bne.n	8009ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	d107      	bne.n	8009ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f06f 0220 	mvn.w	r2, #32
 8009ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fd9e 	bl	800aa2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d101      	bne.n	8009f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f12:	2302      	movs	r3, #2
 8009f14:	e0ae      	b.n	800a074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b0c      	cmp	r3, #12
 8009f22:	f200 809f 	bhi.w	800a064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f61 	.word	0x08009f61
 8009f30:	0800a065 	.word	0x0800a065
 8009f34:	0800a065 	.word	0x0800a065
 8009f38:	0800a065 	.word	0x0800a065
 8009f3c:	08009fa1 	.word	0x08009fa1
 8009f40:	0800a065 	.word	0x0800a065
 8009f44:	0800a065 	.word	0x0800a065
 8009f48:	0800a065 	.word	0x0800a065
 8009f4c:	08009fe3 	.word	0x08009fe3
 8009f50:	0800a065 	.word	0x0800a065
 8009f54:	0800a065 	.word	0x0800a065
 8009f58:	0800a065 	.word	0x0800a065
 8009f5c:	0800a023 	.word	0x0800a023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68b9      	ldr	r1, [r7, #8]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fa22 	bl	800a3b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	699a      	ldr	r2, [r3, #24]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0208 	orr.w	r2, r2, #8
 8009f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0204 	bic.w	r2, r2, #4
 8009f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6999      	ldr	r1, [r3, #24]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	619a      	str	r2, [r3, #24]
      break;
 8009f9e:	e064      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fa72 	bl	800a490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699a      	ldr	r2, [r3, #24]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6999      	ldr	r1, [r3, #24]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	021a      	lsls	r2, r3, #8
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	619a      	str	r2, [r3, #24]
      break;
 8009fe0:	e043      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 fac7 	bl	800a57c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69da      	ldr	r2, [r3, #28]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0208 	orr.w	r2, r2, #8
 8009ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0204 	bic.w	r2, r2, #4
 800a00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69d9      	ldr	r1, [r3, #28]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	691a      	ldr	r2, [r3, #16]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	61da      	str	r2, [r3, #28]
      break;
 800a020:	e023      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fb1b 	bl	800a664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69da      	ldr	r2, [r3, #28]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69da      	ldr	r2, [r3, #28]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69d9      	ldr	r1, [r3, #28]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	021a      	lsls	r2, r3, #8
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	61da      	str	r2, [r3, #28]
      break;
 800a062:	e002      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	75fb      	strb	r3, [r7, #23]
      break;
 800a068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a090:	2b01      	cmp	r3, #1
 800a092:	d101      	bne.n	800a098 <HAL_TIM_ConfigClockSource+0x1c>
 800a094:	2302      	movs	r3, #2
 800a096:	e0b4      	b.n	800a202 <HAL_TIM_ConfigClockSource+0x186>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d0:	d03e      	beq.n	800a150 <HAL_TIM_ConfigClockSource+0xd4>
 800a0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d6:	f200 8087 	bhi.w	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0de:	f000 8086 	beq.w	800a1ee <HAL_TIM_ConfigClockSource+0x172>
 800a0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e6:	d87f      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0e8:	2b70      	cmp	r3, #112	; 0x70
 800a0ea:	d01a      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0xa6>
 800a0ec:	2b70      	cmp	r3, #112	; 0x70
 800a0ee:	d87b      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f0:	2b60      	cmp	r3, #96	; 0x60
 800a0f2:	d050      	beq.n	800a196 <HAL_TIM_ConfigClockSource+0x11a>
 800a0f4:	2b60      	cmp	r3, #96	; 0x60
 800a0f6:	d877      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f8:	2b50      	cmp	r3, #80	; 0x50
 800a0fa:	d03c      	beq.n	800a176 <HAL_TIM_ConfigClockSource+0xfa>
 800a0fc:	2b50      	cmp	r3, #80	; 0x50
 800a0fe:	d873      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a100:	2b40      	cmp	r3, #64	; 0x40
 800a102:	d058      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x13a>
 800a104:	2b40      	cmp	r3, #64	; 0x40
 800a106:	d86f      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a108:	2b30      	cmp	r3, #48	; 0x30
 800a10a:	d064      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a10c:	2b30      	cmp	r3, #48	; 0x30
 800a10e:	d86b      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a110:	2b20      	cmp	r3, #32
 800a112:	d060      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a114:	2b20      	cmp	r3, #32
 800a116:	d867      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d05c      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a11c:	2b10      	cmp	r3, #16
 800a11e:	d05a      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a120:	e062      	b.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6899      	ldr	r1, [r3, #8]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f000 fb67 	bl	800a804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	609a      	str	r2, [r3, #8]
      break;
 800a14e:	e04f      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6818      	ldr	r0, [r3, #0]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	6899      	ldr	r1, [r3, #8]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f000 fb50 	bl	800a804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a172:	609a      	str	r2, [r3, #8]
      break;
 800a174:	e03c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	6859      	ldr	r1, [r3, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	461a      	mov	r2, r3
 800a184:	f000 fac4 	bl	800a710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2150      	movs	r1, #80	; 0x50
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fb1d 	bl	800a7ce <TIM_ITRx_SetConfig>
      break;
 800a194:	e02c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6859      	ldr	r1, [r3, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f000 fae3 	bl	800a76e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2160      	movs	r1, #96	; 0x60
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fb0d 	bl	800a7ce <TIM_ITRx_SetConfig>
      break;
 800a1b4:	e01c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6859      	ldr	r1, [r3, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f000 faa4 	bl	800a710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2140      	movs	r1, #64	; 0x40
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fafd 	bl	800a7ce <TIM_ITRx_SetConfig>
      break;
 800a1d4:	e00c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f000 faf4 	bl	800a7ce <TIM_ITRx_SetConfig>
      break;
 800a1e6:	e003      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ec:	e000      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a1ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a226:	bf00      	nop
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a246:	b480      	push	{r7}
 800a248:	b083      	sub	sp, #12
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
	...

0800a270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a40      	ldr	r2, [pc, #256]	; (800a384 <TIM_Base_SetConfig+0x114>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d013      	beq.n	800a2b0 <TIM_Base_SetConfig+0x40>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a28e:	d00f      	beq.n	800a2b0 <TIM_Base_SetConfig+0x40>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a3d      	ldr	r2, [pc, #244]	; (800a388 <TIM_Base_SetConfig+0x118>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d00b      	beq.n	800a2b0 <TIM_Base_SetConfig+0x40>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a3c      	ldr	r2, [pc, #240]	; (800a38c <TIM_Base_SetConfig+0x11c>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d007      	beq.n	800a2b0 <TIM_Base_SetConfig+0x40>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a3b      	ldr	r2, [pc, #236]	; (800a390 <TIM_Base_SetConfig+0x120>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d003      	beq.n	800a2b0 <TIM_Base_SetConfig+0x40>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a3a      	ldr	r2, [pc, #232]	; (800a394 <TIM_Base_SetConfig+0x124>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d108      	bne.n	800a2c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a2f      	ldr	r2, [pc, #188]	; (800a384 <TIM_Base_SetConfig+0x114>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d02b      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d0:	d027      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a2c      	ldr	r2, [pc, #176]	; (800a388 <TIM_Base_SetConfig+0x118>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d023      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a2b      	ldr	r2, [pc, #172]	; (800a38c <TIM_Base_SetConfig+0x11c>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d01f      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a2a      	ldr	r2, [pc, #168]	; (800a390 <TIM_Base_SetConfig+0x120>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01b      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a29      	ldr	r2, [pc, #164]	; (800a394 <TIM_Base_SetConfig+0x124>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d017      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a28      	ldr	r2, [pc, #160]	; (800a398 <TIM_Base_SetConfig+0x128>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d013      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a27      	ldr	r2, [pc, #156]	; (800a39c <TIM_Base_SetConfig+0x12c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00f      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a26      	ldr	r2, [pc, #152]	; (800a3a0 <TIM_Base_SetConfig+0x130>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00b      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a25      	ldr	r2, [pc, #148]	; (800a3a4 <TIM_Base_SetConfig+0x134>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d007      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a24      	ldr	r2, [pc, #144]	; (800a3a8 <TIM_Base_SetConfig+0x138>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d003      	beq.n	800a322 <TIM_Base_SetConfig+0xb2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a23      	ldr	r2, [pc, #140]	; (800a3ac <TIM_Base_SetConfig+0x13c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d108      	bne.n	800a334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a0a      	ldr	r2, [pc, #40]	; (800a384 <TIM_Base_SetConfig+0x114>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d003      	beq.n	800a368 <TIM_Base_SetConfig+0xf8>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a0c      	ldr	r2, [pc, #48]	; (800a394 <TIM_Base_SetConfig+0x124>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d103      	bne.n	800a370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	691a      	ldr	r2, [r3, #16]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	615a      	str	r2, [r3, #20]
}
 800a376:	bf00      	nop
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	40010000 	.word	0x40010000
 800a388:	40000400 	.word	0x40000400
 800a38c:	40000800 	.word	0x40000800
 800a390:	40000c00 	.word	0x40000c00
 800a394:	40010400 	.word	0x40010400
 800a398:	40014000 	.word	0x40014000
 800a39c:	40014400 	.word	0x40014400
 800a3a0:	40014800 	.word	0x40014800
 800a3a4:	40001800 	.word	0x40001800
 800a3a8:	40001c00 	.word	0x40001c00
 800a3ac:	40002000 	.word	0x40002000

0800a3b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	f023 0201 	bic.w	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 0303 	bic.w	r3, r3, #3
 800a3e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f023 0302 	bic.w	r3, r3, #2
 800a3f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4313      	orrs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a20      	ldr	r2, [pc, #128]	; (800a488 <TIM_OC1_SetConfig+0xd8>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d003      	beq.n	800a414 <TIM_OC1_SetConfig+0x64>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a1f      	ldr	r2, [pc, #124]	; (800a48c <TIM_OC1_SetConfig+0xdc>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d10c      	bne.n	800a42e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f023 0308 	bic.w	r3, r3, #8
 800a41a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	4313      	orrs	r3, r2
 800a424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f023 0304 	bic.w	r3, r3, #4
 800a42c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a15      	ldr	r2, [pc, #84]	; (800a488 <TIM_OC1_SetConfig+0xd8>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <TIM_OC1_SetConfig+0x8e>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a14      	ldr	r2, [pc, #80]	; (800a48c <TIM_OC1_SetConfig+0xdc>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d111      	bne.n	800a462 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a44c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	4313      	orrs	r3, r2
 800a456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	4313      	orrs	r3, r2
 800a460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	621a      	str	r2, [r3, #32]
}
 800a47c:	bf00      	nop
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	40010000 	.word	0x40010000
 800a48c:	40010400 	.word	0x40010400

0800a490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	f023 0210 	bic.w	r2, r3, #16
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	021b      	lsls	r3, r3, #8
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f023 0320 	bic.w	r3, r3, #32
 800a4da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	011b      	lsls	r3, r3, #4
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a22      	ldr	r2, [pc, #136]	; (800a574 <TIM_OC2_SetConfig+0xe4>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d003      	beq.n	800a4f8 <TIM_OC2_SetConfig+0x68>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a21      	ldr	r2, [pc, #132]	; (800a578 <TIM_OC2_SetConfig+0xe8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d10d      	bne.n	800a514 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	4313      	orrs	r3, r2
 800a50a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a17      	ldr	r2, [pc, #92]	; (800a574 <TIM_OC2_SetConfig+0xe4>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d003      	beq.n	800a524 <TIM_OC2_SetConfig+0x94>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a16      	ldr	r2, [pc, #88]	; (800a578 <TIM_OC2_SetConfig+0xe8>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d113      	bne.n	800a54c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a52a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4313      	orrs	r3, r2
 800a54a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	621a      	str	r2, [r3, #32]
}
 800a566:	bf00      	nop
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	40010000 	.word	0x40010000
 800a578:	40010400 	.word	0x40010400

0800a57c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0303 	bic.w	r3, r3, #3
 800a5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	021b      	lsls	r3, r3, #8
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a21      	ldr	r2, [pc, #132]	; (800a65c <TIM_OC3_SetConfig+0xe0>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d003      	beq.n	800a5e2 <TIM_OC3_SetConfig+0x66>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a20      	ldr	r2, [pc, #128]	; (800a660 <TIM_OC3_SetConfig+0xe4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d10d      	bne.n	800a5fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	021b      	lsls	r3, r3, #8
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a16      	ldr	r2, [pc, #88]	; (800a65c <TIM_OC3_SetConfig+0xe0>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d003      	beq.n	800a60e <TIM_OC3_SetConfig+0x92>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a15      	ldr	r2, [pc, #84]	; (800a660 <TIM_OC3_SetConfig+0xe4>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d113      	bne.n	800a636 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a61c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	011b      	lsls	r3, r3, #4
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	4313      	orrs	r3, r2
 800a628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	4313      	orrs	r3, r2
 800a634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	621a      	str	r2, [r3, #32]
}
 800a650:	bf00      	nop
 800a652:	371c      	adds	r7, #28
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	40010000 	.word	0x40010000
 800a660:	40010400 	.word	0x40010400

0800a664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a69a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	021b      	lsls	r3, r3, #8
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	031b      	lsls	r3, r3, #12
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a12      	ldr	r2, [pc, #72]	; (800a708 <TIM_OC4_SetConfig+0xa4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d003      	beq.n	800a6cc <TIM_OC4_SetConfig+0x68>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a11      	ldr	r2, [pc, #68]	; (800a70c <TIM_OC4_SetConfig+0xa8>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d109      	bne.n	800a6e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	019b      	lsls	r3, r3, #6
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	621a      	str	r2, [r3, #32]
}
 800a6fa:	bf00      	nop
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	40010000 	.word	0x40010000
 800a70c:	40010400 	.word	0x40010400

0800a710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	f023 0201 	bic.w	r2, r3, #1
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a73a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f023 030a 	bic.w	r3, r3, #10
 800a74c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	621a      	str	r2, [r3, #32]
}
 800a762:	bf00      	nop
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a76e:	b480      	push	{r7}
 800a770:	b087      	sub	sp, #28
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	f023 0210 	bic.w	r2, r3, #16
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	031b      	lsls	r3, r3, #12
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	011b      	lsls	r3, r3, #4
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	621a      	str	r2, [r3, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b085      	sub	sp, #20
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	f043 0307 	orr.w	r3, r3, #7
 800a7f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	609a      	str	r2, [r3, #8]
}
 800a7f8:	bf00      	nop
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a81e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	021a      	lsls	r2, r3, #8
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	431a      	orrs	r2, r3
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	4313      	orrs	r3, r2
 800a830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	609a      	str	r2, [r3, #8]
}
 800a838:	bf00      	nop
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a844:	b480      	push	{r7}
 800a846:	b087      	sub	sp, #28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f003 031f 	and.w	r3, r3, #31
 800a856:	2201      	movs	r2, #1
 800a858:	fa02 f303 	lsl.w	r3, r2, r3
 800a85c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6a1a      	ldr	r2, [r3, #32]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	43db      	mvns	r3, r3
 800a866:	401a      	ands	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6a1a      	ldr	r2, [r3, #32]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f003 031f 	and.w	r3, r3, #31
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	fa01 f303 	lsl.w	r3, r1, r3
 800a87c:	431a      	orrs	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	621a      	str	r2, [r3, #32]
}
 800a882:	bf00      	nop
 800a884:	371c      	adds	r7, #28
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
	...

0800a890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d101      	bne.n	800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e05a      	b.n	800a95e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a21      	ldr	r2, [pc, #132]	; (800a96c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d022      	beq.n	800a932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f4:	d01d      	beq.n	800a932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a1d      	ldr	r2, [pc, #116]	; (800a970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d018      	beq.n	800a932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1b      	ldr	r2, [pc, #108]	; (800a974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d013      	beq.n	800a932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a1a      	ldr	r2, [pc, #104]	; (800a978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00e      	beq.n	800a932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a18      	ldr	r2, [pc, #96]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d009      	beq.n	800a932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a17      	ldr	r2, [pc, #92]	; (800a980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d004      	beq.n	800a932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a15      	ldr	r2, [pc, #84]	; (800a984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d10c      	bne.n	800a94c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	4313      	orrs	r3, r2
 800a942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40010000 	.word	0x40010000
 800a970:	40000400 	.word	0x40000400
 800a974:	40000800 	.word	0x40000800
 800a978:	40000c00 	.word	0x40000c00
 800a97c:	40010400 	.word	0x40010400
 800a980:	40014000 	.word	0x40014000
 800a984:	40001800 	.word	0x40001800

0800a988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d101      	bne.n	800a9a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e03d      	b.n	800aa20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e03f      	b.n	800aae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d106      	bne.n	800aa80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7fc f906 	bl	8006c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2224      	movs	r2, #36	; 0x24
 800aa84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68da      	ldr	r2, [r3, #12]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fddf 	bl	800b65c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	691a      	ldr	r2, [r3, #16]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aaac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695a      	ldr	r2, [r3, #20]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aabc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68da      	ldr	r2, [r3, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aacc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2220      	movs	r2, #32
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b08a      	sub	sp, #40	; 0x28
 800aaf2:	af02      	add	r7, sp, #8
 800aaf4:	60f8      	str	r0, [r7, #12]
 800aaf6:	60b9      	str	r1, [r7, #8]
 800aaf8:	603b      	str	r3, [r7, #0]
 800aafa:	4613      	mov	r3, r2
 800aafc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b20      	cmp	r3, #32
 800ab0c:	d17c      	bne.n	800ac08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <HAL_UART_Transmit+0x2c>
 800ab14:	88fb      	ldrh	r3, [r7, #6]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e075      	b.n	800ac0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_UART_Transmit+0x3e>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e06e      	b.n	800ac0a <HAL_UART_Transmit+0x11c>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2221      	movs	r2, #33	; 0x21
 800ab3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab42:	f7fc f9a7 	bl	8006e94 <HAL_GetTick>
 800ab46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	88fa      	ldrh	r2, [r7, #6]
 800ab4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	88fa      	ldrh	r2, [r7, #6]
 800ab52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5c:	d108      	bne.n	800ab70 <HAL_UART_Transmit+0x82>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d104      	bne.n	800ab70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ab66:	2300      	movs	r3, #0
 800ab68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	61bb      	str	r3, [r7, #24]
 800ab6e:	e003      	b.n	800ab78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ab80:	e02a      	b.n	800abd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2180      	movs	r1, #128	; 0x80
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 fb1f 	bl	800b1d0 <UART_WaitOnFlagUntilTimeout>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e036      	b.n	800ac0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10b      	bne.n	800abba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	3302      	adds	r3, #2
 800abb6:	61bb      	str	r3, [r7, #24]
 800abb8:	e007      	b.n	800abca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	781a      	ldrb	r2, [r3, #0]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	3301      	adds	r3, #1
 800abc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abce:	b29b      	uxth	r3, r3
 800abd0:	3b01      	subs	r3, #1
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1cf      	bne.n	800ab82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2200      	movs	r2, #0
 800abea:	2140      	movs	r1, #64	; 0x40
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f000 faef 	bl	800b1d0 <UART_WaitOnFlagUntilTimeout>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e006      	b.n	800ac0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2220      	movs	r2, #32
 800ac00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	e000      	b.n	800ac0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ac08:	2302      	movs	r3, #2
  }
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	60f8      	str	r0, [r7, #12]
 800ac1a:	60b9      	str	r1, [r7, #8]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d11d      	bne.n	800ac68 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <HAL_UART_Receive_IT+0x26>
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e016      	b.n	800ac6a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d101      	bne.n	800ac4a <HAL_UART_Receive_IT+0x38>
 800ac46:	2302      	movs	r3, #2
 800ac48:	e00f      	b.n	800ac6a <HAL_UART_Receive_IT+0x58>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac58:	88fb      	ldrh	r3, [r7, #6]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	68b9      	ldr	r1, [r7, #8]
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fb24 	bl	800b2ac <UART_Start_Receive_IT>
 800ac64:	4603      	mov	r3, r0
 800ac66:	e000      	b.n	800ac6a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ac68:	2302      	movs	r3, #2
  }
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b0ba      	sub	sp, #232	; 0xe8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800acb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10f      	bne.n	800acda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <HAL_UART_IRQHandler+0x66>
 800acc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fc07 	bl	800b4e6 <UART_Receive_IT>
      return;
 800acd8:	e256      	b.n	800b188 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80de 	beq.w	800aea0 <HAL_UART_IRQHandler+0x22c>
 800ace4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800acf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80d1 	beq.w	800aea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800acfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00b      	beq.n	800ad22 <HAL_UART_IRQHandler+0xae>
 800ad0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d005      	beq.n	800ad22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	f043 0201 	orr.w	r2, r3, #1
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad26:	f003 0304 	and.w	r3, r3, #4
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <HAL_UART_IRQHandler+0xd2>
 800ad2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	f043 0202 	orr.w	r2, r3, #2
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4a:	f003 0302 	and.w	r3, r3, #2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <HAL_UART_IRQHandler+0xf6>
 800ad52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	f043 0204 	orr.w	r2, r3, #4
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6e:	f003 0308 	and.w	r3, r3, #8
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d011      	beq.n	800ad9a <HAL_UART_IRQHandler+0x126>
 800ad76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d005      	beq.n	800ad9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad92:	f043 0208 	orr.w	r2, r3, #8
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 81ed 	beq.w	800b17e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ada4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada8:	f003 0320 	and.w	r3, r3, #32
 800adac:	2b00      	cmp	r3, #0
 800adae:	d008      	beq.n	800adc2 <HAL_UART_IRQHandler+0x14e>
 800adb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb4:	f003 0320 	and.w	r3, r3, #32
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fb92 	bl	800b4e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adcc:	2b40      	cmp	r3, #64	; 0x40
 800adce:	bf0c      	ite	eq
 800add0:	2301      	moveq	r3, #1
 800add2:	2300      	movne	r3, #0
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	f003 0308 	and.w	r3, r3, #8
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d103      	bne.n	800adee <HAL_UART_IRQHandler+0x17a>
 800ade6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adea:	2b00      	cmp	r3, #0
 800adec:	d04f      	beq.n	800ae8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa9a 	bl	800b328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfe:	2b40      	cmp	r3, #64	; 0x40
 800ae00:	d141      	bne.n	800ae86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3314      	adds	r3, #20
 800ae08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3314      	adds	r3, #20
 800ae2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1d9      	bne.n	800ae02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d013      	beq.n	800ae7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	4a7d      	ldr	r2, [pc, #500]	; (800b050 <HAL_UART_IRQHandler+0x3dc>)
 800ae5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd f9f7 	bl	8008256 <HAL_DMA_Abort_IT>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d016      	beq.n	800ae9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae7c:	e00e      	b.n	800ae9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f990 	bl	800b1a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae84:	e00a      	b.n	800ae9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f98c 	bl	800b1a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae8c:	e006      	b.n	800ae9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f988 	bl	800b1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ae9a:	e170      	b.n	800b17e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae9c:	bf00      	nop
    return;
 800ae9e:	e16e      	b.n	800b17e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	f040 814a 	bne.w	800b13e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aeaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeae:	f003 0310 	and.w	r3, r3, #16
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 8143 	beq.w	800b13e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aebc:	f003 0310 	and.w	r3, r3, #16
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 813c 	beq.w	800b13e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aec6:	2300      	movs	r3, #0
 800aec8:	60bb      	str	r3, [r7, #8]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60bb      	str	r3, [r7, #8]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	60bb      	str	r3, [r7, #8]
 800aeda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	f040 80b4 	bne.w	800b054 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 8140 	beq.w	800b182 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af0a:	429a      	cmp	r2, r3
 800af0c:	f080 8139 	bcs.w	800b182 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af22:	f000 8088 	beq.w	800b036 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	330c      	adds	r3, #12
 800af2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af34:	e853 3f00 	ldrex	r3, [r3]
 800af38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	330c      	adds	r3, #12
 800af4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af62:	e841 2300 	strex	r3, r2, [r1]
 800af66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1d9      	bne.n	800af26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3314      	adds	r3, #20
 800af78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af7c:	e853 3f00 	ldrex	r3, [r3]
 800af80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af84:	f023 0301 	bic.w	r3, r3, #1
 800af88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3314      	adds	r3, #20
 800af92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afa2:	e841 2300 	strex	r3, r2, [r1]
 800afa6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800afa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e1      	bne.n	800af72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3314      	adds	r3, #20
 800afb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afb8:	e853 3f00 	ldrex	r3, [r3]
 800afbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3314      	adds	r3, #20
 800afce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afda:	e841 2300 	strex	r3, r2, [r1]
 800afde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1e3      	bne.n	800afae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2220      	movs	r2, #32
 800afea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	330c      	adds	r3, #12
 800affa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800affe:	e853 3f00 	ldrex	r3, [r3]
 800b002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b006:	f023 0310 	bic.w	r3, r3, #16
 800b00a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	330c      	adds	r3, #12
 800b014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b018:	65ba      	str	r2, [r7, #88]	; 0x58
 800b01a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b01e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b020:	e841 2300 	strex	r3, r2, [r1]
 800b024:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1e3      	bne.n	800aff4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b030:	4618      	mov	r0, r3
 800b032:	f7fd f8a0 	bl	8008176 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b03e:	b29b      	uxth	r3, r3
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	b29b      	uxth	r3, r3
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f8b6 	bl	800b1b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b04c:	e099      	b.n	800b182 <HAL_UART_IRQHandler+0x50e>
 800b04e:	bf00      	nop
 800b050:	0800b3ef 	.word	0x0800b3ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b068:	b29b      	uxth	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 808b 	beq.w	800b186 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 8086 	beq.w	800b186 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	330c      	adds	r3, #12
 800b080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	330c      	adds	r3, #12
 800b09a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b09e:	647a      	str	r2, [r7, #68]	; 0x44
 800b0a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e3      	bne.n	800b07a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3314      	adds	r3, #20
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	f023 0301 	bic.w	r3, r3, #1
 800b0c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3314      	adds	r3, #20
 800b0d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0d6:	633a      	str	r2, [r7, #48]	; 0x30
 800b0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0de:	e841 2300 	strex	r3, r2, [r1]
 800b0e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1e3      	bne.n	800b0b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	330c      	adds	r3, #12
 800b0fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	e853 3f00 	ldrex	r3, [r3]
 800b106:	60fb      	str	r3, [r7, #12]
   return(result);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f023 0310 	bic.w	r3, r3, #16
 800b10e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	330c      	adds	r3, #12
 800b118:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b11c:	61fa      	str	r2, [r7, #28]
 800b11e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b120:	69b9      	ldr	r1, [r7, #24]
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	e841 2300 	strex	r3, r2, [r1]
 800b128:	617b      	str	r3, [r7, #20]
   return(result);
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1e3      	bne.n	800b0f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f83e 	bl	800b1b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b13c:	e023      	b.n	800b186 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b146:	2b00      	cmp	r3, #0
 800b148:	d009      	beq.n	800b15e <HAL_UART_IRQHandler+0x4ea>
 800b14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f95d 	bl	800b416 <UART_Transmit_IT>
    return;
 800b15c:	e014      	b.n	800b188 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00e      	beq.n	800b188 <HAL_UART_IRQHandler+0x514>
 800b16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	d008      	beq.n	800b188 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f99d 	bl	800b4b6 <UART_EndTransmit_IT>
    return;
 800b17c:	e004      	b.n	800b188 <HAL_UART_IRQHandler+0x514>
    return;
 800b17e:	bf00      	nop
 800b180:	e002      	b.n	800b188 <HAL_UART_IRQHandler+0x514>
      return;
 800b182:	bf00      	nop
 800b184:	e000      	b.n	800b188 <HAL_UART_IRQHandler+0x514>
      return;
 800b186:	bf00      	nop
  }
}
 800b188:	37e8      	adds	r7, #232	; 0xe8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop

0800b190 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b090      	sub	sp, #64	; 0x40
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e0:	e050      	b.n	800b284 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1e8:	d04c      	beq.n	800b284 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d007      	beq.n	800b200 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1f0:	f7fb fe50 	bl	8006e94 <HAL_GetTick>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d241      	bcs.n	800b284 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	330c      	adds	r3, #12
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	e853 3f00 	ldrex	r3, [r3]
 800b20e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	330c      	adds	r3, #12
 800b21e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b220:	637a      	str	r2, [r7, #52]	; 0x34
 800b222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b228:	e841 2300 	strex	r3, r2, [r1]
 800b22c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e5      	bne.n	800b200 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3314      	adds	r3, #20
 800b23a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	613b      	str	r3, [r7, #16]
   return(result);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	f023 0301 	bic.w	r3, r3, #1
 800b24a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3314      	adds	r3, #20
 800b252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b254:	623a      	str	r2, [r7, #32]
 800b256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	69f9      	ldr	r1, [r7, #28]
 800b25a:	6a3a      	ldr	r2, [r7, #32]
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	61bb      	str	r3, [r7, #24]
   return(result);
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e5      	bne.n	800b234 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2220      	movs	r2, #32
 800b274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e00f      	b.n	800b2a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	4013      	ands	r3, r2
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	bf0c      	ite	eq
 800b294:	2301      	moveq	r3, #1
 800b296:	2300      	movne	r3, #0
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	461a      	mov	r2, r3
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d09f      	beq.n	800b1e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3740      	adds	r7, #64	; 0x40
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	88fa      	ldrh	r2, [r7, #6]
 800b2c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	88fa      	ldrh	r2, [r7, #6]
 800b2ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2222      	movs	r2, #34	; 0x22
 800b2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	695a      	ldr	r2, [r3, #20]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f042 0201 	orr.w	r2, r2, #1
 800b308:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f042 0220 	orr.w	r2, r2, #32
 800b318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b328:	b480      	push	{r7}
 800b32a:	b095      	sub	sp, #84	; 0x54
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	330c      	adds	r3, #12
 800b336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33a:	e853 3f00 	ldrex	r3, [r3]
 800b33e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b346:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	330c      	adds	r3, #12
 800b34e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b350:	643a      	str	r2, [r7, #64]	; 0x40
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b358:	e841 2300 	strex	r3, r2, [r1]
 800b35c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e5      	bne.n	800b330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3314      	adds	r3, #20
 800b36a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	61fb      	str	r3, [r7, #28]
   return(result);
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	f023 0301 	bic.w	r3, r3, #1
 800b37a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3314      	adds	r3, #20
 800b382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b384:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b38c:	e841 2300 	strex	r3, r2, [r1]
 800b390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e5      	bne.n	800b364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d119      	bne.n	800b3d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	330c      	adds	r3, #12
 800b3a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	e853 3f00 	ldrex	r3, [r3]
 800b3ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	f023 0310 	bic.w	r3, r3, #16
 800b3b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	330c      	adds	r3, #12
 800b3be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3c0:	61ba      	str	r2, [r7, #24]
 800b3c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c4:	6979      	ldr	r1, [r7, #20]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	e841 2300 	strex	r3, r2, [r1]
 800b3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e5      	bne.n	800b3a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3e2:	bf00      	nop
 800b3e4:	3754      	adds	r7, #84	; 0x54
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fecb 	bl	800b1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b40e:	bf00      	nop
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b21      	cmp	r3, #33	; 0x21
 800b428:	d13e      	bne.n	800b4a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b432:	d114      	bne.n	800b45e <UART_Transmit_IT+0x48>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d110      	bne.n	800b45e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a1b      	ldr	r3, [r3, #32]
 800b440:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b450:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	1c9a      	adds	r2, r3, #2
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	621a      	str	r2, [r3, #32]
 800b45c:	e008      	b.n	800b470 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	1c59      	adds	r1, r3, #1
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	6211      	str	r1, [r2, #32]
 800b468:	781a      	ldrb	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b474:	b29b      	uxth	r3, r3
 800b476:	3b01      	subs	r3, #1
 800b478:	b29b      	uxth	r3, r3
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	4619      	mov	r1, r3
 800b47e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10f      	bne.n	800b4a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68da      	ldr	r2, [r3, #12]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b492:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68da      	ldr	r2, [r3, #12]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e000      	b.n	800b4aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4a8:	2302      	movs	r3, #2
  }
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b082      	sub	sp, #8
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68da      	ldr	r2, [r3, #12]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff fe5a 	bl	800b190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b08c      	sub	sp, #48	; 0x30
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b22      	cmp	r3, #34	; 0x22
 800b4f8:	f040 80ab 	bne.w	800b652 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b504:	d117      	bne.n	800b536 <UART_Receive_IT+0x50>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d113      	bne.n	800b536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	b29b      	uxth	r3, r3
 800b520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b524:	b29a      	uxth	r2, r3
 800b526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52e:	1c9a      	adds	r2, r3, #2
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	629a      	str	r2, [r3, #40]	; 0x28
 800b534:	e026      	b.n	800b584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b53c:	2300      	movs	r3, #0
 800b53e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b548:	d007      	beq.n	800b55a <UART_Receive_IT+0x74>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10a      	bne.n	800b568 <UART_Receive_IT+0x82>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	b2da      	uxtb	r2, r3
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	e008      	b.n	800b57a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b574:	b2da      	uxtb	r2, r3
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b588:	b29b      	uxth	r3, r3
 800b58a:	3b01      	subs	r3, #1
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	4619      	mov	r1, r3
 800b592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b594:	2b00      	cmp	r3, #0
 800b596:	d15a      	bne.n	800b64e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	68da      	ldr	r2, [r3, #12]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f022 0220 	bic.w	r2, r2, #32
 800b5a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68da      	ldr	r2, [r3, #12]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	695a      	ldr	r2, [r3, #20]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f022 0201 	bic.w	r2, r2, #1
 800b5c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2220      	movs	r2, #32
 800b5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d135      	bne.n	800b644 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	330c      	adds	r3, #12
 800b5e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	e853 3f00 	ldrex	r3, [r3]
 800b5ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f023 0310 	bic.w	r3, r3, #16
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	330c      	adds	r3, #12
 800b5fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5fe:	623a      	str	r2, [r7, #32]
 800b600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b602:	69f9      	ldr	r1, [r7, #28]
 800b604:	6a3a      	ldr	r2, [r7, #32]
 800b606:	e841 2300 	strex	r3, r2, [r1]
 800b60a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1e5      	bne.n	800b5de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 0310 	and.w	r3, r3, #16
 800b61c:	2b10      	cmp	r3, #16
 800b61e:	d10a      	bne.n	800b636 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b620:	2300      	movs	r3, #0
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff fdbb 	bl	800b1b8 <HAL_UARTEx_RxEventCallback>
 800b642:	e002      	b.n	800b64a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7fb fb83 	bl	8006d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e002      	b.n	800b654 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	e000      	b.n	800b654 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b652:	2302      	movs	r3, #2
  }
}
 800b654:	4618      	mov	r0, r3
 800b656:	3730      	adds	r7, #48	; 0x30
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b65c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b660:	b0c0      	sub	sp, #256	; 0x100
 800b662:	af00      	add	r7, sp, #0
 800b664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b678:	68d9      	ldr	r1, [r3, #12]
 800b67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	ea40 0301 	orr.w	r3, r0, r1
 800b684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68a:	689a      	ldr	r2, [r3, #8]
 800b68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	431a      	orrs	r2, r3
 800b694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6b4:	f021 010c 	bic.w	r1, r1, #12
 800b6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6c2:	430b      	orrs	r3, r1
 800b6c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d6:	6999      	ldr	r1, [r3, #24]
 800b6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	ea40 0301 	orr.w	r3, r0, r1
 800b6e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	4b8f      	ldr	r3, [pc, #572]	; (800b928 <UART_SetConfig+0x2cc>)
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d005      	beq.n	800b6fc <UART_SetConfig+0xa0>
 800b6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	4b8d      	ldr	r3, [pc, #564]	; (800b92c <UART_SetConfig+0x2d0>)
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d104      	bne.n	800b706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6fc:	f7fd f8d2 	bl	80088a4 <HAL_RCC_GetPCLK2Freq>
 800b700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b704:	e003      	b.n	800b70e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b706:	f7fd f8b9 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800b70a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b718:	f040 810c 	bne.w	800b934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b71c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b720:	2200      	movs	r2, #0
 800b722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b72a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b72e:	4622      	mov	r2, r4
 800b730:	462b      	mov	r3, r5
 800b732:	1891      	adds	r1, r2, r2
 800b734:	65b9      	str	r1, [r7, #88]	; 0x58
 800b736:	415b      	adcs	r3, r3
 800b738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b73a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b73e:	4621      	mov	r1, r4
 800b740:	eb12 0801 	adds.w	r8, r2, r1
 800b744:	4629      	mov	r1, r5
 800b746:	eb43 0901 	adc.w	r9, r3, r1
 800b74a:	f04f 0200 	mov.w	r2, #0
 800b74e:	f04f 0300 	mov.w	r3, #0
 800b752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b75a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b75e:	4690      	mov	r8, r2
 800b760:	4699      	mov	r9, r3
 800b762:	4623      	mov	r3, r4
 800b764:	eb18 0303 	adds.w	r3, r8, r3
 800b768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b76c:	462b      	mov	r3, r5
 800b76e:	eb49 0303 	adc.w	r3, r9, r3
 800b772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b78a:	460b      	mov	r3, r1
 800b78c:	18db      	adds	r3, r3, r3
 800b78e:	653b      	str	r3, [r7, #80]	; 0x50
 800b790:	4613      	mov	r3, r2
 800b792:	eb42 0303 	adc.w	r3, r2, r3
 800b796:	657b      	str	r3, [r7, #84]	; 0x54
 800b798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b79c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b7a0:	f7f5 fa92 	bl	8000cc8 <__aeabi_uldivmod>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4b61      	ldr	r3, [pc, #388]	; (800b930 <UART_SetConfig+0x2d4>)
 800b7aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ae:	095b      	lsrs	r3, r3, #5
 800b7b0:	011c      	lsls	r4, r3, #4
 800b7b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b7c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b7c4:	4642      	mov	r2, r8
 800b7c6:	464b      	mov	r3, r9
 800b7c8:	1891      	adds	r1, r2, r2
 800b7ca:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7cc:	415b      	adcs	r3, r3
 800b7ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b7d4:	4641      	mov	r1, r8
 800b7d6:	eb12 0a01 	adds.w	sl, r2, r1
 800b7da:	4649      	mov	r1, r9
 800b7dc:	eb43 0b01 	adc.w	fp, r3, r1
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7f4:	4692      	mov	sl, r2
 800b7f6:	469b      	mov	fp, r3
 800b7f8:	4643      	mov	r3, r8
 800b7fa:	eb1a 0303 	adds.w	r3, sl, r3
 800b7fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b802:	464b      	mov	r3, r9
 800b804:	eb4b 0303 	adc.w	r3, fp, r3
 800b808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b81c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b820:	460b      	mov	r3, r1
 800b822:	18db      	adds	r3, r3, r3
 800b824:	643b      	str	r3, [r7, #64]	; 0x40
 800b826:	4613      	mov	r3, r2
 800b828:	eb42 0303 	adc.w	r3, r2, r3
 800b82c:	647b      	str	r3, [r7, #68]	; 0x44
 800b82e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b836:	f7f5 fa47 	bl	8000cc8 <__aeabi_uldivmod>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	4611      	mov	r1, r2
 800b840:	4b3b      	ldr	r3, [pc, #236]	; (800b930 <UART_SetConfig+0x2d4>)
 800b842:	fba3 2301 	umull	r2, r3, r3, r1
 800b846:	095b      	lsrs	r3, r3, #5
 800b848:	2264      	movs	r2, #100	; 0x64
 800b84a:	fb02 f303 	mul.w	r3, r2, r3
 800b84e:	1acb      	subs	r3, r1, r3
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b856:	4b36      	ldr	r3, [pc, #216]	; (800b930 <UART_SetConfig+0x2d4>)
 800b858:	fba3 2302 	umull	r2, r3, r3, r2
 800b85c:	095b      	lsrs	r3, r3, #5
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b864:	441c      	add	r4, r3
 800b866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b878:	4642      	mov	r2, r8
 800b87a:	464b      	mov	r3, r9
 800b87c:	1891      	adds	r1, r2, r2
 800b87e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b880:	415b      	adcs	r3, r3
 800b882:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b888:	4641      	mov	r1, r8
 800b88a:	1851      	adds	r1, r2, r1
 800b88c:	6339      	str	r1, [r7, #48]	; 0x30
 800b88e:	4649      	mov	r1, r9
 800b890:	414b      	adcs	r3, r1
 800b892:	637b      	str	r3, [r7, #52]	; 0x34
 800b894:	f04f 0200 	mov.w	r2, #0
 800b898:	f04f 0300 	mov.w	r3, #0
 800b89c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	00cb      	lsls	r3, r1, #3
 800b8a4:	4651      	mov	r1, sl
 800b8a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8aa:	4651      	mov	r1, sl
 800b8ac:	00ca      	lsls	r2, r1, #3
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	4642      	mov	r2, r8
 800b8b6:	189b      	adds	r3, r3, r2
 800b8b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8bc:	464b      	mov	r3, r9
 800b8be:	460a      	mov	r2, r1
 800b8c0:	eb42 0303 	adc.w	r3, r2, r3
 800b8c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b8d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8dc:	460b      	mov	r3, r1
 800b8de:	18db      	adds	r3, r3, r3
 800b8e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	eb42 0303 	adc.w	r3, r2, r3
 800b8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8f2:	f7f5 f9e9 	bl	8000cc8 <__aeabi_uldivmod>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <UART_SetConfig+0x2d4>)
 800b8fc:	fba3 1302 	umull	r1, r3, r3, r2
 800b900:	095b      	lsrs	r3, r3, #5
 800b902:	2164      	movs	r1, #100	; 0x64
 800b904:	fb01 f303 	mul.w	r3, r1, r3
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	00db      	lsls	r3, r3, #3
 800b90c:	3332      	adds	r3, #50	; 0x32
 800b90e:	4a08      	ldr	r2, [pc, #32]	; (800b930 <UART_SetConfig+0x2d4>)
 800b910:	fba2 2303 	umull	r2, r3, r2, r3
 800b914:	095b      	lsrs	r3, r3, #5
 800b916:	f003 0207 	and.w	r2, r3, #7
 800b91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4422      	add	r2, r4
 800b922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b924:	e105      	b.n	800bb32 <UART_SetConfig+0x4d6>
 800b926:	bf00      	nop
 800b928:	40011000 	.word	0x40011000
 800b92c:	40011400 	.word	0x40011400
 800b930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b938:	2200      	movs	r2, #0
 800b93a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b93e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b946:	4642      	mov	r2, r8
 800b948:	464b      	mov	r3, r9
 800b94a:	1891      	adds	r1, r2, r2
 800b94c:	6239      	str	r1, [r7, #32]
 800b94e:	415b      	adcs	r3, r3
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
 800b952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b956:	4641      	mov	r1, r8
 800b958:	1854      	adds	r4, r2, r1
 800b95a:	4649      	mov	r1, r9
 800b95c:	eb43 0501 	adc.w	r5, r3, r1
 800b960:	f04f 0200 	mov.w	r2, #0
 800b964:	f04f 0300 	mov.w	r3, #0
 800b968:	00eb      	lsls	r3, r5, #3
 800b96a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b96e:	00e2      	lsls	r2, r4, #3
 800b970:	4614      	mov	r4, r2
 800b972:	461d      	mov	r5, r3
 800b974:	4643      	mov	r3, r8
 800b976:	18e3      	adds	r3, r4, r3
 800b978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b97c:	464b      	mov	r3, r9
 800b97e:	eb45 0303 	adc.w	r3, r5, r3
 800b982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b996:	f04f 0200 	mov.w	r2, #0
 800b99a:	f04f 0300 	mov.w	r3, #0
 800b99e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	008b      	lsls	r3, r1, #2
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	008a      	lsls	r2, r1, #2
 800b9b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9b4:	f7f5 f988 	bl	8000cc8 <__aeabi_uldivmod>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4b60      	ldr	r3, [pc, #384]	; (800bb40 <UART_SetConfig+0x4e4>)
 800b9be:	fba3 2302 	umull	r2, r3, r3, r2
 800b9c2:	095b      	lsrs	r3, r3, #5
 800b9c4:	011c      	lsls	r4, r3, #4
 800b9c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b9d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9d8:	4642      	mov	r2, r8
 800b9da:	464b      	mov	r3, r9
 800b9dc:	1891      	adds	r1, r2, r2
 800b9de:	61b9      	str	r1, [r7, #24]
 800b9e0:	415b      	adcs	r3, r3
 800b9e2:	61fb      	str	r3, [r7, #28]
 800b9e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9e8:	4641      	mov	r1, r8
 800b9ea:	1851      	adds	r1, r2, r1
 800b9ec:	6139      	str	r1, [r7, #16]
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	414b      	adcs	r3, r1
 800b9f2:	617b      	str	r3, [r7, #20]
 800b9f4:	f04f 0200 	mov.w	r2, #0
 800b9f8:	f04f 0300 	mov.w	r3, #0
 800b9fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba00:	4659      	mov	r1, fp
 800ba02:	00cb      	lsls	r3, r1, #3
 800ba04:	4651      	mov	r1, sl
 800ba06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba0a:	4651      	mov	r1, sl
 800ba0c:	00ca      	lsls	r2, r1, #3
 800ba0e:	4610      	mov	r0, r2
 800ba10:	4619      	mov	r1, r3
 800ba12:	4603      	mov	r3, r0
 800ba14:	4642      	mov	r2, r8
 800ba16:	189b      	adds	r3, r3, r2
 800ba18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba1c:	464b      	mov	r3, r9
 800ba1e:	460a      	mov	r2, r1
 800ba20:	eb42 0303 	adc.w	r3, r2, r3
 800ba24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba32:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	f04f 0300 	mov.w	r3, #0
 800ba3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba40:	4649      	mov	r1, r9
 800ba42:	008b      	lsls	r3, r1, #2
 800ba44:	4641      	mov	r1, r8
 800ba46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba4a:	4641      	mov	r1, r8
 800ba4c:	008a      	lsls	r2, r1, #2
 800ba4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba52:	f7f5 f939 	bl	8000cc8 <__aeabi_uldivmod>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4b39      	ldr	r3, [pc, #228]	; (800bb40 <UART_SetConfig+0x4e4>)
 800ba5c:	fba3 1302 	umull	r1, r3, r3, r2
 800ba60:	095b      	lsrs	r3, r3, #5
 800ba62:	2164      	movs	r1, #100	; 0x64
 800ba64:	fb01 f303 	mul.w	r3, r1, r3
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	3332      	adds	r3, #50	; 0x32
 800ba6e:	4a34      	ldr	r2, [pc, #208]	; (800bb40 <UART_SetConfig+0x4e4>)
 800ba70:	fba2 2303 	umull	r2, r3, r2, r3
 800ba74:	095b      	lsrs	r3, r3, #5
 800ba76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba7a:	441c      	add	r4, r3
 800ba7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba80:	2200      	movs	r2, #0
 800ba82:	673b      	str	r3, [r7, #112]	; 0x70
 800ba84:	677a      	str	r2, [r7, #116]	; 0x74
 800ba86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba8a:	4642      	mov	r2, r8
 800ba8c:	464b      	mov	r3, r9
 800ba8e:	1891      	adds	r1, r2, r2
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	415b      	adcs	r3, r3
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba9a:	4641      	mov	r1, r8
 800ba9c:	1851      	adds	r1, r2, r1
 800ba9e:	6039      	str	r1, [r7, #0]
 800baa0:	4649      	mov	r1, r9
 800baa2:	414b      	adcs	r3, r1
 800baa4:	607b      	str	r3, [r7, #4]
 800baa6:	f04f 0200 	mov.w	r2, #0
 800baaa:	f04f 0300 	mov.w	r3, #0
 800baae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bab2:	4659      	mov	r1, fp
 800bab4:	00cb      	lsls	r3, r1, #3
 800bab6:	4651      	mov	r1, sl
 800bab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800babc:	4651      	mov	r1, sl
 800babe:	00ca      	lsls	r2, r1, #3
 800bac0:	4610      	mov	r0, r2
 800bac2:	4619      	mov	r1, r3
 800bac4:	4603      	mov	r3, r0
 800bac6:	4642      	mov	r2, r8
 800bac8:	189b      	adds	r3, r3, r2
 800baca:	66bb      	str	r3, [r7, #104]	; 0x68
 800bacc:	464b      	mov	r3, r9
 800bace:	460a      	mov	r2, r1
 800bad0:	eb42 0303 	adc.w	r3, r2, r3
 800bad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	663b      	str	r3, [r7, #96]	; 0x60
 800bae0:	667a      	str	r2, [r7, #100]	; 0x64
 800bae2:	f04f 0200 	mov.w	r2, #0
 800bae6:	f04f 0300 	mov.w	r3, #0
 800baea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800baee:	4649      	mov	r1, r9
 800baf0:	008b      	lsls	r3, r1, #2
 800baf2:	4641      	mov	r1, r8
 800baf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800baf8:	4641      	mov	r1, r8
 800bafa:	008a      	lsls	r2, r1, #2
 800bafc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb00:	f7f5 f8e2 	bl	8000cc8 <__aeabi_uldivmod>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	4b0d      	ldr	r3, [pc, #52]	; (800bb40 <UART_SetConfig+0x4e4>)
 800bb0a:	fba3 1302 	umull	r1, r3, r3, r2
 800bb0e:	095b      	lsrs	r3, r3, #5
 800bb10:	2164      	movs	r1, #100	; 0x64
 800bb12:	fb01 f303 	mul.w	r3, r1, r3
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	011b      	lsls	r3, r3, #4
 800bb1a:	3332      	adds	r3, #50	; 0x32
 800bb1c:	4a08      	ldr	r2, [pc, #32]	; (800bb40 <UART_SetConfig+0x4e4>)
 800bb1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb22:	095b      	lsrs	r3, r3, #5
 800bb24:	f003 020f 	and.w	r2, r3, #15
 800bb28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4422      	add	r2, r4
 800bb30:	609a      	str	r2, [r3, #8]
}
 800bb32:	bf00      	nop
 800bb34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb3e:	bf00      	nop
 800bb40:	51eb851f 	.word	0x51eb851f

0800bb44 <atof>:
 800bb44:	2100      	movs	r1, #0
 800bb46:	f001 bb61 	b.w	800d20c <strtod>

0800bb4a <atoi>:
 800bb4a:	220a      	movs	r2, #10
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	f001 bbeb 	b.w	800d328 <strtol>
	...

0800bb54 <__errno>:
 800bb54:	4b01      	ldr	r3, [pc, #4]	; (800bb5c <__errno+0x8>)
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	2000004c 	.word	0x2000004c

0800bb60 <__libc_init_array>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	4d0d      	ldr	r5, [pc, #52]	; (800bb98 <__libc_init_array+0x38>)
 800bb64:	4c0d      	ldr	r4, [pc, #52]	; (800bb9c <__libc_init_array+0x3c>)
 800bb66:	1b64      	subs	r4, r4, r5
 800bb68:	10a4      	asrs	r4, r4, #2
 800bb6a:	2600      	movs	r6, #0
 800bb6c:	42a6      	cmp	r6, r4
 800bb6e:	d109      	bne.n	800bb84 <__libc_init_array+0x24>
 800bb70:	4d0b      	ldr	r5, [pc, #44]	; (800bba0 <__libc_init_array+0x40>)
 800bb72:	4c0c      	ldr	r4, [pc, #48]	; (800bba4 <__libc_init_array+0x44>)
 800bb74:	f004 fcaa 	bl	80104cc <_init>
 800bb78:	1b64      	subs	r4, r4, r5
 800bb7a:	10a4      	asrs	r4, r4, #2
 800bb7c:	2600      	movs	r6, #0
 800bb7e:	42a6      	cmp	r6, r4
 800bb80:	d105      	bne.n	800bb8e <__libc_init_array+0x2e>
 800bb82:	bd70      	pop	{r4, r5, r6, pc}
 800bb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb88:	4798      	blx	r3
 800bb8a:	3601      	adds	r6, #1
 800bb8c:	e7ee      	b.n	800bb6c <__libc_init_array+0xc>
 800bb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb92:	4798      	blx	r3
 800bb94:	3601      	adds	r6, #1
 800bb96:	e7f2      	b.n	800bb7e <__libc_init_array+0x1e>
 800bb98:	08011eb0 	.word	0x08011eb0
 800bb9c:	08011eb0 	.word	0x08011eb0
 800bba0:	08011eb0 	.word	0x08011eb0
 800bba4:	08011eb4 	.word	0x08011eb4

0800bba8 <memcpy>:
 800bba8:	440a      	add	r2, r1
 800bbaa:	4291      	cmp	r1, r2
 800bbac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bbb0:	d100      	bne.n	800bbb4 <memcpy+0xc>
 800bbb2:	4770      	bx	lr
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbbe:	4291      	cmp	r1, r2
 800bbc0:	d1f9      	bne.n	800bbb6 <memcpy+0xe>
 800bbc2:	bd10      	pop	{r4, pc}

0800bbc4 <memset>:
 800bbc4:	4402      	add	r2, r0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d100      	bne.n	800bbce <memset+0xa>
 800bbcc:	4770      	bx	lr
 800bbce:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd2:	e7f9      	b.n	800bbc8 <memset+0x4>

0800bbd4 <__cvt>:
 800bbd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd8:	ec55 4b10 	vmov	r4, r5, d0
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	460e      	mov	r6, r1
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	462b      	mov	r3, r5
 800bbe4:	bfbb      	ittet	lt
 800bbe6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bbea:	461d      	movlt	r5, r3
 800bbec:	2300      	movge	r3, #0
 800bbee:	232d      	movlt	r3, #45	; 0x2d
 800bbf0:	700b      	strb	r3, [r1, #0]
 800bbf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bbf8:	4691      	mov	r9, r2
 800bbfa:	f023 0820 	bic.w	r8, r3, #32
 800bbfe:	bfbc      	itt	lt
 800bc00:	4622      	movlt	r2, r4
 800bc02:	4614      	movlt	r4, r2
 800bc04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc08:	d005      	beq.n	800bc16 <__cvt+0x42>
 800bc0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc0e:	d100      	bne.n	800bc12 <__cvt+0x3e>
 800bc10:	3601      	adds	r6, #1
 800bc12:	2102      	movs	r1, #2
 800bc14:	e000      	b.n	800bc18 <__cvt+0x44>
 800bc16:	2103      	movs	r1, #3
 800bc18:	ab03      	add	r3, sp, #12
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	ab02      	add	r3, sp, #8
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	ec45 4b10 	vmov	d0, r4, r5
 800bc24:	4653      	mov	r3, sl
 800bc26:	4632      	mov	r2, r6
 800bc28:	f001 fcd6 	bl	800d5d8 <_dtoa_r>
 800bc2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc30:	4607      	mov	r7, r0
 800bc32:	d102      	bne.n	800bc3a <__cvt+0x66>
 800bc34:	f019 0f01 	tst.w	r9, #1
 800bc38:	d022      	beq.n	800bc80 <__cvt+0xac>
 800bc3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc3e:	eb07 0906 	add.w	r9, r7, r6
 800bc42:	d110      	bne.n	800bc66 <__cvt+0x92>
 800bc44:	783b      	ldrb	r3, [r7, #0]
 800bc46:	2b30      	cmp	r3, #48	; 0x30
 800bc48:	d10a      	bne.n	800bc60 <__cvt+0x8c>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	4620      	mov	r0, r4
 800bc50:	4629      	mov	r1, r5
 800bc52:	f7f4 ff59 	bl	8000b08 <__aeabi_dcmpeq>
 800bc56:	b918      	cbnz	r0, 800bc60 <__cvt+0x8c>
 800bc58:	f1c6 0601 	rsb	r6, r6, #1
 800bc5c:	f8ca 6000 	str.w	r6, [sl]
 800bc60:	f8da 3000 	ldr.w	r3, [sl]
 800bc64:	4499      	add	r9, r3
 800bc66:	2200      	movs	r2, #0
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	f7f4 ff4b 	bl	8000b08 <__aeabi_dcmpeq>
 800bc72:	b108      	cbz	r0, 800bc78 <__cvt+0xa4>
 800bc74:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc78:	2230      	movs	r2, #48	; 0x30
 800bc7a:	9b03      	ldr	r3, [sp, #12]
 800bc7c:	454b      	cmp	r3, r9
 800bc7e:	d307      	bcc.n	800bc90 <__cvt+0xbc>
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc84:	1bdb      	subs	r3, r3, r7
 800bc86:	4638      	mov	r0, r7
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	b004      	add	sp, #16
 800bc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc90:	1c59      	adds	r1, r3, #1
 800bc92:	9103      	str	r1, [sp, #12]
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	e7f0      	b.n	800bc7a <__cvt+0xa6>

0800bc98 <__exponent>:
 800bc98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2900      	cmp	r1, #0
 800bc9e:	bfb8      	it	lt
 800bca0:	4249      	neglt	r1, r1
 800bca2:	f803 2b02 	strb.w	r2, [r3], #2
 800bca6:	bfb4      	ite	lt
 800bca8:	222d      	movlt	r2, #45	; 0x2d
 800bcaa:	222b      	movge	r2, #43	; 0x2b
 800bcac:	2909      	cmp	r1, #9
 800bcae:	7042      	strb	r2, [r0, #1]
 800bcb0:	dd2a      	ble.n	800bd08 <__exponent+0x70>
 800bcb2:	f10d 0407 	add.w	r4, sp, #7
 800bcb6:	46a4      	mov	ip, r4
 800bcb8:	270a      	movs	r7, #10
 800bcba:	46a6      	mov	lr, r4
 800bcbc:	460a      	mov	r2, r1
 800bcbe:	fb91 f6f7 	sdiv	r6, r1, r7
 800bcc2:	fb07 1516 	mls	r5, r7, r6, r1
 800bcc6:	3530      	adds	r5, #48	; 0x30
 800bcc8:	2a63      	cmp	r2, #99	; 0x63
 800bcca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bcce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bcd2:	4631      	mov	r1, r6
 800bcd4:	dcf1      	bgt.n	800bcba <__exponent+0x22>
 800bcd6:	3130      	adds	r1, #48	; 0x30
 800bcd8:	f1ae 0502 	sub.w	r5, lr, #2
 800bcdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bce0:	1c44      	adds	r4, r0, #1
 800bce2:	4629      	mov	r1, r5
 800bce4:	4561      	cmp	r1, ip
 800bce6:	d30a      	bcc.n	800bcfe <__exponent+0x66>
 800bce8:	f10d 0209 	add.w	r2, sp, #9
 800bcec:	eba2 020e 	sub.w	r2, r2, lr
 800bcf0:	4565      	cmp	r5, ip
 800bcf2:	bf88      	it	hi
 800bcf4:	2200      	movhi	r2, #0
 800bcf6:	4413      	add	r3, r2
 800bcf8:	1a18      	subs	r0, r3, r0
 800bcfa:	b003      	add	sp, #12
 800bcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd02:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bd06:	e7ed      	b.n	800bce4 <__exponent+0x4c>
 800bd08:	2330      	movs	r3, #48	; 0x30
 800bd0a:	3130      	adds	r1, #48	; 0x30
 800bd0c:	7083      	strb	r3, [r0, #2]
 800bd0e:	70c1      	strb	r1, [r0, #3]
 800bd10:	1d03      	adds	r3, r0, #4
 800bd12:	e7f1      	b.n	800bcf8 <__exponent+0x60>

0800bd14 <_printf_float>:
 800bd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	ed2d 8b02 	vpush	{d8}
 800bd1c:	b08d      	sub	sp, #52	; 0x34
 800bd1e:	460c      	mov	r4, r1
 800bd20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd24:	4616      	mov	r6, r2
 800bd26:	461f      	mov	r7, r3
 800bd28:	4605      	mov	r5, r0
 800bd2a:	f002 ff69 	bl	800ec00 <_localeconv_r>
 800bd2e:	f8d0 a000 	ldr.w	sl, [r0]
 800bd32:	4650      	mov	r0, sl
 800bd34:	f7f4 fa6c 	bl	8000210 <strlen>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	9305      	str	r3, [sp, #20]
 800bd40:	f8d8 3000 	ldr.w	r3, [r8]
 800bd44:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bd48:	3307      	adds	r3, #7
 800bd4a:	f023 0307 	bic.w	r3, r3, #7
 800bd4e:	f103 0208 	add.w	r2, r3, #8
 800bd52:	f8c8 2000 	str.w	r2, [r8]
 800bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd66:	9307      	str	r3, [sp, #28]
 800bd68:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd6c:	ee08 0a10 	vmov	s16, r0
 800bd70:	4b9f      	ldr	r3, [pc, #636]	; (800bff0 <_printf_float+0x2dc>)
 800bd72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd7a:	f7f4 fef7 	bl	8000b6c <__aeabi_dcmpun>
 800bd7e:	bb88      	cbnz	r0, 800bde4 <_printf_float+0xd0>
 800bd80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd84:	4b9a      	ldr	r3, [pc, #616]	; (800bff0 <_printf_float+0x2dc>)
 800bd86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd8a:	f7f4 fed1 	bl	8000b30 <__aeabi_dcmple>
 800bd8e:	bb48      	cbnz	r0, 800bde4 <_printf_float+0xd0>
 800bd90:	2200      	movs	r2, #0
 800bd92:	2300      	movs	r3, #0
 800bd94:	4640      	mov	r0, r8
 800bd96:	4649      	mov	r1, r9
 800bd98:	f7f4 fec0 	bl	8000b1c <__aeabi_dcmplt>
 800bd9c:	b110      	cbz	r0, 800bda4 <_printf_float+0x90>
 800bd9e:	232d      	movs	r3, #45	; 0x2d
 800bda0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bda4:	4b93      	ldr	r3, [pc, #588]	; (800bff4 <_printf_float+0x2e0>)
 800bda6:	4894      	ldr	r0, [pc, #592]	; (800bff8 <_printf_float+0x2e4>)
 800bda8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bdac:	bf94      	ite	ls
 800bdae:	4698      	movls	r8, r3
 800bdb0:	4680      	movhi	r8, r0
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	6123      	str	r3, [r4, #16]
 800bdb6:	9b05      	ldr	r3, [sp, #20]
 800bdb8:	f023 0204 	bic.w	r2, r3, #4
 800bdbc:	6022      	str	r2, [r4, #0]
 800bdbe:	f04f 0900 	mov.w	r9, #0
 800bdc2:	9700      	str	r7, [sp, #0]
 800bdc4:	4633      	mov	r3, r6
 800bdc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bdc8:	4621      	mov	r1, r4
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f000 f9d8 	bl	800c180 <_printf_common>
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f040 8090 	bne.w	800bef6 <_printf_float+0x1e2>
 800bdd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdda:	b00d      	add	sp, #52	; 0x34
 800bddc:	ecbd 8b02 	vpop	{d8}
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	4642      	mov	r2, r8
 800bde6:	464b      	mov	r3, r9
 800bde8:	4640      	mov	r0, r8
 800bdea:	4649      	mov	r1, r9
 800bdec:	f7f4 febe 	bl	8000b6c <__aeabi_dcmpun>
 800bdf0:	b140      	cbz	r0, 800be04 <_printf_float+0xf0>
 800bdf2:	464b      	mov	r3, r9
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bfbc      	itt	lt
 800bdf8:	232d      	movlt	r3, #45	; 0x2d
 800bdfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bdfe:	487f      	ldr	r0, [pc, #508]	; (800bffc <_printf_float+0x2e8>)
 800be00:	4b7f      	ldr	r3, [pc, #508]	; (800c000 <_printf_float+0x2ec>)
 800be02:	e7d1      	b.n	800bda8 <_printf_float+0x94>
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800be0a:	9206      	str	r2, [sp, #24]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	d13f      	bne.n	800be90 <_printf_float+0x17c>
 800be10:	2306      	movs	r3, #6
 800be12:	6063      	str	r3, [r4, #4]
 800be14:	9b05      	ldr	r3, [sp, #20]
 800be16:	6861      	ldr	r1, [r4, #4]
 800be18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be1c:	2300      	movs	r3, #0
 800be1e:	9303      	str	r3, [sp, #12]
 800be20:	ab0a      	add	r3, sp, #40	; 0x28
 800be22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be26:	ab09      	add	r3, sp, #36	; 0x24
 800be28:	ec49 8b10 	vmov	d0, r8, r9
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	6022      	str	r2, [r4, #0]
 800be30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be34:	4628      	mov	r0, r5
 800be36:	f7ff fecd 	bl	800bbd4 <__cvt>
 800be3a:	9b06      	ldr	r3, [sp, #24]
 800be3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be3e:	2b47      	cmp	r3, #71	; 0x47
 800be40:	4680      	mov	r8, r0
 800be42:	d108      	bne.n	800be56 <_printf_float+0x142>
 800be44:	1cc8      	adds	r0, r1, #3
 800be46:	db02      	blt.n	800be4e <_printf_float+0x13a>
 800be48:	6863      	ldr	r3, [r4, #4]
 800be4a:	4299      	cmp	r1, r3
 800be4c:	dd41      	ble.n	800bed2 <_printf_float+0x1be>
 800be4e:	f1ab 0b02 	sub.w	fp, fp, #2
 800be52:	fa5f fb8b 	uxtb.w	fp, fp
 800be56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be5a:	d820      	bhi.n	800be9e <_printf_float+0x18a>
 800be5c:	3901      	subs	r1, #1
 800be5e:	465a      	mov	r2, fp
 800be60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be64:	9109      	str	r1, [sp, #36]	; 0x24
 800be66:	f7ff ff17 	bl	800bc98 <__exponent>
 800be6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be6c:	1813      	adds	r3, r2, r0
 800be6e:	2a01      	cmp	r2, #1
 800be70:	4681      	mov	r9, r0
 800be72:	6123      	str	r3, [r4, #16]
 800be74:	dc02      	bgt.n	800be7c <_printf_float+0x168>
 800be76:	6822      	ldr	r2, [r4, #0]
 800be78:	07d2      	lsls	r2, r2, #31
 800be7a:	d501      	bpl.n	800be80 <_printf_float+0x16c>
 800be7c:	3301      	adds	r3, #1
 800be7e:	6123      	str	r3, [r4, #16]
 800be80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be84:	2b00      	cmp	r3, #0
 800be86:	d09c      	beq.n	800bdc2 <_printf_float+0xae>
 800be88:	232d      	movs	r3, #45	; 0x2d
 800be8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be8e:	e798      	b.n	800bdc2 <_printf_float+0xae>
 800be90:	9a06      	ldr	r2, [sp, #24]
 800be92:	2a47      	cmp	r2, #71	; 0x47
 800be94:	d1be      	bne.n	800be14 <_printf_float+0x100>
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1bc      	bne.n	800be14 <_printf_float+0x100>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e7b9      	b.n	800be12 <_printf_float+0xfe>
 800be9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bea2:	d118      	bne.n	800bed6 <_printf_float+0x1c2>
 800bea4:	2900      	cmp	r1, #0
 800bea6:	6863      	ldr	r3, [r4, #4]
 800bea8:	dd0b      	ble.n	800bec2 <_printf_float+0x1ae>
 800beaa:	6121      	str	r1, [r4, #16]
 800beac:	b913      	cbnz	r3, 800beb4 <_printf_float+0x1a0>
 800beae:	6822      	ldr	r2, [r4, #0]
 800beb0:	07d0      	lsls	r0, r2, #31
 800beb2:	d502      	bpl.n	800beba <_printf_float+0x1a6>
 800beb4:	3301      	adds	r3, #1
 800beb6:	440b      	add	r3, r1
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	65a1      	str	r1, [r4, #88]	; 0x58
 800bebc:	f04f 0900 	mov.w	r9, #0
 800bec0:	e7de      	b.n	800be80 <_printf_float+0x16c>
 800bec2:	b913      	cbnz	r3, 800beca <_printf_float+0x1b6>
 800bec4:	6822      	ldr	r2, [r4, #0]
 800bec6:	07d2      	lsls	r2, r2, #31
 800bec8:	d501      	bpl.n	800bece <_printf_float+0x1ba>
 800beca:	3302      	adds	r3, #2
 800becc:	e7f4      	b.n	800beb8 <_printf_float+0x1a4>
 800bece:	2301      	movs	r3, #1
 800bed0:	e7f2      	b.n	800beb8 <_printf_float+0x1a4>
 800bed2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed8:	4299      	cmp	r1, r3
 800beda:	db05      	blt.n	800bee8 <_printf_float+0x1d4>
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	6121      	str	r1, [r4, #16]
 800bee0:	07d8      	lsls	r0, r3, #31
 800bee2:	d5ea      	bpl.n	800beba <_printf_float+0x1a6>
 800bee4:	1c4b      	adds	r3, r1, #1
 800bee6:	e7e7      	b.n	800beb8 <_printf_float+0x1a4>
 800bee8:	2900      	cmp	r1, #0
 800beea:	bfd4      	ite	le
 800beec:	f1c1 0202 	rsble	r2, r1, #2
 800bef0:	2201      	movgt	r2, #1
 800bef2:	4413      	add	r3, r2
 800bef4:	e7e0      	b.n	800beb8 <_printf_float+0x1a4>
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	055a      	lsls	r2, r3, #21
 800befa:	d407      	bmi.n	800bf0c <_printf_float+0x1f8>
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	4642      	mov	r2, r8
 800bf00:	4631      	mov	r1, r6
 800bf02:	4628      	mov	r0, r5
 800bf04:	47b8      	blx	r7
 800bf06:	3001      	adds	r0, #1
 800bf08:	d12c      	bne.n	800bf64 <_printf_float+0x250>
 800bf0a:	e764      	b.n	800bdd6 <_printf_float+0xc2>
 800bf0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf10:	f240 80e0 	bls.w	800c0d4 <_printf_float+0x3c0>
 800bf14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf18:	2200      	movs	r2, #0
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f7f4 fdf4 	bl	8000b08 <__aeabi_dcmpeq>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d034      	beq.n	800bf8e <_printf_float+0x27a>
 800bf24:	4a37      	ldr	r2, [pc, #220]	; (800c004 <_printf_float+0x2f0>)
 800bf26:	2301      	movs	r3, #1
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	47b8      	blx	r7
 800bf2e:	3001      	adds	r0, #1
 800bf30:	f43f af51 	beq.w	800bdd6 <_printf_float+0xc2>
 800bf34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	db02      	blt.n	800bf42 <_printf_float+0x22e>
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	07d8      	lsls	r0, r3, #31
 800bf40:	d510      	bpl.n	800bf64 <_printf_float+0x250>
 800bf42:	ee18 3a10 	vmov	r3, s16
 800bf46:	4652      	mov	r2, sl
 800bf48:	4631      	mov	r1, r6
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	47b8      	blx	r7
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f43f af41 	beq.w	800bdd6 <_printf_float+0xc2>
 800bf54:	f04f 0800 	mov.w	r8, #0
 800bf58:	f104 091a 	add.w	r9, r4, #26
 800bf5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	4543      	cmp	r3, r8
 800bf62:	dc09      	bgt.n	800bf78 <_printf_float+0x264>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	079b      	lsls	r3, r3, #30
 800bf68:	f100 8105 	bmi.w	800c176 <_printf_float+0x462>
 800bf6c:	68e0      	ldr	r0, [r4, #12]
 800bf6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf70:	4298      	cmp	r0, r3
 800bf72:	bfb8      	it	lt
 800bf74:	4618      	movlt	r0, r3
 800bf76:	e730      	b.n	800bdda <_printf_float+0xc6>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	464a      	mov	r2, r9
 800bf7c:	4631      	mov	r1, r6
 800bf7e:	4628      	mov	r0, r5
 800bf80:	47b8      	blx	r7
 800bf82:	3001      	adds	r0, #1
 800bf84:	f43f af27 	beq.w	800bdd6 <_printf_float+0xc2>
 800bf88:	f108 0801 	add.w	r8, r8, #1
 800bf8c:	e7e6      	b.n	800bf5c <_printf_float+0x248>
 800bf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dc39      	bgt.n	800c008 <_printf_float+0x2f4>
 800bf94:	4a1b      	ldr	r2, [pc, #108]	; (800c004 <_printf_float+0x2f0>)
 800bf96:	2301      	movs	r3, #1
 800bf98:	4631      	mov	r1, r6
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	47b8      	blx	r7
 800bf9e:	3001      	adds	r0, #1
 800bfa0:	f43f af19 	beq.w	800bdd6 <_printf_float+0xc2>
 800bfa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	d102      	bne.n	800bfb2 <_printf_float+0x29e>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	d5d8      	bpl.n	800bf64 <_printf_float+0x250>
 800bfb2:	ee18 3a10 	vmov	r3, s16
 800bfb6:	4652      	mov	r2, sl
 800bfb8:	4631      	mov	r1, r6
 800bfba:	4628      	mov	r0, r5
 800bfbc:	47b8      	blx	r7
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	f43f af09 	beq.w	800bdd6 <_printf_float+0xc2>
 800bfc4:	f04f 0900 	mov.w	r9, #0
 800bfc8:	f104 0a1a 	add.w	sl, r4, #26
 800bfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfce:	425b      	negs	r3, r3
 800bfd0:	454b      	cmp	r3, r9
 800bfd2:	dc01      	bgt.n	800bfd8 <_printf_float+0x2c4>
 800bfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd6:	e792      	b.n	800befe <_printf_float+0x1ea>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	4652      	mov	r2, sl
 800bfdc:	4631      	mov	r1, r6
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b8      	blx	r7
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	f43f aef7 	beq.w	800bdd6 <_printf_float+0xc2>
 800bfe8:	f109 0901 	add.w	r9, r9, #1
 800bfec:	e7ee      	b.n	800bfcc <_printf_float+0x2b8>
 800bfee:	bf00      	nop
 800bff0:	7fefffff 	.word	0x7fefffff
 800bff4:	080119c8 	.word	0x080119c8
 800bff8:	080119cc 	.word	0x080119cc
 800bffc:	080119d4 	.word	0x080119d4
 800c000:	080119d0 	.word	0x080119d0
 800c004:	080119d8 	.word	0x080119d8
 800c008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c00c:	429a      	cmp	r2, r3
 800c00e:	bfa8      	it	ge
 800c010:	461a      	movge	r2, r3
 800c012:	2a00      	cmp	r2, #0
 800c014:	4691      	mov	r9, r2
 800c016:	dc37      	bgt.n	800c088 <_printf_float+0x374>
 800c018:	f04f 0b00 	mov.w	fp, #0
 800c01c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c020:	f104 021a 	add.w	r2, r4, #26
 800c024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c026:	9305      	str	r3, [sp, #20]
 800c028:	eba3 0309 	sub.w	r3, r3, r9
 800c02c:	455b      	cmp	r3, fp
 800c02e:	dc33      	bgt.n	800c098 <_printf_float+0x384>
 800c030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c034:	429a      	cmp	r2, r3
 800c036:	db3b      	blt.n	800c0b0 <_printf_float+0x39c>
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	07da      	lsls	r2, r3, #31
 800c03c:	d438      	bmi.n	800c0b0 <_printf_float+0x39c>
 800c03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c040:	9a05      	ldr	r2, [sp, #20]
 800c042:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c044:	1a9a      	subs	r2, r3, r2
 800c046:	eba3 0901 	sub.w	r9, r3, r1
 800c04a:	4591      	cmp	r9, r2
 800c04c:	bfa8      	it	ge
 800c04e:	4691      	movge	r9, r2
 800c050:	f1b9 0f00 	cmp.w	r9, #0
 800c054:	dc35      	bgt.n	800c0c2 <_printf_float+0x3ae>
 800c056:	f04f 0800 	mov.w	r8, #0
 800c05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c05e:	f104 0a1a 	add.w	sl, r4, #26
 800c062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c066:	1a9b      	subs	r3, r3, r2
 800c068:	eba3 0309 	sub.w	r3, r3, r9
 800c06c:	4543      	cmp	r3, r8
 800c06e:	f77f af79 	ble.w	800bf64 <_printf_float+0x250>
 800c072:	2301      	movs	r3, #1
 800c074:	4652      	mov	r2, sl
 800c076:	4631      	mov	r1, r6
 800c078:	4628      	mov	r0, r5
 800c07a:	47b8      	blx	r7
 800c07c:	3001      	adds	r0, #1
 800c07e:	f43f aeaa 	beq.w	800bdd6 <_printf_float+0xc2>
 800c082:	f108 0801 	add.w	r8, r8, #1
 800c086:	e7ec      	b.n	800c062 <_printf_float+0x34e>
 800c088:	4613      	mov	r3, r2
 800c08a:	4631      	mov	r1, r6
 800c08c:	4642      	mov	r2, r8
 800c08e:	4628      	mov	r0, r5
 800c090:	47b8      	blx	r7
 800c092:	3001      	adds	r0, #1
 800c094:	d1c0      	bne.n	800c018 <_printf_float+0x304>
 800c096:	e69e      	b.n	800bdd6 <_printf_float+0xc2>
 800c098:	2301      	movs	r3, #1
 800c09a:	4631      	mov	r1, r6
 800c09c:	4628      	mov	r0, r5
 800c09e:	9205      	str	r2, [sp, #20]
 800c0a0:	47b8      	blx	r7
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	f43f ae97 	beq.w	800bdd6 <_printf_float+0xc2>
 800c0a8:	9a05      	ldr	r2, [sp, #20]
 800c0aa:	f10b 0b01 	add.w	fp, fp, #1
 800c0ae:	e7b9      	b.n	800c024 <_printf_float+0x310>
 800c0b0:	ee18 3a10 	vmov	r3, s16
 800c0b4:	4652      	mov	r2, sl
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	47b8      	blx	r7
 800c0bc:	3001      	adds	r0, #1
 800c0be:	d1be      	bne.n	800c03e <_printf_float+0x32a>
 800c0c0:	e689      	b.n	800bdd6 <_printf_float+0xc2>
 800c0c2:	9a05      	ldr	r2, [sp, #20]
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	4442      	add	r2, r8
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b8      	blx	r7
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	d1c1      	bne.n	800c056 <_printf_float+0x342>
 800c0d2:	e680      	b.n	800bdd6 <_printf_float+0xc2>
 800c0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0d6:	2a01      	cmp	r2, #1
 800c0d8:	dc01      	bgt.n	800c0de <_printf_float+0x3ca>
 800c0da:	07db      	lsls	r3, r3, #31
 800c0dc:	d538      	bpl.n	800c150 <_printf_float+0x43c>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b8      	blx	r7
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	f43f ae74 	beq.w	800bdd6 <_printf_float+0xc2>
 800c0ee:	ee18 3a10 	vmov	r3, s16
 800c0f2:	4652      	mov	r2, sl
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	47b8      	blx	r7
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	f43f ae6b 	beq.w	800bdd6 <_printf_float+0xc2>
 800c100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c104:	2200      	movs	r2, #0
 800c106:	2300      	movs	r3, #0
 800c108:	f7f4 fcfe 	bl	8000b08 <__aeabi_dcmpeq>
 800c10c:	b9d8      	cbnz	r0, 800c146 <_printf_float+0x432>
 800c10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c110:	f108 0201 	add.w	r2, r8, #1
 800c114:	3b01      	subs	r3, #1
 800c116:	4631      	mov	r1, r6
 800c118:	4628      	mov	r0, r5
 800c11a:	47b8      	blx	r7
 800c11c:	3001      	adds	r0, #1
 800c11e:	d10e      	bne.n	800c13e <_printf_float+0x42a>
 800c120:	e659      	b.n	800bdd6 <_printf_float+0xc2>
 800c122:	2301      	movs	r3, #1
 800c124:	4652      	mov	r2, sl
 800c126:	4631      	mov	r1, r6
 800c128:	4628      	mov	r0, r5
 800c12a:	47b8      	blx	r7
 800c12c:	3001      	adds	r0, #1
 800c12e:	f43f ae52 	beq.w	800bdd6 <_printf_float+0xc2>
 800c132:	f108 0801 	add.w	r8, r8, #1
 800c136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c138:	3b01      	subs	r3, #1
 800c13a:	4543      	cmp	r3, r8
 800c13c:	dcf1      	bgt.n	800c122 <_printf_float+0x40e>
 800c13e:	464b      	mov	r3, r9
 800c140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c144:	e6dc      	b.n	800bf00 <_printf_float+0x1ec>
 800c146:	f04f 0800 	mov.w	r8, #0
 800c14a:	f104 0a1a 	add.w	sl, r4, #26
 800c14e:	e7f2      	b.n	800c136 <_printf_float+0x422>
 800c150:	2301      	movs	r3, #1
 800c152:	4642      	mov	r2, r8
 800c154:	e7df      	b.n	800c116 <_printf_float+0x402>
 800c156:	2301      	movs	r3, #1
 800c158:	464a      	mov	r2, r9
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	f43f ae38 	beq.w	800bdd6 <_printf_float+0xc2>
 800c166:	f108 0801 	add.w	r8, r8, #1
 800c16a:	68e3      	ldr	r3, [r4, #12]
 800c16c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c16e:	1a5b      	subs	r3, r3, r1
 800c170:	4543      	cmp	r3, r8
 800c172:	dcf0      	bgt.n	800c156 <_printf_float+0x442>
 800c174:	e6fa      	b.n	800bf6c <_printf_float+0x258>
 800c176:	f04f 0800 	mov.w	r8, #0
 800c17a:	f104 0919 	add.w	r9, r4, #25
 800c17e:	e7f4      	b.n	800c16a <_printf_float+0x456>

0800c180 <_printf_common>:
 800c180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c184:	4616      	mov	r6, r2
 800c186:	4699      	mov	r9, r3
 800c188:	688a      	ldr	r2, [r1, #8]
 800c18a:	690b      	ldr	r3, [r1, #16]
 800c18c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c190:	4293      	cmp	r3, r2
 800c192:	bfb8      	it	lt
 800c194:	4613      	movlt	r3, r2
 800c196:	6033      	str	r3, [r6, #0]
 800c198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c19c:	4607      	mov	r7, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b10a      	cbz	r2, 800c1a6 <_printf_common+0x26>
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	6033      	str	r3, [r6, #0]
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	0699      	lsls	r1, r3, #26
 800c1aa:	bf42      	ittt	mi
 800c1ac:	6833      	ldrmi	r3, [r6, #0]
 800c1ae:	3302      	addmi	r3, #2
 800c1b0:	6033      	strmi	r3, [r6, #0]
 800c1b2:	6825      	ldr	r5, [r4, #0]
 800c1b4:	f015 0506 	ands.w	r5, r5, #6
 800c1b8:	d106      	bne.n	800c1c8 <_printf_common+0x48>
 800c1ba:	f104 0a19 	add.w	sl, r4, #25
 800c1be:	68e3      	ldr	r3, [r4, #12]
 800c1c0:	6832      	ldr	r2, [r6, #0]
 800c1c2:	1a9b      	subs	r3, r3, r2
 800c1c4:	42ab      	cmp	r3, r5
 800c1c6:	dc26      	bgt.n	800c216 <_printf_common+0x96>
 800c1c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1cc:	1e13      	subs	r3, r2, #0
 800c1ce:	6822      	ldr	r2, [r4, #0]
 800c1d0:	bf18      	it	ne
 800c1d2:	2301      	movne	r3, #1
 800c1d4:	0692      	lsls	r2, r2, #26
 800c1d6:	d42b      	bmi.n	800c230 <_printf_common+0xb0>
 800c1d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1dc:	4649      	mov	r1, r9
 800c1de:	4638      	mov	r0, r7
 800c1e0:	47c0      	blx	r8
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d01e      	beq.n	800c224 <_printf_common+0xa4>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	68e5      	ldr	r5, [r4, #12]
 800c1ea:	6832      	ldr	r2, [r6, #0]
 800c1ec:	f003 0306 	and.w	r3, r3, #6
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	bf08      	it	eq
 800c1f4:	1aad      	subeq	r5, r5, r2
 800c1f6:	68a3      	ldr	r3, [r4, #8]
 800c1f8:	6922      	ldr	r2, [r4, #16]
 800c1fa:	bf0c      	ite	eq
 800c1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c200:	2500      	movne	r5, #0
 800c202:	4293      	cmp	r3, r2
 800c204:	bfc4      	itt	gt
 800c206:	1a9b      	subgt	r3, r3, r2
 800c208:	18ed      	addgt	r5, r5, r3
 800c20a:	2600      	movs	r6, #0
 800c20c:	341a      	adds	r4, #26
 800c20e:	42b5      	cmp	r5, r6
 800c210:	d11a      	bne.n	800c248 <_printf_common+0xc8>
 800c212:	2000      	movs	r0, #0
 800c214:	e008      	b.n	800c228 <_printf_common+0xa8>
 800c216:	2301      	movs	r3, #1
 800c218:	4652      	mov	r2, sl
 800c21a:	4649      	mov	r1, r9
 800c21c:	4638      	mov	r0, r7
 800c21e:	47c0      	blx	r8
 800c220:	3001      	adds	r0, #1
 800c222:	d103      	bne.n	800c22c <_printf_common+0xac>
 800c224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22c:	3501      	adds	r5, #1
 800c22e:	e7c6      	b.n	800c1be <_printf_common+0x3e>
 800c230:	18e1      	adds	r1, r4, r3
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	2030      	movs	r0, #48	; 0x30
 800c236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c23a:	4422      	add	r2, r4
 800c23c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c244:	3302      	adds	r3, #2
 800c246:	e7c7      	b.n	800c1d8 <_printf_common+0x58>
 800c248:	2301      	movs	r3, #1
 800c24a:	4622      	mov	r2, r4
 800c24c:	4649      	mov	r1, r9
 800c24e:	4638      	mov	r0, r7
 800c250:	47c0      	blx	r8
 800c252:	3001      	adds	r0, #1
 800c254:	d0e6      	beq.n	800c224 <_printf_common+0xa4>
 800c256:	3601      	adds	r6, #1
 800c258:	e7d9      	b.n	800c20e <_printf_common+0x8e>
	...

0800c25c <_printf_i>:
 800c25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c260:	7e0f      	ldrb	r7, [r1, #24]
 800c262:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c264:	2f78      	cmp	r7, #120	; 0x78
 800c266:	4691      	mov	r9, r2
 800c268:	4680      	mov	r8, r0
 800c26a:	460c      	mov	r4, r1
 800c26c:	469a      	mov	sl, r3
 800c26e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c272:	d807      	bhi.n	800c284 <_printf_i+0x28>
 800c274:	2f62      	cmp	r7, #98	; 0x62
 800c276:	d80a      	bhi.n	800c28e <_printf_i+0x32>
 800c278:	2f00      	cmp	r7, #0
 800c27a:	f000 80d8 	beq.w	800c42e <_printf_i+0x1d2>
 800c27e:	2f58      	cmp	r7, #88	; 0x58
 800c280:	f000 80a3 	beq.w	800c3ca <_printf_i+0x16e>
 800c284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c28c:	e03a      	b.n	800c304 <_printf_i+0xa8>
 800c28e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c292:	2b15      	cmp	r3, #21
 800c294:	d8f6      	bhi.n	800c284 <_printf_i+0x28>
 800c296:	a101      	add	r1, pc, #4	; (adr r1, 800c29c <_printf_i+0x40>)
 800c298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c29c:	0800c2f5 	.word	0x0800c2f5
 800c2a0:	0800c309 	.word	0x0800c309
 800c2a4:	0800c285 	.word	0x0800c285
 800c2a8:	0800c285 	.word	0x0800c285
 800c2ac:	0800c285 	.word	0x0800c285
 800c2b0:	0800c285 	.word	0x0800c285
 800c2b4:	0800c309 	.word	0x0800c309
 800c2b8:	0800c285 	.word	0x0800c285
 800c2bc:	0800c285 	.word	0x0800c285
 800c2c0:	0800c285 	.word	0x0800c285
 800c2c4:	0800c285 	.word	0x0800c285
 800c2c8:	0800c415 	.word	0x0800c415
 800c2cc:	0800c339 	.word	0x0800c339
 800c2d0:	0800c3f7 	.word	0x0800c3f7
 800c2d4:	0800c285 	.word	0x0800c285
 800c2d8:	0800c285 	.word	0x0800c285
 800c2dc:	0800c437 	.word	0x0800c437
 800c2e0:	0800c285 	.word	0x0800c285
 800c2e4:	0800c339 	.word	0x0800c339
 800c2e8:	0800c285 	.word	0x0800c285
 800c2ec:	0800c285 	.word	0x0800c285
 800c2f0:	0800c3ff 	.word	0x0800c3ff
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	1d1a      	adds	r2, r3, #4
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	602a      	str	r2, [r5, #0]
 800c2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c304:	2301      	movs	r3, #1
 800c306:	e0a3      	b.n	800c450 <_printf_i+0x1f4>
 800c308:	6820      	ldr	r0, [r4, #0]
 800c30a:	6829      	ldr	r1, [r5, #0]
 800c30c:	0606      	lsls	r6, r0, #24
 800c30e:	f101 0304 	add.w	r3, r1, #4
 800c312:	d50a      	bpl.n	800c32a <_printf_i+0xce>
 800c314:	680e      	ldr	r6, [r1, #0]
 800c316:	602b      	str	r3, [r5, #0]
 800c318:	2e00      	cmp	r6, #0
 800c31a:	da03      	bge.n	800c324 <_printf_i+0xc8>
 800c31c:	232d      	movs	r3, #45	; 0x2d
 800c31e:	4276      	negs	r6, r6
 800c320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c324:	485e      	ldr	r0, [pc, #376]	; (800c4a0 <_printf_i+0x244>)
 800c326:	230a      	movs	r3, #10
 800c328:	e019      	b.n	800c35e <_printf_i+0x102>
 800c32a:	680e      	ldr	r6, [r1, #0]
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c332:	bf18      	it	ne
 800c334:	b236      	sxthne	r6, r6
 800c336:	e7ef      	b.n	800c318 <_printf_i+0xbc>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	6820      	ldr	r0, [r4, #0]
 800c33c:	1d19      	adds	r1, r3, #4
 800c33e:	6029      	str	r1, [r5, #0]
 800c340:	0601      	lsls	r1, r0, #24
 800c342:	d501      	bpl.n	800c348 <_printf_i+0xec>
 800c344:	681e      	ldr	r6, [r3, #0]
 800c346:	e002      	b.n	800c34e <_printf_i+0xf2>
 800c348:	0646      	lsls	r6, r0, #25
 800c34a:	d5fb      	bpl.n	800c344 <_printf_i+0xe8>
 800c34c:	881e      	ldrh	r6, [r3, #0]
 800c34e:	4854      	ldr	r0, [pc, #336]	; (800c4a0 <_printf_i+0x244>)
 800c350:	2f6f      	cmp	r7, #111	; 0x6f
 800c352:	bf0c      	ite	eq
 800c354:	2308      	moveq	r3, #8
 800c356:	230a      	movne	r3, #10
 800c358:	2100      	movs	r1, #0
 800c35a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c35e:	6865      	ldr	r5, [r4, #4]
 800c360:	60a5      	str	r5, [r4, #8]
 800c362:	2d00      	cmp	r5, #0
 800c364:	bfa2      	ittt	ge
 800c366:	6821      	ldrge	r1, [r4, #0]
 800c368:	f021 0104 	bicge.w	r1, r1, #4
 800c36c:	6021      	strge	r1, [r4, #0]
 800c36e:	b90e      	cbnz	r6, 800c374 <_printf_i+0x118>
 800c370:	2d00      	cmp	r5, #0
 800c372:	d04d      	beq.n	800c410 <_printf_i+0x1b4>
 800c374:	4615      	mov	r5, r2
 800c376:	fbb6 f1f3 	udiv	r1, r6, r3
 800c37a:	fb03 6711 	mls	r7, r3, r1, r6
 800c37e:	5dc7      	ldrb	r7, [r0, r7]
 800c380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c384:	4637      	mov	r7, r6
 800c386:	42bb      	cmp	r3, r7
 800c388:	460e      	mov	r6, r1
 800c38a:	d9f4      	bls.n	800c376 <_printf_i+0x11a>
 800c38c:	2b08      	cmp	r3, #8
 800c38e:	d10b      	bne.n	800c3a8 <_printf_i+0x14c>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	07de      	lsls	r6, r3, #31
 800c394:	d508      	bpl.n	800c3a8 <_printf_i+0x14c>
 800c396:	6923      	ldr	r3, [r4, #16]
 800c398:	6861      	ldr	r1, [r4, #4]
 800c39a:	4299      	cmp	r1, r3
 800c39c:	bfde      	ittt	le
 800c39e:	2330      	movle	r3, #48	; 0x30
 800c3a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c3a8:	1b52      	subs	r2, r2, r5
 800c3aa:	6122      	str	r2, [r4, #16]
 800c3ac:	f8cd a000 	str.w	sl, [sp]
 800c3b0:	464b      	mov	r3, r9
 800c3b2:	aa03      	add	r2, sp, #12
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	f7ff fee2 	bl	800c180 <_printf_common>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d14c      	bne.n	800c45a <_printf_i+0x1fe>
 800c3c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3c4:	b004      	add	sp, #16
 800c3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ca:	4835      	ldr	r0, [pc, #212]	; (800c4a0 <_printf_i+0x244>)
 800c3cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c3d0:	6829      	ldr	r1, [r5, #0]
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3d8:	6029      	str	r1, [r5, #0]
 800c3da:	061d      	lsls	r5, r3, #24
 800c3dc:	d514      	bpl.n	800c408 <_printf_i+0x1ac>
 800c3de:	07df      	lsls	r7, r3, #31
 800c3e0:	bf44      	itt	mi
 800c3e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c3e6:	6023      	strmi	r3, [r4, #0]
 800c3e8:	b91e      	cbnz	r6, 800c3f2 <_printf_i+0x196>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	f023 0320 	bic.w	r3, r3, #32
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	2310      	movs	r3, #16
 800c3f4:	e7b0      	b.n	800c358 <_printf_i+0xfc>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	f043 0320 	orr.w	r3, r3, #32
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	2378      	movs	r3, #120	; 0x78
 800c400:	4828      	ldr	r0, [pc, #160]	; (800c4a4 <_printf_i+0x248>)
 800c402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c406:	e7e3      	b.n	800c3d0 <_printf_i+0x174>
 800c408:	0659      	lsls	r1, r3, #25
 800c40a:	bf48      	it	mi
 800c40c:	b2b6      	uxthmi	r6, r6
 800c40e:	e7e6      	b.n	800c3de <_printf_i+0x182>
 800c410:	4615      	mov	r5, r2
 800c412:	e7bb      	b.n	800c38c <_printf_i+0x130>
 800c414:	682b      	ldr	r3, [r5, #0]
 800c416:	6826      	ldr	r6, [r4, #0]
 800c418:	6961      	ldr	r1, [r4, #20]
 800c41a:	1d18      	adds	r0, r3, #4
 800c41c:	6028      	str	r0, [r5, #0]
 800c41e:	0635      	lsls	r5, r6, #24
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	d501      	bpl.n	800c428 <_printf_i+0x1cc>
 800c424:	6019      	str	r1, [r3, #0]
 800c426:	e002      	b.n	800c42e <_printf_i+0x1d2>
 800c428:	0670      	lsls	r0, r6, #25
 800c42a:	d5fb      	bpl.n	800c424 <_printf_i+0x1c8>
 800c42c:	8019      	strh	r1, [r3, #0]
 800c42e:	2300      	movs	r3, #0
 800c430:	6123      	str	r3, [r4, #16]
 800c432:	4615      	mov	r5, r2
 800c434:	e7ba      	b.n	800c3ac <_printf_i+0x150>
 800c436:	682b      	ldr	r3, [r5, #0]
 800c438:	1d1a      	adds	r2, r3, #4
 800c43a:	602a      	str	r2, [r5, #0]
 800c43c:	681d      	ldr	r5, [r3, #0]
 800c43e:	6862      	ldr	r2, [r4, #4]
 800c440:	2100      	movs	r1, #0
 800c442:	4628      	mov	r0, r5
 800c444:	f7f3 feec 	bl	8000220 <memchr>
 800c448:	b108      	cbz	r0, 800c44e <_printf_i+0x1f2>
 800c44a:	1b40      	subs	r0, r0, r5
 800c44c:	6060      	str	r0, [r4, #4]
 800c44e:	6863      	ldr	r3, [r4, #4]
 800c450:	6123      	str	r3, [r4, #16]
 800c452:	2300      	movs	r3, #0
 800c454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c458:	e7a8      	b.n	800c3ac <_printf_i+0x150>
 800c45a:	6923      	ldr	r3, [r4, #16]
 800c45c:	462a      	mov	r2, r5
 800c45e:	4649      	mov	r1, r9
 800c460:	4640      	mov	r0, r8
 800c462:	47d0      	blx	sl
 800c464:	3001      	adds	r0, #1
 800c466:	d0ab      	beq.n	800c3c0 <_printf_i+0x164>
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	079b      	lsls	r3, r3, #30
 800c46c:	d413      	bmi.n	800c496 <_printf_i+0x23a>
 800c46e:	68e0      	ldr	r0, [r4, #12]
 800c470:	9b03      	ldr	r3, [sp, #12]
 800c472:	4298      	cmp	r0, r3
 800c474:	bfb8      	it	lt
 800c476:	4618      	movlt	r0, r3
 800c478:	e7a4      	b.n	800c3c4 <_printf_i+0x168>
 800c47a:	2301      	movs	r3, #1
 800c47c:	4632      	mov	r2, r6
 800c47e:	4649      	mov	r1, r9
 800c480:	4640      	mov	r0, r8
 800c482:	47d0      	blx	sl
 800c484:	3001      	adds	r0, #1
 800c486:	d09b      	beq.n	800c3c0 <_printf_i+0x164>
 800c488:	3501      	adds	r5, #1
 800c48a:	68e3      	ldr	r3, [r4, #12]
 800c48c:	9903      	ldr	r1, [sp, #12]
 800c48e:	1a5b      	subs	r3, r3, r1
 800c490:	42ab      	cmp	r3, r5
 800c492:	dcf2      	bgt.n	800c47a <_printf_i+0x21e>
 800c494:	e7eb      	b.n	800c46e <_printf_i+0x212>
 800c496:	2500      	movs	r5, #0
 800c498:	f104 0619 	add.w	r6, r4, #25
 800c49c:	e7f5      	b.n	800c48a <_printf_i+0x22e>
 800c49e:	bf00      	nop
 800c4a0:	080119da 	.word	0x080119da
 800c4a4:	080119eb 	.word	0x080119eb

0800c4a8 <iprintf>:
 800c4a8:	b40f      	push	{r0, r1, r2, r3}
 800c4aa:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <iprintf+0x2c>)
 800c4ac:	b513      	push	{r0, r1, r4, lr}
 800c4ae:	681c      	ldr	r4, [r3, #0]
 800c4b0:	b124      	cbz	r4, 800c4bc <iprintf+0x14>
 800c4b2:	69a3      	ldr	r3, [r4, #24]
 800c4b4:	b913      	cbnz	r3, 800c4bc <iprintf+0x14>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f001 ff96 	bl	800e3e8 <__sinit>
 800c4bc:	ab05      	add	r3, sp, #20
 800c4be:	9a04      	ldr	r2, [sp, #16]
 800c4c0:	68a1      	ldr	r1, [r4, #8]
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f003 fa03 	bl	800f8d0 <_vfiprintf_r>
 800c4ca:	b002      	add	sp, #8
 800c4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d0:	b004      	add	sp, #16
 800c4d2:	4770      	bx	lr
 800c4d4:	2000004c 	.word	0x2000004c

0800c4d8 <_puts_r>:
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	460e      	mov	r6, r1
 800c4dc:	4605      	mov	r5, r0
 800c4de:	b118      	cbz	r0, 800c4e8 <_puts_r+0x10>
 800c4e0:	6983      	ldr	r3, [r0, #24]
 800c4e2:	b90b      	cbnz	r3, 800c4e8 <_puts_r+0x10>
 800c4e4:	f001 ff80 	bl	800e3e8 <__sinit>
 800c4e8:	69ab      	ldr	r3, [r5, #24]
 800c4ea:	68ac      	ldr	r4, [r5, #8]
 800c4ec:	b913      	cbnz	r3, 800c4f4 <_puts_r+0x1c>
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	f001 ff7a 	bl	800e3e8 <__sinit>
 800c4f4:	4b2c      	ldr	r3, [pc, #176]	; (800c5a8 <_puts_r+0xd0>)
 800c4f6:	429c      	cmp	r4, r3
 800c4f8:	d120      	bne.n	800c53c <_puts_r+0x64>
 800c4fa:	686c      	ldr	r4, [r5, #4]
 800c4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4fe:	07db      	lsls	r3, r3, #31
 800c500:	d405      	bmi.n	800c50e <_puts_r+0x36>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	0598      	lsls	r0, r3, #22
 800c506:	d402      	bmi.n	800c50e <_puts_r+0x36>
 800c508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c50a:	f002 fb7e 	bl	800ec0a <__retarget_lock_acquire_recursive>
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	0719      	lsls	r1, r3, #28
 800c512:	d51d      	bpl.n	800c550 <_puts_r+0x78>
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	b1db      	cbz	r3, 800c550 <_puts_r+0x78>
 800c518:	3e01      	subs	r6, #1
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c520:	3b01      	subs	r3, #1
 800c522:	60a3      	str	r3, [r4, #8]
 800c524:	bb39      	cbnz	r1, 800c576 <_puts_r+0x9e>
 800c526:	2b00      	cmp	r3, #0
 800c528:	da38      	bge.n	800c59c <_puts_r+0xc4>
 800c52a:	4622      	mov	r2, r4
 800c52c:	210a      	movs	r1, #10
 800c52e:	4628      	mov	r0, r5
 800c530:	f000 ff04 	bl	800d33c <__swbuf_r>
 800c534:	3001      	adds	r0, #1
 800c536:	d011      	beq.n	800c55c <_puts_r+0x84>
 800c538:	250a      	movs	r5, #10
 800c53a:	e011      	b.n	800c560 <_puts_r+0x88>
 800c53c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ac <_puts_r+0xd4>)
 800c53e:	429c      	cmp	r4, r3
 800c540:	d101      	bne.n	800c546 <_puts_r+0x6e>
 800c542:	68ac      	ldr	r4, [r5, #8]
 800c544:	e7da      	b.n	800c4fc <_puts_r+0x24>
 800c546:	4b1a      	ldr	r3, [pc, #104]	; (800c5b0 <_puts_r+0xd8>)
 800c548:	429c      	cmp	r4, r3
 800c54a:	bf08      	it	eq
 800c54c:	68ec      	ldreq	r4, [r5, #12]
 800c54e:	e7d5      	b.n	800c4fc <_puts_r+0x24>
 800c550:	4621      	mov	r1, r4
 800c552:	4628      	mov	r0, r5
 800c554:	f000 ff44 	bl	800d3e0 <__swsetup_r>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d0dd      	beq.n	800c518 <_puts_r+0x40>
 800c55c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c562:	07da      	lsls	r2, r3, #31
 800c564:	d405      	bmi.n	800c572 <_puts_r+0x9a>
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	059b      	lsls	r3, r3, #22
 800c56a:	d402      	bmi.n	800c572 <_puts_r+0x9a>
 800c56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c56e:	f002 fb4d 	bl	800ec0c <__retarget_lock_release_recursive>
 800c572:	4628      	mov	r0, r5
 800c574:	bd70      	pop	{r4, r5, r6, pc}
 800c576:	2b00      	cmp	r3, #0
 800c578:	da04      	bge.n	800c584 <_puts_r+0xac>
 800c57a:	69a2      	ldr	r2, [r4, #24]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	dc06      	bgt.n	800c58e <_puts_r+0xb6>
 800c580:	290a      	cmp	r1, #10
 800c582:	d004      	beq.n	800c58e <_puts_r+0xb6>
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	6022      	str	r2, [r4, #0]
 800c58a:	7019      	strb	r1, [r3, #0]
 800c58c:	e7c5      	b.n	800c51a <_puts_r+0x42>
 800c58e:	4622      	mov	r2, r4
 800c590:	4628      	mov	r0, r5
 800c592:	f000 fed3 	bl	800d33c <__swbuf_r>
 800c596:	3001      	adds	r0, #1
 800c598:	d1bf      	bne.n	800c51a <_puts_r+0x42>
 800c59a:	e7df      	b.n	800c55c <_puts_r+0x84>
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	250a      	movs	r5, #10
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	6022      	str	r2, [r4, #0]
 800c5a4:	701d      	strb	r5, [r3, #0]
 800c5a6:	e7db      	b.n	800c560 <_puts_r+0x88>
 800c5a8:	08011c04 	.word	0x08011c04
 800c5ac:	08011c24 	.word	0x08011c24
 800c5b0:	08011be4 	.word	0x08011be4

0800c5b4 <puts>:
 800c5b4:	4b02      	ldr	r3, [pc, #8]	; (800c5c0 <puts+0xc>)
 800c5b6:	4601      	mov	r1, r0
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	f7ff bf8d 	b.w	800c4d8 <_puts_r>
 800c5be:	bf00      	nop
 800c5c0:	2000004c 	.word	0x2000004c

0800c5c4 <sulp>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	ec45 4b10 	vmov	d0, r4, r5
 800c5ce:	4616      	mov	r6, r2
 800c5d0:	f002 ff0e 	bl	800f3f0 <__ulp>
 800c5d4:	ec51 0b10 	vmov	r0, r1, d0
 800c5d8:	b17e      	cbz	r6, 800c5fa <sulp+0x36>
 800c5da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c5de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	dd09      	ble.n	800c5fa <sulp+0x36>
 800c5e6:	051b      	lsls	r3, r3, #20
 800c5e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c5ec:	2400      	movs	r4, #0
 800c5ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c5f2:	4622      	mov	r2, r4
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	f7f4 f81f 	bl	8000638 <__aeabi_dmul>
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	0000      	movs	r0, r0
	...

0800c600 <_strtod_l>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ed2d 8b02 	vpush	{d8}
 800c608:	b09d      	sub	sp, #116	; 0x74
 800c60a:	461f      	mov	r7, r3
 800c60c:	2300      	movs	r3, #0
 800c60e:	9318      	str	r3, [sp, #96]	; 0x60
 800c610:	4ba2      	ldr	r3, [pc, #648]	; (800c89c <_strtod_l+0x29c>)
 800c612:	9213      	str	r2, [sp, #76]	; 0x4c
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	9305      	str	r3, [sp, #20]
 800c618:	4604      	mov	r4, r0
 800c61a:	4618      	mov	r0, r3
 800c61c:	4688      	mov	r8, r1
 800c61e:	f7f3 fdf7 	bl	8000210 <strlen>
 800c622:	f04f 0a00 	mov.w	sl, #0
 800c626:	4605      	mov	r5, r0
 800c628:	f04f 0b00 	mov.w	fp, #0
 800c62c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c632:	781a      	ldrb	r2, [r3, #0]
 800c634:	2a2b      	cmp	r2, #43	; 0x2b
 800c636:	d04e      	beq.n	800c6d6 <_strtod_l+0xd6>
 800c638:	d83b      	bhi.n	800c6b2 <_strtod_l+0xb2>
 800c63a:	2a0d      	cmp	r2, #13
 800c63c:	d834      	bhi.n	800c6a8 <_strtod_l+0xa8>
 800c63e:	2a08      	cmp	r2, #8
 800c640:	d834      	bhi.n	800c6ac <_strtod_l+0xac>
 800c642:	2a00      	cmp	r2, #0
 800c644:	d03e      	beq.n	800c6c4 <_strtod_l+0xc4>
 800c646:	2300      	movs	r3, #0
 800c648:	930a      	str	r3, [sp, #40]	; 0x28
 800c64a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c64c:	7833      	ldrb	r3, [r6, #0]
 800c64e:	2b30      	cmp	r3, #48	; 0x30
 800c650:	f040 80b0 	bne.w	800c7b4 <_strtod_l+0x1b4>
 800c654:	7873      	ldrb	r3, [r6, #1]
 800c656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c65a:	2b58      	cmp	r3, #88	; 0x58
 800c65c:	d168      	bne.n	800c730 <_strtod_l+0x130>
 800c65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	ab18      	add	r3, sp, #96	; 0x60
 800c664:	9702      	str	r7, [sp, #8]
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	4a8d      	ldr	r2, [pc, #564]	; (800c8a0 <_strtod_l+0x2a0>)
 800c66a:	ab19      	add	r3, sp, #100	; 0x64
 800c66c:	a917      	add	r1, sp, #92	; 0x5c
 800c66e:	4620      	mov	r0, r4
 800c670:	f001 ffbe 	bl	800e5f0 <__gethex>
 800c674:	f010 0707 	ands.w	r7, r0, #7
 800c678:	4605      	mov	r5, r0
 800c67a:	d005      	beq.n	800c688 <_strtod_l+0x88>
 800c67c:	2f06      	cmp	r7, #6
 800c67e:	d12c      	bne.n	800c6da <_strtod_l+0xda>
 800c680:	3601      	adds	r6, #1
 800c682:	2300      	movs	r3, #0
 800c684:	9617      	str	r6, [sp, #92]	; 0x5c
 800c686:	930a      	str	r3, [sp, #40]	; 0x28
 800c688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f040 8590 	bne.w	800d1b0 <_strtod_l+0xbb0>
 800c690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c692:	b1eb      	cbz	r3, 800c6d0 <_strtod_l+0xd0>
 800c694:	4652      	mov	r2, sl
 800c696:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c69a:	ec43 2b10 	vmov	d0, r2, r3
 800c69e:	b01d      	add	sp, #116	; 0x74
 800c6a0:	ecbd 8b02 	vpop	{d8}
 800c6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a8:	2a20      	cmp	r2, #32
 800c6aa:	d1cc      	bne.n	800c646 <_strtod_l+0x46>
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6b0:	e7be      	b.n	800c630 <_strtod_l+0x30>
 800c6b2:	2a2d      	cmp	r2, #45	; 0x2d
 800c6b4:	d1c7      	bne.n	800c646 <_strtod_l+0x46>
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	920a      	str	r2, [sp, #40]	; 0x28
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6be:	785b      	ldrb	r3, [r3, #1]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1c2      	bne.n	800c64a <_strtod_l+0x4a>
 800c6c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f040 856e 	bne.w	800d1ac <_strtod_l+0xbac>
 800c6d0:	4652      	mov	r2, sl
 800c6d2:	465b      	mov	r3, fp
 800c6d4:	e7e1      	b.n	800c69a <_strtod_l+0x9a>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	e7ee      	b.n	800c6b8 <_strtod_l+0xb8>
 800c6da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6dc:	b13a      	cbz	r2, 800c6ee <_strtod_l+0xee>
 800c6de:	2135      	movs	r1, #53	; 0x35
 800c6e0:	a81a      	add	r0, sp, #104	; 0x68
 800c6e2:	f002 ff90 	bl	800f606 <__copybits>
 800c6e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f002 fb4f 	bl	800ed8c <_Bfree>
 800c6ee:	3f01      	subs	r7, #1
 800c6f0:	2f04      	cmp	r7, #4
 800c6f2:	d806      	bhi.n	800c702 <_strtod_l+0x102>
 800c6f4:	e8df f007 	tbb	[pc, r7]
 800c6f8:	1714030a 	.word	0x1714030a
 800c6fc:	0a          	.byte	0x0a
 800c6fd:	00          	.byte	0x00
 800c6fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c702:	0728      	lsls	r0, r5, #28
 800c704:	d5c0      	bpl.n	800c688 <_strtod_l+0x88>
 800c706:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c70a:	e7bd      	b.n	800c688 <_strtod_l+0x88>
 800c70c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c710:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c716:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c71a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c71e:	e7f0      	b.n	800c702 <_strtod_l+0x102>
 800c720:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c8a4 <_strtod_l+0x2a4>
 800c724:	e7ed      	b.n	800c702 <_strtod_l+0x102>
 800c726:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c72a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c72e:	e7e8      	b.n	800c702 <_strtod_l+0x102>
 800c730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	9217      	str	r2, [sp, #92]	; 0x5c
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	2b30      	cmp	r3, #48	; 0x30
 800c73a:	d0f9      	beq.n	800c730 <_strtod_l+0x130>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0a3      	beq.n	800c688 <_strtod_l+0x88>
 800c740:	2301      	movs	r3, #1
 800c742:	f04f 0900 	mov.w	r9, #0
 800c746:	9304      	str	r3, [sp, #16]
 800c748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c74a:	9308      	str	r3, [sp, #32]
 800c74c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c750:	464f      	mov	r7, r9
 800c752:	220a      	movs	r2, #10
 800c754:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c756:	7806      	ldrb	r6, [r0, #0]
 800c758:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c75c:	b2d9      	uxtb	r1, r3
 800c75e:	2909      	cmp	r1, #9
 800c760:	d92a      	bls.n	800c7b8 <_strtod_l+0x1b8>
 800c762:	9905      	ldr	r1, [sp, #20]
 800c764:	462a      	mov	r2, r5
 800c766:	f003 fa3e 	bl	800fbe6 <strncmp>
 800c76a:	b398      	cbz	r0, 800c7d4 <_strtod_l+0x1d4>
 800c76c:	2000      	movs	r0, #0
 800c76e:	4632      	mov	r2, r6
 800c770:	463d      	mov	r5, r7
 800c772:	9005      	str	r0, [sp, #20]
 800c774:	4603      	mov	r3, r0
 800c776:	2a65      	cmp	r2, #101	; 0x65
 800c778:	d001      	beq.n	800c77e <_strtod_l+0x17e>
 800c77a:	2a45      	cmp	r2, #69	; 0x45
 800c77c:	d118      	bne.n	800c7b0 <_strtod_l+0x1b0>
 800c77e:	b91d      	cbnz	r5, 800c788 <_strtod_l+0x188>
 800c780:	9a04      	ldr	r2, [sp, #16]
 800c782:	4302      	orrs	r2, r0
 800c784:	d09e      	beq.n	800c6c4 <_strtod_l+0xc4>
 800c786:	2500      	movs	r5, #0
 800c788:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c78c:	f108 0201 	add.w	r2, r8, #1
 800c790:	9217      	str	r2, [sp, #92]	; 0x5c
 800c792:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c796:	2a2b      	cmp	r2, #43	; 0x2b
 800c798:	d075      	beq.n	800c886 <_strtod_l+0x286>
 800c79a:	2a2d      	cmp	r2, #45	; 0x2d
 800c79c:	d07b      	beq.n	800c896 <_strtod_l+0x296>
 800c79e:	f04f 0c00 	mov.w	ip, #0
 800c7a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7a6:	2909      	cmp	r1, #9
 800c7a8:	f240 8082 	bls.w	800c8b0 <_strtod_l+0x2b0>
 800c7ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	e09d      	b.n	800c8f0 <_strtod_l+0x2f0>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e7c4      	b.n	800c742 <_strtod_l+0x142>
 800c7b8:	2f08      	cmp	r7, #8
 800c7ba:	bfd8      	it	le
 800c7bc:	9907      	ldrle	r1, [sp, #28]
 800c7be:	f100 0001 	add.w	r0, r0, #1
 800c7c2:	bfda      	itte	le
 800c7c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7c8:	9307      	strle	r3, [sp, #28]
 800c7ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c7ce:	3701      	adds	r7, #1
 800c7d0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c7d2:	e7bf      	b.n	800c754 <_strtod_l+0x154>
 800c7d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7d6:	195a      	adds	r2, r3, r5
 800c7d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7da:	5d5a      	ldrb	r2, [r3, r5]
 800c7dc:	2f00      	cmp	r7, #0
 800c7de:	d037      	beq.n	800c850 <_strtod_l+0x250>
 800c7e0:	9005      	str	r0, [sp, #20]
 800c7e2:	463d      	mov	r5, r7
 800c7e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c7e8:	2b09      	cmp	r3, #9
 800c7ea:	d912      	bls.n	800c812 <_strtod_l+0x212>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e7c2      	b.n	800c776 <_strtod_l+0x176>
 800c7f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7f6:	785a      	ldrb	r2, [r3, #1]
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	2a30      	cmp	r2, #48	; 0x30
 800c7fc:	d0f8      	beq.n	800c7f0 <_strtod_l+0x1f0>
 800c7fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c802:	2b08      	cmp	r3, #8
 800c804:	f200 84d9 	bhi.w	800d1ba <_strtod_l+0xbba>
 800c808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c80a:	9005      	str	r0, [sp, #20]
 800c80c:	2000      	movs	r0, #0
 800c80e:	9308      	str	r3, [sp, #32]
 800c810:	4605      	mov	r5, r0
 800c812:	3a30      	subs	r2, #48	; 0x30
 800c814:	f100 0301 	add.w	r3, r0, #1
 800c818:	d014      	beq.n	800c844 <_strtod_l+0x244>
 800c81a:	9905      	ldr	r1, [sp, #20]
 800c81c:	4419      	add	r1, r3
 800c81e:	9105      	str	r1, [sp, #20]
 800c820:	462b      	mov	r3, r5
 800c822:	eb00 0e05 	add.w	lr, r0, r5
 800c826:	210a      	movs	r1, #10
 800c828:	4573      	cmp	r3, lr
 800c82a:	d113      	bne.n	800c854 <_strtod_l+0x254>
 800c82c:	182b      	adds	r3, r5, r0
 800c82e:	2b08      	cmp	r3, #8
 800c830:	f105 0501 	add.w	r5, r5, #1
 800c834:	4405      	add	r5, r0
 800c836:	dc1c      	bgt.n	800c872 <_strtod_l+0x272>
 800c838:	9907      	ldr	r1, [sp, #28]
 800c83a:	230a      	movs	r3, #10
 800c83c:	fb03 2301 	mla	r3, r3, r1, r2
 800c840:	9307      	str	r3, [sp, #28]
 800c842:	2300      	movs	r3, #0
 800c844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c846:	1c51      	adds	r1, r2, #1
 800c848:	9117      	str	r1, [sp, #92]	; 0x5c
 800c84a:	7852      	ldrb	r2, [r2, #1]
 800c84c:	4618      	mov	r0, r3
 800c84e:	e7c9      	b.n	800c7e4 <_strtod_l+0x1e4>
 800c850:	4638      	mov	r0, r7
 800c852:	e7d2      	b.n	800c7fa <_strtod_l+0x1fa>
 800c854:	2b08      	cmp	r3, #8
 800c856:	dc04      	bgt.n	800c862 <_strtod_l+0x262>
 800c858:	9e07      	ldr	r6, [sp, #28]
 800c85a:	434e      	muls	r6, r1
 800c85c:	9607      	str	r6, [sp, #28]
 800c85e:	3301      	adds	r3, #1
 800c860:	e7e2      	b.n	800c828 <_strtod_l+0x228>
 800c862:	f103 0c01 	add.w	ip, r3, #1
 800c866:	f1bc 0f10 	cmp.w	ip, #16
 800c86a:	bfd8      	it	le
 800c86c:	fb01 f909 	mulle.w	r9, r1, r9
 800c870:	e7f5      	b.n	800c85e <_strtod_l+0x25e>
 800c872:	2d10      	cmp	r5, #16
 800c874:	bfdc      	itt	le
 800c876:	230a      	movle	r3, #10
 800c878:	fb03 2909 	mlale	r9, r3, r9, r2
 800c87c:	e7e1      	b.n	800c842 <_strtod_l+0x242>
 800c87e:	2300      	movs	r3, #0
 800c880:	9305      	str	r3, [sp, #20]
 800c882:	2301      	movs	r3, #1
 800c884:	e77c      	b.n	800c780 <_strtod_l+0x180>
 800c886:	f04f 0c00 	mov.w	ip, #0
 800c88a:	f108 0202 	add.w	r2, r8, #2
 800c88e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c890:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c894:	e785      	b.n	800c7a2 <_strtod_l+0x1a2>
 800c896:	f04f 0c01 	mov.w	ip, #1
 800c89a:	e7f6      	b.n	800c88a <_strtod_l+0x28a>
 800c89c:	08011cac 	.word	0x08011cac
 800c8a0:	080119fc 	.word	0x080119fc
 800c8a4:	7ff00000 	.word	0x7ff00000
 800c8a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8aa:	1c51      	adds	r1, r2, #1
 800c8ac:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8ae:	7852      	ldrb	r2, [r2, #1]
 800c8b0:	2a30      	cmp	r2, #48	; 0x30
 800c8b2:	d0f9      	beq.n	800c8a8 <_strtod_l+0x2a8>
 800c8b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c8b8:	2908      	cmp	r1, #8
 800c8ba:	f63f af79 	bhi.w	800c7b0 <_strtod_l+0x1b0>
 800c8be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c8c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8c4:	9206      	str	r2, [sp, #24]
 800c8c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8c8:	1c51      	adds	r1, r2, #1
 800c8ca:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8cc:	7852      	ldrb	r2, [r2, #1]
 800c8ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c8d2:	2e09      	cmp	r6, #9
 800c8d4:	d937      	bls.n	800c946 <_strtod_l+0x346>
 800c8d6:	9e06      	ldr	r6, [sp, #24]
 800c8d8:	1b89      	subs	r1, r1, r6
 800c8da:	2908      	cmp	r1, #8
 800c8dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c8e0:	dc02      	bgt.n	800c8e8 <_strtod_l+0x2e8>
 800c8e2:	4576      	cmp	r6, lr
 800c8e4:	bfa8      	it	ge
 800c8e6:	4676      	movge	r6, lr
 800c8e8:	f1bc 0f00 	cmp.w	ip, #0
 800c8ec:	d000      	beq.n	800c8f0 <_strtod_l+0x2f0>
 800c8ee:	4276      	negs	r6, r6
 800c8f0:	2d00      	cmp	r5, #0
 800c8f2:	d14d      	bne.n	800c990 <_strtod_l+0x390>
 800c8f4:	9904      	ldr	r1, [sp, #16]
 800c8f6:	4301      	orrs	r1, r0
 800c8f8:	f47f aec6 	bne.w	800c688 <_strtod_l+0x88>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f47f aee1 	bne.w	800c6c4 <_strtod_l+0xc4>
 800c902:	2a69      	cmp	r2, #105	; 0x69
 800c904:	d027      	beq.n	800c956 <_strtod_l+0x356>
 800c906:	dc24      	bgt.n	800c952 <_strtod_l+0x352>
 800c908:	2a49      	cmp	r2, #73	; 0x49
 800c90a:	d024      	beq.n	800c956 <_strtod_l+0x356>
 800c90c:	2a4e      	cmp	r2, #78	; 0x4e
 800c90e:	f47f aed9 	bne.w	800c6c4 <_strtod_l+0xc4>
 800c912:	499f      	ldr	r1, [pc, #636]	; (800cb90 <_strtod_l+0x590>)
 800c914:	a817      	add	r0, sp, #92	; 0x5c
 800c916:	f002 f8c3 	bl	800eaa0 <__match>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	f43f aed2 	beq.w	800c6c4 <_strtod_l+0xc4>
 800c920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b28      	cmp	r3, #40	; 0x28
 800c926:	d12d      	bne.n	800c984 <_strtod_l+0x384>
 800c928:	499a      	ldr	r1, [pc, #616]	; (800cb94 <_strtod_l+0x594>)
 800c92a:	aa1a      	add	r2, sp, #104	; 0x68
 800c92c:	a817      	add	r0, sp, #92	; 0x5c
 800c92e:	f002 f8cb 	bl	800eac8 <__hexnan>
 800c932:	2805      	cmp	r0, #5
 800c934:	d126      	bne.n	800c984 <_strtod_l+0x384>
 800c936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c938:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c93c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c940:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c944:	e6a0      	b.n	800c688 <_strtod_l+0x88>
 800c946:	210a      	movs	r1, #10
 800c948:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c94c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c950:	e7b9      	b.n	800c8c6 <_strtod_l+0x2c6>
 800c952:	2a6e      	cmp	r2, #110	; 0x6e
 800c954:	e7db      	b.n	800c90e <_strtod_l+0x30e>
 800c956:	4990      	ldr	r1, [pc, #576]	; (800cb98 <_strtod_l+0x598>)
 800c958:	a817      	add	r0, sp, #92	; 0x5c
 800c95a:	f002 f8a1 	bl	800eaa0 <__match>
 800c95e:	2800      	cmp	r0, #0
 800c960:	f43f aeb0 	beq.w	800c6c4 <_strtod_l+0xc4>
 800c964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c966:	498d      	ldr	r1, [pc, #564]	; (800cb9c <_strtod_l+0x59c>)
 800c968:	3b01      	subs	r3, #1
 800c96a:	a817      	add	r0, sp, #92	; 0x5c
 800c96c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c96e:	f002 f897 	bl	800eaa0 <__match>
 800c972:	b910      	cbnz	r0, 800c97a <_strtod_l+0x37a>
 800c974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c976:	3301      	adds	r3, #1
 800c978:	9317      	str	r3, [sp, #92]	; 0x5c
 800c97a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cbac <_strtod_l+0x5ac>
 800c97e:	f04f 0a00 	mov.w	sl, #0
 800c982:	e681      	b.n	800c688 <_strtod_l+0x88>
 800c984:	4886      	ldr	r0, [pc, #536]	; (800cba0 <_strtod_l+0x5a0>)
 800c986:	f003 f8d3 	bl	800fb30 <nan>
 800c98a:	ec5b ab10 	vmov	sl, fp, d0
 800c98e:	e67b      	b.n	800c688 <_strtod_l+0x88>
 800c990:	9b05      	ldr	r3, [sp, #20]
 800c992:	9807      	ldr	r0, [sp, #28]
 800c994:	1af3      	subs	r3, r6, r3
 800c996:	2f00      	cmp	r7, #0
 800c998:	bf08      	it	eq
 800c99a:	462f      	moveq	r7, r5
 800c99c:	2d10      	cmp	r5, #16
 800c99e:	9306      	str	r3, [sp, #24]
 800c9a0:	46a8      	mov	r8, r5
 800c9a2:	bfa8      	it	ge
 800c9a4:	f04f 0810 	movge.w	r8, #16
 800c9a8:	f7f3 fdcc 	bl	8000544 <__aeabi_ui2d>
 800c9ac:	2d09      	cmp	r5, #9
 800c9ae:	4682      	mov	sl, r0
 800c9b0:	468b      	mov	fp, r1
 800c9b2:	dd13      	ble.n	800c9dc <_strtod_l+0x3dc>
 800c9b4:	4b7b      	ldr	r3, [pc, #492]	; (800cba4 <_strtod_l+0x5a4>)
 800c9b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c9ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c9be:	f7f3 fe3b 	bl	8000638 <__aeabi_dmul>
 800c9c2:	4682      	mov	sl, r0
 800c9c4:	4648      	mov	r0, r9
 800c9c6:	468b      	mov	fp, r1
 800c9c8:	f7f3 fdbc 	bl	8000544 <__aeabi_ui2d>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4650      	mov	r0, sl
 800c9d2:	4659      	mov	r1, fp
 800c9d4:	f7f3 fc7a 	bl	80002cc <__adddf3>
 800c9d8:	4682      	mov	sl, r0
 800c9da:	468b      	mov	fp, r1
 800c9dc:	2d0f      	cmp	r5, #15
 800c9de:	dc38      	bgt.n	800ca52 <_strtod_l+0x452>
 800c9e0:	9b06      	ldr	r3, [sp, #24]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f43f ae50 	beq.w	800c688 <_strtod_l+0x88>
 800c9e8:	dd24      	ble.n	800ca34 <_strtod_l+0x434>
 800c9ea:	2b16      	cmp	r3, #22
 800c9ec:	dc0b      	bgt.n	800ca06 <_strtod_l+0x406>
 800c9ee:	496d      	ldr	r1, [pc, #436]	; (800cba4 <_strtod_l+0x5a4>)
 800c9f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9f8:	4652      	mov	r2, sl
 800c9fa:	465b      	mov	r3, fp
 800c9fc:	f7f3 fe1c 	bl	8000638 <__aeabi_dmul>
 800ca00:	4682      	mov	sl, r0
 800ca02:	468b      	mov	fp, r1
 800ca04:	e640      	b.n	800c688 <_strtod_l+0x88>
 800ca06:	9a06      	ldr	r2, [sp, #24]
 800ca08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	db20      	blt.n	800ca52 <_strtod_l+0x452>
 800ca10:	4c64      	ldr	r4, [pc, #400]	; (800cba4 <_strtod_l+0x5a4>)
 800ca12:	f1c5 050f 	rsb	r5, r5, #15
 800ca16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca1a:	4652      	mov	r2, sl
 800ca1c:	465b      	mov	r3, fp
 800ca1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca22:	f7f3 fe09 	bl	8000638 <__aeabi_dmul>
 800ca26:	9b06      	ldr	r3, [sp, #24]
 800ca28:	1b5d      	subs	r5, r3, r5
 800ca2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca32:	e7e3      	b.n	800c9fc <_strtod_l+0x3fc>
 800ca34:	9b06      	ldr	r3, [sp, #24]
 800ca36:	3316      	adds	r3, #22
 800ca38:	db0b      	blt.n	800ca52 <_strtod_l+0x452>
 800ca3a:	9b05      	ldr	r3, [sp, #20]
 800ca3c:	1b9e      	subs	r6, r3, r6
 800ca3e:	4b59      	ldr	r3, [pc, #356]	; (800cba4 <_strtod_l+0x5a4>)
 800ca40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ca44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca48:	4650      	mov	r0, sl
 800ca4a:	4659      	mov	r1, fp
 800ca4c:	f7f3 ff1e 	bl	800088c <__aeabi_ddiv>
 800ca50:	e7d6      	b.n	800ca00 <_strtod_l+0x400>
 800ca52:	9b06      	ldr	r3, [sp, #24]
 800ca54:	eba5 0808 	sub.w	r8, r5, r8
 800ca58:	4498      	add	r8, r3
 800ca5a:	f1b8 0f00 	cmp.w	r8, #0
 800ca5e:	dd74      	ble.n	800cb4a <_strtod_l+0x54a>
 800ca60:	f018 030f 	ands.w	r3, r8, #15
 800ca64:	d00a      	beq.n	800ca7c <_strtod_l+0x47c>
 800ca66:	494f      	ldr	r1, [pc, #316]	; (800cba4 <_strtod_l+0x5a4>)
 800ca68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca6c:	4652      	mov	r2, sl
 800ca6e:	465b      	mov	r3, fp
 800ca70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca74:	f7f3 fde0 	bl	8000638 <__aeabi_dmul>
 800ca78:	4682      	mov	sl, r0
 800ca7a:	468b      	mov	fp, r1
 800ca7c:	f038 080f 	bics.w	r8, r8, #15
 800ca80:	d04f      	beq.n	800cb22 <_strtod_l+0x522>
 800ca82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ca86:	dd22      	ble.n	800cace <_strtod_l+0x4ce>
 800ca88:	2500      	movs	r5, #0
 800ca8a:	462e      	mov	r6, r5
 800ca8c:	9507      	str	r5, [sp, #28]
 800ca8e:	9505      	str	r5, [sp, #20]
 800ca90:	2322      	movs	r3, #34	; 0x22
 800ca92:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cbac <_strtod_l+0x5ac>
 800ca96:	6023      	str	r3, [r4, #0]
 800ca98:	f04f 0a00 	mov.w	sl, #0
 800ca9c:	9b07      	ldr	r3, [sp, #28]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f43f adf2 	beq.w	800c688 <_strtod_l+0x88>
 800caa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800caa6:	4620      	mov	r0, r4
 800caa8:	f002 f970 	bl	800ed8c <_Bfree>
 800caac:	9905      	ldr	r1, [sp, #20]
 800caae:	4620      	mov	r0, r4
 800cab0:	f002 f96c 	bl	800ed8c <_Bfree>
 800cab4:	4631      	mov	r1, r6
 800cab6:	4620      	mov	r0, r4
 800cab8:	f002 f968 	bl	800ed8c <_Bfree>
 800cabc:	9907      	ldr	r1, [sp, #28]
 800cabe:	4620      	mov	r0, r4
 800cac0:	f002 f964 	bl	800ed8c <_Bfree>
 800cac4:	4629      	mov	r1, r5
 800cac6:	4620      	mov	r0, r4
 800cac8:	f002 f960 	bl	800ed8c <_Bfree>
 800cacc:	e5dc      	b.n	800c688 <_strtod_l+0x88>
 800cace:	4b36      	ldr	r3, [pc, #216]	; (800cba8 <_strtod_l+0x5a8>)
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	2300      	movs	r3, #0
 800cad4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cad8:	4650      	mov	r0, sl
 800cada:	4659      	mov	r1, fp
 800cadc:	4699      	mov	r9, r3
 800cade:	f1b8 0f01 	cmp.w	r8, #1
 800cae2:	dc21      	bgt.n	800cb28 <_strtod_l+0x528>
 800cae4:	b10b      	cbz	r3, 800caea <_strtod_l+0x4ea>
 800cae6:	4682      	mov	sl, r0
 800cae8:	468b      	mov	fp, r1
 800caea:	4b2f      	ldr	r3, [pc, #188]	; (800cba8 <_strtod_l+0x5a8>)
 800caec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800caf0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800caf4:	4652      	mov	r2, sl
 800caf6:	465b      	mov	r3, fp
 800caf8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cafc:	f7f3 fd9c 	bl	8000638 <__aeabi_dmul>
 800cb00:	4b2a      	ldr	r3, [pc, #168]	; (800cbac <_strtod_l+0x5ac>)
 800cb02:	460a      	mov	r2, r1
 800cb04:	400b      	ands	r3, r1
 800cb06:	492a      	ldr	r1, [pc, #168]	; (800cbb0 <_strtod_l+0x5b0>)
 800cb08:	428b      	cmp	r3, r1
 800cb0a:	4682      	mov	sl, r0
 800cb0c:	d8bc      	bhi.n	800ca88 <_strtod_l+0x488>
 800cb0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb12:	428b      	cmp	r3, r1
 800cb14:	bf86      	itte	hi
 800cb16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cbb4 <_strtod_l+0x5b4>
 800cb1a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800cb1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cb22:	2300      	movs	r3, #0
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	e084      	b.n	800cc32 <_strtod_l+0x632>
 800cb28:	f018 0f01 	tst.w	r8, #1
 800cb2c:	d005      	beq.n	800cb3a <_strtod_l+0x53a>
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	f7f3 fd80 	bl	8000638 <__aeabi_dmul>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	9a04      	ldr	r2, [sp, #16]
 800cb3c:	3208      	adds	r2, #8
 800cb3e:	f109 0901 	add.w	r9, r9, #1
 800cb42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb46:	9204      	str	r2, [sp, #16]
 800cb48:	e7c9      	b.n	800cade <_strtod_l+0x4de>
 800cb4a:	d0ea      	beq.n	800cb22 <_strtod_l+0x522>
 800cb4c:	f1c8 0800 	rsb	r8, r8, #0
 800cb50:	f018 020f 	ands.w	r2, r8, #15
 800cb54:	d00a      	beq.n	800cb6c <_strtod_l+0x56c>
 800cb56:	4b13      	ldr	r3, [pc, #76]	; (800cba4 <_strtod_l+0x5a4>)
 800cb58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	4659      	mov	r1, fp
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	f7f3 fe92 	bl	800088c <__aeabi_ddiv>
 800cb68:	4682      	mov	sl, r0
 800cb6a:	468b      	mov	fp, r1
 800cb6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cb70:	d0d7      	beq.n	800cb22 <_strtod_l+0x522>
 800cb72:	f1b8 0f1f 	cmp.w	r8, #31
 800cb76:	dd1f      	ble.n	800cbb8 <_strtod_l+0x5b8>
 800cb78:	2500      	movs	r5, #0
 800cb7a:	462e      	mov	r6, r5
 800cb7c:	9507      	str	r5, [sp, #28]
 800cb7e:	9505      	str	r5, [sp, #20]
 800cb80:	2322      	movs	r3, #34	; 0x22
 800cb82:	f04f 0a00 	mov.w	sl, #0
 800cb86:	f04f 0b00 	mov.w	fp, #0
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	e786      	b.n	800ca9c <_strtod_l+0x49c>
 800cb8e:	bf00      	nop
 800cb90:	080119d5 	.word	0x080119d5
 800cb94:	08011a10 	.word	0x08011a10
 800cb98:	080119cd 	.word	0x080119cd
 800cb9c:	08011b54 	.word	0x08011b54
 800cba0:	08011e68 	.word	0x08011e68
 800cba4:	08011d48 	.word	0x08011d48
 800cba8:	08011d20 	.word	0x08011d20
 800cbac:	7ff00000 	.word	0x7ff00000
 800cbb0:	7ca00000 	.word	0x7ca00000
 800cbb4:	7fefffff 	.word	0x7fefffff
 800cbb8:	f018 0310 	ands.w	r3, r8, #16
 800cbbc:	bf18      	it	ne
 800cbbe:	236a      	movne	r3, #106	; 0x6a
 800cbc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cf70 <_strtod_l+0x970>
 800cbc4:	9304      	str	r3, [sp, #16]
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	4659      	mov	r1, fp
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f018 0f01 	tst.w	r8, #1
 800cbd0:	d004      	beq.n	800cbdc <_strtod_l+0x5dc>
 800cbd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cbd6:	f7f3 fd2f 	bl	8000638 <__aeabi_dmul>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cbe0:	f109 0908 	add.w	r9, r9, #8
 800cbe4:	d1f2      	bne.n	800cbcc <_strtod_l+0x5cc>
 800cbe6:	b10b      	cbz	r3, 800cbec <_strtod_l+0x5ec>
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	9b04      	ldr	r3, [sp, #16]
 800cbee:	b1c3      	cbz	r3, 800cc22 <_strtod_l+0x622>
 800cbf0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cbf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	4659      	mov	r1, fp
 800cbfc:	dd11      	ble.n	800cc22 <_strtod_l+0x622>
 800cbfe:	2b1f      	cmp	r3, #31
 800cc00:	f340 8124 	ble.w	800ce4c <_strtod_l+0x84c>
 800cc04:	2b34      	cmp	r3, #52	; 0x34
 800cc06:	bfde      	ittt	le
 800cc08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc0c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800cc10:	fa03 f202 	lslle.w	r2, r3, r2
 800cc14:	f04f 0a00 	mov.w	sl, #0
 800cc18:	bfcc      	ite	gt
 800cc1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cc1e:	ea02 0b01 	andle.w	fp, r2, r1
 800cc22:	2200      	movs	r2, #0
 800cc24:	2300      	movs	r3, #0
 800cc26:	4650      	mov	r0, sl
 800cc28:	4659      	mov	r1, fp
 800cc2a:	f7f3 ff6d 	bl	8000b08 <__aeabi_dcmpeq>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d1a2      	bne.n	800cb78 <_strtod_l+0x578>
 800cc32:	9b07      	ldr	r3, [sp, #28]
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	9908      	ldr	r1, [sp, #32]
 800cc38:	462b      	mov	r3, r5
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f002 f90d 	bl	800ee5c <__s2b>
 800cc42:	9007      	str	r0, [sp, #28]
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f43f af1f 	beq.w	800ca88 <_strtod_l+0x488>
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	1b9e      	subs	r6, r3, r6
 800cc4e:	9b06      	ldr	r3, [sp, #24]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bfb4      	ite	lt
 800cc54:	4633      	movlt	r3, r6
 800cc56:	2300      	movge	r3, #0
 800cc58:	930c      	str	r3, [sp, #48]	; 0x30
 800cc5a:	9b06      	ldr	r3, [sp, #24]
 800cc5c:	2500      	movs	r5, #0
 800cc5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc62:	9312      	str	r3, [sp, #72]	; 0x48
 800cc64:	462e      	mov	r6, r5
 800cc66:	9b07      	ldr	r3, [sp, #28]
 800cc68:	4620      	mov	r0, r4
 800cc6a:	6859      	ldr	r1, [r3, #4]
 800cc6c:	f002 f84e 	bl	800ed0c <_Balloc>
 800cc70:	9005      	str	r0, [sp, #20]
 800cc72:	2800      	cmp	r0, #0
 800cc74:	f43f af0c 	beq.w	800ca90 <_strtod_l+0x490>
 800cc78:	9b07      	ldr	r3, [sp, #28]
 800cc7a:	691a      	ldr	r2, [r3, #16]
 800cc7c:	3202      	adds	r2, #2
 800cc7e:	f103 010c 	add.w	r1, r3, #12
 800cc82:	0092      	lsls	r2, r2, #2
 800cc84:	300c      	adds	r0, #12
 800cc86:	f7fe ff8f 	bl	800bba8 <memcpy>
 800cc8a:	ec4b ab10 	vmov	d0, sl, fp
 800cc8e:	aa1a      	add	r2, sp, #104	; 0x68
 800cc90:	a919      	add	r1, sp, #100	; 0x64
 800cc92:	4620      	mov	r0, r4
 800cc94:	f002 fc28 	bl	800f4e8 <__d2b>
 800cc98:	ec4b ab18 	vmov	d8, sl, fp
 800cc9c:	9018      	str	r0, [sp, #96]	; 0x60
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f43f aef6 	beq.w	800ca90 <_strtod_l+0x490>
 800cca4:	2101      	movs	r1, #1
 800cca6:	4620      	mov	r0, r4
 800cca8:	f002 f972 	bl	800ef90 <__i2b>
 800ccac:	4606      	mov	r6, r0
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f43f aeee 	beq.w	800ca90 <_strtod_l+0x490>
 800ccb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccb6:	9904      	ldr	r1, [sp, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	bfab      	itete	ge
 800ccbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ccbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ccc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ccc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ccc6:	bfac      	ite	ge
 800ccc8:	eb03 0902 	addge.w	r9, r3, r2
 800cccc:	1ad7      	sublt	r7, r2, r3
 800ccce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ccd0:	eba3 0801 	sub.w	r8, r3, r1
 800ccd4:	4490      	add	r8, r2
 800ccd6:	4ba1      	ldr	r3, [pc, #644]	; (800cf5c <_strtod_l+0x95c>)
 800ccd8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ccdc:	4598      	cmp	r8, r3
 800ccde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cce2:	f280 80c7 	bge.w	800ce74 <_strtod_l+0x874>
 800cce6:	eba3 0308 	sub.w	r3, r3, r8
 800ccea:	2b1f      	cmp	r3, #31
 800ccec:	eba2 0203 	sub.w	r2, r2, r3
 800ccf0:	f04f 0101 	mov.w	r1, #1
 800ccf4:	f300 80b1 	bgt.w	800ce5a <_strtod_l+0x85a>
 800ccf8:	fa01 f303 	lsl.w	r3, r1, r3
 800ccfc:	930d      	str	r3, [sp, #52]	; 0x34
 800ccfe:	2300      	movs	r3, #0
 800cd00:	9308      	str	r3, [sp, #32]
 800cd02:	eb09 0802 	add.w	r8, r9, r2
 800cd06:	9b04      	ldr	r3, [sp, #16]
 800cd08:	45c1      	cmp	r9, r8
 800cd0a:	4417      	add	r7, r2
 800cd0c:	441f      	add	r7, r3
 800cd0e:	464b      	mov	r3, r9
 800cd10:	bfa8      	it	ge
 800cd12:	4643      	movge	r3, r8
 800cd14:	42bb      	cmp	r3, r7
 800cd16:	bfa8      	it	ge
 800cd18:	463b      	movge	r3, r7
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	bfc2      	ittt	gt
 800cd1e:	eba8 0803 	subgt.w	r8, r8, r3
 800cd22:	1aff      	subgt	r7, r7, r3
 800cd24:	eba9 0903 	subgt.w	r9, r9, r3
 800cd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dd17      	ble.n	800cd5e <_strtod_l+0x75e>
 800cd2e:	4631      	mov	r1, r6
 800cd30:	461a      	mov	r2, r3
 800cd32:	4620      	mov	r0, r4
 800cd34:	f002 f9ec 	bl	800f110 <__pow5mult>
 800cd38:	4606      	mov	r6, r0
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	f43f aea8 	beq.w	800ca90 <_strtod_l+0x490>
 800cd40:	4601      	mov	r1, r0
 800cd42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd44:	4620      	mov	r0, r4
 800cd46:	f002 f939 	bl	800efbc <__multiply>
 800cd4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f43f ae9f 	beq.w	800ca90 <_strtod_l+0x490>
 800cd52:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd54:	4620      	mov	r0, r4
 800cd56:	f002 f819 	bl	800ed8c <_Bfree>
 800cd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5c:	9318      	str	r3, [sp, #96]	; 0x60
 800cd5e:	f1b8 0f00 	cmp.w	r8, #0
 800cd62:	f300 808c 	bgt.w	800ce7e <_strtod_l+0x87e>
 800cd66:	9b06      	ldr	r3, [sp, #24]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	dd08      	ble.n	800cd7e <_strtod_l+0x77e>
 800cd6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd6e:	9905      	ldr	r1, [sp, #20]
 800cd70:	4620      	mov	r0, r4
 800cd72:	f002 f9cd 	bl	800f110 <__pow5mult>
 800cd76:	9005      	str	r0, [sp, #20]
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	f43f ae89 	beq.w	800ca90 <_strtod_l+0x490>
 800cd7e:	2f00      	cmp	r7, #0
 800cd80:	dd08      	ble.n	800cd94 <_strtod_l+0x794>
 800cd82:	9905      	ldr	r1, [sp, #20]
 800cd84:	463a      	mov	r2, r7
 800cd86:	4620      	mov	r0, r4
 800cd88:	f002 fa1c 	bl	800f1c4 <__lshift>
 800cd8c:	9005      	str	r0, [sp, #20]
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	f43f ae7e 	beq.w	800ca90 <_strtod_l+0x490>
 800cd94:	f1b9 0f00 	cmp.w	r9, #0
 800cd98:	dd08      	ble.n	800cdac <_strtod_l+0x7ac>
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	464a      	mov	r2, r9
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f002 fa10 	bl	800f1c4 <__lshift>
 800cda4:	4606      	mov	r6, r0
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f43f ae72 	beq.w	800ca90 <_strtod_l+0x490>
 800cdac:	9a05      	ldr	r2, [sp, #20]
 800cdae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f002 fa93 	bl	800f2dc <__mdiff>
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	f43f ae69 	beq.w	800ca90 <_strtod_l+0x490>
 800cdbe:	68c3      	ldr	r3, [r0, #12]
 800cdc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60c3      	str	r3, [r0, #12]
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	f002 fa6c 	bl	800f2a4 <__mcmp>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	da60      	bge.n	800ce92 <_strtod_l+0x892>
 800cdd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd2:	ea53 030a 	orrs.w	r3, r3, sl
 800cdd6:	f040 8082 	bne.w	800cede <_strtod_l+0x8de>
 800cdda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d17d      	bne.n	800cede <_strtod_l+0x8de>
 800cde2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cde6:	0d1b      	lsrs	r3, r3, #20
 800cde8:	051b      	lsls	r3, r3, #20
 800cdea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cdee:	d976      	bls.n	800cede <_strtod_l+0x8de>
 800cdf0:	696b      	ldr	r3, [r5, #20]
 800cdf2:	b913      	cbnz	r3, 800cdfa <_strtod_l+0x7fa>
 800cdf4:	692b      	ldr	r3, [r5, #16]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	dd71      	ble.n	800cede <_strtod_l+0x8de>
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f002 f9e0 	bl	800f1c4 <__lshift>
 800ce04:	4631      	mov	r1, r6
 800ce06:	4605      	mov	r5, r0
 800ce08:	f002 fa4c 	bl	800f2a4 <__mcmp>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	dd66      	ble.n	800cede <_strtod_l+0x8de>
 800ce10:	9904      	ldr	r1, [sp, #16]
 800ce12:	4a53      	ldr	r2, [pc, #332]	; (800cf60 <_strtod_l+0x960>)
 800ce14:	465b      	mov	r3, fp
 800ce16:	2900      	cmp	r1, #0
 800ce18:	f000 8081 	beq.w	800cf1e <_strtod_l+0x91e>
 800ce1c:	ea02 010b 	and.w	r1, r2, fp
 800ce20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce24:	dc7b      	bgt.n	800cf1e <_strtod_l+0x91e>
 800ce26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce2a:	f77f aea9 	ble.w	800cb80 <_strtod_l+0x580>
 800ce2e:	4b4d      	ldr	r3, [pc, #308]	; (800cf64 <_strtod_l+0x964>)
 800ce30:	4650      	mov	r0, sl
 800ce32:	4659      	mov	r1, fp
 800ce34:	2200      	movs	r2, #0
 800ce36:	f7f3 fbff 	bl	8000638 <__aeabi_dmul>
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4303      	orrs	r3, r0
 800ce3e:	bf08      	it	eq
 800ce40:	2322      	moveq	r3, #34	; 0x22
 800ce42:	4682      	mov	sl, r0
 800ce44:	468b      	mov	fp, r1
 800ce46:	bf08      	it	eq
 800ce48:	6023      	streq	r3, [r4, #0]
 800ce4a:	e62b      	b.n	800caa4 <_strtod_l+0x4a4>
 800ce4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce50:	fa02 f303 	lsl.w	r3, r2, r3
 800ce54:	ea03 0a0a 	and.w	sl, r3, sl
 800ce58:	e6e3      	b.n	800cc22 <_strtod_l+0x622>
 800ce5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ce5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ce62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ce66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ce6a:	fa01 f308 	lsl.w	r3, r1, r8
 800ce6e:	9308      	str	r3, [sp, #32]
 800ce70:	910d      	str	r1, [sp, #52]	; 0x34
 800ce72:	e746      	b.n	800cd02 <_strtod_l+0x702>
 800ce74:	2300      	movs	r3, #0
 800ce76:	9308      	str	r3, [sp, #32]
 800ce78:	2301      	movs	r3, #1
 800ce7a:	930d      	str	r3, [sp, #52]	; 0x34
 800ce7c:	e741      	b.n	800cd02 <_strtod_l+0x702>
 800ce7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce80:	4642      	mov	r2, r8
 800ce82:	4620      	mov	r0, r4
 800ce84:	f002 f99e 	bl	800f1c4 <__lshift>
 800ce88:	9018      	str	r0, [sp, #96]	; 0x60
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	f47f af6b 	bne.w	800cd66 <_strtod_l+0x766>
 800ce90:	e5fe      	b.n	800ca90 <_strtod_l+0x490>
 800ce92:	465f      	mov	r7, fp
 800ce94:	d16e      	bne.n	800cf74 <_strtod_l+0x974>
 800ce96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce9c:	b342      	cbz	r2, 800cef0 <_strtod_l+0x8f0>
 800ce9e:	4a32      	ldr	r2, [pc, #200]	; (800cf68 <_strtod_l+0x968>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d128      	bne.n	800cef6 <_strtod_l+0x8f6>
 800cea4:	9b04      	ldr	r3, [sp, #16]
 800cea6:	4651      	mov	r1, sl
 800cea8:	b1eb      	cbz	r3, 800cee6 <_strtod_l+0x8e6>
 800ceaa:	4b2d      	ldr	r3, [pc, #180]	; (800cf60 <_strtod_l+0x960>)
 800ceac:	403b      	ands	r3, r7
 800ceae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ceb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceb6:	d819      	bhi.n	800ceec <_strtod_l+0x8ec>
 800ceb8:	0d1b      	lsrs	r3, r3, #20
 800ceba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cebe:	fa02 f303 	lsl.w	r3, r2, r3
 800cec2:	4299      	cmp	r1, r3
 800cec4:	d117      	bne.n	800cef6 <_strtod_l+0x8f6>
 800cec6:	4b29      	ldr	r3, [pc, #164]	; (800cf6c <_strtod_l+0x96c>)
 800cec8:	429f      	cmp	r7, r3
 800ceca:	d102      	bne.n	800ced2 <_strtod_l+0x8d2>
 800cecc:	3101      	adds	r1, #1
 800cece:	f43f addf 	beq.w	800ca90 <_strtod_l+0x490>
 800ced2:	4b23      	ldr	r3, [pc, #140]	; (800cf60 <_strtod_l+0x960>)
 800ced4:	403b      	ands	r3, r7
 800ced6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ceda:	f04f 0a00 	mov.w	sl, #0
 800cede:	9b04      	ldr	r3, [sp, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d1a4      	bne.n	800ce2e <_strtod_l+0x82e>
 800cee4:	e5de      	b.n	800caa4 <_strtod_l+0x4a4>
 800cee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ceea:	e7ea      	b.n	800cec2 <_strtod_l+0x8c2>
 800ceec:	4613      	mov	r3, r2
 800ceee:	e7e8      	b.n	800cec2 <_strtod_l+0x8c2>
 800cef0:	ea53 030a 	orrs.w	r3, r3, sl
 800cef4:	d08c      	beq.n	800ce10 <_strtod_l+0x810>
 800cef6:	9b08      	ldr	r3, [sp, #32]
 800cef8:	b1db      	cbz	r3, 800cf32 <_strtod_l+0x932>
 800cefa:	423b      	tst	r3, r7
 800cefc:	d0ef      	beq.n	800cede <_strtod_l+0x8de>
 800cefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf00:	9a04      	ldr	r2, [sp, #16]
 800cf02:	4650      	mov	r0, sl
 800cf04:	4659      	mov	r1, fp
 800cf06:	b1c3      	cbz	r3, 800cf3a <_strtod_l+0x93a>
 800cf08:	f7ff fb5c 	bl	800c5c4 <sulp>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	460b      	mov	r3, r1
 800cf10:	ec51 0b18 	vmov	r0, r1, d8
 800cf14:	f7f3 f9da 	bl	80002cc <__adddf3>
 800cf18:	4682      	mov	sl, r0
 800cf1a:	468b      	mov	fp, r1
 800cf1c:	e7df      	b.n	800cede <_strtod_l+0x8de>
 800cf1e:	4013      	ands	r3, r2
 800cf20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cf30:	e7d5      	b.n	800cede <_strtod_l+0x8de>
 800cf32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf34:	ea13 0f0a 	tst.w	r3, sl
 800cf38:	e7e0      	b.n	800cefc <_strtod_l+0x8fc>
 800cf3a:	f7ff fb43 	bl	800c5c4 <sulp>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	ec51 0b18 	vmov	r0, r1, d8
 800cf46:	f7f3 f9bf 	bl	80002c8 <__aeabi_dsub>
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4682      	mov	sl, r0
 800cf50:	468b      	mov	fp, r1
 800cf52:	f7f3 fdd9 	bl	8000b08 <__aeabi_dcmpeq>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0c1      	beq.n	800cede <_strtod_l+0x8de>
 800cf5a:	e611      	b.n	800cb80 <_strtod_l+0x580>
 800cf5c:	fffffc02 	.word	0xfffffc02
 800cf60:	7ff00000 	.word	0x7ff00000
 800cf64:	39500000 	.word	0x39500000
 800cf68:	000fffff 	.word	0x000fffff
 800cf6c:	7fefffff 	.word	0x7fefffff
 800cf70:	08011a28 	.word	0x08011a28
 800cf74:	4631      	mov	r1, r6
 800cf76:	4628      	mov	r0, r5
 800cf78:	f002 fb12 	bl	800f5a0 <__ratio>
 800cf7c:	ec59 8b10 	vmov	r8, r9, d0
 800cf80:	ee10 0a10 	vmov	r0, s0
 800cf84:	2200      	movs	r2, #0
 800cf86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	f7f3 fdd0 	bl	8000b30 <__aeabi_dcmple>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d07a      	beq.n	800d08a <_strtod_l+0xa8a>
 800cf94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d04a      	beq.n	800d030 <_strtod_l+0xa30>
 800cf9a:	4b95      	ldr	r3, [pc, #596]	; (800d1f0 <_strtod_l+0xbf0>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d1f0 <_strtod_l+0xbf0>
 800cfa6:	f04f 0800 	mov.w	r8, #0
 800cfaa:	4b92      	ldr	r3, [pc, #584]	; (800d1f4 <_strtod_l+0xbf4>)
 800cfac:	403b      	ands	r3, r7
 800cfae:	930d      	str	r3, [sp, #52]	; 0x34
 800cfb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfb2:	4b91      	ldr	r3, [pc, #580]	; (800d1f8 <_strtod_l+0xbf8>)
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	f040 80b0 	bne.w	800d11a <_strtod_l+0xb1a>
 800cfba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cfc2:	ec4b ab10 	vmov	d0, sl, fp
 800cfc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfca:	f002 fa11 	bl	800f3f0 <__ulp>
 800cfce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfd2:	ec53 2b10 	vmov	r2, r3, d0
 800cfd6:	f7f3 fb2f 	bl	8000638 <__aeabi_dmul>
 800cfda:	4652      	mov	r2, sl
 800cfdc:	465b      	mov	r3, fp
 800cfde:	f7f3 f975 	bl	80002cc <__adddf3>
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4983      	ldr	r1, [pc, #524]	; (800d1f4 <_strtod_l+0xbf4>)
 800cfe6:	4a85      	ldr	r2, [pc, #532]	; (800d1fc <_strtod_l+0xbfc>)
 800cfe8:	4019      	ands	r1, r3
 800cfea:	4291      	cmp	r1, r2
 800cfec:	4682      	mov	sl, r0
 800cfee:	d960      	bls.n	800d0b2 <_strtod_l+0xab2>
 800cff0:	ee18 3a90 	vmov	r3, s17
 800cff4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d104      	bne.n	800d006 <_strtod_l+0xa06>
 800cffc:	ee18 3a10 	vmov	r3, s16
 800d000:	3301      	adds	r3, #1
 800d002:	f43f ad45 	beq.w	800ca90 <_strtod_l+0x490>
 800d006:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d208 <_strtod_l+0xc08>
 800d00a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d00e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d010:	4620      	mov	r0, r4
 800d012:	f001 febb 	bl	800ed8c <_Bfree>
 800d016:	9905      	ldr	r1, [sp, #20]
 800d018:	4620      	mov	r0, r4
 800d01a:	f001 feb7 	bl	800ed8c <_Bfree>
 800d01e:	4631      	mov	r1, r6
 800d020:	4620      	mov	r0, r4
 800d022:	f001 feb3 	bl	800ed8c <_Bfree>
 800d026:	4629      	mov	r1, r5
 800d028:	4620      	mov	r0, r4
 800d02a:	f001 feaf 	bl	800ed8c <_Bfree>
 800d02e:	e61a      	b.n	800cc66 <_strtod_l+0x666>
 800d030:	f1ba 0f00 	cmp.w	sl, #0
 800d034:	d11b      	bne.n	800d06e <_strtod_l+0xa6e>
 800d036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d03a:	b9f3      	cbnz	r3, 800d07a <_strtod_l+0xa7a>
 800d03c:	4b6c      	ldr	r3, [pc, #432]	; (800d1f0 <_strtod_l+0xbf0>)
 800d03e:	2200      	movs	r2, #0
 800d040:	4640      	mov	r0, r8
 800d042:	4649      	mov	r1, r9
 800d044:	f7f3 fd6a 	bl	8000b1c <__aeabi_dcmplt>
 800d048:	b9d0      	cbnz	r0, 800d080 <_strtod_l+0xa80>
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	4b6c      	ldr	r3, [pc, #432]	; (800d200 <_strtod_l+0xc00>)
 800d050:	2200      	movs	r2, #0
 800d052:	f7f3 faf1 	bl	8000638 <__aeabi_dmul>
 800d056:	4680      	mov	r8, r0
 800d058:	4689      	mov	r9, r1
 800d05a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d05e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d062:	9315      	str	r3, [sp, #84]	; 0x54
 800d064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d06c:	e79d      	b.n	800cfaa <_strtod_l+0x9aa>
 800d06e:	f1ba 0f01 	cmp.w	sl, #1
 800d072:	d102      	bne.n	800d07a <_strtod_l+0xa7a>
 800d074:	2f00      	cmp	r7, #0
 800d076:	f43f ad83 	beq.w	800cb80 <_strtod_l+0x580>
 800d07a:	4b62      	ldr	r3, [pc, #392]	; (800d204 <_strtod_l+0xc04>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	e78e      	b.n	800cf9e <_strtod_l+0x99e>
 800d080:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d200 <_strtod_l+0xc00>
 800d084:	f04f 0800 	mov.w	r8, #0
 800d088:	e7e7      	b.n	800d05a <_strtod_l+0xa5a>
 800d08a:	4b5d      	ldr	r3, [pc, #372]	; (800d200 <_strtod_l+0xc00>)
 800d08c:	4640      	mov	r0, r8
 800d08e:	4649      	mov	r1, r9
 800d090:	2200      	movs	r2, #0
 800d092:	f7f3 fad1 	bl	8000638 <__aeabi_dmul>
 800d096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d098:	4680      	mov	r8, r0
 800d09a:	4689      	mov	r9, r1
 800d09c:	b933      	cbnz	r3, 800d0ac <_strtod_l+0xaac>
 800d09e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0a2:	900e      	str	r0, [sp, #56]	; 0x38
 800d0a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0aa:	e7dd      	b.n	800d068 <_strtod_l+0xa68>
 800d0ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d0b0:	e7f9      	b.n	800d0a6 <_strtod_l+0xaa6>
 800d0b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d0b6:	9b04      	ldr	r3, [sp, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1a8      	bne.n	800d00e <_strtod_l+0xa0e>
 800d0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d0c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0c2:	0d1b      	lsrs	r3, r3, #20
 800d0c4:	051b      	lsls	r3, r3, #20
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d1a1      	bne.n	800d00e <_strtod_l+0xa0e>
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	4649      	mov	r1, r9
 800d0ce:	f7f3 fe13 	bl	8000cf8 <__aeabi_d2lz>
 800d0d2:	f7f3 fa83 	bl	80005dc <__aeabi_l2d>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	460b      	mov	r3, r1
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	f7f3 f8f3 	bl	80002c8 <__aeabi_dsub>
 800d0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0e8:	ea43 030a 	orr.w	r3, r3, sl
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	4680      	mov	r8, r0
 800d0f0:	4689      	mov	r9, r1
 800d0f2:	d055      	beq.n	800d1a0 <_strtod_l+0xba0>
 800d0f4:	a336      	add	r3, pc, #216	; (adr r3, 800d1d0 <_strtod_l+0xbd0>)
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	f7f3 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	f47f acd0 	bne.w	800caa4 <_strtod_l+0x4a4>
 800d104:	a334      	add	r3, pc, #208	; (adr r3, 800d1d8 <_strtod_l+0xbd8>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	4640      	mov	r0, r8
 800d10c:	4649      	mov	r1, r9
 800d10e:	f7f3 fd23 	bl	8000b58 <__aeabi_dcmpgt>
 800d112:	2800      	cmp	r0, #0
 800d114:	f43f af7b 	beq.w	800d00e <_strtod_l+0xa0e>
 800d118:	e4c4      	b.n	800caa4 <_strtod_l+0x4a4>
 800d11a:	9b04      	ldr	r3, [sp, #16]
 800d11c:	b333      	cbz	r3, 800d16c <_strtod_l+0xb6c>
 800d11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d120:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d124:	d822      	bhi.n	800d16c <_strtod_l+0xb6c>
 800d126:	a32e      	add	r3, pc, #184	; (adr r3, 800d1e0 <_strtod_l+0xbe0>)
 800d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12c:	4640      	mov	r0, r8
 800d12e:	4649      	mov	r1, r9
 800d130:	f7f3 fcfe 	bl	8000b30 <__aeabi_dcmple>
 800d134:	b1a0      	cbz	r0, 800d160 <_strtod_l+0xb60>
 800d136:	4649      	mov	r1, r9
 800d138:	4640      	mov	r0, r8
 800d13a:	f7f3 fd55 	bl	8000be8 <__aeabi_d2uiz>
 800d13e:	2801      	cmp	r0, #1
 800d140:	bf38      	it	cc
 800d142:	2001      	movcc	r0, #1
 800d144:	f7f3 f9fe 	bl	8000544 <__aeabi_ui2d>
 800d148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d14a:	4680      	mov	r8, r0
 800d14c:	4689      	mov	r9, r1
 800d14e:	bb23      	cbnz	r3, 800d19a <_strtod_l+0xb9a>
 800d150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d154:	9010      	str	r0, [sp, #64]	; 0x40
 800d156:	9311      	str	r3, [sp, #68]	; 0x44
 800d158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d15c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d164:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d168:	1a9b      	subs	r3, r3, r2
 800d16a:	9309      	str	r3, [sp, #36]	; 0x24
 800d16c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d170:	eeb0 0a48 	vmov.f32	s0, s16
 800d174:	eef0 0a68 	vmov.f32	s1, s17
 800d178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d17c:	f002 f938 	bl	800f3f0 <__ulp>
 800d180:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d184:	ec53 2b10 	vmov	r2, r3, d0
 800d188:	f7f3 fa56 	bl	8000638 <__aeabi_dmul>
 800d18c:	ec53 2b18 	vmov	r2, r3, d8
 800d190:	f7f3 f89c 	bl	80002cc <__adddf3>
 800d194:	4682      	mov	sl, r0
 800d196:	468b      	mov	fp, r1
 800d198:	e78d      	b.n	800d0b6 <_strtod_l+0xab6>
 800d19a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d19e:	e7db      	b.n	800d158 <_strtod_l+0xb58>
 800d1a0:	a311      	add	r3, pc, #68	; (adr r3, 800d1e8 <_strtod_l+0xbe8>)
 800d1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a6:	f7f3 fcb9 	bl	8000b1c <__aeabi_dcmplt>
 800d1aa:	e7b2      	b.n	800d112 <_strtod_l+0xb12>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d1b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	f7ff ba6b 	b.w	800c690 <_strtod_l+0x90>
 800d1ba:	2a65      	cmp	r2, #101	; 0x65
 800d1bc:	f43f ab5f 	beq.w	800c87e <_strtod_l+0x27e>
 800d1c0:	2a45      	cmp	r2, #69	; 0x45
 800d1c2:	f43f ab5c 	beq.w	800c87e <_strtod_l+0x27e>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	f7ff bb94 	b.w	800c8f4 <_strtod_l+0x2f4>
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	94a03595 	.word	0x94a03595
 800d1d4:	3fdfffff 	.word	0x3fdfffff
 800d1d8:	35afe535 	.word	0x35afe535
 800d1dc:	3fe00000 	.word	0x3fe00000
 800d1e0:	ffc00000 	.word	0xffc00000
 800d1e4:	41dfffff 	.word	0x41dfffff
 800d1e8:	94a03595 	.word	0x94a03595
 800d1ec:	3fcfffff 	.word	0x3fcfffff
 800d1f0:	3ff00000 	.word	0x3ff00000
 800d1f4:	7ff00000 	.word	0x7ff00000
 800d1f8:	7fe00000 	.word	0x7fe00000
 800d1fc:	7c9fffff 	.word	0x7c9fffff
 800d200:	3fe00000 	.word	0x3fe00000
 800d204:	bff00000 	.word	0xbff00000
 800d208:	7fefffff 	.word	0x7fefffff

0800d20c <strtod>:
 800d20c:	460a      	mov	r2, r1
 800d20e:	4601      	mov	r1, r0
 800d210:	4802      	ldr	r0, [pc, #8]	; (800d21c <strtod+0x10>)
 800d212:	4b03      	ldr	r3, [pc, #12]	; (800d220 <strtod+0x14>)
 800d214:	6800      	ldr	r0, [r0, #0]
 800d216:	f7ff b9f3 	b.w	800c600 <_strtod_l>
 800d21a:	bf00      	nop
 800d21c:	2000004c 	.word	0x2000004c
 800d220:	200000b4 	.word	0x200000b4

0800d224 <_strtol_l.constprop.0>:
 800d224:	2b01      	cmp	r3, #1
 800d226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d22a:	d001      	beq.n	800d230 <_strtol_l.constprop.0+0xc>
 800d22c:	2b24      	cmp	r3, #36	; 0x24
 800d22e:	d906      	bls.n	800d23e <_strtol_l.constprop.0+0x1a>
 800d230:	f7fe fc90 	bl	800bb54 <__errno>
 800d234:	2316      	movs	r3, #22
 800d236:	6003      	str	r3, [r0, #0]
 800d238:	2000      	movs	r0, #0
 800d23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d324 <_strtol_l.constprop.0+0x100>
 800d242:	460d      	mov	r5, r1
 800d244:	462e      	mov	r6, r5
 800d246:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d24a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d24e:	f017 0708 	ands.w	r7, r7, #8
 800d252:	d1f7      	bne.n	800d244 <_strtol_l.constprop.0+0x20>
 800d254:	2c2d      	cmp	r4, #45	; 0x2d
 800d256:	d132      	bne.n	800d2be <_strtol_l.constprop.0+0x9a>
 800d258:	782c      	ldrb	r4, [r5, #0]
 800d25a:	2701      	movs	r7, #1
 800d25c:	1cb5      	adds	r5, r6, #2
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d05b      	beq.n	800d31a <_strtol_l.constprop.0+0xf6>
 800d262:	2b10      	cmp	r3, #16
 800d264:	d109      	bne.n	800d27a <_strtol_l.constprop.0+0x56>
 800d266:	2c30      	cmp	r4, #48	; 0x30
 800d268:	d107      	bne.n	800d27a <_strtol_l.constprop.0+0x56>
 800d26a:	782c      	ldrb	r4, [r5, #0]
 800d26c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d270:	2c58      	cmp	r4, #88	; 0x58
 800d272:	d14d      	bne.n	800d310 <_strtol_l.constprop.0+0xec>
 800d274:	786c      	ldrb	r4, [r5, #1]
 800d276:	2310      	movs	r3, #16
 800d278:	3502      	adds	r5, #2
 800d27a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d27e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d282:	f04f 0c00 	mov.w	ip, #0
 800d286:	fbb8 f9f3 	udiv	r9, r8, r3
 800d28a:	4666      	mov	r6, ip
 800d28c:	fb03 8a19 	mls	sl, r3, r9, r8
 800d290:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d294:	f1be 0f09 	cmp.w	lr, #9
 800d298:	d816      	bhi.n	800d2c8 <_strtol_l.constprop.0+0xa4>
 800d29a:	4674      	mov	r4, lr
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	dd24      	ble.n	800d2ea <_strtol_l.constprop.0+0xc6>
 800d2a0:	f1bc 0f00 	cmp.w	ip, #0
 800d2a4:	db1e      	blt.n	800d2e4 <_strtol_l.constprop.0+0xc0>
 800d2a6:	45b1      	cmp	r9, r6
 800d2a8:	d31c      	bcc.n	800d2e4 <_strtol_l.constprop.0+0xc0>
 800d2aa:	d101      	bne.n	800d2b0 <_strtol_l.constprop.0+0x8c>
 800d2ac:	45a2      	cmp	sl, r4
 800d2ae:	db19      	blt.n	800d2e4 <_strtol_l.constprop.0+0xc0>
 800d2b0:	fb06 4603 	mla	r6, r6, r3, r4
 800d2b4:	f04f 0c01 	mov.w	ip, #1
 800d2b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2bc:	e7e8      	b.n	800d290 <_strtol_l.constprop.0+0x6c>
 800d2be:	2c2b      	cmp	r4, #43	; 0x2b
 800d2c0:	bf04      	itt	eq
 800d2c2:	782c      	ldrbeq	r4, [r5, #0]
 800d2c4:	1cb5      	addeq	r5, r6, #2
 800d2c6:	e7ca      	b.n	800d25e <_strtol_l.constprop.0+0x3a>
 800d2c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d2cc:	f1be 0f19 	cmp.w	lr, #25
 800d2d0:	d801      	bhi.n	800d2d6 <_strtol_l.constprop.0+0xb2>
 800d2d2:	3c37      	subs	r4, #55	; 0x37
 800d2d4:	e7e2      	b.n	800d29c <_strtol_l.constprop.0+0x78>
 800d2d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d2da:	f1be 0f19 	cmp.w	lr, #25
 800d2de:	d804      	bhi.n	800d2ea <_strtol_l.constprop.0+0xc6>
 800d2e0:	3c57      	subs	r4, #87	; 0x57
 800d2e2:	e7db      	b.n	800d29c <_strtol_l.constprop.0+0x78>
 800d2e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d2e8:	e7e6      	b.n	800d2b8 <_strtol_l.constprop.0+0x94>
 800d2ea:	f1bc 0f00 	cmp.w	ip, #0
 800d2ee:	da05      	bge.n	800d2fc <_strtol_l.constprop.0+0xd8>
 800d2f0:	2322      	movs	r3, #34	; 0x22
 800d2f2:	6003      	str	r3, [r0, #0]
 800d2f4:	4646      	mov	r6, r8
 800d2f6:	b942      	cbnz	r2, 800d30a <_strtol_l.constprop.0+0xe6>
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	e79e      	b.n	800d23a <_strtol_l.constprop.0+0x16>
 800d2fc:	b107      	cbz	r7, 800d300 <_strtol_l.constprop.0+0xdc>
 800d2fe:	4276      	negs	r6, r6
 800d300:	2a00      	cmp	r2, #0
 800d302:	d0f9      	beq.n	800d2f8 <_strtol_l.constprop.0+0xd4>
 800d304:	f1bc 0f00 	cmp.w	ip, #0
 800d308:	d000      	beq.n	800d30c <_strtol_l.constprop.0+0xe8>
 800d30a:	1e69      	subs	r1, r5, #1
 800d30c:	6011      	str	r1, [r2, #0]
 800d30e:	e7f3      	b.n	800d2f8 <_strtol_l.constprop.0+0xd4>
 800d310:	2430      	movs	r4, #48	; 0x30
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1b1      	bne.n	800d27a <_strtol_l.constprop.0+0x56>
 800d316:	2308      	movs	r3, #8
 800d318:	e7af      	b.n	800d27a <_strtol_l.constprop.0+0x56>
 800d31a:	2c30      	cmp	r4, #48	; 0x30
 800d31c:	d0a5      	beq.n	800d26a <_strtol_l.constprop.0+0x46>
 800d31e:	230a      	movs	r3, #10
 800d320:	e7ab      	b.n	800d27a <_strtol_l.constprop.0+0x56>
 800d322:	bf00      	nop
 800d324:	08011a51 	.word	0x08011a51

0800d328 <strtol>:
 800d328:	4613      	mov	r3, r2
 800d32a:	460a      	mov	r2, r1
 800d32c:	4601      	mov	r1, r0
 800d32e:	4802      	ldr	r0, [pc, #8]	; (800d338 <strtol+0x10>)
 800d330:	6800      	ldr	r0, [r0, #0]
 800d332:	f7ff bf77 	b.w	800d224 <_strtol_l.constprop.0>
 800d336:	bf00      	nop
 800d338:	2000004c 	.word	0x2000004c

0800d33c <__swbuf_r>:
 800d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33e:	460e      	mov	r6, r1
 800d340:	4614      	mov	r4, r2
 800d342:	4605      	mov	r5, r0
 800d344:	b118      	cbz	r0, 800d34e <__swbuf_r+0x12>
 800d346:	6983      	ldr	r3, [r0, #24]
 800d348:	b90b      	cbnz	r3, 800d34e <__swbuf_r+0x12>
 800d34a:	f001 f84d 	bl	800e3e8 <__sinit>
 800d34e:	4b21      	ldr	r3, [pc, #132]	; (800d3d4 <__swbuf_r+0x98>)
 800d350:	429c      	cmp	r4, r3
 800d352:	d12b      	bne.n	800d3ac <__swbuf_r+0x70>
 800d354:	686c      	ldr	r4, [r5, #4]
 800d356:	69a3      	ldr	r3, [r4, #24]
 800d358:	60a3      	str	r3, [r4, #8]
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	071a      	lsls	r2, r3, #28
 800d35e:	d52f      	bpl.n	800d3c0 <__swbuf_r+0x84>
 800d360:	6923      	ldr	r3, [r4, #16]
 800d362:	b36b      	cbz	r3, 800d3c0 <__swbuf_r+0x84>
 800d364:	6923      	ldr	r3, [r4, #16]
 800d366:	6820      	ldr	r0, [r4, #0]
 800d368:	1ac0      	subs	r0, r0, r3
 800d36a:	6963      	ldr	r3, [r4, #20]
 800d36c:	b2f6      	uxtb	r6, r6
 800d36e:	4283      	cmp	r3, r0
 800d370:	4637      	mov	r7, r6
 800d372:	dc04      	bgt.n	800d37e <__swbuf_r+0x42>
 800d374:	4621      	mov	r1, r4
 800d376:	4628      	mov	r0, r5
 800d378:	f000 ffa2 	bl	800e2c0 <_fflush_r>
 800d37c:	bb30      	cbnz	r0, 800d3cc <__swbuf_r+0x90>
 800d37e:	68a3      	ldr	r3, [r4, #8]
 800d380:	3b01      	subs	r3, #1
 800d382:	60a3      	str	r3, [r4, #8]
 800d384:	6823      	ldr	r3, [r4, #0]
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	6022      	str	r2, [r4, #0]
 800d38a:	701e      	strb	r6, [r3, #0]
 800d38c:	6963      	ldr	r3, [r4, #20]
 800d38e:	3001      	adds	r0, #1
 800d390:	4283      	cmp	r3, r0
 800d392:	d004      	beq.n	800d39e <__swbuf_r+0x62>
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	07db      	lsls	r3, r3, #31
 800d398:	d506      	bpl.n	800d3a8 <__swbuf_r+0x6c>
 800d39a:	2e0a      	cmp	r6, #10
 800d39c:	d104      	bne.n	800d3a8 <__swbuf_r+0x6c>
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	f000 ff8d 	bl	800e2c0 <_fflush_r>
 800d3a6:	b988      	cbnz	r0, 800d3cc <__swbuf_r+0x90>
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ac:	4b0a      	ldr	r3, [pc, #40]	; (800d3d8 <__swbuf_r+0x9c>)
 800d3ae:	429c      	cmp	r4, r3
 800d3b0:	d101      	bne.n	800d3b6 <__swbuf_r+0x7a>
 800d3b2:	68ac      	ldr	r4, [r5, #8]
 800d3b4:	e7cf      	b.n	800d356 <__swbuf_r+0x1a>
 800d3b6:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <__swbuf_r+0xa0>)
 800d3b8:	429c      	cmp	r4, r3
 800d3ba:	bf08      	it	eq
 800d3bc:	68ec      	ldreq	r4, [r5, #12]
 800d3be:	e7ca      	b.n	800d356 <__swbuf_r+0x1a>
 800d3c0:	4621      	mov	r1, r4
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f000 f80c 	bl	800d3e0 <__swsetup_r>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d0cb      	beq.n	800d364 <__swbuf_r+0x28>
 800d3cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d3d0:	e7ea      	b.n	800d3a8 <__swbuf_r+0x6c>
 800d3d2:	bf00      	nop
 800d3d4:	08011c04 	.word	0x08011c04
 800d3d8:	08011c24 	.word	0x08011c24
 800d3dc:	08011be4 	.word	0x08011be4

0800d3e0 <__swsetup_r>:
 800d3e0:	4b32      	ldr	r3, [pc, #200]	; (800d4ac <__swsetup_r+0xcc>)
 800d3e2:	b570      	push	{r4, r5, r6, lr}
 800d3e4:	681d      	ldr	r5, [r3, #0]
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	b125      	cbz	r5, 800d3f6 <__swsetup_r+0x16>
 800d3ec:	69ab      	ldr	r3, [r5, #24]
 800d3ee:	b913      	cbnz	r3, 800d3f6 <__swsetup_r+0x16>
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	f000 fff9 	bl	800e3e8 <__sinit>
 800d3f6:	4b2e      	ldr	r3, [pc, #184]	; (800d4b0 <__swsetup_r+0xd0>)
 800d3f8:	429c      	cmp	r4, r3
 800d3fa:	d10f      	bne.n	800d41c <__swsetup_r+0x3c>
 800d3fc:	686c      	ldr	r4, [r5, #4]
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d404:	0719      	lsls	r1, r3, #28
 800d406:	d42c      	bmi.n	800d462 <__swsetup_r+0x82>
 800d408:	06dd      	lsls	r5, r3, #27
 800d40a:	d411      	bmi.n	800d430 <__swsetup_r+0x50>
 800d40c:	2309      	movs	r3, #9
 800d40e:	6033      	str	r3, [r6, #0]
 800d410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d414:	81a3      	strh	r3, [r4, #12]
 800d416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d41a:	e03e      	b.n	800d49a <__swsetup_r+0xba>
 800d41c:	4b25      	ldr	r3, [pc, #148]	; (800d4b4 <__swsetup_r+0xd4>)
 800d41e:	429c      	cmp	r4, r3
 800d420:	d101      	bne.n	800d426 <__swsetup_r+0x46>
 800d422:	68ac      	ldr	r4, [r5, #8]
 800d424:	e7eb      	b.n	800d3fe <__swsetup_r+0x1e>
 800d426:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <__swsetup_r+0xd8>)
 800d428:	429c      	cmp	r4, r3
 800d42a:	bf08      	it	eq
 800d42c:	68ec      	ldreq	r4, [r5, #12]
 800d42e:	e7e6      	b.n	800d3fe <__swsetup_r+0x1e>
 800d430:	0758      	lsls	r0, r3, #29
 800d432:	d512      	bpl.n	800d45a <__swsetup_r+0x7a>
 800d434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d436:	b141      	cbz	r1, 800d44a <__swsetup_r+0x6a>
 800d438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d43c:	4299      	cmp	r1, r3
 800d43e:	d002      	beq.n	800d446 <__swsetup_r+0x66>
 800d440:	4630      	mov	r0, r6
 800d442:	f002 f93b 	bl	800f6bc <_free_r>
 800d446:	2300      	movs	r3, #0
 800d448:	6363      	str	r3, [r4, #52]	; 0x34
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d450:	81a3      	strh	r3, [r4, #12]
 800d452:	2300      	movs	r3, #0
 800d454:	6063      	str	r3, [r4, #4]
 800d456:	6923      	ldr	r3, [r4, #16]
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f043 0308 	orr.w	r3, r3, #8
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	6923      	ldr	r3, [r4, #16]
 800d464:	b94b      	cbnz	r3, 800d47a <__swsetup_r+0x9a>
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d470:	d003      	beq.n	800d47a <__swsetup_r+0x9a>
 800d472:	4621      	mov	r1, r4
 800d474:	4630      	mov	r0, r6
 800d476:	f001 fbef 	bl	800ec58 <__smakebuf_r>
 800d47a:	89a0      	ldrh	r0, [r4, #12]
 800d47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d480:	f010 0301 	ands.w	r3, r0, #1
 800d484:	d00a      	beq.n	800d49c <__swsetup_r+0xbc>
 800d486:	2300      	movs	r3, #0
 800d488:	60a3      	str	r3, [r4, #8]
 800d48a:	6963      	ldr	r3, [r4, #20]
 800d48c:	425b      	negs	r3, r3
 800d48e:	61a3      	str	r3, [r4, #24]
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	b943      	cbnz	r3, 800d4a6 <__swsetup_r+0xc6>
 800d494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d498:	d1ba      	bne.n	800d410 <__swsetup_r+0x30>
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	0781      	lsls	r1, r0, #30
 800d49e:	bf58      	it	pl
 800d4a0:	6963      	ldrpl	r3, [r4, #20]
 800d4a2:	60a3      	str	r3, [r4, #8]
 800d4a4:	e7f4      	b.n	800d490 <__swsetup_r+0xb0>
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	e7f7      	b.n	800d49a <__swsetup_r+0xba>
 800d4aa:	bf00      	nop
 800d4ac:	2000004c 	.word	0x2000004c
 800d4b0:	08011c04 	.word	0x08011c04
 800d4b4:	08011c24 	.word	0x08011c24
 800d4b8:	08011be4 	.word	0x08011be4

0800d4bc <quorem>:
 800d4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	6903      	ldr	r3, [r0, #16]
 800d4c2:	690c      	ldr	r4, [r1, #16]
 800d4c4:	42a3      	cmp	r3, r4
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	f2c0 8081 	blt.w	800d5ce <quorem+0x112>
 800d4cc:	3c01      	subs	r4, #1
 800d4ce:	f101 0814 	add.w	r8, r1, #20
 800d4d2:	f100 0514 	add.w	r5, r0, #20
 800d4d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4f4:	d331      	bcc.n	800d55a <quorem+0x9e>
 800d4f6:	f04f 0e00 	mov.w	lr, #0
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	46ac      	mov	ip, r5
 800d4fe:	46f2      	mov	sl, lr
 800d500:	f850 2b04 	ldr.w	r2, [r0], #4
 800d504:	b293      	uxth	r3, r2
 800d506:	fb06 e303 	mla	r3, r6, r3, lr
 800d50a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d50e:	b29b      	uxth	r3, r3
 800d510:	ebaa 0303 	sub.w	r3, sl, r3
 800d514:	f8dc a000 	ldr.w	sl, [ip]
 800d518:	0c12      	lsrs	r2, r2, #16
 800d51a:	fa13 f38a 	uxtah	r3, r3, sl
 800d51e:	fb06 e202 	mla	r2, r6, r2, lr
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	9b00      	ldr	r3, [sp, #0]
 800d526:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d52a:	b292      	uxth	r2, r2
 800d52c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d534:	f8bd 3000 	ldrh.w	r3, [sp]
 800d538:	4581      	cmp	r9, r0
 800d53a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d53e:	f84c 3b04 	str.w	r3, [ip], #4
 800d542:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d546:	d2db      	bcs.n	800d500 <quorem+0x44>
 800d548:	f855 300b 	ldr.w	r3, [r5, fp]
 800d54c:	b92b      	cbnz	r3, 800d55a <quorem+0x9e>
 800d54e:	9b01      	ldr	r3, [sp, #4]
 800d550:	3b04      	subs	r3, #4
 800d552:	429d      	cmp	r5, r3
 800d554:	461a      	mov	r2, r3
 800d556:	d32e      	bcc.n	800d5b6 <quorem+0xfa>
 800d558:	613c      	str	r4, [r7, #16]
 800d55a:	4638      	mov	r0, r7
 800d55c:	f001 fea2 	bl	800f2a4 <__mcmp>
 800d560:	2800      	cmp	r0, #0
 800d562:	db24      	blt.n	800d5ae <quorem+0xf2>
 800d564:	3601      	adds	r6, #1
 800d566:	4628      	mov	r0, r5
 800d568:	f04f 0c00 	mov.w	ip, #0
 800d56c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d570:	f8d0 e000 	ldr.w	lr, [r0]
 800d574:	b293      	uxth	r3, r2
 800d576:	ebac 0303 	sub.w	r3, ip, r3
 800d57a:	0c12      	lsrs	r2, r2, #16
 800d57c:	fa13 f38e 	uxtah	r3, r3, lr
 800d580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d588:	b29b      	uxth	r3, r3
 800d58a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d58e:	45c1      	cmp	r9, r8
 800d590:	f840 3b04 	str.w	r3, [r0], #4
 800d594:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d598:	d2e8      	bcs.n	800d56c <quorem+0xb0>
 800d59a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d59e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5a2:	b922      	cbnz	r2, 800d5ae <quorem+0xf2>
 800d5a4:	3b04      	subs	r3, #4
 800d5a6:	429d      	cmp	r5, r3
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	d30a      	bcc.n	800d5c2 <quorem+0x106>
 800d5ac:	613c      	str	r4, [r7, #16]
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	b003      	add	sp, #12
 800d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b6:	6812      	ldr	r2, [r2, #0]
 800d5b8:	3b04      	subs	r3, #4
 800d5ba:	2a00      	cmp	r2, #0
 800d5bc:	d1cc      	bne.n	800d558 <quorem+0x9c>
 800d5be:	3c01      	subs	r4, #1
 800d5c0:	e7c7      	b.n	800d552 <quorem+0x96>
 800d5c2:	6812      	ldr	r2, [r2, #0]
 800d5c4:	3b04      	subs	r3, #4
 800d5c6:	2a00      	cmp	r2, #0
 800d5c8:	d1f0      	bne.n	800d5ac <quorem+0xf0>
 800d5ca:	3c01      	subs	r4, #1
 800d5cc:	e7eb      	b.n	800d5a6 <quorem+0xea>
 800d5ce:	2000      	movs	r0, #0
 800d5d0:	e7ee      	b.n	800d5b0 <quorem+0xf4>
 800d5d2:	0000      	movs	r0, r0
 800d5d4:	0000      	movs	r0, r0
	...

0800d5d8 <_dtoa_r>:
 800d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	ed2d 8b04 	vpush	{d8-d9}
 800d5e0:	ec57 6b10 	vmov	r6, r7, d0
 800d5e4:	b093      	sub	sp, #76	; 0x4c
 800d5e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5ec:	9106      	str	r1, [sp, #24]
 800d5ee:	ee10 aa10 	vmov	sl, s0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d5f6:	930c      	str	r3, [sp, #48]	; 0x30
 800d5f8:	46bb      	mov	fp, r7
 800d5fa:	b975      	cbnz	r5, 800d61a <_dtoa_r+0x42>
 800d5fc:	2010      	movs	r0, #16
 800d5fe:	f001 fb6b 	bl	800ecd8 <malloc>
 800d602:	4602      	mov	r2, r0
 800d604:	6260      	str	r0, [r4, #36]	; 0x24
 800d606:	b920      	cbnz	r0, 800d612 <_dtoa_r+0x3a>
 800d608:	4ba7      	ldr	r3, [pc, #668]	; (800d8a8 <_dtoa_r+0x2d0>)
 800d60a:	21ea      	movs	r1, #234	; 0xea
 800d60c:	48a7      	ldr	r0, [pc, #668]	; (800d8ac <_dtoa_r+0x2d4>)
 800d60e:	f002 fb1d 	bl	800fc4c <__assert_func>
 800d612:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d616:	6005      	str	r5, [r0, #0]
 800d618:	60c5      	str	r5, [r0, #12]
 800d61a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d61c:	6819      	ldr	r1, [r3, #0]
 800d61e:	b151      	cbz	r1, 800d636 <_dtoa_r+0x5e>
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	604a      	str	r2, [r1, #4]
 800d624:	2301      	movs	r3, #1
 800d626:	4093      	lsls	r3, r2
 800d628:	608b      	str	r3, [r1, #8]
 800d62a:	4620      	mov	r0, r4
 800d62c:	f001 fbae 	bl	800ed8c <_Bfree>
 800d630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	1e3b      	subs	r3, r7, #0
 800d638:	bfaa      	itet	ge
 800d63a:	2300      	movge	r3, #0
 800d63c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d640:	f8c8 3000 	strge.w	r3, [r8]
 800d644:	4b9a      	ldr	r3, [pc, #616]	; (800d8b0 <_dtoa_r+0x2d8>)
 800d646:	bfbc      	itt	lt
 800d648:	2201      	movlt	r2, #1
 800d64a:	f8c8 2000 	strlt.w	r2, [r8]
 800d64e:	ea33 030b 	bics.w	r3, r3, fp
 800d652:	d11b      	bne.n	800d68c <_dtoa_r+0xb4>
 800d654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d656:	f242 730f 	movw	r3, #9999	; 0x270f
 800d65a:	6013      	str	r3, [r2, #0]
 800d65c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d660:	4333      	orrs	r3, r6
 800d662:	f000 8592 	beq.w	800e18a <_dtoa_r+0xbb2>
 800d666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d668:	b963      	cbnz	r3, 800d684 <_dtoa_r+0xac>
 800d66a:	4b92      	ldr	r3, [pc, #584]	; (800d8b4 <_dtoa_r+0x2dc>)
 800d66c:	e022      	b.n	800d6b4 <_dtoa_r+0xdc>
 800d66e:	4b92      	ldr	r3, [pc, #584]	; (800d8b8 <_dtoa_r+0x2e0>)
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	3308      	adds	r3, #8
 800d674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d676:	6013      	str	r3, [r2, #0]
 800d678:	9801      	ldr	r0, [sp, #4]
 800d67a:	b013      	add	sp, #76	; 0x4c
 800d67c:	ecbd 8b04 	vpop	{d8-d9}
 800d680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d684:	4b8b      	ldr	r3, [pc, #556]	; (800d8b4 <_dtoa_r+0x2dc>)
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	3303      	adds	r3, #3
 800d68a:	e7f3      	b.n	800d674 <_dtoa_r+0x9c>
 800d68c:	2200      	movs	r2, #0
 800d68e:	2300      	movs	r3, #0
 800d690:	4650      	mov	r0, sl
 800d692:	4659      	mov	r1, fp
 800d694:	f7f3 fa38 	bl	8000b08 <__aeabi_dcmpeq>
 800d698:	ec4b ab19 	vmov	d9, sl, fp
 800d69c:	4680      	mov	r8, r0
 800d69e:	b158      	cbz	r0, 800d6b8 <_dtoa_r+0xe0>
 800d6a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 856b 	beq.w	800e184 <_dtoa_r+0xbac>
 800d6ae:	4883      	ldr	r0, [pc, #524]	; (800d8bc <_dtoa_r+0x2e4>)
 800d6b0:	6018      	str	r0, [r3, #0]
 800d6b2:	1e43      	subs	r3, r0, #1
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	e7df      	b.n	800d678 <_dtoa_r+0xa0>
 800d6b8:	ec4b ab10 	vmov	d0, sl, fp
 800d6bc:	aa10      	add	r2, sp, #64	; 0x40
 800d6be:	a911      	add	r1, sp, #68	; 0x44
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f001 ff11 	bl	800f4e8 <__d2b>
 800d6c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d6ca:	ee08 0a10 	vmov	s16, r0
 800d6ce:	2d00      	cmp	r5, #0
 800d6d0:	f000 8084 	beq.w	800d7dc <_dtoa_r+0x204>
 800d6d4:	ee19 3a90 	vmov	r3, s19
 800d6d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d6e0:	4656      	mov	r6, sl
 800d6e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d6e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d6ee:	4b74      	ldr	r3, [pc, #464]	; (800d8c0 <_dtoa_r+0x2e8>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	4639      	mov	r1, r7
 800d6f6:	f7f2 fde7 	bl	80002c8 <__aeabi_dsub>
 800d6fa:	a365      	add	r3, pc, #404	; (adr r3, 800d890 <_dtoa_r+0x2b8>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f7f2 ff9a 	bl	8000638 <__aeabi_dmul>
 800d704:	a364      	add	r3, pc, #400	; (adr r3, 800d898 <_dtoa_r+0x2c0>)
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	f7f2 fddf 	bl	80002cc <__adddf3>
 800d70e:	4606      	mov	r6, r0
 800d710:	4628      	mov	r0, r5
 800d712:	460f      	mov	r7, r1
 800d714:	f7f2 ff26 	bl	8000564 <__aeabi_i2d>
 800d718:	a361      	add	r3, pc, #388	; (adr r3, 800d8a0 <_dtoa_r+0x2c8>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f2 ff8b 	bl	8000638 <__aeabi_dmul>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	4630      	mov	r0, r6
 800d728:	4639      	mov	r1, r7
 800d72a:	f7f2 fdcf 	bl	80002cc <__adddf3>
 800d72e:	4606      	mov	r6, r0
 800d730:	460f      	mov	r7, r1
 800d732:	f7f3 fa31 	bl	8000b98 <__aeabi_d2iz>
 800d736:	2200      	movs	r2, #0
 800d738:	9000      	str	r0, [sp, #0]
 800d73a:	2300      	movs	r3, #0
 800d73c:	4630      	mov	r0, r6
 800d73e:	4639      	mov	r1, r7
 800d740:	f7f3 f9ec 	bl	8000b1c <__aeabi_dcmplt>
 800d744:	b150      	cbz	r0, 800d75c <_dtoa_r+0x184>
 800d746:	9800      	ldr	r0, [sp, #0]
 800d748:	f7f2 ff0c 	bl	8000564 <__aeabi_i2d>
 800d74c:	4632      	mov	r2, r6
 800d74e:	463b      	mov	r3, r7
 800d750:	f7f3 f9da 	bl	8000b08 <__aeabi_dcmpeq>
 800d754:	b910      	cbnz	r0, 800d75c <_dtoa_r+0x184>
 800d756:	9b00      	ldr	r3, [sp, #0]
 800d758:	3b01      	subs	r3, #1
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	9b00      	ldr	r3, [sp, #0]
 800d75e:	2b16      	cmp	r3, #22
 800d760:	d85a      	bhi.n	800d818 <_dtoa_r+0x240>
 800d762:	9a00      	ldr	r2, [sp, #0]
 800d764:	4b57      	ldr	r3, [pc, #348]	; (800d8c4 <_dtoa_r+0x2ec>)
 800d766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	ec51 0b19 	vmov	r0, r1, d9
 800d772:	f7f3 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 800d776:	2800      	cmp	r0, #0
 800d778:	d050      	beq.n	800d81c <_dtoa_r+0x244>
 800d77a:	9b00      	ldr	r3, [sp, #0]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	2300      	movs	r3, #0
 800d782:	930b      	str	r3, [sp, #44]	; 0x2c
 800d784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d786:	1b5d      	subs	r5, r3, r5
 800d788:	1e6b      	subs	r3, r5, #1
 800d78a:	9305      	str	r3, [sp, #20]
 800d78c:	bf45      	ittet	mi
 800d78e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d792:	9304      	strmi	r3, [sp, #16]
 800d794:	2300      	movpl	r3, #0
 800d796:	2300      	movmi	r3, #0
 800d798:	bf4c      	ite	mi
 800d79a:	9305      	strmi	r3, [sp, #20]
 800d79c:	9304      	strpl	r3, [sp, #16]
 800d79e:	9b00      	ldr	r3, [sp, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	db3d      	blt.n	800d820 <_dtoa_r+0x248>
 800d7a4:	9b05      	ldr	r3, [sp, #20]
 800d7a6:	9a00      	ldr	r2, [sp, #0]
 800d7a8:	920a      	str	r2, [sp, #40]	; 0x28
 800d7aa:	4413      	add	r3, r2
 800d7ac:	9305      	str	r3, [sp, #20]
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	9307      	str	r3, [sp, #28]
 800d7b2:	9b06      	ldr	r3, [sp, #24]
 800d7b4:	2b09      	cmp	r3, #9
 800d7b6:	f200 8089 	bhi.w	800d8cc <_dtoa_r+0x2f4>
 800d7ba:	2b05      	cmp	r3, #5
 800d7bc:	bfc4      	itt	gt
 800d7be:	3b04      	subgt	r3, #4
 800d7c0:	9306      	strgt	r3, [sp, #24]
 800d7c2:	9b06      	ldr	r3, [sp, #24]
 800d7c4:	f1a3 0302 	sub.w	r3, r3, #2
 800d7c8:	bfcc      	ite	gt
 800d7ca:	2500      	movgt	r5, #0
 800d7cc:	2501      	movle	r5, #1
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	f200 8087 	bhi.w	800d8e2 <_dtoa_r+0x30a>
 800d7d4:	e8df f003 	tbb	[pc, r3]
 800d7d8:	59383a2d 	.word	0x59383a2d
 800d7dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d7e0:	441d      	add	r5, r3
 800d7e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7e6:	2b20      	cmp	r3, #32
 800d7e8:	bfc1      	itttt	gt
 800d7ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d7f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d7f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d7fa:	bfda      	itte	le
 800d7fc:	f1c3 0320 	rsble	r3, r3, #32
 800d800:	fa06 f003 	lslle.w	r0, r6, r3
 800d804:	4318      	orrgt	r0, r3
 800d806:	f7f2 fe9d 	bl	8000544 <__aeabi_ui2d>
 800d80a:	2301      	movs	r3, #1
 800d80c:	4606      	mov	r6, r0
 800d80e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d812:	3d01      	subs	r5, #1
 800d814:	930e      	str	r3, [sp, #56]	; 0x38
 800d816:	e76a      	b.n	800d6ee <_dtoa_r+0x116>
 800d818:	2301      	movs	r3, #1
 800d81a:	e7b2      	b.n	800d782 <_dtoa_r+0x1aa>
 800d81c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d81e:	e7b1      	b.n	800d784 <_dtoa_r+0x1ac>
 800d820:	9b04      	ldr	r3, [sp, #16]
 800d822:	9a00      	ldr	r2, [sp, #0]
 800d824:	1a9b      	subs	r3, r3, r2
 800d826:	9304      	str	r3, [sp, #16]
 800d828:	4253      	negs	r3, r2
 800d82a:	9307      	str	r3, [sp, #28]
 800d82c:	2300      	movs	r3, #0
 800d82e:	930a      	str	r3, [sp, #40]	; 0x28
 800d830:	e7bf      	b.n	800d7b2 <_dtoa_r+0x1da>
 800d832:	2300      	movs	r3, #0
 800d834:	9308      	str	r3, [sp, #32]
 800d836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d838:	2b00      	cmp	r3, #0
 800d83a:	dc55      	bgt.n	800d8e8 <_dtoa_r+0x310>
 800d83c:	2301      	movs	r3, #1
 800d83e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d842:	461a      	mov	r2, r3
 800d844:	9209      	str	r2, [sp, #36]	; 0x24
 800d846:	e00c      	b.n	800d862 <_dtoa_r+0x28a>
 800d848:	2301      	movs	r3, #1
 800d84a:	e7f3      	b.n	800d834 <_dtoa_r+0x25c>
 800d84c:	2300      	movs	r3, #0
 800d84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d850:	9308      	str	r3, [sp, #32]
 800d852:	9b00      	ldr	r3, [sp, #0]
 800d854:	4413      	add	r3, r2
 800d856:	9302      	str	r3, [sp, #8]
 800d858:	3301      	adds	r3, #1
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	9303      	str	r3, [sp, #12]
 800d85e:	bfb8      	it	lt
 800d860:	2301      	movlt	r3, #1
 800d862:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d864:	2200      	movs	r2, #0
 800d866:	6042      	str	r2, [r0, #4]
 800d868:	2204      	movs	r2, #4
 800d86a:	f102 0614 	add.w	r6, r2, #20
 800d86e:	429e      	cmp	r6, r3
 800d870:	6841      	ldr	r1, [r0, #4]
 800d872:	d93d      	bls.n	800d8f0 <_dtoa_r+0x318>
 800d874:	4620      	mov	r0, r4
 800d876:	f001 fa49 	bl	800ed0c <_Balloc>
 800d87a:	9001      	str	r0, [sp, #4]
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d13b      	bne.n	800d8f8 <_dtoa_r+0x320>
 800d880:	4b11      	ldr	r3, [pc, #68]	; (800d8c8 <_dtoa_r+0x2f0>)
 800d882:	4602      	mov	r2, r0
 800d884:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d888:	e6c0      	b.n	800d60c <_dtoa_r+0x34>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e7df      	b.n	800d84e <_dtoa_r+0x276>
 800d88e:	bf00      	nop
 800d890:	636f4361 	.word	0x636f4361
 800d894:	3fd287a7 	.word	0x3fd287a7
 800d898:	8b60c8b3 	.word	0x8b60c8b3
 800d89c:	3fc68a28 	.word	0x3fc68a28
 800d8a0:	509f79fb 	.word	0x509f79fb
 800d8a4:	3fd34413 	.word	0x3fd34413
 800d8a8:	08011b5e 	.word	0x08011b5e
 800d8ac:	08011b75 	.word	0x08011b75
 800d8b0:	7ff00000 	.word	0x7ff00000
 800d8b4:	08011b5a 	.word	0x08011b5a
 800d8b8:	08011b51 	.word	0x08011b51
 800d8bc:	080119d9 	.word	0x080119d9
 800d8c0:	3ff80000 	.word	0x3ff80000
 800d8c4:	08011d48 	.word	0x08011d48
 800d8c8:	08011bd0 	.word	0x08011bd0
 800d8cc:	2501      	movs	r5, #1
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9306      	str	r3, [sp, #24]
 800d8d2:	9508      	str	r5, [sp, #32]
 800d8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2312      	movs	r3, #18
 800d8e0:	e7b0      	b.n	800d844 <_dtoa_r+0x26c>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	9308      	str	r3, [sp, #32]
 800d8e6:	e7f5      	b.n	800d8d4 <_dtoa_r+0x2fc>
 800d8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8ee:	e7b8      	b.n	800d862 <_dtoa_r+0x28a>
 800d8f0:	3101      	adds	r1, #1
 800d8f2:	6041      	str	r1, [r0, #4]
 800d8f4:	0052      	lsls	r2, r2, #1
 800d8f6:	e7b8      	b.n	800d86a <_dtoa_r+0x292>
 800d8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8fa:	9a01      	ldr	r2, [sp, #4]
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	2b0e      	cmp	r3, #14
 800d902:	f200 809d 	bhi.w	800da40 <_dtoa_r+0x468>
 800d906:	2d00      	cmp	r5, #0
 800d908:	f000 809a 	beq.w	800da40 <_dtoa_r+0x468>
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	dd32      	ble.n	800d978 <_dtoa_r+0x3a0>
 800d912:	4ab7      	ldr	r2, [pc, #732]	; (800dbf0 <_dtoa_r+0x618>)
 800d914:	f003 030f 	and.w	r3, r3, #15
 800d918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d91c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d920:	9b00      	ldr	r3, [sp, #0]
 800d922:	05d8      	lsls	r0, r3, #23
 800d924:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d928:	d516      	bpl.n	800d958 <_dtoa_r+0x380>
 800d92a:	4bb2      	ldr	r3, [pc, #712]	; (800dbf4 <_dtoa_r+0x61c>)
 800d92c:	ec51 0b19 	vmov	r0, r1, d9
 800d930:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d934:	f7f2 ffaa 	bl	800088c <__aeabi_ddiv>
 800d938:	f007 070f 	and.w	r7, r7, #15
 800d93c:	4682      	mov	sl, r0
 800d93e:	468b      	mov	fp, r1
 800d940:	2503      	movs	r5, #3
 800d942:	4eac      	ldr	r6, [pc, #688]	; (800dbf4 <_dtoa_r+0x61c>)
 800d944:	b957      	cbnz	r7, 800d95c <_dtoa_r+0x384>
 800d946:	4642      	mov	r2, r8
 800d948:	464b      	mov	r3, r9
 800d94a:	4650      	mov	r0, sl
 800d94c:	4659      	mov	r1, fp
 800d94e:	f7f2 ff9d 	bl	800088c <__aeabi_ddiv>
 800d952:	4682      	mov	sl, r0
 800d954:	468b      	mov	fp, r1
 800d956:	e028      	b.n	800d9aa <_dtoa_r+0x3d2>
 800d958:	2502      	movs	r5, #2
 800d95a:	e7f2      	b.n	800d942 <_dtoa_r+0x36a>
 800d95c:	07f9      	lsls	r1, r7, #31
 800d95e:	d508      	bpl.n	800d972 <_dtoa_r+0x39a>
 800d960:	4640      	mov	r0, r8
 800d962:	4649      	mov	r1, r9
 800d964:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d968:	f7f2 fe66 	bl	8000638 <__aeabi_dmul>
 800d96c:	3501      	adds	r5, #1
 800d96e:	4680      	mov	r8, r0
 800d970:	4689      	mov	r9, r1
 800d972:	107f      	asrs	r7, r7, #1
 800d974:	3608      	adds	r6, #8
 800d976:	e7e5      	b.n	800d944 <_dtoa_r+0x36c>
 800d978:	f000 809b 	beq.w	800dab2 <_dtoa_r+0x4da>
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	4f9d      	ldr	r7, [pc, #628]	; (800dbf4 <_dtoa_r+0x61c>)
 800d980:	425e      	negs	r6, r3
 800d982:	4b9b      	ldr	r3, [pc, #620]	; (800dbf0 <_dtoa_r+0x618>)
 800d984:	f006 020f 	and.w	r2, r6, #15
 800d988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	ec51 0b19 	vmov	r0, r1, d9
 800d994:	f7f2 fe50 	bl	8000638 <__aeabi_dmul>
 800d998:	1136      	asrs	r6, r6, #4
 800d99a:	4682      	mov	sl, r0
 800d99c:	468b      	mov	fp, r1
 800d99e:	2300      	movs	r3, #0
 800d9a0:	2502      	movs	r5, #2
 800d9a2:	2e00      	cmp	r6, #0
 800d9a4:	d17a      	bne.n	800da9c <_dtoa_r+0x4c4>
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1d3      	bne.n	800d952 <_dtoa_r+0x37a>
 800d9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 8082 	beq.w	800dab6 <_dtoa_r+0x4de>
 800d9b2:	4b91      	ldr	r3, [pc, #580]	; (800dbf8 <_dtoa_r+0x620>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	4659      	mov	r1, fp
 800d9ba:	f7f3 f8af 	bl	8000b1c <__aeabi_dcmplt>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d079      	beq.n	800dab6 <_dtoa_r+0x4de>
 800d9c2:	9b03      	ldr	r3, [sp, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d076      	beq.n	800dab6 <_dtoa_r+0x4de>
 800d9c8:	9b02      	ldr	r3, [sp, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	dd36      	ble.n	800da3c <_dtoa_r+0x464>
 800d9ce:	9b00      	ldr	r3, [sp, #0]
 800d9d0:	4650      	mov	r0, sl
 800d9d2:	4659      	mov	r1, fp
 800d9d4:	1e5f      	subs	r7, r3, #1
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	4b88      	ldr	r3, [pc, #544]	; (800dbfc <_dtoa_r+0x624>)
 800d9da:	f7f2 fe2d 	bl	8000638 <__aeabi_dmul>
 800d9de:	9e02      	ldr	r6, [sp, #8]
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	468b      	mov	fp, r1
 800d9e4:	3501      	adds	r5, #1
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f7f2 fdbc 	bl	8000564 <__aeabi_i2d>
 800d9ec:	4652      	mov	r2, sl
 800d9ee:	465b      	mov	r3, fp
 800d9f0:	f7f2 fe22 	bl	8000638 <__aeabi_dmul>
 800d9f4:	4b82      	ldr	r3, [pc, #520]	; (800dc00 <_dtoa_r+0x628>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f7f2 fc68 	bl	80002cc <__adddf3>
 800d9fc:	46d0      	mov	r8, sl
 800d9fe:	46d9      	mov	r9, fp
 800da00:	4682      	mov	sl, r0
 800da02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800da06:	2e00      	cmp	r6, #0
 800da08:	d158      	bne.n	800dabc <_dtoa_r+0x4e4>
 800da0a:	4b7e      	ldr	r3, [pc, #504]	; (800dc04 <_dtoa_r+0x62c>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	4640      	mov	r0, r8
 800da10:	4649      	mov	r1, r9
 800da12:	f7f2 fc59 	bl	80002c8 <__aeabi_dsub>
 800da16:	4652      	mov	r2, sl
 800da18:	465b      	mov	r3, fp
 800da1a:	4680      	mov	r8, r0
 800da1c:	4689      	mov	r9, r1
 800da1e:	f7f3 f89b 	bl	8000b58 <__aeabi_dcmpgt>
 800da22:	2800      	cmp	r0, #0
 800da24:	f040 8295 	bne.w	800df52 <_dtoa_r+0x97a>
 800da28:	4652      	mov	r2, sl
 800da2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da2e:	4640      	mov	r0, r8
 800da30:	4649      	mov	r1, r9
 800da32:	f7f3 f873 	bl	8000b1c <__aeabi_dcmplt>
 800da36:	2800      	cmp	r0, #0
 800da38:	f040 8289 	bne.w	800df4e <_dtoa_r+0x976>
 800da3c:	ec5b ab19 	vmov	sl, fp, d9
 800da40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da42:	2b00      	cmp	r3, #0
 800da44:	f2c0 8148 	blt.w	800dcd8 <_dtoa_r+0x700>
 800da48:	9a00      	ldr	r2, [sp, #0]
 800da4a:	2a0e      	cmp	r2, #14
 800da4c:	f300 8144 	bgt.w	800dcd8 <_dtoa_r+0x700>
 800da50:	4b67      	ldr	r3, [pc, #412]	; (800dbf0 <_dtoa_r+0x618>)
 800da52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da56:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f280 80d5 	bge.w	800dc0c <_dtoa_r+0x634>
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	f300 80d1 	bgt.w	800dc0c <_dtoa_r+0x634>
 800da6a:	f040 826f 	bne.w	800df4c <_dtoa_r+0x974>
 800da6e:	4b65      	ldr	r3, [pc, #404]	; (800dc04 <_dtoa_r+0x62c>)
 800da70:	2200      	movs	r2, #0
 800da72:	4640      	mov	r0, r8
 800da74:	4649      	mov	r1, r9
 800da76:	f7f2 fddf 	bl	8000638 <__aeabi_dmul>
 800da7a:	4652      	mov	r2, sl
 800da7c:	465b      	mov	r3, fp
 800da7e:	f7f3 f861 	bl	8000b44 <__aeabi_dcmpge>
 800da82:	9e03      	ldr	r6, [sp, #12]
 800da84:	4637      	mov	r7, r6
 800da86:	2800      	cmp	r0, #0
 800da88:	f040 8245 	bne.w	800df16 <_dtoa_r+0x93e>
 800da8c:	9d01      	ldr	r5, [sp, #4]
 800da8e:	2331      	movs	r3, #49	; 0x31
 800da90:	f805 3b01 	strb.w	r3, [r5], #1
 800da94:	9b00      	ldr	r3, [sp, #0]
 800da96:	3301      	adds	r3, #1
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	e240      	b.n	800df1e <_dtoa_r+0x946>
 800da9c:	07f2      	lsls	r2, r6, #31
 800da9e:	d505      	bpl.n	800daac <_dtoa_r+0x4d4>
 800daa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daa4:	f7f2 fdc8 	bl	8000638 <__aeabi_dmul>
 800daa8:	3501      	adds	r5, #1
 800daaa:	2301      	movs	r3, #1
 800daac:	1076      	asrs	r6, r6, #1
 800daae:	3708      	adds	r7, #8
 800dab0:	e777      	b.n	800d9a2 <_dtoa_r+0x3ca>
 800dab2:	2502      	movs	r5, #2
 800dab4:	e779      	b.n	800d9aa <_dtoa_r+0x3d2>
 800dab6:	9f00      	ldr	r7, [sp, #0]
 800dab8:	9e03      	ldr	r6, [sp, #12]
 800daba:	e794      	b.n	800d9e6 <_dtoa_r+0x40e>
 800dabc:	9901      	ldr	r1, [sp, #4]
 800dabe:	4b4c      	ldr	r3, [pc, #304]	; (800dbf0 <_dtoa_r+0x618>)
 800dac0:	4431      	add	r1, r6
 800dac2:	910d      	str	r1, [sp, #52]	; 0x34
 800dac4:	9908      	ldr	r1, [sp, #32]
 800dac6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800daca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dace:	2900      	cmp	r1, #0
 800dad0:	d043      	beq.n	800db5a <_dtoa_r+0x582>
 800dad2:	494d      	ldr	r1, [pc, #308]	; (800dc08 <_dtoa_r+0x630>)
 800dad4:	2000      	movs	r0, #0
 800dad6:	f7f2 fed9 	bl	800088c <__aeabi_ddiv>
 800dada:	4652      	mov	r2, sl
 800dadc:	465b      	mov	r3, fp
 800dade:	f7f2 fbf3 	bl	80002c8 <__aeabi_dsub>
 800dae2:	9d01      	ldr	r5, [sp, #4]
 800dae4:	4682      	mov	sl, r0
 800dae6:	468b      	mov	fp, r1
 800dae8:	4649      	mov	r1, r9
 800daea:	4640      	mov	r0, r8
 800daec:	f7f3 f854 	bl	8000b98 <__aeabi_d2iz>
 800daf0:	4606      	mov	r6, r0
 800daf2:	f7f2 fd37 	bl	8000564 <__aeabi_i2d>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4640      	mov	r0, r8
 800dafc:	4649      	mov	r1, r9
 800dafe:	f7f2 fbe3 	bl	80002c8 <__aeabi_dsub>
 800db02:	3630      	adds	r6, #48	; 0x30
 800db04:	f805 6b01 	strb.w	r6, [r5], #1
 800db08:	4652      	mov	r2, sl
 800db0a:	465b      	mov	r3, fp
 800db0c:	4680      	mov	r8, r0
 800db0e:	4689      	mov	r9, r1
 800db10:	f7f3 f804 	bl	8000b1c <__aeabi_dcmplt>
 800db14:	2800      	cmp	r0, #0
 800db16:	d163      	bne.n	800dbe0 <_dtoa_r+0x608>
 800db18:	4642      	mov	r2, r8
 800db1a:	464b      	mov	r3, r9
 800db1c:	4936      	ldr	r1, [pc, #216]	; (800dbf8 <_dtoa_r+0x620>)
 800db1e:	2000      	movs	r0, #0
 800db20:	f7f2 fbd2 	bl	80002c8 <__aeabi_dsub>
 800db24:	4652      	mov	r2, sl
 800db26:	465b      	mov	r3, fp
 800db28:	f7f2 fff8 	bl	8000b1c <__aeabi_dcmplt>
 800db2c:	2800      	cmp	r0, #0
 800db2e:	f040 80b5 	bne.w	800dc9c <_dtoa_r+0x6c4>
 800db32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db34:	429d      	cmp	r5, r3
 800db36:	d081      	beq.n	800da3c <_dtoa_r+0x464>
 800db38:	4b30      	ldr	r3, [pc, #192]	; (800dbfc <_dtoa_r+0x624>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	4650      	mov	r0, sl
 800db3e:	4659      	mov	r1, fp
 800db40:	f7f2 fd7a 	bl	8000638 <__aeabi_dmul>
 800db44:	4b2d      	ldr	r3, [pc, #180]	; (800dbfc <_dtoa_r+0x624>)
 800db46:	4682      	mov	sl, r0
 800db48:	468b      	mov	fp, r1
 800db4a:	4640      	mov	r0, r8
 800db4c:	4649      	mov	r1, r9
 800db4e:	2200      	movs	r2, #0
 800db50:	f7f2 fd72 	bl	8000638 <__aeabi_dmul>
 800db54:	4680      	mov	r8, r0
 800db56:	4689      	mov	r9, r1
 800db58:	e7c6      	b.n	800dae8 <_dtoa_r+0x510>
 800db5a:	4650      	mov	r0, sl
 800db5c:	4659      	mov	r1, fp
 800db5e:	f7f2 fd6b 	bl	8000638 <__aeabi_dmul>
 800db62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db64:	9d01      	ldr	r5, [sp, #4]
 800db66:	930f      	str	r3, [sp, #60]	; 0x3c
 800db68:	4682      	mov	sl, r0
 800db6a:	468b      	mov	fp, r1
 800db6c:	4649      	mov	r1, r9
 800db6e:	4640      	mov	r0, r8
 800db70:	f7f3 f812 	bl	8000b98 <__aeabi_d2iz>
 800db74:	4606      	mov	r6, r0
 800db76:	f7f2 fcf5 	bl	8000564 <__aeabi_i2d>
 800db7a:	3630      	adds	r6, #48	; 0x30
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4640      	mov	r0, r8
 800db82:	4649      	mov	r1, r9
 800db84:	f7f2 fba0 	bl	80002c8 <__aeabi_dsub>
 800db88:	f805 6b01 	strb.w	r6, [r5], #1
 800db8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db8e:	429d      	cmp	r5, r3
 800db90:	4680      	mov	r8, r0
 800db92:	4689      	mov	r9, r1
 800db94:	f04f 0200 	mov.w	r2, #0
 800db98:	d124      	bne.n	800dbe4 <_dtoa_r+0x60c>
 800db9a:	4b1b      	ldr	r3, [pc, #108]	; (800dc08 <_dtoa_r+0x630>)
 800db9c:	4650      	mov	r0, sl
 800db9e:	4659      	mov	r1, fp
 800dba0:	f7f2 fb94 	bl	80002cc <__adddf3>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	4640      	mov	r0, r8
 800dbaa:	4649      	mov	r1, r9
 800dbac:	f7f2 ffd4 	bl	8000b58 <__aeabi_dcmpgt>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d173      	bne.n	800dc9c <_dtoa_r+0x6c4>
 800dbb4:	4652      	mov	r2, sl
 800dbb6:	465b      	mov	r3, fp
 800dbb8:	4913      	ldr	r1, [pc, #76]	; (800dc08 <_dtoa_r+0x630>)
 800dbba:	2000      	movs	r0, #0
 800dbbc:	f7f2 fb84 	bl	80002c8 <__aeabi_dsub>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	4640      	mov	r0, r8
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	f7f2 ffa8 	bl	8000b1c <__aeabi_dcmplt>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f43f af35 	beq.w	800da3c <_dtoa_r+0x464>
 800dbd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbd4:	1e6b      	subs	r3, r5, #1
 800dbd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbdc:	2b30      	cmp	r3, #48	; 0x30
 800dbde:	d0f8      	beq.n	800dbd2 <_dtoa_r+0x5fa>
 800dbe0:	9700      	str	r7, [sp, #0]
 800dbe2:	e049      	b.n	800dc78 <_dtoa_r+0x6a0>
 800dbe4:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <_dtoa_r+0x624>)
 800dbe6:	f7f2 fd27 	bl	8000638 <__aeabi_dmul>
 800dbea:	4680      	mov	r8, r0
 800dbec:	4689      	mov	r9, r1
 800dbee:	e7bd      	b.n	800db6c <_dtoa_r+0x594>
 800dbf0:	08011d48 	.word	0x08011d48
 800dbf4:	08011d20 	.word	0x08011d20
 800dbf8:	3ff00000 	.word	0x3ff00000
 800dbfc:	40240000 	.word	0x40240000
 800dc00:	401c0000 	.word	0x401c0000
 800dc04:	40140000 	.word	0x40140000
 800dc08:	3fe00000 	.word	0x3fe00000
 800dc0c:	9d01      	ldr	r5, [sp, #4]
 800dc0e:	4656      	mov	r6, sl
 800dc10:	465f      	mov	r7, fp
 800dc12:	4642      	mov	r2, r8
 800dc14:	464b      	mov	r3, r9
 800dc16:	4630      	mov	r0, r6
 800dc18:	4639      	mov	r1, r7
 800dc1a:	f7f2 fe37 	bl	800088c <__aeabi_ddiv>
 800dc1e:	f7f2 ffbb 	bl	8000b98 <__aeabi_d2iz>
 800dc22:	4682      	mov	sl, r0
 800dc24:	f7f2 fc9e 	bl	8000564 <__aeabi_i2d>
 800dc28:	4642      	mov	r2, r8
 800dc2a:	464b      	mov	r3, r9
 800dc2c:	f7f2 fd04 	bl	8000638 <__aeabi_dmul>
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc3c:	f7f2 fb44 	bl	80002c8 <__aeabi_dsub>
 800dc40:	f805 6b01 	strb.w	r6, [r5], #1
 800dc44:	9e01      	ldr	r6, [sp, #4]
 800dc46:	9f03      	ldr	r7, [sp, #12]
 800dc48:	1bae      	subs	r6, r5, r6
 800dc4a:	42b7      	cmp	r7, r6
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	d135      	bne.n	800dcbe <_dtoa_r+0x6e6>
 800dc52:	f7f2 fb3b 	bl	80002cc <__adddf3>
 800dc56:	4642      	mov	r2, r8
 800dc58:	464b      	mov	r3, r9
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	f7f2 ff7b 	bl	8000b58 <__aeabi_dcmpgt>
 800dc62:	b9d0      	cbnz	r0, 800dc9a <_dtoa_r+0x6c2>
 800dc64:	4642      	mov	r2, r8
 800dc66:	464b      	mov	r3, r9
 800dc68:	4630      	mov	r0, r6
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	f7f2 ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 800dc70:	b110      	cbz	r0, 800dc78 <_dtoa_r+0x6a0>
 800dc72:	f01a 0f01 	tst.w	sl, #1
 800dc76:	d110      	bne.n	800dc9a <_dtoa_r+0x6c2>
 800dc78:	4620      	mov	r0, r4
 800dc7a:	ee18 1a10 	vmov	r1, s16
 800dc7e:	f001 f885 	bl	800ed8c <_Bfree>
 800dc82:	2300      	movs	r3, #0
 800dc84:	9800      	ldr	r0, [sp, #0]
 800dc86:	702b      	strb	r3, [r5, #0]
 800dc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	6018      	str	r0, [r3, #0]
 800dc8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f43f acf1 	beq.w	800d678 <_dtoa_r+0xa0>
 800dc96:	601d      	str	r5, [r3, #0]
 800dc98:	e4ee      	b.n	800d678 <_dtoa_r+0xa0>
 800dc9a:	9f00      	ldr	r7, [sp, #0]
 800dc9c:	462b      	mov	r3, r5
 800dc9e:	461d      	mov	r5, r3
 800dca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dca4:	2a39      	cmp	r2, #57	; 0x39
 800dca6:	d106      	bne.n	800dcb6 <_dtoa_r+0x6de>
 800dca8:	9a01      	ldr	r2, [sp, #4]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d1f7      	bne.n	800dc9e <_dtoa_r+0x6c6>
 800dcae:	9901      	ldr	r1, [sp, #4]
 800dcb0:	2230      	movs	r2, #48	; 0x30
 800dcb2:	3701      	adds	r7, #1
 800dcb4:	700a      	strb	r2, [r1, #0]
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	3201      	adds	r2, #1
 800dcba:	701a      	strb	r2, [r3, #0]
 800dcbc:	e790      	b.n	800dbe0 <_dtoa_r+0x608>
 800dcbe:	4ba6      	ldr	r3, [pc, #664]	; (800df58 <_dtoa_r+0x980>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f7f2 fcb9 	bl	8000638 <__aeabi_dmul>
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4606      	mov	r6, r0
 800dccc:	460f      	mov	r7, r1
 800dcce:	f7f2 ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d09d      	beq.n	800dc12 <_dtoa_r+0x63a>
 800dcd6:	e7cf      	b.n	800dc78 <_dtoa_r+0x6a0>
 800dcd8:	9a08      	ldr	r2, [sp, #32]
 800dcda:	2a00      	cmp	r2, #0
 800dcdc:	f000 80d7 	beq.w	800de8e <_dtoa_r+0x8b6>
 800dce0:	9a06      	ldr	r2, [sp, #24]
 800dce2:	2a01      	cmp	r2, #1
 800dce4:	f300 80ba 	bgt.w	800de5c <_dtoa_r+0x884>
 800dce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcea:	2a00      	cmp	r2, #0
 800dcec:	f000 80b2 	beq.w	800de54 <_dtoa_r+0x87c>
 800dcf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dcf4:	9e07      	ldr	r6, [sp, #28]
 800dcf6:	9d04      	ldr	r5, [sp, #16]
 800dcf8:	9a04      	ldr	r2, [sp, #16]
 800dcfa:	441a      	add	r2, r3
 800dcfc:	9204      	str	r2, [sp, #16]
 800dcfe:	9a05      	ldr	r2, [sp, #20]
 800dd00:	2101      	movs	r1, #1
 800dd02:	441a      	add	r2, r3
 800dd04:	4620      	mov	r0, r4
 800dd06:	9205      	str	r2, [sp, #20]
 800dd08:	f001 f942 	bl	800ef90 <__i2b>
 800dd0c:	4607      	mov	r7, r0
 800dd0e:	2d00      	cmp	r5, #0
 800dd10:	dd0c      	ble.n	800dd2c <_dtoa_r+0x754>
 800dd12:	9b05      	ldr	r3, [sp, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	dd09      	ble.n	800dd2c <_dtoa_r+0x754>
 800dd18:	42ab      	cmp	r3, r5
 800dd1a:	9a04      	ldr	r2, [sp, #16]
 800dd1c:	bfa8      	it	ge
 800dd1e:	462b      	movge	r3, r5
 800dd20:	1ad2      	subs	r2, r2, r3
 800dd22:	9204      	str	r2, [sp, #16]
 800dd24:	9a05      	ldr	r2, [sp, #20]
 800dd26:	1aed      	subs	r5, r5, r3
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	9305      	str	r3, [sp, #20]
 800dd2c:	9b07      	ldr	r3, [sp, #28]
 800dd2e:	b31b      	cbz	r3, 800dd78 <_dtoa_r+0x7a0>
 800dd30:	9b08      	ldr	r3, [sp, #32]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f000 80af 	beq.w	800de96 <_dtoa_r+0x8be>
 800dd38:	2e00      	cmp	r6, #0
 800dd3a:	dd13      	ble.n	800dd64 <_dtoa_r+0x78c>
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	4632      	mov	r2, r6
 800dd40:	4620      	mov	r0, r4
 800dd42:	f001 f9e5 	bl	800f110 <__pow5mult>
 800dd46:	ee18 2a10 	vmov	r2, s16
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	4607      	mov	r7, r0
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f001 f934 	bl	800efbc <__multiply>
 800dd54:	ee18 1a10 	vmov	r1, s16
 800dd58:	4680      	mov	r8, r0
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f001 f816 	bl	800ed8c <_Bfree>
 800dd60:	ee08 8a10 	vmov	s16, r8
 800dd64:	9b07      	ldr	r3, [sp, #28]
 800dd66:	1b9a      	subs	r2, r3, r6
 800dd68:	d006      	beq.n	800dd78 <_dtoa_r+0x7a0>
 800dd6a:	ee18 1a10 	vmov	r1, s16
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f001 f9ce 	bl	800f110 <__pow5mult>
 800dd74:	ee08 0a10 	vmov	s16, r0
 800dd78:	2101      	movs	r1, #1
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f001 f908 	bl	800ef90 <__i2b>
 800dd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	4606      	mov	r6, r0
 800dd86:	f340 8088 	ble.w	800de9a <_dtoa_r+0x8c2>
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	4601      	mov	r1, r0
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f001 f9be 	bl	800f110 <__pow5mult>
 800dd94:	9b06      	ldr	r3, [sp, #24]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	4606      	mov	r6, r0
 800dd9a:	f340 8081 	ble.w	800dea0 <_dtoa_r+0x8c8>
 800dd9e:	f04f 0800 	mov.w	r8, #0
 800dda2:	6933      	ldr	r3, [r6, #16]
 800dda4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dda8:	6918      	ldr	r0, [r3, #16]
 800ddaa:	f001 f8a1 	bl	800eef0 <__hi0bits>
 800ddae:	f1c0 0020 	rsb	r0, r0, #32
 800ddb2:	9b05      	ldr	r3, [sp, #20]
 800ddb4:	4418      	add	r0, r3
 800ddb6:	f010 001f 	ands.w	r0, r0, #31
 800ddba:	f000 8092 	beq.w	800dee2 <_dtoa_r+0x90a>
 800ddbe:	f1c0 0320 	rsb	r3, r0, #32
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	f340 808a 	ble.w	800dedc <_dtoa_r+0x904>
 800ddc8:	f1c0 001c 	rsb	r0, r0, #28
 800ddcc:	9b04      	ldr	r3, [sp, #16]
 800ddce:	4403      	add	r3, r0
 800ddd0:	9304      	str	r3, [sp, #16]
 800ddd2:	9b05      	ldr	r3, [sp, #20]
 800ddd4:	4403      	add	r3, r0
 800ddd6:	4405      	add	r5, r0
 800ddd8:	9305      	str	r3, [sp, #20]
 800ddda:	9b04      	ldr	r3, [sp, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	dd07      	ble.n	800ddf0 <_dtoa_r+0x818>
 800dde0:	ee18 1a10 	vmov	r1, s16
 800dde4:	461a      	mov	r2, r3
 800dde6:	4620      	mov	r0, r4
 800dde8:	f001 f9ec 	bl	800f1c4 <__lshift>
 800ddec:	ee08 0a10 	vmov	s16, r0
 800ddf0:	9b05      	ldr	r3, [sp, #20]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	dd05      	ble.n	800de02 <_dtoa_r+0x82a>
 800ddf6:	4631      	mov	r1, r6
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f001 f9e2 	bl	800f1c4 <__lshift>
 800de00:	4606      	mov	r6, r0
 800de02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de04:	2b00      	cmp	r3, #0
 800de06:	d06e      	beq.n	800dee6 <_dtoa_r+0x90e>
 800de08:	ee18 0a10 	vmov	r0, s16
 800de0c:	4631      	mov	r1, r6
 800de0e:	f001 fa49 	bl	800f2a4 <__mcmp>
 800de12:	2800      	cmp	r0, #0
 800de14:	da67      	bge.n	800dee6 <_dtoa_r+0x90e>
 800de16:	9b00      	ldr	r3, [sp, #0]
 800de18:	3b01      	subs	r3, #1
 800de1a:	ee18 1a10 	vmov	r1, s16
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	220a      	movs	r2, #10
 800de22:	2300      	movs	r3, #0
 800de24:	4620      	mov	r0, r4
 800de26:	f000 ffd3 	bl	800edd0 <__multadd>
 800de2a:	9b08      	ldr	r3, [sp, #32]
 800de2c:	ee08 0a10 	vmov	s16, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 81b1 	beq.w	800e198 <_dtoa_r+0xbc0>
 800de36:	2300      	movs	r3, #0
 800de38:	4639      	mov	r1, r7
 800de3a:	220a      	movs	r2, #10
 800de3c:	4620      	mov	r0, r4
 800de3e:	f000 ffc7 	bl	800edd0 <__multadd>
 800de42:	9b02      	ldr	r3, [sp, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	4607      	mov	r7, r0
 800de48:	f300 808e 	bgt.w	800df68 <_dtoa_r+0x990>
 800de4c:	9b06      	ldr	r3, [sp, #24]
 800de4e:	2b02      	cmp	r3, #2
 800de50:	dc51      	bgt.n	800def6 <_dtoa_r+0x91e>
 800de52:	e089      	b.n	800df68 <_dtoa_r+0x990>
 800de54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de5a:	e74b      	b.n	800dcf4 <_dtoa_r+0x71c>
 800de5c:	9b03      	ldr	r3, [sp, #12]
 800de5e:	1e5e      	subs	r6, r3, #1
 800de60:	9b07      	ldr	r3, [sp, #28]
 800de62:	42b3      	cmp	r3, r6
 800de64:	bfbf      	itttt	lt
 800de66:	9b07      	ldrlt	r3, [sp, #28]
 800de68:	9607      	strlt	r6, [sp, #28]
 800de6a:	1af2      	sublt	r2, r6, r3
 800de6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de6e:	bfb6      	itet	lt
 800de70:	189b      	addlt	r3, r3, r2
 800de72:	1b9e      	subge	r6, r3, r6
 800de74:	930a      	strlt	r3, [sp, #40]	; 0x28
 800de76:	9b03      	ldr	r3, [sp, #12]
 800de78:	bfb8      	it	lt
 800de7a:	2600      	movlt	r6, #0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	bfb7      	itett	lt
 800de80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800de84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800de88:	1a9d      	sublt	r5, r3, r2
 800de8a:	2300      	movlt	r3, #0
 800de8c:	e734      	b.n	800dcf8 <_dtoa_r+0x720>
 800de8e:	9e07      	ldr	r6, [sp, #28]
 800de90:	9d04      	ldr	r5, [sp, #16]
 800de92:	9f08      	ldr	r7, [sp, #32]
 800de94:	e73b      	b.n	800dd0e <_dtoa_r+0x736>
 800de96:	9a07      	ldr	r2, [sp, #28]
 800de98:	e767      	b.n	800dd6a <_dtoa_r+0x792>
 800de9a:	9b06      	ldr	r3, [sp, #24]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	dc18      	bgt.n	800ded2 <_dtoa_r+0x8fa>
 800dea0:	f1ba 0f00 	cmp.w	sl, #0
 800dea4:	d115      	bne.n	800ded2 <_dtoa_r+0x8fa>
 800dea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deaa:	b993      	cbnz	r3, 800ded2 <_dtoa_r+0x8fa>
 800deac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800deb0:	0d1b      	lsrs	r3, r3, #20
 800deb2:	051b      	lsls	r3, r3, #20
 800deb4:	b183      	cbz	r3, 800ded8 <_dtoa_r+0x900>
 800deb6:	9b04      	ldr	r3, [sp, #16]
 800deb8:	3301      	adds	r3, #1
 800deba:	9304      	str	r3, [sp, #16]
 800debc:	9b05      	ldr	r3, [sp, #20]
 800debe:	3301      	adds	r3, #1
 800dec0:	9305      	str	r3, [sp, #20]
 800dec2:	f04f 0801 	mov.w	r8, #1
 800dec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f47f af6a 	bne.w	800dda2 <_dtoa_r+0x7ca>
 800dece:	2001      	movs	r0, #1
 800ded0:	e76f      	b.n	800ddb2 <_dtoa_r+0x7da>
 800ded2:	f04f 0800 	mov.w	r8, #0
 800ded6:	e7f6      	b.n	800dec6 <_dtoa_r+0x8ee>
 800ded8:	4698      	mov	r8, r3
 800deda:	e7f4      	b.n	800dec6 <_dtoa_r+0x8ee>
 800dedc:	f43f af7d 	beq.w	800ddda <_dtoa_r+0x802>
 800dee0:	4618      	mov	r0, r3
 800dee2:	301c      	adds	r0, #28
 800dee4:	e772      	b.n	800ddcc <_dtoa_r+0x7f4>
 800dee6:	9b03      	ldr	r3, [sp, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	dc37      	bgt.n	800df5c <_dtoa_r+0x984>
 800deec:	9b06      	ldr	r3, [sp, #24]
 800deee:	2b02      	cmp	r3, #2
 800def0:	dd34      	ble.n	800df5c <_dtoa_r+0x984>
 800def2:	9b03      	ldr	r3, [sp, #12]
 800def4:	9302      	str	r3, [sp, #8]
 800def6:	9b02      	ldr	r3, [sp, #8]
 800def8:	b96b      	cbnz	r3, 800df16 <_dtoa_r+0x93e>
 800defa:	4631      	mov	r1, r6
 800defc:	2205      	movs	r2, #5
 800defe:	4620      	mov	r0, r4
 800df00:	f000 ff66 	bl	800edd0 <__multadd>
 800df04:	4601      	mov	r1, r0
 800df06:	4606      	mov	r6, r0
 800df08:	ee18 0a10 	vmov	r0, s16
 800df0c:	f001 f9ca 	bl	800f2a4 <__mcmp>
 800df10:	2800      	cmp	r0, #0
 800df12:	f73f adbb 	bgt.w	800da8c <_dtoa_r+0x4b4>
 800df16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df18:	9d01      	ldr	r5, [sp, #4]
 800df1a:	43db      	mvns	r3, r3
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	f04f 0800 	mov.w	r8, #0
 800df22:	4631      	mov	r1, r6
 800df24:	4620      	mov	r0, r4
 800df26:	f000 ff31 	bl	800ed8c <_Bfree>
 800df2a:	2f00      	cmp	r7, #0
 800df2c:	f43f aea4 	beq.w	800dc78 <_dtoa_r+0x6a0>
 800df30:	f1b8 0f00 	cmp.w	r8, #0
 800df34:	d005      	beq.n	800df42 <_dtoa_r+0x96a>
 800df36:	45b8      	cmp	r8, r7
 800df38:	d003      	beq.n	800df42 <_dtoa_r+0x96a>
 800df3a:	4641      	mov	r1, r8
 800df3c:	4620      	mov	r0, r4
 800df3e:	f000 ff25 	bl	800ed8c <_Bfree>
 800df42:	4639      	mov	r1, r7
 800df44:	4620      	mov	r0, r4
 800df46:	f000 ff21 	bl	800ed8c <_Bfree>
 800df4a:	e695      	b.n	800dc78 <_dtoa_r+0x6a0>
 800df4c:	2600      	movs	r6, #0
 800df4e:	4637      	mov	r7, r6
 800df50:	e7e1      	b.n	800df16 <_dtoa_r+0x93e>
 800df52:	9700      	str	r7, [sp, #0]
 800df54:	4637      	mov	r7, r6
 800df56:	e599      	b.n	800da8c <_dtoa_r+0x4b4>
 800df58:	40240000 	.word	0x40240000
 800df5c:	9b08      	ldr	r3, [sp, #32]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f000 80ca 	beq.w	800e0f8 <_dtoa_r+0xb20>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	9302      	str	r3, [sp, #8]
 800df68:	2d00      	cmp	r5, #0
 800df6a:	dd05      	ble.n	800df78 <_dtoa_r+0x9a0>
 800df6c:	4639      	mov	r1, r7
 800df6e:	462a      	mov	r2, r5
 800df70:	4620      	mov	r0, r4
 800df72:	f001 f927 	bl	800f1c4 <__lshift>
 800df76:	4607      	mov	r7, r0
 800df78:	f1b8 0f00 	cmp.w	r8, #0
 800df7c:	d05b      	beq.n	800e036 <_dtoa_r+0xa5e>
 800df7e:	6879      	ldr	r1, [r7, #4]
 800df80:	4620      	mov	r0, r4
 800df82:	f000 fec3 	bl	800ed0c <_Balloc>
 800df86:	4605      	mov	r5, r0
 800df88:	b928      	cbnz	r0, 800df96 <_dtoa_r+0x9be>
 800df8a:	4b87      	ldr	r3, [pc, #540]	; (800e1a8 <_dtoa_r+0xbd0>)
 800df8c:	4602      	mov	r2, r0
 800df8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df92:	f7ff bb3b 	b.w	800d60c <_dtoa_r+0x34>
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	3202      	adds	r2, #2
 800df9a:	0092      	lsls	r2, r2, #2
 800df9c:	f107 010c 	add.w	r1, r7, #12
 800dfa0:	300c      	adds	r0, #12
 800dfa2:	f7fd fe01 	bl	800bba8 <memcpy>
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f001 f90a 	bl	800f1c4 <__lshift>
 800dfb0:	9b01      	ldr	r3, [sp, #4]
 800dfb2:	f103 0901 	add.w	r9, r3, #1
 800dfb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dfba:	4413      	add	r3, r2
 800dfbc:	9305      	str	r3, [sp, #20]
 800dfbe:	f00a 0301 	and.w	r3, sl, #1
 800dfc2:	46b8      	mov	r8, r7
 800dfc4:	9304      	str	r3, [sp, #16]
 800dfc6:	4607      	mov	r7, r0
 800dfc8:	4631      	mov	r1, r6
 800dfca:	ee18 0a10 	vmov	r0, s16
 800dfce:	f7ff fa75 	bl	800d4bc <quorem>
 800dfd2:	4641      	mov	r1, r8
 800dfd4:	9002      	str	r0, [sp, #8]
 800dfd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfda:	ee18 0a10 	vmov	r0, s16
 800dfde:	f001 f961 	bl	800f2a4 <__mcmp>
 800dfe2:	463a      	mov	r2, r7
 800dfe4:	9003      	str	r0, [sp, #12]
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f001 f977 	bl	800f2dc <__mdiff>
 800dfee:	68c2      	ldr	r2, [r0, #12]
 800dff0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800dff4:	4605      	mov	r5, r0
 800dff6:	bb02      	cbnz	r2, 800e03a <_dtoa_r+0xa62>
 800dff8:	4601      	mov	r1, r0
 800dffa:	ee18 0a10 	vmov	r0, s16
 800dffe:	f001 f951 	bl	800f2a4 <__mcmp>
 800e002:	4602      	mov	r2, r0
 800e004:	4629      	mov	r1, r5
 800e006:	4620      	mov	r0, r4
 800e008:	9207      	str	r2, [sp, #28]
 800e00a:	f000 febf 	bl	800ed8c <_Bfree>
 800e00e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e012:	ea43 0102 	orr.w	r1, r3, r2
 800e016:	9b04      	ldr	r3, [sp, #16]
 800e018:	430b      	orrs	r3, r1
 800e01a:	464d      	mov	r5, r9
 800e01c:	d10f      	bne.n	800e03e <_dtoa_r+0xa66>
 800e01e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e022:	d02a      	beq.n	800e07a <_dtoa_r+0xaa2>
 800e024:	9b03      	ldr	r3, [sp, #12]
 800e026:	2b00      	cmp	r3, #0
 800e028:	dd02      	ble.n	800e030 <_dtoa_r+0xa58>
 800e02a:	9b02      	ldr	r3, [sp, #8]
 800e02c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e030:	f88b a000 	strb.w	sl, [fp]
 800e034:	e775      	b.n	800df22 <_dtoa_r+0x94a>
 800e036:	4638      	mov	r0, r7
 800e038:	e7ba      	b.n	800dfb0 <_dtoa_r+0x9d8>
 800e03a:	2201      	movs	r2, #1
 800e03c:	e7e2      	b.n	800e004 <_dtoa_r+0xa2c>
 800e03e:	9b03      	ldr	r3, [sp, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	db04      	blt.n	800e04e <_dtoa_r+0xa76>
 800e044:	9906      	ldr	r1, [sp, #24]
 800e046:	430b      	orrs	r3, r1
 800e048:	9904      	ldr	r1, [sp, #16]
 800e04a:	430b      	orrs	r3, r1
 800e04c:	d122      	bne.n	800e094 <_dtoa_r+0xabc>
 800e04e:	2a00      	cmp	r2, #0
 800e050:	ddee      	ble.n	800e030 <_dtoa_r+0xa58>
 800e052:	ee18 1a10 	vmov	r1, s16
 800e056:	2201      	movs	r2, #1
 800e058:	4620      	mov	r0, r4
 800e05a:	f001 f8b3 	bl	800f1c4 <__lshift>
 800e05e:	4631      	mov	r1, r6
 800e060:	ee08 0a10 	vmov	s16, r0
 800e064:	f001 f91e 	bl	800f2a4 <__mcmp>
 800e068:	2800      	cmp	r0, #0
 800e06a:	dc03      	bgt.n	800e074 <_dtoa_r+0xa9c>
 800e06c:	d1e0      	bne.n	800e030 <_dtoa_r+0xa58>
 800e06e:	f01a 0f01 	tst.w	sl, #1
 800e072:	d0dd      	beq.n	800e030 <_dtoa_r+0xa58>
 800e074:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e078:	d1d7      	bne.n	800e02a <_dtoa_r+0xa52>
 800e07a:	2339      	movs	r3, #57	; 0x39
 800e07c:	f88b 3000 	strb.w	r3, [fp]
 800e080:	462b      	mov	r3, r5
 800e082:	461d      	mov	r5, r3
 800e084:	3b01      	subs	r3, #1
 800e086:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e08a:	2a39      	cmp	r2, #57	; 0x39
 800e08c:	d071      	beq.n	800e172 <_dtoa_r+0xb9a>
 800e08e:	3201      	adds	r2, #1
 800e090:	701a      	strb	r2, [r3, #0]
 800e092:	e746      	b.n	800df22 <_dtoa_r+0x94a>
 800e094:	2a00      	cmp	r2, #0
 800e096:	dd07      	ble.n	800e0a8 <_dtoa_r+0xad0>
 800e098:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e09c:	d0ed      	beq.n	800e07a <_dtoa_r+0xaa2>
 800e09e:	f10a 0301 	add.w	r3, sl, #1
 800e0a2:	f88b 3000 	strb.w	r3, [fp]
 800e0a6:	e73c      	b.n	800df22 <_dtoa_r+0x94a>
 800e0a8:	9b05      	ldr	r3, [sp, #20]
 800e0aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e0ae:	4599      	cmp	r9, r3
 800e0b0:	d047      	beq.n	800e142 <_dtoa_r+0xb6a>
 800e0b2:	ee18 1a10 	vmov	r1, s16
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	220a      	movs	r2, #10
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f000 fe88 	bl	800edd0 <__multadd>
 800e0c0:	45b8      	cmp	r8, r7
 800e0c2:	ee08 0a10 	vmov	s16, r0
 800e0c6:	f04f 0300 	mov.w	r3, #0
 800e0ca:	f04f 020a 	mov.w	r2, #10
 800e0ce:	4641      	mov	r1, r8
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	d106      	bne.n	800e0e2 <_dtoa_r+0xb0a>
 800e0d4:	f000 fe7c 	bl	800edd0 <__multadd>
 800e0d8:	4680      	mov	r8, r0
 800e0da:	4607      	mov	r7, r0
 800e0dc:	f109 0901 	add.w	r9, r9, #1
 800e0e0:	e772      	b.n	800dfc8 <_dtoa_r+0x9f0>
 800e0e2:	f000 fe75 	bl	800edd0 <__multadd>
 800e0e6:	4639      	mov	r1, r7
 800e0e8:	4680      	mov	r8, r0
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	220a      	movs	r2, #10
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 fe6e 	bl	800edd0 <__multadd>
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	e7f1      	b.n	800e0dc <_dtoa_r+0xb04>
 800e0f8:	9b03      	ldr	r3, [sp, #12]
 800e0fa:	9302      	str	r3, [sp, #8]
 800e0fc:	9d01      	ldr	r5, [sp, #4]
 800e0fe:	ee18 0a10 	vmov	r0, s16
 800e102:	4631      	mov	r1, r6
 800e104:	f7ff f9da 	bl	800d4bc <quorem>
 800e108:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e10c:	9b01      	ldr	r3, [sp, #4]
 800e10e:	f805 ab01 	strb.w	sl, [r5], #1
 800e112:	1aea      	subs	r2, r5, r3
 800e114:	9b02      	ldr	r3, [sp, #8]
 800e116:	4293      	cmp	r3, r2
 800e118:	dd09      	ble.n	800e12e <_dtoa_r+0xb56>
 800e11a:	ee18 1a10 	vmov	r1, s16
 800e11e:	2300      	movs	r3, #0
 800e120:	220a      	movs	r2, #10
 800e122:	4620      	mov	r0, r4
 800e124:	f000 fe54 	bl	800edd0 <__multadd>
 800e128:	ee08 0a10 	vmov	s16, r0
 800e12c:	e7e7      	b.n	800e0fe <_dtoa_r+0xb26>
 800e12e:	9b02      	ldr	r3, [sp, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	bfc8      	it	gt
 800e134:	461d      	movgt	r5, r3
 800e136:	9b01      	ldr	r3, [sp, #4]
 800e138:	bfd8      	it	le
 800e13a:	2501      	movle	r5, #1
 800e13c:	441d      	add	r5, r3
 800e13e:	f04f 0800 	mov.w	r8, #0
 800e142:	ee18 1a10 	vmov	r1, s16
 800e146:	2201      	movs	r2, #1
 800e148:	4620      	mov	r0, r4
 800e14a:	f001 f83b 	bl	800f1c4 <__lshift>
 800e14e:	4631      	mov	r1, r6
 800e150:	ee08 0a10 	vmov	s16, r0
 800e154:	f001 f8a6 	bl	800f2a4 <__mcmp>
 800e158:	2800      	cmp	r0, #0
 800e15a:	dc91      	bgt.n	800e080 <_dtoa_r+0xaa8>
 800e15c:	d102      	bne.n	800e164 <_dtoa_r+0xb8c>
 800e15e:	f01a 0f01 	tst.w	sl, #1
 800e162:	d18d      	bne.n	800e080 <_dtoa_r+0xaa8>
 800e164:	462b      	mov	r3, r5
 800e166:	461d      	mov	r5, r3
 800e168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e16c:	2a30      	cmp	r2, #48	; 0x30
 800e16e:	d0fa      	beq.n	800e166 <_dtoa_r+0xb8e>
 800e170:	e6d7      	b.n	800df22 <_dtoa_r+0x94a>
 800e172:	9a01      	ldr	r2, [sp, #4]
 800e174:	429a      	cmp	r2, r3
 800e176:	d184      	bne.n	800e082 <_dtoa_r+0xaaa>
 800e178:	9b00      	ldr	r3, [sp, #0]
 800e17a:	3301      	adds	r3, #1
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	2331      	movs	r3, #49	; 0x31
 800e180:	7013      	strb	r3, [r2, #0]
 800e182:	e6ce      	b.n	800df22 <_dtoa_r+0x94a>
 800e184:	4b09      	ldr	r3, [pc, #36]	; (800e1ac <_dtoa_r+0xbd4>)
 800e186:	f7ff ba95 	b.w	800d6b4 <_dtoa_r+0xdc>
 800e18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f47f aa6e 	bne.w	800d66e <_dtoa_r+0x96>
 800e192:	4b07      	ldr	r3, [pc, #28]	; (800e1b0 <_dtoa_r+0xbd8>)
 800e194:	f7ff ba8e 	b.w	800d6b4 <_dtoa_r+0xdc>
 800e198:	9b02      	ldr	r3, [sp, #8]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	dcae      	bgt.n	800e0fc <_dtoa_r+0xb24>
 800e19e:	9b06      	ldr	r3, [sp, #24]
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	f73f aea8 	bgt.w	800def6 <_dtoa_r+0x91e>
 800e1a6:	e7a9      	b.n	800e0fc <_dtoa_r+0xb24>
 800e1a8:	08011bd0 	.word	0x08011bd0
 800e1ac:	080119d8 	.word	0x080119d8
 800e1b0:	08011b51 	.word	0x08011b51

0800e1b4 <__sflush_r>:
 800e1b4:	898a      	ldrh	r2, [r1, #12]
 800e1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	0710      	lsls	r0, r2, #28
 800e1be:	460c      	mov	r4, r1
 800e1c0:	d458      	bmi.n	800e274 <__sflush_r+0xc0>
 800e1c2:	684b      	ldr	r3, [r1, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	dc05      	bgt.n	800e1d4 <__sflush_r+0x20>
 800e1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	dc02      	bgt.n	800e1d4 <__sflush_r+0x20>
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1d6:	2e00      	cmp	r6, #0
 800e1d8:	d0f9      	beq.n	800e1ce <__sflush_r+0x1a>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1e0:	682f      	ldr	r7, [r5, #0]
 800e1e2:	602b      	str	r3, [r5, #0]
 800e1e4:	d032      	beq.n	800e24c <__sflush_r+0x98>
 800e1e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	075a      	lsls	r2, r3, #29
 800e1ec:	d505      	bpl.n	800e1fa <__sflush_r+0x46>
 800e1ee:	6863      	ldr	r3, [r4, #4]
 800e1f0:	1ac0      	subs	r0, r0, r3
 800e1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1f4:	b10b      	cbz	r3, 800e1fa <__sflush_r+0x46>
 800e1f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1f8:	1ac0      	subs	r0, r0, r3
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e200:	6a21      	ldr	r1, [r4, #32]
 800e202:	4628      	mov	r0, r5
 800e204:	47b0      	blx	r6
 800e206:	1c43      	adds	r3, r0, #1
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	d106      	bne.n	800e21a <__sflush_r+0x66>
 800e20c:	6829      	ldr	r1, [r5, #0]
 800e20e:	291d      	cmp	r1, #29
 800e210:	d82c      	bhi.n	800e26c <__sflush_r+0xb8>
 800e212:	4a2a      	ldr	r2, [pc, #168]	; (800e2bc <__sflush_r+0x108>)
 800e214:	40ca      	lsrs	r2, r1
 800e216:	07d6      	lsls	r6, r2, #31
 800e218:	d528      	bpl.n	800e26c <__sflush_r+0xb8>
 800e21a:	2200      	movs	r2, #0
 800e21c:	6062      	str	r2, [r4, #4]
 800e21e:	04d9      	lsls	r1, r3, #19
 800e220:	6922      	ldr	r2, [r4, #16]
 800e222:	6022      	str	r2, [r4, #0]
 800e224:	d504      	bpl.n	800e230 <__sflush_r+0x7c>
 800e226:	1c42      	adds	r2, r0, #1
 800e228:	d101      	bne.n	800e22e <__sflush_r+0x7a>
 800e22a:	682b      	ldr	r3, [r5, #0]
 800e22c:	b903      	cbnz	r3, 800e230 <__sflush_r+0x7c>
 800e22e:	6560      	str	r0, [r4, #84]	; 0x54
 800e230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e232:	602f      	str	r7, [r5, #0]
 800e234:	2900      	cmp	r1, #0
 800e236:	d0ca      	beq.n	800e1ce <__sflush_r+0x1a>
 800e238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e23c:	4299      	cmp	r1, r3
 800e23e:	d002      	beq.n	800e246 <__sflush_r+0x92>
 800e240:	4628      	mov	r0, r5
 800e242:	f001 fa3b 	bl	800f6bc <_free_r>
 800e246:	2000      	movs	r0, #0
 800e248:	6360      	str	r0, [r4, #52]	; 0x34
 800e24a:	e7c1      	b.n	800e1d0 <__sflush_r+0x1c>
 800e24c:	6a21      	ldr	r1, [r4, #32]
 800e24e:	2301      	movs	r3, #1
 800e250:	4628      	mov	r0, r5
 800e252:	47b0      	blx	r6
 800e254:	1c41      	adds	r1, r0, #1
 800e256:	d1c7      	bne.n	800e1e8 <__sflush_r+0x34>
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d0c4      	beq.n	800e1e8 <__sflush_r+0x34>
 800e25e:	2b1d      	cmp	r3, #29
 800e260:	d001      	beq.n	800e266 <__sflush_r+0xb2>
 800e262:	2b16      	cmp	r3, #22
 800e264:	d101      	bne.n	800e26a <__sflush_r+0xb6>
 800e266:	602f      	str	r7, [r5, #0]
 800e268:	e7b1      	b.n	800e1ce <__sflush_r+0x1a>
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	e7ad      	b.n	800e1d0 <__sflush_r+0x1c>
 800e274:	690f      	ldr	r7, [r1, #16]
 800e276:	2f00      	cmp	r7, #0
 800e278:	d0a9      	beq.n	800e1ce <__sflush_r+0x1a>
 800e27a:	0793      	lsls	r3, r2, #30
 800e27c:	680e      	ldr	r6, [r1, #0]
 800e27e:	bf08      	it	eq
 800e280:	694b      	ldreq	r3, [r1, #20]
 800e282:	600f      	str	r7, [r1, #0]
 800e284:	bf18      	it	ne
 800e286:	2300      	movne	r3, #0
 800e288:	eba6 0807 	sub.w	r8, r6, r7
 800e28c:	608b      	str	r3, [r1, #8]
 800e28e:	f1b8 0f00 	cmp.w	r8, #0
 800e292:	dd9c      	ble.n	800e1ce <__sflush_r+0x1a>
 800e294:	6a21      	ldr	r1, [r4, #32]
 800e296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e298:	4643      	mov	r3, r8
 800e29a:	463a      	mov	r2, r7
 800e29c:	4628      	mov	r0, r5
 800e29e:	47b0      	blx	r6
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	dc06      	bgt.n	800e2b2 <__sflush_r+0xfe>
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2b0:	e78e      	b.n	800e1d0 <__sflush_r+0x1c>
 800e2b2:	4407      	add	r7, r0
 800e2b4:	eba8 0800 	sub.w	r8, r8, r0
 800e2b8:	e7e9      	b.n	800e28e <__sflush_r+0xda>
 800e2ba:	bf00      	nop
 800e2bc:	20400001 	.word	0x20400001

0800e2c0 <_fflush_r>:
 800e2c0:	b538      	push	{r3, r4, r5, lr}
 800e2c2:	690b      	ldr	r3, [r1, #16]
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	b913      	cbnz	r3, 800e2d0 <_fflush_r+0x10>
 800e2ca:	2500      	movs	r5, #0
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	bd38      	pop	{r3, r4, r5, pc}
 800e2d0:	b118      	cbz	r0, 800e2da <_fflush_r+0x1a>
 800e2d2:	6983      	ldr	r3, [r0, #24]
 800e2d4:	b90b      	cbnz	r3, 800e2da <_fflush_r+0x1a>
 800e2d6:	f000 f887 	bl	800e3e8 <__sinit>
 800e2da:	4b14      	ldr	r3, [pc, #80]	; (800e32c <_fflush_r+0x6c>)
 800e2dc:	429c      	cmp	r4, r3
 800e2de:	d11b      	bne.n	800e318 <_fflush_r+0x58>
 800e2e0:	686c      	ldr	r4, [r5, #4]
 800e2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0ef      	beq.n	800e2ca <_fflush_r+0xa>
 800e2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2ec:	07d0      	lsls	r0, r2, #31
 800e2ee:	d404      	bmi.n	800e2fa <_fflush_r+0x3a>
 800e2f0:	0599      	lsls	r1, r3, #22
 800e2f2:	d402      	bmi.n	800e2fa <_fflush_r+0x3a>
 800e2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2f6:	f000 fc88 	bl	800ec0a <__retarget_lock_acquire_recursive>
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	f7ff ff59 	bl	800e1b4 <__sflush_r>
 800e302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e304:	07da      	lsls	r2, r3, #31
 800e306:	4605      	mov	r5, r0
 800e308:	d4e0      	bmi.n	800e2cc <_fflush_r+0xc>
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	059b      	lsls	r3, r3, #22
 800e30e:	d4dd      	bmi.n	800e2cc <_fflush_r+0xc>
 800e310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e312:	f000 fc7b 	bl	800ec0c <__retarget_lock_release_recursive>
 800e316:	e7d9      	b.n	800e2cc <_fflush_r+0xc>
 800e318:	4b05      	ldr	r3, [pc, #20]	; (800e330 <_fflush_r+0x70>)
 800e31a:	429c      	cmp	r4, r3
 800e31c:	d101      	bne.n	800e322 <_fflush_r+0x62>
 800e31e:	68ac      	ldr	r4, [r5, #8]
 800e320:	e7df      	b.n	800e2e2 <_fflush_r+0x22>
 800e322:	4b04      	ldr	r3, [pc, #16]	; (800e334 <_fflush_r+0x74>)
 800e324:	429c      	cmp	r4, r3
 800e326:	bf08      	it	eq
 800e328:	68ec      	ldreq	r4, [r5, #12]
 800e32a:	e7da      	b.n	800e2e2 <_fflush_r+0x22>
 800e32c:	08011c04 	.word	0x08011c04
 800e330:	08011c24 	.word	0x08011c24
 800e334:	08011be4 	.word	0x08011be4

0800e338 <std>:
 800e338:	2300      	movs	r3, #0
 800e33a:	b510      	push	{r4, lr}
 800e33c:	4604      	mov	r4, r0
 800e33e:	e9c0 3300 	strd	r3, r3, [r0]
 800e342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e346:	6083      	str	r3, [r0, #8]
 800e348:	8181      	strh	r1, [r0, #12]
 800e34a:	6643      	str	r3, [r0, #100]	; 0x64
 800e34c:	81c2      	strh	r2, [r0, #14]
 800e34e:	6183      	str	r3, [r0, #24]
 800e350:	4619      	mov	r1, r3
 800e352:	2208      	movs	r2, #8
 800e354:	305c      	adds	r0, #92	; 0x5c
 800e356:	f7fd fc35 	bl	800bbc4 <memset>
 800e35a:	4b05      	ldr	r3, [pc, #20]	; (800e370 <std+0x38>)
 800e35c:	6263      	str	r3, [r4, #36]	; 0x24
 800e35e:	4b05      	ldr	r3, [pc, #20]	; (800e374 <std+0x3c>)
 800e360:	62a3      	str	r3, [r4, #40]	; 0x28
 800e362:	4b05      	ldr	r3, [pc, #20]	; (800e378 <std+0x40>)
 800e364:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e366:	4b05      	ldr	r3, [pc, #20]	; (800e37c <std+0x44>)
 800e368:	6224      	str	r4, [r4, #32]
 800e36a:	6323      	str	r3, [r4, #48]	; 0x30
 800e36c:	bd10      	pop	{r4, pc}
 800e36e:	bf00      	nop
 800e370:	0800fb61 	.word	0x0800fb61
 800e374:	0800fb83 	.word	0x0800fb83
 800e378:	0800fbbb 	.word	0x0800fbbb
 800e37c:	0800fbdf 	.word	0x0800fbdf

0800e380 <_cleanup_r>:
 800e380:	4901      	ldr	r1, [pc, #4]	; (800e388 <_cleanup_r+0x8>)
 800e382:	f000 b8af 	b.w	800e4e4 <_fwalk_reent>
 800e386:	bf00      	nop
 800e388:	0800e2c1 	.word	0x0800e2c1

0800e38c <__sfmoreglue>:
 800e38c:	b570      	push	{r4, r5, r6, lr}
 800e38e:	2268      	movs	r2, #104	; 0x68
 800e390:	1e4d      	subs	r5, r1, #1
 800e392:	4355      	muls	r5, r2
 800e394:	460e      	mov	r6, r1
 800e396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e39a:	f001 f9fb 	bl	800f794 <_malloc_r>
 800e39e:	4604      	mov	r4, r0
 800e3a0:	b140      	cbz	r0, 800e3b4 <__sfmoreglue+0x28>
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	e9c0 1600 	strd	r1, r6, [r0]
 800e3a8:	300c      	adds	r0, #12
 800e3aa:	60a0      	str	r0, [r4, #8]
 800e3ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3b0:	f7fd fc08 	bl	800bbc4 <memset>
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	bd70      	pop	{r4, r5, r6, pc}

0800e3b8 <__sfp_lock_acquire>:
 800e3b8:	4801      	ldr	r0, [pc, #4]	; (800e3c0 <__sfp_lock_acquire+0x8>)
 800e3ba:	f000 bc26 	b.w	800ec0a <__retarget_lock_acquire_recursive>
 800e3be:	bf00      	nop
 800e3c0:	20009695 	.word	0x20009695

0800e3c4 <__sfp_lock_release>:
 800e3c4:	4801      	ldr	r0, [pc, #4]	; (800e3cc <__sfp_lock_release+0x8>)
 800e3c6:	f000 bc21 	b.w	800ec0c <__retarget_lock_release_recursive>
 800e3ca:	bf00      	nop
 800e3cc:	20009695 	.word	0x20009695

0800e3d0 <__sinit_lock_acquire>:
 800e3d0:	4801      	ldr	r0, [pc, #4]	; (800e3d8 <__sinit_lock_acquire+0x8>)
 800e3d2:	f000 bc1a 	b.w	800ec0a <__retarget_lock_acquire_recursive>
 800e3d6:	bf00      	nop
 800e3d8:	20009696 	.word	0x20009696

0800e3dc <__sinit_lock_release>:
 800e3dc:	4801      	ldr	r0, [pc, #4]	; (800e3e4 <__sinit_lock_release+0x8>)
 800e3de:	f000 bc15 	b.w	800ec0c <__retarget_lock_release_recursive>
 800e3e2:	bf00      	nop
 800e3e4:	20009696 	.word	0x20009696

0800e3e8 <__sinit>:
 800e3e8:	b510      	push	{r4, lr}
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	f7ff fff0 	bl	800e3d0 <__sinit_lock_acquire>
 800e3f0:	69a3      	ldr	r3, [r4, #24]
 800e3f2:	b11b      	cbz	r3, 800e3fc <__sinit+0x14>
 800e3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f8:	f7ff bff0 	b.w	800e3dc <__sinit_lock_release>
 800e3fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e400:	6523      	str	r3, [r4, #80]	; 0x50
 800e402:	4b13      	ldr	r3, [pc, #76]	; (800e450 <__sinit+0x68>)
 800e404:	4a13      	ldr	r2, [pc, #76]	; (800e454 <__sinit+0x6c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	62a2      	str	r2, [r4, #40]	; 0x28
 800e40a:	42a3      	cmp	r3, r4
 800e40c:	bf04      	itt	eq
 800e40e:	2301      	moveq	r3, #1
 800e410:	61a3      	streq	r3, [r4, #24]
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f820 	bl	800e458 <__sfp>
 800e418:	6060      	str	r0, [r4, #4]
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 f81c 	bl	800e458 <__sfp>
 800e420:	60a0      	str	r0, [r4, #8]
 800e422:	4620      	mov	r0, r4
 800e424:	f000 f818 	bl	800e458 <__sfp>
 800e428:	2200      	movs	r2, #0
 800e42a:	60e0      	str	r0, [r4, #12]
 800e42c:	2104      	movs	r1, #4
 800e42e:	6860      	ldr	r0, [r4, #4]
 800e430:	f7ff ff82 	bl	800e338 <std>
 800e434:	68a0      	ldr	r0, [r4, #8]
 800e436:	2201      	movs	r2, #1
 800e438:	2109      	movs	r1, #9
 800e43a:	f7ff ff7d 	bl	800e338 <std>
 800e43e:	68e0      	ldr	r0, [r4, #12]
 800e440:	2202      	movs	r2, #2
 800e442:	2112      	movs	r1, #18
 800e444:	f7ff ff78 	bl	800e338 <std>
 800e448:	2301      	movs	r3, #1
 800e44a:	61a3      	str	r3, [r4, #24]
 800e44c:	e7d2      	b.n	800e3f4 <__sinit+0xc>
 800e44e:	bf00      	nop
 800e450:	080119c4 	.word	0x080119c4
 800e454:	0800e381 	.word	0x0800e381

0800e458 <__sfp>:
 800e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45a:	4607      	mov	r7, r0
 800e45c:	f7ff ffac 	bl	800e3b8 <__sfp_lock_acquire>
 800e460:	4b1e      	ldr	r3, [pc, #120]	; (800e4dc <__sfp+0x84>)
 800e462:	681e      	ldr	r6, [r3, #0]
 800e464:	69b3      	ldr	r3, [r6, #24]
 800e466:	b913      	cbnz	r3, 800e46e <__sfp+0x16>
 800e468:	4630      	mov	r0, r6
 800e46a:	f7ff ffbd 	bl	800e3e8 <__sinit>
 800e46e:	3648      	adds	r6, #72	; 0x48
 800e470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e474:	3b01      	subs	r3, #1
 800e476:	d503      	bpl.n	800e480 <__sfp+0x28>
 800e478:	6833      	ldr	r3, [r6, #0]
 800e47a:	b30b      	cbz	r3, 800e4c0 <__sfp+0x68>
 800e47c:	6836      	ldr	r6, [r6, #0]
 800e47e:	e7f7      	b.n	800e470 <__sfp+0x18>
 800e480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e484:	b9d5      	cbnz	r5, 800e4bc <__sfp+0x64>
 800e486:	4b16      	ldr	r3, [pc, #88]	; (800e4e0 <__sfp+0x88>)
 800e488:	60e3      	str	r3, [r4, #12]
 800e48a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e48e:	6665      	str	r5, [r4, #100]	; 0x64
 800e490:	f000 fbba 	bl	800ec08 <__retarget_lock_init_recursive>
 800e494:	f7ff ff96 	bl	800e3c4 <__sfp_lock_release>
 800e498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e49c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4a0:	6025      	str	r5, [r4, #0]
 800e4a2:	61a5      	str	r5, [r4, #24]
 800e4a4:	2208      	movs	r2, #8
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4ac:	f7fd fb8a 	bl	800bbc4 <memset>
 800e4b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4bc:	3468      	adds	r4, #104	; 0x68
 800e4be:	e7d9      	b.n	800e474 <__sfp+0x1c>
 800e4c0:	2104      	movs	r1, #4
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	f7ff ff62 	bl	800e38c <__sfmoreglue>
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	6030      	str	r0, [r6, #0]
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d1d5      	bne.n	800e47c <__sfp+0x24>
 800e4d0:	f7ff ff78 	bl	800e3c4 <__sfp_lock_release>
 800e4d4:	230c      	movs	r3, #12
 800e4d6:	603b      	str	r3, [r7, #0]
 800e4d8:	e7ee      	b.n	800e4b8 <__sfp+0x60>
 800e4da:	bf00      	nop
 800e4dc:	080119c4 	.word	0x080119c4
 800e4e0:	ffff0001 	.word	0xffff0001

0800e4e4 <_fwalk_reent>:
 800e4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	4688      	mov	r8, r1
 800e4ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4f0:	2700      	movs	r7, #0
 800e4f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4f6:	f1b9 0901 	subs.w	r9, r9, #1
 800e4fa:	d505      	bpl.n	800e508 <_fwalk_reent+0x24>
 800e4fc:	6824      	ldr	r4, [r4, #0]
 800e4fe:	2c00      	cmp	r4, #0
 800e500:	d1f7      	bne.n	800e4f2 <_fwalk_reent+0xe>
 800e502:	4638      	mov	r0, r7
 800e504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e508:	89ab      	ldrh	r3, [r5, #12]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d907      	bls.n	800e51e <_fwalk_reent+0x3a>
 800e50e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e512:	3301      	adds	r3, #1
 800e514:	d003      	beq.n	800e51e <_fwalk_reent+0x3a>
 800e516:	4629      	mov	r1, r5
 800e518:	4630      	mov	r0, r6
 800e51a:	47c0      	blx	r8
 800e51c:	4307      	orrs	r7, r0
 800e51e:	3568      	adds	r5, #104	; 0x68
 800e520:	e7e9      	b.n	800e4f6 <_fwalk_reent+0x12>

0800e522 <rshift>:
 800e522:	6903      	ldr	r3, [r0, #16]
 800e524:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e52c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e530:	f100 0414 	add.w	r4, r0, #20
 800e534:	dd45      	ble.n	800e5c2 <rshift+0xa0>
 800e536:	f011 011f 	ands.w	r1, r1, #31
 800e53a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e53e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e542:	d10c      	bne.n	800e55e <rshift+0x3c>
 800e544:	f100 0710 	add.w	r7, r0, #16
 800e548:	4629      	mov	r1, r5
 800e54a:	42b1      	cmp	r1, r6
 800e54c:	d334      	bcc.n	800e5b8 <rshift+0x96>
 800e54e:	1a9b      	subs	r3, r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	1eea      	subs	r2, r5, #3
 800e554:	4296      	cmp	r6, r2
 800e556:	bf38      	it	cc
 800e558:	2300      	movcc	r3, #0
 800e55a:	4423      	add	r3, r4
 800e55c:	e015      	b.n	800e58a <rshift+0x68>
 800e55e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e562:	f1c1 0820 	rsb	r8, r1, #32
 800e566:	40cf      	lsrs	r7, r1
 800e568:	f105 0e04 	add.w	lr, r5, #4
 800e56c:	46a1      	mov	r9, r4
 800e56e:	4576      	cmp	r6, lr
 800e570:	46f4      	mov	ip, lr
 800e572:	d815      	bhi.n	800e5a0 <rshift+0x7e>
 800e574:	1a9a      	subs	r2, r3, r2
 800e576:	0092      	lsls	r2, r2, #2
 800e578:	3a04      	subs	r2, #4
 800e57a:	3501      	adds	r5, #1
 800e57c:	42ae      	cmp	r6, r5
 800e57e:	bf38      	it	cc
 800e580:	2200      	movcc	r2, #0
 800e582:	18a3      	adds	r3, r4, r2
 800e584:	50a7      	str	r7, [r4, r2]
 800e586:	b107      	cbz	r7, 800e58a <rshift+0x68>
 800e588:	3304      	adds	r3, #4
 800e58a:	1b1a      	subs	r2, r3, r4
 800e58c:	42a3      	cmp	r3, r4
 800e58e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e592:	bf08      	it	eq
 800e594:	2300      	moveq	r3, #0
 800e596:	6102      	str	r2, [r0, #16]
 800e598:	bf08      	it	eq
 800e59a:	6143      	streq	r3, [r0, #20]
 800e59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5a0:	f8dc c000 	ldr.w	ip, [ip]
 800e5a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800e5a8:	ea4c 0707 	orr.w	r7, ip, r7
 800e5ac:	f849 7b04 	str.w	r7, [r9], #4
 800e5b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e5b4:	40cf      	lsrs	r7, r1
 800e5b6:	e7da      	b.n	800e56e <rshift+0x4c>
 800e5b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800e5bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800e5c0:	e7c3      	b.n	800e54a <rshift+0x28>
 800e5c2:	4623      	mov	r3, r4
 800e5c4:	e7e1      	b.n	800e58a <rshift+0x68>

0800e5c6 <__hexdig_fun>:
 800e5c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e5ca:	2b09      	cmp	r3, #9
 800e5cc:	d802      	bhi.n	800e5d4 <__hexdig_fun+0xe>
 800e5ce:	3820      	subs	r0, #32
 800e5d0:	b2c0      	uxtb	r0, r0
 800e5d2:	4770      	bx	lr
 800e5d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e5d8:	2b05      	cmp	r3, #5
 800e5da:	d801      	bhi.n	800e5e0 <__hexdig_fun+0x1a>
 800e5dc:	3847      	subs	r0, #71	; 0x47
 800e5de:	e7f7      	b.n	800e5d0 <__hexdig_fun+0xa>
 800e5e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e5e4:	2b05      	cmp	r3, #5
 800e5e6:	d801      	bhi.n	800e5ec <__hexdig_fun+0x26>
 800e5e8:	3827      	subs	r0, #39	; 0x27
 800e5ea:	e7f1      	b.n	800e5d0 <__hexdig_fun+0xa>
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	4770      	bx	lr

0800e5f0 <__gethex>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	ed2d 8b02 	vpush	{d8}
 800e5f8:	b089      	sub	sp, #36	; 0x24
 800e5fa:	ee08 0a10 	vmov	s16, r0
 800e5fe:	9304      	str	r3, [sp, #16]
 800e600:	4bb4      	ldr	r3, [pc, #720]	; (800e8d4 <__gethex+0x2e4>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	9301      	str	r3, [sp, #4]
 800e606:	4618      	mov	r0, r3
 800e608:	468b      	mov	fp, r1
 800e60a:	4690      	mov	r8, r2
 800e60c:	f7f1 fe00 	bl	8000210 <strlen>
 800e610:	9b01      	ldr	r3, [sp, #4]
 800e612:	f8db 2000 	ldr.w	r2, [fp]
 800e616:	4403      	add	r3, r0
 800e618:	4682      	mov	sl, r0
 800e61a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	1c93      	adds	r3, r2, #2
 800e622:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e626:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e62a:	32fe      	adds	r2, #254	; 0xfe
 800e62c:	18d1      	adds	r1, r2, r3
 800e62e:	461f      	mov	r7, r3
 800e630:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e634:	9100      	str	r1, [sp, #0]
 800e636:	2830      	cmp	r0, #48	; 0x30
 800e638:	d0f8      	beq.n	800e62c <__gethex+0x3c>
 800e63a:	f7ff ffc4 	bl	800e5c6 <__hexdig_fun>
 800e63e:	4604      	mov	r4, r0
 800e640:	2800      	cmp	r0, #0
 800e642:	d13a      	bne.n	800e6ba <__gethex+0xca>
 800e644:	9901      	ldr	r1, [sp, #4]
 800e646:	4652      	mov	r2, sl
 800e648:	4638      	mov	r0, r7
 800e64a:	f001 facc 	bl	800fbe6 <strncmp>
 800e64e:	4605      	mov	r5, r0
 800e650:	2800      	cmp	r0, #0
 800e652:	d168      	bne.n	800e726 <__gethex+0x136>
 800e654:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e658:	eb07 060a 	add.w	r6, r7, sl
 800e65c:	f7ff ffb3 	bl	800e5c6 <__hexdig_fun>
 800e660:	2800      	cmp	r0, #0
 800e662:	d062      	beq.n	800e72a <__gethex+0x13a>
 800e664:	4633      	mov	r3, r6
 800e666:	7818      	ldrb	r0, [r3, #0]
 800e668:	2830      	cmp	r0, #48	; 0x30
 800e66a:	461f      	mov	r7, r3
 800e66c:	f103 0301 	add.w	r3, r3, #1
 800e670:	d0f9      	beq.n	800e666 <__gethex+0x76>
 800e672:	f7ff ffa8 	bl	800e5c6 <__hexdig_fun>
 800e676:	2301      	movs	r3, #1
 800e678:	fab0 f480 	clz	r4, r0
 800e67c:	0964      	lsrs	r4, r4, #5
 800e67e:	4635      	mov	r5, r6
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	463a      	mov	r2, r7
 800e684:	4616      	mov	r6, r2
 800e686:	3201      	adds	r2, #1
 800e688:	7830      	ldrb	r0, [r6, #0]
 800e68a:	f7ff ff9c 	bl	800e5c6 <__hexdig_fun>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d1f8      	bne.n	800e684 <__gethex+0x94>
 800e692:	9901      	ldr	r1, [sp, #4]
 800e694:	4652      	mov	r2, sl
 800e696:	4630      	mov	r0, r6
 800e698:	f001 faa5 	bl	800fbe6 <strncmp>
 800e69c:	b980      	cbnz	r0, 800e6c0 <__gethex+0xd0>
 800e69e:	b94d      	cbnz	r5, 800e6b4 <__gethex+0xc4>
 800e6a0:	eb06 050a 	add.w	r5, r6, sl
 800e6a4:	462a      	mov	r2, r5
 800e6a6:	4616      	mov	r6, r2
 800e6a8:	3201      	adds	r2, #1
 800e6aa:	7830      	ldrb	r0, [r6, #0]
 800e6ac:	f7ff ff8b 	bl	800e5c6 <__hexdig_fun>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d1f8      	bne.n	800e6a6 <__gethex+0xb6>
 800e6b4:	1bad      	subs	r5, r5, r6
 800e6b6:	00ad      	lsls	r5, r5, #2
 800e6b8:	e004      	b.n	800e6c4 <__gethex+0xd4>
 800e6ba:	2400      	movs	r4, #0
 800e6bc:	4625      	mov	r5, r4
 800e6be:	e7e0      	b.n	800e682 <__gethex+0x92>
 800e6c0:	2d00      	cmp	r5, #0
 800e6c2:	d1f7      	bne.n	800e6b4 <__gethex+0xc4>
 800e6c4:	7833      	ldrb	r3, [r6, #0]
 800e6c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e6ca:	2b50      	cmp	r3, #80	; 0x50
 800e6cc:	d13b      	bne.n	800e746 <__gethex+0x156>
 800e6ce:	7873      	ldrb	r3, [r6, #1]
 800e6d0:	2b2b      	cmp	r3, #43	; 0x2b
 800e6d2:	d02c      	beq.n	800e72e <__gethex+0x13e>
 800e6d4:	2b2d      	cmp	r3, #45	; 0x2d
 800e6d6:	d02e      	beq.n	800e736 <__gethex+0x146>
 800e6d8:	1c71      	adds	r1, r6, #1
 800e6da:	f04f 0900 	mov.w	r9, #0
 800e6de:	7808      	ldrb	r0, [r1, #0]
 800e6e0:	f7ff ff71 	bl	800e5c6 <__hexdig_fun>
 800e6e4:	1e43      	subs	r3, r0, #1
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	2b18      	cmp	r3, #24
 800e6ea:	d82c      	bhi.n	800e746 <__gethex+0x156>
 800e6ec:	f1a0 0210 	sub.w	r2, r0, #16
 800e6f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e6f4:	f7ff ff67 	bl	800e5c6 <__hexdig_fun>
 800e6f8:	1e43      	subs	r3, r0, #1
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b18      	cmp	r3, #24
 800e6fe:	d91d      	bls.n	800e73c <__gethex+0x14c>
 800e700:	f1b9 0f00 	cmp.w	r9, #0
 800e704:	d000      	beq.n	800e708 <__gethex+0x118>
 800e706:	4252      	negs	r2, r2
 800e708:	4415      	add	r5, r2
 800e70a:	f8cb 1000 	str.w	r1, [fp]
 800e70e:	b1e4      	cbz	r4, 800e74a <__gethex+0x15a>
 800e710:	9b00      	ldr	r3, [sp, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	bf14      	ite	ne
 800e716:	2700      	movne	r7, #0
 800e718:	2706      	moveq	r7, #6
 800e71a:	4638      	mov	r0, r7
 800e71c:	b009      	add	sp, #36	; 0x24
 800e71e:	ecbd 8b02 	vpop	{d8}
 800e722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e726:	463e      	mov	r6, r7
 800e728:	4625      	mov	r5, r4
 800e72a:	2401      	movs	r4, #1
 800e72c:	e7ca      	b.n	800e6c4 <__gethex+0xd4>
 800e72e:	f04f 0900 	mov.w	r9, #0
 800e732:	1cb1      	adds	r1, r6, #2
 800e734:	e7d3      	b.n	800e6de <__gethex+0xee>
 800e736:	f04f 0901 	mov.w	r9, #1
 800e73a:	e7fa      	b.n	800e732 <__gethex+0x142>
 800e73c:	230a      	movs	r3, #10
 800e73e:	fb03 0202 	mla	r2, r3, r2, r0
 800e742:	3a10      	subs	r2, #16
 800e744:	e7d4      	b.n	800e6f0 <__gethex+0x100>
 800e746:	4631      	mov	r1, r6
 800e748:	e7df      	b.n	800e70a <__gethex+0x11a>
 800e74a:	1bf3      	subs	r3, r6, r7
 800e74c:	3b01      	subs	r3, #1
 800e74e:	4621      	mov	r1, r4
 800e750:	2b07      	cmp	r3, #7
 800e752:	dc0b      	bgt.n	800e76c <__gethex+0x17c>
 800e754:	ee18 0a10 	vmov	r0, s16
 800e758:	f000 fad8 	bl	800ed0c <_Balloc>
 800e75c:	4604      	mov	r4, r0
 800e75e:	b940      	cbnz	r0, 800e772 <__gethex+0x182>
 800e760:	4b5d      	ldr	r3, [pc, #372]	; (800e8d8 <__gethex+0x2e8>)
 800e762:	4602      	mov	r2, r0
 800e764:	21de      	movs	r1, #222	; 0xde
 800e766:	485d      	ldr	r0, [pc, #372]	; (800e8dc <__gethex+0x2ec>)
 800e768:	f001 fa70 	bl	800fc4c <__assert_func>
 800e76c:	3101      	adds	r1, #1
 800e76e:	105b      	asrs	r3, r3, #1
 800e770:	e7ee      	b.n	800e750 <__gethex+0x160>
 800e772:	f100 0914 	add.w	r9, r0, #20
 800e776:	f04f 0b00 	mov.w	fp, #0
 800e77a:	f1ca 0301 	rsb	r3, sl, #1
 800e77e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e782:	f8cd b000 	str.w	fp, [sp]
 800e786:	9306      	str	r3, [sp, #24]
 800e788:	42b7      	cmp	r7, r6
 800e78a:	d340      	bcc.n	800e80e <__gethex+0x21e>
 800e78c:	9802      	ldr	r0, [sp, #8]
 800e78e:	9b00      	ldr	r3, [sp, #0]
 800e790:	f840 3b04 	str.w	r3, [r0], #4
 800e794:	eba0 0009 	sub.w	r0, r0, r9
 800e798:	1080      	asrs	r0, r0, #2
 800e79a:	0146      	lsls	r6, r0, #5
 800e79c:	6120      	str	r0, [r4, #16]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 fba6 	bl	800eef0 <__hi0bits>
 800e7a4:	1a30      	subs	r0, r6, r0
 800e7a6:	f8d8 6000 	ldr.w	r6, [r8]
 800e7aa:	42b0      	cmp	r0, r6
 800e7ac:	dd63      	ble.n	800e876 <__gethex+0x286>
 800e7ae:	1b87      	subs	r7, r0, r6
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 ff4a 	bl	800f64c <__any_on>
 800e7b8:	4682      	mov	sl, r0
 800e7ba:	b1a8      	cbz	r0, 800e7e8 <__gethex+0x1f8>
 800e7bc:	1e7b      	subs	r3, r7, #1
 800e7be:	1159      	asrs	r1, r3, #5
 800e7c0:	f003 021f 	and.w	r2, r3, #31
 800e7c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e7c8:	f04f 0a01 	mov.w	sl, #1
 800e7cc:	fa0a f202 	lsl.w	r2, sl, r2
 800e7d0:	420a      	tst	r2, r1
 800e7d2:	d009      	beq.n	800e7e8 <__gethex+0x1f8>
 800e7d4:	4553      	cmp	r3, sl
 800e7d6:	dd05      	ble.n	800e7e4 <__gethex+0x1f4>
 800e7d8:	1eb9      	subs	r1, r7, #2
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f000 ff36 	bl	800f64c <__any_on>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	d145      	bne.n	800e870 <__gethex+0x280>
 800e7e4:	f04f 0a02 	mov.w	sl, #2
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f7ff fe99 	bl	800e522 <rshift>
 800e7f0:	443d      	add	r5, r7
 800e7f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7f6:	42ab      	cmp	r3, r5
 800e7f8:	da4c      	bge.n	800e894 <__gethex+0x2a4>
 800e7fa:	ee18 0a10 	vmov	r0, s16
 800e7fe:	4621      	mov	r1, r4
 800e800:	f000 fac4 	bl	800ed8c <_Bfree>
 800e804:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e806:	2300      	movs	r3, #0
 800e808:	6013      	str	r3, [r2, #0]
 800e80a:	27a3      	movs	r7, #163	; 0xa3
 800e80c:	e785      	b.n	800e71a <__gethex+0x12a>
 800e80e:	1e73      	subs	r3, r6, #1
 800e810:	9a05      	ldr	r2, [sp, #20]
 800e812:	9303      	str	r3, [sp, #12]
 800e814:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e818:	4293      	cmp	r3, r2
 800e81a:	d019      	beq.n	800e850 <__gethex+0x260>
 800e81c:	f1bb 0f20 	cmp.w	fp, #32
 800e820:	d107      	bne.n	800e832 <__gethex+0x242>
 800e822:	9b02      	ldr	r3, [sp, #8]
 800e824:	9a00      	ldr	r2, [sp, #0]
 800e826:	f843 2b04 	str.w	r2, [r3], #4
 800e82a:	9302      	str	r3, [sp, #8]
 800e82c:	2300      	movs	r3, #0
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	469b      	mov	fp, r3
 800e832:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e836:	f7ff fec6 	bl	800e5c6 <__hexdig_fun>
 800e83a:	9b00      	ldr	r3, [sp, #0]
 800e83c:	f000 000f 	and.w	r0, r0, #15
 800e840:	fa00 f00b 	lsl.w	r0, r0, fp
 800e844:	4303      	orrs	r3, r0
 800e846:	9300      	str	r3, [sp, #0]
 800e848:	f10b 0b04 	add.w	fp, fp, #4
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	e00d      	b.n	800e86c <__gethex+0x27c>
 800e850:	9b03      	ldr	r3, [sp, #12]
 800e852:	9a06      	ldr	r2, [sp, #24]
 800e854:	4413      	add	r3, r2
 800e856:	42bb      	cmp	r3, r7
 800e858:	d3e0      	bcc.n	800e81c <__gethex+0x22c>
 800e85a:	4618      	mov	r0, r3
 800e85c:	9901      	ldr	r1, [sp, #4]
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	4652      	mov	r2, sl
 800e862:	f001 f9c0 	bl	800fbe6 <strncmp>
 800e866:	9b07      	ldr	r3, [sp, #28]
 800e868:	2800      	cmp	r0, #0
 800e86a:	d1d7      	bne.n	800e81c <__gethex+0x22c>
 800e86c:	461e      	mov	r6, r3
 800e86e:	e78b      	b.n	800e788 <__gethex+0x198>
 800e870:	f04f 0a03 	mov.w	sl, #3
 800e874:	e7b8      	b.n	800e7e8 <__gethex+0x1f8>
 800e876:	da0a      	bge.n	800e88e <__gethex+0x29e>
 800e878:	1a37      	subs	r7, r6, r0
 800e87a:	4621      	mov	r1, r4
 800e87c:	ee18 0a10 	vmov	r0, s16
 800e880:	463a      	mov	r2, r7
 800e882:	f000 fc9f 	bl	800f1c4 <__lshift>
 800e886:	1bed      	subs	r5, r5, r7
 800e888:	4604      	mov	r4, r0
 800e88a:	f100 0914 	add.w	r9, r0, #20
 800e88e:	f04f 0a00 	mov.w	sl, #0
 800e892:	e7ae      	b.n	800e7f2 <__gethex+0x202>
 800e894:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e898:	42a8      	cmp	r0, r5
 800e89a:	dd72      	ble.n	800e982 <__gethex+0x392>
 800e89c:	1b45      	subs	r5, r0, r5
 800e89e:	42ae      	cmp	r6, r5
 800e8a0:	dc36      	bgt.n	800e910 <__gethex+0x320>
 800e8a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d02a      	beq.n	800e900 <__gethex+0x310>
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	d02c      	beq.n	800e908 <__gethex+0x318>
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d11c      	bne.n	800e8ec <__gethex+0x2fc>
 800e8b2:	42ae      	cmp	r6, r5
 800e8b4:	d11a      	bne.n	800e8ec <__gethex+0x2fc>
 800e8b6:	2e01      	cmp	r6, #1
 800e8b8:	d112      	bne.n	800e8e0 <__gethex+0x2f0>
 800e8ba:	9a04      	ldr	r2, [sp, #16]
 800e8bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8c0:	6013      	str	r3, [r2, #0]
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	6123      	str	r3, [r4, #16]
 800e8c6:	f8c9 3000 	str.w	r3, [r9]
 800e8ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8cc:	2762      	movs	r7, #98	; 0x62
 800e8ce:	601c      	str	r4, [r3, #0]
 800e8d0:	e723      	b.n	800e71a <__gethex+0x12a>
 800e8d2:	bf00      	nop
 800e8d4:	08011cac 	.word	0x08011cac
 800e8d8:	08011bd0 	.word	0x08011bd0
 800e8dc:	08011c44 	.word	0x08011c44
 800e8e0:	1e71      	subs	r1, r6, #1
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f000 feb2 	bl	800f64c <__any_on>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d1e6      	bne.n	800e8ba <__gethex+0x2ca>
 800e8ec:	ee18 0a10 	vmov	r0, s16
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	f000 fa4b 	bl	800ed8c <_Bfree>
 800e8f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	2750      	movs	r7, #80	; 0x50
 800e8fe:	e70c      	b.n	800e71a <__gethex+0x12a>
 800e900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1f2      	bne.n	800e8ec <__gethex+0x2fc>
 800e906:	e7d8      	b.n	800e8ba <__gethex+0x2ca>
 800e908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1d5      	bne.n	800e8ba <__gethex+0x2ca>
 800e90e:	e7ed      	b.n	800e8ec <__gethex+0x2fc>
 800e910:	1e6f      	subs	r7, r5, #1
 800e912:	f1ba 0f00 	cmp.w	sl, #0
 800e916:	d131      	bne.n	800e97c <__gethex+0x38c>
 800e918:	b127      	cbz	r7, 800e924 <__gethex+0x334>
 800e91a:	4639      	mov	r1, r7
 800e91c:	4620      	mov	r0, r4
 800e91e:	f000 fe95 	bl	800f64c <__any_on>
 800e922:	4682      	mov	sl, r0
 800e924:	117b      	asrs	r3, r7, #5
 800e926:	2101      	movs	r1, #1
 800e928:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e92c:	f007 071f 	and.w	r7, r7, #31
 800e930:	fa01 f707 	lsl.w	r7, r1, r7
 800e934:	421f      	tst	r7, r3
 800e936:	4629      	mov	r1, r5
 800e938:	4620      	mov	r0, r4
 800e93a:	bf18      	it	ne
 800e93c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e940:	1b76      	subs	r6, r6, r5
 800e942:	f7ff fdee 	bl	800e522 <rshift>
 800e946:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e94a:	2702      	movs	r7, #2
 800e94c:	f1ba 0f00 	cmp.w	sl, #0
 800e950:	d048      	beq.n	800e9e4 <__gethex+0x3f4>
 800e952:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e956:	2b02      	cmp	r3, #2
 800e958:	d015      	beq.n	800e986 <__gethex+0x396>
 800e95a:	2b03      	cmp	r3, #3
 800e95c:	d017      	beq.n	800e98e <__gethex+0x39e>
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d109      	bne.n	800e976 <__gethex+0x386>
 800e962:	f01a 0f02 	tst.w	sl, #2
 800e966:	d006      	beq.n	800e976 <__gethex+0x386>
 800e968:	f8d9 0000 	ldr.w	r0, [r9]
 800e96c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e970:	f01a 0f01 	tst.w	sl, #1
 800e974:	d10e      	bne.n	800e994 <__gethex+0x3a4>
 800e976:	f047 0710 	orr.w	r7, r7, #16
 800e97a:	e033      	b.n	800e9e4 <__gethex+0x3f4>
 800e97c:	f04f 0a01 	mov.w	sl, #1
 800e980:	e7d0      	b.n	800e924 <__gethex+0x334>
 800e982:	2701      	movs	r7, #1
 800e984:	e7e2      	b.n	800e94c <__gethex+0x35c>
 800e986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e988:	f1c3 0301 	rsb	r3, r3, #1
 800e98c:	9315      	str	r3, [sp, #84]	; 0x54
 800e98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e990:	2b00      	cmp	r3, #0
 800e992:	d0f0      	beq.n	800e976 <__gethex+0x386>
 800e994:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e998:	f104 0314 	add.w	r3, r4, #20
 800e99c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e9a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9a4:	f04f 0c00 	mov.w	ip, #0
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800e9b2:	d01c      	beq.n	800e9ee <__gethex+0x3fe>
 800e9b4:	3201      	adds	r2, #1
 800e9b6:	6002      	str	r2, [r0, #0]
 800e9b8:	2f02      	cmp	r7, #2
 800e9ba:	f104 0314 	add.w	r3, r4, #20
 800e9be:	d13f      	bne.n	800ea40 <__gethex+0x450>
 800e9c0:	f8d8 2000 	ldr.w	r2, [r8]
 800e9c4:	3a01      	subs	r2, #1
 800e9c6:	42b2      	cmp	r2, r6
 800e9c8:	d10a      	bne.n	800e9e0 <__gethex+0x3f0>
 800e9ca:	1171      	asrs	r1, r6, #5
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9d2:	f006 061f 	and.w	r6, r6, #31
 800e9d6:	fa02 f606 	lsl.w	r6, r2, r6
 800e9da:	421e      	tst	r6, r3
 800e9dc:	bf18      	it	ne
 800e9de:	4617      	movne	r7, r2
 800e9e0:	f047 0720 	orr.w	r7, r7, #32
 800e9e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9e6:	601c      	str	r4, [r3, #0]
 800e9e8:	9b04      	ldr	r3, [sp, #16]
 800e9ea:	601d      	str	r5, [r3, #0]
 800e9ec:	e695      	b.n	800e71a <__gethex+0x12a>
 800e9ee:	4299      	cmp	r1, r3
 800e9f0:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9f4:	d8d8      	bhi.n	800e9a8 <__gethex+0x3b8>
 800e9f6:	68a3      	ldr	r3, [r4, #8]
 800e9f8:	459b      	cmp	fp, r3
 800e9fa:	db19      	blt.n	800ea30 <__gethex+0x440>
 800e9fc:	6861      	ldr	r1, [r4, #4]
 800e9fe:	ee18 0a10 	vmov	r0, s16
 800ea02:	3101      	adds	r1, #1
 800ea04:	f000 f982 	bl	800ed0c <_Balloc>
 800ea08:	4681      	mov	r9, r0
 800ea0a:	b918      	cbnz	r0, 800ea14 <__gethex+0x424>
 800ea0c:	4b1a      	ldr	r3, [pc, #104]	; (800ea78 <__gethex+0x488>)
 800ea0e:	4602      	mov	r2, r0
 800ea10:	2184      	movs	r1, #132	; 0x84
 800ea12:	e6a8      	b.n	800e766 <__gethex+0x176>
 800ea14:	6922      	ldr	r2, [r4, #16]
 800ea16:	3202      	adds	r2, #2
 800ea18:	f104 010c 	add.w	r1, r4, #12
 800ea1c:	0092      	lsls	r2, r2, #2
 800ea1e:	300c      	adds	r0, #12
 800ea20:	f7fd f8c2 	bl	800bba8 <memcpy>
 800ea24:	4621      	mov	r1, r4
 800ea26:	ee18 0a10 	vmov	r0, s16
 800ea2a:	f000 f9af 	bl	800ed8c <_Bfree>
 800ea2e:	464c      	mov	r4, r9
 800ea30:	6923      	ldr	r3, [r4, #16]
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea38:	6122      	str	r2, [r4, #16]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	615a      	str	r2, [r3, #20]
 800ea3e:	e7bb      	b.n	800e9b8 <__gethex+0x3c8>
 800ea40:	6922      	ldr	r2, [r4, #16]
 800ea42:	455a      	cmp	r2, fp
 800ea44:	dd0b      	ble.n	800ea5e <__gethex+0x46e>
 800ea46:	2101      	movs	r1, #1
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7ff fd6a 	bl	800e522 <rshift>
 800ea4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea52:	3501      	adds	r5, #1
 800ea54:	42ab      	cmp	r3, r5
 800ea56:	f6ff aed0 	blt.w	800e7fa <__gethex+0x20a>
 800ea5a:	2701      	movs	r7, #1
 800ea5c:	e7c0      	b.n	800e9e0 <__gethex+0x3f0>
 800ea5e:	f016 061f 	ands.w	r6, r6, #31
 800ea62:	d0fa      	beq.n	800ea5a <__gethex+0x46a>
 800ea64:	4453      	add	r3, sl
 800ea66:	f1c6 0620 	rsb	r6, r6, #32
 800ea6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea6e:	f000 fa3f 	bl	800eef0 <__hi0bits>
 800ea72:	42b0      	cmp	r0, r6
 800ea74:	dbe7      	blt.n	800ea46 <__gethex+0x456>
 800ea76:	e7f0      	b.n	800ea5a <__gethex+0x46a>
 800ea78:	08011bd0 	.word	0x08011bd0

0800ea7c <L_shift>:
 800ea7c:	f1c2 0208 	rsb	r2, r2, #8
 800ea80:	0092      	lsls	r2, r2, #2
 800ea82:	b570      	push	{r4, r5, r6, lr}
 800ea84:	f1c2 0620 	rsb	r6, r2, #32
 800ea88:	6843      	ldr	r3, [r0, #4]
 800ea8a:	6804      	ldr	r4, [r0, #0]
 800ea8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ea90:	432c      	orrs	r4, r5
 800ea92:	40d3      	lsrs	r3, r2
 800ea94:	6004      	str	r4, [r0, #0]
 800ea96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ea9a:	4288      	cmp	r0, r1
 800ea9c:	d3f4      	bcc.n	800ea88 <L_shift+0xc>
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}

0800eaa0 <__match>:
 800eaa0:	b530      	push	{r4, r5, lr}
 800eaa2:	6803      	ldr	r3, [r0, #0]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaaa:	b914      	cbnz	r4, 800eab2 <__match+0x12>
 800eaac:	6003      	str	r3, [r0, #0]
 800eaae:	2001      	movs	r0, #1
 800eab0:	bd30      	pop	{r4, r5, pc}
 800eab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eab6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eaba:	2d19      	cmp	r5, #25
 800eabc:	bf98      	it	ls
 800eabe:	3220      	addls	r2, #32
 800eac0:	42a2      	cmp	r2, r4
 800eac2:	d0f0      	beq.n	800eaa6 <__match+0x6>
 800eac4:	2000      	movs	r0, #0
 800eac6:	e7f3      	b.n	800eab0 <__match+0x10>

0800eac8 <__hexnan>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	680b      	ldr	r3, [r1, #0]
 800eace:	115e      	asrs	r6, r3, #5
 800ead0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ead4:	f013 031f 	ands.w	r3, r3, #31
 800ead8:	b087      	sub	sp, #28
 800eada:	bf18      	it	ne
 800eadc:	3604      	addne	r6, #4
 800eade:	2500      	movs	r5, #0
 800eae0:	1f37      	subs	r7, r6, #4
 800eae2:	4690      	mov	r8, r2
 800eae4:	6802      	ldr	r2, [r0, #0]
 800eae6:	9301      	str	r3, [sp, #4]
 800eae8:	4682      	mov	sl, r0
 800eaea:	f846 5c04 	str.w	r5, [r6, #-4]
 800eaee:	46b9      	mov	r9, r7
 800eaf0:	463c      	mov	r4, r7
 800eaf2:	9502      	str	r5, [sp, #8]
 800eaf4:	46ab      	mov	fp, r5
 800eaf6:	7851      	ldrb	r1, [r2, #1]
 800eaf8:	1c53      	adds	r3, r2, #1
 800eafa:	9303      	str	r3, [sp, #12]
 800eafc:	b341      	cbz	r1, 800eb50 <__hexnan+0x88>
 800eafe:	4608      	mov	r0, r1
 800eb00:	9205      	str	r2, [sp, #20]
 800eb02:	9104      	str	r1, [sp, #16]
 800eb04:	f7ff fd5f 	bl	800e5c6 <__hexdig_fun>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d14f      	bne.n	800ebac <__hexnan+0xe4>
 800eb0c:	9904      	ldr	r1, [sp, #16]
 800eb0e:	9a05      	ldr	r2, [sp, #20]
 800eb10:	2920      	cmp	r1, #32
 800eb12:	d818      	bhi.n	800eb46 <__hexnan+0x7e>
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	459b      	cmp	fp, r3
 800eb18:	dd13      	ble.n	800eb42 <__hexnan+0x7a>
 800eb1a:	454c      	cmp	r4, r9
 800eb1c:	d206      	bcs.n	800eb2c <__hexnan+0x64>
 800eb1e:	2d07      	cmp	r5, #7
 800eb20:	dc04      	bgt.n	800eb2c <__hexnan+0x64>
 800eb22:	462a      	mov	r2, r5
 800eb24:	4649      	mov	r1, r9
 800eb26:	4620      	mov	r0, r4
 800eb28:	f7ff ffa8 	bl	800ea7c <L_shift>
 800eb2c:	4544      	cmp	r4, r8
 800eb2e:	d950      	bls.n	800ebd2 <__hexnan+0x10a>
 800eb30:	2300      	movs	r3, #0
 800eb32:	f1a4 0904 	sub.w	r9, r4, #4
 800eb36:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb3a:	f8cd b008 	str.w	fp, [sp, #8]
 800eb3e:	464c      	mov	r4, r9
 800eb40:	461d      	mov	r5, r3
 800eb42:	9a03      	ldr	r2, [sp, #12]
 800eb44:	e7d7      	b.n	800eaf6 <__hexnan+0x2e>
 800eb46:	2929      	cmp	r1, #41	; 0x29
 800eb48:	d156      	bne.n	800ebf8 <__hexnan+0x130>
 800eb4a:	3202      	adds	r2, #2
 800eb4c:	f8ca 2000 	str.w	r2, [sl]
 800eb50:	f1bb 0f00 	cmp.w	fp, #0
 800eb54:	d050      	beq.n	800ebf8 <__hexnan+0x130>
 800eb56:	454c      	cmp	r4, r9
 800eb58:	d206      	bcs.n	800eb68 <__hexnan+0xa0>
 800eb5a:	2d07      	cmp	r5, #7
 800eb5c:	dc04      	bgt.n	800eb68 <__hexnan+0xa0>
 800eb5e:	462a      	mov	r2, r5
 800eb60:	4649      	mov	r1, r9
 800eb62:	4620      	mov	r0, r4
 800eb64:	f7ff ff8a 	bl	800ea7c <L_shift>
 800eb68:	4544      	cmp	r4, r8
 800eb6a:	d934      	bls.n	800ebd6 <__hexnan+0x10e>
 800eb6c:	f1a8 0204 	sub.w	r2, r8, #4
 800eb70:	4623      	mov	r3, r4
 800eb72:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb76:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb7a:	429f      	cmp	r7, r3
 800eb7c:	d2f9      	bcs.n	800eb72 <__hexnan+0xaa>
 800eb7e:	1b3b      	subs	r3, r7, r4
 800eb80:	f023 0303 	bic.w	r3, r3, #3
 800eb84:	3304      	adds	r3, #4
 800eb86:	3401      	adds	r4, #1
 800eb88:	3e03      	subs	r6, #3
 800eb8a:	42b4      	cmp	r4, r6
 800eb8c:	bf88      	it	hi
 800eb8e:	2304      	movhi	r3, #4
 800eb90:	4443      	add	r3, r8
 800eb92:	2200      	movs	r2, #0
 800eb94:	f843 2b04 	str.w	r2, [r3], #4
 800eb98:	429f      	cmp	r7, r3
 800eb9a:	d2fb      	bcs.n	800eb94 <__hexnan+0xcc>
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	b91b      	cbnz	r3, 800eba8 <__hexnan+0xe0>
 800eba0:	4547      	cmp	r7, r8
 800eba2:	d127      	bne.n	800ebf4 <__hexnan+0x12c>
 800eba4:	2301      	movs	r3, #1
 800eba6:	603b      	str	r3, [r7, #0]
 800eba8:	2005      	movs	r0, #5
 800ebaa:	e026      	b.n	800ebfa <__hexnan+0x132>
 800ebac:	3501      	adds	r5, #1
 800ebae:	2d08      	cmp	r5, #8
 800ebb0:	f10b 0b01 	add.w	fp, fp, #1
 800ebb4:	dd06      	ble.n	800ebc4 <__hexnan+0xfc>
 800ebb6:	4544      	cmp	r4, r8
 800ebb8:	d9c3      	bls.n	800eb42 <__hexnan+0x7a>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebc0:	2501      	movs	r5, #1
 800ebc2:	3c04      	subs	r4, #4
 800ebc4:	6822      	ldr	r2, [r4, #0]
 800ebc6:	f000 000f 	and.w	r0, r0, #15
 800ebca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ebce:	6022      	str	r2, [r4, #0]
 800ebd0:	e7b7      	b.n	800eb42 <__hexnan+0x7a>
 800ebd2:	2508      	movs	r5, #8
 800ebd4:	e7b5      	b.n	800eb42 <__hexnan+0x7a>
 800ebd6:	9b01      	ldr	r3, [sp, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d0df      	beq.n	800eb9c <__hexnan+0xd4>
 800ebdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebe0:	f1c3 0320 	rsb	r3, r3, #32
 800ebe4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ebec:	401a      	ands	r2, r3
 800ebee:	f846 2c04 	str.w	r2, [r6, #-4]
 800ebf2:	e7d3      	b.n	800eb9c <__hexnan+0xd4>
 800ebf4:	3f04      	subs	r7, #4
 800ebf6:	e7d1      	b.n	800eb9c <__hexnan+0xd4>
 800ebf8:	2004      	movs	r0, #4
 800ebfa:	b007      	add	sp, #28
 800ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec00 <_localeconv_r>:
 800ec00:	4800      	ldr	r0, [pc, #0]	; (800ec04 <_localeconv_r+0x4>)
 800ec02:	4770      	bx	lr
 800ec04:	200001a4 	.word	0x200001a4

0800ec08 <__retarget_lock_init_recursive>:
 800ec08:	4770      	bx	lr

0800ec0a <__retarget_lock_acquire_recursive>:
 800ec0a:	4770      	bx	lr

0800ec0c <__retarget_lock_release_recursive>:
 800ec0c:	4770      	bx	lr

0800ec0e <__swhatbuf_r>:
 800ec0e:	b570      	push	{r4, r5, r6, lr}
 800ec10:	460e      	mov	r6, r1
 800ec12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec16:	2900      	cmp	r1, #0
 800ec18:	b096      	sub	sp, #88	; 0x58
 800ec1a:	4614      	mov	r4, r2
 800ec1c:	461d      	mov	r5, r3
 800ec1e:	da08      	bge.n	800ec32 <__swhatbuf_r+0x24>
 800ec20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ec24:	2200      	movs	r2, #0
 800ec26:	602a      	str	r2, [r5, #0]
 800ec28:	061a      	lsls	r2, r3, #24
 800ec2a:	d410      	bmi.n	800ec4e <__swhatbuf_r+0x40>
 800ec2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec30:	e00e      	b.n	800ec50 <__swhatbuf_r+0x42>
 800ec32:	466a      	mov	r2, sp
 800ec34:	f001 f84a 	bl	800fccc <_fstat_r>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	dbf1      	blt.n	800ec20 <__swhatbuf_r+0x12>
 800ec3c:	9a01      	ldr	r2, [sp, #4]
 800ec3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec46:	425a      	negs	r2, r3
 800ec48:	415a      	adcs	r2, r3
 800ec4a:	602a      	str	r2, [r5, #0]
 800ec4c:	e7ee      	b.n	800ec2c <__swhatbuf_r+0x1e>
 800ec4e:	2340      	movs	r3, #64	; 0x40
 800ec50:	2000      	movs	r0, #0
 800ec52:	6023      	str	r3, [r4, #0]
 800ec54:	b016      	add	sp, #88	; 0x58
 800ec56:	bd70      	pop	{r4, r5, r6, pc}

0800ec58 <__smakebuf_r>:
 800ec58:	898b      	ldrh	r3, [r1, #12]
 800ec5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec5c:	079d      	lsls	r5, r3, #30
 800ec5e:	4606      	mov	r6, r0
 800ec60:	460c      	mov	r4, r1
 800ec62:	d507      	bpl.n	800ec74 <__smakebuf_r+0x1c>
 800ec64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec68:	6023      	str	r3, [r4, #0]
 800ec6a:	6123      	str	r3, [r4, #16]
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	6163      	str	r3, [r4, #20]
 800ec70:	b002      	add	sp, #8
 800ec72:	bd70      	pop	{r4, r5, r6, pc}
 800ec74:	ab01      	add	r3, sp, #4
 800ec76:	466a      	mov	r2, sp
 800ec78:	f7ff ffc9 	bl	800ec0e <__swhatbuf_r>
 800ec7c:	9900      	ldr	r1, [sp, #0]
 800ec7e:	4605      	mov	r5, r0
 800ec80:	4630      	mov	r0, r6
 800ec82:	f000 fd87 	bl	800f794 <_malloc_r>
 800ec86:	b948      	cbnz	r0, 800ec9c <__smakebuf_r+0x44>
 800ec88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec8c:	059a      	lsls	r2, r3, #22
 800ec8e:	d4ef      	bmi.n	800ec70 <__smakebuf_r+0x18>
 800ec90:	f023 0303 	bic.w	r3, r3, #3
 800ec94:	f043 0302 	orr.w	r3, r3, #2
 800ec98:	81a3      	strh	r3, [r4, #12]
 800ec9a:	e7e3      	b.n	800ec64 <__smakebuf_r+0xc>
 800ec9c:	4b0d      	ldr	r3, [pc, #52]	; (800ecd4 <__smakebuf_r+0x7c>)
 800ec9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	6020      	str	r0, [r4, #0]
 800eca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eca8:	81a3      	strh	r3, [r4, #12]
 800ecaa:	9b00      	ldr	r3, [sp, #0]
 800ecac:	6163      	str	r3, [r4, #20]
 800ecae:	9b01      	ldr	r3, [sp, #4]
 800ecb0:	6120      	str	r0, [r4, #16]
 800ecb2:	b15b      	cbz	r3, 800eccc <__smakebuf_r+0x74>
 800ecb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f001 f819 	bl	800fcf0 <_isatty_r>
 800ecbe:	b128      	cbz	r0, 800eccc <__smakebuf_r+0x74>
 800ecc0:	89a3      	ldrh	r3, [r4, #12]
 800ecc2:	f023 0303 	bic.w	r3, r3, #3
 800ecc6:	f043 0301 	orr.w	r3, r3, #1
 800ecca:	81a3      	strh	r3, [r4, #12]
 800eccc:	89a0      	ldrh	r0, [r4, #12]
 800ecce:	4305      	orrs	r5, r0
 800ecd0:	81a5      	strh	r5, [r4, #12]
 800ecd2:	e7cd      	b.n	800ec70 <__smakebuf_r+0x18>
 800ecd4:	0800e381 	.word	0x0800e381

0800ecd8 <malloc>:
 800ecd8:	4b02      	ldr	r3, [pc, #8]	; (800ece4 <malloc+0xc>)
 800ecda:	4601      	mov	r1, r0
 800ecdc:	6818      	ldr	r0, [r3, #0]
 800ecde:	f000 bd59 	b.w	800f794 <_malloc_r>
 800ece2:	bf00      	nop
 800ece4:	2000004c 	.word	0x2000004c

0800ece8 <__ascii_mbtowc>:
 800ece8:	b082      	sub	sp, #8
 800ecea:	b901      	cbnz	r1, 800ecee <__ascii_mbtowc+0x6>
 800ecec:	a901      	add	r1, sp, #4
 800ecee:	b142      	cbz	r2, 800ed02 <__ascii_mbtowc+0x1a>
 800ecf0:	b14b      	cbz	r3, 800ed06 <__ascii_mbtowc+0x1e>
 800ecf2:	7813      	ldrb	r3, [r2, #0]
 800ecf4:	600b      	str	r3, [r1, #0]
 800ecf6:	7812      	ldrb	r2, [r2, #0]
 800ecf8:	1e10      	subs	r0, r2, #0
 800ecfa:	bf18      	it	ne
 800ecfc:	2001      	movne	r0, #1
 800ecfe:	b002      	add	sp, #8
 800ed00:	4770      	bx	lr
 800ed02:	4610      	mov	r0, r2
 800ed04:	e7fb      	b.n	800ecfe <__ascii_mbtowc+0x16>
 800ed06:	f06f 0001 	mvn.w	r0, #1
 800ed0a:	e7f8      	b.n	800ecfe <__ascii_mbtowc+0x16>

0800ed0c <_Balloc>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed10:	4604      	mov	r4, r0
 800ed12:	460d      	mov	r5, r1
 800ed14:	b976      	cbnz	r6, 800ed34 <_Balloc+0x28>
 800ed16:	2010      	movs	r0, #16
 800ed18:	f7ff ffde 	bl	800ecd8 <malloc>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	6260      	str	r0, [r4, #36]	; 0x24
 800ed20:	b920      	cbnz	r0, 800ed2c <_Balloc+0x20>
 800ed22:	4b18      	ldr	r3, [pc, #96]	; (800ed84 <_Balloc+0x78>)
 800ed24:	4818      	ldr	r0, [pc, #96]	; (800ed88 <_Balloc+0x7c>)
 800ed26:	2166      	movs	r1, #102	; 0x66
 800ed28:	f000 ff90 	bl	800fc4c <__assert_func>
 800ed2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed30:	6006      	str	r6, [r0, #0]
 800ed32:	60c6      	str	r6, [r0, #12]
 800ed34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed36:	68f3      	ldr	r3, [r6, #12]
 800ed38:	b183      	cbz	r3, 800ed5c <_Balloc+0x50>
 800ed3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed42:	b9b8      	cbnz	r0, 800ed74 <_Balloc+0x68>
 800ed44:	2101      	movs	r1, #1
 800ed46:	fa01 f605 	lsl.w	r6, r1, r5
 800ed4a:	1d72      	adds	r2, r6, #5
 800ed4c:	0092      	lsls	r2, r2, #2
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 fc9d 	bl	800f68e <_calloc_r>
 800ed54:	b160      	cbz	r0, 800ed70 <_Balloc+0x64>
 800ed56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed5a:	e00e      	b.n	800ed7a <_Balloc+0x6e>
 800ed5c:	2221      	movs	r2, #33	; 0x21
 800ed5e:	2104      	movs	r1, #4
 800ed60:	4620      	mov	r0, r4
 800ed62:	f000 fc94 	bl	800f68e <_calloc_r>
 800ed66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed68:	60f0      	str	r0, [r6, #12]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1e4      	bne.n	800ed3a <_Balloc+0x2e>
 800ed70:	2000      	movs	r0, #0
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
 800ed74:	6802      	ldr	r2, [r0, #0]
 800ed76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed80:	e7f7      	b.n	800ed72 <_Balloc+0x66>
 800ed82:	bf00      	nop
 800ed84:	08011b5e 	.word	0x08011b5e
 800ed88:	08011cc0 	.word	0x08011cc0

0800ed8c <_Bfree>:
 800ed8c:	b570      	push	{r4, r5, r6, lr}
 800ed8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed90:	4605      	mov	r5, r0
 800ed92:	460c      	mov	r4, r1
 800ed94:	b976      	cbnz	r6, 800edb4 <_Bfree+0x28>
 800ed96:	2010      	movs	r0, #16
 800ed98:	f7ff ff9e 	bl	800ecd8 <malloc>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	6268      	str	r0, [r5, #36]	; 0x24
 800eda0:	b920      	cbnz	r0, 800edac <_Bfree+0x20>
 800eda2:	4b09      	ldr	r3, [pc, #36]	; (800edc8 <_Bfree+0x3c>)
 800eda4:	4809      	ldr	r0, [pc, #36]	; (800edcc <_Bfree+0x40>)
 800eda6:	218a      	movs	r1, #138	; 0x8a
 800eda8:	f000 ff50 	bl	800fc4c <__assert_func>
 800edac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edb0:	6006      	str	r6, [r0, #0]
 800edb2:	60c6      	str	r6, [r0, #12]
 800edb4:	b13c      	cbz	r4, 800edc6 <_Bfree+0x3a>
 800edb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800edb8:	6862      	ldr	r2, [r4, #4]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800edc0:	6021      	str	r1, [r4, #0]
 800edc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800edc6:	bd70      	pop	{r4, r5, r6, pc}
 800edc8:	08011b5e 	.word	0x08011b5e
 800edcc:	08011cc0 	.word	0x08011cc0

0800edd0 <__multadd>:
 800edd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd4:	690d      	ldr	r5, [r1, #16]
 800edd6:	4607      	mov	r7, r0
 800edd8:	460c      	mov	r4, r1
 800edda:	461e      	mov	r6, r3
 800eddc:	f101 0c14 	add.w	ip, r1, #20
 800ede0:	2000      	movs	r0, #0
 800ede2:	f8dc 3000 	ldr.w	r3, [ip]
 800ede6:	b299      	uxth	r1, r3
 800ede8:	fb02 6101 	mla	r1, r2, r1, r6
 800edec:	0c1e      	lsrs	r6, r3, #16
 800edee:	0c0b      	lsrs	r3, r1, #16
 800edf0:	fb02 3306 	mla	r3, r2, r6, r3
 800edf4:	b289      	uxth	r1, r1
 800edf6:	3001      	adds	r0, #1
 800edf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800edfc:	4285      	cmp	r5, r0
 800edfe:	f84c 1b04 	str.w	r1, [ip], #4
 800ee02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee06:	dcec      	bgt.n	800ede2 <__multadd+0x12>
 800ee08:	b30e      	cbz	r6, 800ee4e <__multadd+0x7e>
 800ee0a:	68a3      	ldr	r3, [r4, #8]
 800ee0c:	42ab      	cmp	r3, r5
 800ee0e:	dc19      	bgt.n	800ee44 <__multadd+0x74>
 800ee10:	6861      	ldr	r1, [r4, #4]
 800ee12:	4638      	mov	r0, r7
 800ee14:	3101      	adds	r1, #1
 800ee16:	f7ff ff79 	bl	800ed0c <_Balloc>
 800ee1a:	4680      	mov	r8, r0
 800ee1c:	b928      	cbnz	r0, 800ee2a <__multadd+0x5a>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	4b0c      	ldr	r3, [pc, #48]	; (800ee54 <__multadd+0x84>)
 800ee22:	480d      	ldr	r0, [pc, #52]	; (800ee58 <__multadd+0x88>)
 800ee24:	21b5      	movs	r1, #181	; 0xb5
 800ee26:	f000 ff11 	bl	800fc4c <__assert_func>
 800ee2a:	6922      	ldr	r2, [r4, #16]
 800ee2c:	3202      	adds	r2, #2
 800ee2e:	f104 010c 	add.w	r1, r4, #12
 800ee32:	0092      	lsls	r2, r2, #2
 800ee34:	300c      	adds	r0, #12
 800ee36:	f7fc feb7 	bl	800bba8 <memcpy>
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	4638      	mov	r0, r7
 800ee3e:	f7ff ffa5 	bl	800ed8c <_Bfree>
 800ee42:	4644      	mov	r4, r8
 800ee44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee48:	3501      	adds	r5, #1
 800ee4a:	615e      	str	r6, [r3, #20]
 800ee4c:	6125      	str	r5, [r4, #16]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee54:	08011bd0 	.word	0x08011bd0
 800ee58:	08011cc0 	.word	0x08011cc0

0800ee5c <__s2b>:
 800ee5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee60:	460c      	mov	r4, r1
 800ee62:	4615      	mov	r5, r2
 800ee64:	461f      	mov	r7, r3
 800ee66:	2209      	movs	r2, #9
 800ee68:	3308      	adds	r3, #8
 800ee6a:	4606      	mov	r6, r0
 800ee6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee70:	2100      	movs	r1, #0
 800ee72:	2201      	movs	r2, #1
 800ee74:	429a      	cmp	r2, r3
 800ee76:	db09      	blt.n	800ee8c <__s2b+0x30>
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7ff ff47 	bl	800ed0c <_Balloc>
 800ee7e:	b940      	cbnz	r0, 800ee92 <__s2b+0x36>
 800ee80:	4602      	mov	r2, r0
 800ee82:	4b19      	ldr	r3, [pc, #100]	; (800eee8 <__s2b+0x8c>)
 800ee84:	4819      	ldr	r0, [pc, #100]	; (800eeec <__s2b+0x90>)
 800ee86:	21ce      	movs	r1, #206	; 0xce
 800ee88:	f000 fee0 	bl	800fc4c <__assert_func>
 800ee8c:	0052      	lsls	r2, r2, #1
 800ee8e:	3101      	adds	r1, #1
 800ee90:	e7f0      	b.n	800ee74 <__s2b+0x18>
 800ee92:	9b08      	ldr	r3, [sp, #32]
 800ee94:	6143      	str	r3, [r0, #20]
 800ee96:	2d09      	cmp	r5, #9
 800ee98:	f04f 0301 	mov.w	r3, #1
 800ee9c:	6103      	str	r3, [r0, #16]
 800ee9e:	dd16      	ble.n	800eece <__s2b+0x72>
 800eea0:	f104 0909 	add.w	r9, r4, #9
 800eea4:	46c8      	mov	r8, r9
 800eea6:	442c      	add	r4, r5
 800eea8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eeac:	4601      	mov	r1, r0
 800eeae:	3b30      	subs	r3, #48	; 0x30
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7ff ff8c 	bl	800edd0 <__multadd>
 800eeb8:	45a0      	cmp	r8, r4
 800eeba:	d1f5      	bne.n	800eea8 <__s2b+0x4c>
 800eebc:	f1a5 0408 	sub.w	r4, r5, #8
 800eec0:	444c      	add	r4, r9
 800eec2:	1b2d      	subs	r5, r5, r4
 800eec4:	1963      	adds	r3, r4, r5
 800eec6:	42bb      	cmp	r3, r7
 800eec8:	db04      	blt.n	800eed4 <__s2b+0x78>
 800eeca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eece:	340a      	adds	r4, #10
 800eed0:	2509      	movs	r5, #9
 800eed2:	e7f6      	b.n	800eec2 <__s2b+0x66>
 800eed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eed8:	4601      	mov	r1, r0
 800eeda:	3b30      	subs	r3, #48	; 0x30
 800eedc:	220a      	movs	r2, #10
 800eede:	4630      	mov	r0, r6
 800eee0:	f7ff ff76 	bl	800edd0 <__multadd>
 800eee4:	e7ee      	b.n	800eec4 <__s2b+0x68>
 800eee6:	bf00      	nop
 800eee8:	08011bd0 	.word	0x08011bd0
 800eeec:	08011cc0 	.word	0x08011cc0

0800eef0 <__hi0bits>:
 800eef0:	0c03      	lsrs	r3, r0, #16
 800eef2:	041b      	lsls	r3, r3, #16
 800eef4:	b9d3      	cbnz	r3, 800ef2c <__hi0bits+0x3c>
 800eef6:	0400      	lsls	r0, r0, #16
 800eef8:	2310      	movs	r3, #16
 800eefa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eefe:	bf04      	itt	eq
 800ef00:	0200      	lsleq	r0, r0, #8
 800ef02:	3308      	addeq	r3, #8
 800ef04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef08:	bf04      	itt	eq
 800ef0a:	0100      	lsleq	r0, r0, #4
 800ef0c:	3304      	addeq	r3, #4
 800ef0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ef12:	bf04      	itt	eq
 800ef14:	0080      	lsleq	r0, r0, #2
 800ef16:	3302      	addeq	r3, #2
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	db05      	blt.n	800ef28 <__hi0bits+0x38>
 800ef1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ef20:	f103 0301 	add.w	r3, r3, #1
 800ef24:	bf08      	it	eq
 800ef26:	2320      	moveq	r3, #32
 800ef28:	4618      	mov	r0, r3
 800ef2a:	4770      	bx	lr
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	e7e4      	b.n	800eefa <__hi0bits+0xa>

0800ef30 <__lo0bits>:
 800ef30:	6803      	ldr	r3, [r0, #0]
 800ef32:	f013 0207 	ands.w	r2, r3, #7
 800ef36:	4601      	mov	r1, r0
 800ef38:	d00b      	beq.n	800ef52 <__lo0bits+0x22>
 800ef3a:	07da      	lsls	r2, r3, #31
 800ef3c:	d423      	bmi.n	800ef86 <__lo0bits+0x56>
 800ef3e:	0798      	lsls	r0, r3, #30
 800ef40:	bf49      	itett	mi
 800ef42:	085b      	lsrmi	r3, r3, #1
 800ef44:	089b      	lsrpl	r3, r3, #2
 800ef46:	2001      	movmi	r0, #1
 800ef48:	600b      	strmi	r3, [r1, #0]
 800ef4a:	bf5c      	itt	pl
 800ef4c:	600b      	strpl	r3, [r1, #0]
 800ef4e:	2002      	movpl	r0, #2
 800ef50:	4770      	bx	lr
 800ef52:	b298      	uxth	r0, r3
 800ef54:	b9a8      	cbnz	r0, 800ef82 <__lo0bits+0x52>
 800ef56:	0c1b      	lsrs	r3, r3, #16
 800ef58:	2010      	movs	r0, #16
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	b90a      	cbnz	r2, 800ef62 <__lo0bits+0x32>
 800ef5e:	3008      	adds	r0, #8
 800ef60:	0a1b      	lsrs	r3, r3, #8
 800ef62:	071a      	lsls	r2, r3, #28
 800ef64:	bf04      	itt	eq
 800ef66:	091b      	lsreq	r3, r3, #4
 800ef68:	3004      	addeq	r0, #4
 800ef6a:	079a      	lsls	r2, r3, #30
 800ef6c:	bf04      	itt	eq
 800ef6e:	089b      	lsreq	r3, r3, #2
 800ef70:	3002      	addeq	r0, #2
 800ef72:	07da      	lsls	r2, r3, #31
 800ef74:	d403      	bmi.n	800ef7e <__lo0bits+0x4e>
 800ef76:	085b      	lsrs	r3, r3, #1
 800ef78:	f100 0001 	add.w	r0, r0, #1
 800ef7c:	d005      	beq.n	800ef8a <__lo0bits+0x5a>
 800ef7e:	600b      	str	r3, [r1, #0]
 800ef80:	4770      	bx	lr
 800ef82:	4610      	mov	r0, r2
 800ef84:	e7e9      	b.n	800ef5a <__lo0bits+0x2a>
 800ef86:	2000      	movs	r0, #0
 800ef88:	4770      	bx	lr
 800ef8a:	2020      	movs	r0, #32
 800ef8c:	4770      	bx	lr
	...

0800ef90 <__i2b>:
 800ef90:	b510      	push	{r4, lr}
 800ef92:	460c      	mov	r4, r1
 800ef94:	2101      	movs	r1, #1
 800ef96:	f7ff feb9 	bl	800ed0c <_Balloc>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	b928      	cbnz	r0, 800efaa <__i2b+0x1a>
 800ef9e:	4b05      	ldr	r3, [pc, #20]	; (800efb4 <__i2b+0x24>)
 800efa0:	4805      	ldr	r0, [pc, #20]	; (800efb8 <__i2b+0x28>)
 800efa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800efa6:	f000 fe51 	bl	800fc4c <__assert_func>
 800efaa:	2301      	movs	r3, #1
 800efac:	6144      	str	r4, [r0, #20]
 800efae:	6103      	str	r3, [r0, #16]
 800efb0:	bd10      	pop	{r4, pc}
 800efb2:	bf00      	nop
 800efb4:	08011bd0 	.word	0x08011bd0
 800efb8:	08011cc0 	.word	0x08011cc0

0800efbc <__multiply>:
 800efbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc0:	4691      	mov	r9, r2
 800efc2:	690a      	ldr	r2, [r1, #16]
 800efc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efc8:	429a      	cmp	r2, r3
 800efca:	bfb8      	it	lt
 800efcc:	460b      	movlt	r3, r1
 800efce:	460c      	mov	r4, r1
 800efd0:	bfbc      	itt	lt
 800efd2:	464c      	movlt	r4, r9
 800efd4:	4699      	movlt	r9, r3
 800efd6:	6927      	ldr	r7, [r4, #16]
 800efd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800efdc:	68a3      	ldr	r3, [r4, #8]
 800efde:	6861      	ldr	r1, [r4, #4]
 800efe0:	eb07 060a 	add.w	r6, r7, sl
 800efe4:	42b3      	cmp	r3, r6
 800efe6:	b085      	sub	sp, #20
 800efe8:	bfb8      	it	lt
 800efea:	3101      	addlt	r1, #1
 800efec:	f7ff fe8e 	bl	800ed0c <_Balloc>
 800eff0:	b930      	cbnz	r0, 800f000 <__multiply+0x44>
 800eff2:	4602      	mov	r2, r0
 800eff4:	4b44      	ldr	r3, [pc, #272]	; (800f108 <__multiply+0x14c>)
 800eff6:	4845      	ldr	r0, [pc, #276]	; (800f10c <__multiply+0x150>)
 800eff8:	f240 115d 	movw	r1, #349	; 0x15d
 800effc:	f000 fe26 	bl	800fc4c <__assert_func>
 800f000:	f100 0514 	add.w	r5, r0, #20
 800f004:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f008:	462b      	mov	r3, r5
 800f00a:	2200      	movs	r2, #0
 800f00c:	4543      	cmp	r3, r8
 800f00e:	d321      	bcc.n	800f054 <__multiply+0x98>
 800f010:	f104 0314 	add.w	r3, r4, #20
 800f014:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f018:	f109 0314 	add.w	r3, r9, #20
 800f01c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f020:	9202      	str	r2, [sp, #8]
 800f022:	1b3a      	subs	r2, r7, r4
 800f024:	3a15      	subs	r2, #21
 800f026:	f022 0203 	bic.w	r2, r2, #3
 800f02a:	3204      	adds	r2, #4
 800f02c:	f104 0115 	add.w	r1, r4, #21
 800f030:	428f      	cmp	r7, r1
 800f032:	bf38      	it	cc
 800f034:	2204      	movcc	r2, #4
 800f036:	9201      	str	r2, [sp, #4]
 800f038:	9a02      	ldr	r2, [sp, #8]
 800f03a:	9303      	str	r3, [sp, #12]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d80c      	bhi.n	800f05a <__multiply+0x9e>
 800f040:	2e00      	cmp	r6, #0
 800f042:	dd03      	ble.n	800f04c <__multiply+0x90>
 800f044:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d05a      	beq.n	800f102 <__multiply+0x146>
 800f04c:	6106      	str	r6, [r0, #16]
 800f04e:	b005      	add	sp, #20
 800f050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f054:	f843 2b04 	str.w	r2, [r3], #4
 800f058:	e7d8      	b.n	800f00c <__multiply+0x50>
 800f05a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f05e:	f1ba 0f00 	cmp.w	sl, #0
 800f062:	d024      	beq.n	800f0ae <__multiply+0xf2>
 800f064:	f104 0e14 	add.w	lr, r4, #20
 800f068:	46a9      	mov	r9, r5
 800f06a:	f04f 0c00 	mov.w	ip, #0
 800f06e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f072:	f8d9 1000 	ldr.w	r1, [r9]
 800f076:	fa1f fb82 	uxth.w	fp, r2
 800f07a:	b289      	uxth	r1, r1
 800f07c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f080:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f084:	f8d9 2000 	ldr.w	r2, [r9]
 800f088:	4461      	add	r1, ip
 800f08a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f08e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f092:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f096:	b289      	uxth	r1, r1
 800f098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f09c:	4577      	cmp	r7, lr
 800f09e:	f849 1b04 	str.w	r1, [r9], #4
 800f0a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0a6:	d8e2      	bhi.n	800f06e <__multiply+0xb2>
 800f0a8:	9a01      	ldr	r2, [sp, #4]
 800f0aa:	f845 c002 	str.w	ip, [r5, r2]
 800f0ae:	9a03      	ldr	r2, [sp, #12]
 800f0b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f0b4:	3304      	adds	r3, #4
 800f0b6:	f1b9 0f00 	cmp.w	r9, #0
 800f0ba:	d020      	beq.n	800f0fe <__multiply+0x142>
 800f0bc:	6829      	ldr	r1, [r5, #0]
 800f0be:	f104 0c14 	add.w	ip, r4, #20
 800f0c2:	46ae      	mov	lr, r5
 800f0c4:	f04f 0a00 	mov.w	sl, #0
 800f0c8:	f8bc b000 	ldrh.w	fp, [ip]
 800f0cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f0d0:	fb09 220b 	mla	r2, r9, fp, r2
 800f0d4:	4492      	add	sl, r2
 800f0d6:	b289      	uxth	r1, r1
 800f0d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f0dc:	f84e 1b04 	str.w	r1, [lr], #4
 800f0e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f0e4:	f8be 1000 	ldrh.w	r1, [lr]
 800f0e8:	0c12      	lsrs	r2, r2, #16
 800f0ea:	fb09 1102 	mla	r1, r9, r2, r1
 800f0ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f0f2:	4567      	cmp	r7, ip
 800f0f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f0f8:	d8e6      	bhi.n	800f0c8 <__multiply+0x10c>
 800f0fa:	9a01      	ldr	r2, [sp, #4]
 800f0fc:	50a9      	str	r1, [r5, r2]
 800f0fe:	3504      	adds	r5, #4
 800f100:	e79a      	b.n	800f038 <__multiply+0x7c>
 800f102:	3e01      	subs	r6, #1
 800f104:	e79c      	b.n	800f040 <__multiply+0x84>
 800f106:	bf00      	nop
 800f108:	08011bd0 	.word	0x08011bd0
 800f10c:	08011cc0 	.word	0x08011cc0

0800f110 <__pow5mult>:
 800f110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f114:	4615      	mov	r5, r2
 800f116:	f012 0203 	ands.w	r2, r2, #3
 800f11a:	4606      	mov	r6, r0
 800f11c:	460f      	mov	r7, r1
 800f11e:	d007      	beq.n	800f130 <__pow5mult+0x20>
 800f120:	4c25      	ldr	r4, [pc, #148]	; (800f1b8 <__pow5mult+0xa8>)
 800f122:	3a01      	subs	r2, #1
 800f124:	2300      	movs	r3, #0
 800f126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f12a:	f7ff fe51 	bl	800edd0 <__multadd>
 800f12e:	4607      	mov	r7, r0
 800f130:	10ad      	asrs	r5, r5, #2
 800f132:	d03d      	beq.n	800f1b0 <__pow5mult+0xa0>
 800f134:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f136:	b97c      	cbnz	r4, 800f158 <__pow5mult+0x48>
 800f138:	2010      	movs	r0, #16
 800f13a:	f7ff fdcd 	bl	800ecd8 <malloc>
 800f13e:	4602      	mov	r2, r0
 800f140:	6270      	str	r0, [r6, #36]	; 0x24
 800f142:	b928      	cbnz	r0, 800f150 <__pow5mult+0x40>
 800f144:	4b1d      	ldr	r3, [pc, #116]	; (800f1bc <__pow5mult+0xac>)
 800f146:	481e      	ldr	r0, [pc, #120]	; (800f1c0 <__pow5mult+0xb0>)
 800f148:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f14c:	f000 fd7e 	bl	800fc4c <__assert_func>
 800f150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f154:	6004      	str	r4, [r0, #0]
 800f156:	60c4      	str	r4, [r0, #12]
 800f158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f15c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f160:	b94c      	cbnz	r4, 800f176 <__pow5mult+0x66>
 800f162:	f240 2171 	movw	r1, #625	; 0x271
 800f166:	4630      	mov	r0, r6
 800f168:	f7ff ff12 	bl	800ef90 <__i2b>
 800f16c:	2300      	movs	r3, #0
 800f16e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f172:	4604      	mov	r4, r0
 800f174:	6003      	str	r3, [r0, #0]
 800f176:	f04f 0900 	mov.w	r9, #0
 800f17a:	07eb      	lsls	r3, r5, #31
 800f17c:	d50a      	bpl.n	800f194 <__pow5mult+0x84>
 800f17e:	4639      	mov	r1, r7
 800f180:	4622      	mov	r2, r4
 800f182:	4630      	mov	r0, r6
 800f184:	f7ff ff1a 	bl	800efbc <__multiply>
 800f188:	4639      	mov	r1, r7
 800f18a:	4680      	mov	r8, r0
 800f18c:	4630      	mov	r0, r6
 800f18e:	f7ff fdfd 	bl	800ed8c <_Bfree>
 800f192:	4647      	mov	r7, r8
 800f194:	106d      	asrs	r5, r5, #1
 800f196:	d00b      	beq.n	800f1b0 <__pow5mult+0xa0>
 800f198:	6820      	ldr	r0, [r4, #0]
 800f19a:	b938      	cbnz	r0, 800f1ac <__pow5mult+0x9c>
 800f19c:	4622      	mov	r2, r4
 800f19e:	4621      	mov	r1, r4
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	f7ff ff0b 	bl	800efbc <__multiply>
 800f1a6:	6020      	str	r0, [r4, #0]
 800f1a8:	f8c0 9000 	str.w	r9, [r0]
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	e7e4      	b.n	800f17a <__pow5mult+0x6a>
 800f1b0:	4638      	mov	r0, r7
 800f1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1b6:	bf00      	nop
 800f1b8:	08011e10 	.word	0x08011e10
 800f1bc:	08011b5e 	.word	0x08011b5e
 800f1c0:	08011cc0 	.word	0x08011cc0

0800f1c4 <__lshift>:
 800f1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1c8:	460c      	mov	r4, r1
 800f1ca:	6849      	ldr	r1, [r1, #4]
 800f1cc:	6923      	ldr	r3, [r4, #16]
 800f1ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f1d2:	68a3      	ldr	r3, [r4, #8]
 800f1d4:	4607      	mov	r7, r0
 800f1d6:	4691      	mov	r9, r2
 800f1d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f1dc:	f108 0601 	add.w	r6, r8, #1
 800f1e0:	42b3      	cmp	r3, r6
 800f1e2:	db0b      	blt.n	800f1fc <__lshift+0x38>
 800f1e4:	4638      	mov	r0, r7
 800f1e6:	f7ff fd91 	bl	800ed0c <_Balloc>
 800f1ea:	4605      	mov	r5, r0
 800f1ec:	b948      	cbnz	r0, 800f202 <__lshift+0x3e>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	4b2a      	ldr	r3, [pc, #168]	; (800f29c <__lshift+0xd8>)
 800f1f2:	482b      	ldr	r0, [pc, #172]	; (800f2a0 <__lshift+0xdc>)
 800f1f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f1f8:	f000 fd28 	bl	800fc4c <__assert_func>
 800f1fc:	3101      	adds	r1, #1
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	e7ee      	b.n	800f1e0 <__lshift+0x1c>
 800f202:	2300      	movs	r3, #0
 800f204:	f100 0114 	add.w	r1, r0, #20
 800f208:	f100 0210 	add.w	r2, r0, #16
 800f20c:	4618      	mov	r0, r3
 800f20e:	4553      	cmp	r3, sl
 800f210:	db37      	blt.n	800f282 <__lshift+0xbe>
 800f212:	6920      	ldr	r0, [r4, #16]
 800f214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f218:	f104 0314 	add.w	r3, r4, #20
 800f21c:	f019 091f 	ands.w	r9, r9, #31
 800f220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f224:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f228:	d02f      	beq.n	800f28a <__lshift+0xc6>
 800f22a:	f1c9 0e20 	rsb	lr, r9, #32
 800f22e:	468a      	mov	sl, r1
 800f230:	f04f 0c00 	mov.w	ip, #0
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	fa02 f209 	lsl.w	r2, r2, r9
 800f23a:	ea42 020c 	orr.w	r2, r2, ip
 800f23e:	f84a 2b04 	str.w	r2, [sl], #4
 800f242:	f853 2b04 	ldr.w	r2, [r3], #4
 800f246:	4298      	cmp	r0, r3
 800f248:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f24c:	d8f2      	bhi.n	800f234 <__lshift+0x70>
 800f24e:	1b03      	subs	r3, r0, r4
 800f250:	3b15      	subs	r3, #21
 800f252:	f023 0303 	bic.w	r3, r3, #3
 800f256:	3304      	adds	r3, #4
 800f258:	f104 0215 	add.w	r2, r4, #21
 800f25c:	4290      	cmp	r0, r2
 800f25e:	bf38      	it	cc
 800f260:	2304      	movcc	r3, #4
 800f262:	f841 c003 	str.w	ip, [r1, r3]
 800f266:	f1bc 0f00 	cmp.w	ip, #0
 800f26a:	d001      	beq.n	800f270 <__lshift+0xac>
 800f26c:	f108 0602 	add.w	r6, r8, #2
 800f270:	3e01      	subs	r6, #1
 800f272:	4638      	mov	r0, r7
 800f274:	612e      	str	r6, [r5, #16]
 800f276:	4621      	mov	r1, r4
 800f278:	f7ff fd88 	bl	800ed8c <_Bfree>
 800f27c:	4628      	mov	r0, r5
 800f27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f282:	f842 0f04 	str.w	r0, [r2, #4]!
 800f286:	3301      	adds	r3, #1
 800f288:	e7c1      	b.n	800f20e <__lshift+0x4a>
 800f28a:	3904      	subs	r1, #4
 800f28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f290:	f841 2f04 	str.w	r2, [r1, #4]!
 800f294:	4298      	cmp	r0, r3
 800f296:	d8f9      	bhi.n	800f28c <__lshift+0xc8>
 800f298:	e7ea      	b.n	800f270 <__lshift+0xac>
 800f29a:	bf00      	nop
 800f29c:	08011bd0 	.word	0x08011bd0
 800f2a0:	08011cc0 	.word	0x08011cc0

0800f2a4 <__mcmp>:
 800f2a4:	b530      	push	{r4, r5, lr}
 800f2a6:	6902      	ldr	r2, [r0, #16]
 800f2a8:	690c      	ldr	r4, [r1, #16]
 800f2aa:	1b12      	subs	r2, r2, r4
 800f2ac:	d10e      	bne.n	800f2cc <__mcmp+0x28>
 800f2ae:	f100 0314 	add.w	r3, r0, #20
 800f2b2:	3114      	adds	r1, #20
 800f2b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f2b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f2bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f2c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f2c4:	42a5      	cmp	r5, r4
 800f2c6:	d003      	beq.n	800f2d0 <__mcmp+0x2c>
 800f2c8:	d305      	bcc.n	800f2d6 <__mcmp+0x32>
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	bd30      	pop	{r4, r5, pc}
 800f2d0:	4283      	cmp	r3, r0
 800f2d2:	d3f3      	bcc.n	800f2bc <__mcmp+0x18>
 800f2d4:	e7fa      	b.n	800f2cc <__mcmp+0x28>
 800f2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2da:	e7f7      	b.n	800f2cc <__mcmp+0x28>

0800f2dc <__mdiff>:
 800f2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e0:	460c      	mov	r4, r1
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	4611      	mov	r1, r2
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	4690      	mov	r8, r2
 800f2ea:	f7ff ffdb 	bl	800f2a4 <__mcmp>
 800f2ee:	1e05      	subs	r5, r0, #0
 800f2f0:	d110      	bne.n	800f314 <__mdiff+0x38>
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f7ff fd09 	bl	800ed0c <_Balloc>
 800f2fa:	b930      	cbnz	r0, 800f30a <__mdiff+0x2e>
 800f2fc:	4b3a      	ldr	r3, [pc, #232]	; (800f3e8 <__mdiff+0x10c>)
 800f2fe:	4602      	mov	r2, r0
 800f300:	f240 2132 	movw	r1, #562	; 0x232
 800f304:	4839      	ldr	r0, [pc, #228]	; (800f3ec <__mdiff+0x110>)
 800f306:	f000 fca1 	bl	800fc4c <__assert_func>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f314:	bfa4      	itt	ge
 800f316:	4643      	movge	r3, r8
 800f318:	46a0      	movge	r8, r4
 800f31a:	4630      	mov	r0, r6
 800f31c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f320:	bfa6      	itte	ge
 800f322:	461c      	movge	r4, r3
 800f324:	2500      	movge	r5, #0
 800f326:	2501      	movlt	r5, #1
 800f328:	f7ff fcf0 	bl	800ed0c <_Balloc>
 800f32c:	b920      	cbnz	r0, 800f338 <__mdiff+0x5c>
 800f32e:	4b2e      	ldr	r3, [pc, #184]	; (800f3e8 <__mdiff+0x10c>)
 800f330:	4602      	mov	r2, r0
 800f332:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f336:	e7e5      	b.n	800f304 <__mdiff+0x28>
 800f338:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f33c:	6926      	ldr	r6, [r4, #16]
 800f33e:	60c5      	str	r5, [r0, #12]
 800f340:	f104 0914 	add.w	r9, r4, #20
 800f344:	f108 0514 	add.w	r5, r8, #20
 800f348:	f100 0e14 	add.w	lr, r0, #20
 800f34c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f350:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f354:	f108 0210 	add.w	r2, r8, #16
 800f358:	46f2      	mov	sl, lr
 800f35a:	2100      	movs	r1, #0
 800f35c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f360:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f364:	fa1f f883 	uxth.w	r8, r3
 800f368:	fa11 f18b 	uxtah	r1, r1, fp
 800f36c:	0c1b      	lsrs	r3, r3, #16
 800f36e:	eba1 0808 	sub.w	r8, r1, r8
 800f372:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f376:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f37a:	fa1f f888 	uxth.w	r8, r8
 800f37e:	1419      	asrs	r1, r3, #16
 800f380:	454e      	cmp	r6, r9
 800f382:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f386:	f84a 3b04 	str.w	r3, [sl], #4
 800f38a:	d8e7      	bhi.n	800f35c <__mdiff+0x80>
 800f38c:	1b33      	subs	r3, r6, r4
 800f38e:	3b15      	subs	r3, #21
 800f390:	f023 0303 	bic.w	r3, r3, #3
 800f394:	3304      	adds	r3, #4
 800f396:	3415      	adds	r4, #21
 800f398:	42a6      	cmp	r6, r4
 800f39a:	bf38      	it	cc
 800f39c:	2304      	movcc	r3, #4
 800f39e:	441d      	add	r5, r3
 800f3a0:	4473      	add	r3, lr
 800f3a2:	469e      	mov	lr, r3
 800f3a4:	462e      	mov	r6, r5
 800f3a6:	4566      	cmp	r6, ip
 800f3a8:	d30e      	bcc.n	800f3c8 <__mdiff+0xec>
 800f3aa:	f10c 0203 	add.w	r2, ip, #3
 800f3ae:	1b52      	subs	r2, r2, r5
 800f3b0:	f022 0203 	bic.w	r2, r2, #3
 800f3b4:	3d03      	subs	r5, #3
 800f3b6:	45ac      	cmp	ip, r5
 800f3b8:	bf38      	it	cc
 800f3ba:	2200      	movcc	r2, #0
 800f3bc:	441a      	add	r2, r3
 800f3be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f3c2:	b17b      	cbz	r3, 800f3e4 <__mdiff+0x108>
 800f3c4:	6107      	str	r7, [r0, #16]
 800f3c6:	e7a3      	b.n	800f310 <__mdiff+0x34>
 800f3c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800f3cc:	fa11 f288 	uxtah	r2, r1, r8
 800f3d0:	1414      	asrs	r4, r2, #16
 800f3d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f3d6:	b292      	uxth	r2, r2
 800f3d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f3dc:	f84e 2b04 	str.w	r2, [lr], #4
 800f3e0:	1421      	asrs	r1, r4, #16
 800f3e2:	e7e0      	b.n	800f3a6 <__mdiff+0xca>
 800f3e4:	3f01      	subs	r7, #1
 800f3e6:	e7ea      	b.n	800f3be <__mdiff+0xe2>
 800f3e8:	08011bd0 	.word	0x08011bd0
 800f3ec:	08011cc0 	.word	0x08011cc0

0800f3f0 <__ulp>:
 800f3f0:	b082      	sub	sp, #8
 800f3f2:	ed8d 0b00 	vstr	d0, [sp]
 800f3f6:	9b01      	ldr	r3, [sp, #4]
 800f3f8:	4912      	ldr	r1, [pc, #72]	; (800f444 <__ulp+0x54>)
 800f3fa:	4019      	ands	r1, r3
 800f3fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f400:	2900      	cmp	r1, #0
 800f402:	dd05      	ble.n	800f410 <__ulp+0x20>
 800f404:	2200      	movs	r2, #0
 800f406:	460b      	mov	r3, r1
 800f408:	ec43 2b10 	vmov	d0, r2, r3
 800f40c:	b002      	add	sp, #8
 800f40e:	4770      	bx	lr
 800f410:	4249      	negs	r1, r1
 800f412:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f416:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f41a:	f04f 0200 	mov.w	r2, #0
 800f41e:	f04f 0300 	mov.w	r3, #0
 800f422:	da04      	bge.n	800f42e <__ulp+0x3e>
 800f424:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f428:	fa41 f300 	asr.w	r3, r1, r0
 800f42c:	e7ec      	b.n	800f408 <__ulp+0x18>
 800f42e:	f1a0 0114 	sub.w	r1, r0, #20
 800f432:	291e      	cmp	r1, #30
 800f434:	bfda      	itte	le
 800f436:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f43a:	fa20 f101 	lsrle.w	r1, r0, r1
 800f43e:	2101      	movgt	r1, #1
 800f440:	460a      	mov	r2, r1
 800f442:	e7e1      	b.n	800f408 <__ulp+0x18>
 800f444:	7ff00000 	.word	0x7ff00000

0800f448 <__b2d>:
 800f448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f44a:	6905      	ldr	r5, [r0, #16]
 800f44c:	f100 0714 	add.w	r7, r0, #20
 800f450:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f454:	1f2e      	subs	r6, r5, #4
 800f456:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f45a:	4620      	mov	r0, r4
 800f45c:	f7ff fd48 	bl	800eef0 <__hi0bits>
 800f460:	f1c0 0320 	rsb	r3, r0, #32
 800f464:	280a      	cmp	r0, #10
 800f466:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f4e4 <__b2d+0x9c>
 800f46a:	600b      	str	r3, [r1, #0]
 800f46c:	dc14      	bgt.n	800f498 <__b2d+0x50>
 800f46e:	f1c0 0e0b 	rsb	lr, r0, #11
 800f472:	fa24 f10e 	lsr.w	r1, r4, lr
 800f476:	42b7      	cmp	r7, r6
 800f478:	ea41 030c 	orr.w	r3, r1, ip
 800f47c:	bf34      	ite	cc
 800f47e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f482:	2100      	movcs	r1, #0
 800f484:	3015      	adds	r0, #21
 800f486:	fa04 f000 	lsl.w	r0, r4, r0
 800f48a:	fa21 f10e 	lsr.w	r1, r1, lr
 800f48e:	ea40 0201 	orr.w	r2, r0, r1
 800f492:	ec43 2b10 	vmov	d0, r2, r3
 800f496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f498:	42b7      	cmp	r7, r6
 800f49a:	bf3a      	itte	cc
 800f49c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f4a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800f4a4:	2100      	movcs	r1, #0
 800f4a6:	380b      	subs	r0, #11
 800f4a8:	d017      	beq.n	800f4da <__b2d+0x92>
 800f4aa:	f1c0 0c20 	rsb	ip, r0, #32
 800f4ae:	fa04 f500 	lsl.w	r5, r4, r0
 800f4b2:	42be      	cmp	r6, r7
 800f4b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800f4b8:	ea45 0504 	orr.w	r5, r5, r4
 800f4bc:	bf8c      	ite	hi
 800f4be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f4c2:	2400      	movls	r4, #0
 800f4c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f4c8:	fa01 f000 	lsl.w	r0, r1, r0
 800f4cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800f4d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f4d4:	ea40 0204 	orr.w	r2, r0, r4
 800f4d8:	e7db      	b.n	800f492 <__b2d+0x4a>
 800f4da:	ea44 030c 	orr.w	r3, r4, ip
 800f4de:	460a      	mov	r2, r1
 800f4e0:	e7d7      	b.n	800f492 <__b2d+0x4a>
 800f4e2:	bf00      	nop
 800f4e4:	3ff00000 	.word	0x3ff00000

0800f4e8 <__d2b>:
 800f4e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4ec:	4689      	mov	r9, r1
 800f4ee:	2101      	movs	r1, #1
 800f4f0:	ec57 6b10 	vmov	r6, r7, d0
 800f4f4:	4690      	mov	r8, r2
 800f4f6:	f7ff fc09 	bl	800ed0c <_Balloc>
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	b930      	cbnz	r0, 800f50c <__d2b+0x24>
 800f4fe:	4602      	mov	r2, r0
 800f500:	4b25      	ldr	r3, [pc, #148]	; (800f598 <__d2b+0xb0>)
 800f502:	4826      	ldr	r0, [pc, #152]	; (800f59c <__d2b+0xb4>)
 800f504:	f240 310a 	movw	r1, #778	; 0x30a
 800f508:	f000 fba0 	bl	800fc4c <__assert_func>
 800f50c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f514:	bb35      	cbnz	r5, 800f564 <__d2b+0x7c>
 800f516:	2e00      	cmp	r6, #0
 800f518:	9301      	str	r3, [sp, #4]
 800f51a:	d028      	beq.n	800f56e <__d2b+0x86>
 800f51c:	4668      	mov	r0, sp
 800f51e:	9600      	str	r6, [sp, #0]
 800f520:	f7ff fd06 	bl	800ef30 <__lo0bits>
 800f524:	9900      	ldr	r1, [sp, #0]
 800f526:	b300      	cbz	r0, 800f56a <__d2b+0x82>
 800f528:	9a01      	ldr	r2, [sp, #4]
 800f52a:	f1c0 0320 	rsb	r3, r0, #32
 800f52e:	fa02 f303 	lsl.w	r3, r2, r3
 800f532:	430b      	orrs	r3, r1
 800f534:	40c2      	lsrs	r2, r0
 800f536:	6163      	str	r3, [r4, #20]
 800f538:	9201      	str	r2, [sp, #4]
 800f53a:	9b01      	ldr	r3, [sp, #4]
 800f53c:	61a3      	str	r3, [r4, #24]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	bf14      	ite	ne
 800f542:	2202      	movne	r2, #2
 800f544:	2201      	moveq	r2, #1
 800f546:	6122      	str	r2, [r4, #16]
 800f548:	b1d5      	cbz	r5, 800f580 <__d2b+0x98>
 800f54a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f54e:	4405      	add	r5, r0
 800f550:	f8c9 5000 	str.w	r5, [r9]
 800f554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f558:	f8c8 0000 	str.w	r0, [r8]
 800f55c:	4620      	mov	r0, r4
 800f55e:	b003      	add	sp, #12
 800f560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f568:	e7d5      	b.n	800f516 <__d2b+0x2e>
 800f56a:	6161      	str	r1, [r4, #20]
 800f56c:	e7e5      	b.n	800f53a <__d2b+0x52>
 800f56e:	a801      	add	r0, sp, #4
 800f570:	f7ff fcde 	bl	800ef30 <__lo0bits>
 800f574:	9b01      	ldr	r3, [sp, #4]
 800f576:	6163      	str	r3, [r4, #20]
 800f578:	2201      	movs	r2, #1
 800f57a:	6122      	str	r2, [r4, #16]
 800f57c:	3020      	adds	r0, #32
 800f57e:	e7e3      	b.n	800f548 <__d2b+0x60>
 800f580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f588:	f8c9 0000 	str.w	r0, [r9]
 800f58c:	6918      	ldr	r0, [r3, #16]
 800f58e:	f7ff fcaf 	bl	800eef0 <__hi0bits>
 800f592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f596:	e7df      	b.n	800f558 <__d2b+0x70>
 800f598:	08011bd0 	.word	0x08011bd0
 800f59c:	08011cc0 	.word	0x08011cc0

0800f5a0 <__ratio>:
 800f5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	4688      	mov	r8, r1
 800f5a6:	4669      	mov	r1, sp
 800f5a8:	4681      	mov	r9, r0
 800f5aa:	f7ff ff4d 	bl	800f448 <__b2d>
 800f5ae:	a901      	add	r1, sp, #4
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	ec55 4b10 	vmov	r4, r5, d0
 800f5b6:	f7ff ff47 	bl	800f448 <__b2d>
 800f5ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f5be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f5c2:	eba3 0c02 	sub.w	ip, r3, r2
 800f5c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f5ca:	1a9b      	subs	r3, r3, r2
 800f5cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f5d0:	ec51 0b10 	vmov	r0, r1, d0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	bfd6      	itet	le
 800f5d8:	460a      	movle	r2, r1
 800f5da:	462a      	movgt	r2, r5
 800f5dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f5e0:	468b      	mov	fp, r1
 800f5e2:	462f      	mov	r7, r5
 800f5e4:	bfd4      	ite	le
 800f5e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f5ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	ee10 2a10 	vmov	r2, s0
 800f5f4:	465b      	mov	r3, fp
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	f7f1 f948 	bl	800088c <__aeabi_ddiv>
 800f5fc:	ec41 0b10 	vmov	d0, r0, r1
 800f600:	b003      	add	sp, #12
 800f602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f606 <__copybits>:
 800f606:	3901      	subs	r1, #1
 800f608:	b570      	push	{r4, r5, r6, lr}
 800f60a:	1149      	asrs	r1, r1, #5
 800f60c:	6914      	ldr	r4, [r2, #16]
 800f60e:	3101      	adds	r1, #1
 800f610:	f102 0314 	add.w	r3, r2, #20
 800f614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f61c:	1f05      	subs	r5, r0, #4
 800f61e:	42a3      	cmp	r3, r4
 800f620:	d30c      	bcc.n	800f63c <__copybits+0x36>
 800f622:	1aa3      	subs	r3, r4, r2
 800f624:	3b11      	subs	r3, #17
 800f626:	f023 0303 	bic.w	r3, r3, #3
 800f62a:	3211      	adds	r2, #17
 800f62c:	42a2      	cmp	r2, r4
 800f62e:	bf88      	it	hi
 800f630:	2300      	movhi	r3, #0
 800f632:	4418      	add	r0, r3
 800f634:	2300      	movs	r3, #0
 800f636:	4288      	cmp	r0, r1
 800f638:	d305      	bcc.n	800f646 <__copybits+0x40>
 800f63a:	bd70      	pop	{r4, r5, r6, pc}
 800f63c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f640:	f845 6f04 	str.w	r6, [r5, #4]!
 800f644:	e7eb      	b.n	800f61e <__copybits+0x18>
 800f646:	f840 3b04 	str.w	r3, [r0], #4
 800f64a:	e7f4      	b.n	800f636 <__copybits+0x30>

0800f64c <__any_on>:
 800f64c:	f100 0214 	add.w	r2, r0, #20
 800f650:	6900      	ldr	r0, [r0, #16]
 800f652:	114b      	asrs	r3, r1, #5
 800f654:	4298      	cmp	r0, r3
 800f656:	b510      	push	{r4, lr}
 800f658:	db11      	blt.n	800f67e <__any_on+0x32>
 800f65a:	dd0a      	ble.n	800f672 <__any_on+0x26>
 800f65c:	f011 011f 	ands.w	r1, r1, #31
 800f660:	d007      	beq.n	800f672 <__any_on+0x26>
 800f662:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f666:	fa24 f001 	lsr.w	r0, r4, r1
 800f66a:	fa00 f101 	lsl.w	r1, r0, r1
 800f66e:	428c      	cmp	r4, r1
 800f670:	d10b      	bne.n	800f68a <__any_on+0x3e>
 800f672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f676:	4293      	cmp	r3, r2
 800f678:	d803      	bhi.n	800f682 <__any_on+0x36>
 800f67a:	2000      	movs	r0, #0
 800f67c:	bd10      	pop	{r4, pc}
 800f67e:	4603      	mov	r3, r0
 800f680:	e7f7      	b.n	800f672 <__any_on+0x26>
 800f682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f686:	2900      	cmp	r1, #0
 800f688:	d0f5      	beq.n	800f676 <__any_on+0x2a>
 800f68a:	2001      	movs	r0, #1
 800f68c:	e7f6      	b.n	800f67c <__any_on+0x30>

0800f68e <_calloc_r>:
 800f68e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f690:	fba1 2402 	umull	r2, r4, r1, r2
 800f694:	b94c      	cbnz	r4, 800f6aa <_calloc_r+0x1c>
 800f696:	4611      	mov	r1, r2
 800f698:	9201      	str	r2, [sp, #4]
 800f69a:	f000 f87b 	bl	800f794 <_malloc_r>
 800f69e:	9a01      	ldr	r2, [sp, #4]
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	b930      	cbnz	r0, 800f6b2 <_calloc_r+0x24>
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	b003      	add	sp, #12
 800f6a8:	bd30      	pop	{r4, r5, pc}
 800f6aa:	220c      	movs	r2, #12
 800f6ac:	6002      	str	r2, [r0, #0]
 800f6ae:	2500      	movs	r5, #0
 800f6b0:	e7f8      	b.n	800f6a4 <_calloc_r+0x16>
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	f7fc fa86 	bl	800bbc4 <memset>
 800f6b8:	e7f4      	b.n	800f6a4 <_calloc_r+0x16>
	...

0800f6bc <_free_r>:
 800f6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6be:	2900      	cmp	r1, #0
 800f6c0:	d044      	beq.n	800f74c <_free_r+0x90>
 800f6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6c6:	9001      	str	r0, [sp, #4]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f6ce:	bfb8      	it	lt
 800f6d0:	18e4      	addlt	r4, r4, r3
 800f6d2:	f000 fb2f 	bl	800fd34 <__malloc_lock>
 800f6d6:	4a1e      	ldr	r2, [pc, #120]	; (800f750 <_free_r+0x94>)
 800f6d8:	9801      	ldr	r0, [sp, #4]
 800f6da:	6813      	ldr	r3, [r2, #0]
 800f6dc:	b933      	cbnz	r3, 800f6ec <_free_r+0x30>
 800f6de:	6063      	str	r3, [r4, #4]
 800f6e0:	6014      	str	r4, [r2, #0]
 800f6e2:	b003      	add	sp, #12
 800f6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6e8:	f000 bb2a 	b.w	800fd40 <__malloc_unlock>
 800f6ec:	42a3      	cmp	r3, r4
 800f6ee:	d908      	bls.n	800f702 <_free_r+0x46>
 800f6f0:	6825      	ldr	r5, [r4, #0]
 800f6f2:	1961      	adds	r1, r4, r5
 800f6f4:	428b      	cmp	r3, r1
 800f6f6:	bf01      	itttt	eq
 800f6f8:	6819      	ldreq	r1, [r3, #0]
 800f6fa:	685b      	ldreq	r3, [r3, #4]
 800f6fc:	1949      	addeq	r1, r1, r5
 800f6fe:	6021      	streq	r1, [r4, #0]
 800f700:	e7ed      	b.n	800f6de <_free_r+0x22>
 800f702:	461a      	mov	r2, r3
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	b10b      	cbz	r3, 800f70c <_free_r+0x50>
 800f708:	42a3      	cmp	r3, r4
 800f70a:	d9fa      	bls.n	800f702 <_free_r+0x46>
 800f70c:	6811      	ldr	r1, [r2, #0]
 800f70e:	1855      	adds	r5, r2, r1
 800f710:	42a5      	cmp	r5, r4
 800f712:	d10b      	bne.n	800f72c <_free_r+0x70>
 800f714:	6824      	ldr	r4, [r4, #0]
 800f716:	4421      	add	r1, r4
 800f718:	1854      	adds	r4, r2, r1
 800f71a:	42a3      	cmp	r3, r4
 800f71c:	6011      	str	r1, [r2, #0]
 800f71e:	d1e0      	bne.n	800f6e2 <_free_r+0x26>
 800f720:	681c      	ldr	r4, [r3, #0]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	6053      	str	r3, [r2, #4]
 800f726:	4421      	add	r1, r4
 800f728:	6011      	str	r1, [r2, #0]
 800f72a:	e7da      	b.n	800f6e2 <_free_r+0x26>
 800f72c:	d902      	bls.n	800f734 <_free_r+0x78>
 800f72e:	230c      	movs	r3, #12
 800f730:	6003      	str	r3, [r0, #0]
 800f732:	e7d6      	b.n	800f6e2 <_free_r+0x26>
 800f734:	6825      	ldr	r5, [r4, #0]
 800f736:	1961      	adds	r1, r4, r5
 800f738:	428b      	cmp	r3, r1
 800f73a:	bf04      	itt	eq
 800f73c:	6819      	ldreq	r1, [r3, #0]
 800f73e:	685b      	ldreq	r3, [r3, #4]
 800f740:	6063      	str	r3, [r4, #4]
 800f742:	bf04      	itt	eq
 800f744:	1949      	addeq	r1, r1, r5
 800f746:	6021      	streq	r1, [r4, #0]
 800f748:	6054      	str	r4, [r2, #4]
 800f74a:	e7ca      	b.n	800f6e2 <_free_r+0x26>
 800f74c:	b003      	add	sp, #12
 800f74e:	bd30      	pop	{r4, r5, pc}
 800f750:	20009698 	.word	0x20009698

0800f754 <sbrk_aligned>:
 800f754:	b570      	push	{r4, r5, r6, lr}
 800f756:	4e0e      	ldr	r6, [pc, #56]	; (800f790 <sbrk_aligned+0x3c>)
 800f758:	460c      	mov	r4, r1
 800f75a:	6831      	ldr	r1, [r6, #0]
 800f75c:	4605      	mov	r5, r0
 800f75e:	b911      	cbnz	r1, 800f766 <sbrk_aligned+0x12>
 800f760:	f000 f9ee 	bl	800fb40 <_sbrk_r>
 800f764:	6030      	str	r0, [r6, #0]
 800f766:	4621      	mov	r1, r4
 800f768:	4628      	mov	r0, r5
 800f76a:	f000 f9e9 	bl	800fb40 <_sbrk_r>
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	d00a      	beq.n	800f788 <sbrk_aligned+0x34>
 800f772:	1cc4      	adds	r4, r0, #3
 800f774:	f024 0403 	bic.w	r4, r4, #3
 800f778:	42a0      	cmp	r0, r4
 800f77a:	d007      	beq.n	800f78c <sbrk_aligned+0x38>
 800f77c:	1a21      	subs	r1, r4, r0
 800f77e:	4628      	mov	r0, r5
 800f780:	f000 f9de 	bl	800fb40 <_sbrk_r>
 800f784:	3001      	adds	r0, #1
 800f786:	d101      	bne.n	800f78c <sbrk_aligned+0x38>
 800f788:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f78c:	4620      	mov	r0, r4
 800f78e:	bd70      	pop	{r4, r5, r6, pc}
 800f790:	2000969c 	.word	0x2000969c

0800f794 <_malloc_r>:
 800f794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f798:	1ccd      	adds	r5, r1, #3
 800f79a:	f025 0503 	bic.w	r5, r5, #3
 800f79e:	3508      	adds	r5, #8
 800f7a0:	2d0c      	cmp	r5, #12
 800f7a2:	bf38      	it	cc
 800f7a4:	250c      	movcc	r5, #12
 800f7a6:	2d00      	cmp	r5, #0
 800f7a8:	4607      	mov	r7, r0
 800f7aa:	db01      	blt.n	800f7b0 <_malloc_r+0x1c>
 800f7ac:	42a9      	cmp	r1, r5
 800f7ae:	d905      	bls.n	800f7bc <_malloc_r+0x28>
 800f7b0:	230c      	movs	r3, #12
 800f7b2:	603b      	str	r3, [r7, #0]
 800f7b4:	2600      	movs	r6, #0
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7bc:	4e2e      	ldr	r6, [pc, #184]	; (800f878 <_malloc_r+0xe4>)
 800f7be:	f000 fab9 	bl	800fd34 <__malloc_lock>
 800f7c2:	6833      	ldr	r3, [r6, #0]
 800f7c4:	461c      	mov	r4, r3
 800f7c6:	bb34      	cbnz	r4, 800f816 <_malloc_r+0x82>
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4638      	mov	r0, r7
 800f7cc:	f7ff ffc2 	bl	800f754 <sbrk_aligned>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	d14d      	bne.n	800f872 <_malloc_r+0xde>
 800f7d6:	6834      	ldr	r4, [r6, #0]
 800f7d8:	4626      	mov	r6, r4
 800f7da:	2e00      	cmp	r6, #0
 800f7dc:	d140      	bne.n	800f860 <_malloc_r+0xcc>
 800f7de:	6823      	ldr	r3, [r4, #0]
 800f7e0:	4631      	mov	r1, r6
 800f7e2:	4638      	mov	r0, r7
 800f7e4:	eb04 0803 	add.w	r8, r4, r3
 800f7e8:	f000 f9aa 	bl	800fb40 <_sbrk_r>
 800f7ec:	4580      	cmp	r8, r0
 800f7ee:	d13a      	bne.n	800f866 <_malloc_r+0xd2>
 800f7f0:	6821      	ldr	r1, [r4, #0]
 800f7f2:	3503      	adds	r5, #3
 800f7f4:	1a6d      	subs	r5, r5, r1
 800f7f6:	f025 0503 	bic.w	r5, r5, #3
 800f7fa:	3508      	adds	r5, #8
 800f7fc:	2d0c      	cmp	r5, #12
 800f7fe:	bf38      	it	cc
 800f800:	250c      	movcc	r5, #12
 800f802:	4629      	mov	r1, r5
 800f804:	4638      	mov	r0, r7
 800f806:	f7ff ffa5 	bl	800f754 <sbrk_aligned>
 800f80a:	3001      	adds	r0, #1
 800f80c:	d02b      	beq.n	800f866 <_malloc_r+0xd2>
 800f80e:	6823      	ldr	r3, [r4, #0]
 800f810:	442b      	add	r3, r5
 800f812:	6023      	str	r3, [r4, #0]
 800f814:	e00e      	b.n	800f834 <_malloc_r+0xa0>
 800f816:	6822      	ldr	r2, [r4, #0]
 800f818:	1b52      	subs	r2, r2, r5
 800f81a:	d41e      	bmi.n	800f85a <_malloc_r+0xc6>
 800f81c:	2a0b      	cmp	r2, #11
 800f81e:	d916      	bls.n	800f84e <_malloc_r+0xba>
 800f820:	1961      	adds	r1, r4, r5
 800f822:	42a3      	cmp	r3, r4
 800f824:	6025      	str	r5, [r4, #0]
 800f826:	bf18      	it	ne
 800f828:	6059      	strne	r1, [r3, #4]
 800f82a:	6863      	ldr	r3, [r4, #4]
 800f82c:	bf08      	it	eq
 800f82e:	6031      	streq	r1, [r6, #0]
 800f830:	5162      	str	r2, [r4, r5]
 800f832:	604b      	str	r3, [r1, #4]
 800f834:	4638      	mov	r0, r7
 800f836:	f104 060b 	add.w	r6, r4, #11
 800f83a:	f000 fa81 	bl	800fd40 <__malloc_unlock>
 800f83e:	f026 0607 	bic.w	r6, r6, #7
 800f842:	1d23      	adds	r3, r4, #4
 800f844:	1af2      	subs	r2, r6, r3
 800f846:	d0b6      	beq.n	800f7b6 <_malloc_r+0x22>
 800f848:	1b9b      	subs	r3, r3, r6
 800f84a:	50a3      	str	r3, [r4, r2]
 800f84c:	e7b3      	b.n	800f7b6 <_malloc_r+0x22>
 800f84e:	6862      	ldr	r2, [r4, #4]
 800f850:	42a3      	cmp	r3, r4
 800f852:	bf0c      	ite	eq
 800f854:	6032      	streq	r2, [r6, #0]
 800f856:	605a      	strne	r2, [r3, #4]
 800f858:	e7ec      	b.n	800f834 <_malloc_r+0xa0>
 800f85a:	4623      	mov	r3, r4
 800f85c:	6864      	ldr	r4, [r4, #4]
 800f85e:	e7b2      	b.n	800f7c6 <_malloc_r+0x32>
 800f860:	4634      	mov	r4, r6
 800f862:	6876      	ldr	r6, [r6, #4]
 800f864:	e7b9      	b.n	800f7da <_malloc_r+0x46>
 800f866:	230c      	movs	r3, #12
 800f868:	603b      	str	r3, [r7, #0]
 800f86a:	4638      	mov	r0, r7
 800f86c:	f000 fa68 	bl	800fd40 <__malloc_unlock>
 800f870:	e7a1      	b.n	800f7b6 <_malloc_r+0x22>
 800f872:	6025      	str	r5, [r4, #0]
 800f874:	e7de      	b.n	800f834 <_malloc_r+0xa0>
 800f876:	bf00      	nop
 800f878:	20009698 	.word	0x20009698

0800f87c <__sfputc_r>:
 800f87c:	6893      	ldr	r3, [r2, #8]
 800f87e:	3b01      	subs	r3, #1
 800f880:	2b00      	cmp	r3, #0
 800f882:	b410      	push	{r4}
 800f884:	6093      	str	r3, [r2, #8]
 800f886:	da08      	bge.n	800f89a <__sfputc_r+0x1e>
 800f888:	6994      	ldr	r4, [r2, #24]
 800f88a:	42a3      	cmp	r3, r4
 800f88c:	db01      	blt.n	800f892 <__sfputc_r+0x16>
 800f88e:	290a      	cmp	r1, #10
 800f890:	d103      	bne.n	800f89a <__sfputc_r+0x1e>
 800f892:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f896:	f7fd bd51 	b.w	800d33c <__swbuf_r>
 800f89a:	6813      	ldr	r3, [r2, #0]
 800f89c:	1c58      	adds	r0, r3, #1
 800f89e:	6010      	str	r0, [r2, #0]
 800f8a0:	7019      	strb	r1, [r3, #0]
 800f8a2:	4608      	mov	r0, r1
 800f8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8a8:	4770      	bx	lr

0800f8aa <__sfputs_r>:
 800f8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	460f      	mov	r7, r1
 800f8b0:	4614      	mov	r4, r2
 800f8b2:	18d5      	adds	r5, r2, r3
 800f8b4:	42ac      	cmp	r4, r5
 800f8b6:	d101      	bne.n	800f8bc <__sfputs_r+0x12>
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	e007      	b.n	800f8cc <__sfputs_r+0x22>
 800f8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c0:	463a      	mov	r2, r7
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f7ff ffda 	bl	800f87c <__sfputc_r>
 800f8c8:	1c43      	adds	r3, r0, #1
 800f8ca:	d1f3      	bne.n	800f8b4 <__sfputs_r+0xa>
 800f8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8d0 <_vfiprintf_r>:
 800f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	460d      	mov	r5, r1
 800f8d6:	b09d      	sub	sp, #116	; 0x74
 800f8d8:	4614      	mov	r4, r2
 800f8da:	4698      	mov	r8, r3
 800f8dc:	4606      	mov	r6, r0
 800f8de:	b118      	cbz	r0, 800f8e8 <_vfiprintf_r+0x18>
 800f8e0:	6983      	ldr	r3, [r0, #24]
 800f8e2:	b90b      	cbnz	r3, 800f8e8 <_vfiprintf_r+0x18>
 800f8e4:	f7fe fd80 	bl	800e3e8 <__sinit>
 800f8e8:	4b89      	ldr	r3, [pc, #548]	; (800fb10 <_vfiprintf_r+0x240>)
 800f8ea:	429d      	cmp	r5, r3
 800f8ec:	d11b      	bne.n	800f926 <_vfiprintf_r+0x56>
 800f8ee:	6875      	ldr	r5, [r6, #4]
 800f8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8f2:	07d9      	lsls	r1, r3, #31
 800f8f4:	d405      	bmi.n	800f902 <_vfiprintf_r+0x32>
 800f8f6:	89ab      	ldrh	r3, [r5, #12]
 800f8f8:	059a      	lsls	r2, r3, #22
 800f8fa:	d402      	bmi.n	800f902 <_vfiprintf_r+0x32>
 800f8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8fe:	f7ff f984 	bl	800ec0a <__retarget_lock_acquire_recursive>
 800f902:	89ab      	ldrh	r3, [r5, #12]
 800f904:	071b      	lsls	r3, r3, #28
 800f906:	d501      	bpl.n	800f90c <_vfiprintf_r+0x3c>
 800f908:	692b      	ldr	r3, [r5, #16]
 800f90a:	b9eb      	cbnz	r3, 800f948 <_vfiprintf_r+0x78>
 800f90c:	4629      	mov	r1, r5
 800f90e:	4630      	mov	r0, r6
 800f910:	f7fd fd66 	bl	800d3e0 <__swsetup_r>
 800f914:	b1c0      	cbz	r0, 800f948 <_vfiprintf_r+0x78>
 800f916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f918:	07dc      	lsls	r4, r3, #31
 800f91a:	d50e      	bpl.n	800f93a <_vfiprintf_r+0x6a>
 800f91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f920:	b01d      	add	sp, #116	; 0x74
 800f922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f926:	4b7b      	ldr	r3, [pc, #492]	; (800fb14 <_vfiprintf_r+0x244>)
 800f928:	429d      	cmp	r5, r3
 800f92a:	d101      	bne.n	800f930 <_vfiprintf_r+0x60>
 800f92c:	68b5      	ldr	r5, [r6, #8]
 800f92e:	e7df      	b.n	800f8f0 <_vfiprintf_r+0x20>
 800f930:	4b79      	ldr	r3, [pc, #484]	; (800fb18 <_vfiprintf_r+0x248>)
 800f932:	429d      	cmp	r5, r3
 800f934:	bf08      	it	eq
 800f936:	68f5      	ldreq	r5, [r6, #12]
 800f938:	e7da      	b.n	800f8f0 <_vfiprintf_r+0x20>
 800f93a:	89ab      	ldrh	r3, [r5, #12]
 800f93c:	0598      	lsls	r0, r3, #22
 800f93e:	d4ed      	bmi.n	800f91c <_vfiprintf_r+0x4c>
 800f940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f942:	f7ff f963 	bl	800ec0c <__retarget_lock_release_recursive>
 800f946:	e7e9      	b.n	800f91c <_vfiprintf_r+0x4c>
 800f948:	2300      	movs	r3, #0
 800f94a:	9309      	str	r3, [sp, #36]	; 0x24
 800f94c:	2320      	movs	r3, #32
 800f94e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f952:	f8cd 800c 	str.w	r8, [sp, #12]
 800f956:	2330      	movs	r3, #48	; 0x30
 800f958:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb1c <_vfiprintf_r+0x24c>
 800f95c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f960:	f04f 0901 	mov.w	r9, #1
 800f964:	4623      	mov	r3, r4
 800f966:	469a      	mov	sl, r3
 800f968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f96c:	b10a      	cbz	r2, 800f972 <_vfiprintf_r+0xa2>
 800f96e:	2a25      	cmp	r2, #37	; 0x25
 800f970:	d1f9      	bne.n	800f966 <_vfiprintf_r+0x96>
 800f972:	ebba 0b04 	subs.w	fp, sl, r4
 800f976:	d00b      	beq.n	800f990 <_vfiprintf_r+0xc0>
 800f978:	465b      	mov	r3, fp
 800f97a:	4622      	mov	r2, r4
 800f97c:	4629      	mov	r1, r5
 800f97e:	4630      	mov	r0, r6
 800f980:	f7ff ff93 	bl	800f8aa <__sfputs_r>
 800f984:	3001      	adds	r0, #1
 800f986:	f000 80aa 	beq.w	800fade <_vfiprintf_r+0x20e>
 800f98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f98c:	445a      	add	r2, fp
 800f98e:	9209      	str	r2, [sp, #36]	; 0x24
 800f990:	f89a 3000 	ldrb.w	r3, [sl]
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 80a2 	beq.w	800fade <_vfiprintf_r+0x20e>
 800f99a:	2300      	movs	r3, #0
 800f99c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9a4:	f10a 0a01 	add.w	sl, sl, #1
 800f9a8:	9304      	str	r3, [sp, #16]
 800f9aa:	9307      	str	r3, [sp, #28]
 800f9ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9b0:	931a      	str	r3, [sp, #104]	; 0x68
 800f9b2:	4654      	mov	r4, sl
 800f9b4:	2205      	movs	r2, #5
 800f9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ba:	4858      	ldr	r0, [pc, #352]	; (800fb1c <_vfiprintf_r+0x24c>)
 800f9bc:	f7f0 fc30 	bl	8000220 <memchr>
 800f9c0:	9a04      	ldr	r2, [sp, #16]
 800f9c2:	b9d8      	cbnz	r0, 800f9fc <_vfiprintf_r+0x12c>
 800f9c4:	06d1      	lsls	r1, r2, #27
 800f9c6:	bf44      	itt	mi
 800f9c8:	2320      	movmi	r3, #32
 800f9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9ce:	0713      	lsls	r3, r2, #28
 800f9d0:	bf44      	itt	mi
 800f9d2:	232b      	movmi	r3, #43	; 0x2b
 800f9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f9dc:	2b2a      	cmp	r3, #42	; 0x2a
 800f9de:	d015      	beq.n	800fa0c <_vfiprintf_r+0x13c>
 800f9e0:	9a07      	ldr	r2, [sp, #28]
 800f9e2:	4654      	mov	r4, sl
 800f9e4:	2000      	movs	r0, #0
 800f9e6:	f04f 0c0a 	mov.w	ip, #10
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9f0:	3b30      	subs	r3, #48	; 0x30
 800f9f2:	2b09      	cmp	r3, #9
 800f9f4:	d94e      	bls.n	800fa94 <_vfiprintf_r+0x1c4>
 800f9f6:	b1b0      	cbz	r0, 800fa26 <_vfiprintf_r+0x156>
 800f9f8:	9207      	str	r2, [sp, #28]
 800f9fa:	e014      	b.n	800fa26 <_vfiprintf_r+0x156>
 800f9fc:	eba0 0308 	sub.w	r3, r0, r8
 800fa00:	fa09 f303 	lsl.w	r3, r9, r3
 800fa04:	4313      	orrs	r3, r2
 800fa06:	9304      	str	r3, [sp, #16]
 800fa08:	46a2      	mov	sl, r4
 800fa0a:	e7d2      	b.n	800f9b2 <_vfiprintf_r+0xe2>
 800fa0c:	9b03      	ldr	r3, [sp, #12]
 800fa0e:	1d19      	adds	r1, r3, #4
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	9103      	str	r1, [sp, #12]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	bfbb      	ittet	lt
 800fa18:	425b      	neglt	r3, r3
 800fa1a:	f042 0202 	orrlt.w	r2, r2, #2
 800fa1e:	9307      	strge	r3, [sp, #28]
 800fa20:	9307      	strlt	r3, [sp, #28]
 800fa22:	bfb8      	it	lt
 800fa24:	9204      	strlt	r2, [sp, #16]
 800fa26:	7823      	ldrb	r3, [r4, #0]
 800fa28:	2b2e      	cmp	r3, #46	; 0x2e
 800fa2a:	d10c      	bne.n	800fa46 <_vfiprintf_r+0x176>
 800fa2c:	7863      	ldrb	r3, [r4, #1]
 800fa2e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa30:	d135      	bne.n	800fa9e <_vfiprintf_r+0x1ce>
 800fa32:	9b03      	ldr	r3, [sp, #12]
 800fa34:	1d1a      	adds	r2, r3, #4
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	9203      	str	r2, [sp, #12]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	bfb8      	it	lt
 800fa3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fa42:	3402      	adds	r4, #2
 800fa44:	9305      	str	r3, [sp, #20]
 800fa46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb2c <_vfiprintf_r+0x25c>
 800fa4a:	7821      	ldrb	r1, [r4, #0]
 800fa4c:	2203      	movs	r2, #3
 800fa4e:	4650      	mov	r0, sl
 800fa50:	f7f0 fbe6 	bl	8000220 <memchr>
 800fa54:	b140      	cbz	r0, 800fa68 <_vfiprintf_r+0x198>
 800fa56:	2340      	movs	r3, #64	; 0x40
 800fa58:	eba0 000a 	sub.w	r0, r0, sl
 800fa5c:	fa03 f000 	lsl.w	r0, r3, r0
 800fa60:	9b04      	ldr	r3, [sp, #16]
 800fa62:	4303      	orrs	r3, r0
 800fa64:	3401      	adds	r4, #1
 800fa66:	9304      	str	r3, [sp, #16]
 800fa68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa6c:	482c      	ldr	r0, [pc, #176]	; (800fb20 <_vfiprintf_r+0x250>)
 800fa6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa72:	2206      	movs	r2, #6
 800fa74:	f7f0 fbd4 	bl	8000220 <memchr>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d03f      	beq.n	800fafc <_vfiprintf_r+0x22c>
 800fa7c:	4b29      	ldr	r3, [pc, #164]	; (800fb24 <_vfiprintf_r+0x254>)
 800fa7e:	bb1b      	cbnz	r3, 800fac8 <_vfiprintf_r+0x1f8>
 800fa80:	9b03      	ldr	r3, [sp, #12]
 800fa82:	3307      	adds	r3, #7
 800fa84:	f023 0307 	bic.w	r3, r3, #7
 800fa88:	3308      	adds	r3, #8
 800fa8a:	9303      	str	r3, [sp, #12]
 800fa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa8e:	443b      	add	r3, r7
 800fa90:	9309      	str	r3, [sp, #36]	; 0x24
 800fa92:	e767      	b.n	800f964 <_vfiprintf_r+0x94>
 800fa94:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa98:	460c      	mov	r4, r1
 800fa9a:	2001      	movs	r0, #1
 800fa9c:	e7a5      	b.n	800f9ea <_vfiprintf_r+0x11a>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	3401      	adds	r4, #1
 800faa2:	9305      	str	r3, [sp, #20]
 800faa4:	4619      	mov	r1, r3
 800faa6:	f04f 0c0a 	mov.w	ip, #10
 800faaa:	4620      	mov	r0, r4
 800faac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fab0:	3a30      	subs	r2, #48	; 0x30
 800fab2:	2a09      	cmp	r2, #9
 800fab4:	d903      	bls.n	800fabe <_vfiprintf_r+0x1ee>
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d0c5      	beq.n	800fa46 <_vfiprintf_r+0x176>
 800faba:	9105      	str	r1, [sp, #20]
 800fabc:	e7c3      	b.n	800fa46 <_vfiprintf_r+0x176>
 800fabe:	fb0c 2101 	mla	r1, ip, r1, r2
 800fac2:	4604      	mov	r4, r0
 800fac4:	2301      	movs	r3, #1
 800fac6:	e7f0      	b.n	800faaa <_vfiprintf_r+0x1da>
 800fac8:	ab03      	add	r3, sp, #12
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	462a      	mov	r2, r5
 800face:	4b16      	ldr	r3, [pc, #88]	; (800fb28 <_vfiprintf_r+0x258>)
 800fad0:	a904      	add	r1, sp, #16
 800fad2:	4630      	mov	r0, r6
 800fad4:	f7fc f91e 	bl	800bd14 <_printf_float>
 800fad8:	4607      	mov	r7, r0
 800fada:	1c78      	adds	r0, r7, #1
 800fadc:	d1d6      	bne.n	800fa8c <_vfiprintf_r+0x1bc>
 800fade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fae0:	07d9      	lsls	r1, r3, #31
 800fae2:	d405      	bmi.n	800faf0 <_vfiprintf_r+0x220>
 800fae4:	89ab      	ldrh	r3, [r5, #12]
 800fae6:	059a      	lsls	r2, r3, #22
 800fae8:	d402      	bmi.n	800faf0 <_vfiprintf_r+0x220>
 800faea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faec:	f7ff f88e 	bl	800ec0c <__retarget_lock_release_recursive>
 800faf0:	89ab      	ldrh	r3, [r5, #12]
 800faf2:	065b      	lsls	r3, r3, #25
 800faf4:	f53f af12 	bmi.w	800f91c <_vfiprintf_r+0x4c>
 800faf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fafa:	e711      	b.n	800f920 <_vfiprintf_r+0x50>
 800fafc:	ab03      	add	r3, sp, #12
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	462a      	mov	r2, r5
 800fb02:	4b09      	ldr	r3, [pc, #36]	; (800fb28 <_vfiprintf_r+0x258>)
 800fb04:	a904      	add	r1, sp, #16
 800fb06:	4630      	mov	r0, r6
 800fb08:	f7fc fba8 	bl	800c25c <_printf_i>
 800fb0c:	e7e4      	b.n	800fad8 <_vfiprintf_r+0x208>
 800fb0e:	bf00      	nop
 800fb10:	08011c04 	.word	0x08011c04
 800fb14:	08011c24 	.word	0x08011c24
 800fb18:	08011be4 	.word	0x08011be4
 800fb1c:	08011e1c 	.word	0x08011e1c
 800fb20:	08011e26 	.word	0x08011e26
 800fb24:	0800bd15 	.word	0x0800bd15
 800fb28:	0800f8ab 	.word	0x0800f8ab
 800fb2c:	08011e22 	.word	0x08011e22

0800fb30 <nan>:
 800fb30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fb38 <nan+0x8>
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	00000000 	.word	0x00000000
 800fb3c:	7ff80000 	.word	0x7ff80000

0800fb40 <_sbrk_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4d06      	ldr	r5, [pc, #24]	; (800fb5c <_sbrk_r+0x1c>)
 800fb44:	2300      	movs	r3, #0
 800fb46:	4604      	mov	r4, r0
 800fb48:	4608      	mov	r0, r1
 800fb4a:	602b      	str	r3, [r5, #0]
 800fb4c:	f7f6 fe3a 	bl	80067c4 <_sbrk>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d102      	bne.n	800fb5a <_sbrk_r+0x1a>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	b103      	cbz	r3, 800fb5a <_sbrk_r+0x1a>
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	bd38      	pop	{r3, r4, r5, pc}
 800fb5c:	200096a0 	.word	0x200096a0

0800fb60 <__sread>:
 800fb60:	b510      	push	{r4, lr}
 800fb62:	460c      	mov	r4, r1
 800fb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb68:	f000 f8f0 	bl	800fd4c <_read_r>
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	bfab      	itete	ge
 800fb70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb72:	89a3      	ldrhlt	r3, [r4, #12]
 800fb74:	181b      	addge	r3, r3, r0
 800fb76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb7a:	bfac      	ite	ge
 800fb7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb7e:	81a3      	strhlt	r3, [r4, #12]
 800fb80:	bd10      	pop	{r4, pc}

0800fb82 <__swrite>:
 800fb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb86:	461f      	mov	r7, r3
 800fb88:	898b      	ldrh	r3, [r1, #12]
 800fb8a:	05db      	lsls	r3, r3, #23
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	460c      	mov	r4, r1
 800fb90:	4616      	mov	r6, r2
 800fb92:	d505      	bpl.n	800fba0 <__swrite+0x1e>
 800fb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb98:	2302      	movs	r3, #2
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f000 f8b8 	bl	800fd10 <_lseek_r>
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbaa:	81a3      	strh	r3, [r4, #12]
 800fbac:	4632      	mov	r2, r6
 800fbae:	463b      	mov	r3, r7
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb6:	f000 b837 	b.w	800fc28 <_write_r>

0800fbba <__sseek>:
 800fbba:	b510      	push	{r4, lr}
 800fbbc:	460c      	mov	r4, r1
 800fbbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc2:	f000 f8a5 	bl	800fd10 <_lseek_r>
 800fbc6:	1c43      	adds	r3, r0, #1
 800fbc8:	89a3      	ldrh	r3, [r4, #12]
 800fbca:	bf15      	itete	ne
 800fbcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800fbce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fbd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fbd6:	81a3      	strheq	r3, [r4, #12]
 800fbd8:	bf18      	it	ne
 800fbda:	81a3      	strhne	r3, [r4, #12]
 800fbdc:	bd10      	pop	{r4, pc}

0800fbde <__sclose>:
 800fbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbe2:	f000 b851 	b.w	800fc88 <_close_r>

0800fbe6 <strncmp>:
 800fbe6:	b510      	push	{r4, lr}
 800fbe8:	b17a      	cbz	r2, 800fc0a <strncmp+0x24>
 800fbea:	4603      	mov	r3, r0
 800fbec:	3901      	subs	r1, #1
 800fbee:	1884      	adds	r4, r0, r2
 800fbf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fbf8:	4290      	cmp	r0, r2
 800fbfa:	d101      	bne.n	800fc00 <strncmp+0x1a>
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	d101      	bne.n	800fc04 <strncmp+0x1e>
 800fc00:	1a80      	subs	r0, r0, r2
 800fc02:	bd10      	pop	{r4, pc}
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d1f3      	bne.n	800fbf0 <strncmp+0xa>
 800fc08:	e7fa      	b.n	800fc00 <strncmp+0x1a>
 800fc0a:	4610      	mov	r0, r2
 800fc0c:	e7f9      	b.n	800fc02 <strncmp+0x1c>

0800fc0e <__ascii_wctomb>:
 800fc0e:	b149      	cbz	r1, 800fc24 <__ascii_wctomb+0x16>
 800fc10:	2aff      	cmp	r2, #255	; 0xff
 800fc12:	bf85      	ittet	hi
 800fc14:	238a      	movhi	r3, #138	; 0x8a
 800fc16:	6003      	strhi	r3, [r0, #0]
 800fc18:	700a      	strbls	r2, [r1, #0]
 800fc1a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fc1e:	bf98      	it	ls
 800fc20:	2001      	movls	r0, #1
 800fc22:	4770      	bx	lr
 800fc24:	4608      	mov	r0, r1
 800fc26:	4770      	bx	lr

0800fc28 <_write_r>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	4d07      	ldr	r5, [pc, #28]	; (800fc48 <_write_r+0x20>)
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	4608      	mov	r0, r1
 800fc30:	4611      	mov	r1, r2
 800fc32:	2200      	movs	r2, #0
 800fc34:	602a      	str	r2, [r5, #0]
 800fc36:	461a      	mov	r2, r3
 800fc38:	f7f6 fd73 	bl	8006722 <_write>
 800fc3c:	1c43      	adds	r3, r0, #1
 800fc3e:	d102      	bne.n	800fc46 <_write_r+0x1e>
 800fc40:	682b      	ldr	r3, [r5, #0]
 800fc42:	b103      	cbz	r3, 800fc46 <_write_r+0x1e>
 800fc44:	6023      	str	r3, [r4, #0]
 800fc46:	bd38      	pop	{r3, r4, r5, pc}
 800fc48:	200096a0 	.word	0x200096a0

0800fc4c <__assert_func>:
 800fc4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc4e:	4614      	mov	r4, r2
 800fc50:	461a      	mov	r2, r3
 800fc52:	4b09      	ldr	r3, [pc, #36]	; (800fc78 <__assert_func+0x2c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4605      	mov	r5, r0
 800fc58:	68d8      	ldr	r0, [r3, #12]
 800fc5a:	b14c      	cbz	r4, 800fc70 <__assert_func+0x24>
 800fc5c:	4b07      	ldr	r3, [pc, #28]	; (800fc7c <__assert_func+0x30>)
 800fc5e:	9100      	str	r1, [sp, #0]
 800fc60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc64:	4906      	ldr	r1, [pc, #24]	; (800fc80 <__assert_func+0x34>)
 800fc66:	462b      	mov	r3, r5
 800fc68:	f000 f81e 	bl	800fca8 <fiprintf>
 800fc6c:	f000 f880 	bl	800fd70 <abort>
 800fc70:	4b04      	ldr	r3, [pc, #16]	; (800fc84 <__assert_func+0x38>)
 800fc72:	461c      	mov	r4, r3
 800fc74:	e7f3      	b.n	800fc5e <__assert_func+0x12>
 800fc76:	bf00      	nop
 800fc78:	2000004c 	.word	0x2000004c
 800fc7c:	08011e2d 	.word	0x08011e2d
 800fc80:	08011e3a 	.word	0x08011e3a
 800fc84:	08011e68 	.word	0x08011e68

0800fc88 <_close_r>:
 800fc88:	b538      	push	{r3, r4, r5, lr}
 800fc8a:	4d06      	ldr	r5, [pc, #24]	; (800fca4 <_close_r+0x1c>)
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	4604      	mov	r4, r0
 800fc90:	4608      	mov	r0, r1
 800fc92:	602b      	str	r3, [r5, #0]
 800fc94:	f7f6 fd61 	bl	800675a <_close>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d102      	bne.n	800fca2 <_close_r+0x1a>
 800fc9c:	682b      	ldr	r3, [r5, #0]
 800fc9e:	b103      	cbz	r3, 800fca2 <_close_r+0x1a>
 800fca0:	6023      	str	r3, [r4, #0]
 800fca2:	bd38      	pop	{r3, r4, r5, pc}
 800fca4:	200096a0 	.word	0x200096a0

0800fca8 <fiprintf>:
 800fca8:	b40e      	push	{r1, r2, r3}
 800fcaa:	b503      	push	{r0, r1, lr}
 800fcac:	4601      	mov	r1, r0
 800fcae:	ab03      	add	r3, sp, #12
 800fcb0:	4805      	ldr	r0, [pc, #20]	; (800fcc8 <fiprintf+0x20>)
 800fcb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcb6:	6800      	ldr	r0, [r0, #0]
 800fcb8:	9301      	str	r3, [sp, #4]
 800fcba:	f7ff fe09 	bl	800f8d0 <_vfiprintf_r>
 800fcbe:	b002      	add	sp, #8
 800fcc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcc4:	b003      	add	sp, #12
 800fcc6:	4770      	bx	lr
 800fcc8:	2000004c 	.word	0x2000004c

0800fccc <_fstat_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d07      	ldr	r5, [pc, #28]	; (800fcec <_fstat_r+0x20>)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	602b      	str	r3, [r5, #0]
 800fcda:	f7f6 fd4a 	bl	8006772 <_fstat>
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	d102      	bne.n	800fce8 <_fstat_r+0x1c>
 800fce2:	682b      	ldr	r3, [r5, #0]
 800fce4:	b103      	cbz	r3, 800fce8 <_fstat_r+0x1c>
 800fce6:	6023      	str	r3, [r4, #0]
 800fce8:	bd38      	pop	{r3, r4, r5, pc}
 800fcea:	bf00      	nop
 800fcec:	200096a0 	.word	0x200096a0

0800fcf0 <_isatty_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4d06      	ldr	r5, [pc, #24]	; (800fd0c <_isatty_r+0x1c>)
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	4608      	mov	r0, r1
 800fcfa:	602b      	str	r3, [r5, #0]
 800fcfc:	f7f6 fd49 	bl	8006792 <_isatty>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_isatty_r+0x1a>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_isatty_r+0x1a>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	200096a0 	.word	0x200096a0

0800fd10 <_lseek_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4d07      	ldr	r5, [pc, #28]	; (800fd30 <_lseek_r+0x20>)
 800fd14:	4604      	mov	r4, r0
 800fd16:	4608      	mov	r0, r1
 800fd18:	4611      	mov	r1, r2
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	602a      	str	r2, [r5, #0]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	f7f6 fd42 	bl	80067a8 <_lseek>
 800fd24:	1c43      	adds	r3, r0, #1
 800fd26:	d102      	bne.n	800fd2e <_lseek_r+0x1e>
 800fd28:	682b      	ldr	r3, [r5, #0]
 800fd2a:	b103      	cbz	r3, 800fd2e <_lseek_r+0x1e>
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	bd38      	pop	{r3, r4, r5, pc}
 800fd30:	200096a0 	.word	0x200096a0

0800fd34 <__malloc_lock>:
 800fd34:	4801      	ldr	r0, [pc, #4]	; (800fd3c <__malloc_lock+0x8>)
 800fd36:	f7fe bf68 	b.w	800ec0a <__retarget_lock_acquire_recursive>
 800fd3a:	bf00      	nop
 800fd3c:	20009694 	.word	0x20009694

0800fd40 <__malloc_unlock>:
 800fd40:	4801      	ldr	r0, [pc, #4]	; (800fd48 <__malloc_unlock+0x8>)
 800fd42:	f7fe bf63 	b.w	800ec0c <__retarget_lock_release_recursive>
 800fd46:	bf00      	nop
 800fd48:	20009694 	.word	0x20009694

0800fd4c <_read_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4d07      	ldr	r5, [pc, #28]	; (800fd6c <_read_r+0x20>)
 800fd50:	4604      	mov	r4, r0
 800fd52:	4608      	mov	r0, r1
 800fd54:	4611      	mov	r1, r2
 800fd56:	2200      	movs	r2, #0
 800fd58:	602a      	str	r2, [r5, #0]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	f7f6 fcc4 	bl	80066e8 <_read>
 800fd60:	1c43      	adds	r3, r0, #1
 800fd62:	d102      	bne.n	800fd6a <_read_r+0x1e>
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	b103      	cbz	r3, 800fd6a <_read_r+0x1e>
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	bd38      	pop	{r3, r4, r5, pc}
 800fd6c:	200096a0 	.word	0x200096a0

0800fd70 <abort>:
 800fd70:	b508      	push	{r3, lr}
 800fd72:	2006      	movs	r0, #6
 800fd74:	f000 f82c 	bl	800fdd0 <raise>
 800fd78:	2001      	movs	r0, #1
 800fd7a:	f7f6 fcab 	bl	80066d4 <_exit>

0800fd7e <_raise_r>:
 800fd7e:	291f      	cmp	r1, #31
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4604      	mov	r4, r0
 800fd84:	460d      	mov	r5, r1
 800fd86:	d904      	bls.n	800fd92 <_raise_r+0x14>
 800fd88:	2316      	movs	r3, #22
 800fd8a:	6003      	str	r3, [r0, #0]
 800fd8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd90:	bd38      	pop	{r3, r4, r5, pc}
 800fd92:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd94:	b112      	cbz	r2, 800fd9c <_raise_r+0x1e>
 800fd96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd9a:	b94b      	cbnz	r3, 800fdb0 <_raise_r+0x32>
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f000 f831 	bl	800fe04 <_getpid_r>
 800fda2:	462a      	mov	r2, r5
 800fda4:	4601      	mov	r1, r0
 800fda6:	4620      	mov	r0, r4
 800fda8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdac:	f000 b818 	b.w	800fde0 <_kill_r>
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d00a      	beq.n	800fdca <_raise_r+0x4c>
 800fdb4:	1c59      	adds	r1, r3, #1
 800fdb6:	d103      	bne.n	800fdc0 <_raise_r+0x42>
 800fdb8:	2316      	movs	r3, #22
 800fdba:	6003      	str	r3, [r0, #0]
 800fdbc:	2001      	movs	r0, #1
 800fdbe:	e7e7      	b.n	800fd90 <_raise_r+0x12>
 800fdc0:	2400      	movs	r4, #0
 800fdc2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	4798      	blx	r3
 800fdca:	2000      	movs	r0, #0
 800fdcc:	e7e0      	b.n	800fd90 <_raise_r+0x12>
	...

0800fdd0 <raise>:
 800fdd0:	4b02      	ldr	r3, [pc, #8]	; (800fddc <raise+0xc>)
 800fdd2:	4601      	mov	r1, r0
 800fdd4:	6818      	ldr	r0, [r3, #0]
 800fdd6:	f7ff bfd2 	b.w	800fd7e <_raise_r>
 800fdda:	bf00      	nop
 800fddc:	2000004c 	.word	0x2000004c

0800fde0 <_kill_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d07      	ldr	r5, [pc, #28]	; (800fe00 <_kill_r+0x20>)
 800fde4:	2300      	movs	r3, #0
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	4611      	mov	r1, r2
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	f7f6 fc61 	bl	80066b4 <_kill>
 800fdf2:	1c43      	adds	r3, r0, #1
 800fdf4:	d102      	bne.n	800fdfc <_kill_r+0x1c>
 800fdf6:	682b      	ldr	r3, [r5, #0]
 800fdf8:	b103      	cbz	r3, 800fdfc <_kill_r+0x1c>
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	bf00      	nop
 800fe00:	200096a0 	.word	0x200096a0

0800fe04 <_getpid_r>:
 800fe04:	f7f6 bc4e 	b.w	80066a4 <_getpid>

0800fe08 <round>:
 800fe08:	ec51 0b10 	vmov	r0, r1, d0
 800fe0c:	b570      	push	{r4, r5, r6, lr}
 800fe0e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800fe12:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800fe16:	2c13      	cmp	r4, #19
 800fe18:	ee10 2a10 	vmov	r2, s0
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	dc19      	bgt.n	800fe54 <round+0x4c>
 800fe20:	2c00      	cmp	r4, #0
 800fe22:	da09      	bge.n	800fe38 <round+0x30>
 800fe24:	3401      	adds	r4, #1
 800fe26:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fe2a:	d103      	bne.n	800fe34 <round+0x2c>
 800fe2c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fe30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe34:	2200      	movs	r2, #0
 800fe36:	e028      	b.n	800fe8a <round+0x82>
 800fe38:	4d15      	ldr	r5, [pc, #84]	; (800fe90 <round+0x88>)
 800fe3a:	4125      	asrs	r5, r4
 800fe3c:	ea01 0605 	and.w	r6, r1, r5
 800fe40:	4332      	orrs	r2, r6
 800fe42:	d00e      	beq.n	800fe62 <round+0x5a>
 800fe44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fe48:	fa42 f404 	asr.w	r4, r2, r4
 800fe4c:	4423      	add	r3, r4
 800fe4e:	ea23 0305 	bic.w	r3, r3, r5
 800fe52:	e7ef      	b.n	800fe34 <round+0x2c>
 800fe54:	2c33      	cmp	r4, #51	; 0x33
 800fe56:	dd07      	ble.n	800fe68 <round+0x60>
 800fe58:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fe5c:	d101      	bne.n	800fe62 <round+0x5a>
 800fe5e:	f7f0 fa35 	bl	80002cc <__adddf3>
 800fe62:	ec41 0b10 	vmov	d0, r0, r1
 800fe66:	bd70      	pop	{r4, r5, r6, pc}
 800fe68:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800fe6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fe70:	40f5      	lsrs	r5, r6
 800fe72:	4228      	tst	r0, r5
 800fe74:	d0f5      	beq.n	800fe62 <round+0x5a>
 800fe76:	2101      	movs	r1, #1
 800fe78:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fe7c:	fa01 f404 	lsl.w	r4, r1, r4
 800fe80:	1912      	adds	r2, r2, r4
 800fe82:	bf28      	it	cs
 800fe84:	185b      	addcs	r3, r3, r1
 800fe86:	ea22 0205 	bic.w	r2, r2, r5
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	4610      	mov	r0, r2
 800fe8e:	e7e8      	b.n	800fe62 <round+0x5a>
 800fe90:	000fffff 	.word	0x000fffff

0800fe94 <fmaxf>:
 800fe94:	b508      	push	{r3, lr}
 800fe96:	ed2d 8b02 	vpush	{d8}
 800fe9a:	eeb0 8a40 	vmov.f32	s16, s0
 800fe9e:	eef0 8a60 	vmov.f32	s17, s1
 800fea2:	f000 f82d 	bl	800ff00 <__fpclassifyf>
 800fea6:	b148      	cbz	r0, 800febc <fmaxf+0x28>
 800fea8:	eeb0 0a68 	vmov.f32	s0, s17
 800feac:	f000 f828 	bl	800ff00 <__fpclassifyf>
 800feb0:	b130      	cbz	r0, 800fec0 <fmaxf+0x2c>
 800feb2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800feb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feba:	dc01      	bgt.n	800fec0 <fmaxf+0x2c>
 800febc:	eeb0 8a68 	vmov.f32	s16, s17
 800fec0:	eeb0 0a48 	vmov.f32	s0, s16
 800fec4:	ecbd 8b02 	vpop	{d8}
 800fec8:	bd08      	pop	{r3, pc}

0800feca <fminf>:
 800feca:	b508      	push	{r3, lr}
 800fecc:	ed2d 8b02 	vpush	{d8}
 800fed0:	eeb0 8a40 	vmov.f32	s16, s0
 800fed4:	eef0 8a60 	vmov.f32	s17, s1
 800fed8:	f000 f812 	bl	800ff00 <__fpclassifyf>
 800fedc:	b148      	cbz	r0, 800fef2 <fminf+0x28>
 800fede:	eeb0 0a68 	vmov.f32	s0, s17
 800fee2:	f000 f80d 	bl	800ff00 <__fpclassifyf>
 800fee6:	b130      	cbz	r0, 800fef6 <fminf+0x2c>
 800fee8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800feec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef0:	d401      	bmi.n	800fef6 <fminf+0x2c>
 800fef2:	eeb0 8a68 	vmov.f32	s16, s17
 800fef6:	eeb0 0a48 	vmov.f32	s0, s16
 800fefa:	ecbd 8b02 	vpop	{d8}
 800fefe:	bd08      	pop	{r3, pc}

0800ff00 <__fpclassifyf>:
 800ff00:	ee10 3a10 	vmov	r3, s0
 800ff04:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800ff08:	d00d      	beq.n	800ff26 <__fpclassifyf+0x26>
 800ff0a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800ff0e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ff12:	d30a      	bcc.n	800ff2a <__fpclassifyf+0x2a>
 800ff14:	4b07      	ldr	r3, [pc, #28]	; (800ff34 <__fpclassifyf+0x34>)
 800ff16:	1e42      	subs	r2, r0, #1
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d908      	bls.n	800ff2e <__fpclassifyf+0x2e>
 800ff1c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800ff20:	4258      	negs	r0, r3
 800ff22:	4158      	adcs	r0, r3
 800ff24:	4770      	bx	lr
 800ff26:	2002      	movs	r0, #2
 800ff28:	4770      	bx	lr
 800ff2a:	2004      	movs	r0, #4
 800ff2c:	4770      	bx	lr
 800ff2e:	2003      	movs	r0, #3
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	007ffffe 	.word	0x007ffffe

0800ff38 <exp>:
 800ff38:	b538      	push	{r3, r4, r5, lr}
 800ff3a:	ed2d 8b02 	vpush	{d8}
 800ff3e:	ec55 4b10 	vmov	r4, r5, d0
 800ff42:	f000 f881 	bl	8010048 <__ieee754_exp>
 800ff46:	eeb0 8a40 	vmov.f32	s16, s0
 800ff4a:	eef0 8a60 	vmov.f32	s17, s1
 800ff4e:	ec45 4b10 	vmov	d0, r4, r5
 800ff52:	f000 fab0 	bl	80104b6 <finite>
 800ff56:	b168      	cbz	r0, 800ff74 <exp+0x3c>
 800ff58:	a317      	add	r3, pc, #92	; (adr r3, 800ffb8 <exp+0x80>)
 800ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5e:	4620      	mov	r0, r4
 800ff60:	4629      	mov	r1, r5
 800ff62:	f7f0 fdf9 	bl	8000b58 <__aeabi_dcmpgt>
 800ff66:	b160      	cbz	r0, 800ff82 <exp+0x4a>
 800ff68:	f7fb fdf4 	bl	800bb54 <__errno>
 800ff6c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800ffa8 <exp+0x70>
 800ff70:	2322      	movs	r3, #34	; 0x22
 800ff72:	6003      	str	r3, [r0, #0]
 800ff74:	eeb0 0a48 	vmov.f32	s0, s16
 800ff78:	eef0 0a68 	vmov.f32	s1, s17
 800ff7c:	ecbd 8b02 	vpop	{d8}
 800ff80:	bd38      	pop	{r3, r4, r5, pc}
 800ff82:	a30f      	add	r3, pc, #60	; (adr r3, 800ffc0 <exp+0x88>)
 800ff84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff88:	4620      	mov	r0, r4
 800ff8a:	4629      	mov	r1, r5
 800ff8c:	f7f0 fdc6 	bl	8000b1c <__aeabi_dcmplt>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0ef      	beq.n	800ff74 <exp+0x3c>
 800ff94:	f7fb fdde 	bl	800bb54 <__errno>
 800ff98:	2322      	movs	r3, #34	; 0x22
 800ff9a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800ffb0 <exp+0x78>
 800ff9e:	6003      	str	r3, [r0, #0]
 800ffa0:	e7e8      	b.n	800ff74 <exp+0x3c>
 800ffa2:	bf00      	nop
 800ffa4:	f3af 8000 	nop.w
 800ffa8:	00000000 	.word	0x00000000
 800ffac:	7ff00000 	.word	0x7ff00000
	...
 800ffb8:	fefa39ef 	.word	0xfefa39ef
 800ffbc:	40862e42 	.word	0x40862e42
 800ffc0:	d52d3051 	.word	0xd52d3051
 800ffc4:	c0874910 	.word	0xc0874910

0800ffc8 <fmodf>:
 800ffc8:	b508      	push	{r3, lr}
 800ffca:	ed2d 8b02 	vpush	{d8}
 800ffce:	eef0 8a40 	vmov.f32	s17, s0
 800ffd2:	eeb0 8a60 	vmov.f32	s16, s1
 800ffd6:	f000 f9b9 	bl	801034c <__ieee754_fmodf>
 800ffda:	eef4 8a48 	vcmp.f32	s17, s16
 800ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe2:	d60c      	bvs.n	800fffe <fmodf+0x36>
 800ffe4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010004 <fmodf+0x3c>
 800ffe8:	eeb4 8a68 	vcmp.f32	s16, s17
 800ffec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff0:	d105      	bne.n	800fffe <fmodf+0x36>
 800fff2:	f7fb fdaf 	bl	800bb54 <__errno>
 800fff6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fffa:	2321      	movs	r3, #33	; 0x21
 800fffc:	6003      	str	r3, [r0, #0]
 800fffe:	ecbd 8b02 	vpop	{d8}
 8010002:	bd08      	pop	{r3, pc}
 8010004:	00000000 	.word	0x00000000

08010008 <sqrtf>:
 8010008:	b508      	push	{r3, lr}
 801000a:	ed2d 8b02 	vpush	{d8}
 801000e:	eeb0 8a40 	vmov.f32	s16, s0
 8010012:	f000 fa1d 	bl	8010450 <__ieee754_sqrtf>
 8010016:	eeb4 8a48 	vcmp.f32	s16, s16
 801001a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801001e:	d60c      	bvs.n	801003a <sqrtf+0x32>
 8010020:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010040 <sqrtf+0x38>
 8010024:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002c:	d505      	bpl.n	801003a <sqrtf+0x32>
 801002e:	f7fb fd91 	bl	800bb54 <__errno>
 8010032:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010036:	2321      	movs	r3, #33	; 0x21
 8010038:	6003      	str	r3, [r0, #0]
 801003a:	ecbd 8b02 	vpop	{d8}
 801003e:	bd08      	pop	{r3, pc}
	...

08010048 <__ieee754_exp>:
 8010048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801004c:	ec55 4b10 	vmov	r4, r5, d0
 8010050:	49b5      	ldr	r1, [pc, #724]	; (8010328 <__ieee754_exp+0x2e0>)
 8010052:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010056:	428b      	cmp	r3, r1
 8010058:	ed2d 8b04 	vpush	{d8-d9}
 801005c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010060:	d93d      	bls.n	80100de <__ieee754_exp+0x96>
 8010062:	49b2      	ldr	r1, [pc, #712]	; (801032c <__ieee754_exp+0x2e4>)
 8010064:	428b      	cmp	r3, r1
 8010066:	d918      	bls.n	801009a <__ieee754_exp+0x52>
 8010068:	ee10 3a10 	vmov	r3, s0
 801006c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8010070:	4313      	orrs	r3, r2
 8010072:	d009      	beq.n	8010088 <__ieee754_exp+0x40>
 8010074:	ee10 2a10 	vmov	r2, s0
 8010078:	462b      	mov	r3, r5
 801007a:	4620      	mov	r0, r4
 801007c:	4629      	mov	r1, r5
 801007e:	f7f0 f925 	bl	80002cc <__adddf3>
 8010082:	4604      	mov	r4, r0
 8010084:	460d      	mov	r5, r1
 8010086:	e002      	b.n	801008e <__ieee754_exp+0x46>
 8010088:	b10e      	cbz	r6, 801008e <__ieee754_exp+0x46>
 801008a:	2400      	movs	r4, #0
 801008c:	2500      	movs	r5, #0
 801008e:	ecbd 8b04 	vpop	{d8-d9}
 8010092:	ec45 4b10 	vmov	d0, r4, r5
 8010096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801009a:	a38d      	add	r3, pc, #564	; (adr r3, 80102d0 <__ieee754_exp+0x288>)
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	ee10 0a10 	vmov	r0, s0
 80100a4:	4629      	mov	r1, r5
 80100a6:	f7f0 fd57 	bl	8000b58 <__aeabi_dcmpgt>
 80100aa:	4607      	mov	r7, r0
 80100ac:	b130      	cbz	r0, 80100bc <__ieee754_exp+0x74>
 80100ae:	ecbd 8b04 	vpop	{d8-d9}
 80100b2:	2000      	movs	r0, #0
 80100b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b8:	f000 b9f4 	b.w	80104a4 <__math_oflow>
 80100bc:	a386      	add	r3, pc, #536	; (adr r3, 80102d8 <__ieee754_exp+0x290>)
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	4620      	mov	r0, r4
 80100c4:	4629      	mov	r1, r5
 80100c6:	f7f0 fd29 	bl	8000b1c <__aeabi_dcmplt>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	f000 808b 	beq.w	80101e6 <__ieee754_exp+0x19e>
 80100d0:	ecbd 8b04 	vpop	{d8-d9}
 80100d4:	4638      	mov	r0, r7
 80100d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100da:	f000 b9da 	b.w	8010492 <__math_uflow>
 80100de:	4a94      	ldr	r2, [pc, #592]	; (8010330 <__ieee754_exp+0x2e8>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	f240 80ac 	bls.w	801023e <__ieee754_exp+0x1f6>
 80100e6:	4a93      	ldr	r2, [pc, #588]	; (8010334 <__ieee754_exp+0x2ec>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d87c      	bhi.n	80101e6 <__ieee754_exp+0x19e>
 80100ec:	4b92      	ldr	r3, [pc, #584]	; (8010338 <__ieee754_exp+0x2f0>)
 80100ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f6:	ee10 0a10 	vmov	r0, s0
 80100fa:	4629      	mov	r1, r5
 80100fc:	f7f0 f8e4 	bl	80002c8 <__aeabi_dsub>
 8010100:	4b8e      	ldr	r3, [pc, #568]	; (801033c <__ieee754_exp+0x2f4>)
 8010102:	00f7      	lsls	r7, r6, #3
 8010104:	443b      	add	r3, r7
 8010106:	ed93 7b00 	vldr	d7, [r3]
 801010a:	f1c6 0a01 	rsb	sl, r6, #1
 801010e:	4680      	mov	r8, r0
 8010110:	4689      	mov	r9, r1
 8010112:	ebaa 0a06 	sub.w	sl, sl, r6
 8010116:	eeb0 8a47 	vmov.f32	s16, s14
 801011a:	eef0 8a67 	vmov.f32	s17, s15
 801011e:	ec53 2b18 	vmov	r2, r3, d8
 8010122:	4640      	mov	r0, r8
 8010124:	4649      	mov	r1, r9
 8010126:	f7f0 f8cf 	bl	80002c8 <__aeabi_dsub>
 801012a:	4604      	mov	r4, r0
 801012c:	460d      	mov	r5, r1
 801012e:	4622      	mov	r2, r4
 8010130:	462b      	mov	r3, r5
 8010132:	4620      	mov	r0, r4
 8010134:	4629      	mov	r1, r5
 8010136:	f7f0 fa7f 	bl	8000638 <__aeabi_dmul>
 801013a:	a369      	add	r3, pc, #420	; (adr r3, 80102e0 <__ieee754_exp+0x298>)
 801013c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010140:	4606      	mov	r6, r0
 8010142:	460f      	mov	r7, r1
 8010144:	f7f0 fa78 	bl	8000638 <__aeabi_dmul>
 8010148:	a367      	add	r3, pc, #412	; (adr r3, 80102e8 <__ieee754_exp+0x2a0>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	f7f0 f8bb 	bl	80002c8 <__aeabi_dsub>
 8010152:	4632      	mov	r2, r6
 8010154:	463b      	mov	r3, r7
 8010156:	f7f0 fa6f 	bl	8000638 <__aeabi_dmul>
 801015a:	a365      	add	r3, pc, #404	; (adr r3, 80102f0 <__ieee754_exp+0x2a8>)
 801015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010160:	f7f0 f8b4 	bl	80002cc <__adddf3>
 8010164:	4632      	mov	r2, r6
 8010166:	463b      	mov	r3, r7
 8010168:	f7f0 fa66 	bl	8000638 <__aeabi_dmul>
 801016c:	a362      	add	r3, pc, #392	; (adr r3, 80102f8 <__ieee754_exp+0x2b0>)
 801016e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010172:	f7f0 f8a9 	bl	80002c8 <__aeabi_dsub>
 8010176:	4632      	mov	r2, r6
 8010178:	463b      	mov	r3, r7
 801017a:	f7f0 fa5d 	bl	8000638 <__aeabi_dmul>
 801017e:	a360      	add	r3, pc, #384	; (adr r3, 8010300 <__ieee754_exp+0x2b8>)
 8010180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010184:	f7f0 f8a2 	bl	80002cc <__adddf3>
 8010188:	4632      	mov	r2, r6
 801018a:	463b      	mov	r3, r7
 801018c:	f7f0 fa54 	bl	8000638 <__aeabi_dmul>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4620      	mov	r0, r4
 8010196:	4629      	mov	r1, r5
 8010198:	f7f0 f896 	bl	80002c8 <__aeabi_dsub>
 801019c:	4602      	mov	r2, r0
 801019e:	460b      	mov	r3, r1
 80101a0:	4606      	mov	r6, r0
 80101a2:	460f      	mov	r7, r1
 80101a4:	4620      	mov	r0, r4
 80101a6:	4629      	mov	r1, r5
 80101a8:	f7f0 fa46 	bl	8000638 <__aeabi_dmul>
 80101ac:	ec41 0b19 	vmov	d9, r0, r1
 80101b0:	f1ba 0f00 	cmp.w	sl, #0
 80101b4:	d15d      	bne.n	8010272 <__ieee754_exp+0x22a>
 80101b6:	2200      	movs	r2, #0
 80101b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101bc:	4630      	mov	r0, r6
 80101be:	4639      	mov	r1, r7
 80101c0:	f7f0 f882 	bl	80002c8 <__aeabi_dsub>
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	ec51 0b19 	vmov	r0, r1, d9
 80101cc:	f7f0 fb5e 	bl	800088c <__aeabi_ddiv>
 80101d0:	4622      	mov	r2, r4
 80101d2:	462b      	mov	r3, r5
 80101d4:	f7f0 f878 	bl	80002c8 <__aeabi_dsub>
 80101d8:	4602      	mov	r2, r0
 80101da:	460b      	mov	r3, r1
 80101dc:	2000      	movs	r0, #0
 80101de:	4958      	ldr	r1, [pc, #352]	; (8010340 <__ieee754_exp+0x2f8>)
 80101e0:	f7f0 f872 	bl	80002c8 <__aeabi_dsub>
 80101e4:	e74d      	b.n	8010082 <__ieee754_exp+0x3a>
 80101e6:	4857      	ldr	r0, [pc, #348]	; (8010344 <__ieee754_exp+0x2fc>)
 80101e8:	a347      	add	r3, pc, #284	; (adr r3, 8010308 <__ieee754_exp+0x2c0>)
 80101ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ee:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80101f2:	4629      	mov	r1, r5
 80101f4:	4620      	mov	r0, r4
 80101f6:	f7f0 fa1f 	bl	8000638 <__aeabi_dmul>
 80101fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101fe:	f7f0 f865 	bl	80002cc <__adddf3>
 8010202:	f7f0 fcc9 	bl	8000b98 <__aeabi_d2iz>
 8010206:	4682      	mov	sl, r0
 8010208:	f7f0 f9ac 	bl	8000564 <__aeabi_i2d>
 801020c:	a340      	add	r3, pc, #256	; (adr r3, 8010310 <__ieee754_exp+0x2c8>)
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	4606      	mov	r6, r0
 8010214:	460f      	mov	r7, r1
 8010216:	f7f0 fa0f 	bl	8000638 <__aeabi_dmul>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	4620      	mov	r0, r4
 8010220:	4629      	mov	r1, r5
 8010222:	f7f0 f851 	bl	80002c8 <__aeabi_dsub>
 8010226:	a33c      	add	r3, pc, #240	; (adr r3, 8010318 <__ieee754_exp+0x2d0>)
 8010228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022c:	4680      	mov	r8, r0
 801022e:	4689      	mov	r9, r1
 8010230:	4630      	mov	r0, r6
 8010232:	4639      	mov	r1, r7
 8010234:	f7f0 fa00 	bl	8000638 <__aeabi_dmul>
 8010238:	ec41 0b18 	vmov	d8, r0, r1
 801023c:	e76f      	b.n	801011e <__ieee754_exp+0xd6>
 801023e:	4a42      	ldr	r2, [pc, #264]	; (8010348 <__ieee754_exp+0x300>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d811      	bhi.n	8010268 <__ieee754_exp+0x220>
 8010244:	a336      	add	r3, pc, #216	; (adr r3, 8010320 <__ieee754_exp+0x2d8>)
 8010246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024a:	ee10 0a10 	vmov	r0, s0
 801024e:	4629      	mov	r1, r5
 8010250:	f7f0 f83c 	bl	80002cc <__adddf3>
 8010254:	4b3a      	ldr	r3, [pc, #232]	; (8010340 <__ieee754_exp+0x2f8>)
 8010256:	2200      	movs	r2, #0
 8010258:	f7f0 fc7e 	bl	8000b58 <__aeabi_dcmpgt>
 801025c:	b138      	cbz	r0, 801026e <__ieee754_exp+0x226>
 801025e:	4b38      	ldr	r3, [pc, #224]	; (8010340 <__ieee754_exp+0x2f8>)
 8010260:	2200      	movs	r2, #0
 8010262:	4620      	mov	r0, r4
 8010264:	4629      	mov	r1, r5
 8010266:	e70a      	b.n	801007e <__ieee754_exp+0x36>
 8010268:	f04f 0a00 	mov.w	sl, #0
 801026c:	e75f      	b.n	801012e <__ieee754_exp+0xe6>
 801026e:	4682      	mov	sl, r0
 8010270:	e75d      	b.n	801012e <__ieee754_exp+0xe6>
 8010272:	4632      	mov	r2, r6
 8010274:	463b      	mov	r3, r7
 8010276:	2000      	movs	r0, #0
 8010278:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801027c:	f7f0 f824 	bl	80002c8 <__aeabi_dsub>
 8010280:	4602      	mov	r2, r0
 8010282:	460b      	mov	r3, r1
 8010284:	ec51 0b19 	vmov	r0, r1, d9
 8010288:	f7f0 fb00 	bl	800088c <__aeabi_ddiv>
 801028c:	4602      	mov	r2, r0
 801028e:	460b      	mov	r3, r1
 8010290:	ec51 0b18 	vmov	r0, r1, d8
 8010294:	f7f0 f818 	bl	80002c8 <__aeabi_dsub>
 8010298:	4642      	mov	r2, r8
 801029a:	464b      	mov	r3, r9
 801029c:	f7f0 f814 	bl	80002c8 <__aeabi_dsub>
 80102a0:	4602      	mov	r2, r0
 80102a2:	460b      	mov	r3, r1
 80102a4:	2000      	movs	r0, #0
 80102a6:	4926      	ldr	r1, [pc, #152]	; (8010340 <__ieee754_exp+0x2f8>)
 80102a8:	f7f0 f80e 	bl	80002c8 <__aeabi_dsub>
 80102ac:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80102b0:	4592      	cmp	sl, r2
 80102b2:	db02      	blt.n	80102ba <__ieee754_exp+0x272>
 80102b4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80102b8:	e6e3      	b.n	8010082 <__ieee754_exp+0x3a>
 80102ba:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80102be:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80102c2:	2200      	movs	r2, #0
 80102c4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80102c8:	f7f0 f9b6 	bl	8000638 <__aeabi_dmul>
 80102cc:	e6d9      	b.n	8010082 <__ieee754_exp+0x3a>
 80102ce:	bf00      	nop
 80102d0:	fefa39ef 	.word	0xfefa39ef
 80102d4:	40862e42 	.word	0x40862e42
 80102d8:	d52d3051 	.word	0xd52d3051
 80102dc:	c0874910 	.word	0xc0874910
 80102e0:	72bea4d0 	.word	0x72bea4d0
 80102e4:	3e663769 	.word	0x3e663769
 80102e8:	c5d26bf1 	.word	0xc5d26bf1
 80102ec:	3ebbbd41 	.word	0x3ebbbd41
 80102f0:	af25de2c 	.word	0xaf25de2c
 80102f4:	3f11566a 	.word	0x3f11566a
 80102f8:	16bebd93 	.word	0x16bebd93
 80102fc:	3f66c16c 	.word	0x3f66c16c
 8010300:	5555553e 	.word	0x5555553e
 8010304:	3fc55555 	.word	0x3fc55555
 8010308:	652b82fe 	.word	0x652b82fe
 801030c:	3ff71547 	.word	0x3ff71547
 8010310:	fee00000 	.word	0xfee00000
 8010314:	3fe62e42 	.word	0x3fe62e42
 8010318:	35793c76 	.word	0x35793c76
 801031c:	3dea39ef 	.word	0x3dea39ef
 8010320:	8800759c 	.word	0x8800759c
 8010324:	7e37e43c 	.word	0x7e37e43c
 8010328:	40862e41 	.word	0x40862e41
 801032c:	7fefffff 	.word	0x7fefffff
 8010330:	3fd62e42 	.word	0x3fd62e42
 8010334:	3ff0a2b1 	.word	0x3ff0a2b1
 8010338:	08011e80 	.word	0x08011e80
 801033c:	08011e90 	.word	0x08011e90
 8010340:	3ff00000 	.word	0x3ff00000
 8010344:	08011e70 	.word	0x08011e70
 8010348:	3defffff 	.word	0x3defffff

0801034c <__ieee754_fmodf>:
 801034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034e:	ee10 5a90 	vmov	r5, s1
 8010352:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8010356:	d009      	beq.n	801036c <__ieee754_fmodf+0x20>
 8010358:	ee10 2a10 	vmov	r2, s0
 801035c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010360:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010364:	da02      	bge.n	801036c <__ieee754_fmodf+0x20>
 8010366:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801036a:	dd04      	ble.n	8010376 <__ieee754_fmodf+0x2a>
 801036c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8010370:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8010374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010376:	42a3      	cmp	r3, r4
 8010378:	dbfc      	blt.n	8010374 <__ieee754_fmodf+0x28>
 801037a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801037e:	d105      	bne.n	801038c <__ieee754_fmodf+0x40>
 8010380:	4b32      	ldr	r3, [pc, #200]	; (801044c <__ieee754_fmodf+0x100>)
 8010382:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8010386:	ed93 0a00 	vldr	s0, [r3]
 801038a:	e7f3      	b.n	8010374 <__ieee754_fmodf+0x28>
 801038c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8010390:	d13f      	bne.n	8010412 <__ieee754_fmodf+0xc6>
 8010392:	0219      	lsls	r1, r3, #8
 8010394:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8010398:	2900      	cmp	r1, #0
 801039a:	dc37      	bgt.n	801040c <__ieee754_fmodf+0xc0>
 801039c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80103a0:	d13d      	bne.n	801041e <__ieee754_fmodf+0xd2>
 80103a2:	0227      	lsls	r7, r4, #8
 80103a4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80103a8:	2f00      	cmp	r7, #0
 80103aa:	da35      	bge.n	8010418 <__ieee754_fmodf+0xcc>
 80103ac:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80103b0:	bfbb      	ittet	lt
 80103b2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80103b6:	1a12      	sublt	r2, r2, r0
 80103b8:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80103bc:	4093      	lsllt	r3, r2
 80103be:	bfa8      	it	ge
 80103c0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80103c4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80103c8:	bfb5      	itete	lt
 80103ca:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80103ce:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80103d2:	1a52      	sublt	r2, r2, r1
 80103d4:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80103d8:	bfb8      	it	lt
 80103da:	4094      	lsllt	r4, r2
 80103dc:	1a40      	subs	r0, r0, r1
 80103de:	1b1a      	subs	r2, r3, r4
 80103e0:	bb00      	cbnz	r0, 8010424 <__ieee754_fmodf+0xd8>
 80103e2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80103e6:	bf38      	it	cc
 80103e8:	4613      	movcc	r3, r2
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d0c8      	beq.n	8010380 <__ieee754_fmodf+0x34>
 80103ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80103f2:	db1f      	blt.n	8010434 <__ieee754_fmodf+0xe8>
 80103f4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80103f8:	db1f      	blt.n	801043a <__ieee754_fmodf+0xee>
 80103fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80103fe:	317f      	adds	r1, #127	; 0x7f
 8010400:	4333      	orrs	r3, r6
 8010402:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8010406:	ee00 3a10 	vmov	s0, r3
 801040a:	e7b3      	b.n	8010374 <__ieee754_fmodf+0x28>
 801040c:	3801      	subs	r0, #1
 801040e:	0049      	lsls	r1, r1, #1
 8010410:	e7c2      	b.n	8010398 <__ieee754_fmodf+0x4c>
 8010412:	15d8      	asrs	r0, r3, #23
 8010414:	387f      	subs	r0, #127	; 0x7f
 8010416:	e7c1      	b.n	801039c <__ieee754_fmodf+0x50>
 8010418:	3901      	subs	r1, #1
 801041a:	007f      	lsls	r7, r7, #1
 801041c:	e7c4      	b.n	80103a8 <__ieee754_fmodf+0x5c>
 801041e:	15e1      	asrs	r1, r4, #23
 8010420:	397f      	subs	r1, #127	; 0x7f
 8010422:	e7c3      	b.n	80103ac <__ieee754_fmodf+0x60>
 8010424:	2a00      	cmp	r2, #0
 8010426:	da02      	bge.n	801042e <__ieee754_fmodf+0xe2>
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	3801      	subs	r0, #1
 801042c:	e7d7      	b.n	80103de <__ieee754_fmodf+0x92>
 801042e:	d0a7      	beq.n	8010380 <__ieee754_fmodf+0x34>
 8010430:	0053      	lsls	r3, r2, #1
 8010432:	e7fa      	b.n	801042a <__ieee754_fmodf+0xde>
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	3901      	subs	r1, #1
 8010438:	e7d9      	b.n	80103ee <__ieee754_fmodf+0xa2>
 801043a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 801043e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8010442:	3182      	adds	r1, #130	; 0x82
 8010444:	410b      	asrs	r3, r1
 8010446:	4333      	orrs	r3, r6
 8010448:	e7dd      	b.n	8010406 <__ieee754_fmodf+0xba>
 801044a:	bf00      	nop
 801044c:	08011ea0 	.word	0x08011ea0

08010450 <__ieee754_sqrtf>:
 8010450:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010454:	4770      	bx	lr

08010456 <with_errno>:
 8010456:	b570      	push	{r4, r5, r6, lr}
 8010458:	4604      	mov	r4, r0
 801045a:	460d      	mov	r5, r1
 801045c:	4616      	mov	r6, r2
 801045e:	f7fb fb79 	bl	800bb54 <__errno>
 8010462:	4629      	mov	r1, r5
 8010464:	6006      	str	r6, [r0, #0]
 8010466:	4620      	mov	r0, r4
 8010468:	bd70      	pop	{r4, r5, r6, pc}

0801046a <xflow>:
 801046a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801046c:	4614      	mov	r4, r2
 801046e:	461d      	mov	r5, r3
 8010470:	b108      	cbz	r0, 8010476 <xflow+0xc>
 8010472:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010476:	e9cd 2300 	strd	r2, r3, [sp]
 801047a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801047e:	4620      	mov	r0, r4
 8010480:	4629      	mov	r1, r5
 8010482:	f7f0 f8d9 	bl	8000638 <__aeabi_dmul>
 8010486:	2222      	movs	r2, #34	; 0x22
 8010488:	b003      	add	sp, #12
 801048a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801048e:	f7ff bfe2 	b.w	8010456 <with_errno>

08010492 <__math_uflow>:
 8010492:	b508      	push	{r3, lr}
 8010494:	2200      	movs	r2, #0
 8010496:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801049a:	f7ff ffe6 	bl	801046a <xflow>
 801049e:	ec41 0b10 	vmov	d0, r0, r1
 80104a2:	bd08      	pop	{r3, pc}

080104a4 <__math_oflow>:
 80104a4:	b508      	push	{r3, lr}
 80104a6:	2200      	movs	r2, #0
 80104a8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80104ac:	f7ff ffdd 	bl	801046a <xflow>
 80104b0:	ec41 0b10 	vmov	d0, r0, r1
 80104b4:	bd08      	pop	{r3, pc}

080104b6 <finite>:
 80104b6:	b082      	sub	sp, #8
 80104b8:	ed8d 0b00 	vstr	d0, [sp]
 80104bc:	9801      	ldr	r0, [sp, #4]
 80104be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104c6:	0fc0      	lsrs	r0, r0, #31
 80104c8:	b002      	add	sp, #8
 80104ca:	4770      	bx	lr

080104cc <_init>:
 80104cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ce:	bf00      	nop
 80104d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104d2:	bc08      	pop	{r3}
 80104d4:	469e      	mov	lr, r3
 80104d6:	4770      	bx	lr

080104d8 <_fini>:
 80104d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104da:	bf00      	nop
 80104dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104de:	bc08      	pop	{r3}
 80104e0:	469e      	mov	lr, r3
 80104e2:	4770      	bx	lr
