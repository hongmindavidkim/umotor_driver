
motor_driver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016b0  080103c8  080103c8  000203c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a78  08011a78  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08011a78  08011a78  00021a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a80  08011a80  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a80  08011a80  00021a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a84  08011a84  00021a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009410  20000220  08011ca8  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009630  08011ca8  00039630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea09  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d7  00000000  00000000  0004ec59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00053530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  00054d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002906b  00000000  00000000  00056308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fea2  00000000  00000000  0007f373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75d9  00000000  00000000  0009f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001867ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a60  00000000  00000000  00186840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080103ac 	.word	0x080103ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	080103ac 	.word	0x080103ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001058:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_ADC1_Init+0xcc>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC1_Init+0xc8>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001072:	2200      	movs	r2, #0
 8001074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <MX_ADC1_Init+0xd0>)
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001092:	2201      	movs	r2, #1
 8001094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a6:	f005 fc5d 	bl	8006964 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010b0:	f003 fe92 	bl	8004dd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010b4:	2316      	movs	r3, #22
 80010b6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010c8:	f006 f828 	bl	800711c <HAL_ADCEx_MultiModeConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f003 fe81 	bl	8004dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010e8:	f005 fdea 	bl	8006cc0 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010f2:	f003 fe71 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000023c 	.word	0x2000023c
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_ADC2_Init+0x90>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_ADC2_Init+0x8c>)
 800113a:	2200      	movs	r2, #0
 800113c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_ADC2_Init+0x8c>)
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ADC2_Init+0x8c>)
 800115c:	2201      	movs	r2, #1
 800115e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001162:	f005 fbff 	bl	8006964 <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800116c:	f003 fe34 	bl	8004dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001170:	230b      	movs	r3, #11
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001182:	f005 fd9d 	bl	8006cc0 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800118c:	f003 fe24 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000284 	.word	0x20000284
 800119c:	40012100 	.word	0x40012100

080011a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC3_Init+0x8c>)
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_ADC3_Init+0x90>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_ADC3_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f6:	f005 fbb5 	bl	8006964 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001200:	f003 fdea 	bl	8004dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_ADC3_Init+0x8c>)
 8001216:	f005 fd53 	bl	8006cc0 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001220:	f003 fdda 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002cc 	.word	0x200002cc
 8001230:	40012200 	.word	0x40012200

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_ADC_MspInit+0x134>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d128      	bne.n	80012a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_ADC_MspInit+0x138>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_ADC_MspInit+0x138>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4833      	ldr	r0, [pc, #204]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012a2:	f006 ff6b 	bl	800817c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012a6:	e05a      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_ADC_MspInit+0x140>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ea:	2302      	movs	r3, #2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012fe:	f006 ff3d 	bl	800817c <HAL_GPIO_Init>
}
 8001302:	e02c      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_ADC_MspInit+0x144>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d127      	bne.n	800135e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_ADC_MspInit+0x138>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_ADC_MspInit+0x148>)
 800135a:	f006 ff0f 	bl	800817c <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	; 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012000 	.word	0x40012000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40012100 	.word	0x40012100
 8001378:	40012200 	.word	0x40012200
 800137c:	40020000 	.word	0x40020000

08001380 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <order_phases+0x1e8>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7c1b      	ldrb	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d108      	bne.n	80013ae <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 800139c:	4873      	ldr	r0, [pc, #460]	; (800156c <order_phases+0x1ec>)
 800139e:	f00b f879 	bl	800c494 <puts>
		cal->started = 1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001570 <order_phases+0x1f0>
 80013c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80013d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d529      	bpl.n	8001434 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80013f2:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        cal->cal_position.elec_velocity = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013fc:	461a      	mov	r2, r3
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
        controller->i_d_des = I_CAL;
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <order_phases+0x1f4>)
 8001408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001420:	332c      	adds	r3, #44	; 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f001 fe39 	bl	800309c <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
    	return;
 8001432:	e096      	b.n	8001562 <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a05 	vldr	s15, [r3, #20]
 800143a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001578 <order_phases+0x1f8>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d51d      	bpl.n	8001484 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a05 	vldr	s15, [r3, #20]
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001456:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800146e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001478:	332c      	adds	r3, #44	; 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f001 fe0d 	bl	800309c <commutate>
    	return;
 8001482:	e06e      	b.n	8001562 <order_phases+0x1e2>
    }

	reset_foc(controller);
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f001 fd21 	bl	8002ecc <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a06 	vldr	s15, [r3, #24]
 8001496:	ed97 7a05 	vldr	s14, [r7, #20]
 800149a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149e:	eef0 7ae7 	vabs.f32	s15, s15
 80014a2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800157c <order_phases+0x1fc>
 80014a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014aa:	ee16 0a90 	vmov	r0, s13
 80014ae:	f7ff f86b 	bl	8000588 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	ec43 2b10 	vmov	d0, r2, r3
 80014ba:	f00e fc15 	bl	800fce8 <round>
 80014be:	ec53 2b10 	vmov	r2, r3, d0
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb8f 	bl	8000be8 <__aeabi_d2uiz>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd07      	ble.n	80014f6 <order_phases+0x176>
		cal->phase_order = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80014ee:	4824      	ldr	r0, [pc, #144]	; (8001580 <order_phases+0x200>)
 80014f0:	f00a ffd0 	bl	800c494 <puts>
 80014f4:	e006      	b.n	8001504 <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80014fe:	4821      	ldr	r0, [pc, #132]	; (8001584 <order_phases+0x204>)
 8001500:	f00a ffc8 	bl	800c494 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	481f      	ldr	r0, [pc, #124]	; (8001588 <order_phases+0x208>)
 800150c:	f00a ff3c 	bl	800c388 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4604      	mov	r4, r0
 800151c:	460d      	mov	r5, r1
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff f832 	bl	8000588 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9cd 2300 	strd	r2, r3, [sp]
 800152c:	4622      	mov	r2, r4
 800152e:	462b      	mov	r3, r5
 8001530:	4816      	ldr	r0, [pc, #88]	; (800158c <order_phases+0x20c>)
 8001532:	f00a ff29 	bl	800c388 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	461a      	mov	r2, r3
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <order_phases+0x1e8>)
 8001540:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <order_phases+0x1f4>)
 8001550:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}
 8001568:	2000043c 	.word	0x2000043c
 800156c:	080103c8 	.word	0x080103c8
 8001570:	37d1b717 	.word	0x37d1b717
 8001574:	2000033c 	.word	0x2000033c
 8001578:	3fd06cbe 	.word	0x3fd06cbe
 800157c:	40c90fdb 	.word	0x40c90fdb
 8001580:	080103ec 	.word	0x080103ec
 8001584:	08010404 	.word	0x08010404
 8001588:	0801041c 	.word	0x0801041c
 800158c:	08010430 	.word	0x08010430

08001590 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af02      	add	r7, sp, #8
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7c1b      	ldrb	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 80015a6:	489e      	ldr	r0, [pc, #632]	; (8001820 <calibrate_encoder+0x290>)
 80015a8:	f00a ff74 	bl	800c494 <puts>
			cal->started = 1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001824 <calibrate_encoder+0x294>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d525      	bpl.n	8001644 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800160a:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 800160e:	4b86      	ldr	r3, [pc, #536]	; (8001828 <calibrate_encoder+0x298>)
 8001610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001628:	332c      	adds	r3, #44	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f001 fd35 	bl	800309c <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001642:	e259      	b.n	8001af8 <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	ed93 7a05 	vldr	s14, [r3, #20]
 800164a:	4b77      	ldr	r3, [pc, #476]	; (8001828 <calibrate_encoder+0x298>)
 800164c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001650:	eddf 6a76 	vldr	s13, [pc, #472]	; 800182c <calibrate_encoder+0x29c>
 8001654:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001658:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800165c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	f140 808f 	bpl.w	8001792 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edd3 7a02 	vldr	s15, [r3, #8]
 800167a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001830 <calibrate_encoder+0x2a0>
 800167e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001692:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800169c:	332c      	adds	r3, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f001 fcfb 	bl	800309c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	dc00      	bgt.n	80016be <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016bc:	e21c      	b.n	8001af8 <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80016c4:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001844 <calibrate_encoder+0x2b4>
 80016c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016cc:	4b56      	ldr	r3, [pc, #344]	; (8001828 <calibrate_encoder+0x298>)
 80016ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016d2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800182c <calibrate_encoder+0x29c>
 80016d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e2:	ee17 3a90 	vmov	r3, s15
 80016e6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	131b      	asrs	r3, r3, #12
 80016f6:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016fe:	4618      	mov	r0, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	441a      	add	r2, r3
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	f100 030a 	add.w	r3, r0, #10
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001714:	461d      	mov	r5, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	330a      	adds	r3, #10
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	685c      	ldr	r4, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff2d 	bl	8000588 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	e9cd 2300 	strd	r2, r3, [sp]
 8001736:	4623      	mov	r3, r4
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4629      	mov	r1, r5
 800173c:	483d      	ldr	r0, [pc, #244]	; (8001834 <calibrate_encoder+0x2a4>)
 800173e:	f00a fe23 	bl	800c388 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001748:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001838 <calibrate_encoder+0x2a8>
 800174c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <calibrate_encoder+0x298>)
 8001764:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001768:	eddf 6a34 	vldr	s13, [pc, #208]	; 800183c <calibrate_encoder+0x2ac>
 800176c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001774:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001778:	eeb4 7a67 	vcmp.f32	s14, s15
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	f000 81b7 	beq.w	8001af2 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001788:	3301      	adds	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001790:	e1b2      	b.n	8001af8 <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	ed93 7a05 	vldr	s14, [r3, #20]
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <calibrate_encoder+0x298>)
 800179a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800179e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001840 <calibrate_encoder+0x2b0>
 80017a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017a6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80017aa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	f140 80a9 	bpl.w	8001914 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001830 <calibrate_encoder+0x2a0>
 80017cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <calibrate_encoder+0x298>)
 80017d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80017f4:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017fe:	332c      	adds	r3, #44	; 0x2c
 8001800:	4619      	mov	r1, r3
 8001802:	68b8      	ldr	r0, [r7, #8]
 8001804:	f001 fc4a 	bl	800309c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	ed93 7a05 	vldr	s14, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	dc14      	bgt.n	8001848 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 800181e:	e16a      	b.n	8001af6 <calibrate_encoder+0x566>
 8001820:	0801044c 	.word	0x0801044c
 8001824:	37d1b717 	.word	0x37d1b717
 8001828:	2000033c 	.word	0x2000033c
 800182c:	40c90fdb 	.word	0x40c90fdb
 8001830:	3983126e 	.word	0x3983126e
 8001834:	08010474 	.word	0x08010474
 8001838:	3ba0d97c 	.word	0x3ba0d97c
 800183c:	43000000 	.word	0x43000000
 8001840:	41490fdb 	.word	0x41490fdb
 8001844:	49000000 	.word	0x49000000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8152 	beq.w	8001af6 <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	edd3 7a02 	vldr	s15, [r3, #8]
 8001858:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001844 <calibrate_encoder+0x2b4>
 800185c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001860:	4ba7      	ldr	r3, [pc, #668]	; (8001b00 <calibrate_encoder+0x570>)
 8001862:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001866:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001b04 <calibrate_encoder+0x574>
 800186a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800186e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	ee17 3a90 	vmov	r3, s15
 800187a:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	131b      	asrs	r3, r3, #12
 800188a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	330a      	adds	r3, #10
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80018aa:	4610      	mov	r0, r2
 80018ac:	0fda      	lsrs	r2, r3, #31
 80018ae:	4413      	add	r3, r2
 80018b0:	105b      	asrs	r3, r3, #1
 80018b2:	4619      	mov	r1, r3
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	f100 030a 	add.w	r3, r0, #10
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018c4:	461d      	mov	r5, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	330a      	adds	r3, #10
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	685c      	ldr	r4, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe55 	bl	8000588 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9cd 2300 	strd	r2, r3, [sp]
 80018e6:	4623      	mov	r3, r4
 80018e8:	6a3a      	ldr	r2, [r7, #32]
 80018ea:	4629      	mov	r1, r5
 80018ec:	4886      	ldr	r0, [pc, #536]	; (8001b08 <calibrate_encoder+0x578>)
 80018ee:	f00a fd4b 	bl	800c388 <iprintf>
			cal->sample_count--;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001904:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001b0c <calibrate_encoder+0x57c>
 8001908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001912:	e0f0      	b.n	8001af6 <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	f001 fad9 	bl	8002ecc <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800191e:	2300      	movs	r3, #0
 8001920:	643b      	str	r3, [r7, #64]	; 0x40
 8001922:	e00b      	b.n	800193c <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001928:	330a      	adds	r3, #10
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001932:	4413      	add	r3, r2
 8001934:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001938:	3301      	adds	r3, #1
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
 800193c:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <calibrate_encoder+0x570>)
 800193e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001946:	ee17 3a90 	vmov	r3, s15
 800194a:	01db      	lsls	r3, r3, #7
 800194c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800194e:	429a      	cmp	r2, r3
 8001950:	dbe8      	blt.n	8001924 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <calibrate_encoder+0x570>)
 800195e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001962:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001b10 <calibrate_encoder+0x580>
 8001966:	ee27 7a87 	vmul.f32	s14, s15, s14
 800196a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001972:	ee17 2a90 	vmov	r2, s15
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f5c3 2300 	rsb	r3, r3, #524288	; 0x80000
 8001986:	2b00      	cmp	r3, #0
 8001988:	da01      	bge.n	800198e <calibrate_encoder+0x3fe>
 800198a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800198e:	131b      	asrs	r3, r3, #12
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001992:	2300      	movs	r3, #0
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001996:	e0a0      	b.n	8001ada <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	0fda      	lsrs	r2, r3, #31
 80019a0:	4413      	add	r3, r2
 80019a2:	105b      	asrs	r3, r3, #1
 80019a4:	425b      	negs	r3, r3
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
 80019a8:	e068      	b.n	8001a7c <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <calibrate_encoder+0x570>)
 80019b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b10 <calibrate_encoder+0x580>
 80019c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c6:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001b10 <calibrate_encoder+0x580>
 80019ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e0:	ee17 3a90 	vmov	r3, s15
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da13      	bge.n	8001a14 <calibrate_encoder+0x484>
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <calibrate_encoder+0x570>)
 80019f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019fc:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b10 <calibrate_encoder+0x580>
 8001a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 3a90 	vmov	r3, s15
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
 8001a12:	e027      	b.n	8001a64 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <calibrate_encoder+0x570>)
 8001a20:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a24:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b10 <calibrate_encoder+0x580>
 8001a28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	dd12      	ble.n	8001a64 <calibrate_encoder+0x4d4>
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <calibrate_encoder+0x570>)
 8001a4a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a4e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001b10 <calibrate_encoder+0x580>
 8001a52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5e:	ee17 3a90 	vmov	r3, s15
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a68:	330a      	adds	r3, #10
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a72:	4413      	add	r3, r2
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	3301      	adds	r3, #1
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7e:	0fda      	lsrs	r2, r3, #31
 8001a80:	4413      	add	r3, r2
 8001a82:	105b      	asrs	r3, r3, #1
 8001a84:	461a      	mov	r2, r3
 8001a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	db8e      	blt.n	80019aa <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a90:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a9a:	4413      	add	r3, r2
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa2:	dd02      	ble.n	8001aaa <calibrate_encoder+0x51a>
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	3b80      	subs	r3, #128	; 0x80
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ab0:	1ad2      	subs	r2, r2, r3
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001aba:	330a      	adds	r3, #10
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <calibrate_encoder+0x584>)
 8001ad0:	f00a fc5a 	bl	800c388 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001adc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ade:	f77f af5b 	ble.w	8001998 <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001af0:	e002      	b.n	8001af8 <calibrate_encoder+0x568>
				return;
 8001af2:	bf00      	nop
 8001af4:	e000      	b.n	8001af8 <calibrate_encoder+0x568>
		return;
 8001af6:	bf00      	nop
}
 8001af8:	3748      	adds	r7, #72	; 0x48
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000033c 	.word	0x2000033c
 8001b04:	40c90fdb 	.word	0x40c90fdb
 8001b08:	08010474 	.word	0x08010474
 8001b0c:	3ba0d97c 	.word	0x3ba0d97c
 8001b10:	43000000 	.word	0x43000000
 8001b14:	08010484 	.word	0x08010484

08001b18 <check_encoder_init>:
void measure_lr(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
	// TODO: implement this?
}


int check_encoder_init(EncoderStruct *encoder, ControllerStruct *controller, CalStruct *cal){
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]

	printf("\n\r Checking encoder initialization\n\r");
 8001b24:	486a      	ldr	r0, [pc, #424]	; (8001cd0 <check_encoder_init+0x1b8>)
 8001b26:	f00a fc2f 	bl	800c388 <iprintf>

	float theta_elec_read = 0.0f;
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
	float theta_elec_calc = 0.0f;
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
	float theta_elec_err = 0.0f;
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
	int theta_elec_counts = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e026      	b.n	8001b94 <check_encoder_init+0x7c>
		cal->theta_ref = PI_F/2.0f;//W_CAL*cal->time;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a62      	ldr	r2, [pc, #392]	; (8001cd4 <check_encoder_init+0x1bc>)
 8001b4a:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001b56:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b60:	461a      	mov	r2, r3
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001b6a:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <check_encoder_init+0x1c0>)
 8001b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001b84:	332c      	adds	r3, #44	; 0x2c
 8001b86:	4619      	mov	r1, r3
 8001b88:	68b8      	ldr	r0, [r7, #8]
 8001b8a:	f001 fa87 	bl	800309c <commutate>
	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	ddd3      	ble.n	8001b46 <check_encoder_init+0x2e>
	}

	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e033      	b.n	8001c0c <check_encoder_init+0xf4>
		cal->theta_ref = 0.0f;//W_CAL*cal->time;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bb6:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <check_encoder_init+0x1c0>)
 8001bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001be4:	332c      	adds	r3, #44	; 0x2c
 8001be6:	4619      	mov	r1, r3
 8001be8:	68b8      	ldr	r0, [r7, #8]
 8001bea:	f001 fa57 	bl	800309c <commutate>
		if (i==15000) {
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d106      	bne.n	8001c06 <check_encoder_init+0xee>
			theta_elec_read = encoder->elec_angle;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
			theta_elec_counts = encoder->count;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c12:	4293      	cmp	r3, r2
 8001c14:	ddc6      	ble.n	8001ba4 <check_encoder_init+0x8c>
		}
	}

	// Print difference and status of initialization
	if (theta_elec_read > PI_F) { theta_elec_calc = theta_elec_read - 2.0f*PI_F; } // wrap from -PI to PI instead of 0 to 2*PI
 8001c16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c1a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001cdc <check_encoder_init+0x1c4>
 8001c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	dd08      	ble.n	8001c3a <check_encoder_init+0x122>
 8001c28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c2c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ce0 <check_encoder_init+0x1c8>
 8001c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c34:	edc7 7a08 	vstr	s15, [r7, #32]
 8001c38:	e001      	b.n	8001c3e <check_encoder_init+0x126>
	else { theta_elec_calc = theta_elec_read; };
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	623b      	str	r3, [r7, #32]
	if (theta_elec_calc >= 0.0f) { theta_elec_err = theta_elec_calc; }
 8001c3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	db02      	blt.n	8001c52 <check_encoder_init+0x13a>
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	e005      	b.n	8001c5e <check_encoder_init+0x146>
	else { theta_elec_err = -theta_elec_calc; }
 8001c52:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c56:	eef1 7a67 	vneg.f32	s15, s15
 8001c5a:	edc7 7a07 	vstr	s15, [r7, #28]
//    theta_elec_err = abs(theta_elec_calc);

	if (theta_elec_err < (PI_F/2.0f)) { // initialization is good
 8001c5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c62:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001ce4 <check_encoder_init+0x1cc>
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d515      	bpl.n	8001c9c <check_encoder_init+0x184>
		printf(" Good initialization! theta_elec = %.2f, theta_elec_calc = %.2f\r\n", theta_elec_read, theta_elec_calc);
 8001c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c72:	f7fe fc89 	bl	8000588 <__aeabi_f2d>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	6a38      	ldr	r0, [r7, #32]
 8001c7c:	f7fe fc84 	bl	8000588 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	e9cd 2300 	strd	r2, r3, [sp]
 8001c88:	4622      	mov	r2, r4
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	4816      	ldr	r0, [pc, #88]	; (8001ce8 <check_encoder_init+0x1d0>)
 8001c8e:	f00a fb7b 	bl	800c388 <iprintf>
		encoder->init_status = 1;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001c9a:	e014      	b.n	8001cc6 <check_encoder_init+0x1ae>
	} else { // electrical angle error is larger than 90deg
		printf(" BAD initialization, theta_elec = %.2f, theta_elec_calc = %.2f\r\n", theta_elec_read, theta_elec_calc);
 8001c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c9e:	f7fe fc73 	bl	8000588 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	6a38      	ldr	r0, [r7, #32]
 8001ca8:	f7fe fc6e 	bl	8000588 <__aeabi_f2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8001cb4:	4622      	mov	r2, r4
 8001cb6:	462b      	mov	r3, r5
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <check_encoder_init+0x1d4>)
 8001cba:	f00a fb65 	bl	800c388 <iprintf>
		encoder->init_status = 0;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	}

	// return encoder->elec_angle? encoder->count?
	return theta_elec_counts; //theta_elec_read;
 8001cc6:	69bb      	ldr	r3, [r7, #24]

} // end check_encoder_init function
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd0:	08010490 	.word	0x08010490
 8001cd4:	3fc90fdb 	.word	0x3fc90fdb
 8001cd8:	2000033c 	.word	0x2000033c
 8001cdc:	40490fdb 	.word	0x40490fdb
 8001ce0:	40c90fdb 	.word	0x40c90fdb
 8001ce4:	3fc90fdb 	.word	0x3fc90fdb
 8001ce8:	080104b8 	.word	0x080104b8
 8001cec:	080104fc 	.word	0x080104fc

08001cf0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_CAN1_Init+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d0e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001d12:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d1a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d42:	f005 fa31 	bl	80071a8 <HAL_CAN_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d4c:	f003 f844 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000314 	.word	0x20000314
 8001d58:	40006400 	.word	0x40006400

08001d5c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_CAN_MspInit+0x94>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d134      	bne.n	8001de8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_CAN_MspInit+0x98>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_CAN_MspInit+0x98>)
 8001d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_CAN_MspInit+0x98>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_CAN_MspInit+0x98>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <HAL_CAN_MspInit+0x98>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_CAN_MspInit+0x98>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001dc8:	2309      	movs	r3, #9
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4809      	ldr	r0, [pc, #36]	; (8001df8 <HAL_CAN_MspInit+0x9c>)
 8001dd4:	f006 f9d2 	bl	800817c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2014      	movs	r0, #20
 8001dde:	f006 f904 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001de2:	2014      	movs	r0, #20
 8001de4:	f006 f91d 	bl	8008022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40006400 	.word	0x40006400
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400

08001dfc <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <can_rx_init+0x54>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	015b      	lsls	r3, r3, #5
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3328      	adds	r3, #40	; 0x28
 8001e40:	4619      	mov	r1, r3
 8001e42:	4804      	ldr	r0, [pc, #16]	; (8001e54 <can_rx_init+0x58>)
 8001e44:	f005 faac 	bl	80073a0 <HAL_CAN_ConfigFilter>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000043c 	.word	0x2000043c
 8001e54:	20000314 	.word	0x20000314

08001e58 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 6; 			// message size of 8 byte
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2206      	movs	r2, #6
 8001e64:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <can_tx_init+0x30>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	2000043c 	.word	0x2000043c

08001e8c <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6178      	str	r0, [r7, #20]
 8001e94:	460b      	mov	r3, r1
 8001e96:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e9e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001ea2:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8001ea4:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <pack_reply+0xec>)
 8001ea6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <pack_reply+0xec>)
 8001eac:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001eb0:	2010      	movs	r0, #16
 8001eb2:	eeb0 1a47 	vmov.f32	s2, s14
 8001eb6:	eef0 0a67 	vmov.f32	s1, s15
 8001eba:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ebe:	f003 f87b 	bl	8004fb8 <float_to_uint>
 8001ec2:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <pack_reply+0xec>)
 8001ec6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <pack_reply+0xec>)
 8001ecc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001ed0:	200c      	movs	r0, #12
 8001ed2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ed6:	eef0 0a67 	vmov.f32	s1, s15
 8001eda:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ede:	f003 f86b 	bl	8004fb8 <float_to_uint>
 8001ee2:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <pack_reply+0xec>)
 8001ee6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eea:	eeb1 7a67 	vneg.f32	s14, s15
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <pack_reply+0xec>)
 8001ef0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <pack_reply+0xec>)
 8001efa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001efe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <pack_reply+0xec>)
 8001f04:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <pack_reply+0xec>)
 8001f0a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <pack_reply+0xec>)
 8001f14:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1c:	200c      	movs	r0, #12
 8001f1e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f22:	eef0 0a66 	vmov.f32	s1, s13
 8001f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f2a:	f003 f845 	bl	8004fb8 <float_to_uint>
 8001f2e:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	7cfa      	ldrb	r2, [r7, #19]
 8001f34:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	121b      	asrs	r3, r3, #8
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	111b      	asrs	r3, r3, #4
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	121b      	asrs	r3, r3, #8
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	719a      	strb	r2, [r3, #6]
    }
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2000033c 	.word	0x2000033c

08001f7c <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	b590      	push	{r4, r7, lr}
 8001f80:	b087      	sub	sp, #28
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8001f8c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001f96:	4313      	orrs	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001fa4:	0912      	lsrs	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fb6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001fbe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001fc8:	0912      	lsrs	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fda:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <unpack_cmd+0x160>)
 8001fe4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <unpack_cmd+0x160>)
 8001fea:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001fee:	2110      	movs	r1, #16
 8001ff0:	eef0 0a47 	vmov.f32	s1, s14
 8001ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f003 f810 	bl	800501e <uint_to_float>
 8001ffe:	eef0 7a40 	vmov.f32	s15, s0
 8002002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002004:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8002008:	4b34      	ldr	r3, [pc, #208]	; (80020dc <unpack_cmd+0x160>)
 800200a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <unpack_cmd+0x160>)
 8002010:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002016:	1d1c      	adds	r4, r3, #4
 8002018:	210c      	movs	r1, #12
 800201a:	eef0 0a47 	vmov.f32	s1, s14
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	6938      	ldr	r0, [r7, #16]
 8002024:	f002 fffb 	bl	800501e <uint_to_float>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <unpack_cmd+0x160>)
 8002032:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002038:	f103 0408 	add.w	r4, r3, #8
 800203c:	210c      	movs	r1, #12
 800203e:	eef0 0a67 	vmov.f32	s1, s15
 8002042:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80020e0 <unpack_cmd+0x164>
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f002 ffe9 	bl	800501e <uint_to_float>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <unpack_cmd+0x160>)
 8002056:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800205a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205c:	f103 040c 	add.w	r4, r3, #12
 8002060:	210c      	movs	r1, #12
 8002062:	eef0 0a67 	vmov.f32	s1, s15
 8002066:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80020e0 <unpack_cmd+0x164>
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	f002 ffd7 	bl	800501e <uint_to_float>
 8002070:	eef0 7a40 	vmov.f32	s15, s0
 8002074:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <unpack_cmd+0x160>)
 800207a:	edd3 7a03 	vldr	s15, [r3, #12]
 800207e:	eeb1 7a67 	vneg.f32	s14, s15
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <unpack_cmd+0x160>)
 8002084:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <unpack_cmd+0x160>)
 800208e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002092:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <unpack_cmd+0x160>)
 8002098:	ed93 7a03 	vldr	s14, [r3, #12]
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <unpack_cmd+0x160>)
 800209e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <unpack_cmd+0x160>)
 80020a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b2:	f103 0410 	add.w	r4, r3, #16
 80020b6:	210c      	movs	r1, #12
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	eeb0 0a66 	vmov.f32	s0, s13
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f002 ffac 	bl	800501e <uint_to_float>
 80020c6:	eef0 7a40 	vmov.f32	s15, s0
 80020ca:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80020d8:	b004      	add	sp, #16
 80020da:	4770      	bx	lr
 80020dc:	2000033c 	.word	0x2000033c
 80020e0:	00000000 	.word	0x00000000

080020e4 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80020f6:	2200      	movs	r2, #0
 80020f8:	2110      	movs	r1, #16
 80020fa:	480f      	ldr	r0, [pc, #60]	; (8002138 <drv_spi_write+0x54>)
 80020fc:	f006 f9d2 	bl	80084a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	1c9a      	adds	r2, r3, #2
 8002106:	2364      	movs	r3, #100	; 0x64
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2301      	movs	r3, #1
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <drv_spi_write+0x58>)
 800210e:	f007 f8a4 	bl	800925a <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8002112:	bf00      	nop
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <drv_spi_write+0x58>)
 8002116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d0f9      	beq.n	8002114 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8002120:	2201      	movs	r2, #1
 8002122:	2110      	movs	r1, #16
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <drv_spi_write+0x54>)
 8002126:	f006 f9bd 	bl	80084a4 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	885b      	ldrh	r3, [r3, #2]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40020000 	.word	0x40020000
 800213c:	20009494 	.word	0x20009494

08002140 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	463b      	mov	r3, r7
 8002148:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 800214c:	463b      	mov	r3, r7
 800214e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ffc6 	bl	80020e4 <drv_spi_write>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	463b      	mov	r3, r7
 800216a:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 800216e:	463b      	mov	r3, r7
 8002170:	f248 0101 	movw	r1, #32769	; 0x8001
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ffb5 	bl	80020e4 <drv_spi_write>
 800217a:	4603      	mov	r3, r0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002192:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	02db      	lsls	r3, r3, #11
 8002198:	b21b      	sxth	r3, r3
 800219a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff99 	bl	80020e4 <drv_spi_write>
 80021b2:	4603      	mov	r3, r0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	f107 0408 	add.w	r4, r7, #8
 80021c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	02db      	lsls	r3, r3, #11
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	b29a      	uxth	r2, r3
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff7d 	bl	80020e4 <drv_spi_write>
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}

080021f2 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80021f2:	b590      	push	{r4, r7, lr}
 80021f4:	b087      	sub	sp, #28
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	f107 0408 	add.w	r4, r7, #8
 80021fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	b21b      	sxth	r3, r3
 800220a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800220e:	b21a      	sxth	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21b      	sxth	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b21a      	sxth	r2, r3
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	01db      	lsls	r3, r3, #7
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21a      	sxth	r2, r3
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	b21b      	sxth	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b21a      	sxth	r2, r3
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	b21b      	sxth	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b21a      	sxth	r2, r3
 800224c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21a      	sxth	r2, r3
 8002256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21b      	sxth	r3, r3
 800225e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002260:	8afa      	ldrh	r2, [r7, #22]
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff3b 	bl	80020e4 <drv_spi_write>
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}

08002276 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8002276:	b590      	push	{r4, r7, lr}
 8002278:	b087      	sub	sp, #28
 800227a:	af00      	add	r7, sp, #0
 800227c:	f107 0408 	add.w	r4, r7, #8
 8002280:	e884 0003 	stmia.w	r4, {r0, r1}
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	029b      	lsls	r3, r3, #10
 800228c:	b21b      	sxth	r3, r3
 800228e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002292:	b21a      	sxth	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21a      	sxth	r2, r3
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80022bc:	8afa      	ldrh	r2, [r7, #22]
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff0d 	bl	80020e4 <drv_spi_write>
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}

080022d2 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80022d2:	b590      	push	{r4, r7, lr}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	f107 0408 	add.w	r4, r7, #8
 80022dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80022ee:	b21a      	sxth	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	b21b      	sxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	b21a      	sxth	r2, r3
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	019b      	lsls	r3, r3, #6
 8002308:	b21b      	sxth	r3, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	b21a      	sxth	r2, r3
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	015b      	lsls	r3, r3, #5
 8002312:	b21b      	sxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	b21a      	sxth	r2, r3
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	b21b      	sxth	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b21a      	sxth	r2, r3
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	b21b      	sxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b21a      	sxth	r2, r3
 800232c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	b21b      	sxth	r3, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	b21a      	sxth	r2, r3
 8002336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21b      	sxth	r3, r3
 800233e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002340:	8afa      	ldrh	r2, [r7, #22]
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fecb 	bl	80020e4 <drv_spi_write>
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}

08002356 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	463b      	mov	r3, r7
 800235e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8002362:	2202      	movs	r2, #2
 8002364:	463b      	mov	r3, r7
 8002366:	e893 0003 	ldmia.w	r3, {r0, r1}
 800236a:	f7ff ff0b 	bl	8002184 <drv_read_register>
 800236e:	4603      	mov	r3, r0
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002376:	89fb      	ldrh	r3, [r7, #14]
 8002378:	2202      	movs	r2, #2
 800237a:	4639      	mov	r1, r7
 800237c:	c903      	ldmia	r1, {r0, r1}
 800237e:	f7ff ff1d 	bl	80021bc <drv_write_register>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	463b      	mov	r3, r7
 8002392:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002396:	2202      	movs	r2, #2
 8002398:	463b      	mov	r3, r7
 800239a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800239e:	f7ff fef1 	bl	8002184 <drv_read_register>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80023aa:	89fb      	ldrh	r3, [r7, #14]
 80023ac:	2202      	movs	r2, #2
 80023ae:	4639      	mov	r1, r7
 80023b0:	c903      	ldmia	r1, {r0, r1}
 80023b2:	f7ff ff03 	bl	80021bc <drv_write_register>
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	463b      	mov	r3, r7
 80023c8:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 80023cc:	463b      	mov	r3, r7
 80023ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023d2:	f7ff feb5 	bl	8002140 <drv_read_FSR1>
 80023d6:	4603      	mov	r3, r0
 80023d8:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 80023da:	463b      	mov	r3, r7
 80023dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023e0:	f7ff febf 	bl	8002162 <drv_read_FSR2>
 80023e4:	4603      	mov	r3, r0
 80023e6:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 80023e8:	89fb      	ldrh	r3, [r7, #14]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <drv_print_faults+0x38>
 80023f2:	4857      	ldr	r0, [pc, #348]	; (8002550 <drv_print_faults+0x190>)
 80023f4:	f009 ffc8 	bl	800c388 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <drv_print_faults+0x48>
 8002402:	4854      	ldr	r0, [pc, #336]	; (8002554 <drv_print_faults+0x194>)
 8002404:	f009 ffc0 	bl	800c388 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <drv_print_faults+0x58>
 8002412:	4851      	ldr	r0, [pc, #324]	; (8002558 <drv_print_faults+0x198>)
 8002414:	f009 ffb8 	bl	800c388 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8002418:	89fb      	ldrh	r3, [r7, #14]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <drv_print_faults+0x68>
 8002422:	484e      	ldr	r0, [pc, #312]	; (800255c <drv_print_faults+0x19c>)
 8002424:	f009 ffb0 	bl	800c388 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <drv_print_faults+0x78>
 8002432:	484b      	ldr	r0, [pc, #300]	; (8002560 <drv_print_faults+0x1a0>)
 8002434:	f009 ffa8 	bl	800c388 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <drv_print_faults+0x88>
 8002442:	4848      	ldr	r0, [pc, #288]	; (8002564 <drv_print_faults+0x1a4>)
 8002444:	f009 ffa0 	bl	800c388 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <drv_print_faults+0x98>
 8002452:	4845      	ldr	r0, [pc, #276]	; (8002568 <drv_print_faults+0x1a8>)
 8002454:	f009 ff98 	bl	800c388 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <drv_print_faults+0xa8>
 8002462:	4842      	ldr	r0, [pc, #264]	; (800256c <drv_print_faults+0x1ac>)
 8002464:	f009 ff90 	bl	800c388 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <drv_print_faults+0xb8>
 8002472:	483f      	ldr	r0, [pc, #252]	; (8002570 <drv_print_faults+0x1b0>)
 8002474:	f009 ff88 	bl	800c388 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <drv_print_faults+0xc8>
 8002482:	483c      	ldr	r0, [pc, #240]	; (8002574 <drv_print_faults+0x1b4>)
 8002484:	f009 ff80 	bl	800c388 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <drv_print_faults+0xd8>
 8002492:	4839      	ldr	r0, [pc, #228]	; (8002578 <drv_print_faults+0x1b8>)
 8002494:	f009 ff78 	bl	800c388 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8002498:	89bb      	ldrh	r3, [r7, #12]
 800249a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <drv_print_faults+0xe8>
 80024a2:	4836      	ldr	r0, [pc, #216]	; (800257c <drv_print_faults+0x1bc>)
 80024a4:	f009 ff70 	bl	800c388 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 80024a8:	89bb      	ldrh	r3, [r7, #12]
 80024aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <drv_print_faults+0xf8>
 80024b2:	4833      	ldr	r0, [pc, #204]	; (8002580 <drv_print_faults+0x1c0>)
 80024b4:	f009 ff68 	bl	800c388 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 80024b8:	89bb      	ldrh	r3, [r7, #12]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <drv_print_faults+0x108>
 80024c2:	4830      	ldr	r0, [pc, #192]	; (8002584 <drv_print_faults+0x1c4>)
 80024c4:	f009 ff60 	bl	800c388 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 80024c8:	89bb      	ldrh	r3, [r7, #12]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <drv_print_faults+0x118>
 80024d2:	482d      	ldr	r0, [pc, #180]	; (8002588 <drv_print_faults+0x1c8>)
 80024d4:	f009 ff58 	bl	800c388 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80024d8:	89bb      	ldrh	r3, [r7, #12]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <drv_print_faults+0x128>
 80024e2:	482a      	ldr	r0, [pc, #168]	; (800258c <drv_print_faults+0x1cc>)
 80024e4:	f009 ff50 	bl	800c388 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 80024e8:	89bb      	ldrh	r3, [r7, #12]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <drv_print_faults+0x138>
 80024f2:	4827      	ldr	r0, [pc, #156]	; (8002590 <drv_print_faults+0x1d0>)
 80024f4:	f009 ff48 	bl	800c388 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 80024f8:	89bb      	ldrh	r3, [r7, #12]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <drv_print_faults+0x148>
 8002502:	4824      	ldr	r0, [pc, #144]	; (8002594 <drv_print_faults+0x1d4>)
 8002504:	f009 ff40 	bl	800c388 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8002508:	89bb      	ldrh	r3, [r7, #12]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <drv_print_faults+0x158>
 8002512:	4821      	ldr	r0, [pc, #132]	; (8002598 <drv_print_faults+0x1d8>)
 8002514:	f009 ff38 	bl	800c388 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8002518:	89bb      	ldrh	r3, [r7, #12]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <drv_print_faults+0x168>
 8002522:	481e      	ldr	r0, [pc, #120]	; (800259c <drv_print_faults+0x1dc>)
 8002524:	f009 ff30 	bl	800c388 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <drv_print_faults+0x178>
 8002532:	481b      	ldr	r0, [pc, #108]	; (80025a0 <drv_print_faults+0x1e0>)
 8002534:	f009 ff28 	bl	800c388 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002538:	89bb      	ldrh	r3, [r7, #12]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <drv_print_faults+0x188>
 8002542:	4818      	ldr	r0, [pc, #96]	; (80025a4 <drv_print_faults+0x1e4>)
 8002544:	f009 ff20 	bl	800c388 <iprintf>

}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	08010540 	.word	0x08010540
 8002554:	0801054c 	.word	0x0801054c
 8002558:	08010558 	.word	0x08010558
 800255c:	08010560 	.word	0x08010560
 8002560:	08010568 	.word	0x08010568
 8002564:	08010570 	.word	0x08010570
 8002568:	0801057c 	.word	0x0801057c
 800256c:	08010588 	.word	0x08010588
 8002570:	08010594 	.word	0x08010594
 8002574:	080105a0 	.word	0x080105a0
 8002578:	080105ac 	.word	0x080105ac
 800257c:	080105b8 	.word	0x080105b8
 8002580:	080105c0 	.word	0x080105c0
 8002584:	080105c8 	.word	0x080105c8
 8002588:	080105d0 	.word	0x080105d0
 800258c:	080105d8 	.word	0x080105d8
 8002590:	080105e0 	.word	0x080105e0
 8002594:	080105ec 	.word	0x080105ec
 8002598:	080105f8 	.word	0x080105f8
 800259c:	08010604 	.word	0x08010604
 80025a0:	08010610 	.word	0x08010610
 80025a4:	0801061c 	.word	0x0801061c

080025a8 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d901      	bls.n	80025bc <flash_writer_init+0x14>
 80025b8:	2307      	movs	r3, #7
 80025ba:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <flash_writer_init+0x38>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20000000 	.word	0x20000000

080025e4 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 80025ec:	f003 f9f2 	bl	80059d4 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80025f0:	20f1      	movs	r0, #241	; 0xf1
 80025f2:	f003 faab 	bl	8005b4c <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <flash_writer_open+0x34>)
 80025fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002600:	2102      	movs	r1, #2
 8002602:	4618      	mov	r0, r3
 8002604:	f003 fa0e 	bl	8005a24 <FLASH_EraseSector>
    fw->ready = true;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000020 	.word	0x20000020

0800261c <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	1d3c      	adds	r4, r7, #4
 8002624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002628:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fa52 	bl	8005ae4 <FLASH_ProgramWord>
}
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}

08002648 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	f107 040c 	add.w	r4, r7, #12
 8002652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fa39 	bl	8005ae4 <FLASH_ProgramWord>
}
 8002672:	bf00      	nop
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}

0800267a <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 8002682:	f003 f9bf 	bl	8005a04 <FLASH_Lock>
    fw->ready = false;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 8002694:	b490      	push	{r4, r7}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	1d3c      	adds	r4, r7, #4
 800269c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026a0:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a05      	ldr	r2, [pc, #20]	; (80026bc <flash_read_int+0x28>)
 80026a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc90      	pop	{r4, r7}
 80026ba:	4770      	bx	lr
 80026bc:	20000000 	.word	0x20000000

080026c0 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80026c0:	b490      	push	{r4, r7}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	1d3c      	adds	r4, r7, #4
 80026c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026cc:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <flash_read_float+0x30>)
 80026d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	ee07 3a90 	vmov	s15, r3
}
 80026e2:	eeb0 0a67 	vmov.f32	s0, s15
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc90      	pop	{r4, r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000000 	.word	0x20000000

080026f4 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271c:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800272a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800273c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002740:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002744:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <set_dtc+0x140>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d136      	bne.n	80027ba <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <set_dtc+0x144>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800275a:	edd7 7a05 	vldr	s15, [r7, #20]
 800275e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002762:	4b35      	ldr	r3, [pc, #212]	; (8002838 <set_dtc+0x144>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800276a:	ee17 2a90 	vmov	r2, s15
 800276e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002770:	4b31      	ldr	r3, [pc, #196]	; (8002838 <set_dtc+0x144>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <set_dtc+0x144>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278e:	ee17 2a90 	vmov	r2, s15
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <set_dtc+0x144>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <set_dtc+0x144>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b2:	ee17 2a90 	vmov	r2, s15
 80027b6:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80027b8:	e035      	b.n	8002826 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <set_dtc+0x144>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <set_dtc+0x144>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d8:	ee17 2a90 	vmov	r2, s15
 80027dc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <set_dtc+0x144>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <set_dtc+0x144>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fc:	ee17 2a90 	vmov	r2, s15
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <set_dtc+0x144>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002810:	edd7 7a03 	vldr	s15, [r7, #12]
 8002814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <set_dtc+0x144>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002820:	ee17 2a90 	vmov	r2, s15
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	2000043c 	.word	0x2000043c
 8002838:	20009548 	.word	0x20009548

0800283c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002844:	4b38      	ldr	r3, [pc, #224]	; (8002928 <analog_sample+0xec>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10e      	bne.n	800286a <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <analog_sample+0xf0>)
 800284e:	f004 fa2a 	bl	8006ca6 <HAL_ADC_GetValue>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800285a:	4835      	ldr	r0, [pc, #212]	; (8002930 <analog_sample+0xf4>)
 800285c:	f004 fa23 	bl	8006ca6 <HAL_ADC_GetValue>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e00d      	b.n	8002886 <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800286a:	4831      	ldr	r0, [pc, #196]	; (8002930 <analog_sample+0xf4>)
 800286c:	f004 fa1b 	bl	8006ca6 <HAL_ADC_GetValue>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002878:	482c      	ldr	r0, [pc, #176]	; (800292c <analog_sample+0xf0>)
 800287a:	f004 fa14 	bl	8006ca6 <HAL_ADC_GetValue>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002886:	4829      	ldr	r0, [pc, #164]	; (800292c <analog_sample+0xf0>)
 8002888:	f004 f8b0 	bl	80069ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	4826      	ldr	r0, [pc, #152]	; (800292c <analog_sample+0xf0>)
 8002892:	f004 f97d 	bl	8006b90 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002896:	4827      	ldr	r0, [pc, #156]	; (8002934 <analog_sample+0xf8>)
 8002898:	f004 fa05 	bl	8006ca6 <HAL_ADC_GetValue>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002938 <analog_sample+0xfc>
 80028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	edd3 7a05 	vldr	s15, [r3, #20]
 800290c:	eeb1 7a67 	vneg.f32	s14, s15
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	edd3 7a06 	vldr	s15, [r3, #24]
 8002916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000043c 	.word	0x2000043c
 800292c:	2000023c 	.word	0x2000023c
 8002930:	20000284 	.word	0x20000284
 8002934:	200002cc 	.word	0x200002cc
 8002938:	3c533318 	.word	0x3c533318

0800293c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	ed87 0a05 	vstr	s0, [r7, #20]
 8002946:	edc7 0a04 	vstr	s1, [r7, #16]
 800294a:	ed87 1a03 	vstr	s2, [r7, #12]
 800294e:	60b8      	str	r0, [r7, #8]
 8002950:	6079      	str	r1, [r7, #4]
 8002952:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002954:	ed97 0a05 	vldr	s0, [r7, #20]
 8002958:	f002 fbce 	bl	80050f8 <cos_lut>
 800295c:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002960:	ed97 0a05 	vldr	s0, [r7, #20]
 8002964:	f002 fb8e 	bl	8005084 <sin_lut>
 8002968:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 800296c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002970:	edd7 7a04 	vldr	s15, [r7, #16]
 8002974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002978:	edd7 6a06 	vldr	s13, [r7, #24]
 800297c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800298e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002992:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002a3c <abc+0x100>
 8002996:	ee27 7a87 	vmul.f32	s14, s15, s14
 800299a:	edd7 7a07 	vldr	s15, [r7, #28]
 800299e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80029a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80029ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002a40 <abc+0x104>
 80029ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029be:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80029e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029e4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002a40 <abc+0x104>
 80029e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80029f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80029f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a08:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002a3c <abc+0x100>
 8002a0c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002a32:	bf00      	nop
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	3f5db3d7 	.word	0x3f5db3d7
 8002a40:	bf5db3d7 	.word	0xbf5db3d7

08002a44 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a4e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a52:	ed87 1a03 	vstr	s2, [r7, #12]
 8002a56:	edc7 1a02 	vstr	s3, [r7, #8]
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002a5e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a62:	f002 fb49 	bl	80050f8 <cos_lut>
 8002a66:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002a6a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a6e:	f002 fb09 	bl	8005084 <sin_lut>
 8002a72:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002a76:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a82:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a86:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002b58 <dq0+0x114>
 8002a8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a92:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aae:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002b5c <dq0+0x118>
 8002ab2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ab6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002abe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ac2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b60 <dq0+0x11c>
 8002ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002ae0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae4:	eeb1 7a67 	vneg.f32	s14, s15
 8002ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002af4:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002b5c <dq0+0x118>
 8002af8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002afc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b00:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b04:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b1c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002b58 <dq0+0x114>
 8002b20:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b24:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b30:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b60 <dq0+0x11c>
 8002b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	3f5db3d7 	.word	0x3f5db3d7
 8002b5c:	bf5db3d7 	.word	0xbf5db3d7
 8002b60:	3f2aaaab 	.word	0x3f2aaaab

08002b64 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	ed2d 8b02 	vpush	{d8}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b72:	edc7 0a06 	vstr	s1, [r7, #24]
 8002b76:	ed87 1a05 	vstr	s2, [r7, #20]
 8002b7a:	edc7 1a04 	vstr	s3, [r7, #16]
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002b84:	ed97 1a04 	vldr	s2, [r7, #16]
 8002b88:	edd7 0a05 	vldr	s1, [r7, #20]
 8002b8c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002b90:	f002 f995 	bl	8004ebe <fminf3>
 8002b94:	eeb0 8a40 	vmov.f32	s16, s0
 8002b98:	ed97 1a04 	vldr	s2, [r7, #16]
 8002b9c:	edd7 0a05 	vldr	s1, [r7, #20]
 8002ba0:	ed97 0a06 	vldr	s0, [r7, #24]
 8002ba4:	f002 f957 	bl	8004e56 <fmaxf3>
 8002ba8:	eef0 7a40 	vmov.f32	s15, s0
 8002bac:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002bb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002bbc:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <svm+0x160>)
 8002bbe:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002bc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002cc8 <svm+0x164>
 8002bd8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002bdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002be4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002ccc <svm+0x168>
 8002bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf4:	f002 f8f7 	bl	8004de6 <fast_fmaxf>
 8002bf8:	eef0 7a40 	vmov.f32	s15, s0
 8002bfc:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002cd0 <svm+0x16c>
 8002c00:	eeb0 0a67 	vmov.f32	s0, s15
 8002c04:	f002 f90b 	bl	8004e1e <fast_fminf>
 8002c08:	eef0 7a40 	vmov.f32	s15, s0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002c12:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c26:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002cc8 <svm+0x164>
 8002c2a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c36:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3e:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002ccc <svm+0x168>
 8002c42:	eeb0 0a67 	vmov.f32	s0, s15
 8002c46:	f002 f8ce 	bl	8004de6 <fast_fmaxf>
 8002c4a:	eef0 7a40 	vmov.f32	s15, s0
 8002c4e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002cd0 <svm+0x16c>
 8002c52:	eeb0 0a67 	vmov.f32	s0, s15
 8002c56:	f002 f8e2 	bl	8004e1e <fast_fminf>
 8002c5a:	eef0 7a40 	vmov.f32	s15, s0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002c64:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c78:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002cc8 <svm+0x164>
 8002c7c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c80:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c88:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002ccc <svm+0x168>
 8002c94:	eeb0 0a67 	vmov.f32	s0, s15
 8002c98:	f002 f8a5 	bl	8004de6 <fast_fmaxf>
 8002c9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ca0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002cd0 <svm+0x16c>
 8002ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca8:	f002 f8b9 	bl	8004e1e <fast_fminf>
 8002cac:	eef0 7a40 	vmov.f32	s15, s0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	edc3 7a00 	vstr	s15, [r3]

    }
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	; 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	ecbd 8b02 	vpop	{d8}
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	3ef0a3d7 	.word	0x3ef0a3d7
 8002cc8:	3f933333 	.word	0x3f933333
 8002ccc:	00000000 	.word	0x00000000
 8002cd0:	3f70a3d7 	.word	0x3f70a3d7

08002cd4 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce8:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fcf6 	bl	80026f4 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e00f      	b.n	8002d2e <zero_current+0x5a>
    	analog_sample(controller);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fd94 	bl	800283c <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dbeb      	blt.n	8002d0e <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a4b      	ldr	r2, [pc, #300]	; (8002e94 <init_controller_params+0x138>)
 8002d68:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a49      	ldr	r2, [pc, #292]	; (8002e94 <init_controller_params+0x138>)
 8002d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <init_controller_params+0x13c>)
 8002d74:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d78:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002e9c <init_controller_params+0x140>
 8002d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 8002d86:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <init_controller_params+0x13c>)
 8002d88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d8c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002e9c <init_controller_params+0x140>
 8002d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <init_controller_params+0x13c>)
 8002d9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002da0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002ea0 <init_controller_params+0x144>
 8002da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ea4 <init_controller_params+0x148>
 8002dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002db4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002db8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002dd4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002ea8 <init_controller_params+0x14c>
 8002dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 8002de2:	4b32      	ldr	r3, [pc, #200]	; (8002eac <init_controller_params+0x150>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <init_controller_params+0x13c>)
 8002dee:	edd3 7a03 	vldr	s15, [r3, #12]
 8002df2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002eb0 <init_controller_params+0x154>
 8002df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	d803      	bhi.n	8002e08 <init_controller_params+0xac>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a2c      	ldr	r2, [pc, #176]	; (8002eb4 <init_controller_params+0x158>)
 8002e04:	671a      	str	r2, [r3, #112]	; 0x70
 8002e06:	e002      	b.n	8002e0e <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a2b      	ldr	r2, [pc, #172]	; (8002eb8 <init_controller_params+0x15c>)
 8002e0c:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e037      	b.n	8002e84 <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002ebc <init_controller_params+0x160>
 8002e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e26:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ec0 <init_controller_params+0x164>
 8002e2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e2e:	ee16 0a90 	vmov	r0, s13
 8002e32:	f7fd fba9 	bl	8000588 <__aeabi_f2d>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	ec43 2b10 	vmov	d0, r2, r3
 8002e3e:	f00c ffeb 	bl	800fe18 <exp>
 8002e42:	ec51 0b10 	vmov	r0, r1, d0
 8002e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <init_controller_params+0x168>)
 8002e4c:	f7fd fbf4 	bl	8000638 <__aeabi_dmul>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <init_controller_params+0x16c>)
 8002e5e:	f7fd fa35 	bl	80002cc <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fedd 	bl	8000c28 <__aeabi_d2f>
 8002e6e:	4601      	mov	r1, r0
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	333c      	adds	r3, #60	; 0x3c
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3301      	adds	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b7f      	cmp	r3, #127	; 0x7f
 8002e88:	ddc4      	ble.n	8002e14 <init_controller_params+0xb8>
    }

    }
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	3d3851ec 	.word	0x3d3851ec
 8002e98:	2000033c 	.word	0x2000033c
 8002e9c:	38d1b717 	.word	0x38d1b717
 8002ea0:	37d1b717 	.word	0x37d1b717
 8002ea4:	40c90fdb 	.word	0x40c90fdb
 8002ea8:	3dcccccd 	.word	0x3dcccccd
 8002eac:	2000043c 	.word	0x2000043c
 8002eb0:	42200000 	.word	0x42200000
 8002eb4:	3ca4ffff 	.word	0x3ca4ffff
 8002eb8:	3d24ffff 	.word	0x3d24ffff
 8002ebc:	bc000000 	.word	0xbc000000
 8002ec0:	3d03126f 	.word	0x3d03126f
 8002ec4:	3ff33333 	.word	0x3ff33333
 8002ec8:	3ff00000 	.word	0x3ff00000

08002ecc <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ed4:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <reset_foc+0xe4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <reset_foc+0xe4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef2:	ee17 2a90 	vmov	r2, s15
 8002ef6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <reset_foc+0xe4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <reset_foc+0xe4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f16:	ee17 2a90 	vmov	r2, s15
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <reset_foc+0xe4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f32:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <reset_foc+0xe4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f3a:	ee17 2a90 	vmov	r2, s15
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20009548 	.word	0x20009548

08002fb4 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += controller->ki_fw*(controller->v_max - controller->v_ref);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	ed93 6a38 	vldr	s12, [r3, #224]	; 0xe0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8002fd4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8002fec:	eddf 0a29 	vldr	s1, [pc, #164]	; 8003094 <field_weaken+0xe0>
 8002ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff4:	f001 ff13 	bl	8004e1e <fast_fminf>
 8002ff8:	eeb0 7a40 	vmov.f32	s14, s0
 8002ffc:	4b26      	ldr	r3, [pc, #152]	; (8003098 <field_weaken+0xe4>)
 8002ffe:	edd3 7a06 	vldr	s15, [r3, #24]
 8003002:	eef1 7a67 	vneg.f32	s15, s15
 8003006:	eef0 0a67 	vmov.f32	s1, s15
 800300a:	eeb0 0a47 	vmov.f32	s0, s14
 800300e:	f001 feea 	bl	8004de6 <fast_fmaxf>
 8003012:	eef0 7a40 	vmov.f32	s15, s0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
       controller->i_d_des = controller->fw_int;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	eeb0 0a67 	vmov.f32	s0, s15
 8003050:	f00c ff4a 	bl	800fee8 <sqrtf>
 8003054:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800305e:	edd7 0a03 	vldr	s1, [r7, #12]
 8003062:	eeb0 0a67 	vmov.f32	s0, s15
 8003066:	f001 feda 	bl	8004e1e <fast_fminf>
 800306a:	eeb0 7a40 	vmov.f32	s14, s0
 800306e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003072:	eef1 7a67 	vneg.f32	s15, s15
 8003076:	eef0 0a67 	vmov.f32	s1, s15
 800307a:	eeb0 0a47 	vmov.f32	s0, s14
 800307e:	f001 feb2 	bl	8004de6 <fast_fmaxf>
 8003082:	eef0 7a40 	vmov.f32	s15, s0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8


}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	00000000 	.word	0x00000000
 8003098:	2000033c 	.word	0x2000033c

0800309c <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80030bc:	4bd7      	ldr	r3, [pc, #860]	; (800341c <commutate+0x380>)
 80030be:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80030c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	edd3 6a05 	vldr	s13, [r3, #20]
 80030d2:	4bd2      	ldr	r3, [pc, #840]	; (800341c <commutate+0x380>)
 80030d4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80030d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edd3 6a06 	vldr	s13, [r3, #24]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	ed93 6a07 	vldr	s12, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3340      	adds	r3, #64	; 0x40
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	eef0 1a46 	vmov.f32	s3, s12
 800310c:	eeb0 1a66 	vmov.f32	s2, s13
 8003110:	eef0 0a47 	vmov.f32	s1, s14
 8003114:	eeb0 0a67 	vmov.f32	s0, s15
 8003118:	f7ff fc94 	bl	8002a44 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003122:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003420 <commutate+0x384>
 8003126:	ee27 7a87 	vmul.f32	s14, s15, s14
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003130:	eddf 6abc 	vldr	s13, [pc, #752]	; 8003424 <commutate+0x388>
 8003134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003148:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003420 <commutate+0x384>
 800314c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003156:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8003424 <commutate+0x388>
 800315a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800316e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003420 <commutate+0x384>
 8003172:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	edd3 7a08 	vldr	s15, [r3, #32]
 800317c:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8003424 <commutate+0x388>
 8003180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003194:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003428 <commutate+0x38c>
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800342c <commutate+0x390>
 80031a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003430 <commutate+0x394>
 80031a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80031b2:	4b9a      	ldr	r3, [pc, #616]	; (800341c <commutate+0x380>)
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80031ce:	eeb0 0a67 	vmov.f32	s0, s15
 80031d2:	4610      	mov	r0, r2
 80031d4:	f001 fea7 	bl	8004f26 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80031e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e8:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fc:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003212:	edd7 7a07 	vldr	s15, [r7, #28]
 8003216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003224:	edd7 7a05 	vldr	s15, [r7, #20]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800323e:	eef0 0a47 	vmov.f32	s1, s14
 8003242:	eeb0 0a67 	vmov.f32	s0, s15
 8003246:	f001 fdea 	bl	8004e1e <fast_fminf>
 800324a:	eeb0 7a40 	vmov.f32	s14, s0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003254:	eef1 7a67 	vneg.f32	s15, s15
 8003258:	eef0 0a67 	vmov.f32	s1, s15
 800325c:	eeb0 0a47 	vmov.f32	s0, s14
 8003260:	f001 fdc1 	bl	8004de6 <fast_fmaxf>
 8003264:	eef0 7a40 	vmov.f32	s15, s0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003280:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003284:	edd7 7a07 	vldr	s15, [r7, #28]
 8003288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80032a2:	eef0 0a47 	vmov.f32	s1, s14
 80032a6:	eeb0 0a67 	vmov.f32	s0, s15
 80032aa:	f001 fdb8 	bl	8004e1e <fast_fminf>
 80032ae:	eeb0 7a40 	vmov.f32	s14, s0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80032b8:	eef1 7a67 	vneg.f32	s15, s15
 80032bc:	eef0 0a67 	vmov.f32	s1, s15
 80032c0:	eeb0 0a47 	vmov.f32	s0, s14
 80032c4:	f001 fd8f 	bl	8004de6 <fast_fmaxf>
 80032c8:	eef0 7a40 	vmov.f32	s15, s0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80032de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80032ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f6:	eeb0 0a67 	vmov.f32	s0, s15
 80032fa:	f00c fdf5 	bl	800fee8 <sqrtf>
 80032fe:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003308:	edd7 7a06 	vldr	s15, [r7, #24]
 800330c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800331a:	edd7 7a04 	vldr	s15, [r7, #16]
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800333a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800333e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800335c:	eef0 0a47 	vmov.f32	s1, s14
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	f001 fd5b 	bl	8004e1e <fast_fminf>
 8003368:	eeb0 7a40 	vmov.f32	s14, s0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003372:	eef1 7a67 	vneg.f32	s15, s15
 8003376:	eef0 0a67 	vmov.f32	s1, s15
 800337a:	eeb0 0a47 	vmov.f32	s0, s14
 800337e:	f001 fd32 	bl	8004de6 <fast_fmaxf>
 8003382:	eef0 7a40 	vmov.f32	s15, s0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80033a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b0:	eeb0 0a67 	vmov.f32	s0, s15
 80033b4:	f00c fd98 	bl	800fee8 <sqrtf>
 80033b8:	eef0 7a40 	vmov.f32	s15, s0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80033c8:	edd7 0a03 	vldr	s1, [r7, #12]
 80033cc:	eeb0 0a67 	vmov.f32	s0, s15
 80033d0:	f001 fd25 	bl	8004e1e <fast_fminf>
 80033d4:	eeb0 7a40 	vmov.f32	s14, s0
 80033d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033dc:	eef1 7a67 	vneg.f32	s15, s15
 80033e0:	eef0 0a67 	vmov.f32	s1, s15
 80033e4:	eeb0 0a47 	vmov.f32	s0, s14
 80033e8:	f001 fcfd 	bl	8004de6 <fast_fmaxf>
 80033ec:	eef0 7a40 	vmov.f32	s15, s0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003408:	eeb0 0a67 	vmov.f32	s0, s15
 800340c:	4610      	mov	r0, r2
 800340e:	f001 fd8a 	bl	8004f26 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	e00d      	b.n	8003438 <commutate+0x39c>
 800341c:	2000033c 	.word	0x2000033c
 8003420:	3f666666 	.word	0x3f666666
 8003424:	3dcccccd 	.word	0x3dcccccd
 8003428:	3f933333 	.word	0x3f933333
 800342c:	3f70a3d7 	.word	0x3f70a3d7
 8003430:	3f13cd3a 	.word	0x3f13cd3a
 8003434:	381d4951 	.word	0x381d4951
 8003438:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800343c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003434 <commutate+0x398>
 8003440:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	336c      	adds	r3, #108	; 0x6c
 8003464:	461a      	mov	r2, r3
 8003466:	eeb0 1a66 	vmov.f32	s2, s13
 800346a:	eef0 0a47 	vmov.f32	s1, s14
 800346e:	eeb0 0a67 	vmov.f32	s0, s15
 8003472:	f7ff fa63 	bl	800293c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	461a      	mov	r2, r3
 80034a0:	eef0 1a46 	vmov.f32	s3, s12
 80034a4:	eeb0 1a66 	vmov.f32	s2, s13
 80034a8:	eef0 0a47 	vmov.f32	s1, s14
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	f7ff fb58 	bl	8002b64 <svm>

       set_dtc(controller);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff f91d 	bl	80026f4 <set_dtc>

    }
 80034ba:	bf00      	nop
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop

080034c4 <torque_control>:


void torque_control(ControllerStruct *controller){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80034de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80034ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003502:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350e:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <torque_control+0xb0>)
 8003514:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003518:	4b16      	ldr	r3, [pc, #88]	; (8003574 <torque_control+0xb0>)
 800351a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	ed97 7a03 	vldr	s14, [r7, #12]
 8003526:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003530:	eef0 0a67 	vmov.f32	s1, s15
 8003534:	eeb0 0a66 	vmov.f32	s0, s13
 8003538:	f001 fc71 	bl	8004e1e <fast_fminf>
 800353c:	eeb0 7a40 	vmov.f32	s14, s0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003546:	eef1 7a67 	vneg.f32	s15, s15
 800354a:	eef0 0a67 	vmov.f32	s1, s15
 800354e:	eeb0 0a47 	vmov.f32	s0, s14
 8003552:	f001 fc48 	bl	8004de6 <fast_fmaxf>
 8003556:	eef0 7a40 	vmov.f32	s15, s0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000033c 	.word	0x2000033c

08003578 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	785a      	ldrb	r2, [r3, #1]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d00d      	beq.n	80035f8 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f957 	bl	8003890 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	785a      	ldrb	r2, [r3, #1]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8e0 	bl	80037b8 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	f200 80c6 	bhi.w	800378e <run_fsm+0x1c6>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <run_fsm+0x40>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800378d 	.word	0x0800378d
 800360c:	08003625 	.word	0x08003625
 8003610:	08003727 	.word	0x08003727
 8003614:	0800378f 	.word	0x0800378f
 8003618:	0800378d 	.word	0x0800378d
 800361c:	08003769 	.word	0x08003769
 8003620:	0800378d 	.word	0x0800378d
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003624:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <run_fsm+0x1d0>)
 8003626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <run_fsm+0x1d4>)
 8003630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003634:	4a58      	ldr	r2, [pc, #352]	; (8003798 <run_fsm+0x1d0>)
 8003636:	4959      	ldr	r1, [pc, #356]	; (800379c <run_fsm+0x1d4>)
 8003638:	4859      	ldr	r0, [pc, #356]	; (80037a0 <run_fsm+0x1d8>)
 800363a:	f7fd fea1 	bl	8001380 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 800363e:	e0a6      	b.n	800378e <run_fsm+0x1c6>
			 else if(!comm_encoder_cal.done_cal){
 8003640:	4b55      	ldr	r3, [pc, #340]	; (8003798 <run_fsm+0x1d0>)
 8003642:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800364a:	4b54      	ldr	r3, [pc, #336]	; (800379c <run_fsm+0x1d4>)
 800364c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003650:	4a51      	ldr	r2, [pc, #324]	; (8003798 <run_fsm+0x1d0>)
 8003652:	4952      	ldr	r1, [pc, #328]	; (800379c <run_fsm+0x1d4>)
 8003654:	4852      	ldr	r0, [pc, #328]	; (80037a0 <run_fsm+0x1d8>)
 8003656:	f7fd ff9b 	bl	8001590 <calibrate_encoder>
			 break;
 800365a:	e098      	b.n	800378e <run_fsm+0x1c6>
				 E_ZERO = comm_encoder_cal.ezero;
 800365c:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <run_fsm+0x1d0>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4a50      	ldr	r2, [pc, #320]	; (80037a4 <run_fsm+0x1dc>)
 8003662:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003664:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <run_fsm+0x1dc>)
 8003666:	695c      	ldr	r4, [r3, #20]
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <run_fsm+0x1d8>)
 800366a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800366e:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <run_fsm+0x1dc>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	425b      	negs	r3, r3
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	eddf 6a49 	vldr	s13, [pc, #292]	; 80037a8 <run_fsm+0x1e0>
 8003684:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003688:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800368c:	eeb0 0a47 	vmov.f32	s0, s14
 8003690:	f00c fc0a 	bl	800fea8 <fmodf>
 8003694:	eef0 7a40 	vmov.f32	s15, s0
 8003698:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80037ac <run_fsm+0x1e4>
 800369c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a0:	ee17 0a90 	vmov	r0, s15
 80036a4:	f7fc ff70 	bl	8000588 <__aeabi_f2d>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4621      	mov	r1, r4
 80036ae:	4840      	ldr	r0, [pc, #256]	; (80037b0 <run_fsm+0x1e8>)
 80036b0:	f008 fe6a 	bl	800c388 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80036b4:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <run_fsm+0x1d8>)
 80036b6:	4a38      	ldr	r2, [pc, #224]	; (8003798 <run_fsm+0x1d0>)
 80036b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80036bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80036c0:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80036c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c8:	4618      	mov	r0, r3
 80036ca:	f008 f9dd 	bl	800ba88 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80036ce:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <run_fsm+0x1dc>)
 80036d0:	4a31      	ldr	r2, [pc, #196]	; (8003798 <run_fsm+0x1d0>)
 80036d2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80036d6:	3318      	adds	r3, #24
 80036d8:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80036dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e0:	4618      	mov	r0, r3
 80036e2:	f008 f9d1 	bl	800ba88 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80036e6:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <run_fsm+0x1ec>)
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	9200      	str	r2, [sp, #0]
 80036ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ee:	f001 ffea 	bl	80056c6 <preference_writer_ready>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f083 0301 	eor.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <run_fsm+0x13c>
 80036fe:	482d      	ldr	r0, [pc, #180]	; (80037b4 <run_fsm+0x1ec>)
 8003700:	f001 ffd2 	bl	80056a8 <preference_writer_open>
				 preference_writer_flush(&prefs);
 8003704:	482b      	ldr	r0, [pc, #172]	; (80037b4 <run_fsm+0x1ec>)
 8003706:	f001 ffeb 	bl	80056e0 <preference_writer_flush>
				 preference_writer_close(&prefs);
 800370a:	482a      	ldr	r0, [pc, #168]	; (80037b4 <run_fsm+0x1ec>)
 800370c:	f002 f866 	bl	80057dc <preference_writer_close>
				 preference_writer_load(prefs);
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <run_fsm+0x1ec>)
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	9200      	str	r2, [sp, #0]
 8003716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003718:	f002 f81e 	bl	8005758 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 800371c:	211b      	movs	r1, #27
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f914 	bl	800394c <update_fsm>
			 break;
 8003724:	e033      	b.n	800378e <run_fsm+0x1c6>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003726:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <run_fsm+0x1dc>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	dd0a      	ble.n	8003744 <run_fsm+0x17c>
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <run_fsm+0x1d4>)
 8003730:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <run_fsm+0x1dc>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	dd03      	ble.n	8003744 <run_fsm+0x17c>
				 zero_commands(&controller);
 800373c:	4817      	ldr	r0, [pc, #92]	; (800379c <run_fsm+0x1d4>)
 800373e:	f7ff ff1b 	bl	8003578 <zero_commands>
 8003742:	e009      	b.n	8003758 <run_fsm+0x190>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003744:	4815      	ldr	r0, [pc, #84]	; (800379c <run_fsm+0x1d4>)
 8003746:	f7ff febd 	bl	80034c4 <torque_control>
				 field_weaken(&controller);
 800374a:	4814      	ldr	r0, [pc, #80]	; (800379c <run_fsm+0x1d4>)
 800374c:	f7ff fc32 	bl	8002fb4 <field_weaken>
				 commutate(&controller, &comm_encoder);
 8003750:	4913      	ldr	r1, [pc, #76]	; (80037a0 <run_fsm+0x1d8>)
 8003752:	4812      	ldr	r0, [pc, #72]	; (800379c <run_fsm+0x1d4>)
 8003754:	f7ff fca2 	bl	800309c <commutate>
			 }
			 controller.timeout ++;
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <run_fsm+0x1d4>)
 800375a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800375e:	3301      	adds	r3, #1
 8003760:	4a0e      	ldr	r2, [pc, #56]	; (800379c <run_fsm+0x1d4>)
 8003762:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 8003766:	e012      	b.n	800378e <run_fsm+0x1c6>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 if (fsmstate->print_iter == 800){
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003770:	d106      	bne.n	8003780 <run_fsm+0x1b8>
				 ps_print(&comm_encoder);
 8003772:	480b      	ldr	r0, [pc, #44]	; (80037a0 <run_fsm+0x1d8>)
 8003774:	f001 ff1e 	bl	80055b4 <ps_print>
				 fsmstate->print_iter = 0;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
			 } else {
				 fsmstate->print_iter +=1;
			 }
			 break;
 800377e:	e006      	b.n	800378e <run_fsm+0x1c6>
				 fsmstate->print_iter +=1;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
			 break;
 800378a:	e000      	b.n	800378e <run_fsm+0x1c6>
			 break;
 800378c:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	bf00      	nop
 8003798:	20000eac 	.word	0x20000eac
 800379c:	20000850 	.word	0x20000850
 80037a0:	20000b5c 	.word	0x20000b5c
 80037a4:	2000043c 	.word	0x2000043c
 80037a8:	49000000 	.word	0x49000000
 80037ac:	40c90fdb 	.word	0x40c90fdb
 80037b0:	08010628 	.word	0x08010628
 80037b4:	2000083c 	.word	0x2000083c

080037b8 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d852      	bhi.n	800386e <fsm_enter_state+0xb6>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <fsm_enter_state+0x18>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037e9 	.word	0x080037e9
 80037d4:	0800382d 	.word	0x0800382d
 80037d8:	08003805 	.word	0x08003805
 80037dc:	0800386f 	.word	0x0800386f
 80037e0:	080037ef 	.word	0x080037ef
 80037e4:	080037f5 	.word	0x080037f5
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 80037e8:	f000 f986 	bl	8003af8 <enter_menu_state>
				break;
 80037ec:	e03f      	b.n	800386e <fsm_enter_state+0xb6>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 80037ee:	f000 f9af 	bl	8003b50 <enter_setup_state>
				break;
 80037f2:	e03c      	b.n	800386e <fsm_enter_state+0xb6>
			case ENCODER_MODE:
				//printf("Entering Encoder Mode\r\n");
				fsmstate->print_iter = 0;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
				comm_encoder.filt_enable = 0;
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <fsm_enter_state+0xc0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				break;
 8003802:	e034      	b.n	800386e <fsm_enter_state+0xb6>
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003804:	2201      	movs	r2, #1
 8003806:	2120      	movs	r1, #32
 8003808:	481c      	ldr	r0, [pc, #112]	; (800387c <fsm_enter_state+0xc4>)
 800380a:	f004 fe4b 	bl	80084a4 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 800380e:	481c      	ldr	r0, [pc, #112]	; (8003880 <fsm_enter_state+0xc8>)
 8003810:	f7ff fb5c 	bl	8002ecc <reset_foc>
				drv_enable_gd(drv);
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <fsm_enter_state+0xcc>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4611      	mov	r1, r2
 800381a:	889a      	ldrh	r2, [r3, #4]
 800381c:	2300      	movs	r3, #0
 800381e:	f362 030f 	bfi	r3, r2, #0, #16
 8003822:	4608      	mov	r0, r1
 8003824:	4619      	mov	r1, r3
 8003826:	f7fe fd96 	bl	8002356 <drv_enable_gd>
				break;
 800382a:	e020      	b.n	800386e <fsm_enter_state+0xb6>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <fsm_enter_state+0xd0>)
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003834:	4b14      	ldr	r3, [pc, #80]	; (8003888 <fsm_enter_state+0xd0>)
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <fsm_enter_state+0xd0>)
 800383e:	2200      	movs	r2, #0
 8003840:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <fsm_enter_state+0xc0>)
 8003844:	2200      	movs	r2, #0
 8003846:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 800384a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384e:	2100      	movs	r1, #0
 8003850:	480e      	ldr	r0, [pc, #56]	; (800388c <fsm_enter_state+0xd4>)
 8003852:	f008 f927 	bl	800baa4 <memset>
				drv_enable_gd(drv);
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <fsm_enter_state+0xcc>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4611      	mov	r1, r2
 800385c:	889a      	ldrh	r2, [r3, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	f362 030f 	bfi	r3, r2, #0, #16
 8003864:	4608      	mov	r0, r1
 8003866:	4619      	mov	r1, r3
 8003868:	f7fe fd75 	bl	8002356 <drv_enable_gd>
				break;
 800386c:	bf00      	nop

		}
 }
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000b5c 	.word	0x20000b5c
 800387c:	40020800 	.word	0x40020800
 8003880:	20000850 	.word	0x20000850
 8003884:	20000ea4 	.word	0x20000ea4
 8003888:	20000eac 	.word	0x20000eac
 800388c:	20000ca0 	.word	0x20000ca0

08003890 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b05      	cmp	r3, #5
 800389e:	d848      	bhi.n	8003932 <fsm_exit_state+0xa2>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <fsm_exit_state+0x18>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038c1 	.word	0x080038c1
 80038ac:	08003915 	.word	0x08003915
 80038b0:	080038e1 	.word	0x080038e1
 80038b4:	08003933 	.word	0x08003933
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038d1 	.word	0x080038d1
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	70da      	strb	r2, [r3, #3]
				break;
 80038c6:	e034      	b.n	8003932 <fsm_exit_state+0xa2>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	70da      	strb	r2, [r3, #3]
				break;
 80038ce:	e030      	b.n	8003932 <fsm_exit_state+0xa2>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				comm_encoder.filt_enable = 1;
 80038d0:	4b1a      	ldr	r3, [pc, #104]	; (800393c <fsm_exit_state+0xac>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				fsmstate->ready = 1;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	70da      	strb	r2, [r3, #3]
				break;
 80038de:	e028      	b.n	8003932 <fsm_exit_state+0xa2>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <fsm_exit_state+0xb0>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4611      	mov	r1, r2
 80038ec:	889a      	ldrh	r2, [r3, #4]
 80038ee:	2300      	movs	r3, #0
 80038f0:	f362 030f 	bfi	r3, r2, #0, #16
 80038f4:	4608      	mov	r0, r1
 80038f6:	4619      	mov	r1, r3
 80038f8:	f7fe fd47 	bl	800238a <drv_disable_gd>
					reset_foc(&controller);
 80038fc:	4811      	ldr	r0, [pc, #68]	; (8003944 <fsm_exit_state+0xb4>)
 80038fe:	f7ff fae5 	bl	8002ecc <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003902:	2200      	movs	r2, #0
 8003904:	2120      	movs	r1, #32
 8003906:	4810      	ldr	r0, [pc, #64]	; (8003948 <fsm_exit_state+0xb8>)
 8003908:	f004 fdcc 	bl	80084a4 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 800390c:	480d      	ldr	r0, [pc, #52]	; (8003944 <fsm_exit_state+0xb4>)
 800390e:	f7ff fe33 	bl	8003578 <zero_commands>
				break;
 8003912:	e00e      	b.n	8003932 <fsm_exit_state+0xa2>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <fsm_exit_state+0xb0>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4611      	mov	r1, r2
 800391a:	889a      	ldrh	r2, [r3, #4]
 800391c:	2300      	movs	r3, #0
 800391e:	f362 030f 	bfi	r3, r2, #0, #16
 8003922:	4608      	mov	r0, r1
 8003924:	4619      	mov	r1, r3
 8003926:	f7fe fd30 	bl	800238a <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	70da      	strb	r2, [r3, #3]
				break;
 8003930:	bf00      	nop
		}

 }
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000b5c 	.word	0x20000b5c
 8003940:	20000ea4 	.word	0x20000ea4
 8003944:	20000850 	.word	0x20000850
 8003948:	40020800 	.word	0x40020800

0800394c <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af02      	add	r7, sp, #8
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b1b      	cmp	r3, #27
 800395c:	d106      	bne.n	800396c <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	70da      	strb	r2, [r3, #3]
		return;
 800396a:	e0b8      	b.n	8003ade <update_fsm+0x192>
	}
	switch(fsmstate->state){
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b05      	cmp	r3, #5
 8003972:	f200 80b4 	bhi.w	8003ade <update_fsm+0x192>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <update_fsm+0x30>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	08003995 	.word	0x08003995
 8003980:	08003adf 	.word	0x08003adf
 8003984:	08003adf 	.word	0x08003adf
 8003988:	08003adf 	.word	0x08003adf
 800398c:	08003aa3 	.word	0x08003aa3
 8003990:	08003adf 	.word	0x08003adf
		case MENU_MODE:
			switch (fsm_input){
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	3b63      	subs	r3, #99	; 0x63
 8003998:	2b17      	cmp	r3, #23
 800399a:	f200 809f 	bhi.w	8003adc <update_fsm+0x190>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <update_fsm+0x58>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	08003a05 	.word	0x08003a05
 80039a8:	08003add 	.word	0x08003add
 80039ac:	08003a21 	.word	0x08003a21
 80039b0:	08003add 	.word	0x08003add
 80039b4:	08003add 	.word	0x08003add
 80039b8:	08003add 	.word	0x08003add
 80039bc:	08003add 	.word	0x08003add
 80039c0:	08003add 	.word	0x08003add
 80039c4:	08003add 	.word	0x08003add
 80039c8:	08003add 	.word	0x08003add
 80039cc:	08003a13 	.word	0x08003a13
 80039d0:	08003add 	.word	0x08003add
 80039d4:	08003add 	.word	0x08003add
 80039d8:	08003add 	.word	0x08003add
 80039dc:	08003add 	.word	0x08003add
 80039e0:	08003add 	.word	0x08003add
 80039e4:	08003a2f 	.word	0x08003a2f
 80039e8:	08003add 	.word	0x08003add
 80039ec:	08003add 	.word	0x08003add
 80039f0:	08003add 	.word	0x08003add
 80039f4:	08003add 	.word	0x08003add
 80039f8:	08003add 	.word	0x08003add
 80039fc:	08003add 	.word	0x08003add
 8003a00:	08003a3d 	.word	0x08003a3d
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	70da      	strb	r2, [r3, #3]
					break;
 8003a10:	e046      	b.n	8003aa0 <update_fsm+0x154>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	70da      	strb	r2, [r3, #3]
					break;
 8003a1e:	e03f      	b.n	8003aa0 <update_fsm+0x154>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2205      	movs	r2, #5
 8003a24:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	70da      	strb	r2, [r3, #3]
					break;
 8003a2c:	e038      	b.n	8003aa0 <update_fsm+0x154>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	70da      	strb	r2, [r3, #3]
					break;
 8003a3a:	e031      	b.n	8003aa0 <update_fsm+0x154>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003a3c:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <update_fsm+0x198>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
					ps_sample(&comm_encoder, DT);
 8003a44:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003ae8 <update_fsm+0x19c>
 8003a48:	4826      	ldr	r0, [pc, #152]	; (8003ae4 <update_fsm+0x198>)
 8003a4a:	f001 fbbf 	bl	80051cc <ps_sample>
					int zero_count = comm_encoder.count;
 8003a4e:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <update_fsm+0x198>)
 8003a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a54:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003a56:	4a25      	ldr	r2, [pc, #148]	; (8003aec <update_fsm+0x1a0>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6113      	str	r3, [r2, #16]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003a5c:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <update_fsm+0x1a4>)
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	9200      	str	r2, [sp, #0]
 8003a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a64:	f001 fe2f 	bl	80056c6 <preference_writer_ready>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f083 0301 	eor.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <update_fsm+0x12e>
 8003a74:	481e      	ldr	r0, [pc, #120]	; (8003af0 <update_fsm+0x1a4>)
 8003a76:	f001 fe17 	bl	80056a8 <preference_writer_open>
					preference_writer_flush(&prefs);
 8003a7a:	481d      	ldr	r0, [pc, #116]	; (8003af0 <update_fsm+0x1a4>)
 8003a7c:	f001 fe30 	bl	80056e0 <preference_writer_flush>
					preference_writer_close(&prefs);
 8003a80:	481b      	ldr	r0, [pc, #108]	; (8003af0 <update_fsm+0x1a4>)
 8003a82:	f001 feab 	bl	80057dc <preference_writer_close>
					preference_writer_load(prefs);
 8003a86:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <update_fsm+0x1a4>)
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	9200      	str	r2, [sp, #0]
 8003a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a8e:	f001 fe63 	bl	8005758 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <update_fsm+0x1a0>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	4619      	mov	r1, r3
 8003a98:	4816      	ldr	r0, [pc, #88]	; (8003af4 <update_fsm+0x1a8>)
 8003a9a:	f008 fc75 	bl	800c388 <iprintf>
					break;
 8003a9e:	bf00      	nop
				}
			break;
 8003aa0:	e01c      	b.n	8003adc <update_fsm+0x190>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	2b0d      	cmp	r3, #13
 8003aa6:	d103      	bne.n	8003ab0 <update_fsm+0x164>
				process_user_input(fsmstate);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa0d 	bl	8003ec8 <process_user_input>
				break;
 8003aae:	e016      	b.n	8003ade <update_fsm+0x192>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7c1b      	ldrb	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d103      	bne.n	8003ac0 <update_fsm+0x174>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	745a      	strb	r2, [r3, #17]
 8003abe:	e006      	b.n	8003ace <update_fsm+0x182>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7c1b      	ldrb	r3, [r3, #16]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	721a      	strb	r2, [r3, #8]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7c1b      	ldrb	r3, [r3, #16]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	741a      	strb	r2, [r3, #16]
			/* If enter is typed, process user input */

			break;
 8003ada:	e000      	b.n	8003ade <update_fsm+0x192>
			break;
 8003adc:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000b5c 	.word	0x20000b5c
 8003ae8:	37d1b717 	.word	0x37d1b717
 8003aec:	2000043c 	.word	0x2000043c
 8003af0:	2000083c 	.word	0x2000083c
 8003af4:	0801063c 	.word	0x0801063c

08003af8 <enter_menu_state>:


 void enter_menu_state(void){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003afc:	480c      	ldr	r0, [pc, #48]	; (8003b30 <enter_menu_state+0x38>)
 8003afe:	f008 fc43 	bl	800c388 <iprintf>
	    printf(" Commands:\n\r");
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <enter_menu_state+0x3c>)
 8003b04:	f008 fc40 	bl	800c388 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003b08:	480b      	ldr	r0, [pc, #44]	; (8003b38 <enter_menu_state+0x40>)
 8003b0a:	f008 fc3d 	bl	800c388 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003b0e:	480b      	ldr	r0, [pc, #44]	; (8003b3c <enter_menu_state+0x44>)
 8003b10:	f008 fc3a 	bl	800c388 <iprintf>
	    printf(" s - Setup\n\r");
 8003b14:	480a      	ldr	r0, [pc, #40]	; (8003b40 <enter_menu_state+0x48>)
 8003b16:	f008 fc37 	bl	800c388 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003b1a:	480a      	ldr	r0, [pc, #40]	; (8003b44 <enter_menu_state+0x4c>)
 8003b1c:	f008 fc34 	bl	800c388 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003b20:	4809      	ldr	r0, [pc, #36]	; (8003b48 <enter_menu_state+0x50>)
 8003b22:	f008 fc31 	bl	800c388 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003b26:	4809      	ldr	r0, [pc, #36]	; (8003b4c <enter_menu_state+0x54>)
 8003b28:	f008 fc2e 	bl	800c388 <iprintf>

	    //gpio.led->write(0);
 }
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08010664 	.word	0x08010664
 8003b34:	0801066c 	.word	0x0801066c
 8003b38:	0801067c 	.word	0x0801067c
 8003b3c:	08010690 	.word	0x08010690
 8003b40:	080106ac 	.word	0x080106ac
 8003b44:	080106bc 	.word	0x080106bc
 8003b48:	080106d4 	.word	0x080106d4
 8003b4c:	080106f0 	.word	0x080106f0

08003b50 <enter_setup_state>:

 void enter_setup_state(void){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003b56:	4897      	ldr	r0, [pc, #604]	; (8003db4 <enter_setup_state+0x264>)
 8003b58:	f008 fc16 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003b5c:	4b96      	ldr	r3, [pc, #600]	; (8003db8 <enter_setup_state+0x268>)
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	4b96      	ldr	r3, [pc, #600]	; (8003dbc <enter_setup_state+0x26c>)
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4b96      	ldr	r3, [pc, #600]	; (8003dc0 <enter_setup_state+0x270>)
 8003b66:	4a97      	ldr	r2, [pc, #604]	; (8003dc4 <enter_setup_state+0x274>)
 8003b68:	4997      	ldr	r1, [pc, #604]	; (8003dc8 <enter_setup_state+0x278>)
 8003b6a:	4898      	ldr	r0, [pc, #608]	; (8003dcc <enter_setup_state+0x27c>)
 8003b6c:	f008 fc0c 	bl	800c388 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003b70:	4897      	ldr	r0, [pc, #604]	; (8003dd0 <enter_setup_state+0x280>)
 8003b72:	f008 fc8f 	bl	800c494 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003b76:	4b97      	ldr	r3, [pc, #604]	; (8003dd4 <enter_setup_state+0x284>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fd04 	bl	8000588 <__aeabi_f2d>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b88:	4b93      	ldr	r3, [pc, #588]	; (8003dd8 <enter_setup_state+0x288>)
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4b93      	ldr	r3, [pc, #588]	; (8003ddc <enter_setup_state+0x28c>)
 8003b8e:	4a94      	ldr	r2, [pc, #592]	; (8003de0 <enter_setup_state+0x290>)
 8003b90:	4994      	ldr	r1, [pc, #592]	; (8003de4 <enter_setup_state+0x294>)
 8003b92:	4895      	ldr	r0, [pc, #596]	; (8003de8 <enter_setup_state+0x298>)
 8003b94:	f008 fbf8 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003b98:	4b8e      	ldr	r3, [pc, #568]	; (8003dd4 <enter_setup_state+0x284>)
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fcf3 	bl	8000588 <__aeabi_f2d>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003baa:	4b8b      	ldr	r3, [pc, #556]	; (8003dd8 <enter_setup_state+0x288>)
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <enter_setup_state+0x28c>)
 8003bb0:	4a8e      	ldr	r2, [pc, #568]	; (8003dec <enter_setup_state+0x29c>)
 8003bb2:	498f      	ldr	r1, [pc, #572]	; (8003df0 <enter_setup_state+0x2a0>)
 8003bb4:	488f      	ldr	r0, [pc, #572]	; (8003df4 <enter_setup_state+0x2a4>)
 8003bb6:	f008 fbe7 	bl	800c388 <iprintf>

	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "j", "D-axis inductance (H)", "0", "0.1", L_D);
 8003bba:	4b86      	ldr	r3, [pc, #536]	; (8003dd4 <enter_setup_state+0x284>)
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fc fce2 	bl	8000588 <__aeabi_f2d>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bcc:	4b8a      	ldr	r3, [pc, #552]	; (8003df8 <enter_setup_state+0x2a8>)
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	4b82      	ldr	r3, [pc, #520]	; (8003ddc <enter_setup_state+0x28c>)
 8003bd2:	4a8a      	ldr	r2, [pc, #552]	; (8003dfc <enter_setup_state+0x2ac>)
 8003bd4:	498a      	ldr	r1, [pc, #552]	; (8003e00 <enter_setup_state+0x2b0>)
 8003bd6:	488b      	ldr	r0, [pc, #556]	; (8003e04 <enter_setup_state+0x2b4>)
 8003bd8:	f008 fbd6 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "e", "Q-axis inductance (H)", "0", "0.1", L_Q);
 8003bdc:	4b7d      	ldr	r3, [pc, #500]	; (8003dd4 <enter_setup_state+0x284>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fcd1 	bl	8000588 <__aeabi_f2d>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bee:	4b82      	ldr	r3, [pc, #520]	; (8003df8 <enter_setup_state+0x2a8>)
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <enter_setup_state+0x28c>)
 8003bf4:	4a84      	ldr	r2, [pc, #528]	; (8003e08 <enter_setup_state+0x2b8>)
 8003bf6:	4985      	ldr	r1, [pc, #532]	; (8003e0c <enter_setup_state+0x2bc>)
 8003bf8:	4882      	ldr	r0, [pc, #520]	; (8003e04 <enter_setup_state+0x2b4>)
 8003bfa:	f008 fbc5 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "n", "Number of Pole Pairs (NPP)", "0", "40", PPAIRS);
 8003bfe:	4b75      	ldr	r3, [pc, #468]	; (8003dd4 <enter_setup_state+0x284>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fcc0 	bl	8000588 <__aeabi_f2d>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c10:	4b7f      	ldr	r3, [pc, #508]	; (8003e10 <enter_setup_state+0x2c0>)
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4b71      	ldr	r3, [pc, #452]	; (8003ddc <enter_setup_state+0x28c>)
 8003c16:	4a7f      	ldr	r2, [pc, #508]	; (8003e14 <enter_setup_state+0x2c4>)
 8003c18:	497f      	ldr	r1, [pc, #508]	; (8003e18 <enter_setup_state+0x2c8>)
 8003c1a:	487a      	ldr	r0, [pc, #488]	; (8003e04 <enter_setup_state+0x2b4>)
 8003c1c:	f008 fbb4 	bl	800c388 <iprintf>

	    printf("\r\n Control:\r\n");
 8003c20:	487e      	ldr	r0, [pc, #504]	; (8003e1c <enter_setup_state+0x2cc>)
 8003c22:	f008 fc37 	bl	800c494 <puts>

//	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "s", "Current Controller K_SCALE", "0", "0.1", K_SCALE);                                                 //ADDED --> FOR CURRENT CONTROL GAINS (KP)
//		printf(" %-4s %-31s %-5s %-6s %f\n\r", "d", "Current Controller KI_D", "0", "1.0", KI_D);                                                       //ADDED --> FOR CURRENT CONTROL GAINS (KI D-Axis)
//		printf(" %-4s %-31s %-5s %-6s %f\n\r", "q", "Current Controller KI_Q", "0", "1.0", KI_Q);                                                       //ADDED --> FOR CURRENT CONTROL GAINS (KI Q-Axis)

	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003c26:	4b6b      	ldr	r3, [pc, #428]	; (8003dd4 <enter_setup_state+0x284>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc fcac 	bl	8000588 <__aeabi_f2d>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c38:	4b79      	ldr	r3, [pc, #484]	; (8003e20 <enter_setup_state+0x2d0>)
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4b79      	ldr	r3, [pc, #484]	; (8003e24 <enter_setup_state+0x2d4>)
 8003c3e:	4a7a      	ldr	r2, [pc, #488]	; (8003e28 <enter_setup_state+0x2d8>)
 8003c40:	497a      	ldr	r1, [pc, #488]	; (8003e2c <enter_setup_state+0x2dc>)
 8003c42:	487b      	ldr	r0, [pc, #492]	; (8003e30 <enter_setup_state+0x2e0>)
 8003c44:	f008 fba0 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003c48:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <enter_setup_state+0x284>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fc fc9b 	bl	8000588 <__aeabi_f2d>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <enter_setup_state+0x2e4>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <enter_setup_state+0x2e8>)
 8003c60:	4a76      	ldr	r2, [pc, #472]	; (8003e3c <enter_setup_state+0x2ec>)
 8003c62:	4977      	ldr	r1, [pc, #476]	; (8003e40 <enter_setup_state+0x2f0>)
 8003c64:	4872      	ldr	r0, [pc, #456]	; (8003e30 <enter_setup_state+0x2e0>)
 8003c66:	f008 fb8f 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <enter_setup_state+0x284>)
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc8a 	bl	8000588 <__aeabi_f2d>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c7c:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <enter_setup_state+0x288>)
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	4b55      	ldr	r3, [pc, #340]	; (8003dd8 <enter_setup_state+0x288>)
 8003c82:	4a70      	ldr	r2, [pc, #448]	; (8003e44 <enter_setup_state+0x2f4>)
 8003c84:	4970      	ldr	r1, [pc, #448]	; (8003e48 <enter_setup_state+0x2f8>)
 8003c86:	486a      	ldr	r0, [pc, #424]	; (8003e30 <enter_setup_state+0x2e0>)
 8003c88:	f008 fb7e 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003c8c:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <enter_setup_state+0x284>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fc fc79 	bl	8000588 <__aeabi_f2d>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c9e:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <enter_setup_state+0x288>)
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4b4d      	ldr	r3, [pc, #308]	; (8003dd8 <enter_setup_state+0x288>)
 8003ca4:	4a69      	ldr	r2, [pc, #420]	; (8003e4c <enter_setup_state+0x2fc>)
 8003ca6:	496a      	ldr	r1, [pc, #424]	; (8003e50 <enter_setup_state+0x300>)
 8003ca8:	4861      	ldr	r0, [pc, #388]	; (8003e30 <enter_setup_state+0x2e0>)
 8003caa:	f008 fb6d 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003cae:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <enter_setup_state+0x284>)
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fc fc68 	bl	8000588 <__aeabi_f2d>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cc0:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <enter_setup_state+0x304>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <enter_setup_state+0x2e8>)
 8003cc6:	4a64      	ldr	r2, [pc, #400]	; (8003e58 <enter_setup_state+0x308>)
 8003cc8:	4964      	ldr	r1, [pc, #400]	; (8003e5c <enter_setup_state+0x30c>)
 8003cca:	4859      	ldr	r0, [pc, #356]	; (8003e30 <enter_setup_state+0x2e0>)
 8003ccc:	f008 fb5c 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003cd0:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <enter_setup_state+0x284>)
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fc57 	bl	8000588 <__aeabi_f2d>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ce2:	4b5f      	ldr	r3, [pc, #380]	; (8003e60 <enter_setup_state+0x310>)
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4b54      	ldr	r3, [pc, #336]	; (8003e38 <enter_setup_state+0x2e8>)
 8003ce8:	4a5e      	ldr	r2, [pc, #376]	; (8003e64 <enter_setup_state+0x314>)
 8003cea:	495f      	ldr	r1, [pc, #380]	; (8003e68 <enter_setup_state+0x318>)
 8003cec:	4850      	ldr	r0, [pc, #320]	; (8003e30 <enter_setup_state+0x2e0>)
 8003cee:	f008 fb4b 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003cf2:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <enter_setup_state+0x284>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc fc46 	bl	8000588 <__aeabi_f2d>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <enter_setup_state+0x31c>)
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <enter_setup_state+0x2e8>)
 8003d0a:	4a59      	ldr	r2, [pc, #356]	; (8003e70 <enter_setup_state+0x320>)
 8003d0c:	4959      	ldr	r1, [pc, #356]	; (8003e74 <enter_setup_state+0x324>)
 8003d0e:	4848      	ldr	r0, [pc, #288]	; (8003e30 <enter_setup_state+0x2e0>)
 8003d10:	f008 fb3a 	bl	800c388 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <enter_setup_state+0x284>)
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fc35 	bl	8000588 <__aeabi_f2d>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d26:	4b54      	ldr	r3, [pc, #336]	; (8003e78 <enter_setup_state+0x328>)
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <enter_setup_state+0x2e8>)
 8003d2c:	4a53      	ldr	r2, [pc, #332]	; (8003e7c <enter_setup_state+0x32c>)
 8003d2e:	4954      	ldr	r1, [pc, #336]	; (8003e80 <enter_setup_state+0x330>)
 8003d30:	483f      	ldr	r0, [pc, #252]	; (8003e30 <enter_setup_state+0x2e0>)
 8003d32:	f008 fb29 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <enter_setup_state+0x284>)
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc fc24 	bl	8000588 <__aeabi_f2d>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d48:	4b4e      	ldr	r3, [pc, #312]	; (8003e84 <enter_setup_state+0x334>)
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	; (8003e38 <enter_setup_state+0x2e8>)
 8003d4e:	4a4e      	ldr	r2, [pc, #312]	; (8003e88 <enter_setup_state+0x338>)
 8003d50:	494e      	ldr	r1, [pc, #312]	; (8003e8c <enter_setup_state+0x33c>)
 8003d52:	4837      	ldr	r0, [pc, #220]	; (8003e30 <enter_setup_state+0x2e0>)
 8003d54:	f008 fb18 	bl	800c388 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003d58:	484d      	ldr	r0, [pc, #308]	; (8003e90 <enter_setup_state+0x340>)
 8003d5a:	f008 fb9b 	bl	800c494 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003d5e:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <enter_setup_state+0x344>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <enter_setup_state+0x348>)
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <enter_setup_state+0x28c>)
 8003d6a:	4a4c      	ldr	r2, [pc, #304]	; (8003e9c <enter_setup_state+0x34c>)
 8003d6c:	494c      	ldr	r1, [pc, #304]	; (8003ea0 <enter_setup_state+0x350>)
 8003d6e:	484d      	ldr	r0, [pc, #308]	; (8003ea4 <enter_setup_state+0x354>)
 8003d70:	f008 fb0a 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8003d74:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <enter_setup_state+0x344>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <enter_setup_state+0x348>)
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <enter_setup_state+0x28c>)
 8003d80:	4a49      	ldr	r2, [pc, #292]	; (8003ea8 <enter_setup_state+0x358>)
 8003d82:	494a      	ldr	r1, [pc, #296]	; (8003eac <enter_setup_state+0x35c>)
 8003d84:	4847      	ldr	r0, [pc, #284]	; (8003ea4 <enter_setup_state+0x354>)
 8003d86:	f008 faff 	bl	800c388 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003d8a:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <enter_setup_state+0x344>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <enter_setup_state+0x360>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <enter_setup_state+0x28c>)
 8003d96:	4a47      	ldr	r2, [pc, #284]	; (8003eb4 <enter_setup_state+0x364>)
 8003d98:	4947      	ldr	r1, [pc, #284]	; (8003eb8 <enter_setup_state+0x368>)
 8003d9a:	4848      	ldr	r0, [pc, #288]	; (8003ebc <enter_setup_state+0x36c>)
 8003d9c:	f008 faf4 	bl	800c388 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003da0:	4847      	ldr	r0, [pc, #284]	; (8003ec0 <enter_setup_state+0x370>)
 8003da2:	f008 faf1 	bl	800c388 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003da6:	4847      	ldr	r0, [pc, #284]	; (8003ec4 <enter_setup_state+0x374>)
 8003da8:	f008 faee 	bl	800c388 <iprintf>
 }
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	08010708 	.word	0x08010708
 8003db8:	0801075c 	.word	0x0801075c
 8003dbc:	0801076c 	.word	0x0801076c
 8003dc0:	08010724 	.word	0x08010724
 8003dc4:	08010728 	.word	0x08010728
 8003dc8:	08010734 	.word	0x08010734
 8003dcc:	0801073c 	.word	0x0801073c
 8003dd0:	08010770 	.word	0x08010770
 8003dd4:	2000033c 	.word	0x2000033c
 8003dd8:	080107b0 	.word	0x080107b0
 8003ddc:	0801077c 	.word	0x0801077c
 8003de0:	08010780 	.word	0x08010780
 8003de4:	0801078c 	.word	0x0801078c
 8003de8:	08010790 	.word	0x08010790
 8003dec:	080107b4 	.word	0x080107b4
 8003df0:	080107cc 	.word	0x080107cc
 8003df4:	080107d0 	.word	0x080107d0
 8003df8:	08010828 	.word	0x08010828
 8003dfc:	080107f0 	.word	0x080107f0
 8003e00:	08010808 	.word	0x08010808
 8003e04:	0801080c 	.word	0x0801080c
 8003e08:	0801082c 	.word	0x0801082c
 8003e0c:	08010844 	.word	0x08010844
 8003e10:	08010868 	.word	0x08010868
 8003e14:	08010848 	.word	0x08010848
 8003e18:	08010864 	.word	0x08010864
 8003e1c:	0801086c 	.word	0x0801086c
 8003e20:	080108bc 	.word	0x080108bc
 8003e24:	0801087c 	.word	0x0801087c
 8003e28:	08010880 	.word	0x08010880
 8003e2c:	08010898 	.word	0x08010898
 8003e30:	0801089c 	.word	0x0801089c
 8003e34:	080108e0 	.word	0x080108e0
 8003e38:	080108c4 	.word	0x080108c4
 8003e3c:	080108c8 	.word	0x080108c8
 8003e40:	080108dc 	.word	0x080108dc
 8003e44:	080108e8 	.word	0x080108e8
 8003e48:	08010904 	.word	0x08010904
 8003e4c:	08010908 	.word	0x08010908
 8003e50:	08010928 	.word	0x08010928
 8003e54:	0801094c 	.word	0x0801094c
 8003e58:	0801092c 	.word	0x0801092c
 8003e5c:	08010948 	.word	0x08010948
 8003e60:	08010978 	.word	0x08010978
 8003e64:	08010954 	.word	0x08010954
 8003e68:	08010974 	.word	0x08010974
 8003e6c:	08010998 	.word	0x08010998
 8003e70:	0801097c 	.word	0x0801097c
 8003e74:	08010994 	.word	0x08010994
 8003e78:	080109bc 	.word	0x080109bc
 8003e7c:	080109a0 	.word	0x080109a0
 8003e80:	080109b8 	.word	0x080109b8
 8003e84:	080109e0 	.word	0x080109e0
 8003e88:	080109c4 	.word	0x080109c4
 8003e8c:	080109dc 	.word	0x080109dc
 8003e90:	080109e8 	.word	0x080109e8
 8003e94:	2000043c 	.word	0x2000043c
 8003e98:	08010a20 	.word	0x08010a20
 8003e9c:	080109f4 	.word	0x080109f4
 8003ea0:	080109fc 	.word	0x080109fc
 8003ea4:	08010a00 	.word	0x08010a00
 8003ea8:	08010a24 	.word	0x08010a24
 8003eac:	08010a30 	.word	0x08010a30
 8003eb0:	08010a74 	.word	0x08010a74
 8003eb4:	08010a34 	.word	0x08010a34
 8003eb8:	08010a54 	.word	0x08010a54
 8003ebc:	08010a58 	.word	0x08010a58
 8003ec0:	08010a7c 	.word	0x08010a7c
 8003ec4:	08010ac8 	.word	0x08010ac8

08003ec8 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7c5b      	ldrb	r3, [r3, #17]
 8003ed4:	3b61      	subs	r3, #97	; 0x61
 8003ed6:	2b17      	cmp	r3, #23
 8003ed8:	f200 82ff 	bhi.w	80044da <process_user_input+0x612>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <process_user_input+0x1c>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08004143 	.word	0x08004143
 8003ee8:	08003f45 	.word	0x08003f45
 8003eec:	080040ef 	.word	0x080040ef
 8003ef0:	080043ef 	.word	0x080043ef
 8003ef4:	080042d5 	.word	0x080042d5
 8003ef8:	08004029 	.word	0x08004029
 8003efc:	08004197 	.word	0x08004197
 8003f00:	0800409b 	.word	0x0800409b
 8003f04:	08003f99 	.word	0x08003f99
 8003f08:	0800421f 	.word	0x0800421f
 8003f0c:	080041db 	.word	0x080041db
 8003f10:	08003fd5 	.word	0x08003fd5
 8003f14:	08003fb7 	.word	0x08003fb7
 8003f18:	08004329 	.word	0x08004329
 8003f1c:	080044db 	.word	0x080044db
 8003f20:	08004433 	.word	0x08004433
 8003f24:	080044db 	.word	0x080044db
 8003f28:	080044db 	.word	0x080044db
 8003f2c:	080044db 	.word	0x080044db
 8003f30:	0800407d 	.word	0x0800407d
 8003f34:	080044db 	.word	0x080044db
 8003f38:	08004487 	.word	0x08004487
 8003f3c:	080044db 	.word	0x080044db
 8003f40:	080043ab 	.word	0x080043ab
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3308      	adds	r3, #8
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f007 fd6b 	bl	800ba24 <atof>
 8003f4e:	ec53 2b10 	vmov	r2, r3, d0
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f7fc fe67 	bl	8000c28 <__aeabi_d2f>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	eddf 0ac5 	vldr	s1, [pc, #788]	; 8004274 <process_user_input+0x3ac>
 8003f60:	ee00 3a10 	vmov	s0, r3
 8003f64:	f00b ff21 	bl	800fdaa <fminf>
 8003f68:	eef0 7a40 	vmov.f32	s15, s0
 8003f6c:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8004278 <process_user_input+0x3b0>
 8003f70:	eeb0 0a67 	vmov.f32	s0, s15
 8003f74:	f00b fefe 	bl	800fd74 <fmaxf>
 8003f78:	eef0 7a40 	vmov.f32	s15, s0
 8003f7c:	4bbf      	ldr	r3, [pc, #764]	; (800427c <process_user_input+0x3b4>)
 8003f7e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003f82:	4bbe      	ldr	r3, [pc, #760]	; (800427c <process_user_input+0x3b4>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fafe 	bl	8000588 <__aeabi_f2d>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	48bb      	ldr	r0, [pc, #748]	; (8004280 <process_user_input+0x3b8>)
 8003f92:	f008 f9f9 	bl	800c388 <iprintf>
			 break;
 8003f96:	e2a7      	b.n	80044e8 <process_user_input+0x620>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f007 fd44 	bl	800ba2a <atoi>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4ab7      	ldr	r2, [pc, #732]	; (8004284 <process_user_input+0x3bc>)
 8003fa6:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003fa8:	4bb6      	ldr	r3, [pc, #728]	; (8004284 <process_user_input+0x3bc>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4619      	mov	r1, r3
 8003fae:	48b6      	ldr	r0, [pc, #728]	; (8004288 <process_user_input+0x3c0>)
 8003fb0:	f008 f9ea 	bl	800c388 <iprintf>
			 break;
 8003fb4:	e298      	b.n	80044e8 <process_user_input+0x620>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3308      	adds	r3, #8
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f007 fd35 	bl	800ba2a <atoi>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4ab0      	ldr	r2, [pc, #704]	; (8004284 <process_user_input+0x3bc>)
 8003fc4:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 8003fc6:	4baf      	ldr	r3, [pc, #700]	; (8004284 <process_user_input+0x3bc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	48af      	ldr	r0, [pc, #700]	; (800428c <process_user_input+0x3c4>)
 8003fce:	f008 f9db 	bl	800c388 <iprintf>
			 break;
 8003fd2:	e289      	b.n	80044e8 <process_user_input+0x620>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f007 fd23 	bl	800ba24 <atof>
 8003fde:	ec53 2b10 	vmov	r2, r3, d0
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7fc fe1f 	bl	8000c28 <__aeabi_d2f>
 8003fea:	4603      	mov	r3, r0
 8003fec:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8004290 <process_user_input+0x3c8>
 8003ff0:	ee00 3a10 	vmov	s0, r3
 8003ff4:	f00b fed9 	bl	800fdaa <fminf>
 8003ff8:	eef0 7a40 	vmov.f32	s15, s0
 8003ffc:	eddf 0ab4 	vldr	s1, [pc, #720]	; 80042d0 <process_user_input+0x408>
 8004000:	eeb0 0a67 	vmov.f32	s0, s15
 8004004:	f00b feb6 	bl	800fd74 <fmaxf>
 8004008:	eef0 7a40 	vmov.f32	s15, s0
 800400c:	4b9b      	ldr	r3, [pc, #620]	; (800427c <process_user_input+0x3b4>)
 800400e:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8004012:	4b9a      	ldr	r3, [pc, #616]	; (800427c <process_user_input+0x3b4>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fab6 	bl	8000588 <__aeabi_f2d>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	489c      	ldr	r0, [pc, #624]	; (8004294 <process_user_input+0x3cc>)
 8004022:	f008 f9b1 	bl	800c388 <iprintf>
			 break;
 8004026:	e25f      	b.n	80044e8 <process_user_input+0x620>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3308      	adds	r3, #8
 800402c:	4618      	mov	r0, r3
 800402e:	f007 fcf9 	bl	800ba24 <atof>
 8004032:	ec53 2b10 	vmov	r2, r3, d0
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	f7fc fdf5 	bl	8000c28 <__aeabi_d2f>
 800403e:	4603      	mov	r3, r0
 8004040:	eddf 0a95 	vldr	s1, [pc, #596]	; 8004298 <process_user_input+0x3d0>
 8004044:	ee00 3a10 	vmov	s0, r3
 8004048:	f00b feaf 	bl	800fdaa <fminf>
 800404c:	eef0 7a40 	vmov.f32	s15, s0
 8004050:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80042d0 <process_user_input+0x408>
 8004054:	eeb0 0a67 	vmov.f32	s0, s15
 8004058:	f00b fe8c 	bl	800fd74 <fmaxf>
 800405c:	eef0 7a40 	vmov.f32	s15, s0
 8004060:	4b86      	ldr	r3, [pc, #536]	; (800427c <process_user_input+0x3b4>)
 8004062:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8004066:	4b85      	ldr	r3, [pc, #532]	; (800427c <process_user_input+0x3b4>)
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fa8c 	bl	8000588 <__aeabi_f2d>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4889      	ldr	r0, [pc, #548]	; (800429c <process_user_input+0x3d4>)
 8004076:	f008 f987 	bl	800c388 <iprintf>
			 break;
 800407a:	e235      	b.n	80044e8 <process_user_input+0x620>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3308      	adds	r3, #8
 8004080:	4618      	mov	r0, r3
 8004082:	f007 fcd2 	bl	800ba2a <atoi>
 8004086:	4603      	mov	r3, r0
 8004088:	4a7e      	ldr	r2, [pc, #504]	; (8004284 <process_user_input+0x3bc>)
 800408a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 800408c:	4b7d      	ldr	r3, [pc, #500]	; (8004284 <process_user_input+0x3bc>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4619      	mov	r1, r3
 8004092:	4883      	ldr	r0, [pc, #524]	; (80042a0 <process_user_input+0x3d8>)
 8004094:	f008 f978 	bl	800c388 <iprintf>
			 break;
 8004098:	e226      	b.n	80044e8 <process_user_input+0x620>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3308      	adds	r3, #8
 800409e:	4618      	mov	r0, r3
 80040a0:	f007 fcc0 	bl	800ba24 <atof>
 80040a4:	ec53 2b10 	vmov	r2, r3, d0
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7fc fdbc 	bl	8000c28 <__aeabi_d2f>
 80040b0:	4603      	mov	r3, r0
 80040b2:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80042a4 <process_user_input+0x3dc>
 80040b6:	ee00 3a10 	vmov	s0, r3
 80040ba:	f00b fe76 	bl	800fdaa <fminf>
 80040be:	eef0 7a40 	vmov.f32	s15, s0
 80040c2:	eddf 0a83 	vldr	s1, [pc, #524]	; 80042d0 <process_user_input+0x408>
 80040c6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ca:	f00b fe53 	bl	800fd74 <fmaxf>
 80040ce:	eef0 7a40 	vmov.f32	s15, s0
 80040d2:	4b6a      	ldr	r3, [pc, #424]	; (800427c <process_user_input+0x3b4>)
 80040d4:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <process_user_input+0x3b4>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc fa53 	bl	8000588 <__aeabi_f2d>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4870      	ldr	r0, [pc, #448]	; (80042a8 <process_user_input+0x3e0>)
 80040e8:	f008 f94e 	bl	800c388 <iprintf>
			 break;
 80040ec:	e1fc      	b.n	80044e8 <process_user_input+0x620>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3308      	adds	r3, #8
 80040f2:	4618      	mov	r0, r3
 80040f4:	f007 fc96 	bl	800ba24 <atof>
 80040f8:	ec53 2b10 	vmov	r2, r3, d0
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f7fc fd92 	bl	8000c28 <__aeabi_d2f>
 8004104:	4603      	mov	r3, r0
 8004106:	eddf 0a69 	vldr	s1, [pc, #420]	; 80042ac <process_user_input+0x3e4>
 800410a:	ee00 3a10 	vmov	s0, r3
 800410e:	f00b fe4c 	bl	800fdaa <fminf>
 8004112:	eef0 7a40 	vmov.f32	s15, s0
 8004116:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80042d0 <process_user_input+0x408>
 800411a:	eeb0 0a67 	vmov.f32	s0, s15
 800411e:	f00b fe29 	bl	800fd74 <fmaxf>
 8004122:	eef0 7a40 	vmov.f32	s15, s0
 8004126:	4b55      	ldr	r3, [pc, #340]	; (800427c <process_user_input+0x3b4>)
 8004128:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <process_user_input+0x3b4>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fa29 	bl	8000588 <__aeabi_f2d>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	485d      	ldr	r0, [pc, #372]	; (80042b0 <process_user_input+0x3e8>)
 800413c:	f008 f924 	bl	800c388 <iprintf>
			 break;
 8004140:	e1d2      	b.n	80044e8 <process_user_input+0x620>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3308      	adds	r3, #8
 8004146:	4618      	mov	r0, r3
 8004148:	f007 fc6c 	bl	800ba24 <atof>
 800414c:	ec53 2b10 	vmov	r2, r3, d0
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	f7fc fd68 	bl	8000c28 <__aeabi_d2f>
 8004158:	4603      	mov	r3, r0
 800415a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800415e:	ee00 3a10 	vmov	s0, r3
 8004162:	f00b fe22 	bl	800fdaa <fminf>
 8004166:	eef0 7a40 	vmov.f32	s15, s0
 800416a:	eddf 0a59 	vldr	s1, [pc, #356]	; 80042d0 <process_user_input+0x408>
 800416e:	eeb0 0a67 	vmov.f32	s0, s15
 8004172:	f00b fdff 	bl	800fd74 <fmaxf>
 8004176:	eef0 7a40 	vmov.f32	s15, s0
 800417a:	4b40      	ldr	r3, [pc, #256]	; (800427c <process_user_input+0x3b4>)
 800417c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004180:	4b3e      	ldr	r3, [pc, #248]	; (800427c <process_user_input+0x3b4>)
 8004182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004184:	4618      	mov	r0, r3
 8004186:	f7fc f9ff 	bl	8000588 <__aeabi_f2d>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4849      	ldr	r0, [pc, #292]	; (80042b4 <process_user_input+0x3ec>)
 8004190:	f008 f8fa 	bl	800c388 <iprintf>
			 break;
 8004194:	e1a8      	b.n	80044e8 <process_user_input+0x620>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3308      	adds	r3, #8
 800419a:	4618      	mov	r0, r3
 800419c:	f007 fc42 	bl	800ba24 <atof>
 80041a0:	ec53 2b10 	vmov	r2, r3, d0
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fd3e 	bl	8000c28 <__aeabi_d2f>
 80041ac:	4603      	mov	r3, r0
 80041ae:	eddf 0a42 	vldr	s1, [pc, #264]	; 80042b8 <process_user_input+0x3f0>
 80041b2:	ee00 3a10 	vmov	s0, r3
 80041b6:	f00b fddd 	bl	800fd74 <fmaxf>
 80041ba:	eef0 7a40 	vmov.f32	s15, s0
 80041be:	4b2f      	ldr	r3, [pc, #188]	; (800427c <process_user_input+0x3b4>)
 80041c0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 80041c4:	4b2d      	ldr	r3, [pc, #180]	; (800427c <process_user_input+0x3b4>)
 80041c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc f9dd 	bl	8000588 <__aeabi_f2d>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	483a      	ldr	r0, [pc, #232]	; (80042bc <process_user_input+0x3f4>)
 80041d4:	f008 f8d8 	bl	800c388 <iprintf>
			 break;
 80041d8:	e186      	b.n	80044e8 <process_user_input+0x620>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3308      	adds	r3, #8
 80041de:	4618      	mov	r0, r3
 80041e0:	f007 fc20 	bl	800ba24 <atof>
 80041e4:	ec53 2b10 	vmov	r2, r3, d0
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fc fd1c 	bl	8000c28 <__aeabi_d2f>
 80041f0:	4603      	mov	r3, r0
 80041f2:	eddf 0a33 	vldr	s1, [pc, #204]	; 80042c0 <process_user_input+0x3f8>
 80041f6:	ee00 3a10 	vmov	s0, r3
 80041fa:	f00b fdbb 	bl	800fd74 <fmaxf>
 80041fe:	eef0 7a40 	vmov.f32	s15, s0
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <process_user_input+0x3b4>)
 8004204:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <process_user_input+0x3b4>)
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc f9bb 	bl	8000588 <__aeabi_f2d>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	482b      	ldr	r0, [pc, #172]	; (80042c4 <process_user_input+0x3fc>)
 8004218:	f008 f8b6 	bl	800c388 <iprintf>
			 break;
 800421c:	e164      	b.n	80044e8 <process_user_input+0x620>

		 case 'j':
			 L_D = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3308      	adds	r3, #8
 8004222:	4618      	mov	r0, r3
 8004224:	f007 fbfe 	bl	800ba24 <atof>
 8004228:	ec53 2b10 	vmov	r2, r3, d0
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	f7fc fcfa 	bl	8000c28 <__aeabi_d2f>
 8004234:	4603      	mov	r3, r0
 8004236:	eddf 0a25 	vldr	s1, [pc, #148]	; 80042cc <process_user_input+0x404>
 800423a:	ee00 3a10 	vmov	s0, r3
 800423e:	f00b fdb4 	bl	800fdaa <fminf>
 8004242:	eef0 7a40 	vmov.f32	s15, s0
 8004246:	eddf 0a22 	vldr	s1, [pc, #136]	; 80042d0 <process_user_input+0x408>
 800424a:	eeb0 0a67 	vmov.f32	s0, s15
 800424e:	f00b fd91 	bl	800fd74 <fmaxf>
 8004252:	eef0 7a40 	vmov.f32	s15, s0
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <process_user_input+0x3b4>)
 8004258:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			 printf("L_D set to %f\r\n", L_D);
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <process_user_input+0x3b4>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4618      	mov	r0, r3
 8004262:	f7fc f991 	bl	8000588 <__aeabi_f2d>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4817      	ldr	r0, [pc, #92]	; (80042c8 <process_user_input+0x400>)
 800426c:	f008 f88c 	bl	800c388 <iprintf>
			 break;
 8004270:	e13a      	b.n	80044e8 <process_user_input+0x620>
 8004272:	bf00      	nop
 8004274:	44fa0000 	.word	0x44fa0000
 8004278:	42c80000 	.word	0x42c80000
 800427c:	2000033c 	.word	0x2000033c
 8004280:	08010af4 	.word	0x08010af4
 8004284:	2000043c 	.word	0x2000043c
 8004288:	08010b08 	.word	0x08010b08
 800428c:	08010b1c 	.word	0x08010b1c
 8004290:	42700000 	.word	0x42700000
 8004294:	08010b34 	.word	0x08010b34
 8004298:	42040000 	.word	0x42040000
 800429c:	08010b48 	.word	0x08010b48
 80042a0:	08010b60 	.word	0x08010b60
 80042a4:	43160000 	.word	0x43160000
 80042a8:	08010b78 	.word	0x08010b78
 80042ac:	42200000 	.word	0x42200000
 80042b0:	08010b90 	.word	0x08010b90
 80042b4:	08010ba8 	.word	0x08010ba8
 80042b8:	3a83126f 	.word	0x3a83126f
 80042bc:	08010bbc 	.word	0x08010bbc
 80042c0:	38d1b717 	.word	0x38d1b717
 80042c4:	08010bcc 	.word	0x08010bcc
 80042c8:	08010bdc 	.word	0x08010bdc
 80042cc:	3dcccccd 	.word	0x3dcccccd
 80042d0:	00000000 	.word	0x00000000
		 case 'e':
			 L_Q = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3308      	adds	r3, #8
 80042d8:	4618      	mov	r0, r3
 80042da:	f007 fba3 	bl	800ba24 <atof>
 80042de:	ec53 2b10 	vmov	r2, r3, d0
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	f7fc fc9f 	bl	8000c28 <__aeabi_d2f>
 80042ea:	4603      	mov	r3, r0
 80042ec:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 80042cc <process_user_input+0x404>
 80042f0:	ee00 3a10 	vmov	s0, r3
 80042f4:	f00b fd59 	bl	800fdaa <fminf>
 80042f8:	eef0 7a40 	vmov.f32	s15, s0
 80042fc:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 80042d0 <process_user_input+0x408>
 8004300:	eeb0 0a67 	vmov.f32	s0, s15
 8004304:	f00b fd36 	bl	800fd74 <fmaxf>
 8004308:	eef0 7a40 	vmov.f32	s15, s0
 800430c:	4b8d      	ldr	r3, [pc, #564]	; (8004544 <process_user_input+0x67c>)
 800430e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("L_Q set to %f\r\n", L_Q);
 8004312:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <process_user_input+0x67c>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc f936 	bl	8000588 <__aeabi_f2d>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4889      	ldr	r0, [pc, #548]	; (8004548 <process_user_input+0x680>)
 8004322:	f008 f831 	bl	800c388 <iprintf>
			 break;
 8004326:	e0df      	b.n	80044e8 <process_user_input+0x620>
		 case 'n':
			 PPAIRS = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3308      	adds	r3, #8
 800432c:	4618      	mov	r0, r3
 800432e:	f007 fb79 	bl	800ba24 <atof>
 8004332:	ec53 2b10 	vmov	r2, r3, d0
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f7fc fc75 	bl	8000c28 <__aeabi_d2f>
 800433e:	4603      	mov	r3, r0
 8004340:	eddf 0a82 	vldr	s1, [pc, #520]	; 800454c <process_user_input+0x684>
 8004344:	ee00 3a10 	vmov	s0, r3
 8004348:	f00b fd2f 	bl	800fdaa <fminf>
 800434c:	eef0 7a40 	vmov.f32	s15, s0
 8004350:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8004550 <process_user_input+0x688>
 8004354:	eeb0 0a67 	vmov.f32	s0, s15
 8004358:	f00b fd0c 	bl	800fd74 <fmaxf>
 800435c:	eef0 7a40 	vmov.f32	s15, s0
 8004360:	4b78      	ldr	r3, [pc, #480]	; (8004544 <process_user_input+0x67c>)
 8004362:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			 if (PPAIRS>40.0) {PPAIRS=40.0f;}
 8004366:	4b77      	ldr	r3, [pc, #476]	; (8004544 <process_user_input+0x67c>)
 8004368:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800436c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800454c <process_user_input+0x684>
 8004370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	dd02      	ble.n	8004380 <process_user_input+0x4b8>
 800437a:	4b72      	ldr	r3, [pc, #456]	; (8004544 <process_user_input+0x67c>)
 800437c:	4a75      	ldr	r2, [pc, #468]	; (8004554 <process_user_input+0x68c>)
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
			 PPAIRS = (float)( (int)PPAIRS ); // remove any decimal part
 8004380:	4b70      	ldr	r3, [pc, #448]	; (8004544 <process_user_input+0x67c>)
 8004382:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800438a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <process_user_input+0x67c>)
 8004390:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			 printf("PPAIRS set to %f\r\n", PPAIRS);
 8004394:	4b6b      	ldr	r3, [pc, #428]	; (8004544 <process_user_input+0x67c>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc f8f5 	bl	8000588 <__aeabi_f2d>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	486d      	ldr	r0, [pc, #436]	; (8004558 <process_user_input+0x690>)
 80043a4:	f007 fff0 	bl	800c388 <iprintf>
			 break;
 80043a8:	e09e      	b.n	80044e8 <process_user_input+0x620>

		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3308      	adds	r3, #8
 80043ae:	4618      	mov	r0, r3
 80043b0:	f007 fb38 	bl	800ba24 <atof>
 80043b4:	ec53 2b10 	vmov	r2, r3, d0
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7fc fc34 	bl	8000c28 <__aeabi_d2f>
 80043c0:	4603      	mov	r3, r0
 80043c2:	eddf 0a63 	vldr	s1, [pc, #396]	; 8004550 <process_user_input+0x688>
 80043c6:	ee00 3a10 	vmov	s0, r3
 80043ca:	f00b fcd3 	bl	800fd74 <fmaxf>
 80043ce:	eef0 7a40 	vmov.f32	s15, s0
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <process_user_input+0x67c>)
 80043d4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80043d8:	4b5a      	ldr	r3, [pc, #360]	; (8004544 <process_user_input+0x67c>)
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc f8d3 	bl	8000588 <__aeabi_f2d>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	485d      	ldr	r0, [pc, #372]	; (800455c <process_user_input+0x694>)
 80043e8:	f007 ffce 	bl	800c388 <iprintf>
			 break;
 80043ec:	e07c      	b.n	80044e8 <process_user_input+0x620>
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3308      	adds	r3, #8
 80043f2:	4618      	mov	r0, r3
 80043f4:	f007 fb16 	bl	800ba24 <atof>
 80043f8:	ec53 2b10 	vmov	r2, r3, d0
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	f7fc fc12 	bl	8000c28 <__aeabi_d2f>
 8004404:	4603      	mov	r3, r0
 8004406:	eddf 0a52 	vldr	s1, [pc, #328]	; 8004550 <process_user_input+0x688>
 800440a:	ee00 3a10 	vmov	s0, r3
 800440e:	f00b fcb1 	bl	800fd74 <fmaxf>
 8004412:	eef0 7a40 	vmov.f32	s15, s0
 8004416:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <process_user_input+0x67c>)
 8004418:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800441c:	4b49      	ldr	r3, [pc, #292]	; (8004544 <process_user_input+0x67c>)
 800441e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc f8b1 	bl	8000588 <__aeabi_f2d>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	484d      	ldr	r0, [pc, #308]	; (8004560 <process_user_input+0x698>)
 800442c:	f007 ffac 	bl	800c388 <iprintf>
			 break;
 8004430:	e05a      	b.n	80044e8 <process_user_input+0x620>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3308      	adds	r3, #8
 8004436:	4618      	mov	r0, r3
 8004438:	f007 faf4 	bl	800ba24 <atof>
 800443c:	ec53 2b10 	vmov	r2, r3, d0
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	f7fc fbf0 	bl	8000c28 <__aeabi_d2f>
 8004448:	4603      	mov	r3, r0
 800444a:	eddf 0a41 	vldr	s1, [pc, #260]	; 8004550 <process_user_input+0x688>
 800444e:	ee00 3a10 	vmov	s0, r3
 8004452:	f00b fc8f 	bl	800fd74 <fmaxf>
 8004456:	eef0 7a40 	vmov.f32	s15, s0
 800445a:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <process_user_input+0x67c>)
 800445c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 8004460:	4b38      	ldr	r3, [pc, #224]	; (8004544 <process_user_input+0x67c>)
 8004462:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004466:	eef1 7a67 	vneg.f32	s15, s15
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <process_user_input+0x67c>)
 800446c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 8004470:	4b34      	ldr	r3, [pc, #208]	; (8004544 <process_user_input+0x67c>)
 8004472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004474:	4618      	mov	r0, r3
 8004476:	f7fc f887 	bl	8000588 <__aeabi_f2d>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4839      	ldr	r0, [pc, #228]	; (8004564 <process_user_input+0x69c>)
 8004480:	f007 ff82 	bl	800c388 <iprintf>
			 break;
 8004484:	e030      	b.n	80044e8 <process_user_input+0x620>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3308      	adds	r3, #8
 800448a:	4618      	mov	r0, r3
 800448c:	f007 faca 	bl	800ba24 <atof>
 8004490:	ec53 2b10 	vmov	r2, r3, d0
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	f7fc fbc6 	bl	8000c28 <__aeabi_d2f>
 800449c:	4603      	mov	r3, r0
 800449e:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8004550 <process_user_input+0x688>
 80044a2:	ee00 3a10 	vmov	s0, r3
 80044a6:	f00b fc65 	bl	800fd74 <fmaxf>
 80044aa:	eef0 7a40 	vmov.f32	s15, s0
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <process_user_input+0x67c>)
 80044b0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 80044b4:	4b23      	ldr	r3, [pc, #140]	; (8004544 <process_user_input+0x67c>)
 80044b6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80044ba:	eef1 7a67 	vneg.f32	s15, s15
 80044be:	4b21      	ldr	r3, [pc, #132]	; (8004544 <process_user_input+0x67c>)
 80044c0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <process_user_input+0x67c>)
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fc f85d 	bl	8000588 <__aeabi_f2d>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4825      	ldr	r0, [pc, #148]	; (8004568 <process_user_input+0x6a0>)
 80044d4:	f007 ff58 	bl	800c388 <iprintf>
			 break;
 80044d8:	e006      	b.n	80044e8 <process_user_input+0x620>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", (char)fsmstate->cmd_buff[0]);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	7a1b      	ldrb	r3, [r3, #8]
 80044de:	4619      	mov	r1, r3
 80044e0:	4822      	ldr	r0, [pc, #136]	; (800456c <process_user_input+0x6a4>)
 80044e2:	f007 ff51 	bl	800c388 <iprintf>
			 break;
 80044e6:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <process_user_input+0x6a8>)
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	9200      	str	r2, [sp, #0]
 80044ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044f0:	f001 f8e9 	bl	80056c6 <preference_writer_ready>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <process_user_input+0x63e>
 8004500:	481b      	ldr	r0, [pc, #108]	; (8004570 <process_user_input+0x6a8>)
 8004502:	f001 f8d1 	bl	80056a8 <preference_writer_open>
	 preference_writer_flush(&prefs);
 8004506:	481a      	ldr	r0, [pc, #104]	; (8004570 <process_user_input+0x6a8>)
 8004508:	f001 f8ea 	bl	80056e0 <preference_writer_flush>
	 preference_writer_close(&prefs);
 800450c:	4818      	ldr	r0, [pc, #96]	; (8004570 <process_user_input+0x6a8>)
 800450e:	f001 f965 	bl	80057dc <preference_writer_close>
	 preference_writer_load(prefs);
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <process_user_input+0x6a8>)
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	9200      	str	r2, [sp, #0]
 8004518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800451a:	f001 f91d 	bl	8005758 <preference_writer_load>

	 enter_setup_state();
 800451e:	f7ff fb17 	bl	8003b50 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	741a      	strb	r2, [r3, #16]
	 fsmstate->cmd_id = 0;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	745a      	strb	r2, [r3, #17]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3308      	adds	r3, #8
 8004532:	2208      	movs	r2, #8
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f007 fab4 	bl	800baa4 <memset>
 }
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	2000033c 	.word	0x2000033c
 8004548:	08010bec 	.word	0x08010bec
 800454c:	42200000 	.word	0x42200000
 8004550:	00000000 	.word	0x00000000
 8004554:	42200000 	.word	0x42200000
 8004558:	08010bfc 	.word	0x08010bfc
 800455c:	08010c10 	.word	0x08010c10
 8004560:	08010c24 	.word	0x08010c24
 8004564:	08010c38 	.word	0x08010c38
 8004568:	08010c4c 	.word	0x08010c4c
 800456c:	08010c60 	.word	0x08010c60
 8004570:	2000083c 	.word	0x2000083c

08004574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457a:	f107 0314 	add.w	r3, r7, #20
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	4b38      	ldr	r3, [pc, #224]	; (8004670 <MX_GPIO_Init+0xfc>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a37      	ldr	r2, [pc, #220]	; (8004670 <MX_GPIO_Init+0xfc>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
 800459a:	4b35      	ldr	r3, [pc, #212]	; (8004670 <MX_GPIO_Init+0xfc>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	4b31      	ldr	r3, [pc, #196]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a30      	ldr	r2, [pc, #192]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	4a29      	ldr	r2, [pc, #164]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6313      	str	r3, [r2, #48]	; 0x30
 80045d2:	4b27      	ldr	r3, [pc, #156]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	4b23      	ldr	r3, [pc, #140]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	4a22      	ldr	r2, [pc, #136]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	6313      	str	r3, [r2, #48]	; 0x30
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <MX_GPIO_Init+0xfc>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin, GPIO_PIN_RESET);
 80045fa:	2200      	movs	r2, #0
 80045fc:	f648 0110 	movw	r1, #34832	; 0x8810
 8004600:	481c      	ldr	r0, [pc, #112]	; (8004674 <MX_GPIO_Init+0x100>)
 8004602:	f003 ff4f 	bl	80084a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004606:	2200      	movs	r2, #0
 8004608:	2120      	movs	r1, #32
 800460a:	481b      	ldr	r0, [pc, #108]	; (8004678 <MX_GPIO_Init+0x104>)
 800460c:	f003 ff4a 	bl	80084a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004616:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800461a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	4619      	mov	r1, r3
 8004626:	4814      	ldr	r0, [pc, #80]	; (8004678 <MX_GPIO_Init+0x104>)
 8004628:	f003 fda8 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin;
 800462c:	f648 0310 	movw	r3, #34832	; 0x8810
 8004630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004632:	2301      	movs	r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463a:	2303      	movs	r3, #3
 800463c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800463e:	f107 0314 	add.w	r3, r7, #20
 8004642:	4619      	mov	r1, r3
 8004644:	480b      	ldr	r0, [pc, #44]	; (8004674 <MX_GPIO_Init+0x100>)
 8004646:	f003 fd99 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800464a:	2320      	movs	r3, #32
 800464c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800464e:	2301      	movs	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004656:	2303      	movs	r3, #3
 8004658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465a:	f107 0314 	add.w	r3, r7, #20
 800465e:	4619      	mov	r1, r3
 8004660:	4805      	ldr	r0, [pc, #20]	; (8004678 <MX_GPIO_Init+0x104>)
 8004662:	f003 fd8b 	bl	800817c <HAL_GPIO_Init>

}
 8004666:	bf00      	nop
 8004668:	3728      	adds	r7, #40	; 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	40020000 	.word	0x40020000
 8004678:	40020800 	.word	0x40020800
 800467c:	00000000 	.word	0x00000000

08004680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	; 0x28
 8004684:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004686:	f002 f8d7 	bl	8006838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800468a:	f000 fb33 	bl	8004cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800468e:	f7ff ff71 	bl	8004574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004692:	f002 f809 	bl	80066a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004696:	f001 fe73 	bl	8006380 <MX_TIM1_Init>
  MX_CAN1_Init();
 800469a:	f7fd fb29 	bl	8001cf0 <MX_CAN1_Init>
  MX_SPI1_Init();
 800469e:	f001 f8ad 	bl	80057fc <MX_SPI1_Init>
  MX_SPI3_Init();
 80046a2:	f001 f8e3 	bl	800586c <MX_SPI3_Init>
  MX_ADC1_Init();
 80046a6:	f7fc fcc7 	bl	8001038 <MX_ADC1_Init>
  MX_ADC2_Init();
 80046aa:	f7fc fd2f 	bl	800110c <MX_ADC2_Init>
  MX_ADC3_Init();
 80046ae:	f7fc fd77 	bl	80011a0 <MX_ADC3_Init>
  MX_TIM2_Init();
 80046b2:	f001 ff1d 	bl	80064f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // enable this to use delay_us() function
 80046b6:	48af      	ldr	r0, [pc, #700]	; (8004974 <main+0x2f4>)
 80046b8:	f005 f88c 	bl	80097d4 <HAL_TIM_Base_Start>


  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 80046bc:	2106      	movs	r1, #6
 80046be:	48ae      	ldr	r0, [pc, #696]	; (8004978 <main+0x2f8>)
 80046c0:	f000 ffe1 	bl	8005686 <preference_writer_init>
  preference_writer_load(prefs);
 80046c4:	4bac      	ldr	r3, [pc, #688]	; (8004978 <main+0x2f8>)
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	9200      	str	r2, [sp, #0]
 80046ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046cc:	f001 f844 	bl	8005758 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80046d0:	4baa      	ldr	r3, [pc, #680]	; (800497c <main+0x2fc>)
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d102      	bne.n	80046e0 <main+0x60>
 80046da:	4ba8      	ldr	r3, [pc, #672]	; (800497c <main+0x2fc>)
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80046e0:	4ba6      	ldr	r3, [pc, #664]	; (800497c <main+0x2fc>)
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d102      	bne.n	80046f0 <main+0x70>
 80046ea:	4ba4      	ldr	r3, [pc, #656]	; (800497c <main+0x2fc>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80046f0:	4ba3      	ldr	r3, [pc, #652]	; (8004980 <main+0x300>)
 80046f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80046f6:	eef4 7a67 	vcmp.f32	s15, s15
 80046fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fe:	d609      	bvs.n	8004714 <main+0x94>
 8004700:	4b9f      	ldr	r3, [pc, #636]	; (8004980 <main+0x300>)
 8004702:	edd3 7a02 	vldr	s15, [r3, #8]
 8004706:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800470a:	eef4 7a47 	vcmp.f32	s15, s14
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	d102      	bne.n	800471a <main+0x9a>
 8004714:	4b9a      	ldr	r3, [pc, #616]	; (8004980 <main+0x300>)
 8004716:	4a9b      	ldr	r2, [pc, #620]	; (8004984 <main+0x304>)
 8004718:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800471a:	4b99      	ldr	r3, [pc, #612]	; (8004980 <main+0x300>)
 800471c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004720:	eef4 7a67 	vcmp.f32	s15, s15
 8004724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004728:	d609      	bvs.n	800473e <main+0xbe>
 800472a:	4b95      	ldr	r3, [pc, #596]	; (8004980 <main+0x300>)
 800472c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004730:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004734:	eef4 7a47 	vcmp.f32	s15, s14
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	d102      	bne.n	8004744 <main+0xc4>
 800473e:	4b90      	ldr	r3, [pc, #576]	; (8004980 <main+0x300>)
 8004740:	4a91      	ldr	r2, [pc, #580]	; (8004988 <main+0x308>)
 8004742:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004744:	4b8e      	ldr	r3, [pc, #568]	; (8004980 <main+0x300>)
 8004746:	edd3 7a06 	vldr	s15, [r3, #24]
 800474a:	eef4 7a67 	vcmp.f32	s15, s15
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	d609      	bvs.n	8004768 <main+0xe8>
 8004754:	4b8a      	ldr	r3, [pc, #552]	; (8004980 <main+0x300>)
 8004756:	edd3 7a06 	vldr	s15, [r3, #24]
 800475a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800475e:	eef4 7a47 	vcmp.f32	s15, s14
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	d103      	bne.n	8004770 <main+0xf0>
 8004768:	4b85      	ldr	r3, [pc, #532]	; (8004980 <main+0x300>)
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004770:	4b82      	ldr	r3, [pc, #520]	; (800497c <main+0x2fc>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d102      	bne.n	8004780 <main+0x100>
 800477a:	4b80      	ldr	r3, [pc, #512]	; (800497c <main+0x2fc>)
 800477c:	2201      	movs	r2, #1
 800477e:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004780:	4b7e      	ldr	r3, [pc, #504]	; (800497c <main+0x2fc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d102      	bne.n	8004790 <main+0x110>
 800478a:	4b7c      	ldr	r3, [pc, #496]	; (800497c <main+0x2fc>)
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8004790:	4b7a      	ldr	r3, [pc, #488]	; (800497c <main+0x2fc>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d103      	bne.n	80047a2 <main+0x122>
 800479a:	4b78      	ldr	r3, [pc, #480]	; (800497c <main+0x2fc>)
 800479c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047a0:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80047a2:	4b77      	ldr	r3, [pc, #476]	; (8004980 <main+0x300>)
 80047a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80047a8:	eef4 7a67 	vcmp.f32	s15, s15
 80047ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b0:	d609      	bvs.n	80047c6 <main+0x146>
 80047b2:	4b73      	ldr	r3, [pc, #460]	; (8004980 <main+0x300>)
 80047b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80047b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047bc:	eef4 7a47 	vcmp.f32	s15, s14
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d103      	bne.n	80047ce <main+0x14e>
 80047c6:	4b6e      	ldr	r3, [pc, #440]	; (8004980 <main+0x300>)
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80047ce:	4b6c      	ldr	r3, [pc, #432]	; (8004980 <main+0x300>)
 80047d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80047d4:	eef4 7a67 	vcmp.f32	s15, s15
 80047d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047dc:	d609      	bvs.n	80047f2 <main+0x172>
 80047de:	4b68      	ldr	r3, [pc, #416]	; (8004980 <main+0x300>)
 80047e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80047e4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80047e8:	eef4 7a47 	vcmp.f32	s15, s14
 80047ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f0:	d102      	bne.n	80047f8 <main+0x178>
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <main+0x300>)
 80047f4:	4a65      	ldr	r2, [pc, #404]	; (800498c <main+0x30c>)
 80047f6:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80047f8:	4b61      	ldr	r3, [pc, #388]	; (8004980 <main+0x300>)
 80047fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80047fe:	eef4 7a67 	vcmp.f32	s15, s15
 8004802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004806:	d609      	bvs.n	800481c <main+0x19c>
 8004808:	4b5d      	ldr	r3, [pc, #372]	; (8004980 <main+0x300>)
 800480a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800480e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004812:	eef4 7a47 	vcmp.f32	s15, s14
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	d102      	bne.n	8004822 <main+0x1a2>
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <main+0x300>)
 800481e:	4a5c      	ldr	r2, [pc, #368]	; (8004990 <main+0x310>)
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004822:	4b57      	ldr	r3, [pc, #348]	; (8004980 <main+0x300>)
 8004824:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004828:	eef4 7a67 	vcmp.f32	s15, s15
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	d609      	bvs.n	8004846 <main+0x1c6>
 8004832:	4b53      	ldr	r3, [pc, #332]	; (8004980 <main+0x300>)
 8004834:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004838:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800483c:	eef4 7a47 	vcmp.f32	s15, s14
 8004840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004844:	d102      	bne.n	800484c <main+0x1cc>
 8004846:	4b4e      	ldr	r3, [pc, #312]	; (8004980 <main+0x300>)
 8004848:	4a52      	ldr	r2, [pc, #328]	; (8004994 <main+0x314>)
 800484a:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800484c:	4b4c      	ldr	r3, [pc, #304]	; (8004980 <main+0x300>)
 800484e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004852:	eef4 7a67 	vcmp.f32	s15, s15
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	d609      	bvs.n	8004870 <main+0x1f0>
 800485c:	4b48      	ldr	r3, [pc, #288]	; (8004980 <main+0x300>)
 800485e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004862:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004866:	eef4 7a47 	vcmp.f32	s15, s14
 800486a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486e:	d102      	bne.n	8004876 <main+0x1f6>
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <main+0x300>)
 8004872:	4a49      	ldr	r2, [pc, #292]	; (8004998 <main+0x318>)
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(L_D) || L_D==-1){L_D = 0.000003f;}
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <main+0x300>)
 8004878:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800487c:	eef4 7a67 	vcmp.f32	s15, s15
 8004880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004884:	d609      	bvs.n	800489a <main+0x21a>
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <main+0x300>)
 8004888:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800488c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004890:	eef4 7a47 	vcmp.f32	s15, s14
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	d102      	bne.n	80048a0 <main+0x220>
 800489a:	4b39      	ldr	r3, [pc, #228]	; (8004980 <main+0x300>)
 800489c:	4a3f      	ldr	r2, [pc, #252]	; (800499c <main+0x31c>)
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c
  if(isnan(L_Q) || L_Q==-1){L_Q = 0.000003f;}
 80048a0:	4b37      	ldr	r3, [pc, #220]	; (8004980 <main+0x300>)
 80048a2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80048a6:	eef4 7a67 	vcmp.f32	s15, s15
 80048aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ae:	d609      	bvs.n	80048c4 <main+0x244>
 80048b0:	4b33      	ldr	r3, [pc, #204]	; (8004980 <main+0x300>)
 80048b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80048b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80048ba:	eef4 7a47 	vcmp.f32	s15, s14
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d102      	bne.n	80048ca <main+0x24a>
 80048c4:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <main+0x300>)
 80048c6:	4a35      	ldr	r2, [pc, #212]	; (800499c <main+0x31c>)
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <main+0x300>)
 80048cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80048d0:	eef4 7a67 	vcmp.f32	s15, s15
 80048d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d8:	d609      	bvs.n	80048ee <main+0x26e>
 80048da:	4b29      	ldr	r3, [pc, #164]	; (8004980 <main+0x300>)
 80048dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80048e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80048e4:	eef4 7a47 	vcmp.f32	s15, s14
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	d103      	bne.n	80048f6 <main+0x276>
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <main+0x300>)
 80048f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <main+0x300>)
 80048f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80048fc:	eef4 7a67 	vcmp.f32	s15, s15
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	d609      	bvs.n	800491a <main+0x29a>
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <main+0x300>)
 8004908:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800490c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004910:	eef4 7a47 	vcmp.f32	s15, s14
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d103      	bne.n	8004922 <main+0x2a2>
 800491a:	4b19      	ldr	r3, [pc, #100]	; (8004980 <main+0x300>)
 800491c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <main+0x300>)
 8004924:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004928:	eef4 7a67 	vcmp.f32	s15, s15
 800492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004930:	d609      	bvs.n	8004946 <main+0x2c6>
 8004932:	4b13      	ldr	r3, [pc, #76]	; (8004980 <main+0x300>)
 8004934:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004938:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800493c:	eef4 7a47 	vcmp.f32	s15, s14
 8004940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004944:	d102      	bne.n	800494c <main+0x2cc>
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <main+0x300>)
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <main+0x320>)
 800494a:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <main+0x300>)
 800494e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004952:	eef4 7a67 	vcmp.f32	s15, s15
 8004956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495a:	d623      	bvs.n	80049a4 <main+0x324>
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <main+0x300>)
 800495e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004962:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004966:	eef4 7a47 	vcmp.f32	s15, s14
 800496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496e:	d11c      	bne.n	80049aa <main+0x32a>
 8004970:	e018      	b.n	80049a4 <main+0x324>
 8004972:	bf00      	nop
 8004974:	20009590 	.word	0x20009590
 8004978:	2000083c 	.word	0x2000083c
 800497c:	2000043c 	.word	0x2000043c
 8004980:	2000033c 	.word	0x2000033c
 8004984:	447a0000 	.word	0x447a0000
 8004988:	42200000 	.word	0x42200000
 800498c:	42fa0000 	.word	0x42fa0000
 8004990:	41600000 	.word	0x41600000
 8004994:	40a00000 	.word	0x40a00000
 8004998:	41a80000 	.word	0x41a80000
 800499c:	3649539c 	.word	0x3649539c
 80049a0:	43fa0000 	.word	0x43fa0000
 80049a4:	4bb6      	ldr	r3, [pc, #728]	; (8004c80 <main+0x600>)
 80049a6:	4ab7      	ldr	r2, [pc, #732]	; (8004c84 <main+0x604>)
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 80049aa:	4bb5      	ldr	r3, [pc, #724]	; (8004c80 <main+0x600>)
 80049ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80049b0:	eef4 7a67 	vcmp.f32	s15, s15
 80049b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b8:	d702      	bvc.n	80049c0 <main+0x340>
 80049ba:	4bb1      	ldr	r3, [pc, #708]	; (8004c80 <main+0x600>)
 80049bc:	4ab2      	ldr	r2, [pc, #712]	; (8004c88 <main+0x608>)
 80049be:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 80049c0:	4baf      	ldr	r3, [pc, #700]	; (8004c80 <main+0x600>)
 80049c2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80049c6:	eef4 7a67 	vcmp.f32	s15, s15
 80049ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ce:	d702      	bvc.n	80049d6 <main+0x356>
 80049d0:	4bab      	ldr	r3, [pc, #684]	; (8004c80 <main+0x600>)
 80049d2:	4aae      	ldr	r2, [pc, #696]	; (8004c8c <main+0x60c>)
 80049d4:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 80049d6:	4baa      	ldr	r3, [pc, #680]	; (8004c80 <main+0x600>)
 80049d8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80049dc:	eef4 7a67 	vcmp.f32	s15, s15
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	d702      	bvc.n	80049ec <main+0x36c>
 80049e6:	4ba6      	ldr	r3, [pc, #664]	; (8004c80 <main+0x600>)
 80049e8:	4aa9      	ldr	r2, [pc, #676]	; (8004c90 <main+0x610>)
 80049ea:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 80049ec:	4ba4      	ldr	r3, [pc, #656]	; (8004c80 <main+0x600>)
 80049ee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80049f2:	eef4 7a67 	vcmp.f32	s15, s15
 80049f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fa:	d702      	bvc.n	8004a02 <main+0x382>
 80049fc:	4ba0      	ldr	r3, [pc, #640]	; (8004c80 <main+0x600>)
 80049fe:	4aa5      	ldr	r2, [pc, #660]	; (8004c94 <main+0x614>)
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
//  //THERMAL OBSERVER
//  if(isnan(R_TH) || R_TH==-1){R_TH = 1.25f;}
//  if(isnan(INV_M_TH) || INV_M_TH==-1){INV_M_TH = 0.02825f;}
//  if(isnan(T_AMBIENT) || T_AMBIENT==-1){T_AMBIENT = 25.0f;}

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004a02:	a39d      	add	r3, pc, #628	; (adr r3, 8004c78 <main+0x5f8>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	48a3      	ldr	r0, [pc, #652]	; (8004c98 <main+0x618>)
 8004a0a:	f007 fcbd 	bl	800c388 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8004a0e:	48a3      	ldr	r0, [pc, #652]	; (8004c9c <main+0x61c>)
 8004a10:	f7fe f9a4 	bl	8002d5c <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004a14:	f44f 7252 	mov.w	r2, #840	; 0x348
 8004a18:	2100      	movs	r1, #0
 8004a1a:	48a1      	ldr	r0, [pc, #644]	; (8004ca0 <main+0x620>)
 8004a1c:	f007 f842 	bl	800baa4 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004a20:	4ba0      	ldr	r3, [pc, #640]	; (8004ca4 <main+0x624>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	4aa0      	ldr	r2, [pc, #640]	; (8004ca8 <main+0x628>)
 8004a26:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  comm_encoder.e_zero = E_ZERO;
 8004a2a:	4b9e      	ldr	r3, [pc, #632]	; (8004ca4 <main+0x624>)
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	4a9e      	ldr	r2, [pc, #632]	; (8004ca8 <main+0x628>)
 8004a30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
  comm_encoder.ppairs = PPAIRS;
 8004a34:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <main+0x600>)
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	4a9b      	ldr	r2, [pc, #620]	; (8004ca8 <main+0x628>)
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004a3c:	2164      	movs	r1, #100	; 0x64
 8004a3e:	489a      	ldr	r0, [pc, #616]	; (8004ca8 <main+0x628>)
 8004a40:	f000 fb72 	bl	8005128 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004a44:	4b98      	ldr	r3, [pc, #608]	; (8004ca8 <main+0x628>)
 8004a46:	4a97      	ldr	r2, [pc, #604]	; (8004ca4 <main+0x624>)
 8004a48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a4c:	f102 0118 	add.w	r1, r2, #24
 8004a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a54:	4618      	mov	r0, r3
 8004a56:	f007 f817 	bl	800ba88 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004a5a:	4894      	ldr	r0, [pc, #592]	; (8004cac <main+0x62c>)
 8004a5c:	f001 ffc6 	bl	80069ec <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004a60:	4893      	ldr	r0, [pc, #588]	; (8004cb0 <main+0x630>)
 8004a62:	f001 ffc3 	bl	80069ec <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004a66:	4893      	ldr	r0, [pc, #588]	; (8004cb4 <main+0x634>)
 8004a68:	f001 ffc0 	bl	80069ec <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	2110      	movs	r1, #16
 8004a70:	4891      	ldr	r0, [pc, #580]	; (8004cb8 <main+0x638>)
 8004a72:	f003 fd17 	bl	80084a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8004a76:	2201      	movs	r2, #1
 8004a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a7c:	488e      	ldr	r0, [pc, #568]	; (8004cb8 <main+0x638>)
 8004a7e:	f003 fd11 	bl	80084a4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004a82:	2001      	movs	r0, #1
 8004a84:	f001 ff4a 	bl	800691c <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f001 ff47 	bl	800691c <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004a8e:	498b      	ldr	r1, [pc, #556]	; (8004cbc <main+0x63c>)
 8004a90:	2301      	movs	r3, #1
 8004a92:	9306      	str	r3, [sp, #24]
 8004a94:	2300      	movs	r3, #0
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9304      	str	r3, [sp, #16]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	2200      	movs	r2, #0
 8004ab0:	c903      	ldmia	r1, {r0, r1}
 8004ab2:	f7fd fb9e 	bl	80021f2 <drv_write_DCR>
  HAL_Delay(1);
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f001 ff30 	bl	800691c <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 8004abc:	4b70      	ldr	r3, [pc, #448]	; (8004c80 <main+0x600>)
 8004abe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ac2:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004cc0 <main+0x640>
 8004ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	d802      	bhi.n	8004ad6 <main+0x456>
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	e001      	b.n	8004ada <main+0x45a>
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 8004ada:	4978      	ldr	r1, [pc, #480]	; (8004cbc <main+0x63c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	9306      	str	r3, [sp, #24]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	9305      	str	r3, [sp, #20]
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	9303      	str	r3, [sp, #12]
 8004aec:	2300      	movs	r3, #0
 8004aee:	9302      	str	r3, [sp, #8]
 8004af0:	2303      	movs	r3, #3
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	2300      	movs	r3, #0
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	2301      	movs	r3, #1
 8004afa:	2200      	movs	r2, #0
 8004afc:	c903      	ldmia	r1, {r0, r1}
 8004afe:	f7fd fbe8 	bl	80022d2 <drv_write_CSACR>
  HAL_Delay(1);
 8004b02:	2001      	movs	r0, #1
 8004b04:	f001 ff0a 	bl	800691c <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 8004b08:	496c      	ldr	r1, [pc, #432]	; (8004cbc <main+0x63c>)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9306      	str	r3, [sp, #24]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9305      	str	r3, [sp, #20]
 8004b12:	2300      	movs	r3, #0
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	2300      	movs	r3, #0
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	9302      	str	r3, [sp, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	2300      	movs	r3, #0
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	2301      	movs	r3, #1
 8004b28:	2200      	movs	r2, #0
 8004b2a:	c903      	ldmia	r1, {r0, r1}
 8004b2c:	f7fd fbd1 	bl	80022d2 <drv_write_CSACR>
  HAL_Delay(1);
 8004b30:	2001      	movs	r0, #1
 8004b32:	f001 fef3 	bl	800691c <HAL_Delay>
  zero_current(&controller);
 8004b36:	4859      	ldr	r0, [pc, #356]	; (8004c9c <main+0x61c>)
 8004b38:	f7fe f8cc 	bl	8002cd4 <zero_current>
  HAL_Delay(1);
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f001 feed 	bl	800691c <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_4US, VDS_LVL_0_45);
 8004b42:	495e      	ldr	r1, [pc, #376]	; (8004cbc <main+0x63c>)
 8004b44:	2305      	movs	r3, #5
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	2201      	movs	r2, #1
 8004b54:	c903      	ldmia	r1, {r0, r1}
 8004b56:	f7fd fb8e 	bl	8002276 <drv_write_OCPCR>
  HAL_Delay(1);
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	f001 fede 	bl	800691c <HAL_Delay>
  drv_disable_gd(drv);
 8004b60:	4b56      	ldr	r3, [pc, #344]	; (8004cbc <main+0x63c>)
 8004b62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b66:	f7fd fc10 	bl	800238a <drv_disable_gd>
  HAL_Delay(1);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f001 fed6 	bl	800691c <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8004b70:	4b4a      	ldr	r3, [pc, #296]	; (8004c9c <main+0x61c>)
 8004b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b76:	4a49      	ldr	r2, [pc, #292]	; (8004c9c <main+0x61c>)
 8004b78:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4851      	ldr	r0, [pc, #324]	; (8004cc4 <main+0x644>)
 8004b80:	f007 fc02 	bl	800c388 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004b84:	2100      	movs	r1, #0
 8004b86:	4850      	ldr	r0, [pc, #320]	; (8004cc8 <main+0x648>)
 8004b88:	f004 ff56 	bl	8009a38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	484e      	ldr	r0, [pc, #312]	; (8004cc8 <main+0x648>)
 8004b90:	f004 ff52 	bl	8009a38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004b94:	2108      	movs	r1, #8
 8004b96:	484c      	ldr	r0, [pc, #304]	; (8004cc8 <main+0x648>)
 8004b98:	f004 ff4e 	bl	8009a38 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8004b9c:	484b      	ldr	r0, [pc, #300]	; (8004ccc <main+0x64c>)
 8004b9e:	f7fd f92d 	bl	8001dfc <can_rx_init>
  can_tx_init(&can_tx);
 8004ba2:	484b      	ldr	r0, [pc, #300]	; (8004cd0 <main+0x650>)
 8004ba4:	f7fd f958 	bl	8001e58 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8004ba8:	484a      	ldr	r0, [pc, #296]	; (8004cd4 <main+0x654>)
 8004baa:	f002 fcd9 	bl	8007560 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	2019      	movs	r0, #25
 8004bb4:	f003 fa19 	bl	8007fea <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8004bb8:	2201      	movs	r2, #1
 8004bba:	2101      	movs	r1, #1
 8004bbc:	2014      	movs	r0, #20
 8004bbe:	f003 fa14 	bl	8007fea <HAL_NVIC_SetPriority>

  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4944      	ldr	r1, [pc, #272]	; (8004cd8 <main+0x658>)
 8004bc6:	4845      	ldr	r0, [pc, #276]	; (8004cdc <main+0x65c>)
 8004bc8:	f005 ff93 	bl	800aaf2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8004bcc:	483e      	ldr	r0, [pc, #248]	; (8004cc8 <main+0x648>)
 8004bce:	f004 fe69 	bl	80098a4 <HAL_TIM_Base_Start_IT>

  // Check encoder initialization here
  int new_offset = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	603b      	str	r3, [r7, #0]
  ps_sample(&comm_encoder, 0.001);
 8004bd6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8004ce0 <main+0x660>
 8004bda:	4833      	ldr	r0, [pc, #204]	; (8004ca8 <main+0x628>)
 8004bdc:	f000 faf6 	bl	80051cc <ps_sample>
  HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8004be0:	2201      	movs	r2, #1
 8004be2:	2120      	movs	r1, #32
 8004be4:	483f      	ldr	r0, [pc, #252]	; (8004ce4 <main+0x664>)
 8004be6:	f003 fc5d 	bl	80084a4 <HAL_GPIO_WritePin>
  drv_enable_gd(drv);
 8004bea:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <main+0x63c>)
 8004bec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bf0:	f7fd fbb1 	bl	8002356 <drv_enable_gd>
  new_offset = check_encoder_init(&comm_encoder, &controller, &comm_encoder_cal);             // status = 1 is good
 8004bf4:	4a3c      	ldr	r2, [pc, #240]	; (8004ce8 <main+0x668>)
 8004bf6:	4929      	ldr	r1, [pc, #164]	; (8004c9c <main+0x61c>)
 8004bf8:	482b      	ldr	r0, [pc, #172]	; (8004ca8 <main+0x628>)
 8004bfa:	f7fc ff8d 	bl	8001b18 <check_encoder_init>
 8004bfe:	6038      	str	r0, [r7, #0]
  HAL_Delay(100);
 8004c00:	2064      	movs	r0, #100	; 0x64
 8004c02:	f001 fe8b 	bl	800691c <HAL_Delay>
  drv_disable_gd(drv);
 8004c06:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <main+0x63c>)
 8004c08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c0c:	f7fd fbbd 	bl	800238a <drv_disable_gd>
  HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8004c10:	2200      	movs	r2, #0
 8004c12:	2120      	movs	r1, #32
 8004c14:	4833      	ldr	r0, [pc, #204]	; (8004ce4 <main+0x664>)
 8004c16:	f003 fc45 	bl	80084a4 <HAL_GPIO_WritePin>

  E_ZERO = -1*new_offset; // TODO: need to convert float offset to int in counts?
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	425b      	negs	r3, r3
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <main+0x624>)
 8004c20:	6153      	str	r3, [r2, #20]
  comm_encoder.e_zero = E_ZERO;
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <main+0x624>)
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4a20      	ldr	r2, [pc, #128]	; (8004ca8 <main+0x628>)
 8004c28:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
  printf(" Position Sensor Electrical Offset: %d\n\r", E_ZERO);
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <main+0x624>)
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	4619      	mov	r1, r3
 8004c32:	482e      	ldr	r0, [pc, #184]	; (8004cec <main+0x66c>)
 8004c34:	f007 fba8 	bl	800c388 <iprintf>

  // initialize filter here for position sensor
  HAL_Delay(100);
 8004c38:	2064      	movs	r0, #100	; 0x64
 8004c3a:	f001 fe6f 	bl	800691c <HAL_Delay>
  ps_filter_init(&comm_encoder);
 8004c3e:	481a      	ldr	r0, [pc, #104]	; (8004ca8 <main+0x628>)
 8004c40:	f000 fd0e 	bl	8005660 <ps_filter_init>
  comm_encoder.filt_enable = 1;
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <main+0x628>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* Start the FSM */
  state.state = MENU_MODE;
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <main+0x670>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004c52:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <main+0x670>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004c58:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <main+0x670>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	70da      	strb	r2, [r3, #3]
  fsm_enter_state(&state);
 8004c5e:	4824      	ldr	r0, [pc, #144]	; (8004cf0 <main+0x670>)
 8004c60:	f7fe fdaa 	bl	80037b8 <fsm_enter_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8004c64:	2064      	movs	r0, #100	; 0x64
 8004c66:	f001 fe59 	bl	800691c <HAL_Delay>
	  drv_print_faults(drv);
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <main+0x63c>)
 8004c6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c70:	f7fd fba6 	bl	80023c0 <drv_print_faults>
	  HAL_Delay(100);
 8004c74:	e7f6      	b.n	8004c64 <main+0x5e4>
 8004c76:	bf00      	nop
 8004c78:	a0000000 	.word	0xa0000000
 8004c7c:	40019999 	.word	0x40019999
 8004c80:	2000033c 	.word	0x2000033c
 8004c84:	40a00000 	.word	0x40a00000
 8004c88:	41480000 	.word	0x41480000
 8004c8c:	c1480000 	.word	0xc1480000
 8004c90:	42820000 	.word	0x42820000
 8004c94:	c2820000 	.word	0xc2820000
 8004c98:	08010c88 	.word	0x08010c88
 8004c9c:	20000850 	.word	0x20000850
 8004ca0:	200090d8 	.word	0x200090d8
 8004ca4:	2000043c 	.word	0x2000043c
 8004ca8:	20000b5c 	.word	0x20000b5c
 8004cac:	2000023c 	.word	0x2000023c
 8004cb0:	20000284 	.word	0x20000284
 8004cb4:	200002cc 	.word	0x200002cc
 8004cb8:	40020000 	.word	0x40020000
 8004cbc:	20000ea4 	.word	0x20000ea4
 8004cc0:	42200000 	.word	0x42200000
 8004cc4:	08010cac 	.word	0x08010cac
 8004cc8:	20009548 	.word	0x20009548
 8004ccc:	20009440 	.word	0x20009440
 8004cd0:	20009420 	.word	0x20009420
 8004cd4:	20000314 	.word	0x20000314
 8004cd8:	20009490 	.word	0x20009490
 8004cdc:	200095d8 	.word	0x200095d8
 8004ce0:	3a83126f 	.word	0x3a83126f
 8004ce4:	40020800 	.word	0x40020800
 8004ce8:	20000eac 	.word	0x20000eac
 8004cec:	08010cd4 	.word	0x08010cd4
 8004cf0:	20000b48 	.word	0x20000b48

08004cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b094      	sub	sp, #80	; 0x50
 8004cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cfa:	f107 031c 	add.w	r3, r7, #28
 8004cfe:	2234      	movs	r2, #52	; 0x34
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f006 fece 	bl	800baa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d08:	f107 0308 	add.w	r3, r7, #8
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d18:	2300      	movs	r3, #0
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	4b2c      	ldr	r3, [pc, #176]	; (8004dd0 <SystemClock_Config+0xdc>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	4a2b      	ldr	r2, [pc, #172]	; (8004dd0 <SystemClock_Config+0xdc>)
 8004d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6413      	str	r3, [r2, #64]	; 0x40
 8004d28:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <SystemClock_Config+0xdc>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d34:	2300      	movs	r3, #0
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <SystemClock_Config+0xe0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <SystemClock_Config+0xe0>)
 8004d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <SystemClock_Config+0xe0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004d64:	2304      	movs	r3, #4
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004d68:	23b4      	movs	r3, #180	; 0xb4
 8004d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004d70:	2302      	movs	r3, #2
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004d74:	2302      	movs	r3, #2
 8004d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d78:	f107 031c 	add.w	r3, r7, #28
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f003 ff45 	bl	8008c0c <HAL_RCC_OscConfig>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004d88:	f000 f826 	bl	8004dd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004d8c:	f003 fba4 	bl	80084d8 <HAL_PWREx_EnableOverDrive>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004d96:	f000 f81f 	bl	8004dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d9a:	230f      	movs	r3, #15
 8004d9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004da6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	2105      	movs	r1, #5
 8004db8:	4618      	mov	r0, r3
 8004dba:	f003 fbdd 	bl	8008578 <HAL_RCC_ClockConfig>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004dc4:	f000 f808 	bl	8004dd8 <Error_Handler>
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3750      	adds	r7, #80	; 0x50
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40007000 	.word	0x40007000

08004dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	ed87 0a01 	vstr	s0, [r7, #4]
 8004df0:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004df4:	ed97 7a01 	vldr	s14, [r7, #4]
 8004df8:	edd7 7a00 	vldr	s15, [r7]
 8004dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e04:	dd01      	ble.n	8004e0a <fast_fmaxf+0x24>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	e000      	b.n	8004e0c <fast_fmaxf+0x26>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	ee07 3a90 	vmov	s15, r3
    }
 8004e10:	eeb0 0a67 	vmov.f32	s0, s15
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <fast_fminf>:

float fast_fminf(float x, float y){
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e28:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004e2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e30:	edd7 7a00 	vldr	s15, [r7]
 8004e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	d501      	bpl.n	8004e42 <fast_fminf+0x24>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	e000      	b.n	8004e44 <fast_fminf+0x26>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	ee07 3a90 	vmov	s15, r3
    }
 8004e48:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e60:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e64:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004e68:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e78:	dd0c      	ble.n	8004e94 <fmaxf3+0x3e>
 8004e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8a:	dd01      	ble.n	8004e90 <fmaxf3+0x3a>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	e00d      	b.n	8004eac <fmaxf3+0x56>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	e00b      	b.n	8004eac <fmaxf3+0x56>
 8004e94:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea4:	dd01      	ble.n	8004eaa <fmaxf3+0x54>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	e000      	b.n	8004eac <fmaxf3+0x56>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	ee07 3a90 	vmov	s15, r3
    }
 8004eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <fminf3>:

float fminf3(float x, float y, float z){
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ec8:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ecc:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004ed0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ed4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee0:	d50c      	bpl.n	8004efc <fminf3+0x3e>
 8004ee2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	d501      	bpl.n	8004ef8 <fminf3+0x3a>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	e00d      	b.n	8004f14 <fminf3+0x56>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	e00b      	b.n	8004f14 <fminf3+0x56>
 8004efc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f00:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	d501      	bpl.n	8004f12 <fminf3+0x54>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	e000      	b.n	8004f14 <fminf3+0x56>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	ee07 3a90 	vmov	s15, r3
    }
 8004f18:	eeb0 0a67 	vmov.f32	s0, s15
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	ed93 7a00 	vldr	s14, [r3]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	edd3 7a00 	vldr	s15, [r3]
 8004f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	edd3 6a00 	vldr	s13, [r3]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	edd3 7a00 	vldr	s15, [r3]
 8004f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f58:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5c:	f00a ffc4 	bl	800fee8 <sqrtf>
 8004f60:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004f64:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	dc00      	bgt.n	8004f78 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004f76:	e01b      	b.n	8004fb0 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	ed93 7a00 	vldr	s14, [r3]
 8004f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f82:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004f86:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	ed93 7a00 	vldr	s14, [r3]
 8004f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f9e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004fa2:	ed97 7a05 	vldr	s14, [r7, #20]
 8004fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	edc3 7a00 	vstr	s15, [r3]
    }
 8004fb0:	bf00      	nop
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8004fc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004fc6:	ed87 1a01 	vstr	s2, [r7, #4]
 8004fca:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8004fcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd8:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004fe0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004fe4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fec:	2201      	movs	r2, #1
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005002:	ed97 7a05 	vldr	s14, [r7, #20]
 8005006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800500e:	ee17 3a90 	vmov	r3, s15
    }
 8005012:	4618      	mov	r0, r3
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 800501e:	b480      	push	{r7}
 8005020:	b087      	sub	sp, #28
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	ed87 0a02 	vstr	s0, [r7, #8]
 800502a:	edc7 0a01 	vstr	s1, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8005030:	ed97 7a01 	vldr	s14, [r7, #4]
 8005034:	edd7 7a02 	vldr	s15, [r7, #8]
 8005038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800503c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800504e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005052:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005056:	2201      	movs	r2, #1
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	ee07 3a90 	vmov	s15, r3
 8005064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005070:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8005074:	eeb0 0a67 	vmov.f32	s0, s15
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <sin_lut>:

float sin_lut(float theta){
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 800508e:	eddf 0a17 	vldr	s1, [pc, #92]	; 80050ec <sin_lut+0x68>
 8005092:	ed97 0a01 	vldr	s0, [r7, #4]
 8005096:	f00a ff07 	bl	800fea8 <fmodf>
 800509a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 800509e:	edd7 7a01 	vldr	s15, [r7, #4]
 80050a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	d506      	bpl.n	80050ba <sin_lut+0x36>
 80050ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80050b0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80050ec <sin_lut+0x68>
 80050b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050b8:	e001      	b.n	80050be <sin_lut+0x3a>
 80050ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80050be:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 80050c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80050c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80050f0 <sin_lut+0x6c>
 80050ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d2:	ee17 3a90 	vmov	r3, s15
 80050d6:	4a07      	ldr	r2, [pc, #28]	; (80050f4 <sin_lut+0x70>)
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	ee07 3a90 	vmov	s15, r3
}
 80050e2:	eeb0 0a67 	vmov.f32	s0, s15
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40c90fdb 	.word	0x40c90fdb
 80050f0:	42a2f983 	.word	0x42a2f983
 80050f4:	08010d80 	.word	0x08010d80

080050f8 <cos_lut>:

float cos_lut(float theta){
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8005102:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005124 <cos_lut+0x2c>
 8005106:	edd7 7a01 	vldr	s15, [r7, #4]
 800510a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800510e:	eeb0 0a67 	vmov.f32	s0, s15
 8005112:	f7ff ffb7 	bl	8005084 <sin_lut>
 8005116:	eef0 7a40 	vmov.f32	s15, s0
}
 800511a:	eeb0 0a67 	vmov.f32	s0, s15
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	3fc90fdb 	.word	0x3fc90fdb

08005128 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	int raw;
	for(int i = 0; i<n; i++){
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e03c      	b.n	80051b2 <ps_warmup+0x8a>
		encoder->spi_tx_buff[0] = 0xA6;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	22a6      	movs	r2, #166	; 0xa6
 800513c:	701a      	strb	r2, [r3, #0]
		encoder->spi_tx_buff[1] = 0x00;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	705a      	strb	r2, [r3, #1]
		encoder->spi_tx_buff[2] = 0x00;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	709a      	strb	r2, [r3, #2]
		encoder->spi_tx_buff[3] = 0x00;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005156:	481b      	ldr	r0, [pc, #108]	; (80051c4 <ps_warmup+0x9c>)
 8005158:	f003 f9a4 	bl	80084a4 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	2364      	movs	r3, #100	; 0x64
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	2304      	movs	r3, #4
 8005168:	4817      	ldr	r0, [pc, #92]	; (80051c8 <ps_warmup+0xa0>)
 800516a:	f004 f876 	bl	800925a <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800516e:	bf00      	nop
 8005170:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <ps_warmup+0xa0>)
 8005172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d0f9      	beq.n	8005170 <ps_warmup+0x48>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800517c:	2201      	movs	r2, #1
 800517e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005182:	4810      	ldr	r0, [pc, #64]	; (80051c4 <ps_warmup+0x9c>)
 8005184:	f003 f98e 	bl	80084a4 <HAL_GPIO_WritePin>
		delay_us(100);
 8005188:	2064      	movs	r0, #100	; 0x64
 800518a:	f001 fa73 	bl	8006674 <delay_us>
		raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	795b      	ldrb	r3, [r3, #5]
 8005192:	041a      	lsls	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	799b      	ldrb	r3, [r3, #6]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	4313      	orrs	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	79d2      	ldrb	r2, [r2, #7]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	115b      	asrs	r3, r3, #5
 80051a4:	60bb      	str	r3, [r7, #8]
//		printf("%d\n\r", raw);
		delay_us(100);
 80051a6:	2064      	movs	r0, #100	; 0x64
 80051a8:	f001 fa64 	bl	8006674 <delay_us>
	for(int i = 0; i<n; i++){
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	dbbe      	blt.n	8005138 <ps_warmup+0x10>
	}
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40020000 	.word	0x40020000
 80051c8:	200094ec 	.word	0x200094ec

080051cc <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08e      	sub	sp, #56	; 0x38
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	611a      	str	r2, [r3, #16]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 80051e0:	2313      	movs	r3, #19
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e4:	e011      	b.n	800520a <ps_sample+0x3e>
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	3b01      	subs	r3, #1
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	3304      	adds	r3, #4
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	3304      	adds	r3, #4
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	3304      	adds	r3, #4
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	3b01      	subs	r3, #1
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	dcea      	bgt.n	80051e6 <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_buff[0] = 0xA6;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	22a6      	movs	r2, #166	; 0xa6
 8005214:	701a      	strb	r2, [r3, #0]
	encoder->spi_tx_buff[1] = 0x00;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	705a      	strb	r2, [r3, #1]
	encoder->spi_tx_buff[2] = 0x00;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	709a      	strb	r2, [r3, #2]
	encoder->spi_tx_buff[3] = 0x00;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	70da      	strb	r2, [r3, #3]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8005228:	2200      	movs	r2, #0
 800522a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800522e:	48b5      	ldr	r0, [pc, #724]	; (8005504 <ps_sample+0x338>)
 8005230:	f003 f938 	bl	80084a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	2364      	movs	r3, #100	; 0x64
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2304      	movs	r3, #4
 8005240:	48b1      	ldr	r0, [pc, #708]	; (8005508 <ps_sample+0x33c>)
 8005242:	f004 f80a 	bl	800925a <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8005246:	bf00      	nop
 8005248:	4baf      	ldr	r3, [pc, #700]	; (8005508 <ps_sample+0x33c>)
 800524a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d0f9      	beq.n	8005248 <ps_sample+0x7c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8005254:	2201      	movs	r2, #1
 8005256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800525a:	48aa      	ldr	r0, [pc, #680]	; (8005504 <ps_sample+0x338>)
 800525c:	f003 f922 	bl	80084a4 <HAL_GPIO_WritePin>

	encoder->raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	795b      	ldrb	r3, [r3, #5]
 8005264:	041a      	lsls	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	799b      	ldrb	r3, [r3, #6]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	4313      	orrs	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	79d2      	ldrb	r2, [r2, #7]
 8005272:	4313      	orrs	r3, r2
 8005274:	115b      	asrs	r3, r3, #5
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	609a      	str	r2, [r3, #8]

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>LUT_SHIFT];				// lookup table lower entry
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	0b1b      	lsrs	r3, r3, #12
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	3350      	adds	r3, #80	; 0x50
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>LUT_SHIFT)+1)%128];		// lookup table higher entry
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	0b1b      	lsrs	r3, r3, #12
 8005294:	3301      	adds	r3, #1
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	3350      	adds	r3, #80	; 0x50
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>LUT_SHIFT)<<LUT_SHIFT))>>LUT_SHIFT);     // Interpolate between lookup table entries
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	0b1a      	lsrs	r2, r3, #12
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw + off_interp;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	461a      	mov	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052d8:	4b8c      	ldr	r3, [pc, #560]	; (800550c <ps_sample+0x340>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052e6:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8005510 <ps_sample+0x344>
 80052ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	edc3 7a03 	vstr	s15, [r3, #12]
	int int_angle = encoder->angle_singleturn;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80052fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052fe:	ee17 3a90 	vmov	r3, s15
 8005302:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	ed93 7a03 	vldr	s14, [r3, #12]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005318:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005514 <ps_sample+0x348>
 800531c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	edc3 7a03 	vstr	s15, [r3, #12]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	edd3 7a03 	vldr	s15, [r3, #12]
 800532c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005334:	d507      	bpl.n	8005346 <ps_sample+0x17a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	edd3 7a03 	vldr	s15, [r3, #12]
 800533c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005514 <ps_sample+0x348>
 8005340:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005344:	e002      	b.n	800534c <ps_sample+0x180>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	edd3 7a03 	vldr	s15, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800535e:	4b6b      	ldr	r3, [pc, #428]	; (800550c <ps_sample+0x340>)
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800536c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005370:	eddf 6a67 	vldr	s13, [pc, #412]	; 8005510 <ps_sample+0x344>
 8005374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	int_angle = (int)encoder->elec_angle;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005388:	ee17 3a90 	vmov	r3, s15
 800538c:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a2:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8005514 <ps_sample+0x348>
 80053a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80053b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	d507      	bpl.n	80053d0 <ps_sample+0x204>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80053c6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005514 <ps_sample+0x348>
 80053ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053ce:	e002      	b.n	80053d6 <ps_sample+0x20a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	/* Rollover */
	int rollover = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80053ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053f0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 80053f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005518 <ps_sample+0x34c>
 80053fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005404:	dd03      	ble.n	800540e <ps_sample+0x242>
 8005406:	f04f 33ff 	mov.w	r3, #4294967295
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
 800540c:	e00a      	b.n	8005424 <ps_sample+0x258>
	else if(angle_diff < -PI_F){rollover = 1;}
 800540e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005412:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800551c <ps_sample+0x350>
 8005416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	d501      	bpl.n	8005424 <ps_sample+0x258>
 8005420:	2301      	movs	r3, #1
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28
	encoder->turns += rollover;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	441a      	add	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	if(!encoder->first_sample){
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <ps_sample+0x282>
		encoder->turns = 0;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		encoder->first_sample = 1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	ed93 7a03 	vldr	s14, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005462:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8005514 <ps_sample+0x348>
 8005466:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800546a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	edc3 7a05 	vstr	s15, [r3, #20]

	// old velocity calculation
//	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));

	// modified to match MBed code calculation of velocity!
	encoder->single_vel = (encoder->angle_multiturn[0] - encoder->angle_multiturn[1])/dt;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	ed93 7a05 	vldr	s14, [r3, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005480:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005484:	ed97 7a00 	vldr	s14, [r7]
 8005488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	//ADD FILTER HERE TO THE UNFILTERED VELOCITY
	if ( ((encoder->single_vel > (V_U12_MAX*RATIO)) || (encoder->single_vel < (V_U12_MIN*RATIO))) && (encoder->filt_enable==1)) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8005498:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005520 <ps_sample+0x354>
 800549c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a4:	dc09      	bgt.n	80054ba <ps_sample+0x2ee>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80054ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005524 <ps_sample+0x358>
 80054b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b8:	d513      	bpl.n	80054e2 <ps_sample+0x316>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d10e      	bne.n	80054e2 <ps_sample+0x316>
		encoder->angle_multiturn[0] = encoder->filt_prev_mech;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	615a      	str	r2, [r3, #20]
		encoder->elec_angle = encoder->filt_prev_elec;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	665a      	str	r2, [r3, #100]	; 0x64
		encoder->single_vel = 0.0;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80054e0:	e008      	b.n	80054f4 <ps_sample+0x328>
	}
	else {
		encoder->filt_prev_mech = encoder->angle_multiturn[0];
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	67da      	str	r2, [r3, #124]	; 0x7c
		encoder->filt_prev_elec = encoder->elec_angle;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	float sum = encoder->single_vel;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 1; i < N_POS_SAMPLES; i++){
 80054fc:	2301      	movs	r3, #1
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	e037      	b.n	8005572 <ps_sample+0x3a6>
 8005502:	bf00      	nop
 8005504:	40020000 	.word	0x40020000
 8005508:	200094ec 	.word	0x200094ec
 800550c:	2000043c 	.word	0x2000043c
 8005510:	49000000 	.word	0x49000000
 8005514:	40c90fdb 	.word	0x40c90fdb
 8005518:	40490fdb 	.word	0x40490fdb
 800551c:	c0490fdb 	.word	0xc0490fdb
 8005520:	43c30000 	.word	0x43c30000
 8005524:	c3c30000 	.word	0xc3c30000
		encoder->vel_vec[N_POS_SAMPLES - i] = encoder->vel_vec[N_POS_SAMPLES-i-1];
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f1c3 0213 	rsb	r2, r3, #19
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f1c3 0314 	rsb	r3, r3, #20
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	3220      	adds	r2, #32
 8005538:	0092      	lsls	r2, r2, #2
 800553a:	440a      	add	r2, r1
 800553c:	3204      	adds	r2, #4
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	3320      	adds	r3, #32
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	3304      	adds	r3, #4
 800554a:	601a      	str	r2, [r3, #0]
		sum += encoder->vel_vec[N_POS_SAMPLES-i];
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f1c3 0314 	rsb	r3, r3, #20
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	3320      	adds	r3, #32
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	3304      	adds	r3, #4
 800555c:	edd3 7a00 	vldr	s15, [r3]
 8005560:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005568:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for (int i = 1; i < N_POS_SAMPLES; i++){
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	3301      	adds	r3, #1
 8005570:	623b      	str	r3, [r7, #32]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	2b13      	cmp	r3, #19
 8005576:	ddd7      	ble.n	8005528 <ps_sample+0x35c>
		}
	encoder->vel_vec[0] = encoder->single_vel;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	encoder->velocity =  sum/((float)N_POS_SAMPLES);
 8005584:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005588:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800558c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80055a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

}
 80055ac:	bf00      	nop
 80055ae:	3730      	adds	r7, #48	; 0x30
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <ps_print>:

void ps_print(EncoderStruct * encoder){
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	printf("   Raw: %u", (unsigned int)encoder->raw);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4619      	mov	r1, r3
 80055c2:	4820      	ldr	r0, [pc, #128]	; (8005644 <ps_print+0x90>)
 80055c4:	f006 fee0 	bl	800c388 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ce:	4619      	mov	r1, r3
 80055d0:	481d      	ldr	r0, [pc, #116]	; (8005648 <ps_print+0x94>)
 80055d2:	f006 fed9 	bl	800c388 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fa ffd4 	bl	8000588 <__aeabi_f2d>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4819      	ldr	r0, [pc, #100]	; (800564c <ps_print+0x98>)
 80055e6:	f006 fecf 	bl	800c388 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fa ffca 	bl	8000588 <__aeabi_f2d>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4815      	ldr	r0, [pc, #84]	; (8005650 <ps_print+0x9c>)
 80055fa:	f006 fec5 	bl	800c388 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa ffc0 	bl	8000588 <__aeabi_f2d>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4811      	ldr	r0, [pc, #68]	; (8005654 <ps_print+0xa0>)
 800560e:	f006 febb 	bl	800c388 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005618:	4619      	mov	r1, r3
 800561a:	480f      	ldr	r0, [pc, #60]	; (8005658 <ps_print+0xa4>)
 800561c:	f006 feb4 	bl	800c388 <iprintf>
	printf("   Vel: %f\n\r", encoder->velocity);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005624:	4618      	mov	r0, r3
 8005626:	f7fa ffaf 	bl	8000588 <__aeabi_f2d>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	480b      	ldr	r0, [pc, #44]	; (800565c <ps_print+0xa8>)
 8005630:	f006 feaa 	bl	800c388 <iprintf>
	delay_us(10000);
 8005634:	f242 7010 	movw	r0, #10000	; 0x2710
 8005638:	f001 f81c 	bl	8006674 <delay_us>
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	08010d00 	.word	0x08010d00
 8005648:	08010d0c 	.word	0x08010d0c
 800564c:	08010d24 	.word	0x08010d24
 8005650:	08010d38 	.word	0x08010d38
 8005654:	08010d4c 	.word	0x08010d4c
 8005658:	08010d60 	.word	0x08010d60
 800565c:	08010d70 	.word	0x08010d70

08005660 <ps_filter_init>:

void WriteLUT(EncoderStruct * encoder,  int new_lut[N_LUT]){
	memcpy(encoder->offset_lut, new_lut, sizeof(encoder->offset_lut));
}

void ps_filter_init(EncoderStruct * encoder){
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	encoder->filt_prev_mech = encoder->angle_multiturn[0];
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	67da      	str	r2, [r3, #124]	; 0x7c
	encoder->filt_prev_elec = encoder->elec_angle;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7fc ff87 	bl	80025a8 <flash_writer_init>
	pr->sector = sector;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	60da      	str	r2, [r3, #12]
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc ff96 	bl	80025e4 <flash_writer_open>
    pr->ready = true;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	741a      	strb	r2, [r3, #16]
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 80056c6:	b084      	sub	sp, #16
 80056c8:	b490      	push	{r4, r7}
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	f107 0408 	add.w	r4, r7, #8
 80056d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 80056d4:	7e3b      	ldrb	r3, [r7, #24]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc90      	pop	{r4, r7}
 80056dc:	b004      	add	sp, #16
 80056de:	4770      	bx	lr

080056e0 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e00d      	b.n	800570a <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 80056ee:	68f9      	ldr	r1, [r7, #12]
 80056f0:	4a17      	ldr	r2, [pc, #92]	; (8005750 <preference_writer_flush+0x70>)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	460b      	mov	r3, r1
 80056fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8005700:	f7fc ff8c 	bl	800261c <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2bff      	cmp	r3, #255	; 0xff
 800570e:	ddee      	ble.n	80056ee <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005710:	e012      	b.n	8005738 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800571a:	4a0e      	ldr	r2, [pc, #56]	; (8005754 <preference_writer_flush+0x74>)
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	edd3 7a00 	vldr	s15, [r3]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	eeb0 0a67 	vmov.f32	s0, s15
 800572a:	460b      	mov	r3, r1
 800572c:	ca07      	ldmia	r2, {r0, r1, r2}
 800572e:	f7fc ff8b 	bl	8002648 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800573e:	dbe8      	blt.n	8005712 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	741a      	strb	r2, [r3, #16]
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2000043c 	.word	0x2000043c
 8005754:	2000033c 	.word	0x2000033c

08005758 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005758:	b084      	sub	sp, #16
 800575a:	b590      	push	{r4, r7, lr}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	f107 0418 	add.w	r4, r7, #24
 8005764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005768:	2300      	movs	r3, #0
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	e00d      	b.n	800578a <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f107 0218 	add.w	r2, r7, #24
 8005774:	ca07      	ldmia	r2, {r0, r1, r2}
 8005776:	f7fc ff8d 	bl	8002694 <flash_read_int>
 800577a:	4602      	mov	r2, r0
 800577c:	4915      	ldr	r1, [pc, #84]	; (80057d4 <preference_writer_load+0x7c>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3301      	adds	r3, #1
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2bff      	cmp	r3, #255	; 0xff
 800578e:	ddee      	ble.n	800576e <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8005790:	e013      	b.n	80057ba <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 800579a:	4613      	mov	r3, r2
 800579c:	f107 0218 	add.w	r2, r7, #24
 80057a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80057a2:	f7fc ff8d 	bl	80026c0 <flash_read_float>
 80057a6:	eef0 7a40 	vmov.f32	s15, s0
 80057aa:	4a0b      	ldr	r2, [pc, #44]	; (80057d8 <preference_writer_load+0x80>)
 80057ac:	00a3      	lsls	r3, r4, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3301      	adds	r3, #1
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80057c0:	dbe7      	blt.n	8005792 <preference_writer_load+0x3a>
    }
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80057ce:	b004      	add	sp, #16
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	2000043c 	.word	0x2000043c
 80057d8:	2000033c 	.word	0x2000033c

080057dc <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fc ff44 	bl	800267a <flash_writer_close>
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005800:	4b18      	ldr	r3, [pc, #96]	; (8005864 <MX_SPI1_Init+0x68>)
 8005802:	4a19      	ldr	r2, [pc, #100]	; (8005868 <MX_SPI1_Init+0x6c>)
 8005804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005806:	4b17      	ldr	r3, [pc, #92]	; (8005864 <MX_SPI1_Init+0x68>)
 8005808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800580c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800580e:	4b15      	ldr	r3, [pc, #84]	; (8005864 <MX_SPI1_Init+0x68>)
 8005810:	2200      	movs	r2, #0
 8005812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005814:	4b13      	ldr	r3, [pc, #76]	; (8005864 <MX_SPI1_Init+0x68>)
 8005816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800581a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800581c:	4b11      	ldr	r3, [pc, #68]	; (8005864 <MX_SPI1_Init+0x68>)
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <MX_SPI1_Init+0x68>)
 8005824:	2201      	movs	r2, #1
 8005826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <MX_SPI1_Init+0x68>)
 800582a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <MX_SPI1_Init+0x68>)
 8005832:	2228      	movs	r2, #40	; 0x28
 8005834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <MX_SPI1_Init+0x68>)
 8005838:	2200      	movs	r2, #0
 800583a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <MX_SPI1_Init+0x68>)
 800583e:	2200      	movs	r2, #0
 8005840:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <MX_SPI1_Init+0x68>)
 8005844:	2200      	movs	r2, #0
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <MX_SPI1_Init+0x68>)
 800584a:	220a      	movs	r2, #10
 800584c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800584e:	4805      	ldr	r0, [pc, #20]	; (8005864 <MX_SPI1_Init+0x68>)
 8005850:	f003 fc7a 	bl	8009148 <HAL_SPI_Init>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800585a:	f7ff fabd 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20009494 	.word	0x20009494
 8005868:	40013000 	.word	0x40013000

0800586c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005870:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <MX_SPI3_Init+0x64>)
 8005872:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <MX_SPI3_Init+0x68>)
 8005874:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005876:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <MX_SPI3_Init+0x64>)
 8005878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800587c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800587e:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <MX_SPI3_Init+0x64>)
 8005880:	2200      	movs	r2, #0
 8005882:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <MX_SPI3_Init+0x64>)
 8005886:	2200      	movs	r2, #0
 8005888:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <MX_SPI3_Init+0x64>)
 800588c:	2200      	movs	r2, #0
 800588e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005890:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <MX_SPI3_Init+0x64>)
 8005892:	2200      	movs	r2, #0
 8005894:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005896:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <MX_SPI3_Init+0x64>)
 8005898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <MX_SPI3_Init+0x64>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <MX_SPI3_Init+0x64>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <MX_SPI3_Init+0x64>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <MX_SPI3_Init+0x64>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <MX_SPI3_Init+0x64>)
 80058b8:	220a      	movs	r2, #10
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80058bc:	4804      	ldr	r0, [pc, #16]	; (80058d0 <MX_SPI3_Init+0x64>)
 80058be:	f003 fc43 	bl	8009148 <HAL_SPI_Init>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80058c8:	f7ff fa86 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80058cc:	bf00      	nop
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	200094ec 	.word	0x200094ec
 80058d4:	40003c00 	.word	0x40003c00

080058d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08c      	sub	sp, #48	; 0x30
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e0:	f107 031c 	add.w	r3, r7, #28
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a32      	ldr	r2, [pc, #200]	; (80059c0 <HAL_SPI_MspInit+0xe8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d12c      	bne.n	8005954 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005908:	6453      	str	r3, [r2, #68]	; 0x44
 800590a:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 800590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	6313      	str	r3, [r2, #48]	; 0x30
 8005926:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005932:	23e0      	movs	r3, #224	; 0xe0
 8005934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005936:	2302      	movs	r3, #2
 8005938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800593e:	2303      	movs	r3, #3
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005942:	2305      	movs	r3, #5
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005946:	f107 031c 	add.w	r3, r7, #28
 800594a:	4619      	mov	r1, r3
 800594c:	481e      	ldr	r0, [pc, #120]	; (80059c8 <HAL_SPI_MspInit+0xf0>)
 800594e:	f002 fc15 	bl	800817c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005952:	e031      	b.n	80059b8 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <HAL_SPI_MspInit+0xf4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d12c      	bne.n	80059b8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800595e:	2300      	movs	r3, #0
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596c:	6413      	str	r3, [r2, #64]	; 0x40
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 8005984:	f043 0304 	orr.w	r3, r3, #4
 8005988:	6313      	str	r3, [r2, #48]	; 0x30
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <HAL_SPI_MspInit+0xec>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005996:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800599a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800599c:	2302      	movs	r3, #2
 800599e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059a4:	2303      	movs	r3, #3
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80059a8:	2306      	movs	r3, #6
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ac:	f107 031c 	add.w	r3, r7, #28
 80059b0:	4619      	mov	r1, r3
 80059b2:	4807      	ldr	r0, [pc, #28]	; (80059d0 <HAL_SPI_MspInit+0xf8>)
 80059b4:	f002 fbe2 	bl	800817c <HAL_GPIO_Init>
}
 80059b8:	bf00      	nop
 80059ba:	3730      	adds	r7, #48	; 0x30
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40013000 	.word	0x40013000
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40020000 	.word	0x40020000
 80059cc:	40003c00 	.word	0x40003c00
 80059d0:	40020800 	.word	0x40020800

080059d4 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <FLASH_Unlock+0x24>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	da05      	bge.n	80059ec <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <FLASH_Unlock+0x24>)
 80059e2:	4a06      	ldr	r2, [pc, #24]	; (80059fc <FLASH_Unlock+0x28>)
 80059e4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80059e6:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <FLASH_Unlock+0x24>)
 80059e8:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <FLASH_Unlock+0x2c>)
 80059ea:	605a      	str	r2, [r3, #4]
  }  
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40023c00 	.word	0x40023c00
 80059fc:	45670123 	.word	0x45670123
 8005a00:	cdef89ab 	.word	0xcdef89ab

08005a04 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <FLASH_Lock+0x1c>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	4a04      	ldr	r2, [pc, #16]	; (8005a20 <FLASH_Lock+0x1c>)
 8005a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	6113      	str	r3, [r2, #16]
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40023c00 	.word	0x40023c00

08005a24 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8005a34:	2309      	movs	r3, #9
 8005a36:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e010      	b.n	8005a66 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d103      	bne.n	8005a52 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e009      	b.n	8005a66 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d103      	bne.n	8005a60 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e002      	b.n	8005a66 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005a66:	f000 f8bf 	bl	8005be8 <FLASH_WaitForLastOperation2>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	d12f      	bne.n	8005ad4 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	4916      	ldr	r1, [pc, #88]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8005a8c:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005a92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a96:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8005a98:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	4a0f      	ldr	r2, [pc, #60]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab2:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005ab4:	f000 f898 	bl	8005be8 <FLASH_WaitForLastOperation2>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8005abc:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005ac2:	f023 0302 	bic.w	r3, r3, #2
 8005ac6:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <FLASH_EraseSector+0xbc>)
 8005ace:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ad2:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023c00 	.word	0x40023c00

08005ae4 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8005aee:	2309      	movs	r3, #9
 8005af0:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8005af2:	f000 f879 	bl	8005be8 <FLASH_WaitForLastOperation2>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b09      	cmp	r3, #9
 8005afe:	d11e      	bne.n	8005b3e <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	4a10      	ldr	r2, [pc, #64]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b16:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8005b2a:	f000 f85d 	bl	8005be8 <FLASH_WaitForLastOperation2>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005b32:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <FLASH_ProgramWord+0x64>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40023c00 	.word	0x40023c00

08005b4c <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <FLASH_ClearFlag+0x1c>)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60d3      	str	r3, [r2, #12]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40023c00 	.word	0x40023c00

08005b6c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8005b72:	2309      	movs	r3, #9
 8005b74:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8005b76:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <FLASH_GetStatus+0x78>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b82:	d102      	bne.n	8005b8a <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8005b84:	2301      	movs	r3, #1
 8005b86:	71fb      	strb	r3, [r7, #7]
 8005b88:	e025      	b.n	8005bd6 <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8005b8a:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <FLASH_GetStatus+0x78>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 8005b96:	2306      	movs	r3, #6
 8005b98:	71fb      	strb	r3, [r7, #7]
 8005b9a:	e01c      	b.n	8005bd6 <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8005b9c:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <FLASH_GetStatus+0x78>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	71fb      	strb	r3, [r7, #7]
 8005bac:	e013      	b.n	8005bd6 <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <FLASH_GetStatus+0x78>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 8005bba:	2307      	movs	r3, #7
 8005bbc:	71fb      	strb	r3, [r7, #7]
 8005bbe:	e00a      	b.n	8005bd6 <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8005bc0:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <FLASH_GetStatus+0x78>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 8005bcc:	2308      	movs	r3, #8
 8005bce:	71fb      	strb	r3, [r7, #7]
 8005bd0:	e001      	b.n	8005bd6 <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 8005bd2:	2309      	movs	r3, #9
 8005bd4:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40023c00 	.word	0x40023c00

08005be8 <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 8005bee:	2309      	movs	r3, #9
 8005bf0:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8005bf2:	f7ff ffbb 	bl	8005b6c <FLASH_GetStatus>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 8005bfa:	e003      	b.n	8005c04 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 8005bfc:	f7ff ffb6 	bl	8005b6c <FLASH_GetStatus>
 8005c00:	4603      	mov	r3, r0
 8005c02:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d0f7      	beq.n	8005bfc <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	b2db      	uxtb	r3, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_MspInit+0x4c>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <HAL_MspInit+0x4c>)
 8005c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <HAL_MspInit+0x4c>)
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_MspInit+0x4c>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a08      	ldr	r2, [pc, #32]	; (8005c64 <HAL_MspInit+0x4c>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <HAL_MspInit+0x4c>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005c56:	2007      	movs	r0, #7
 8005c58:	f002 f9bc 	bl	8007fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40023800 	.word	0x40023800

08005c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c76:	b480      	push	{r7}
 8005c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c7a:	e7fe      	b.n	8005c7a <HardFault_Handler+0x4>

08005c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c80:	e7fe      	b.n	8005c80 <MemManage_Handler+0x4>

08005c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c82:	b480      	push	{r7}
 8005c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c86:	e7fe      	b.n	8005c86 <BusFault_Handler+0x4>

08005c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c8c:	e7fe      	b.n	8005c8c <UsageFault_Handler+0x4>

08005c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c92:	bf00      	nop
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cae:	bf00      	nop
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cbc:	f000 fe0e 	bl	80068dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cc0:	bf00      	nop
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc6:	b095      	sub	sp, #84	; 0x54
 8005cc8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005cca:	4883      	ldr	r0, [pc, #524]	; (8005ed8 <CAN1_RX0_IRQHandler+0x214>)
 8005ccc:	f001 fe79 	bl	80079c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005cd0:	4b82      	ldr	r3, [pc, #520]	; (8005edc <CAN1_RX0_IRQHandler+0x218>)
 8005cd2:	4a83      	ldr	r2, [pc, #524]	; (8005ee0 <CAN1_RX0_IRQHandler+0x21c>)
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4880      	ldr	r0, [pc, #512]	; (8005ed8 <CAN1_RX0_IRQHandler+0x214>)
 8005cd8:	f001 fd61 	bl	800779e <HAL_CAN_GetRxMessage>
  uint32_t TxMailbox;
  pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 8005cdc:	4b81      	ldr	r3, [pc, #516]	; (8005ee4 <CAN1_RX0_IRQHandler+0x220>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	4a81      	ldr	r2, [pc, #516]	; (8005ee8 <CAN1_RX0_IRQHandler+0x224>)
 8005ce4:	ed92 7a05 	vldr	s14, [r2, #20]
 8005ce8:	4a80      	ldr	r2, [pc, #512]	; (8005eec <CAN1_RX0_IRQHandler+0x228>)
 8005cea:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005cee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005cf2:	4a7d      	ldr	r2, [pc, #500]	; (8005ee8 <CAN1_RX0_IRQHandler+0x224>)
 8005cf4:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8005cf8:	4a7c      	ldr	r2, [pc, #496]	; (8005eec <CAN1_RX0_IRQHandler+0x228>)
 8005cfa:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005cfe:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005d02:	4a7b      	ldr	r2, [pc, #492]	; (8005ef0 <CAN1_RX0_IRQHandler+0x22c>)
 8005d04:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8005d08:	4a78      	ldr	r2, [pc, #480]	; (8005eec <CAN1_RX0_IRQHandler+0x228>)
 8005d0a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d12:	4a76      	ldr	r2, [pc, #472]	; (8005eec <CAN1_RX0_IRQHandler+0x228>)
 8005d14:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1c:	eeb0 1a67 	vmov.f32	s2, s15
 8005d20:	eef0 0a46 	vmov.f32	s1, s12
 8005d24:	eeb0 0a66 	vmov.f32	s0, s13
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4872      	ldr	r0, [pc, #456]	; (8005ef4 <CAN1_RX0_IRQHandler+0x230>)
 8005d2c:	f7fc f8ae 	bl	8001e8c <pack_reply>
  HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	4a71      	ldr	r2, [pc, #452]	; (8005ef8 <CAN1_RX0_IRQHandler+0x234>)
 8005d34:	4971      	ldr	r1, [pc, #452]	; (8005efc <CAN1_RX0_IRQHandler+0x238>)
 8005d36:	4868      	ldr	r0, [pc, #416]	; (8005ed8 <CAN1_RX0_IRQHandler+0x214>)
 8005d38:	f001 fc56 	bl	80075e8 <HAL_CAN_AddTxMessage>

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005d3c:	4b70      	ldr	r3, [pc, #448]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d3e:	785a      	ldrb	r2, [r3, #1]
 8005d40:	4b6f      	ldr	r3, [pc, #444]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d42:	789b      	ldrb	r3, [r3, #2]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b6d      	ldr	r3, [pc, #436]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	4b6b      	ldr	r3, [pc, #428]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d52:	791b      	ldrb	r3, [r3, #4]
 8005d54:	4013      	ands	r3, r2
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	4b69      	ldr	r3, [pc, #420]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d5a:	795b      	ldrb	r3, [r3, #5]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	4b67      	ldr	r3, [pc, #412]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d62:	799b      	ldrb	r3, [r3, #6]
 8005d64:	4013      	ands	r3, r2
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	4b65      	ldr	r3, [pc, #404]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d6a:	79db      	ldrb	r3, [r3, #7]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2bff      	cmp	r3, #255	; 0xff
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d7c:	7a1b      	ldrb	r3, [r3, #8]
 8005d7e:	2bfc      	cmp	r3, #252	; 0xfc
 8005d80:	bf0c      	ite	eq
 8005d82:	2301      	moveq	r3, #1
 8005d84:	2300      	movne	r3, #0
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	4013      	ands	r3, r2
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <CAN1_RX0_IRQHandler+0xd6>
	  update_fsm(&state, MOTOR_CMD);
 8005d90:	216d      	movs	r1, #109	; 0x6d
 8005d92:	485c      	ldr	r0, [pc, #368]	; (8005f04 <CAN1_RX0_IRQHandler+0x240>)
 8005d94:	f7fd fdda 	bl	800394c <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
	  controller.timeout = 0;					// Reset timeout counter
  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005d98:	e099      	b.n	8005ece <CAN1_RX0_IRQHandler+0x20a>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8005d9a:	4b59      	ldr	r3, [pc, #356]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005d9c:	785a      	ldrb	r2, [r3, #1]
 8005d9e:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005da0:	789b      	ldrb	r3, [r3, #2]
 8005da2:	4013      	ands	r3, r2
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4b56      	ldr	r3, [pc, #344]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005da8:	78db      	ldrb	r3, [r3, #3]
 8005daa:	4013      	ands	r3, r2
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2bff      	cmp	r3, #255	; 0xff
 8005db0:	bf0c      	ite	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	2300      	movne	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b51      	ldr	r3, [pc, #324]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005dbc:	791b      	ldrb	r3, [r3, #4]
 8005dbe:	2bff      	cmp	r3, #255	; 0xff
 8005dc0:	bf0c      	ite	eq
 8005dc2:	2301      	moveq	r3, #1
 8005dc4:	2300      	movne	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4b4d      	ldr	r3, [pc, #308]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005dcc:	795b      	ldrb	r3, [r3, #5]
 8005dce:	2bff      	cmp	r3, #255	; 0xff
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	4a48      	ldr	r2, [pc, #288]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005de0:	7992      	ldrb	r2, [r2, #6]
 8005de2:	2aff      	cmp	r2, #255	; 0xff
 8005de4:	bf0c      	ite	eq
 8005de6:	2201      	moveq	r2, #1
 8005de8:	2200      	movne	r2, #0
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	4013      	ands	r3, r2
 8005dee:	4a44      	ldr	r2, [pc, #272]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005df0:	79d2      	ldrb	r2, [r2, #7]
 8005df2:	2aff      	cmp	r2, #255	; 0xff
 8005df4:	bf0c      	ite	eq
 8005df6:	2201      	moveq	r2, #1
 8005df8:	2200      	movne	r2, #0
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	4a40      	ldr	r2, [pc, #256]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e00:	7a12      	ldrb	r2, [r2, #8]
 8005e02:	2afd      	cmp	r2, #253	; 0xfd
 8005e04:	bf0c      	ite	eq
 8005e06:	2201      	moveq	r2, #1
 8005e08:	2200      	movne	r2, #0
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <CAN1_RX0_IRQHandler+0x158>
      update_fsm(&state, MENU_CMD);
 8005e12:	211b      	movs	r1, #27
 8005e14:	483b      	ldr	r0, [pc, #236]	; (8005f04 <CAN1_RX0_IRQHandler+0x240>)
 8005e16:	f7fd fd99 	bl	800394c <update_fsm>
}
 8005e1a:	e058      	b.n	8005ece <CAN1_RX0_IRQHandler+0x20a>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005e1c:	4b38      	ldr	r3, [pc, #224]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e1e:	785a      	ldrb	r2, [r3, #1]
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e22:	789b      	ldrb	r3, [r3, #2]
 8005e24:	4013      	ands	r3, r2
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	4b35      	ldr	r3, [pc, #212]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2bff      	cmp	r3, #255	; 0xff
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4b30      	ldr	r3, [pc, #192]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	2bff      	cmp	r3, #255	; 0xff
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4b2c      	ldr	r3, [pc, #176]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e4e:	795b      	ldrb	r3, [r3, #5]
 8005e50:	2bff      	cmp	r3, #255	; 0xff
 8005e52:	bf0c      	ite	eq
 8005e54:	2301      	moveq	r3, #1
 8005e56:	2300      	movne	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	4013      	ands	r3, r2
 8005e60:	4a27      	ldr	r2, [pc, #156]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e62:	7992      	ldrb	r2, [r2, #6]
 8005e64:	2aff      	cmp	r2, #255	; 0xff
 8005e66:	bf0c      	ite	eq
 8005e68:	2201      	moveq	r2, #1
 8005e6a:	2200      	movne	r2, #0
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	4013      	ands	r3, r2
 8005e70:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e72:	79d2      	ldrb	r2, [r2, #7]
 8005e74:	2aff      	cmp	r2, #255	; 0xff
 8005e76:	bf0c      	ite	eq
 8005e78:	2201      	moveq	r2, #1
 8005e7a:	2200      	movne	r2, #0
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	4013      	ands	r3, r2
 8005e80:	4a1f      	ldr	r2, [pc, #124]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005e82:	7a12      	ldrb	r2, [r2, #8]
 8005e84:	2afe      	cmp	r2, #254	; 0xfe
 8005e86:	bf0c      	ite	eq
 8005e88:	2201      	moveq	r2, #1
 8005e8a:	2200      	movne	r2, #0
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <CAN1_RX0_IRQHandler+0x1da>
	  update_fsm(&state, ZERO_CMD);
 8005e94:	217a      	movs	r1, #122	; 0x7a
 8005e96:	481b      	ldr	r0, [pc, #108]	; (8005f04 <CAN1_RX0_IRQHandler+0x240>)
 8005e98:	f7fd fd58 	bl	800394c <update_fsm>
}
 8005e9c:	e017      	b.n	8005ece <CAN1_RX0_IRQHandler+0x20a>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8005e9e:	4e18      	ldr	r6, [pc, #96]	; (8005f00 <CAN1_RX0_IRQHandler+0x23c>)
 8005ea0:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <CAN1_RX0_IRQHandler+0x244>)
 8005ea2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ea4:	466d      	mov	r5, sp
 8005ea6:	f106 0410 	add.w	r4, r6, #16
 8005eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005eba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005ebe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005ec2:	f7fc f85b 	bl	8001f7c <unpack_cmd>
	  controller.timeout = 0;					// Reset timeout counter
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <CAN1_RX0_IRQHandler+0x22c>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000314 	.word	0x20000314
 8005edc:	20009441 	.word	0x20009441
 8005ee0:	2000944c 	.word	0x2000944c
 8005ee4:	2000043c 	.word	0x2000043c
 8005ee8:	20000b5c 	.word	0x20000b5c
 8005eec:	2000033c 	.word	0x2000033c
 8005ef0:	20000850 	.word	0x20000850
 8005ef4:	20009420 	.word	0x20009420
 8005ef8:	20009421 	.word	0x20009421
 8005efc:	20009428 	.word	0x20009428
 8005f00:	20009440 	.word	0x20009440
 8005f04:	20000b48 	.word	0x20000b48
 8005f08:	2000091c 	.word	0x2000091c

08005f0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 8005f10:	480c      	ldr	r0, [pc, #48]	; (8005f44 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f12:	f7fc fc93 	bl	800283c <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005f16:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005f48 <TIM1_UP_TIM10_IRQHandler+0x3c>
 8005f1a:	480c      	ldr	r0, [pc, #48]	; (8005f4c <TIM1_UP_TIM10_IRQHandler+0x40>)
 8005f1c:	f7ff f956 	bl	80051cc <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8005f20:	480b      	ldr	r0, [pc, #44]	; (8005f50 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8005f22:	f7fd fb51 	bl	80035c8 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 8005f26:	f000 f833 	bl	8005f90 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f30:	3301      	adds	r3, #1
 8005f32:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8005f34:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f38:	4806      	ldr	r0, [pc, #24]	; (8005f54 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8005f3a:	f003 fe45 	bl	8009bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000850 	.word	0x20000850
 8005f48:	37d1b717 	.word	0x37d1b717
 8005f4c:	20000b5c 	.word	0x20000b5c
 8005f50:	20000b48 	.word	0x20000b48
 8005f54:	20009548 	.word	0x20009548

08005f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005f5e:	4809      	ldr	r0, [pc, #36]	; (8005f84 <USART2_IRQHandler+0x2c>)
 8005f60:	f004 fdf8 	bl	800ab54 <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8005f64:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <USART2_IRQHandler+0x30>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4807      	ldr	r0, [pc, #28]	; (8005f8c <USART2_IRQHandler+0x34>)
 8005f70:	f7fd fcec 	bl	800394c <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f74:	4803      	ldr	r0, [pc, #12]	; (8005f84 <USART2_IRQHandler+0x2c>)
 8005f76:	f004 fded 	bl	800ab54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200095d8 	.word	0x200095d8
 8005f88:	20009490 	.word	0x20009490
 8005f8c:	20000b48 	.word	0x20000b48

08005f90 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f92:	b095      	sub	sp, #84	; 0x54
 8005f94:	af12      	add	r7, sp, #72	; 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8005f96:	4b84      	ldr	r3, [pc, #528]	; (80061a8 <can_tx_rx+0x218>)
 8005f98:	4a84      	ldr	r2, [pc, #528]	; (80061ac <can_tx_rx+0x21c>)
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4884      	ldr	r0, [pc, #528]	; (80061b0 <can_tx_rx+0x220>)
 8005f9e:	f001 fbfe 	bl	800779e <HAL_CAN_GetRxMessage>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f040 80f9 	bne.w	80061a0 <can_tx_rx+0x210>
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 8005fae:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <can_tx_rx+0x224>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	4a80      	ldr	r2, [pc, #512]	; (80061b8 <can_tx_rx+0x228>)
 8005fb6:	ed92 7a05 	vldr	s14, [r2, #20]
 8005fba:	4a80      	ldr	r2, [pc, #512]	; (80061bc <can_tx_rx+0x22c>)
 8005fbc:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005fc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005fc4:	4a7c      	ldr	r2, [pc, #496]	; (80061b8 <can_tx_rx+0x228>)
 8005fc6:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 8005fca:	4a7c      	ldr	r2, [pc, #496]	; (80061bc <can_tx_rx+0x22c>)
 8005fcc:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005fd0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005fd4:	4a7a      	ldr	r2, [pc, #488]	; (80061c0 <can_tx_rx+0x230>)
 8005fd6:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8005fda:	4a78      	ldr	r2, [pc, #480]	; (80061bc <can_tx_rx+0x22c>)
 8005fdc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fe4:	4a75      	ldr	r2, [pc, #468]	; (80061bc <can_tx_rx+0x22c>)
 8005fe6:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	eeb0 1a67 	vmov.f32	s2, s15
 8005ff2:	eef0 0a46 	vmov.f32	s1, s12
 8005ff6:	eeb0 0a66 	vmov.f32	s0, s13
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4871      	ldr	r0, [pc, #452]	; (80061c4 <can_tx_rx+0x234>)
 8005ffe:	f7fb ff45 	bl	8001e8c <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8006002:	463b      	mov	r3, r7
 8006004:	4a70      	ldr	r2, [pc, #448]	; (80061c8 <can_tx_rx+0x238>)
 8006006:	4971      	ldr	r1, [pc, #452]	; (80061cc <can_tx_rx+0x23c>)
 8006008:	4869      	ldr	r0, [pc, #420]	; (80061b0 <can_tx_rx+0x220>)
 800600a:	f001 faed 	bl	80075e8 <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800600e:	4b70      	ldr	r3, [pc, #448]	; (80061d0 <can_tx_rx+0x240>)
 8006010:	785a      	ldrb	r2, [r3, #1]
 8006012:	4b6f      	ldr	r3, [pc, #444]	; (80061d0 <can_tx_rx+0x240>)
 8006014:	789b      	ldrb	r3, [r3, #2]
 8006016:	4013      	ands	r3, r2
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b6d      	ldr	r3, [pc, #436]	; (80061d0 <can_tx_rx+0x240>)
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	4013      	ands	r3, r2
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4b6b      	ldr	r3, [pc, #428]	; (80061d0 <can_tx_rx+0x240>)
 8006024:	791b      	ldrb	r3, [r3, #4]
 8006026:	4013      	ands	r3, r2
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4b69      	ldr	r3, [pc, #420]	; (80061d0 <can_tx_rx+0x240>)
 800602c:	795b      	ldrb	r3, [r3, #5]
 800602e:	4013      	ands	r3, r2
 8006030:	b2da      	uxtb	r2, r3
 8006032:	4b67      	ldr	r3, [pc, #412]	; (80061d0 <can_tx_rx+0x240>)
 8006034:	799b      	ldrb	r3, [r3, #6]
 8006036:	4013      	ands	r3, r2
 8006038:	b2da      	uxtb	r2, r3
 800603a:	4b65      	ldr	r3, [pc, #404]	; (80061d0 <can_tx_rx+0x240>)
 800603c:	79db      	ldrb	r3, [r3, #7]
 800603e:	4013      	ands	r3, r2
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2bff      	cmp	r3, #255	; 0xff
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2da      	uxtb	r2, r3
 800604c:	4b60      	ldr	r3, [pc, #384]	; (80061d0 <can_tx_rx+0x240>)
 800604e:	7a1b      	ldrb	r3, [r3, #8]
 8006050:	2bfc      	cmp	r3, #252	; 0xfc
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	4013      	ands	r3, r2
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <can_tx_rx+0xdc>
			  update_fsm(&state, MOTOR_CMD);
 8006062:	216d      	movs	r1, #109	; 0x6d
 8006064:	485b      	ldr	r0, [pc, #364]	; (80061d4 <can_tx_rx+0x244>)
 8006066:	f7fd fc71 	bl	800394c <update_fsm>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
			  controller.timeout = 0;					// Reset timeout counter
		}
	}

}
 800606a:	e099      	b.n	80061a0 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 800606c:	4b58      	ldr	r3, [pc, #352]	; (80061d0 <can_tx_rx+0x240>)
 800606e:	785a      	ldrb	r2, [r3, #1]
 8006070:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <can_tx_rx+0x240>)
 8006072:	789b      	ldrb	r3, [r3, #2]
 8006074:	4013      	ands	r3, r2
 8006076:	b2da      	uxtb	r2, r3
 8006078:	4b55      	ldr	r3, [pc, #340]	; (80061d0 <can_tx_rx+0x240>)
 800607a:	78db      	ldrb	r3, [r3, #3]
 800607c:	4013      	ands	r3, r2
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2bff      	cmp	r3, #255	; 0xff
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	4b50      	ldr	r3, [pc, #320]	; (80061d0 <can_tx_rx+0x240>)
 800608e:	791b      	ldrb	r3, [r3, #4]
 8006090:	2bff      	cmp	r3, #255	; 0xff
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	4b4c      	ldr	r3, [pc, #304]	; (80061d0 <can_tx_rx+0x240>)
 800609e:	795b      	ldrb	r3, [r3, #5]
 80060a0:	2bff      	cmp	r3, #255	; 0xff
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	4013      	ands	r3, r2
 80060b0:	4a47      	ldr	r2, [pc, #284]	; (80061d0 <can_tx_rx+0x240>)
 80060b2:	7992      	ldrb	r2, [r2, #6]
 80060b4:	2aff      	cmp	r2, #255	; 0xff
 80060b6:	bf0c      	ite	eq
 80060b8:	2201      	moveq	r2, #1
 80060ba:	2200      	movne	r2, #0
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	4013      	ands	r3, r2
 80060c0:	4a43      	ldr	r2, [pc, #268]	; (80061d0 <can_tx_rx+0x240>)
 80060c2:	79d2      	ldrb	r2, [r2, #7]
 80060c4:	2aff      	cmp	r2, #255	; 0xff
 80060c6:	bf0c      	ite	eq
 80060c8:	2201      	moveq	r2, #1
 80060ca:	2200      	movne	r2, #0
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	4013      	ands	r3, r2
 80060d0:	4a3f      	ldr	r2, [pc, #252]	; (80061d0 <can_tx_rx+0x240>)
 80060d2:	7a12      	ldrb	r2, [r2, #8]
 80060d4:	2afd      	cmp	r2, #253	; 0xfd
 80060d6:	bf0c      	ite	eq
 80060d8:	2201      	moveq	r2, #1
 80060da:	2200      	movne	r2, #0
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <can_tx_rx+0x15e>
			update_fsm(&state, MENU_CMD);
 80060e4:	211b      	movs	r1, #27
 80060e6:	483b      	ldr	r0, [pc, #236]	; (80061d4 <can_tx_rx+0x244>)
 80060e8:	f7fd fc30 	bl	800394c <update_fsm>
}
 80060ec:	e058      	b.n	80061a0 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80060ee:	4b38      	ldr	r3, [pc, #224]	; (80061d0 <can_tx_rx+0x240>)
 80060f0:	785a      	ldrb	r2, [r3, #1]
 80060f2:	4b37      	ldr	r3, [pc, #220]	; (80061d0 <can_tx_rx+0x240>)
 80060f4:	789b      	ldrb	r3, [r3, #2]
 80060f6:	4013      	ands	r3, r2
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b35      	ldr	r3, [pc, #212]	; (80061d0 <can_tx_rx+0x240>)
 80060fc:	78db      	ldrb	r3, [r3, #3]
 80060fe:	4013      	ands	r3, r2
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2bff      	cmp	r3, #255	; 0xff
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	4b30      	ldr	r3, [pc, #192]	; (80061d0 <can_tx_rx+0x240>)
 8006110:	791b      	ldrb	r3, [r3, #4]
 8006112:	2bff      	cmp	r3, #255	; 0xff
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	4619      	mov	r1, r3
 800611e:	4b2c      	ldr	r3, [pc, #176]	; (80061d0 <can_tx_rx+0x240>)
 8006120:	795b      	ldrb	r3, [r3, #5]
 8006122:	2bff      	cmp	r3, #255	; 0xff
 8006124:	bf0c      	ite	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	2300      	movne	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	4013      	ands	r3, r2
 8006132:	4a27      	ldr	r2, [pc, #156]	; (80061d0 <can_tx_rx+0x240>)
 8006134:	7992      	ldrb	r2, [r2, #6]
 8006136:	2aff      	cmp	r2, #255	; 0xff
 8006138:	bf0c      	ite	eq
 800613a:	2201      	moveq	r2, #1
 800613c:	2200      	movne	r2, #0
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	4013      	ands	r3, r2
 8006142:	4a23      	ldr	r2, [pc, #140]	; (80061d0 <can_tx_rx+0x240>)
 8006144:	79d2      	ldrb	r2, [r2, #7]
 8006146:	2aff      	cmp	r2, #255	; 0xff
 8006148:	bf0c      	ite	eq
 800614a:	2201      	moveq	r2, #1
 800614c:	2200      	movne	r2, #0
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	4013      	ands	r3, r2
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <can_tx_rx+0x240>)
 8006154:	7a12      	ldrb	r2, [r2, #8]
 8006156:	2afe      	cmp	r2, #254	; 0xfe
 8006158:	bf0c      	ite	eq
 800615a:	2201      	moveq	r2, #1
 800615c:	2200      	movne	r2, #0
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <can_tx_rx+0x1e0>
			  update_fsm(&state, ZERO_CMD);
 8006166:	217a      	movs	r1, #122	; 0x7a
 8006168:	481a      	ldr	r0, [pc, #104]	; (80061d4 <can_tx_rx+0x244>)
 800616a:	f7fd fbef 	bl	800394c <update_fsm>
}
 800616e:	e017      	b.n	80061a0 <can_tx_rx+0x210>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8006170:	4e17      	ldr	r6, [pc, #92]	; (80061d0 <can_tx_rx+0x240>)
 8006172:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <can_tx_rx+0x248>)
 8006174:	9310      	str	r3, [sp, #64]	; 0x40
 8006176:	466d      	mov	r5, sp
 8006178:	f106 0410 	add.w	r4, r6, #16
 800617c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800617e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006188:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800618c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006190:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006194:	f7fb fef2 	bl	8001f7c <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <can_tx_rx+0x230>)
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a8:	20009441 	.word	0x20009441
 80061ac:	2000944c 	.word	0x2000944c
 80061b0:	20000314 	.word	0x20000314
 80061b4:	2000043c 	.word	0x2000043c
 80061b8:	20000b5c 	.word	0x20000b5c
 80061bc:	2000033c 	.word	0x2000033c
 80061c0:	20000850 	.word	0x20000850
 80061c4:	20009420 	.word	0x20009420
 80061c8:	20009421 	.word	0x20009421
 80061cc:	20009428 	.word	0x20009428
 80061d0:	20009440 	.word	0x20009440
 80061d4:	20000b48 	.word	0x20000b48
 80061d8:	2000091c 	.word	0x2000091c

080061dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
	return 1;
 80061e0:	2301      	movs	r3, #1
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <_kill>:

int _kill(int pid, int sig)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80061f6:	f005 fc1d 	bl	800ba34 <__errno>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2216      	movs	r2, #22
 80061fe:	601a      	str	r2, [r3, #0]
	return -1;
 8006200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <_exit>:

void _exit (int status)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006214:	f04f 31ff 	mov.w	r1, #4294967295
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ffe7 	bl	80061ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800621e:	e7fe      	b.n	800621e <_exit+0x12>

08006220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e00a      	b.n	8006248 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006232:	f3af 8000 	nop.w
 8006236:	4601      	mov	r1, r0
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	60ba      	str	r2, [r7, #8]
 800623e:	b2ca      	uxtb	r2, r1
 8006240:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	3301      	adds	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	dbf0      	blt.n	8006232 <_read+0x12>
	}

return len;
 8006250:	687b      	ldr	r3, [r7, #4]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e009      	b.n	8006280 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	60ba      	str	r2, [r7, #8]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fa91 	bl	800679c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3301      	adds	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	dbf1      	blt.n	800626c <_write+0x12>
	}
	return len;
 8006288:	687b      	ldr	r3, [r7, #4]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <_close>:

int _close(int file)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
	return -1;
 800629a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062ba:	605a      	str	r2, [r3, #4]
	return 0;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <_isatty>:

int _isatty(int file)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
	return 1;
 80062d2:	2301      	movs	r3, #1
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
	return 0;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <_sbrk+0x50>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <_sbrk+0x16>
		heap_end = &end;
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <_sbrk+0x50>)
 800630e:	4a10      	ldr	r2, [pc, #64]	; (8006350 <_sbrk+0x54>)
 8006310:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <_sbrk+0x50>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <_sbrk+0x50>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	466a      	mov	r2, sp
 8006322:	4293      	cmp	r3, r2
 8006324:	d907      	bls.n	8006336 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006326:	f005 fb85 	bl	800ba34 <__errno>
 800632a:	4603      	mov	r3, r0
 800632c:	220c      	movs	r2, #12
 800632e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	e006      	b.n	8006344 <_sbrk+0x48>
	}

	heap_end += incr;
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <_sbrk+0x50>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	4a03      	ldr	r2, [pc, #12]	; (800634c <_sbrk+0x50>)
 8006340:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20009544 	.word	0x20009544
 8006350:	20009630 	.word	0x20009630

08006354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006358:	4b08      	ldr	r3, [pc, #32]	; (800637c <SystemInit+0x28>)
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635e:	4a07      	ldr	r2, [pc, #28]	; (800637c <SystemInit+0x28>)
 8006360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006368:	4b04      	ldr	r3, [pc, #16]	; (800637c <SystemInit+0x28>)
 800636a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800636e:	609a      	str	r2, [r3, #8]
#endif
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	e000ed00 	.word	0xe000ed00

08006380 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b096      	sub	sp, #88	; 0x58
 8006384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	605a      	str	r2, [r3, #4]
 8006390:	609a      	str	r2, [r3, #8]
 8006392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800639e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	611a      	str	r2, [r3, #16]
 80063ae:	615a      	str	r2, [r3, #20]
 80063b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063b2:	1d3b      	adds	r3, r7, #4
 80063b4:	2220      	movs	r2, #32
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f005 fb73 	bl	800baa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80063be:	4b4a      	ldr	r3, [pc, #296]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063c0:	4a4a      	ldr	r2, [pc, #296]	; (80064ec <MX_TIM1_Init+0x16c>)
 80063c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80063c4:	4b48      	ldr	r3, [pc, #288]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80063ca:	4b47      	ldr	r3, [pc, #284]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063cc:	2220      	movs	r2, #32
 80063ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 80063d0:	4b45      	ldr	r3, [pc, #276]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063d2:	f640 02ca 	movw	r2, #2250	; 0x8ca
 80063d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063d8:	4b43      	ldr	r3, [pc, #268]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063da:	2200      	movs	r2, #0
 80063dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80063de:	4b42      	ldr	r3, [pc, #264]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063e4:	4b40      	ldr	r3, [pc, #256]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063e6:	2280      	movs	r2, #128	; 0x80
 80063e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80063ea:	483f      	ldr	r0, [pc, #252]	; (80064e8 <MX_TIM1_Init+0x168>)
 80063ec:	f003 f9a2 	bl	8009734 <HAL_TIM_Base_Init>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80063f6:	f7fe fcef 	bl	8004dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006404:	4619      	mov	r1, r3
 8006406:	4838      	ldr	r0, [pc, #224]	; (80064e8 <MX_TIM1_Init+0x168>)
 8006408:	f003 fda8 	bl	8009f5c <HAL_TIM_ConfigClockSource>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006412:	f7fe fce1 	bl	8004dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006416:	4834      	ldr	r0, [pc, #208]	; (80064e8 <MX_TIM1_Init+0x168>)
 8006418:	f003 fab4 	bl	8009984 <HAL_TIM_PWM_Init>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006422:	f7fe fcd9 	bl	8004dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006426:	2300      	movs	r3, #0
 8006428:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800642a:	2300      	movs	r3, #0
 800642c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800642e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006432:	4619      	mov	r1, r3
 8006434:	482c      	ldr	r0, [pc, #176]	; (80064e8 <MX_TIM1_Init+0x168>)
 8006436:	f004 f99b 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006440:	f7fe fcca 	bl	8004dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006444:	2360      	movs	r3, #96	; 0x60
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800644c:	2302      	movs	r3, #2
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006450:	2300      	movs	r3, #0
 8006452:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006454:	2304      	movs	r3, #4
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006458:	2300      	movs	r3, #0
 800645a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006464:	2200      	movs	r2, #0
 8006466:	4619      	mov	r1, r3
 8006468:	481f      	ldr	r0, [pc, #124]	; (80064e8 <MX_TIM1_Init+0x168>)
 800646a:	f003 fcb5 	bl	8009dd8 <HAL_TIM_PWM_ConfigChannel>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006474:	f7fe fcb0 	bl	8004dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800647c:	2204      	movs	r2, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4819      	ldr	r0, [pc, #100]	; (80064e8 <MX_TIM1_Init+0x168>)
 8006482:	f003 fca9 	bl	8009dd8 <HAL_TIM_PWM_ConfigChannel>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800648c:	f7fe fca4 	bl	8004dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006494:	2208      	movs	r2, #8
 8006496:	4619      	mov	r1, r3
 8006498:	4813      	ldr	r0, [pc, #76]	; (80064e8 <MX_TIM1_Init+0x168>)
 800649a:	f003 fc9d 	bl	8009dd8 <HAL_TIM_PWM_ConfigChannel>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80064a4:	f7fe fc98 	bl	8004dd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4807      	ldr	r0, [pc, #28]	; (80064e8 <MX_TIM1_Init+0x168>)
 80064cc:	f004 f9cc 	bl	800a868 <HAL_TIMEx_ConfigBreakDeadTime>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80064d6:	f7fe fc7f 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80064da:	4803      	ldr	r0, [pc, #12]	; (80064e8 <MX_TIM1_Init+0x168>)
 80064dc:	f000 f890 	bl	8006600 <HAL_TIM_MspPostInit>

}
 80064e0:	bf00      	nop
 80064e2:	3758      	adds	r7, #88	; 0x58
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20009548 	.word	0x20009548
 80064ec:	40010000 	.word	0x40010000

080064f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006504:	463b      	mov	r3, r7
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800650c:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <MX_TIM2_Init+0x94>)
 800650e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <MX_TIM2_Init+0x94>)
 8006516:	225a      	movs	r2, #90	; 0x5a
 8006518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800651a:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <MX_TIM2_Init+0x94>)
 800651c:	2200      	movs	r2, #0
 800651e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006520:	4b18      	ldr	r3, [pc, #96]	; (8006584 <MX_TIM2_Init+0x94>)
 8006522:	f04f 32ff 	mov.w	r2, #4294967295
 8006526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <MX_TIM2_Init+0x94>)
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <MX_TIM2_Init+0x94>)
 8006530:	2200      	movs	r2, #0
 8006532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006534:	4813      	ldr	r0, [pc, #76]	; (8006584 <MX_TIM2_Init+0x94>)
 8006536:	f003 f8fd 	bl	8009734 <HAL_TIM_Base_Init>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006540:	f7fe fc4a 	bl	8004dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	4619      	mov	r1, r3
 8006550:	480c      	ldr	r0, [pc, #48]	; (8006584 <MX_TIM2_Init+0x94>)
 8006552:	f003 fd03 	bl	8009f5c <HAL_TIM_ConfigClockSource>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800655c:	f7fe fc3c 	bl	8004dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006560:	2300      	movs	r3, #0
 8006562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006564:	2300      	movs	r3, #0
 8006566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006568:	463b      	mov	r3, r7
 800656a:	4619      	mov	r1, r3
 800656c:	4805      	ldr	r0, [pc, #20]	; (8006584 <MX_TIM2_Init+0x94>)
 800656e:	f004 f8ff 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006578:	f7fe fc2e 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20009590 	.word	0x20009590

08006588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a18      	ldr	r2, [pc, #96]	; (80065f8 <HAL_TIM_Base_MspInit+0x70>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d116      	bne.n	80065c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <HAL_TIM_Base_MspInit+0x74>)
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	4a16      	ldr	r2, [pc, #88]	; (80065fc <HAL_TIM_Base_MspInit+0x74>)
 80065a4:	f043 0301 	orr.w	r3, r3, #1
 80065a8:	6453      	str	r3, [r2, #68]	; 0x44
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <HAL_TIM_Base_MspInit+0x74>)
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	2019      	movs	r0, #25
 80065bc:	f001 fd15 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80065c0:	2019      	movs	r0, #25
 80065c2:	f001 fd2e 	bl	8008022 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80065c6:	e012      	b.n	80065ee <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d10d      	bne.n	80065ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80065d2:	2300      	movs	r3, #0
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <HAL_TIM_Base_MspInit+0x74>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	4a08      	ldr	r2, [pc, #32]	; (80065fc <HAL_TIM_Base_MspInit+0x74>)
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	6413      	str	r3, [r2, #64]	; 0x40
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <HAL_TIM_Base_MspInit+0x74>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	60bb      	str	r3, [r7, #8]
 80065ec:	68bb      	ldr	r3, [r7, #8]
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40023800 	.word	0x40023800

08006600 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	609a      	str	r2, [r3, #8]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a12      	ldr	r2, [pc, #72]	; (8006668 <HAL_TIM_MspPostInit+0x68>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d11e      	bne.n	8006660 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <HAL_TIM_MspPostInit+0x6c>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4a10      	ldr	r2, [pc, #64]	; (800666c <HAL_TIM_MspPostInit+0x6c>)
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	6313      	str	r3, [r2, #48]	; 0x30
 8006632:	4b0e      	ldr	r3, [pc, #56]	; (800666c <HAL_TIM_MspPostInit+0x6c>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800663e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006644:	2302      	movs	r3, #2
 8006646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800664c:	2303      	movs	r3, #3
 800664e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006650:	2301      	movs	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006654:	f107 030c 	add.w	r3, r7, #12
 8006658:	4619      	mov	r1, r3
 800665a:	4805      	ldr	r0, [pc, #20]	; (8006670 <HAL_TIM_MspPostInit+0x70>)
 800665c:	f001 fd8e 	bl	800817c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006660:	bf00      	nop
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40010000 	.word	0x40010000
 800666c:	40023800 	.word	0x40023800
 8006670:	40020000 	.word	0x40020000

08006674 <delay_us>:
}

/* USER CODE BEGIN 1 */

void delay_us (uint16_t us)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800667e:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <delay_us+0x30>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8006686:	bf00      	nop
 8006688:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <delay_us+0x30>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	429a      	cmp	r2, r3
 8006692:	d3f9      	bcc.n	8006688 <delay_us+0x14>
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20009590 	.word	0x20009590

080066a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066ae:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <MX_USART2_UART_Init+0x50>)
 80066b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066b4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80066b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066ba:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066ce:	220c      	movs	r2, #12
 80066d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066da:	2200      	movs	r2, #0
 80066dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066de:	4805      	ldr	r0, [pc, #20]	; (80066f4 <MX_USART2_UART_Init+0x4c>)
 80066e0:	f004 f928 	bl	800a934 <HAL_UART_Init>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80066ea:	f7fe fb75 	bl	8004dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	200095d8 	.word	0x200095d8
 80066f8:	40004400 	.word	0x40004400

080066fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006704:	f107 0314 	add.w	r3, r7, #20
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <HAL_UART_MspInit+0x94>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d133      	bne.n	8006786 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <HAL_UART_MspInit+0x98>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <HAL_UART_MspInit+0x98>)
 8006728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672c:	6413      	str	r3, [r2, #64]	; 0x40
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_UART_MspInit+0x98>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	4b15      	ldr	r3, [pc, #84]	; (8006794 <HAL_UART_MspInit+0x98>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	4a14      	ldr	r2, [pc, #80]	; (8006794 <HAL_UART_MspInit+0x98>)
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	6313      	str	r3, [r2, #48]	; 0x30
 800674a:	4b12      	ldr	r3, [pc, #72]	; (8006794 <HAL_UART_MspInit+0x98>)
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006756:	230c      	movs	r3, #12
 8006758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675a:	2302      	movs	r3, #2
 800675c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006762:	2303      	movs	r3, #3
 8006764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006766:	2307      	movs	r3, #7
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800676a:	f107 0314 	add.w	r3, r7, #20
 800676e:	4619      	mov	r1, r3
 8006770:	4809      	ldr	r0, [pc, #36]	; (8006798 <HAL_UART_MspInit+0x9c>)
 8006772:	f001 fd03 	bl	800817c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	2026      	movs	r0, #38	; 0x26
 800677c:	f001 fc35 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006780:	2026      	movs	r0, #38	; 0x26
 8006782:	f001 fc4e 	bl	8008022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006786:	bf00      	nop
 8006788:	3728      	adds	r7, #40	; 0x28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40004400 	.word	0x40004400
 8006794:	40023800 	.word	0x40023800
 8006798:	40020000 	.word	0x40020000

0800679c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80067a4:	1d39      	adds	r1, r7, #4
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	2201      	movs	r2, #1
 80067ac:	4803      	ldr	r0, [pc, #12]	; (80067bc <__io_putchar+0x20>)
 80067ae:	f004 f90e 	bl	800a9ce <HAL_UART_Transmit>
  return ch;
 80067b2:	687b      	ldr	r3, [r7, #4]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	200095d8 	.word	0x200095d8

080067c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80067c8:	2201      	movs	r2, #1
 80067ca:	4904      	ldr	r1, [pc, #16]	; (80067dc <HAL_UART_RxCpltCallback+0x1c>)
 80067cc:	4804      	ldr	r0, [pc, #16]	; (80067e0 <HAL_UART_RxCpltCallback+0x20>)
 80067ce:	f004 f990 	bl	800aaf2 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20009490 	.word	0x20009490
 80067e0:	200095d8 	.word	0x200095d8

080067e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80067e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800681c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80067e8:	480d      	ldr	r0, [pc, #52]	; (8006820 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80067ea:	490e      	ldr	r1, [pc, #56]	; (8006824 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80067ec:	4a0e      	ldr	r2, [pc, #56]	; (8006828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80067ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067f0:	e002      	b.n	80067f8 <LoopCopyDataInit>

080067f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067f6:	3304      	adds	r3, #4

080067f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067fc:	d3f9      	bcc.n	80067f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067fe:	4a0b      	ldr	r2, [pc, #44]	; (800682c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006800:	4c0b      	ldr	r4, [pc, #44]	; (8006830 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006804:	e001      	b.n	800680a <LoopFillZerobss>

08006806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006808:	3204      	adds	r2, #4

0800680a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800680a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800680c:	d3fb      	bcc.n	8006806 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800680e:	f7ff fda1 	bl	8006354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006812:	f005 f915 	bl	800ba40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006816:	f7fd ff33 	bl	8004680 <main>
  bx  lr    
 800681a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800681c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006824:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8006828:	08011a88 	.word	0x08011a88
  ldr r2, =_sbss
 800682c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006830:	20009630 	.word	0x20009630

08006834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006834:	e7fe      	b.n	8006834 <ADC_IRQHandler>
	...

08006838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <HAL_Init+0x40>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a0d      	ldr	r2, [pc, #52]	; (8006878 <HAL_Init+0x40>)
 8006842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <HAL_Init+0x40>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <HAL_Init+0x40>)
 800684e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <HAL_Init+0x40>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a07      	ldr	r2, [pc, #28]	; (8006878 <HAL_Init+0x40>)
 800685a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006860:	2003      	movs	r0, #3
 8006862:	f001 fbb7 	bl	8007fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006866:	2000      	movs	r0, #0
 8006868:	f000 f808 	bl	800687c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800686c:	f7ff f9d4 	bl	8005c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40023c00 	.word	0x40023c00

0800687c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006884:	4b12      	ldr	r3, [pc, #72]	; (80068d0 <HAL_InitTick+0x54>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <HAL_InitTick+0x58>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	4619      	mov	r1, r3
 800688e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006892:	fbb3 f3f1 	udiv	r3, r3, r1
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fbcf 	bl	800803e <HAL_SYSTICK_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e00e      	b.n	80068c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b0f      	cmp	r3, #15
 80068ae:	d80a      	bhi.n	80068c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068b0:	2200      	movs	r2, #0
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	f001 fb97 	bl	8007fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068bc:	4a06      	ldr	r2, [pc, #24]	; (80068d8 <HAL_InitTick+0x5c>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000040 	.word	0x20000040
 80068d4:	20000048 	.word	0x20000048
 80068d8:	20000044 	.word	0x20000044

080068dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_IncTick+0x20>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	4b06      	ldr	r3, [pc, #24]	; (8006900 <HAL_IncTick+0x24>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4413      	add	r3, r2
 80068ec:	4a04      	ldr	r2, [pc, #16]	; (8006900 <HAL_IncTick+0x24>)
 80068ee:	6013      	str	r3, [r2, #0]
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000048 	.word	0x20000048
 8006900:	2000961c 	.word	0x2000961c

08006904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  return uwTick;
 8006908:	4b03      	ldr	r3, [pc, #12]	; (8006918 <HAL_GetTick+0x14>)
 800690a:	681b      	ldr	r3, [r3, #0]
}
 800690c:	4618      	mov	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	2000961c 	.word	0x2000961c

0800691c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006924:	f7ff ffee 	bl	8006904 <HAL_GetTick>
 8006928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d005      	beq.n	8006942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <HAL_Delay+0x44>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006942:	bf00      	nop
 8006944:	f7ff ffde 	bl	8006904 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d8f7      	bhi.n	8006944 <HAL_Delay+0x28>
  {
  }
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000048 	.word	0x20000048

08006964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e033      	b.n	80069e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fa fc56 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d118      	bne.n	80069d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80069aa:	f023 0302 	bic.w	r3, r3, #2
 80069ae:	f043 0202 	orr.w	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fab4 	bl	8006f24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	f043 0201 	orr.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
 80069d2:	e001      	b.n	80069d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_ADC_Start+0x1a>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0b2      	b.n	8006b6c <HAL_ADC_Start+0x180>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d018      	beq.n	8006a4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a2c:	4b52      	ldr	r3, [pc, #328]	; (8006b78 <HAL_ADC_Start+0x18c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a52      	ldr	r2, [pc, #328]	; (8006b7c <HAL_ADC_Start+0x190>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	0c9a      	lsrs	r2, r3, #18
 8006a38:	4613      	mov	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006a40:	e002      	b.n	8006a48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f9      	bne.n	8006a42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d17a      	bne.n	8006b52 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	d106      	bne.n	8006aaa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa0:	f023 0206 	bic.w	r2, r3, #6
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44
 8006aa8:	e002      	b.n	8006ab0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ab8:	4b31      	ldr	r3, [pc, #196]	; (8006b80 <HAL_ADC_Start+0x194>)
 8006aba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006ac4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d12a      	bne.n	8006b28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2b      	ldr	r2, [pc, #172]	; (8006b84 <HAL_ADC_Start+0x198>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d015      	beq.n	8006b08 <HAL_ADC_Start+0x11c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <HAL_ADC_Start+0x19c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d105      	bne.n	8006af2 <HAL_ADC_Start+0x106>
 8006ae6:	4b26      	ldr	r3, [pc, #152]	; (8006b80 <HAL_ADC_Start+0x194>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <HAL_ADC_Start+0x1a0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d136      	bne.n	8006b6a <HAL_ADC_Start+0x17e>
 8006afc:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_ADC_Start+0x194>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d130      	bne.n	8006b6a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d129      	bne.n	8006b6a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b24:	609a      	str	r2, [r3, #8]
 8006b26:	e020      	b.n	8006b6a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <HAL_ADC_Start+0x198>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d11b      	bne.n	8006b6a <HAL_ADC_Start+0x17e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d114      	bne.n	8006b6a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b4e:	609a      	str	r2, [r3, #8]
 8006b50:	e00b      	b.n	8006b6a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f043 0210 	orr.w	r2, r3, #16
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	f043 0201 	orr.w	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	20000040 	.word	0x20000040
 8006b7c:	431bde83 	.word	0x431bde83
 8006b80:	40012300 	.word	0x40012300
 8006b84:	40012000 	.word	0x40012000
 8006b88:	40012100 	.word	0x40012100
 8006b8c:	40012200 	.word	0x40012200

08006b90 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bac:	d113      	bne.n	8006bd6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bbc:	d10b      	bne.n	8006bd6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e063      	b.n	8006c9e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006bd6:	f7ff fe95 	bl	8006904 <HAL_GetTick>
 8006bda:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006bdc:	e021      	b.n	8006c22 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d01d      	beq.n	8006c22 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <HAL_ADC_PollForConversion+0x6c>
 8006bec:	f7ff fe8a 	bl	8006904 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d212      	bcs.n	8006c22 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d00b      	beq.n	8006c22 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f043 0204 	orr.w	r2, r3, #4
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e03d      	b.n	8006c9e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d1d6      	bne.n	8006bde <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0212 	mvn.w	r2, #18
 8006c38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d123      	bne.n	8006c9c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d11f      	bne.n	8006c9c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d006      	beq.n	8006c78 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d111      	bne.n	8006c9c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d105      	bne.n	8006c9c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	f043 0201 	orr.w	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_ADC_ConfigChannel+0x1c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e113      	b.n	8006f04 <HAL_ADC_ConfigChannel+0x244>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b09      	cmp	r3, #9
 8006cea:	d925      	bls.n	8006d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68d9      	ldr	r1, [r3, #12]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	3b1e      	subs	r3, #30
 8006d02:	2207      	movs	r2, #7
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	43da      	mvns	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	400a      	ands	r2, r1
 8006d10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68d9      	ldr	r1, [r3, #12]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4618      	mov	r0, r3
 8006d24:	4603      	mov	r3, r0
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4403      	add	r3, r0
 8006d2a:	3b1e      	subs	r3, #30
 8006d2c:	409a      	lsls	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	60da      	str	r2, [r3, #12]
 8006d36:	e022      	b.n	8006d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6919      	ldr	r1, [r3, #16]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	461a      	mov	r2, r3
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	2207      	movs	r2, #7
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	43da      	mvns	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	400a      	ands	r2, r1
 8006d5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6919      	ldr	r1, [r3, #16]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4403      	add	r3, r0
 8006d74:	409a      	lsls	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b06      	cmp	r3, #6
 8006d84:	d824      	bhi.n	8006dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	3b05      	subs	r3, #5
 8006d98:	221f      	movs	r2, #31
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43da      	mvns	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	400a      	ands	r2, r1
 8006da6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	4618      	mov	r0, r3
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	3b05      	subs	r3, #5
 8006dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8006dce:	e04c      	b.n	8006e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	d824      	bhi.n	8006e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	3b23      	subs	r3, #35	; 0x23
 8006dea:	221f      	movs	r2, #31
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	43da      	mvns	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	400a      	ands	r2, r1
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	4618      	mov	r0, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	3b23      	subs	r3, #35	; 0x23
 8006e14:	fa00 f203 	lsl.w	r2, r0, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e20:	e023      	b.n	8006e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	3b41      	subs	r3, #65	; 0x41
 8006e34:	221f      	movs	r2, #31
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43da      	mvns	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	400a      	ands	r2, r1
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4618      	mov	r0, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3b41      	subs	r3, #65	; 0x41
 8006e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e6a:	4b29      	ldr	r3, [pc, #164]	; (8006f10 <HAL_ADC_ConfigChannel+0x250>)
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a28      	ldr	r2, [pc, #160]	; (8006f14 <HAL_ADC_ConfigChannel+0x254>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d10f      	bne.n	8006e98 <HAL_ADC_ConfigChannel+0x1d8>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b12      	cmp	r3, #18
 8006e7e:	d10b      	bne.n	8006e98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_ADC_ConfigChannel+0x254>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d12b      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x23a>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <HAL_ADC_ConfigChannel+0x258>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <HAL_ADC_ConfigChannel+0x1f4>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b11      	cmp	r3, #17
 8006eb2:	d122      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <HAL_ADC_ConfigChannel+0x258>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d111      	bne.n	8006efa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ed6:	4b11      	ldr	r3, [pc, #68]	; (8006f1c <HAL_ADC_ConfigChannel+0x25c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <HAL_ADC_ConfigChannel+0x260>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	0c9a      	lsrs	r2, r3, #18
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006eec:	e002      	b.n	8006ef4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f9      	bne.n	8006eee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40012300 	.word	0x40012300
 8006f14:	40012000 	.word	0x40012000
 8006f18:	10000012 	.word	0x10000012
 8006f1c:	20000040 	.word	0x20000040
 8006f20:	431bde83 	.word	0x431bde83

08006f24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f2c:	4b79      	ldr	r3, [pc, #484]	; (8007114 <ADC_Init+0x1f0>)
 8006f2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6859      	ldr	r1, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	021a      	lsls	r2, r3, #8
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6859      	ldr	r1, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6899      	ldr	r1, [r3, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	4a58      	ldr	r2, [pc, #352]	; (8007118 <ADC_Init+0x1f4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d022      	beq.n	8007002 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6899      	ldr	r1, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6899      	ldr	r1, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	e00f      	b.n	8007022 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007020:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0202 	bic.w	r2, r2, #2
 8007030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6899      	ldr	r1, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	7e1b      	ldrb	r3, [r3, #24]
 800703c:	005a      	lsls	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01b      	beq.n	8007088 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800705e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800706e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	3b01      	subs	r3, #1
 800707c:	035a      	lsls	r2, r3, #13
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
 8007086:	e007      	b.n	8007098 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007096:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80070a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	051a      	lsls	r2, r3, #20
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6899      	ldr	r1, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070da:	025a      	lsls	r2, r3, #9
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6899      	ldr	r1, [r3, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	029a      	lsls	r2, r3, #10
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	609a      	str	r2, [r3, #8]
}
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40012300 	.word	0x40012300
 8007118:	0f000001 	.word	0x0f000001

0800711c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8007130:	2302      	movs	r3, #2
 8007132:	e031      	b.n	8007198 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800713c:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800713e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f023 021f 	bic.w	r2, r3, #31
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	431a      	orrs	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	431a      	orrs	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40012300 	.word	0x40012300

080071a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e0ed      	b.n	8007396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7fa fdc8 	bl	8001d5c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071dc:	f7ff fb92 	bl	8006904 <HAL_GetTick>
 80071e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071e2:	e012      	b.n	800720a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071e4:	f7ff fb8e 	bl	8006904 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b0a      	cmp	r3, #10
 80071f0:	d90b      	bls.n	800720a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2205      	movs	r2, #5
 8007202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e0c5      	b.n	8007396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0e5      	beq.n	80071e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0202 	bic.w	r2, r2, #2
 8007226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007228:	f7ff fb6c 	bl	8006904 <HAL_GetTick>
 800722c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800722e:	e012      	b.n	8007256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007230:	f7ff fb68 	bl	8006904 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b0a      	cmp	r3, #10
 800723c:	d90b      	bls.n	8007256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2205      	movs	r2, #5
 800724e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e09f      	b.n	8007396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e5      	bne.n	8007230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	7e1b      	ldrb	r3, [r3, #24]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d108      	bne.n	800727e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e007      	b.n	800728e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800728c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	7e5b      	ldrb	r3, [r3, #25]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d108      	bne.n	80072a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e007      	b.n	80072b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7e9b      	ldrb	r3, [r3, #26]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d108      	bne.n	80072d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0220 	orr.w	r2, r2, #32
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	e007      	b.n	80072e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0220 	bic.w	r2, r2, #32
 80072e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7edb      	ldrb	r3, [r3, #27]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d108      	bne.n	80072fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0210 	bic.w	r2, r2, #16
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e007      	b.n	800730c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0210 	orr.w	r2, r2, #16
 800730a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	7f1b      	ldrb	r3, [r3, #28]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d108      	bne.n	8007326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0208 	orr.w	r2, r2, #8
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e007      	b.n	8007336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0208 	bic.w	r2, r2, #8
 8007334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7f5b      	ldrb	r3, [r3, #29]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d108      	bne.n	8007350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0204 	orr.w	r2, r2, #4
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e007      	b.n	8007360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0204 	bic.w	r2, r2, #4
 800735e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	ea42 0103 	orr.w	r1, r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	1e5a      	subs	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80073b8:	7cfb      	ldrb	r3, [r7, #19]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d003      	beq.n	80073c6 <HAL_CAN_ConfigFilter+0x26>
 80073be:	7cfb      	ldrb	r3, [r7, #19]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f040 80be 	bne.w	8007542 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80073c6:	4b65      	ldr	r3, [pc, #404]	; (800755c <HAL_CAN_ConfigFilter+0x1bc>)
 80073c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073d0:	f043 0201 	orr.w	r2, r3, #1
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	431a      	orrs	r2, r3
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2201      	movs	r2, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	43db      	mvns	r3, r3
 8007418:	401a      	ands	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d123      	bne.n	8007470 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	43db      	mvns	r3, r3
 8007432:	401a      	ands	r2, r3
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800744a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	3248      	adds	r2, #72	; 0x48
 8007450:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007464:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007466:	6979      	ldr	r1, [r7, #20]
 8007468:	3348      	adds	r3, #72	; 0x48
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	440b      	add	r3, r1
 800746e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d122      	bne.n	80074be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	431a      	orrs	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007498:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	3248      	adds	r2, #72	; 0x48
 800749e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80074b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80074b4:	6979      	ldr	r1, [r7, #20]
 80074b6:	3348      	adds	r3, #72	; 0x48
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	440b      	add	r3, r1
 80074bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	43db      	mvns	r3, r3
 80074d0:	401a      	ands	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80074d8:	e007      	b.n	80074ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	43db      	mvns	r3, r3
 80074fc:	401a      	ands	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007504:	e007      	b.n	8007516 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	431a      	orrs	r2, r3
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d107      	bne.n	800752e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	431a      	orrs	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007534:	f023 0201 	bic.w	r2, r3, #1
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	e006      	b.n	8007550 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
  }
}
 8007550:	4618      	mov	r0, r3
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	40006400 	.word	0x40006400

08007560 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d12e      	bne.n	80075d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0201 	bic.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800758c:	f7ff f9ba 	bl	8006904 <HAL_GetTick>
 8007590:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007592:	e012      	b.n	80075ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007594:	f7ff f9b6 	bl	8006904 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b0a      	cmp	r3, #10
 80075a0:	d90b      	bls.n	80075ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2205      	movs	r2, #5
 80075b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e012      	b.n	80075e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e5      	bne.n	8007594 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e006      	b.n	80075e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
  }
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b089      	sub	sp, #36	; 0x24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007606:	7ffb      	ldrb	r3, [r7, #31]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d003      	beq.n	8007614 <HAL_CAN_AddTxMessage+0x2c>
 800760c:	7ffb      	ldrb	r3, [r7, #31]
 800760e:	2b02      	cmp	r3, #2
 8007610:	f040 80b8 	bne.w	8007784 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10a      	bne.n	8007634 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 80a0 	beq.w	8007774 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	0e1b      	lsrs	r3, r3, #24
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d907      	bls.n	8007654 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e09e      	b.n	8007792 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007654:	2201      	movs	r2, #1
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	409a      	lsls	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10d      	bne.n	8007682 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007670:	68f9      	ldr	r1, [r7, #12]
 8007672:	6809      	ldr	r1, [r1, #0]
 8007674:	431a      	orrs	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	3318      	adds	r3, #24
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	440b      	add	r3, r1
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	e00f      	b.n	80076a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800768c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007696:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	3318      	adds	r3, #24
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	440b      	add	r3, r1
 80076a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6819      	ldr	r1, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	3318      	adds	r3, #24
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	440b      	add	r3, r1
 80076b2:	3304      	adds	r3, #4
 80076b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	7d1b      	ldrb	r3, [r3, #20]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d111      	bne.n	80076e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	3318      	adds	r3, #24
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	4413      	add	r3, r2
 80076ca:	3304      	adds	r3, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	6811      	ldr	r1, [r2, #0]
 80076d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	3318      	adds	r3, #24
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	440b      	add	r3, r1
 80076de:	3304      	adds	r3, #4
 80076e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3307      	adds	r3, #7
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	061a      	lsls	r2, r3, #24
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3306      	adds	r3, #6
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	041b      	lsls	r3, r3, #16
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3305      	adds	r3, #5
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	4313      	orrs	r3, r2
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	3204      	adds	r2, #4
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	4610      	mov	r0, r2
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	6811      	ldr	r1, [r2, #0]
 800770a:	ea43 0200 	orr.w	r2, r3, r0
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	440b      	add	r3, r1
 8007714:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007718:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3303      	adds	r3, #3
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	061a      	lsls	r2, r3, #24
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3302      	adds	r3, #2
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3301      	adds	r3, #1
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	4313      	orrs	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	4610      	mov	r0, r2
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	6811      	ldr	r1, [r2, #0]
 8007740:	ea43 0200 	orr.w	r2, r3, r0
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	440b      	add	r3, r1
 800774a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800774e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3318      	adds	r3, #24
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	4413      	add	r3, r2
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	6811      	ldr	r1, [r2, #0]
 8007762:	f043 0201 	orr.w	r2, r3, #1
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	3318      	adds	r3, #24
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	440b      	add	r3, r1
 800776e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e00e      	b.n	8007792 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e006      	b.n	8007792 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
  }
}
 8007792:	4618      	mov	r0, r3
 8007794:	3724      	adds	r7, #36	; 0x24
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800779e:	b480      	push	{r7}
 80077a0:	b087      	sub	sp, #28
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077b2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d003      	beq.n	80077c2 <HAL_CAN_GetRxMessage+0x24>
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	f040 80f3 	bne.w	80079a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10e      	bne.n	80077e6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d116      	bne.n	8007804 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0e7      	b.n	80079b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0d8      	b.n	80079b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	331b      	adds	r3, #27
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	4413      	add	r3, r2
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0204 	and.w	r2, r3, #4
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10c      	bne.n	800783c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	331b      	adds	r3, #27
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	4413      	add	r3, r2
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	0d5b      	lsrs	r3, r3, #21
 8007832:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e00b      	b.n	8007854 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	331b      	adds	r3, #27
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	4413      	add	r3, r2
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	08db      	lsrs	r3, r3, #3
 800784c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	331b      	adds	r3, #27
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	4413      	add	r3, r2
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0202 	and.w	r2, r3, #2
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	331b      	adds	r3, #27
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	4413      	add	r3, r2
 8007876:	3304      	adds	r3, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 020f 	and.w	r2, r3, #15
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	331b      	adds	r3, #27
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	4413      	add	r3, r2
 800788e:	3304      	adds	r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	b2da      	uxtb	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	331b      	adds	r3, #27
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	4413      	add	r3, r2
 80078a6:	3304      	adds	r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	0a1a      	lsrs	r2, r3, #8
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	0c1a      	lsrs	r2, r3, #16
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	3302      	adds	r3, #2
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	4413      	add	r3, r2
 8007906:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	0e1a      	lsrs	r2, r3, #24
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	3303      	adds	r3, #3
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	4413      	add	r3, r2
 8007920:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	3304      	adds	r3, #4
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	4413      	add	r3, r2
 8007938:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	0a1a      	lsrs	r2, r3, #8
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	3305      	adds	r3, #5
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	4413      	add	r3, r2
 8007952:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	0c1a      	lsrs	r2, r3, #16
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	3306      	adds	r3, #6
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	4413      	add	r3, r2
 800796c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	0e1a      	lsrs	r2, r3, #24
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	3307      	adds	r3, #7
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d108      	bne.n	8007994 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0220 	orr.w	r2, r2, #32
 8007990:	60da      	str	r2, [r3, #12]
 8007992:	e007      	b.n	80079a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0220 	orr.w	r2, r2, #32
 80079a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e006      	b.n	80079b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
  }
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b08a      	sub	sp, #40	; 0x28
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d07c      	beq.n	8007b02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d023      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2201      	movs	r2, #1
 8007a18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f983 	bl	8007d30 <HAL_CAN_TxMailbox0CompleteCallback>
 8007a2a:	e016      	b.n	8007a5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3e:	e00c      	b.n	8007a5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
 8007a52:	e002      	b.n	8007a5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f989 	bl	8007d6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d024      	beq.n	8007aae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f963 	bl	8007d44 <HAL_CAN_TxMailbox1CompleteCallback>
 8007a7e:	e016      	b.n	8007aae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
 8007a92:	e00c      	b.n	8007aae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa6:	e002      	b.n	8007aae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f969 	bl	8007d80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d024      	beq.n	8007b02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ac0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f943 	bl	8007d58 <HAL_CAN_TxMailbox2CompleteCallback>
 8007ad2:	e016      	b.n	8007b02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae6:	e00c      	b.n	8007b02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
 8007afa:	e002      	b.n	8007b02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f949 	bl	8007d94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2210      	movs	r2, #16
 8007b24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d006      	beq.n	8007b48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2208      	movs	r2, #8
 8007b40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f93a 	bl	8007dbc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f921 	bl	8007da8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00c      	beq.n	8007b8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f003 0310 	and.w	r3, r3, #16
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2210      	movs	r2, #16
 8007b88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d006      	beq.n	8007bac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f91c 	bl	8007de4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f003 0303 	and.w	r3, r3, #3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f903 	bl	8007dd0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d006      	beq.n	8007bec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2210      	movs	r2, #16
 8007be4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f906 	bl	8007df8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2208      	movs	r2, #8
 8007c06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f8ff 	bl	8007e0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d07b      	beq.n	8007d10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d072      	beq.n	8007d08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	f043 0304 	orr.w	r3, r3, #4
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d043      	beq.n	8007d08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d03e      	beq.n	8007d08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c90:	2b60      	cmp	r3, #96	; 0x60
 8007c92:	d02b      	beq.n	8007cec <HAL_CAN_IRQHandler+0x32a>
 8007c94:	2b60      	cmp	r3, #96	; 0x60
 8007c96:	d82e      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007c98:	2b50      	cmp	r3, #80	; 0x50
 8007c9a:	d022      	beq.n	8007ce2 <HAL_CAN_IRQHandler+0x320>
 8007c9c:	2b50      	cmp	r3, #80	; 0x50
 8007c9e:	d82a      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	d019      	beq.n	8007cd8 <HAL_CAN_IRQHandler+0x316>
 8007ca4:	2b40      	cmp	r3, #64	; 0x40
 8007ca6:	d826      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007ca8:	2b30      	cmp	r3, #48	; 0x30
 8007caa:	d010      	beq.n	8007cce <HAL_CAN_IRQHandler+0x30c>
 8007cac:	2b30      	cmp	r3, #48	; 0x30
 8007cae:	d822      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	d002      	beq.n	8007cba <HAL_CAN_IRQHandler+0x2f8>
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d005      	beq.n	8007cc4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007cb8:	e01d      	b.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	f043 0308 	orr.w	r3, r3, #8
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cc2:	e019      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	f043 0310 	orr.w	r3, r3, #16
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ccc:	e014      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cd6:	e00f      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ce0:	e00a      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cea:	e005      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            break;
 8007cf6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2204      	movs	r2, #4
 8007d0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d008      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f87c 	bl	8007e20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007d28:	bf00      	nop
 8007d2a:	3728      	adds	r7, #40	; 0x28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <__NVIC_SetPriorityGrouping+0x44>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e50:	4013      	ands	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e66:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <__NVIC_SetPriorityGrouping+0x44>)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	60d3      	str	r3, [r2, #12]
}
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	e000ed00 	.word	0xe000ed00

08007e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <__NVIC_GetPriorityGrouping+0x18>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	f003 0307 	and.w	r3, r3, #7
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	e000ed00 	.word	0xe000ed00

08007e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	db0b      	blt.n	8007ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	f003 021f 	and.w	r2, r3, #31
 8007eb0:	4907      	ldr	r1, [pc, #28]	; (8007ed0 <__NVIC_EnableIRQ+0x38>)
 8007eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	2001      	movs	r0, #1
 8007eba:	fa00 f202 	lsl.w	r2, r0, r2
 8007ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e100 	.word	0xe000e100

08007ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	db0a      	blt.n	8007efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	490c      	ldr	r1, [pc, #48]	; (8007f20 <__NVIC_SetPriority+0x4c>)
 8007eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef2:	0112      	lsls	r2, r2, #4
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007efc:	e00a      	b.n	8007f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	4908      	ldr	r1, [pc, #32]	; (8007f24 <__NVIC_SetPriority+0x50>)
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	3b04      	subs	r3, #4
 8007f0c:	0112      	lsls	r2, r2, #4
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	440b      	add	r3, r1
 8007f12:	761a      	strb	r2, [r3, #24]
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	e000e100 	.word	0xe000e100
 8007f24:	e000ed00 	.word	0xe000ed00

08007f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b089      	sub	sp, #36	; 0x24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f1c3 0307 	rsb	r3, r3, #7
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	bf28      	it	cs
 8007f46:	2304      	movcs	r3, #4
 8007f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	2b06      	cmp	r3, #6
 8007f50:	d902      	bls.n	8007f58 <NVIC_EncodePriority+0x30>
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3b03      	subs	r3, #3
 8007f56:	e000      	b.n	8007f5a <NVIC_EncodePriority+0x32>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	43da      	mvns	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	401a      	ands	r2, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f70:	f04f 31ff 	mov.w	r1, #4294967295
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	43d9      	mvns	r1, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f80:	4313      	orrs	r3, r2
         );
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3724      	adds	r7, #36	; 0x24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fa0:	d301      	bcc.n	8007fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e00f      	b.n	8007fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	; (8007fd0 <SysTick_Config+0x40>)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fae:	210f      	movs	r1, #15
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	f7ff ff8e 	bl	8007ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fb8:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <SysTick_Config+0x40>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fbe:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <SysTick_Config+0x40>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	e000e010 	.word	0xe000e010

08007fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff ff29 	bl	8007e34 <__NVIC_SetPriorityGrouping>
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b086      	sub	sp, #24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ffc:	f7ff ff3e 	bl	8007e7c <__NVIC_GetPriorityGrouping>
 8008000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	f7ff ff8e 	bl	8007f28 <NVIC_EncodePriority>
 800800c:	4602      	mov	r2, r0
 800800e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff ff5d 	bl	8007ed4 <__NVIC_SetPriority>
}
 800801a:	bf00      	nop
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	4603      	mov	r3, r0
 800802a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800802c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff ff31 	bl	8007e98 <__NVIC_EnableIRQ>
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff ffa2 	bl	8007f90 <SysTick_Config>
 800804c:	4603      	mov	r3, r0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008062:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008064:	f7fe fc4e 	bl	8006904 <HAL_GetTick>
 8008068:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d008      	beq.n	8008088 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2280      	movs	r2, #128	; 0x80
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e052      	b.n	800812e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0216 	bic.w	r2, r2, #22
 8008096:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695a      	ldr	r2, [r3, #20]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <HAL_DMA_Abort+0x62>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d007      	beq.n	80080c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0208 	bic.w	r2, r2, #8
 80080c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080d8:	e013      	b.n	8008102 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080da:	f7fe fc13 	bl	8006904 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b05      	cmp	r3, #5
 80080e6:	d90c      	bls.n	8008102 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2203      	movs	r2, #3
 80080f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e015      	b.n	800812e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e4      	bne.n	80080da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008114:	223f      	movs	r2, #63	; 0x3f
 8008116:	409a      	lsls	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d004      	beq.n	8008154 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2280      	movs	r2, #128	; 0x80
 800814e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e00c      	b.n	800816e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2205      	movs	r2, #5
 8008158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
	...

0800817c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800817c:	b480      	push	{r7}
 800817e:	b089      	sub	sp, #36	; 0x24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800818a:	2300      	movs	r3, #0
 800818c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800818e:	2300      	movs	r3, #0
 8008190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
 8008196:	e165      	b.n	8008464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008198:	2201      	movs	r2, #1
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	fa02 f303 	lsl.w	r3, r2, r3
 80081a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4013      	ands	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	f040 8154 	bne.w	800845e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d005      	beq.n	80081ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d130      	bne.n	8008230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	2203      	movs	r2, #3
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	43db      	mvns	r3, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	4013      	ands	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008204:	2201      	movs	r2, #1
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	fa02 f303 	lsl.w	r3, r2, r3
 800820c:	43db      	mvns	r3, r3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4013      	ands	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	091b      	lsrs	r3, r3, #4
 800821a:	f003 0201 	and.w	r2, r3, #1
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	4313      	orrs	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	2b03      	cmp	r3, #3
 800823a:	d017      	beq.n	800826c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	2203      	movs	r2, #3
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	43db      	mvns	r3, r3
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	4013      	ands	r3, r2
 8008252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	4313      	orrs	r3, r2
 8008264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d123      	bne.n	80082c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	08da      	lsrs	r2, r3, #3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3208      	adds	r2, #8
 8008280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	220f      	movs	r2, #15
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	43db      	mvns	r3, r3
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	4013      	ands	r3, r2
 800829a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	08da      	lsrs	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3208      	adds	r2, #8
 80082ba:	69b9      	ldr	r1, [r7, #24]
 80082bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	2203      	movs	r2, #3
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	43db      	mvns	r3, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4013      	ands	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f003 0203 	and.w	r2, r3, #3
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	fa02 f303 	lsl.w	r3, r2, r3
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80ae 	beq.w	800845e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	4b5d      	ldr	r3, [pc, #372]	; (800847c <HAL_GPIO_Init+0x300>)
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	4a5c      	ldr	r2, [pc, #368]	; (800847c <HAL_GPIO_Init+0x300>)
 800830c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008310:	6453      	str	r3, [r2, #68]	; 0x44
 8008312:	4b5a      	ldr	r3, [pc, #360]	; (800847c <HAL_GPIO_Init+0x300>)
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800831e:	4a58      	ldr	r2, [pc, #352]	; (8008480 <HAL_GPIO_Init+0x304>)
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	3302      	adds	r3, #2
 8008326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	220f      	movs	r2, #15
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43db      	mvns	r3, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4013      	ands	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a4f      	ldr	r2, [pc, #316]	; (8008484 <HAL_GPIO_Init+0x308>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d025      	beq.n	8008396 <HAL_GPIO_Init+0x21a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a4e      	ldr	r2, [pc, #312]	; (8008488 <HAL_GPIO_Init+0x30c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d01f      	beq.n	8008392 <HAL_GPIO_Init+0x216>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a4d      	ldr	r2, [pc, #308]	; (800848c <HAL_GPIO_Init+0x310>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d019      	beq.n	800838e <HAL_GPIO_Init+0x212>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a4c      	ldr	r2, [pc, #304]	; (8008490 <HAL_GPIO_Init+0x314>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d013      	beq.n	800838a <HAL_GPIO_Init+0x20e>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a4b      	ldr	r2, [pc, #300]	; (8008494 <HAL_GPIO_Init+0x318>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00d      	beq.n	8008386 <HAL_GPIO_Init+0x20a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a4a      	ldr	r2, [pc, #296]	; (8008498 <HAL_GPIO_Init+0x31c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d007      	beq.n	8008382 <HAL_GPIO_Init+0x206>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a49      	ldr	r2, [pc, #292]	; (800849c <HAL_GPIO_Init+0x320>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d101      	bne.n	800837e <HAL_GPIO_Init+0x202>
 800837a:	2306      	movs	r3, #6
 800837c:	e00c      	b.n	8008398 <HAL_GPIO_Init+0x21c>
 800837e:	2307      	movs	r3, #7
 8008380:	e00a      	b.n	8008398 <HAL_GPIO_Init+0x21c>
 8008382:	2305      	movs	r3, #5
 8008384:	e008      	b.n	8008398 <HAL_GPIO_Init+0x21c>
 8008386:	2304      	movs	r3, #4
 8008388:	e006      	b.n	8008398 <HAL_GPIO_Init+0x21c>
 800838a:	2303      	movs	r3, #3
 800838c:	e004      	b.n	8008398 <HAL_GPIO_Init+0x21c>
 800838e:	2302      	movs	r3, #2
 8008390:	e002      	b.n	8008398 <HAL_GPIO_Init+0x21c>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <HAL_GPIO_Init+0x21c>
 8008396:	2300      	movs	r3, #0
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	f002 0203 	and.w	r2, r2, #3
 800839e:	0092      	lsls	r2, r2, #2
 80083a0:	4093      	lsls	r3, r2
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083a8:	4935      	ldr	r1, [pc, #212]	; (8008480 <HAL_GPIO_Init+0x304>)
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	089b      	lsrs	r3, r3, #2
 80083ae:	3302      	adds	r3, #2
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083b6:	4b3a      	ldr	r3, [pc, #232]	; (80084a0 <HAL_GPIO_Init+0x324>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	43db      	mvns	r3, r3
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	4013      	ands	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083da:	4a31      	ldr	r2, [pc, #196]	; (80084a0 <HAL_GPIO_Init+0x324>)
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083e0:	4b2f      	ldr	r3, [pc, #188]	; (80084a0 <HAL_GPIO_Init+0x324>)
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	4013      	ands	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008404:	4a26      	ldr	r2, [pc, #152]	; (80084a0 <HAL_GPIO_Init+0x324>)
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800840a:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <HAL_GPIO_Init+0x324>)
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	43db      	mvns	r3, r3
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	4013      	ands	r3, r2
 8008418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4313      	orrs	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800842e:	4a1c      	ldr	r2, [pc, #112]	; (80084a0 <HAL_GPIO_Init+0x324>)
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008434:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <HAL_GPIO_Init+0x324>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	43db      	mvns	r3, r3
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4013      	ands	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008458:	4a11      	ldr	r2, [pc, #68]	; (80084a0 <HAL_GPIO_Init+0x324>)
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	3301      	adds	r3, #1
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	2b0f      	cmp	r3, #15
 8008468:	f67f ae96 	bls.w	8008198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	3724      	adds	r7, #36	; 0x24
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40023800 	.word	0x40023800
 8008480:	40013800 	.word	0x40013800
 8008484:	40020000 	.word	0x40020000
 8008488:	40020400 	.word	0x40020400
 800848c:	40020800 	.word	0x40020800
 8008490:	40020c00 	.word	0x40020c00
 8008494:	40021000 	.word	0x40021000
 8008498:	40021400 	.word	0x40021400
 800849c:	40021800 	.word	0x40021800
 80084a0:	40013c00 	.word	0x40013c00

080084a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	807b      	strh	r3, [r7, #2]
 80084b0:	4613      	mov	r3, r2
 80084b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084b4:	787b      	ldrb	r3, [r7, #1]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084ba:	887a      	ldrh	r2, [r7, #2]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80084c0:	e003      	b.n	80084ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80084c2:	887b      	ldrh	r3, [r7, #2]
 80084c4:	041a      	lsls	r2, r3, #16
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	619a      	str	r2, [r3, #24]
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
	...

080084d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	4b20      	ldr	r3, [pc, #128]	; (8008568 <HAL_PWREx_EnableOverDrive+0x90>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	4a1f      	ldr	r2, [pc, #124]	; (8008568 <HAL_PWREx_EnableOverDrive+0x90>)
 80084ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f0:	6413      	str	r3, [r2, #64]	; 0x40
 80084f2:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <HAL_PWREx_EnableOverDrive+0x90>)
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80084fe:	4b1b      	ldr	r3, [pc, #108]	; (800856c <HAL_PWREx_EnableOverDrive+0x94>)
 8008500:	2201      	movs	r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008504:	f7fe f9fe 	bl	8006904 <HAL_GetTick>
 8008508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800850a:	e009      	b.n	8008520 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800850c:	f7fe f9fa 	bl	8006904 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800851a:	d901      	bls.n	8008520 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e01f      	b.n	8008560 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008520:	4b13      	ldr	r3, [pc, #76]	; (8008570 <HAL_PWREx_EnableOverDrive+0x98>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852c:	d1ee      	bne.n	800850c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008530:	2201      	movs	r2, #1
 8008532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008534:	f7fe f9e6 	bl	8006904 <HAL_GetTick>
 8008538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800853a:	e009      	b.n	8008550 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800853c:	f7fe f9e2 	bl	8006904 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800854a:	d901      	bls.n	8008550 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e007      	b.n	8008560 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <HAL_PWREx_EnableOverDrive+0x98>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800855c:	d1ee      	bne.n	800853c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	40023800 	.word	0x40023800
 800856c:	420e0040 	.word	0x420e0040
 8008570:	40007000 	.word	0x40007000
 8008574:	420e0044 	.word	0x420e0044

08008578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e0cc      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800858c:	4b68      	ldr	r3, [pc, #416]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d90c      	bls.n	80085b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859a:	4b65      	ldr	r3, [pc, #404]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a2:	4b63      	ldr	r3, [pc, #396]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 030f 	and.w	r3, r3, #15
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d001      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e0b8      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d020      	beq.n	8008602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085cc:	4b59      	ldr	r3, [pc, #356]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	4a58      	ldr	r2, [pc, #352]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085e4:	4b53      	ldr	r3, [pc, #332]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a52      	ldr	r2, [pc, #328]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085f0:	4b50      	ldr	r3, [pc, #320]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	494d      	ldr	r1, [pc, #308]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d044      	beq.n	8008698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d107      	bne.n	8008626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008616:	4b47      	ldr	r3, [pc, #284]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d119      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e07f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d003      	beq.n	8008636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008632:	2b03      	cmp	r3, #3
 8008634:	d107      	bne.n	8008646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008636:	4b3f      	ldr	r3, [pc, #252]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d109      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e06f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008646:	4b3b      	ldr	r3, [pc, #236]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e067      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008656:	4b37      	ldr	r3, [pc, #220]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f023 0203 	bic.w	r2, r3, #3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	4934      	ldr	r1, [pc, #208]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008664:	4313      	orrs	r3, r2
 8008666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008668:	f7fe f94c 	bl	8006904 <HAL_GetTick>
 800866c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866e:	e00a      	b.n	8008686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008670:	f7fe f948 	bl	8006904 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	f241 3288 	movw	r2, #5000	; 0x1388
 800867e:	4293      	cmp	r3, r2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e04f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008686:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 020c 	and.w	r2, r3, #12
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	429a      	cmp	r2, r3
 8008696:	d1eb      	bne.n	8008670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008698:	4b25      	ldr	r3, [pc, #148]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 030f 	and.w	r3, r3, #15
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d20c      	bcs.n	80086c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086a6:	4b22      	ldr	r3, [pc, #136]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ae:	4b20      	ldr	r3, [pc, #128]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d001      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e032      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086cc:	4b19      	ldr	r3, [pc, #100]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	4916      	ldr	r1, [pc, #88]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086ea:	4b12      	ldr	r3, [pc, #72]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	490e      	ldr	r1, [pc, #56]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086fe:	f000 f855 	bl	80087ac <HAL_RCC_GetSysClockFreq>
 8008702:	4602      	mov	r2, r0
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	091b      	lsrs	r3, r3, #4
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	490a      	ldr	r1, [pc, #40]	; (8008738 <HAL_RCC_ClockConfig+0x1c0>)
 8008710:	5ccb      	ldrb	r3, [r1, r3]
 8008712:	fa22 f303 	lsr.w	r3, r2, r3
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 8008718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe f8ac 	bl	800687c <HAL_InitTick>

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40023c00 	.word	0x40023c00
 8008734:	40023800 	.word	0x40023800
 8008738:	08011580 	.word	0x08011580
 800873c:	20000040 	.word	0x20000040
 8008740:	20000044 	.word	0x20000044

08008744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008748:	4b03      	ldr	r3, [pc, #12]	; (8008758 <HAL_RCC_GetHCLKFreq+0x14>)
 800874a:	681b      	ldr	r3, [r3, #0]
}
 800874c:	4618      	mov	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20000040 	.word	0x20000040

0800875c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008760:	f7ff fff0 	bl	8008744 <HAL_RCC_GetHCLKFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	0a9b      	lsrs	r3, r3, #10
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	4903      	ldr	r1, [pc, #12]	; (8008780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40023800 	.word	0x40023800
 8008780:	08011590 	.word	0x08011590

08008784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008788:	f7ff ffdc 	bl	8008744 <HAL_RCC_GetHCLKFreq>
 800878c:	4602      	mov	r2, r0
 800878e:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	0b5b      	lsrs	r3, r3, #13
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	4903      	ldr	r1, [pc, #12]	; (80087a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800879a:	5ccb      	ldrb	r3, [r1, r3]
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40023800 	.word	0x40023800
 80087a8:	08011590 	.word	0x08011590

080087ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087b0:	b0ae      	sub	sp, #184	; 0xb8
 80087b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087d2:	4bcb      	ldr	r3, [pc, #812]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 030c 	and.w	r3, r3, #12
 80087da:	2b0c      	cmp	r3, #12
 80087dc:	f200 8206 	bhi.w	8008bec <HAL_RCC_GetSysClockFreq+0x440>
 80087e0:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	0800881d 	.word	0x0800881d
 80087ec:	08008bed 	.word	0x08008bed
 80087f0:	08008bed 	.word	0x08008bed
 80087f4:	08008bed 	.word	0x08008bed
 80087f8:	08008825 	.word	0x08008825
 80087fc:	08008bed 	.word	0x08008bed
 8008800:	08008bed 	.word	0x08008bed
 8008804:	08008bed 	.word	0x08008bed
 8008808:	0800882d 	.word	0x0800882d
 800880c:	08008bed 	.word	0x08008bed
 8008810:	08008bed 	.word	0x08008bed
 8008814:	08008bed 	.word	0x08008bed
 8008818:	08008a1d 	.word	0x08008a1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800881c:	4bb9      	ldr	r3, [pc, #740]	; (8008b04 <HAL_RCC_GetSysClockFreq+0x358>)
 800881e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008822:	e1e7      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008824:	4bb8      	ldr	r3, [pc, #736]	; (8008b08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800882a:	e1e3      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800882c:	4bb4      	ldr	r3, [pc, #720]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008838:	4bb1      	ldr	r3, [pc, #708]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d071      	beq.n	8008928 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008844:	4bae      	ldr	r3, [pc, #696]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	099b      	lsrs	r3, r3, #6
 800884a:	2200      	movs	r2, #0
 800884c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008850:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008860:	2300      	movs	r3, #0
 8008862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800886a:	4622      	mov	r2, r4
 800886c:	462b      	mov	r3, r5
 800886e:	f04f 0000 	mov.w	r0, #0
 8008872:	f04f 0100 	mov.w	r1, #0
 8008876:	0159      	lsls	r1, r3, #5
 8008878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800887c:	0150      	lsls	r0, r2, #5
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4621      	mov	r1, r4
 8008884:	1a51      	subs	r1, r2, r1
 8008886:	6439      	str	r1, [r7, #64]	; 0x40
 8008888:	4629      	mov	r1, r5
 800888a:	eb63 0301 	sbc.w	r3, r3, r1
 800888e:	647b      	str	r3, [r7, #68]	; 0x44
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800889c:	4649      	mov	r1, r9
 800889e:	018b      	lsls	r3, r1, #6
 80088a0:	4641      	mov	r1, r8
 80088a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80088a6:	4641      	mov	r1, r8
 80088a8:	018a      	lsls	r2, r1, #6
 80088aa:	4641      	mov	r1, r8
 80088ac:	1a51      	subs	r1, r2, r1
 80088ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80088b0:	4649      	mov	r1, r9
 80088b2:	eb63 0301 	sbc.w	r3, r3, r1
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	f04f 0300 	mov.w	r3, #0
 80088c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80088c4:	4649      	mov	r1, r9
 80088c6:	00cb      	lsls	r3, r1, #3
 80088c8:	4641      	mov	r1, r8
 80088ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ce:	4641      	mov	r1, r8
 80088d0:	00ca      	lsls	r2, r1, #3
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	4622      	mov	r2, r4
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	633b      	str	r3, [r7, #48]	; 0x30
 80088de:	462b      	mov	r3, r5
 80088e0:	460a      	mov	r2, r1
 80088e2:	eb42 0303 	adc.w	r3, r2, r3
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80088f4:	4629      	mov	r1, r5
 80088f6:	024b      	lsls	r3, r1, #9
 80088f8:	4621      	mov	r1, r4
 80088fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80088fe:	4621      	mov	r1, r4
 8008900:	024a      	lsls	r2, r1, #9
 8008902:	4610      	mov	r0, r2
 8008904:	4619      	mov	r1, r3
 8008906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800890a:	2200      	movs	r2, #0
 800890c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008918:	f7f8 f9d6 	bl	8000cc8 <__aeabi_uldivmod>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4613      	mov	r3, r2
 8008922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008926:	e067      	b.n	80089f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008928:	4b75      	ldr	r3, [pc, #468]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	099b      	lsrs	r3, r3, #6
 800892e:	2200      	movs	r2, #0
 8008930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008934:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800893c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008940:	67bb      	str	r3, [r7, #120]	; 0x78
 8008942:	2300      	movs	r3, #0
 8008944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008946:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800894a:	4622      	mov	r2, r4
 800894c:	462b      	mov	r3, r5
 800894e:	f04f 0000 	mov.w	r0, #0
 8008952:	f04f 0100 	mov.w	r1, #0
 8008956:	0159      	lsls	r1, r3, #5
 8008958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800895c:	0150      	lsls	r0, r2, #5
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4621      	mov	r1, r4
 8008964:	1a51      	subs	r1, r2, r1
 8008966:	62b9      	str	r1, [r7, #40]	; 0x28
 8008968:	4629      	mov	r1, r5
 800896a:	eb63 0301 	sbc.w	r3, r3, r1
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800897c:	4649      	mov	r1, r9
 800897e:	018b      	lsls	r3, r1, #6
 8008980:	4641      	mov	r1, r8
 8008982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008986:	4641      	mov	r1, r8
 8008988:	018a      	lsls	r2, r1, #6
 800898a:	4641      	mov	r1, r8
 800898c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008990:	4649      	mov	r1, r9
 8008992:	eb63 0b01 	sbc.w	fp, r3, r1
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089aa:	4692      	mov	sl, r2
 80089ac:	469b      	mov	fp, r3
 80089ae:	4623      	mov	r3, r4
 80089b0:	eb1a 0303 	adds.w	r3, sl, r3
 80089b4:	623b      	str	r3, [r7, #32]
 80089b6:	462b      	mov	r3, r5
 80089b8:	eb4b 0303 	adc.w	r3, fp, r3
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
 80089be:	f04f 0200 	mov.w	r2, #0
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80089ca:	4629      	mov	r1, r5
 80089cc:	028b      	lsls	r3, r1, #10
 80089ce:	4621      	mov	r1, r4
 80089d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089d4:	4621      	mov	r1, r4
 80089d6:	028a      	lsls	r2, r1, #10
 80089d8:	4610      	mov	r0, r2
 80089da:	4619      	mov	r1, r3
 80089dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089e0:	2200      	movs	r2, #0
 80089e2:	673b      	str	r3, [r7, #112]	; 0x70
 80089e4:	677a      	str	r2, [r7, #116]	; 0x74
 80089e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80089ea:	f7f8 f96d 	bl	8000cc8 <__aeabi_uldivmod>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4613      	mov	r3, r2
 80089f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80089f8:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	0c1b      	lsrs	r3, r3, #16
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	3301      	adds	r3, #1
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008a1a:	e0eb      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a1c:	4b38      	ldr	r3, [pc, #224]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a28:	4b35      	ldr	r3, [pc, #212]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d06b      	beq.n	8008b0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a34:	4b32      	ldr	r3, [pc, #200]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	099b      	lsrs	r3, r3, #6
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	663b      	str	r3, [r7, #96]	; 0x60
 8008a48:	2300      	movs	r3, #0
 8008a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8008a4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f04f 0000 	mov.w	r0, #0
 8008a58:	f04f 0100 	mov.w	r1, #0
 8008a5c:	0159      	lsls	r1, r3, #5
 8008a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a62:	0150      	lsls	r0, r2, #5
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	4621      	mov	r1, r4
 8008a6a:	1a51      	subs	r1, r2, r1
 8008a6c:	61b9      	str	r1, [r7, #24]
 8008a6e:	4629      	mov	r1, r5
 8008a70:	eb63 0301 	sbc.w	r3, r3, r1
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008a82:	4659      	mov	r1, fp
 8008a84:	018b      	lsls	r3, r1, #6
 8008a86:	4651      	mov	r1, sl
 8008a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a8c:	4651      	mov	r1, sl
 8008a8e:	018a      	lsls	r2, r1, #6
 8008a90:	4651      	mov	r1, sl
 8008a92:	ebb2 0801 	subs.w	r8, r2, r1
 8008a96:	4659      	mov	r1, fp
 8008a98:	eb63 0901 	sbc.w	r9, r3, r1
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ab0:	4690      	mov	r8, r2
 8008ab2:	4699      	mov	r9, r3
 8008ab4:	4623      	mov	r3, r4
 8008ab6:	eb18 0303 	adds.w	r3, r8, r3
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	462b      	mov	r3, r5
 8008abe:	eb49 0303 	adc.w	r3, r9, r3
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	024b      	lsls	r3, r1, #9
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ada:	4621      	mov	r1, r4
 8008adc:	024a      	lsls	r2, r1, #9
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008af0:	f7f8 f8ea 	bl	8000cc8 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4613      	mov	r3, r2
 8008afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008afe:	e065      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x420>
 8008b00:	40023800 	.word	0x40023800
 8008b04:	00f42400 	.word	0x00f42400
 8008b08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b0c:	4b3d      	ldr	r3, [pc, #244]	; (8008c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	099b      	lsrs	r3, r3, #6
 8008b12:	2200      	movs	r2, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	4611      	mov	r1, r2
 8008b18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b1e:	2300      	movs	r3, #0
 8008b20:	657b      	str	r3, [r7, #84]	; 0x54
 8008b22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008b26:	4642      	mov	r2, r8
 8008b28:	464b      	mov	r3, r9
 8008b2a:	f04f 0000 	mov.w	r0, #0
 8008b2e:	f04f 0100 	mov.w	r1, #0
 8008b32:	0159      	lsls	r1, r3, #5
 8008b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b38:	0150      	lsls	r0, r2, #5
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4641      	mov	r1, r8
 8008b40:	1a51      	subs	r1, r2, r1
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	4649      	mov	r1, r9
 8008b46:	eb63 0301 	sbc.w	r3, r3, r1
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	f04f 0300 	mov.w	r3, #0
 8008b54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008b58:	4659      	mov	r1, fp
 8008b5a:	018b      	lsls	r3, r1, #6
 8008b5c:	4651      	mov	r1, sl
 8008b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b62:	4651      	mov	r1, sl
 8008b64:	018a      	lsls	r2, r1, #6
 8008b66:	4651      	mov	r1, sl
 8008b68:	1a54      	subs	r4, r2, r1
 8008b6a:	4659      	mov	r1, fp
 8008b6c:	eb63 0501 	sbc.w	r5, r3, r1
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	00eb      	lsls	r3, r5, #3
 8008b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b7e:	00e2      	lsls	r2, r4, #3
 8008b80:	4614      	mov	r4, r2
 8008b82:	461d      	mov	r5, r3
 8008b84:	4643      	mov	r3, r8
 8008b86:	18e3      	adds	r3, r4, r3
 8008b88:	603b      	str	r3, [r7, #0]
 8008b8a:	464b      	mov	r3, r9
 8008b8c:	eb45 0303 	adc.w	r3, r5, r3
 8008b90:	607b      	str	r3, [r7, #4]
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	028b      	lsls	r3, r1, #10
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ba8:	4621      	mov	r1, r4
 8008baa:	028a      	lsls	r2, r1, #10
 8008bac:	4610      	mov	r0, r2
 8008bae:	4619      	mov	r1, r3
 8008bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008bba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bbe:	f7f8 f883 	bl	8000cc8 <__aeabi_uldivmod>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	0f1b      	lsrs	r3, r3, #28
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008bea:	e003      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	37b8      	adds	r7, #184	; 0xb8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c02:	bf00      	nop
 8008c04:	40023800 	.word	0x40023800
 8008c08:	00f42400 	.word	0x00f42400

08008c0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e28d      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 8083 	beq.w	8008d32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008c2c:	4b94      	ldr	r3, [pc, #592]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 030c 	and.w	r3, r3, #12
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	d019      	beq.n	8008c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008c38:	4b91      	ldr	r3, [pc, #580]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d106      	bne.n	8008c52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008c44:	4b8e      	ldr	r3, [pc, #568]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c50:	d00c      	beq.n	8008c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c52:	4b8b      	ldr	r3, [pc, #556]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008c5a:	2b0c      	cmp	r3, #12
 8008c5c:	d112      	bne.n	8008c84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c5e:	4b88      	ldr	r3, [pc, #544]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c6a:	d10b      	bne.n	8008c84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c6c:	4b84      	ldr	r3, [pc, #528]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d05b      	beq.n	8008d30 <HAL_RCC_OscConfig+0x124>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d157      	bne.n	8008d30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e25a      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c8c:	d106      	bne.n	8008c9c <HAL_RCC_OscConfig+0x90>
 8008c8e:	4b7c      	ldr	r3, [pc, #496]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a7b      	ldr	r2, [pc, #492]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e01d      	b.n	8008cd8 <HAL_RCC_OscConfig+0xcc>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ca4:	d10c      	bne.n	8008cc0 <HAL_RCC_OscConfig+0xb4>
 8008ca6:	4b76      	ldr	r3, [pc, #472]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a75      	ldr	r2, [pc, #468]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	4b73      	ldr	r3, [pc, #460]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a72      	ldr	r2, [pc, #456]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	e00b      	b.n	8008cd8 <HAL_RCC_OscConfig+0xcc>
 8008cc0:	4b6f      	ldr	r3, [pc, #444]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a6e      	ldr	r2, [pc, #440]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	4b6c      	ldr	r3, [pc, #432]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a6b      	ldr	r2, [pc, #428]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d013      	beq.n	8008d08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce0:	f7fd fe10 	bl	8006904 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ce8:	f7fd fe0c 	bl	8006904 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b64      	cmp	r3, #100	; 0x64
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e21f      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cfa:	4b61      	ldr	r3, [pc, #388]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f0      	beq.n	8008ce8 <HAL_RCC_OscConfig+0xdc>
 8008d06:	e014      	b.n	8008d32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fd fdfc 	bl	8006904 <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d10:	f7fd fdf8 	bl	8006904 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b64      	cmp	r3, #100	; 0x64
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e20b      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d22:	4b57      	ldr	r3, [pc, #348]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x104>
 8008d2e:	e000      	b.n	8008d32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d06f      	beq.n	8008e1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008d3e:	4b50      	ldr	r3, [pc, #320]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 030c 	and.w	r3, r3, #12
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d017      	beq.n	8008d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008d4a:	4b4d      	ldr	r3, [pc, #308]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d105      	bne.n	8008d62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008d56:	4b4a      	ldr	r3, [pc, #296]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d62:	4b47      	ldr	r3, [pc, #284]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008d6a:	2b0c      	cmp	r3, #12
 8008d6c:	d11c      	bne.n	8008da8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d6e:	4b44      	ldr	r3, [pc, #272]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d116      	bne.n	8008da8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d7a:	4b41      	ldr	r3, [pc, #260]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d005      	beq.n	8008d92 <HAL_RCC_OscConfig+0x186>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d001      	beq.n	8008d92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e1d3      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d92:	4b3b      	ldr	r3, [pc, #236]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	4937      	ldr	r1, [pc, #220]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008da6:	e03a      	b.n	8008e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d020      	beq.n	8008df2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008db0:	4b34      	ldr	r3, [pc, #208]	; (8008e84 <HAL_RCC_OscConfig+0x278>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db6:	f7fd fda5 	bl	8006904 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dbc:	e008      	b.n	8008dd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dbe:	f7fd fda1 	bl	8006904 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d901      	bls.n	8008dd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e1b4      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dd0:	4b2b      	ldr	r3, [pc, #172]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f0      	beq.n	8008dbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ddc:	4b28      	ldr	r3, [pc, #160]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	4925      	ldr	r1, [pc, #148]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	600b      	str	r3, [r1, #0]
 8008df0:	e015      	b.n	8008e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008df2:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <HAL_RCC_OscConfig+0x278>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df8:	f7fd fd84 	bl	8006904 <HAL_GetTick>
 8008dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dfe:	e008      	b.n	8008e12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e00:	f7fd fd80 	bl	8006904 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e193      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e12:	4b1b      	ldr	r3, [pc, #108]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1f0      	bne.n	8008e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0308 	and.w	r3, r3, #8
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d036      	beq.n	8008e98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <HAL_RCC_OscConfig+0x27c>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e38:	f7fd fd64 	bl	8006904 <HAL_GetTick>
 8008e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e3e:	e008      	b.n	8008e52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e40:	f7fd fd60 	bl	8006904 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d901      	bls.n	8008e52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e173      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e52:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <HAL_RCC_OscConfig+0x274>)
 8008e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0f0      	beq.n	8008e40 <HAL_RCC_OscConfig+0x234>
 8008e5e:	e01b      	b.n	8008e98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e60:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <HAL_RCC_OscConfig+0x27c>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e66:	f7fd fd4d 	bl	8006904 <HAL_GetTick>
 8008e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e6c:	e00e      	b.n	8008e8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e6e:	f7fd fd49 	bl	8006904 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d907      	bls.n	8008e8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e15c      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
 8008e80:	40023800 	.word	0x40023800
 8008e84:	42470000 	.word	0x42470000
 8008e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e8c:	4b8a      	ldr	r3, [pc, #552]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1ea      	bne.n	8008e6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8097 	beq.w	8008fd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eaa:	4b83      	ldr	r3, [pc, #524]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10f      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60bb      	str	r3, [r7, #8]
 8008eba:	4b7f      	ldr	r3, [pc, #508]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	4a7e      	ldr	r2, [pc, #504]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8008ec6:	4b7c      	ldr	r3, [pc, #496]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ece:	60bb      	str	r3, [r7, #8]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ed6:	4b79      	ldr	r3, [pc, #484]	; (80090bc <HAL_RCC_OscConfig+0x4b0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d118      	bne.n	8008f14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ee2:	4b76      	ldr	r3, [pc, #472]	; (80090bc <HAL_RCC_OscConfig+0x4b0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a75      	ldr	r2, [pc, #468]	; (80090bc <HAL_RCC_OscConfig+0x4b0>)
 8008ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eee:	f7fd fd09 	bl	8006904 <HAL_GetTick>
 8008ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ef6:	f7fd fd05 	bl	8006904 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e118      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f08:	4b6c      	ldr	r3, [pc, #432]	; (80090bc <HAL_RCC_OscConfig+0x4b0>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0f0      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d106      	bne.n	8008f2a <HAL_RCC_OscConfig+0x31e>
 8008f1c:	4b66      	ldr	r3, [pc, #408]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f20:	4a65      	ldr	r2, [pc, #404]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f22:	f043 0301 	orr.w	r3, r3, #1
 8008f26:	6713      	str	r3, [r2, #112]	; 0x70
 8008f28:	e01c      	b.n	8008f64 <HAL_RCC_OscConfig+0x358>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	d10c      	bne.n	8008f4c <HAL_RCC_OscConfig+0x340>
 8008f32:	4b61      	ldr	r3, [pc, #388]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f36:	4a60      	ldr	r2, [pc, #384]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f38:	f043 0304 	orr.w	r3, r3, #4
 8008f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f3e:	4b5e      	ldr	r3, [pc, #376]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f42:	4a5d      	ldr	r2, [pc, #372]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f44:	f043 0301 	orr.w	r3, r3, #1
 8008f48:	6713      	str	r3, [r2, #112]	; 0x70
 8008f4a:	e00b      	b.n	8008f64 <HAL_RCC_OscConfig+0x358>
 8008f4c:	4b5a      	ldr	r3, [pc, #360]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f50:	4a59      	ldr	r2, [pc, #356]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f52:	f023 0301 	bic.w	r3, r3, #1
 8008f56:	6713      	str	r3, [r2, #112]	; 0x70
 8008f58:	4b57      	ldr	r3, [pc, #348]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5c:	4a56      	ldr	r2, [pc, #344]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f5e:	f023 0304 	bic.w	r3, r3, #4
 8008f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d015      	beq.n	8008f98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f6c:	f7fd fcca 	bl	8006904 <HAL_GetTick>
 8008f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f72:	e00a      	b.n	8008f8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f74:	f7fd fcc6 	bl	8006904 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e0d7      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f8a:	4b4b      	ldr	r3, [pc, #300]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0ee      	beq.n	8008f74 <HAL_RCC_OscConfig+0x368>
 8008f96:	e014      	b.n	8008fc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f98:	f7fd fcb4 	bl	8006904 <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f9e:	e00a      	b.n	8008fb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fa0:	f7fd fcb0 	bl	8006904 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e0c1      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fb6:	4b40      	ldr	r3, [pc, #256]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1ee      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d105      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fc8:	4b3b      	ldr	r3, [pc, #236]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	4a3a      	ldr	r2, [pc, #232]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 80ad 	beq.w	8009138 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fde:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f003 030c 	and.w	r3, r3, #12
 8008fe6:	2b08      	cmp	r3, #8
 8008fe8:	d060      	beq.n	80090ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d145      	bne.n	800907e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ff2:	4b33      	ldr	r3, [pc, #204]	; (80090c0 <HAL_RCC_OscConfig+0x4b4>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff8:	f7fd fc84 	bl	8006904 <HAL_GetTick>
 8008ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ffe:	e008      	b.n	8009012 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009000:	f7fd fc80 	bl	8006904 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b02      	cmp	r3, #2
 800900c:	d901      	bls.n	8009012 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e093      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009012:	4b29      	ldr	r3, [pc, #164]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f0      	bne.n	8009000 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69da      	ldr	r2, [r3, #28]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	431a      	orrs	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	019b      	lsls	r3, r3, #6
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009034:	085b      	lsrs	r3, r3, #1
 8009036:	3b01      	subs	r3, #1
 8009038:	041b      	lsls	r3, r3, #16
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	061b      	lsls	r3, r3, #24
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	071b      	lsls	r3, r3, #28
 800904a:	491b      	ldr	r1, [pc, #108]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 800904c:	4313      	orrs	r3, r2
 800904e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009050:	4b1b      	ldr	r3, [pc, #108]	; (80090c0 <HAL_RCC_OscConfig+0x4b4>)
 8009052:	2201      	movs	r2, #1
 8009054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009056:	f7fd fc55 	bl	8006904 <HAL_GetTick>
 800905a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800905c:	e008      	b.n	8009070 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800905e:	f7fd fc51 	bl	8006904 <HAL_GetTick>
 8009062:	4602      	mov	r2, r0
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	2b02      	cmp	r3, #2
 800906a:	d901      	bls.n	8009070 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e064      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009070:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0f0      	beq.n	800905e <HAL_RCC_OscConfig+0x452>
 800907c:	e05c      	b.n	8009138 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800907e:	4b10      	ldr	r3, [pc, #64]	; (80090c0 <HAL_RCC_OscConfig+0x4b4>)
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009084:	f7fd fc3e 	bl	8006904 <HAL_GetTick>
 8009088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800908a:	e008      	b.n	800909e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800908c:	f7fd fc3a 	bl	8006904 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	2b02      	cmp	r3, #2
 8009098:	d901      	bls.n	800909e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e04d      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <HAL_RCC_OscConfig+0x4ac>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1f0      	bne.n	800908c <HAL_RCC_OscConfig+0x480>
 80090aa:	e045      	b.n	8009138 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d107      	bne.n	80090c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e040      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
 80090b8:	40023800 	.word	0x40023800
 80090bc:	40007000 	.word	0x40007000
 80090c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090c4:	4b1f      	ldr	r3, [pc, #124]	; (8009144 <HAL_RCC_OscConfig+0x538>)
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d030      	beq.n	8009134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090dc:	429a      	cmp	r2, r3
 80090de:	d129      	bne.n	8009134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d122      	bne.n	8009134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090f4:	4013      	ands	r3, r2
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d119      	bne.n	8009134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	085b      	lsrs	r3, r3, #1
 800910c:	3b01      	subs	r3, #1
 800910e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009110:	429a      	cmp	r2, r3
 8009112:	d10f      	bne.n	8009134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009120:	429a      	cmp	r2, r3
 8009122:	d107      	bne.n	8009134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009130:	429a      	cmp	r2, r3
 8009132:	d001      	beq.n	8009138 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	40023800 	.word	0x40023800

08009148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e07b      	b.n	8009252 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d108      	bne.n	8009174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800916a:	d009      	beq.n	8009180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	61da      	str	r2, [r3, #28]
 8009172:	e005      	b.n	8009180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7fc fb9c 	bl	80058d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091c8:	431a      	orrs	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d2:	431a      	orrs	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009204:	ea42 0103 	orr.w	r1, r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	0c1b      	lsrs	r3, r3, #16
 800921e:	f003 0104 	and.w	r1, r3, #4
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	f003 0210 	and.w	r2, r3, #16
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69da      	ldr	r2, [r3, #28]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009240:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b08c      	sub	sp, #48	; 0x30
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009268:	2301      	movs	r3, #1
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_SPI_TransmitReceive+0x26>
 800927c:	2302      	movs	r3, #2
 800927e:	e18a      	b.n	8009596 <HAL_SPI_TransmitReceive+0x33c>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009288:	f7fd fb3c 	bl	8006904 <HAL_GetTick>
 800928c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800929e:	887b      	ldrh	r3, [r7, #2]
 80092a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80092a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d00f      	beq.n	80092ca <HAL_SPI_TransmitReceive+0x70>
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092b0:	d107      	bne.n	80092c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d103      	bne.n	80092c2 <HAL_SPI_TransmitReceive+0x68>
 80092ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d003      	beq.n	80092ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80092c2:	2302      	movs	r3, #2
 80092c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092c8:	e15b      	b.n	8009582 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_SPI_TransmitReceive+0x82>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <HAL_SPI_TransmitReceive+0x82>
 80092d6:	887b      	ldrh	r3, [r7, #2]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092e2:	e14e      	b.n	8009582 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d003      	beq.n	80092f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2205      	movs	r2, #5
 80092f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	887a      	ldrh	r2, [r7, #2]
 8009308:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	887a      	ldrh	r2, [r7, #2]
 800930e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	887a      	ldrh	r2, [r7, #2]
 800931a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	887a      	ldrh	r2, [r7, #2]
 8009320:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	d007      	beq.n	800934c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800934a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009354:	d178      	bne.n	8009448 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <HAL_SPI_TransmitReceive+0x10a>
 800935e:	8b7b      	ldrh	r3, [r7, #26]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d166      	bne.n	8009432 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009368:	881a      	ldrh	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009374:	1c9a      	adds	r2, r3, #2
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800937e:	b29b      	uxth	r3, r3
 8009380:	3b01      	subs	r3, #1
 8009382:	b29a      	uxth	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009388:	e053      	b.n	8009432 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b02      	cmp	r3, #2
 8009396:	d11b      	bne.n	80093d0 <HAL_SPI_TransmitReceive+0x176>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d016      	beq.n	80093d0 <HAL_SPI_TransmitReceive+0x176>
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d113      	bne.n	80093d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ac:	881a      	ldrh	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b8:	1c9a      	adds	r2, r3, #2
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d119      	bne.n	8009412 <HAL_SPI_TransmitReceive+0x1b8>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d014      	beq.n	8009412 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	b292      	uxth	r2, r2
 80093f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	1c9a      	adds	r2, r3, #2
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	b29a      	uxth	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800940e:	2301      	movs	r3, #1
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009412:	f7fd fa77 	bl	8006904 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800941e:	429a      	cmp	r2, r3
 8009420:	d807      	bhi.n	8009432 <HAL_SPI_TransmitReceive+0x1d8>
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d003      	beq.n	8009432 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009430:	e0a7      	b.n	8009582 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009436:	b29b      	uxth	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1a6      	bne.n	800938a <HAL_SPI_TransmitReceive+0x130>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009440:	b29b      	uxth	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1a1      	bne.n	800938a <HAL_SPI_TransmitReceive+0x130>
 8009446:	e07c      	b.n	8009542 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <HAL_SPI_TransmitReceive+0x1fc>
 8009450:	8b7b      	ldrh	r3, [r7, #26]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d16b      	bne.n	800952e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	330c      	adds	r3, #12
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009472:	b29b      	uxth	r3, r3
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800947c:	e057      	b.n	800952e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b02      	cmp	r3, #2
 800948a:	d11c      	bne.n	80094c6 <HAL_SPI_TransmitReceive+0x26c>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d017      	beq.n	80094c6 <HAL_SPI_TransmitReceive+0x26c>
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d114      	bne.n	80094c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	330c      	adds	r3, #12
 80094a6:	7812      	ldrb	r2, [r2, #0]
 80094a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d119      	bne.n	8009508 <HAL_SPI_TransmitReceive+0x2ae>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d014      	beq.n	8009508 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009504:	2301      	movs	r3, #1
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009508:	f7fd f9fc 	bl	8006904 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009514:	429a      	cmp	r2, r3
 8009516:	d803      	bhi.n	8009520 <HAL_SPI_TransmitReceive+0x2c6>
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951e:	d102      	bne.n	8009526 <HAL_SPI_TransmitReceive+0x2cc>
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	2b00      	cmp	r3, #0
 8009524:	d103      	bne.n	800952e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800952c:	e029      	b.n	8009582 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1a2      	bne.n	800947e <HAL_SPI_TransmitReceive+0x224>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800953c:	b29b      	uxth	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d19d      	bne.n	800947e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 f8b2 	bl	80096b0 <SPI_EndRxTxTransaction>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d006      	beq.n	8009560 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2220      	movs	r2, #32
 800955c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800955e:	e010      	b.n	8009582 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10b      	bne.n	8009580 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009568:	2300      	movs	r3, #0
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	e000      	b.n	8009582 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009580:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009596:	4618      	mov	r0, r3
 8009598:	3730      	adds	r7, #48	; 0x30
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	4613      	mov	r3, r2
 80095ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80095b0:	f7fd f9a8 	bl	8006904 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	4413      	add	r3, r2
 80095be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80095c0:	f7fd f9a0 	bl	8006904 <HAL_GetTick>
 80095c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80095c6:	4b39      	ldr	r3, [pc, #228]	; (80096ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	015b      	lsls	r3, r3, #5
 80095cc:	0d1b      	lsrs	r3, r3, #20
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	fb02 f303 	mul.w	r3, r2, r3
 80095d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095d6:	e054      	b.n	8009682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095de:	d050      	beq.n	8009682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095e0:	f7fd f990 	bl	8006904 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d902      	bls.n	80095f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d13d      	bne.n	8009672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800960e:	d111      	bne.n	8009634 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009618:	d004      	beq.n	8009624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009622:	d107      	bne.n	8009634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800963c:	d10f      	bne.n	800965e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800965c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e017      	b.n	80096a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	3b01      	subs	r3, #1
 8009680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	4013      	ands	r3, r2
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	429a      	cmp	r2, r3
 8009690:	bf0c      	ite	eq
 8009692:	2301      	moveq	r3, #1
 8009694:	2300      	movne	r3, #0
 8009696:	b2db      	uxtb	r3, r3
 8009698:	461a      	mov	r2, r3
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	429a      	cmp	r2, r3
 800969e:	d19b      	bne.n	80095d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000040 	.word	0x20000040

080096b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80096bc:	4b1b      	ldr	r3, [pc, #108]	; (800972c <SPI_EndRxTxTransaction+0x7c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a1b      	ldr	r2, [pc, #108]	; (8009730 <SPI_EndRxTxTransaction+0x80>)
 80096c2:	fba2 2303 	umull	r2, r3, r2, r3
 80096c6:	0d5b      	lsrs	r3, r3, #21
 80096c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096cc:	fb02 f303 	mul.w	r3, r2, r3
 80096d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096da:	d112      	bne.n	8009702 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	2180      	movs	r1, #128	; 0x80
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff ff5a 	bl	80095a0 <SPI_WaitFlagStateUntilTimeout>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d016      	beq.n	8009720 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f6:	f043 0220 	orr.w	r2, r3, #32
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e00f      	b.n	8009722 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	3b01      	subs	r3, #1
 800970c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009718:	2b80      	cmp	r3, #128	; 0x80
 800971a:	d0f2      	beq.n	8009702 <SPI_EndRxTxTransaction+0x52>
 800971c:	e000      	b.n	8009720 <SPI_EndRxTxTransaction+0x70>
        break;
 800971e:	bf00      	nop
  }

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000040 	.word	0x20000040
 8009730:	165e9f81 	.word	0x165e9f81

08009734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e041      	b.n	80097ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7fc ff14 	bl	8006588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f000 fcec 	bl	800a150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d001      	beq.n	80097ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e046      	b.n	800987a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a23      	ldr	r2, [pc, #140]	; (8009888 <HAL_TIM_Base_Start+0xb4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d022      	beq.n	8009844 <HAL_TIM_Base_Start+0x70>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009806:	d01d      	beq.n	8009844 <HAL_TIM_Base_Start+0x70>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a1f      	ldr	r2, [pc, #124]	; (800988c <HAL_TIM_Base_Start+0xb8>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d018      	beq.n	8009844 <HAL_TIM_Base_Start+0x70>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <HAL_TIM_Base_Start+0xbc>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d013      	beq.n	8009844 <HAL_TIM_Base_Start+0x70>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a1c      	ldr	r2, [pc, #112]	; (8009894 <HAL_TIM_Base_Start+0xc0>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d00e      	beq.n	8009844 <HAL_TIM_Base_Start+0x70>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a1b      	ldr	r2, [pc, #108]	; (8009898 <HAL_TIM_Base_Start+0xc4>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d009      	beq.n	8009844 <HAL_TIM_Base_Start+0x70>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a19      	ldr	r2, [pc, #100]	; (800989c <HAL_TIM_Base_Start+0xc8>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d004      	beq.n	8009844 <HAL_TIM_Base_Start+0x70>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a18      	ldr	r2, [pc, #96]	; (80098a0 <HAL_TIM_Base_Start+0xcc>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d111      	bne.n	8009868 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b06      	cmp	r3, #6
 8009854:	d010      	beq.n	8009878 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0201 	orr.w	r2, r2, #1
 8009864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009866:	e007      	b.n	8009878 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0201 	orr.w	r2, r2, #1
 8009876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40010000 	.word	0x40010000
 800988c:	40000400 	.word	0x40000400
 8009890:	40000800 	.word	0x40000800
 8009894:	40000c00 	.word	0x40000c00
 8009898:	40010400 	.word	0x40010400
 800989c:	40014000 	.word	0x40014000
 80098a0:	40001800 	.word	0x40001800

080098a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d001      	beq.n	80098bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e04e      	b.n	800995a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0201 	orr.w	r2, r2, #1
 80098d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a23      	ldr	r2, [pc, #140]	; (8009968 <HAL_TIM_Base_Start_IT+0xc4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d022      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e6:	d01d      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a1f      	ldr	r2, [pc, #124]	; (800996c <HAL_TIM_Base_Start_IT+0xc8>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d018      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a1e      	ldr	r2, [pc, #120]	; (8009970 <HAL_TIM_Base_Start_IT+0xcc>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d013      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a1c      	ldr	r2, [pc, #112]	; (8009974 <HAL_TIM_Base_Start_IT+0xd0>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d00e      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a1b      	ldr	r2, [pc, #108]	; (8009978 <HAL_TIM_Base_Start_IT+0xd4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d009      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a19      	ldr	r2, [pc, #100]	; (800997c <HAL_TIM_Base_Start_IT+0xd8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d004      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0x80>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a18      	ldr	r2, [pc, #96]	; (8009980 <HAL_TIM_Base_Start_IT+0xdc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d111      	bne.n	8009948 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b06      	cmp	r3, #6
 8009934:	d010      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0201 	orr.w	r2, r2, #1
 8009944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009946:	e007      	b.n	8009958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f042 0201 	orr.w	r2, r2, #1
 8009956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	40010000 	.word	0x40010000
 800996c:	40000400 	.word	0x40000400
 8009970:	40000800 	.word	0x40000800
 8009974:	40000c00 	.word	0x40000c00
 8009978:	40010400 	.word	0x40010400
 800997c:	40014000 	.word	0x40014000
 8009980:	40001800 	.word	0x40001800

08009984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e041      	b.n	8009a1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f839 	bl	8009a22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3304      	adds	r3, #4
 80099c0:	4619      	mov	r1, r3
 80099c2:	4610      	mov	r0, r2
 80099c4:	f000 fbc4 	bl	800a150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a2a:	bf00      	nop
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
	...

08009a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d109      	bne.n	8009a5c <HAL_TIM_PWM_Start+0x24>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	bf14      	ite	ne
 8009a54:	2301      	movne	r3, #1
 8009a56:	2300      	moveq	r3, #0
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	e022      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x6a>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d109      	bne.n	8009a76 <HAL_TIM_PWM_Start+0x3e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	bf14      	ite	ne
 8009a6e:	2301      	movne	r3, #1
 8009a70:	2300      	moveq	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	e015      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x6a>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d109      	bne.n	8009a90 <HAL_TIM_PWM_Start+0x58>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	bf14      	ite	ne
 8009a88:	2301      	movne	r3, #1
 8009a8a:	2300      	moveq	r3, #0
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	e008      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x6a>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	bf14      	ite	ne
 8009a9c:	2301      	movne	r3, #1
 8009a9e:	2300      	moveq	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e07c      	b.n	8009ba4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <HAL_TIM_PWM_Start+0x82>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ab8:	e013      	b.n	8009ae2 <HAL_TIM_PWM_Start+0xaa>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d104      	bne.n	8009aca <HAL_TIM_PWM_Start+0x92>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ac8:	e00b      	b.n	8009ae2 <HAL_TIM_PWM_Start+0xaa>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d104      	bne.n	8009ada <HAL_TIM_PWM_Start+0xa2>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ad8:	e003      	b.n	8009ae2 <HAL_TIM_PWM_Start+0xaa>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fe1a 	bl	800a724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a2d      	ldr	r2, [pc, #180]	; (8009bac <HAL_TIM_PWM_Start+0x174>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d004      	beq.n	8009b04 <HAL_TIM_PWM_Start+0xcc>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a2c      	ldr	r2, [pc, #176]	; (8009bb0 <HAL_TIM_PWM_Start+0x178>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d101      	bne.n	8009b08 <HAL_TIM_PWM_Start+0xd0>
 8009b04:	2301      	movs	r3, #1
 8009b06:	e000      	b.n	8009b0a <HAL_TIM_PWM_Start+0xd2>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d007      	beq.n	8009b1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a22      	ldr	r2, [pc, #136]	; (8009bac <HAL_TIM_PWM_Start+0x174>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d022      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x136>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b30:	d01d      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x136>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1f      	ldr	r2, [pc, #124]	; (8009bb4 <HAL_TIM_PWM_Start+0x17c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d018      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x136>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1d      	ldr	r2, [pc, #116]	; (8009bb8 <HAL_TIM_PWM_Start+0x180>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x136>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a1c      	ldr	r2, [pc, #112]	; (8009bbc <HAL_TIM_PWM_Start+0x184>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00e      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x136>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a16      	ldr	r2, [pc, #88]	; (8009bb0 <HAL_TIM_PWM_Start+0x178>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d009      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x136>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a18      	ldr	r2, [pc, #96]	; (8009bc0 <HAL_TIM_PWM_Start+0x188>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d004      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x136>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a16      	ldr	r2, [pc, #88]	; (8009bc4 <HAL_TIM_PWM_Start+0x18c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d111      	bne.n	8009b92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f003 0307 	and.w	r3, r3, #7
 8009b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2b06      	cmp	r3, #6
 8009b7e:	d010      	beq.n	8009ba2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0201 	orr.w	r2, r2, #1
 8009b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b90:	e007      	b.n	8009ba2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0201 	orr.w	r2, r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40010000 	.word	0x40010000
 8009bb0:	40010400 	.word	0x40010400
 8009bb4:	40000400 	.word	0x40000400
 8009bb8:	40000800 	.word	0x40000800
 8009bbc:	40000c00 	.word	0x40000c00
 8009bc0:	40014000 	.word	0x40014000
 8009bc4:	40001800 	.word	0x40001800

08009bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d122      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d11b      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0202 	mvn.w	r2, #2
 8009bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	f003 0303 	and.w	r3, r3, #3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa81 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009c10:	e005      	b.n	8009c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fa73 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fa84 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d122      	bne.n	8009c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d11b      	bne.n	8009c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f06f 0204 	mvn.w	r2, #4
 8009c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa57 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009c64:	e005      	b.n	8009c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fa49 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fa5a 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b08      	cmp	r3, #8
 8009c84:	d122      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f003 0308 	and.w	r3, r3, #8
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d11b      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f06f 0208 	mvn.w	r2, #8
 8009c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa2d 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009cb8:	e005      	b.n	8009cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa1f 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa30 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	f003 0310 	and.w	r3, r3, #16
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d122      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d11b      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f06f 0210 	mvn.w	r2, #16
 8009cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fa03 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009d0c:	e005      	b.n	8009d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9f5 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa06 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d10e      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d107      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0201 	mvn.w	r2, #1
 8009d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f9cf 	bl	800a0ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d56:	2b80      	cmp	r3, #128	; 0x80
 8009d58:	d10e      	bne.n	8009d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d64:	2b80      	cmp	r3, #128	; 0x80
 8009d66:	d107      	bne.n	8009d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fdd4 	bl	800a920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d82:	2b40      	cmp	r3, #64	; 0x40
 8009d84:	d10e      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d107      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f9cb 	bl	800a13a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d10e      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d107      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f06f 0220 	mvn.w	r2, #32
 8009dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fd9e 	bl	800a90c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e0ae      	b.n	8009f54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b0c      	cmp	r3, #12
 8009e02:	f200 809f 	bhi.w	8009f44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e41 	.word	0x08009e41
 8009e10:	08009f45 	.word	0x08009f45
 8009e14:	08009f45 	.word	0x08009f45
 8009e18:	08009f45 	.word	0x08009f45
 8009e1c:	08009e81 	.word	0x08009e81
 8009e20:	08009f45 	.word	0x08009f45
 8009e24:	08009f45 	.word	0x08009f45
 8009e28:	08009f45 	.word	0x08009f45
 8009e2c:	08009ec3 	.word	0x08009ec3
 8009e30:	08009f45 	.word	0x08009f45
 8009e34:	08009f45 	.word	0x08009f45
 8009e38:	08009f45 	.word	0x08009f45
 8009e3c:	08009f03 	.word	0x08009f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fa22 	bl	800a290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699a      	ldr	r2, [r3, #24]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0208 	orr.w	r2, r2, #8
 8009e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	699a      	ldr	r2, [r3, #24]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0204 	bic.w	r2, r2, #4
 8009e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6999      	ldr	r1, [r3, #24]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	619a      	str	r2, [r3, #24]
      break;
 8009e7e:	e064      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fa72 	bl	800a370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	699a      	ldr	r2, [r3, #24]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	699a      	ldr	r2, [r3, #24]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6999      	ldr	r1, [r3, #24]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	021a      	lsls	r2, r3, #8
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	619a      	str	r2, [r3, #24]
      break;
 8009ec0:	e043      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fac7 	bl	800a45c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69da      	ldr	r2, [r3, #28]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 0208 	orr.w	r2, r2, #8
 8009edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 0204 	bic.w	r2, r2, #4
 8009eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	69d9      	ldr	r1, [r3, #28]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	691a      	ldr	r2, [r3, #16]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	61da      	str	r2, [r3, #28]
      break;
 8009f00:	e023      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fb1b 	bl	800a544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	69da      	ldr	r2, [r3, #28]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	69da      	ldr	r2, [r3, #28]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69d9      	ldr	r1, [r3, #28]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	021a      	lsls	r2, r3, #8
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	61da      	str	r2, [r3, #28]
      break;
 8009f42:	e002      	b.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
      break;
 8009f48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d101      	bne.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c>
 8009f74:	2302      	movs	r3, #2
 8009f76:	e0b4      	b.n	800a0e2 <HAL_TIM_ConfigClockSource+0x186>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb0:	d03e      	beq.n	800a030 <HAL_TIM_ConfigClockSource+0xd4>
 8009fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb6:	f200 8087 	bhi.w	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fbe:	f000 8086 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x172>
 8009fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc6:	d87f      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fc8:	2b70      	cmp	r3, #112	; 0x70
 8009fca:	d01a      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0xa6>
 8009fcc:	2b70      	cmp	r3, #112	; 0x70
 8009fce:	d87b      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd0:	2b60      	cmp	r3, #96	; 0x60
 8009fd2:	d050      	beq.n	800a076 <HAL_TIM_ConfigClockSource+0x11a>
 8009fd4:	2b60      	cmp	r3, #96	; 0x60
 8009fd6:	d877      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fd8:	2b50      	cmp	r3, #80	; 0x50
 8009fda:	d03c      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0xfa>
 8009fdc:	2b50      	cmp	r3, #80	; 0x50
 8009fde:	d873      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d058      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x13a>
 8009fe4:	2b40      	cmp	r3, #64	; 0x40
 8009fe6:	d86f      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009fe8:	2b30      	cmp	r3, #48	; 0x30
 8009fea:	d064      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009fec:	2b30      	cmp	r3, #48	; 0x30
 8009fee:	d86b      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d060      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ff4:	2b20      	cmp	r3, #32
 8009ff6:	d867      	bhi.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d05c      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d05a      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x15a>
 800a000:	e062      	b.n	800a0c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6818      	ldr	r0, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	6899      	ldr	r1, [r3, #8]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f000 fb67 	bl	800a6e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	609a      	str	r2, [r3, #8]
      break;
 800a02e:	e04f      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	6899      	ldr	r1, [r3, #8]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f000 fb50 	bl	800a6e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a052:	609a      	str	r2, [r3, #8]
      break;
 800a054:	e03c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	6859      	ldr	r1, [r3, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	461a      	mov	r2, r3
 800a064:	f000 fac4 	bl	800a5f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2150      	movs	r1, #80	; 0x50
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fb1d 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a074:	e02c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	6859      	ldr	r1, [r3, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	461a      	mov	r2, r3
 800a084:	f000 fae3 	bl	800a64e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2160      	movs	r1, #96	; 0x60
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fb0d 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a094:	e01c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6859      	ldr	r1, [r3, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f000 faa4 	bl	800a5f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2140      	movs	r1, #64	; 0x40
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fafd 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a0b4:	e00c      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f000 faf4 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 800a0c6:	e003      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a0cc:	e000      	b.n	800a0d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a0ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0f2:	bf00      	nop
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a106:	bf00      	nop
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a142:	bf00      	nop
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a40      	ldr	r2, [pc, #256]	; (800a264 <TIM_Base_SetConfig+0x114>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d013      	beq.n	800a190 <TIM_Base_SetConfig+0x40>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a16e:	d00f      	beq.n	800a190 <TIM_Base_SetConfig+0x40>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a3d      	ldr	r2, [pc, #244]	; (800a268 <TIM_Base_SetConfig+0x118>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d00b      	beq.n	800a190 <TIM_Base_SetConfig+0x40>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a3c      	ldr	r2, [pc, #240]	; (800a26c <TIM_Base_SetConfig+0x11c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d007      	beq.n	800a190 <TIM_Base_SetConfig+0x40>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a3b      	ldr	r2, [pc, #236]	; (800a270 <TIM_Base_SetConfig+0x120>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d003      	beq.n	800a190 <TIM_Base_SetConfig+0x40>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a3a      	ldr	r2, [pc, #232]	; (800a274 <TIM_Base_SetConfig+0x124>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d108      	bne.n	800a1a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a2f      	ldr	r2, [pc, #188]	; (800a264 <TIM_Base_SetConfig+0x114>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d02b      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b0:	d027      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a2c      	ldr	r2, [pc, #176]	; (800a268 <TIM_Base_SetConfig+0x118>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d023      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a2b      	ldr	r2, [pc, #172]	; (800a26c <TIM_Base_SetConfig+0x11c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d01f      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a2a      	ldr	r2, [pc, #168]	; (800a270 <TIM_Base_SetConfig+0x120>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d01b      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a29      	ldr	r2, [pc, #164]	; (800a274 <TIM_Base_SetConfig+0x124>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d017      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a28      	ldr	r2, [pc, #160]	; (800a278 <TIM_Base_SetConfig+0x128>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d013      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a27      	ldr	r2, [pc, #156]	; (800a27c <TIM_Base_SetConfig+0x12c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d00f      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a26      	ldr	r2, [pc, #152]	; (800a280 <TIM_Base_SetConfig+0x130>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d00b      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a25      	ldr	r2, [pc, #148]	; (800a284 <TIM_Base_SetConfig+0x134>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d007      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a24      	ldr	r2, [pc, #144]	; (800a288 <TIM_Base_SetConfig+0x138>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d003      	beq.n	800a202 <TIM_Base_SetConfig+0xb2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a23      	ldr	r2, [pc, #140]	; (800a28c <TIM_Base_SetConfig+0x13c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d108      	bne.n	800a214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	4313      	orrs	r3, r2
 800a212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a0a      	ldr	r2, [pc, #40]	; (800a264 <TIM_Base_SetConfig+0x114>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d003      	beq.n	800a248 <TIM_Base_SetConfig+0xf8>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a0c      	ldr	r2, [pc, #48]	; (800a274 <TIM_Base_SetConfig+0x124>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d103      	bne.n	800a250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	615a      	str	r2, [r3, #20]
}
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	40010000 	.word	0x40010000
 800a268:	40000400 	.word	0x40000400
 800a26c:	40000800 	.word	0x40000800
 800a270:	40000c00 	.word	0x40000c00
 800a274:	40010400 	.word	0x40010400
 800a278:	40014000 	.word	0x40014000
 800a27c:	40014400 	.word	0x40014400
 800a280:	40014800 	.word	0x40014800
 800a284:	40001800 	.word	0x40001800
 800a288:	40001c00 	.word	0x40001c00
 800a28c:	40002000 	.word	0x40002000

0800a290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	f023 0201 	bic.w	r2, r3, #1
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f023 0303 	bic.w	r3, r3, #3
 800a2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f023 0302 	bic.w	r3, r3, #2
 800a2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a20      	ldr	r2, [pc, #128]	; (800a368 <TIM_OC1_SetConfig+0xd8>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d003      	beq.n	800a2f4 <TIM_OC1_SetConfig+0x64>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a1f      	ldr	r2, [pc, #124]	; (800a36c <TIM_OC1_SetConfig+0xdc>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d10c      	bne.n	800a30e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f023 0308 	bic.w	r3, r3, #8
 800a2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f023 0304 	bic.w	r3, r3, #4
 800a30c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a15      	ldr	r2, [pc, #84]	; (800a368 <TIM_OC1_SetConfig+0xd8>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d003      	beq.n	800a31e <TIM_OC1_SetConfig+0x8e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a14      	ldr	r2, [pc, #80]	; (800a36c <TIM_OC1_SetConfig+0xdc>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d111      	bne.n	800a342 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a32c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	4313      	orrs	r3, r2
 800a336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	4313      	orrs	r3, r2
 800a340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	621a      	str	r2, [r3, #32]
}
 800a35c:	bf00      	nop
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	40010000 	.word	0x40010000
 800a36c:	40010400 	.word	0x40010400

0800a370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	f023 0210 	bic.w	r2, r3, #16
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f023 0320 	bic.w	r3, r3, #32
 800a3ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a22      	ldr	r2, [pc, #136]	; (800a454 <TIM_OC2_SetConfig+0xe4>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d003      	beq.n	800a3d8 <TIM_OC2_SetConfig+0x68>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a21      	ldr	r2, [pc, #132]	; (800a458 <TIM_OC2_SetConfig+0xe8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d10d      	bne.n	800a3f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	011b      	lsls	r3, r3, #4
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a17      	ldr	r2, [pc, #92]	; (800a454 <TIM_OC2_SetConfig+0xe4>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d003      	beq.n	800a404 <TIM_OC2_SetConfig+0x94>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a16      	ldr	r2, [pc, #88]	; (800a458 <TIM_OC2_SetConfig+0xe8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d113      	bne.n	800a42c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a40a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	4313      	orrs	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40010000 	.word	0x40010000
 800a458:	40010400 	.word	0x40010400

0800a45c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a21      	ldr	r2, [pc, #132]	; (800a53c <TIM_OC3_SetConfig+0xe0>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d003      	beq.n	800a4c2 <TIM_OC3_SetConfig+0x66>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a20      	ldr	r2, [pc, #128]	; (800a540 <TIM_OC3_SetConfig+0xe4>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d10d      	bne.n	800a4de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	021b      	lsls	r3, r3, #8
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a16      	ldr	r2, [pc, #88]	; (800a53c <TIM_OC3_SetConfig+0xe0>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d003      	beq.n	800a4ee <TIM_OC3_SetConfig+0x92>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a15      	ldr	r2, [pc, #84]	; (800a540 <TIM_OC3_SetConfig+0xe4>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d113      	bne.n	800a516 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	4313      	orrs	r3, r2
 800a508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	4313      	orrs	r3, r2
 800a514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	621a      	str	r2, [r3, #32]
}
 800a530:	bf00      	nop
 800a532:	371c      	adds	r7, #28
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	40010000 	.word	0x40010000
 800a540:	40010400 	.word	0x40010400

0800a544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a58e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	031b      	lsls	r3, r3, #12
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a12      	ldr	r2, [pc, #72]	; (800a5e8 <TIM_OC4_SetConfig+0xa4>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d003      	beq.n	800a5ac <TIM_OC4_SetConfig+0x68>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a11      	ldr	r2, [pc, #68]	; (800a5ec <TIM_OC4_SetConfig+0xa8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d109      	bne.n	800a5c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	019b      	lsls	r3, r3, #6
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	621a      	str	r2, [r3, #32]
}
 800a5da:	bf00      	nop
 800a5dc:	371c      	adds	r7, #28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	40010000 	.word	0x40010000
 800a5ec:	40010400 	.word	0x40010400

0800a5f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	f023 0201 	bic.w	r2, r3, #1
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a61a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	4313      	orrs	r3, r2
 800a624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f023 030a 	bic.w	r3, r3, #10
 800a62c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	621a      	str	r2, [r3, #32]
}
 800a642:	bf00      	nop
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a64e:	b480      	push	{r7}
 800a650:	b087      	sub	sp, #28
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	f023 0210 	bic.w	r2, r3, #16
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6a1b      	ldr	r3, [r3, #32]
 800a670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	031b      	lsls	r3, r3, #12
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4313      	orrs	r3, r2
 800a682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a68a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	4313      	orrs	r3, r2
 800a694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	621a      	str	r2, [r3, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b085      	sub	sp, #20
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	f043 0307 	orr.w	r3, r3, #7
 800a6d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	609a      	str	r2, [r3, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	021a      	lsls	r2, r3, #8
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	431a      	orrs	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	609a      	str	r2, [r3, #8]
}
 800a718:	bf00      	nop
 800a71a:	371c      	adds	r7, #28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f003 031f 	and.w	r3, r3, #31
 800a736:	2201      	movs	r2, #1
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a1a      	ldr	r2, [r3, #32]
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	43db      	mvns	r3, r3
 800a746:	401a      	ands	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6a1a      	ldr	r2, [r3, #32]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f003 031f 	and.w	r3, r3, #31
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	fa01 f303 	lsl.w	r3, r1, r3
 800a75c:	431a      	orrs	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	621a      	str	r2, [r3, #32]
}
 800a762:	bf00      	nop
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
	...

0800a770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a780:	2b01      	cmp	r3, #1
 800a782:	d101      	bne.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a784:	2302      	movs	r3, #2
 800a786:	e05a      	b.n	800a83e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a21      	ldr	r2, [pc, #132]	; (800a84c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d022      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d4:	d01d      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a1d      	ldr	r2, [pc, #116]	; (800a850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d018      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a1b      	ldr	r2, [pc, #108]	; (800a854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d013      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a1a      	ldr	r2, [pc, #104]	; (800a858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00e      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a18      	ldr	r2, [pc, #96]	; (800a85c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d009      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a17      	ldr	r2, [pc, #92]	; (800a860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d004      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a15      	ldr	r2, [pc, #84]	; (800a864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d10c      	bne.n	800a82c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	4313      	orrs	r3, r2
 800a822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40010000 	.word	0x40010000
 800a850:	40000400 	.word	0x40000400
 800a854:	40000800 	.word	0x40000800
 800a858:	40000c00 	.word	0x40000c00
 800a85c:	40010400 	.word	0x40010400
 800a860:	40014000 	.word	0x40014000
 800a864:	40001800 	.word	0x40001800

0800a868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d101      	bne.n	800a884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a880:	2302      	movs	r3, #2
 800a882:	e03d      	b.n	800a900 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e03f      	b.n	800a9c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d106      	bne.n	800a960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7fb fece 	bl	80066fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2224      	movs	r2, #36	; 0x24
 800a964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68da      	ldr	r2, [r3, #12]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fddf 	bl	800b53c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a98c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	695a      	ldr	r2, [r3, #20]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a99c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b08a      	sub	sp, #40	; 0x28
 800a9d2:	af02      	add	r7, sp, #8
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	603b      	str	r3, [r7, #0]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b20      	cmp	r3, #32
 800a9ec:	d17c      	bne.n	800aae8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <HAL_UART_Transmit+0x2c>
 800a9f4:	88fb      	ldrh	r3, [r7, #6]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e075      	b.n	800aaea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_UART_Transmit+0x3e>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e06e      	b.n	800aaea <HAL_UART_Transmit+0x11c>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2221      	movs	r2, #33	; 0x21
 800aa1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa22:	f7fb ff6f 	bl	8006904 <HAL_GetTick>
 800aa26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	88fa      	ldrh	r2, [r7, #6]
 800aa2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	88fa      	ldrh	r2, [r7, #6]
 800aa32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa3c:	d108      	bne.n	800aa50 <HAL_UART_Transmit+0x82>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d104      	bne.n	800aa50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	e003      	b.n	800aa58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aa60:	e02a      	b.n	800aab8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2180      	movs	r1, #128	; 0x80
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fb1f 	bl	800b0b0 <UART_WaitOnFlagUntilTimeout>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e036      	b.n	800aaea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	3302      	adds	r3, #2
 800aa96:	61bb      	str	r3, [r7, #24]
 800aa98:	e007      	b.n	800aaaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	781a      	ldrb	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1cf      	bne.n	800aa62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2200      	movs	r2, #0
 800aaca:	2140      	movs	r1, #64	; 0x40
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 faef 	bl	800b0b0 <UART_WaitOnFlagUntilTimeout>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e006      	b.n	800aaea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	e000      	b.n	800aaea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aae8:	2302      	movs	r3, #2
  }
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	4613      	mov	r3, r2
 800aafe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d11d      	bne.n	800ab48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <HAL_UART_Receive_IT+0x26>
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e016      	b.n	800ab4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_UART_Receive_IT+0x38>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e00f      	b.n	800ab4a <HAL_UART_Receive_IT+0x58>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab38:	88fb      	ldrh	r3, [r7, #6]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	68b9      	ldr	r1, [r7, #8]
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 fb24 	bl	800b18c <UART_Start_Receive_IT>
 800ab44:	4603      	mov	r3, r0
 800ab46:	e000      	b.n	800ab4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ab48:	2302      	movs	r3, #2
  }
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b0ba      	sub	sp, #232	; 0xe8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ab80:	2300      	movs	r3, #0
 800ab82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab8a:	f003 030f 	and.w	r3, r3, #15
 800ab8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ab92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10f      	bne.n	800abba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d009      	beq.n	800abba <HAL_UART_IRQHandler+0x66>
 800aba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fc07 	bl	800b3c6 <UART_Receive_IT>
      return;
 800abb8:	e256      	b.n	800b068 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800abba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 80de 	beq.w	800ad80 <HAL_UART_IRQHandler+0x22c>
 800abc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800abd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 80d1 	beq.w	800ad80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800abde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00b      	beq.n	800ac02 <HAL_UART_IRQHandler+0xae>
 800abea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d005      	beq.n	800ac02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	f043 0201 	orr.w	r2, r3, #1
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00b      	beq.n	800ac26 <HAL_UART_IRQHandler+0xd2>
 800ac0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d005      	beq.n	800ac26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1e:	f043 0202 	orr.w	r2, r3, #2
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00b      	beq.n	800ac4a <HAL_UART_IRQHandler+0xf6>
 800ac32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d005      	beq.n	800ac4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac42:	f043 0204 	orr.w	r2, r3, #4
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ac4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac4e:	f003 0308 	and.w	r3, r3, #8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d011      	beq.n	800ac7a <HAL_UART_IRQHandler+0x126>
 800ac56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac5a:	f003 0320 	and.w	r3, r3, #32
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d105      	bne.n	800ac6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ac62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	f043 0208 	orr.w	r2, r3, #8
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 81ed 	beq.w	800b05e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac88:	f003 0320 	and.w	r3, r3, #32
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d008      	beq.n	800aca2 <HAL_UART_IRQHandler+0x14e>
 800ac90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac94:	f003 0320 	and.w	r3, r3, #32
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fb92 	bl	800b3c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acac:	2b40      	cmp	r3, #64	; 0x40
 800acae:	bf0c      	ite	eq
 800acb0:	2301      	moveq	r3, #1
 800acb2:	2300      	movne	r3, #0
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	f003 0308 	and.w	r3, r3, #8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d103      	bne.n	800acce <HAL_UART_IRQHandler+0x17a>
 800acc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acca:	2b00      	cmp	r3, #0
 800accc:	d04f      	beq.n	800ad6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa9a 	bl	800b208 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	d141      	bne.n	800ad66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3314      	adds	r3, #20
 800ace8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800acf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3314      	adds	r3, #20
 800ad0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1d9      	bne.n	800ace2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d013      	beq.n	800ad5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3a:	4a7d      	ldr	r2, [pc, #500]	; (800af30 <HAL_UART_IRQHandler+0x3dc>)
 800ad3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fd f9f7 	bl	8008136 <HAL_DMA_Abort_IT>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d016      	beq.n	800ad7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad5c:	e00e      	b.n	800ad7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f990 	bl	800b084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad64:	e00a      	b.n	800ad7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f98c 	bl	800b084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad6c:	e006      	b.n	800ad7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f988 	bl	800b084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ad7a:	e170      	b.n	800b05e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad7c:	bf00      	nop
    return;
 800ad7e:	e16e      	b.n	800b05e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	f040 814a 	bne.w	800b01e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ad8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad8e:	f003 0310 	and.w	r3, r3, #16
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 8143 	beq.w	800b01e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ad98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9c:	f003 0310 	and.w	r3, r3, #16
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 813c 	beq.w	800b01e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ada6:	2300      	movs	r3, #0
 800ada8:	60bb      	str	r3, [r7, #8]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60bb      	str	r3, [r7, #8]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	60bb      	str	r3, [r7, #8]
 800adba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc6:	2b40      	cmp	r3, #64	; 0x40
 800adc8:	f040 80b4 	bne.w	800af34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800add8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8140 	beq.w	800b062 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ade6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adea:	429a      	cmp	r2, r3
 800adec:	f080 8139 	bcs.w	800b062 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae02:	f000 8088 	beq.w	800af16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	330c      	adds	r3, #12
 800ae0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	330c      	adds	r3, #12
 800ae2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1d9      	bne.n	800ae06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3314      	adds	r3, #20
 800ae58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae64:	f023 0301 	bic.w	r3, r3, #1
 800ae68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3314      	adds	r3, #20
 800ae72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e1      	bne.n	800ae52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3314      	adds	r3, #20
 800ae94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3314      	adds	r3, #20
 800aeae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aeb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aeb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aeb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e3      	bne.n	800ae8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	330c      	adds	r3, #12
 800aeda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aede:	e853 3f00 	ldrex	r3, [r3]
 800aee2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee6:	f023 0310 	bic.w	r3, r3, #16
 800aeea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	330c      	adds	r3, #12
 800aef4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aef8:	65ba      	str	r2, [r7, #88]	; 0x58
 800aefa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aefe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af00:	e841 2300 	strex	r3, r2, [r1]
 800af04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1e3      	bne.n	800aed4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af10:	4618      	mov	r0, r3
 800af12:	f7fd f8a0 	bl	8008056 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af1e:	b29b      	uxth	r3, r3
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	b29b      	uxth	r3, r3
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f8b6 	bl	800b098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af2c:	e099      	b.n	800b062 <HAL_UART_IRQHandler+0x50e>
 800af2e:	bf00      	nop
 800af30:	0800b2cf 	.word	0x0800b2cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af48:	b29b      	uxth	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 808b 	beq.w	800b066 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800af50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 8086 	beq.w	800b066 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	330c      	adds	r3, #12
 800af60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	330c      	adds	r3, #12
 800af7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800af7e:	647a      	str	r2, [r7, #68]	; 0x44
 800af80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e3      	bne.n	800af5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3314      	adds	r3, #20
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	623b      	str	r3, [r7, #32]
   return(result);
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	f023 0301 	bic.w	r3, r3, #1
 800afa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3314      	adds	r3, #20
 800afb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800afb6:	633a      	str	r2, [r7, #48]	; 0x30
 800afb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e3      	bne.n	800af92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2220      	movs	r2, #32
 800afce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	330c      	adds	r3, #12
 800afde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	e853 3f00 	ldrex	r3, [r3]
 800afe6:	60fb      	str	r3, [r7, #12]
   return(result);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0310 	bic.w	r3, r3, #16
 800afee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	330c      	adds	r3, #12
 800aff8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800affc:	61fa      	str	r2, [r7, #28]
 800affe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	69b9      	ldr	r1, [r7, #24]
 800b002:	69fa      	ldr	r2, [r7, #28]
 800b004:	e841 2300 	strex	r3, r2, [r1]
 800b008:	617b      	str	r3, [r7, #20]
   return(result);
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e3      	bne.n	800afd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f83e 	bl	800b098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b01c:	e023      	b.n	800b066 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b026:	2b00      	cmp	r3, #0
 800b028:	d009      	beq.n	800b03e <HAL_UART_IRQHandler+0x4ea>
 800b02a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f95d 	bl	800b2f6 <UART_Transmit_IT>
    return;
 800b03c:	e014      	b.n	800b068 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00e      	beq.n	800b068 <HAL_UART_IRQHandler+0x514>
 800b04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b052:	2b00      	cmp	r3, #0
 800b054:	d008      	beq.n	800b068 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f99d 	bl	800b396 <UART_EndTransmit_IT>
    return;
 800b05c:	e004      	b.n	800b068 <HAL_UART_IRQHandler+0x514>
    return;
 800b05e:	bf00      	nop
 800b060:	e002      	b.n	800b068 <HAL_UART_IRQHandler+0x514>
      return;
 800b062:	bf00      	nop
 800b064:	e000      	b.n	800b068 <HAL_UART_IRQHandler+0x514>
      return;
 800b066:	bf00      	nop
  }
}
 800b068:	37e8      	adds	r7, #232	; 0xe8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop

0800b070 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b090      	sub	sp, #64	; 0x40
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0c0:	e050      	b.n	800b164 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c8:	d04c      	beq.n	800b164 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d007      	beq.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0d0:	f7fb fc18 	bl	8006904 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d241      	bcs.n	800b164 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	e853 3f00 	ldrex	r3, [r3]
 800b0ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	330c      	adds	r3, #12
 800b0fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b100:	637a      	str	r2, [r7, #52]	; 0x34
 800b102:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e5      	bne.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3314      	adds	r3, #20
 800b11a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	613b      	str	r3, [r7, #16]
   return(result);
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f023 0301 	bic.w	r3, r3, #1
 800b12a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3314      	adds	r3, #20
 800b132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b134:	623a      	str	r2, [r7, #32]
 800b136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b138:	69f9      	ldr	r1, [r7, #28]
 800b13a:	6a3a      	ldr	r2, [r7, #32]
 800b13c:	e841 2300 	strex	r3, r2, [r1]
 800b140:	61bb      	str	r3, [r7, #24]
   return(result);
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1e5      	bne.n	800b114 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2220      	movs	r2, #32
 800b154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e00f      	b.n	800b184 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	4013      	ands	r3, r2
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	429a      	cmp	r2, r3
 800b172:	bf0c      	ite	eq
 800b174:	2301      	moveq	r3, #1
 800b176:	2300      	movne	r3, #0
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	79fb      	ldrb	r3, [r7, #7]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d09f      	beq.n	800b0c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3740      	adds	r7, #64	; 0x40
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	88fa      	ldrh	r2, [r7, #6]
 800b1a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	88fa      	ldrh	r2, [r7, #6]
 800b1aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2222      	movs	r2, #34	; 0x22
 800b1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d007      	beq.n	800b1da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	695a      	ldr	r2, [r3, #20]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f042 0201 	orr.w	r2, r2, #1
 800b1e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68da      	ldr	r2, [r3, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f042 0220 	orr.w	r2, r2, #32
 800b1f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b095      	sub	sp, #84	; 0x54
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	330c      	adds	r3, #12
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21a:	e853 3f00 	ldrex	r3, [r3]
 800b21e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b226:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	330c      	adds	r3, #12
 800b22e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b230:	643a      	str	r2, [r7, #64]	; 0x40
 800b232:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b238:	e841 2300 	strex	r3, r2, [r1]
 800b23c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e5      	bne.n	800b210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3314      	adds	r3, #20
 800b24a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	e853 3f00 	ldrex	r3, [r3]
 800b252:	61fb      	str	r3, [r7, #28]
   return(result);
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	f023 0301 	bic.w	r3, r3, #1
 800b25a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3314      	adds	r3, #20
 800b262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b264:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b26a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b26c:	e841 2300 	strex	r3, r2, [r1]
 800b270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e5      	bne.n	800b244 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d119      	bne.n	800b2b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	330c      	adds	r3, #12
 800b286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	e853 3f00 	ldrex	r3, [r3]
 800b28e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	f023 0310 	bic.w	r3, r3, #16
 800b296:	647b      	str	r3, [r7, #68]	; 0x44
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	330c      	adds	r3, #12
 800b29e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2a0:	61ba      	str	r2, [r7, #24]
 800b2a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6979      	ldr	r1, [r7, #20]
 800b2a6:	69ba      	ldr	r2, [r7, #24]
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e5      	bne.n	800b280 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b2c2:	bf00      	nop
 800b2c4:	3754      	adds	r7, #84	; 0x54
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff fecb 	bl	800b084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ee:	bf00      	nop
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b085      	sub	sp, #20
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b21      	cmp	r3, #33	; 0x21
 800b308:	d13e      	bne.n	800b388 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b312:	d114      	bne.n	800b33e <UART_Transmit_IT+0x48>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d110      	bne.n	800b33e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b330:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	1c9a      	adds	r2, r3, #2
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	621a      	str	r2, [r3, #32]
 800b33c:	e008      	b.n	800b350 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	1c59      	adds	r1, r3, #1
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	6211      	str	r1, [r2, #32]
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b354:	b29b      	uxth	r3, r3
 800b356:	3b01      	subs	r3, #1
 800b358:	b29b      	uxth	r3, r3
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	4619      	mov	r1, r3
 800b35e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10f      	bne.n	800b384 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68da      	ldr	r2, [r3, #12]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b372:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68da      	ldr	r2, [r3, #12]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b382:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	e000      	b.n	800b38a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b388:	2302      	movs	r3, #2
  }
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff fe5a 	bl	800b070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b08c      	sub	sp, #48	; 0x30
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b22      	cmp	r3, #34	; 0x22
 800b3d8:	f040 80ab 	bne.w	800b532 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e4:	d117      	bne.n	800b416 <UART_Receive_IT+0x50>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d113      	bne.n	800b416 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b404:	b29a      	uxth	r2, r3
 800b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b408:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40e:	1c9a      	adds	r2, r3, #2
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	629a      	str	r2, [r3, #40]	; 0x28
 800b414:	e026      	b.n	800b464 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b41c:	2300      	movs	r3, #0
 800b41e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b428:	d007      	beq.n	800b43a <UART_Receive_IT+0x74>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10a      	bne.n	800b448 <UART_Receive_IT+0x82>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	b2da      	uxtb	r2, r3
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	e008      	b.n	800b45a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b454:	b2da      	uxtb	r2, r3
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b468:	b29b      	uxth	r3, r3
 800b46a:	3b01      	subs	r3, #1
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	4619      	mov	r1, r3
 800b472:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b474:	2b00      	cmp	r3, #0
 800b476:	d15a      	bne.n	800b52e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f022 0220 	bic.w	r2, r2, #32
 800b486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68da      	ldr	r2, [r3, #12]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	695a      	ldr	r2, [r3, #20]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 0201 	bic.w	r2, r2, #1
 800b4a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2220      	movs	r2, #32
 800b4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d135      	bne.n	800b524 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	330c      	adds	r3, #12
 800b4c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f023 0310 	bic.w	r3, r3, #16
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	330c      	adds	r3, #12
 800b4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4de:	623a      	str	r2, [r7, #32]
 800b4e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e2:	69f9      	ldr	r1, [r7, #28]
 800b4e4:	6a3a      	ldr	r2, [r7, #32]
 800b4e6:	e841 2300 	strex	r3, r2, [r1]
 800b4ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1e5      	bne.n	800b4be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0310 	and.w	r3, r3, #16
 800b4fc:	2b10      	cmp	r3, #16
 800b4fe:	d10a      	bne.n	800b516 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b500:	2300      	movs	r3, #0
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff fdbb 	bl	800b098 <HAL_UARTEx_RxEventCallback>
 800b522:	e002      	b.n	800b52a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7fb f94b 	bl	80067c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e002      	b.n	800b534 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	e000      	b.n	800b534 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b532:	2302      	movs	r3, #2
  }
}
 800b534:	4618      	mov	r0, r3
 800b536:	3730      	adds	r7, #48	; 0x30
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b540:	b0c0      	sub	sp, #256	; 0x100
 800b542:	af00      	add	r7, sp, #0
 800b544:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b558:	68d9      	ldr	r1, [r3, #12]
 800b55a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	ea40 0301 	orr.w	r3, r0, r1
 800b564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b56a:	689a      	ldr	r2, [r3, #8]
 800b56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	431a      	orrs	r2, r3
 800b574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	431a      	orrs	r2, r3
 800b57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	4313      	orrs	r3, r2
 800b584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b594:	f021 010c 	bic.w	r1, r1, #12
 800b598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5a2:	430b      	orrs	r3, r1
 800b5a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b6:	6999      	ldr	r1, [r3, #24]
 800b5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	ea40 0301 	orr.w	r3, r0, r1
 800b5c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	4b8f      	ldr	r3, [pc, #572]	; (800b808 <UART_SetConfig+0x2cc>)
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d005      	beq.n	800b5dc <UART_SetConfig+0xa0>
 800b5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	4b8d      	ldr	r3, [pc, #564]	; (800b80c <UART_SetConfig+0x2d0>)
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d104      	bne.n	800b5e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b5dc:	f7fd f8d2 	bl	8008784 <HAL_RCC_GetPCLK2Freq>
 800b5e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b5e4:	e003      	b.n	800b5ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b5e6:	f7fd f8b9 	bl	800875c <HAL_RCC_GetPCLK1Freq>
 800b5ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f8:	f040 810c 	bne.w	800b814 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b5fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b600:	2200      	movs	r2, #0
 800b602:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b606:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b60a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b60e:	4622      	mov	r2, r4
 800b610:	462b      	mov	r3, r5
 800b612:	1891      	adds	r1, r2, r2
 800b614:	65b9      	str	r1, [r7, #88]	; 0x58
 800b616:	415b      	adcs	r3, r3
 800b618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b61a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b61e:	4621      	mov	r1, r4
 800b620:	eb12 0801 	adds.w	r8, r2, r1
 800b624:	4629      	mov	r1, r5
 800b626:	eb43 0901 	adc.w	r9, r3, r1
 800b62a:	f04f 0200 	mov.w	r2, #0
 800b62e:	f04f 0300 	mov.w	r3, #0
 800b632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b63a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b63e:	4690      	mov	r8, r2
 800b640:	4699      	mov	r9, r3
 800b642:	4623      	mov	r3, r4
 800b644:	eb18 0303 	adds.w	r3, r8, r3
 800b648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b64c:	462b      	mov	r3, r5
 800b64e:	eb49 0303 	adc.w	r3, r9, r3
 800b652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b662:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b66a:	460b      	mov	r3, r1
 800b66c:	18db      	adds	r3, r3, r3
 800b66e:	653b      	str	r3, [r7, #80]	; 0x50
 800b670:	4613      	mov	r3, r2
 800b672:	eb42 0303 	adc.w	r3, r2, r3
 800b676:	657b      	str	r3, [r7, #84]	; 0x54
 800b678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b67c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b680:	f7f5 fb22 	bl	8000cc8 <__aeabi_uldivmod>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4b61      	ldr	r3, [pc, #388]	; (800b810 <UART_SetConfig+0x2d4>)
 800b68a:	fba3 2302 	umull	r2, r3, r3, r2
 800b68e:	095b      	lsrs	r3, r3, #5
 800b690:	011c      	lsls	r4, r3, #4
 800b692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b696:	2200      	movs	r2, #0
 800b698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b69c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b6a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	464b      	mov	r3, r9
 800b6a8:	1891      	adds	r1, r2, r2
 800b6aa:	64b9      	str	r1, [r7, #72]	; 0x48
 800b6ac:	415b      	adcs	r3, r3
 800b6ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b6b4:	4641      	mov	r1, r8
 800b6b6:	eb12 0a01 	adds.w	sl, r2, r1
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	eb43 0b01 	adc.w	fp, r3, r1
 800b6c0:	f04f 0200 	mov.w	r2, #0
 800b6c4:	f04f 0300 	mov.w	r3, #0
 800b6c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b6cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b6d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6d4:	4692      	mov	sl, r2
 800b6d6:	469b      	mov	fp, r3
 800b6d8:	4643      	mov	r3, r8
 800b6da:	eb1a 0303 	adds.w	r3, sl, r3
 800b6de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	eb4b 0303 	adc.w	r3, fp, r3
 800b6e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b6fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b700:	460b      	mov	r3, r1
 800b702:	18db      	adds	r3, r3, r3
 800b704:	643b      	str	r3, [r7, #64]	; 0x40
 800b706:	4613      	mov	r3, r2
 800b708:	eb42 0303 	adc.w	r3, r2, r3
 800b70c:	647b      	str	r3, [r7, #68]	; 0x44
 800b70e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b712:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b716:	f7f5 fad7 	bl	8000cc8 <__aeabi_uldivmod>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	4b3b      	ldr	r3, [pc, #236]	; (800b810 <UART_SetConfig+0x2d4>)
 800b722:	fba3 2301 	umull	r2, r3, r3, r1
 800b726:	095b      	lsrs	r3, r3, #5
 800b728:	2264      	movs	r2, #100	; 0x64
 800b72a:	fb02 f303 	mul.w	r3, r2, r3
 800b72e:	1acb      	subs	r3, r1, r3
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b736:	4b36      	ldr	r3, [pc, #216]	; (800b810 <UART_SetConfig+0x2d4>)
 800b738:	fba3 2302 	umull	r2, r3, r3, r2
 800b73c:	095b      	lsrs	r3, r3, #5
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b744:	441c      	add	r4, r3
 800b746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b750:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b754:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b758:	4642      	mov	r2, r8
 800b75a:	464b      	mov	r3, r9
 800b75c:	1891      	adds	r1, r2, r2
 800b75e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b760:	415b      	adcs	r3, r3
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b768:	4641      	mov	r1, r8
 800b76a:	1851      	adds	r1, r2, r1
 800b76c:	6339      	str	r1, [r7, #48]	; 0x30
 800b76e:	4649      	mov	r1, r9
 800b770:	414b      	adcs	r3, r1
 800b772:	637b      	str	r3, [r7, #52]	; 0x34
 800b774:	f04f 0200 	mov.w	r2, #0
 800b778:	f04f 0300 	mov.w	r3, #0
 800b77c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b780:	4659      	mov	r1, fp
 800b782:	00cb      	lsls	r3, r1, #3
 800b784:	4651      	mov	r1, sl
 800b786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b78a:	4651      	mov	r1, sl
 800b78c:	00ca      	lsls	r2, r1, #3
 800b78e:	4610      	mov	r0, r2
 800b790:	4619      	mov	r1, r3
 800b792:	4603      	mov	r3, r0
 800b794:	4642      	mov	r2, r8
 800b796:	189b      	adds	r3, r3, r2
 800b798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b79c:	464b      	mov	r3, r9
 800b79e:	460a      	mov	r2, r1
 800b7a0:	eb42 0303 	adc.w	r3, r2, r3
 800b7a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b7b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b7b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b7bc:	460b      	mov	r3, r1
 800b7be:	18db      	adds	r3, r3, r3
 800b7c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	eb42 0303 	adc.w	r3, r2, r3
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b7ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b7d2:	f7f5 fa79 	bl	8000cc8 <__aeabi_uldivmod>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <UART_SetConfig+0x2d4>)
 800b7dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b7e0:	095b      	lsrs	r3, r3, #5
 800b7e2:	2164      	movs	r1, #100	; 0x64
 800b7e4:	fb01 f303 	mul.w	r3, r1, r3
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	3332      	adds	r3, #50	; 0x32
 800b7ee:	4a08      	ldr	r2, [pc, #32]	; (800b810 <UART_SetConfig+0x2d4>)
 800b7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f4:	095b      	lsrs	r3, r3, #5
 800b7f6:	f003 0207 	and.w	r2, r3, #7
 800b7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4422      	add	r2, r4
 800b802:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b804:	e105      	b.n	800ba12 <UART_SetConfig+0x4d6>
 800b806:	bf00      	nop
 800b808:	40011000 	.word	0x40011000
 800b80c:	40011400 	.word	0x40011400
 800b810:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b818:	2200      	movs	r2, #0
 800b81a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b81e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b826:	4642      	mov	r2, r8
 800b828:	464b      	mov	r3, r9
 800b82a:	1891      	adds	r1, r2, r2
 800b82c:	6239      	str	r1, [r7, #32]
 800b82e:	415b      	adcs	r3, r3
 800b830:	627b      	str	r3, [r7, #36]	; 0x24
 800b832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b836:	4641      	mov	r1, r8
 800b838:	1854      	adds	r4, r2, r1
 800b83a:	4649      	mov	r1, r9
 800b83c:	eb43 0501 	adc.w	r5, r3, r1
 800b840:	f04f 0200 	mov.w	r2, #0
 800b844:	f04f 0300 	mov.w	r3, #0
 800b848:	00eb      	lsls	r3, r5, #3
 800b84a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b84e:	00e2      	lsls	r2, r4, #3
 800b850:	4614      	mov	r4, r2
 800b852:	461d      	mov	r5, r3
 800b854:	4643      	mov	r3, r8
 800b856:	18e3      	adds	r3, r4, r3
 800b858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b85c:	464b      	mov	r3, r9
 800b85e:	eb45 0303 	adc.w	r3, r5, r3
 800b862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b876:	f04f 0200 	mov.w	r2, #0
 800b87a:	f04f 0300 	mov.w	r3, #0
 800b87e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b882:	4629      	mov	r1, r5
 800b884:	008b      	lsls	r3, r1, #2
 800b886:	4621      	mov	r1, r4
 800b888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b88c:	4621      	mov	r1, r4
 800b88e:	008a      	lsls	r2, r1, #2
 800b890:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b894:	f7f5 fa18 	bl	8000cc8 <__aeabi_uldivmod>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4b60      	ldr	r3, [pc, #384]	; (800ba20 <UART_SetConfig+0x4e4>)
 800b89e:	fba3 2302 	umull	r2, r3, r3, r2
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	011c      	lsls	r4, r3, #4
 800b8a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b8b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	1891      	adds	r1, r2, r2
 800b8be:	61b9      	str	r1, [r7, #24]
 800b8c0:	415b      	adcs	r3, r3
 800b8c2:	61fb      	str	r3, [r7, #28]
 800b8c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	1851      	adds	r1, r2, r1
 800b8cc:	6139      	str	r1, [r7, #16]
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	414b      	adcs	r3, r1
 800b8d2:	617b      	str	r3, [r7, #20]
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b8e0:	4659      	mov	r1, fp
 800b8e2:	00cb      	lsls	r3, r1, #3
 800b8e4:	4651      	mov	r1, sl
 800b8e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8ea:	4651      	mov	r1, sl
 800b8ec:	00ca      	lsls	r2, r1, #3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	189b      	adds	r3, r3, r2
 800b8f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8fc:	464b      	mov	r3, r9
 800b8fe:	460a      	mov	r2, r1
 800b900:	eb42 0303 	adc.w	r3, r2, r3
 800b904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	67bb      	str	r3, [r7, #120]	; 0x78
 800b912:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b914:	f04f 0200 	mov.w	r2, #0
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b920:	4649      	mov	r1, r9
 800b922:	008b      	lsls	r3, r1, #2
 800b924:	4641      	mov	r1, r8
 800b926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b92a:	4641      	mov	r1, r8
 800b92c:	008a      	lsls	r2, r1, #2
 800b92e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b932:	f7f5 f9c9 	bl	8000cc8 <__aeabi_uldivmod>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4b39      	ldr	r3, [pc, #228]	; (800ba20 <UART_SetConfig+0x4e4>)
 800b93c:	fba3 1302 	umull	r1, r3, r3, r2
 800b940:	095b      	lsrs	r3, r3, #5
 800b942:	2164      	movs	r1, #100	; 0x64
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	011b      	lsls	r3, r3, #4
 800b94c:	3332      	adds	r3, #50	; 0x32
 800b94e:	4a34      	ldr	r2, [pc, #208]	; (800ba20 <UART_SetConfig+0x4e4>)
 800b950:	fba2 2303 	umull	r2, r3, r2, r3
 800b954:	095b      	lsrs	r3, r3, #5
 800b956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b95a:	441c      	add	r4, r3
 800b95c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b960:	2200      	movs	r2, #0
 800b962:	673b      	str	r3, [r7, #112]	; 0x70
 800b964:	677a      	str	r2, [r7, #116]	; 0x74
 800b966:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b96a:	4642      	mov	r2, r8
 800b96c:	464b      	mov	r3, r9
 800b96e:	1891      	adds	r1, r2, r2
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	415b      	adcs	r3, r3
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b97a:	4641      	mov	r1, r8
 800b97c:	1851      	adds	r1, r2, r1
 800b97e:	6039      	str	r1, [r7, #0]
 800b980:	4649      	mov	r1, r9
 800b982:	414b      	adcs	r3, r1
 800b984:	607b      	str	r3, [r7, #4]
 800b986:	f04f 0200 	mov.w	r2, #0
 800b98a:	f04f 0300 	mov.w	r3, #0
 800b98e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b992:	4659      	mov	r1, fp
 800b994:	00cb      	lsls	r3, r1, #3
 800b996:	4651      	mov	r1, sl
 800b998:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b99c:	4651      	mov	r1, sl
 800b99e:	00ca      	lsls	r2, r1, #3
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	4642      	mov	r2, r8
 800b9a8:	189b      	adds	r3, r3, r2
 800b9aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9ac:	464b      	mov	r3, r9
 800b9ae:	460a      	mov	r2, r1
 800b9b0:	eb42 0303 	adc.w	r3, r2, r3
 800b9b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	663b      	str	r3, [r7, #96]	; 0x60
 800b9c0:	667a      	str	r2, [r7, #100]	; 0x64
 800b9c2:	f04f 0200 	mov.w	r2, #0
 800b9c6:	f04f 0300 	mov.w	r3, #0
 800b9ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	008b      	lsls	r3, r1, #2
 800b9d2:	4641      	mov	r1, r8
 800b9d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9d8:	4641      	mov	r1, r8
 800b9da:	008a      	lsls	r2, r1, #2
 800b9dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b9e0:	f7f5 f972 	bl	8000cc8 <__aeabi_uldivmod>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <UART_SetConfig+0x4e4>)
 800b9ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b9ee:	095b      	lsrs	r3, r3, #5
 800b9f0:	2164      	movs	r1, #100	; 0x64
 800b9f2:	fb01 f303 	mul.w	r3, r1, r3
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	011b      	lsls	r3, r3, #4
 800b9fa:	3332      	adds	r3, #50	; 0x32
 800b9fc:	4a08      	ldr	r2, [pc, #32]	; (800ba20 <UART_SetConfig+0x4e4>)
 800b9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800ba02:	095b      	lsrs	r3, r3, #5
 800ba04:	f003 020f 	and.w	r2, r3, #15
 800ba08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4422      	add	r2, r4
 800ba10:	609a      	str	r2, [r3, #8]
}
 800ba12:	bf00      	nop
 800ba14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba1e:	bf00      	nop
 800ba20:	51eb851f 	.word	0x51eb851f

0800ba24 <atof>:
 800ba24:	2100      	movs	r1, #0
 800ba26:	f001 bb61 	b.w	800d0ec <strtod>

0800ba2a <atoi>:
 800ba2a:	220a      	movs	r2, #10
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	f001 bbeb 	b.w	800d208 <strtol>
	...

0800ba34 <__errno>:
 800ba34:	4b01      	ldr	r3, [pc, #4]	; (800ba3c <__errno+0x8>)
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	2000004c 	.word	0x2000004c

0800ba40 <__libc_init_array>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	4d0d      	ldr	r5, [pc, #52]	; (800ba78 <__libc_init_array+0x38>)
 800ba44:	4c0d      	ldr	r4, [pc, #52]	; (800ba7c <__libc_init_array+0x3c>)
 800ba46:	1b64      	subs	r4, r4, r5
 800ba48:	10a4      	asrs	r4, r4, #2
 800ba4a:	2600      	movs	r6, #0
 800ba4c:	42a6      	cmp	r6, r4
 800ba4e:	d109      	bne.n	800ba64 <__libc_init_array+0x24>
 800ba50:	4d0b      	ldr	r5, [pc, #44]	; (800ba80 <__libc_init_array+0x40>)
 800ba52:	4c0c      	ldr	r4, [pc, #48]	; (800ba84 <__libc_init_array+0x44>)
 800ba54:	f004 fcaa 	bl	80103ac <_init>
 800ba58:	1b64      	subs	r4, r4, r5
 800ba5a:	10a4      	asrs	r4, r4, #2
 800ba5c:	2600      	movs	r6, #0
 800ba5e:	42a6      	cmp	r6, r4
 800ba60:	d105      	bne.n	800ba6e <__libc_init_array+0x2e>
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba68:	4798      	blx	r3
 800ba6a:	3601      	adds	r6, #1
 800ba6c:	e7ee      	b.n	800ba4c <__libc_init_array+0xc>
 800ba6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba72:	4798      	blx	r3
 800ba74:	3601      	adds	r6, #1
 800ba76:	e7f2      	b.n	800ba5e <__libc_init_array+0x1e>
 800ba78:	08011a80 	.word	0x08011a80
 800ba7c:	08011a80 	.word	0x08011a80
 800ba80:	08011a80 	.word	0x08011a80
 800ba84:	08011a84 	.word	0x08011a84

0800ba88 <memcpy>:
 800ba88:	440a      	add	r2, r1
 800ba8a:	4291      	cmp	r1, r2
 800ba8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba90:	d100      	bne.n	800ba94 <memcpy+0xc>
 800ba92:	4770      	bx	lr
 800ba94:	b510      	push	{r4, lr}
 800ba96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba9e:	4291      	cmp	r1, r2
 800baa0:	d1f9      	bne.n	800ba96 <memcpy+0xe>
 800baa2:	bd10      	pop	{r4, pc}

0800baa4 <memset>:
 800baa4:	4402      	add	r2, r0
 800baa6:	4603      	mov	r3, r0
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d100      	bne.n	800baae <memset+0xa>
 800baac:	4770      	bx	lr
 800baae:	f803 1b01 	strb.w	r1, [r3], #1
 800bab2:	e7f9      	b.n	800baa8 <memset+0x4>

0800bab4 <__cvt>:
 800bab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	ec55 4b10 	vmov	r4, r5, d0
 800babc:	2d00      	cmp	r5, #0
 800babe:	460e      	mov	r6, r1
 800bac0:	4619      	mov	r1, r3
 800bac2:	462b      	mov	r3, r5
 800bac4:	bfbb      	ittet	lt
 800bac6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800baca:	461d      	movlt	r5, r3
 800bacc:	2300      	movge	r3, #0
 800bace:	232d      	movlt	r3, #45	; 0x2d
 800bad0:	700b      	strb	r3, [r1, #0]
 800bad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bad8:	4691      	mov	r9, r2
 800bada:	f023 0820 	bic.w	r8, r3, #32
 800bade:	bfbc      	itt	lt
 800bae0:	4622      	movlt	r2, r4
 800bae2:	4614      	movlt	r4, r2
 800bae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bae8:	d005      	beq.n	800baf6 <__cvt+0x42>
 800baea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800baee:	d100      	bne.n	800baf2 <__cvt+0x3e>
 800baf0:	3601      	adds	r6, #1
 800baf2:	2102      	movs	r1, #2
 800baf4:	e000      	b.n	800baf8 <__cvt+0x44>
 800baf6:	2103      	movs	r1, #3
 800baf8:	ab03      	add	r3, sp, #12
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	ab02      	add	r3, sp, #8
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	ec45 4b10 	vmov	d0, r4, r5
 800bb04:	4653      	mov	r3, sl
 800bb06:	4632      	mov	r2, r6
 800bb08:	f001 fcd6 	bl	800d4b8 <_dtoa_r>
 800bb0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb10:	4607      	mov	r7, r0
 800bb12:	d102      	bne.n	800bb1a <__cvt+0x66>
 800bb14:	f019 0f01 	tst.w	r9, #1
 800bb18:	d022      	beq.n	800bb60 <__cvt+0xac>
 800bb1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb1e:	eb07 0906 	add.w	r9, r7, r6
 800bb22:	d110      	bne.n	800bb46 <__cvt+0x92>
 800bb24:	783b      	ldrb	r3, [r7, #0]
 800bb26:	2b30      	cmp	r3, #48	; 0x30
 800bb28:	d10a      	bne.n	800bb40 <__cvt+0x8c>
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	f7f4 ffe9 	bl	8000b08 <__aeabi_dcmpeq>
 800bb36:	b918      	cbnz	r0, 800bb40 <__cvt+0x8c>
 800bb38:	f1c6 0601 	rsb	r6, r6, #1
 800bb3c:	f8ca 6000 	str.w	r6, [sl]
 800bb40:	f8da 3000 	ldr.w	r3, [sl]
 800bb44:	4499      	add	r9, r3
 800bb46:	2200      	movs	r2, #0
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	f7f4 ffdb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb52:	b108      	cbz	r0, 800bb58 <__cvt+0xa4>
 800bb54:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb58:	2230      	movs	r2, #48	; 0x30
 800bb5a:	9b03      	ldr	r3, [sp, #12]
 800bb5c:	454b      	cmp	r3, r9
 800bb5e:	d307      	bcc.n	800bb70 <__cvt+0xbc>
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb64:	1bdb      	subs	r3, r3, r7
 800bb66:	4638      	mov	r0, r7
 800bb68:	6013      	str	r3, [r2, #0]
 800bb6a:	b004      	add	sp, #16
 800bb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb70:	1c59      	adds	r1, r3, #1
 800bb72:	9103      	str	r1, [sp, #12]
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	e7f0      	b.n	800bb5a <__cvt+0xa6>

0800bb78 <__exponent>:
 800bb78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2900      	cmp	r1, #0
 800bb7e:	bfb8      	it	lt
 800bb80:	4249      	neglt	r1, r1
 800bb82:	f803 2b02 	strb.w	r2, [r3], #2
 800bb86:	bfb4      	ite	lt
 800bb88:	222d      	movlt	r2, #45	; 0x2d
 800bb8a:	222b      	movge	r2, #43	; 0x2b
 800bb8c:	2909      	cmp	r1, #9
 800bb8e:	7042      	strb	r2, [r0, #1]
 800bb90:	dd2a      	ble.n	800bbe8 <__exponent+0x70>
 800bb92:	f10d 0407 	add.w	r4, sp, #7
 800bb96:	46a4      	mov	ip, r4
 800bb98:	270a      	movs	r7, #10
 800bb9a:	46a6      	mov	lr, r4
 800bb9c:	460a      	mov	r2, r1
 800bb9e:	fb91 f6f7 	sdiv	r6, r1, r7
 800bba2:	fb07 1516 	mls	r5, r7, r6, r1
 800bba6:	3530      	adds	r5, #48	; 0x30
 800bba8:	2a63      	cmp	r2, #99	; 0x63
 800bbaa:	f104 34ff 	add.w	r4, r4, #4294967295
 800bbae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	dcf1      	bgt.n	800bb9a <__exponent+0x22>
 800bbb6:	3130      	adds	r1, #48	; 0x30
 800bbb8:	f1ae 0502 	sub.w	r5, lr, #2
 800bbbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bbc0:	1c44      	adds	r4, r0, #1
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4561      	cmp	r1, ip
 800bbc6:	d30a      	bcc.n	800bbde <__exponent+0x66>
 800bbc8:	f10d 0209 	add.w	r2, sp, #9
 800bbcc:	eba2 020e 	sub.w	r2, r2, lr
 800bbd0:	4565      	cmp	r5, ip
 800bbd2:	bf88      	it	hi
 800bbd4:	2200      	movhi	r2, #0
 800bbd6:	4413      	add	r3, r2
 800bbd8:	1a18      	subs	r0, r3, r0
 800bbda:	b003      	add	sp, #12
 800bbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbe2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bbe6:	e7ed      	b.n	800bbc4 <__exponent+0x4c>
 800bbe8:	2330      	movs	r3, #48	; 0x30
 800bbea:	3130      	adds	r1, #48	; 0x30
 800bbec:	7083      	strb	r3, [r0, #2]
 800bbee:	70c1      	strb	r1, [r0, #3]
 800bbf0:	1d03      	adds	r3, r0, #4
 800bbf2:	e7f1      	b.n	800bbd8 <__exponent+0x60>

0800bbf4 <_printf_float>:
 800bbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf8:	ed2d 8b02 	vpush	{d8}
 800bbfc:	b08d      	sub	sp, #52	; 0x34
 800bbfe:	460c      	mov	r4, r1
 800bc00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc04:	4616      	mov	r6, r2
 800bc06:	461f      	mov	r7, r3
 800bc08:	4605      	mov	r5, r0
 800bc0a:	f002 ff69 	bl	800eae0 <_localeconv_r>
 800bc0e:	f8d0 a000 	ldr.w	sl, [r0]
 800bc12:	4650      	mov	r0, sl
 800bc14:	f7f4 fafc 	bl	8000210 <strlen>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	9305      	str	r3, [sp, #20]
 800bc20:	f8d8 3000 	ldr.w	r3, [r8]
 800bc24:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc28:	3307      	adds	r3, #7
 800bc2a:	f023 0307 	bic.w	r3, r3, #7
 800bc2e:	f103 0208 	add.w	r2, r3, #8
 800bc32:	f8c8 2000 	str.w	r2, [r8]
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc46:	9307      	str	r3, [sp, #28]
 800bc48:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc4c:	ee08 0a10 	vmov	s16, r0
 800bc50:	4b9f      	ldr	r3, [pc, #636]	; (800bed0 <_printf_float+0x2dc>)
 800bc52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc56:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5a:	f7f4 ff87 	bl	8000b6c <__aeabi_dcmpun>
 800bc5e:	bb88      	cbnz	r0, 800bcc4 <_printf_float+0xd0>
 800bc60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc64:	4b9a      	ldr	r3, [pc, #616]	; (800bed0 <_printf_float+0x2dc>)
 800bc66:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6a:	f7f4 ff61 	bl	8000b30 <__aeabi_dcmple>
 800bc6e:	bb48      	cbnz	r0, 800bcc4 <_printf_float+0xd0>
 800bc70:	2200      	movs	r2, #0
 800bc72:	2300      	movs	r3, #0
 800bc74:	4640      	mov	r0, r8
 800bc76:	4649      	mov	r1, r9
 800bc78:	f7f4 ff50 	bl	8000b1c <__aeabi_dcmplt>
 800bc7c:	b110      	cbz	r0, 800bc84 <_printf_float+0x90>
 800bc7e:	232d      	movs	r3, #45	; 0x2d
 800bc80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc84:	4b93      	ldr	r3, [pc, #588]	; (800bed4 <_printf_float+0x2e0>)
 800bc86:	4894      	ldr	r0, [pc, #592]	; (800bed8 <_printf_float+0x2e4>)
 800bc88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bc8c:	bf94      	ite	ls
 800bc8e:	4698      	movls	r8, r3
 800bc90:	4680      	movhi	r8, r0
 800bc92:	2303      	movs	r3, #3
 800bc94:	6123      	str	r3, [r4, #16]
 800bc96:	9b05      	ldr	r3, [sp, #20]
 800bc98:	f023 0204 	bic.w	r2, r3, #4
 800bc9c:	6022      	str	r2, [r4, #0]
 800bc9e:	f04f 0900 	mov.w	r9, #0
 800bca2:	9700      	str	r7, [sp, #0]
 800bca4:	4633      	mov	r3, r6
 800bca6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f000 f9d8 	bl	800c060 <_printf_common>
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	f040 8090 	bne.w	800bdd6 <_printf_float+0x1e2>
 800bcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcba:	b00d      	add	sp, #52	; 0x34
 800bcbc:	ecbd 8b02 	vpop	{d8}
 800bcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc4:	4642      	mov	r2, r8
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	4640      	mov	r0, r8
 800bcca:	4649      	mov	r1, r9
 800bccc:	f7f4 ff4e 	bl	8000b6c <__aeabi_dcmpun>
 800bcd0:	b140      	cbz	r0, 800bce4 <_printf_float+0xf0>
 800bcd2:	464b      	mov	r3, r9
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bfbc      	itt	lt
 800bcd8:	232d      	movlt	r3, #45	; 0x2d
 800bcda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bcde:	487f      	ldr	r0, [pc, #508]	; (800bedc <_printf_float+0x2e8>)
 800bce0:	4b7f      	ldr	r3, [pc, #508]	; (800bee0 <_printf_float+0x2ec>)
 800bce2:	e7d1      	b.n	800bc88 <_printf_float+0x94>
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bcea:	9206      	str	r2, [sp, #24]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	d13f      	bne.n	800bd70 <_printf_float+0x17c>
 800bcf0:	2306      	movs	r3, #6
 800bcf2:	6063      	str	r3, [r4, #4]
 800bcf4:	9b05      	ldr	r3, [sp, #20]
 800bcf6:	6861      	ldr	r1, [r4, #4]
 800bcf8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9303      	str	r3, [sp, #12]
 800bd00:	ab0a      	add	r3, sp, #40	; 0x28
 800bd02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd06:	ab09      	add	r3, sp, #36	; 0x24
 800bd08:	ec49 8b10 	vmov	d0, r8, r9
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7ff fecd 	bl	800bab4 <__cvt>
 800bd1a:	9b06      	ldr	r3, [sp, #24]
 800bd1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd1e:	2b47      	cmp	r3, #71	; 0x47
 800bd20:	4680      	mov	r8, r0
 800bd22:	d108      	bne.n	800bd36 <_printf_float+0x142>
 800bd24:	1cc8      	adds	r0, r1, #3
 800bd26:	db02      	blt.n	800bd2e <_printf_float+0x13a>
 800bd28:	6863      	ldr	r3, [r4, #4]
 800bd2a:	4299      	cmp	r1, r3
 800bd2c:	dd41      	ble.n	800bdb2 <_printf_float+0x1be>
 800bd2e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bd32:	fa5f fb8b 	uxtb.w	fp, fp
 800bd36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd3a:	d820      	bhi.n	800bd7e <_printf_float+0x18a>
 800bd3c:	3901      	subs	r1, #1
 800bd3e:	465a      	mov	r2, fp
 800bd40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd44:	9109      	str	r1, [sp, #36]	; 0x24
 800bd46:	f7ff ff17 	bl	800bb78 <__exponent>
 800bd4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd4c:	1813      	adds	r3, r2, r0
 800bd4e:	2a01      	cmp	r2, #1
 800bd50:	4681      	mov	r9, r0
 800bd52:	6123      	str	r3, [r4, #16]
 800bd54:	dc02      	bgt.n	800bd5c <_printf_float+0x168>
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	07d2      	lsls	r2, r2, #31
 800bd5a:	d501      	bpl.n	800bd60 <_printf_float+0x16c>
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	6123      	str	r3, [r4, #16]
 800bd60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d09c      	beq.n	800bca2 <_printf_float+0xae>
 800bd68:	232d      	movs	r3, #45	; 0x2d
 800bd6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd6e:	e798      	b.n	800bca2 <_printf_float+0xae>
 800bd70:	9a06      	ldr	r2, [sp, #24]
 800bd72:	2a47      	cmp	r2, #71	; 0x47
 800bd74:	d1be      	bne.n	800bcf4 <_printf_float+0x100>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1bc      	bne.n	800bcf4 <_printf_float+0x100>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7b9      	b.n	800bcf2 <_printf_float+0xfe>
 800bd7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd82:	d118      	bne.n	800bdb6 <_printf_float+0x1c2>
 800bd84:	2900      	cmp	r1, #0
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	dd0b      	ble.n	800bda2 <_printf_float+0x1ae>
 800bd8a:	6121      	str	r1, [r4, #16]
 800bd8c:	b913      	cbnz	r3, 800bd94 <_printf_float+0x1a0>
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	07d0      	lsls	r0, r2, #31
 800bd92:	d502      	bpl.n	800bd9a <_printf_float+0x1a6>
 800bd94:	3301      	adds	r3, #1
 800bd96:	440b      	add	r3, r1
 800bd98:	6123      	str	r3, [r4, #16]
 800bd9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd9c:	f04f 0900 	mov.w	r9, #0
 800bda0:	e7de      	b.n	800bd60 <_printf_float+0x16c>
 800bda2:	b913      	cbnz	r3, 800bdaa <_printf_float+0x1b6>
 800bda4:	6822      	ldr	r2, [r4, #0]
 800bda6:	07d2      	lsls	r2, r2, #31
 800bda8:	d501      	bpl.n	800bdae <_printf_float+0x1ba>
 800bdaa:	3302      	adds	r3, #2
 800bdac:	e7f4      	b.n	800bd98 <_printf_float+0x1a4>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e7f2      	b.n	800bd98 <_printf_float+0x1a4>
 800bdb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bdb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdb8:	4299      	cmp	r1, r3
 800bdba:	db05      	blt.n	800bdc8 <_printf_float+0x1d4>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	6121      	str	r1, [r4, #16]
 800bdc0:	07d8      	lsls	r0, r3, #31
 800bdc2:	d5ea      	bpl.n	800bd9a <_printf_float+0x1a6>
 800bdc4:	1c4b      	adds	r3, r1, #1
 800bdc6:	e7e7      	b.n	800bd98 <_printf_float+0x1a4>
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	bfd4      	ite	le
 800bdcc:	f1c1 0202 	rsble	r2, r1, #2
 800bdd0:	2201      	movgt	r2, #1
 800bdd2:	4413      	add	r3, r2
 800bdd4:	e7e0      	b.n	800bd98 <_printf_float+0x1a4>
 800bdd6:	6823      	ldr	r3, [r4, #0]
 800bdd8:	055a      	lsls	r2, r3, #21
 800bdda:	d407      	bmi.n	800bdec <_printf_float+0x1f8>
 800bddc:	6923      	ldr	r3, [r4, #16]
 800bdde:	4642      	mov	r2, r8
 800bde0:	4631      	mov	r1, r6
 800bde2:	4628      	mov	r0, r5
 800bde4:	47b8      	blx	r7
 800bde6:	3001      	adds	r0, #1
 800bde8:	d12c      	bne.n	800be44 <_printf_float+0x250>
 800bdea:	e764      	b.n	800bcb6 <_printf_float+0xc2>
 800bdec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdf0:	f240 80e0 	bls.w	800bfb4 <_printf_float+0x3c0>
 800bdf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f7f4 fe84 	bl	8000b08 <__aeabi_dcmpeq>
 800be00:	2800      	cmp	r0, #0
 800be02:	d034      	beq.n	800be6e <_printf_float+0x27a>
 800be04:	4a37      	ldr	r2, [pc, #220]	; (800bee4 <_printf_float+0x2f0>)
 800be06:	2301      	movs	r3, #1
 800be08:	4631      	mov	r1, r6
 800be0a:	4628      	mov	r0, r5
 800be0c:	47b8      	blx	r7
 800be0e:	3001      	adds	r0, #1
 800be10:	f43f af51 	beq.w	800bcb6 <_printf_float+0xc2>
 800be14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be18:	429a      	cmp	r2, r3
 800be1a:	db02      	blt.n	800be22 <_printf_float+0x22e>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	07d8      	lsls	r0, r3, #31
 800be20:	d510      	bpl.n	800be44 <_printf_float+0x250>
 800be22:	ee18 3a10 	vmov	r3, s16
 800be26:	4652      	mov	r2, sl
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	47b8      	blx	r7
 800be2e:	3001      	adds	r0, #1
 800be30:	f43f af41 	beq.w	800bcb6 <_printf_float+0xc2>
 800be34:	f04f 0800 	mov.w	r8, #0
 800be38:	f104 091a 	add.w	r9, r4, #26
 800be3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3e:	3b01      	subs	r3, #1
 800be40:	4543      	cmp	r3, r8
 800be42:	dc09      	bgt.n	800be58 <_printf_float+0x264>
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	079b      	lsls	r3, r3, #30
 800be48:	f100 8105 	bmi.w	800c056 <_printf_float+0x462>
 800be4c:	68e0      	ldr	r0, [r4, #12]
 800be4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be50:	4298      	cmp	r0, r3
 800be52:	bfb8      	it	lt
 800be54:	4618      	movlt	r0, r3
 800be56:	e730      	b.n	800bcba <_printf_float+0xc6>
 800be58:	2301      	movs	r3, #1
 800be5a:	464a      	mov	r2, r9
 800be5c:	4631      	mov	r1, r6
 800be5e:	4628      	mov	r0, r5
 800be60:	47b8      	blx	r7
 800be62:	3001      	adds	r0, #1
 800be64:	f43f af27 	beq.w	800bcb6 <_printf_float+0xc2>
 800be68:	f108 0801 	add.w	r8, r8, #1
 800be6c:	e7e6      	b.n	800be3c <_printf_float+0x248>
 800be6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	dc39      	bgt.n	800bee8 <_printf_float+0x2f4>
 800be74:	4a1b      	ldr	r2, [pc, #108]	; (800bee4 <_printf_float+0x2f0>)
 800be76:	2301      	movs	r3, #1
 800be78:	4631      	mov	r1, r6
 800be7a:	4628      	mov	r0, r5
 800be7c:	47b8      	blx	r7
 800be7e:	3001      	adds	r0, #1
 800be80:	f43f af19 	beq.w	800bcb6 <_printf_float+0xc2>
 800be84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be88:	4313      	orrs	r3, r2
 800be8a:	d102      	bne.n	800be92 <_printf_float+0x29e>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	07d9      	lsls	r1, r3, #31
 800be90:	d5d8      	bpl.n	800be44 <_printf_float+0x250>
 800be92:	ee18 3a10 	vmov	r3, s16
 800be96:	4652      	mov	r2, sl
 800be98:	4631      	mov	r1, r6
 800be9a:	4628      	mov	r0, r5
 800be9c:	47b8      	blx	r7
 800be9e:	3001      	adds	r0, #1
 800bea0:	f43f af09 	beq.w	800bcb6 <_printf_float+0xc2>
 800bea4:	f04f 0900 	mov.w	r9, #0
 800bea8:	f104 0a1a 	add.w	sl, r4, #26
 800beac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beae:	425b      	negs	r3, r3
 800beb0:	454b      	cmp	r3, r9
 800beb2:	dc01      	bgt.n	800beb8 <_printf_float+0x2c4>
 800beb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beb6:	e792      	b.n	800bdde <_printf_float+0x1ea>
 800beb8:	2301      	movs	r3, #1
 800beba:	4652      	mov	r2, sl
 800bebc:	4631      	mov	r1, r6
 800bebe:	4628      	mov	r0, r5
 800bec0:	47b8      	blx	r7
 800bec2:	3001      	adds	r0, #1
 800bec4:	f43f aef7 	beq.w	800bcb6 <_printf_float+0xc2>
 800bec8:	f109 0901 	add.w	r9, r9, #1
 800becc:	e7ee      	b.n	800beac <_printf_float+0x2b8>
 800bece:	bf00      	nop
 800bed0:	7fefffff 	.word	0x7fefffff
 800bed4:	0801159c 	.word	0x0801159c
 800bed8:	080115a0 	.word	0x080115a0
 800bedc:	080115a8 	.word	0x080115a8
 800bee0:	080115a4 	.word	0x080115a4
 800bee4:	080115ac 	.word	0x080115ac
 800bee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800beec:	429a      	cmp	r2, r3
 800beee:	bfa8      	it	ge
 800bef0:	461a      	movge	r2, r3
 800bef2:	2a00      	cmp	r2, #0
 800bef4:	4691      	mov	r9, r2
 800bef6:	dc37      	bgt.n	800bf68 <_printf_float+0x374>
 800bef8:	f04f 0b00 	mov.w	fp, #0
 800befc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf00:	f104 021a 	add.w	r2, r4, #26
 800bf04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf06:	9305      	str	r3, [sp, #20]
 800bf08:	eba3 0309 	sub.w	r3, r3, r9
 800bf0c:	455b      	cmp	r3, fp
 800bf0e:	dc33      	bgt.n	800bf78 <_printf_float+0x384>
 800bf10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf14:	429a      	cmp	r2, r3
 800bf16:	db3b      	blt.n	800bf90 <_printf_float+0x39c>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	07da      	lsls	r2, r3, #31
 800bf1c:	d438      	bmi.n	800bf90 <_printf_float+0x39c>
 800bf1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf20:	9a05      	ldr	r2, [sp, #20]
 800bf22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf24:	1a9a      	subs	r2, r3, r2
 800bf26:	eba3 0901 	sub.w	r9, r3, r1
 800bf2a:	4591      	cmp	r9, r2
 800bf2c:	bfa8      	it	ge
 800bf2e:	4691      	movge	r9, r2
 800bf30:	f1b9 0f00 	cmp.w	r9, #0
 800bf34:	dc35      	bgt.n	800bfa2 <_printf_float+0x3ae>
 800bf36:	f04f 0800 	mov.w	r8, #0
 800bf3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf3e:	f104 0a1a 	add.w	sl, r4, #26
 800bf42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf46:	1a9b      	subs	r3, r3, r2
 800bf48:	eba3 0309 	sub.w	r3, r3, r9
 800bf4c:	4543      	cmp	r3, r8
 800bf4e:	f77f af79 	ble.w	800be44 <_printf_float+0x250>
 800bf52:	2301      	movs	r3, #1
 800bf54:	4652      	mov	r2, sl
 800bf56:	4631      	mov	r1, r6
 800bf58:	4628      	mov	r0, r5
 800bf5a:	47b8      	blx	r7
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	f43f aeaa 	beq.w	800bcb6 <_printf_float+0xc2>
 800bf62:	f108 0801 	add.w	r8, r8, #1
 800bf66:	e7ec      	b.n	800bf42 <_printf_float+0x34e>
 800bf68:	4613      	mov	r3, r2
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4642      	mov	r2, r8
 800bf6e:	4628      	mov	r0, r5
 800bf70:	47b8      	blx	r7
 800bf72:	3001      	adds	r0, #1
 800bf74:	d1c0      	bne.n	800bef8 <_printf_float+0x304>
 800bf76:	e69e      	b.n	800bcb6 <_printf_float+0xc2>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	9205      	str	r2, [sp, #20]
 800bf80:	47b8      	blx	r7
 800bf82:	3001      	adds	r0, #1
 800bf84:	f43f ae97 	beq.w	800bcb6 <_printf_float+0xc2>
 800bf88:	9a05      	ldr	r2, [sp, #20]
 800bf8a:	f10b 0b01 	add.w	fp, fp, #1
 800bf8e:	e7b9      	b.n	800bf04 <_printf_float+0x310>
 800bf90:	ee18 3a10 	vmov	r3, s16
 800bf94:	4652      	mov	r2, sl
 800bf96:	4631      	mov	r1, r6
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b8      	blx	r7
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d1be      	bne.n	800bf1e <_printf_float+0x32a>
 800bfa0:	e689      	b.n	800bcb6 <_printf_float+0xc2>
 800bfa2:	9a05      	ldr	r2, [sp, #20]
 800bfa4:	464b      	mov	r3, r9
 800bfa6:	4442      	add	r2, r8
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	47b8      	blx	r7
 800bfae:	3001      	adds	r0, #1
 800bfb0:	d1c1      	bne.n	800bf36 <_printf_float+0x342>
 800bfb2:	e680      	b.n	800bcb6 <_printf_float+0xc2>
 800bfb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfb6:	2a01      	cmp	r2, #1
 800bfb8:	dc01      	bgt.n	800bfbe <_printf_float+0x3ca>
 800bfba:	07db      	lsls	r3, r3, #31
 800bfbc:	d538      	bpl.n	800c030 <_printf_float+0x43c>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4642      	mov	r2, r8
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b8      	blx	r7
 800bfc8:	3001      	adds	r0, #1
 800bfca:	f43f ae74 	beq.w	800bcb6 <_printf_float+0xc2>
 800bfce:	ee18 3a10 	vmov	r3, s16
 800bfd2:	4652      	mov	r2, sl
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	47b8      	blx	r7
 800bfda:	3001      	adds	r0, #1
 800bfdc:	f43f ae6b 	beq.w	800bcb6 <_printf_float+0xc2>
 800bfe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f7f4 fd8e 	bl	8000b08 <__aeabi_dcmpeq>
 800bfec:	b9d8      	cbnz	r0, 800c026 <_printf_float+0x432>
 800bfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff0:	f108 0201 	add.w	r2, r8, #1
 800bff4:	3b01      	subs	r3, #1
 800bff6:	4631      	mov	r1, r6
 800bff8:	4628      	mov	r0, r5
 800bffa:	47b8      	blx	r7
 800bffc:	3001      	adds	r0, #1
 800bffe:	d10e      	bne.n	800c01e <_printf_float+0x42a>
 800c000:	e659      	b.n	800bcb6 <_printf_float+0xc2>
 800c002:	2301      	movs	r3, #1
 800c004:	4652      	mov	r2, sl
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	47b8      	blx	r7
 800c00c:	3001      	adds	r0, #1
 800c00e:	f43f ae52 	beq.w	800bcb6 <_printf_float+0xc2>
 800c012:	f108 0801 	add.w	r8, r8, #1
 800c016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c018:	3b01      	subs	r3, #1
 800c01a:	4543      	cmp	r3, r8
 800c01c:	dcf1      	bgt.n	800c002 <_printf_float+0x40e>
 800c01e:	464b      	mov	r3, r9
 800c020:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c024:	e6dc      	b.n	800bde0 <_printf_float+0x1ec>
 800c026:	f04f 0800 	mov.w	r8, #0
 800c02a:	f104 0a1a 	add.w	sl, r4, #26
 800c02e:	e7f2      	b.n	800c016 <_printf_float+0x422>
 800c030:	2301      	movs	r3, #1
 800c032:	4642      	mov	r2, r8
 800c034:	e7df      	b.n	800bff6 <_printf_float+0x402>
 800c036:	2301      	movs	r3, #1
 800c038:	464a      	mov	r2, r9
 800c03a:	4631      	mov	r1, r6
 800c03c:	4628      	mov	r0, r5
 800c03e:	47b8      	blx	r7
 800c040:	3001      	adds	r0, #1
 800c042:	f43f ae38 	beq.w	800bcb6 <_printf_float+0xc2>
 800c046:	f108 0801 	add.w	r8, r8, #1
 800c04a:	68e3      	ldr	r3, [r4, #12]
 800c04c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c04e:	1a5b      	subs	r3, r3, r1
 800c050:	4543      	cmp	r3, r8
 800c052:	dcf0      	bgt.n	800c036 <_printf_float+0x442>
 800c054:	e6fa      	b.n	800be4c <_printf_float+0x258>
 800c056:	f04f 0800 	mov.w	r8, #0
 800c05a:	f104 0919 	add.w	r9, r4, #25
 800c05e:	e7f4      	b.n	800c04a <_printf_float+0x456>

0800c060 <_printf_common>:
 800c060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c064:	4616      	mov	r6, r2
 800c066:	4699      	mov	r9, r3
 800c068:	688a      	ldr	r2, [r1, #8]
 800c06a:	690b      	ldr	r3, [r1, #16]
 800c06c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c070:	4293      	cmp	r3, r2
 800c072:	bfb8      	it	lt
 800c074:	4613      	movlt	r3, r2
 800c076:	6033      	str	r3, [r6, #0]
 800c078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c07c:	4607      	mov	r7, r0
 800c07e:	460c      	mov	r4, r1
 800c080:	b10a      	cbz	r2, 800c086 <_printf_common+0x26>
 800c082:	3301      	adds	r3, #1
 800c084:	6033      	str	r3, [r6, #0]
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	0699      	lsls	r1, r3, #26
 800c08a:	bf42      	ittt	mi
 800c08c:	6833      	ldrmi	r3, [r6, #0]
 800c08e:	3302      	addmi	r3, #2
 800c090:	6033      	strmi	r3, [r6, #0]
 800c092:	6825      	ldr	r5, [r4, #0]
 800c094:	f015 0506 	ands.w	r5, r5, #6
 800c098:	d106      	bne.n	800c0a8 <_printf_common+0x48>
 800c09a:	f104 0a19 	add.w	sl, r4, #25
 800c09e:	68e3      	ldr	r3, [r4, #12]
 800c0a0:	6832      	ldr	r2, [r6, #0]
 800c0a2:	1a9b      	subs	r3, r3, r2
 800c0a4:	42ab      	cmp	r3, r5
 800c0a6:	dc26      	bgt.n	800c0f6 <_printf_common+0x96>
 800c0a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0ac:	1e13      	subs	r3, r2, #0
 800c0ae:	6822      	ldr	r2, [r4, #0]
 800c0b0:	bf18      	it	ne
 800c0b2:	2301      	movne	r3, #1
 800c0b4:	0692      	lsls	r2, r2, #26
 800c0b6:	d42b      	bmi.n	800c110 <_printf_common+0xb0>
 800c0b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0bc:	4649      	mov	r1, r9
 800c0be:	4638      	mov	r0, r7
 800c0c0:	47c0      	blx	r8
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	d01e      	beq.n	800c104 <_printf_common+0xa4>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	68e5      	ldr	r5, [r4, #12]
 800c0ca:	6832      	ldr	r2, [r6, #0]
 800c0cc:	f003 0306 	and.w	r3, r3, #6
 800c0d0:	2b04      	cmp	r3, #4
 800c0d2:	bf08      	it	eq
 800c0d4:	1aad      	subeq	r5, r5, r2
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	6922      	ldr	r2, [r4, #16]
 800c0da:	bf0c      	ite	eq
 800c0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0e0:	2500      	movne	r5, #0
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	bfc4      	itt	gt
 800c0e6:	1a9b      	subgt	r3, r3, r2
 800c0e8:	18ed      	addgt	r5, r5, r3
 800c0ea:	2600      	movs	r6, #0
 800c0ec:	341a      	adds	r4, #26
 800c0ee:	42b5      	cmp	r5, r6
 800c0f0:	d11a      	bne.n	800c128 <_printf_common+0xc8>
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e008      	b.n	800c108 <_printf_common+0xa8>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	4652      	mov	r2, sl
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	47c0      	blx	r8
 800c100:	3001      	adds	r0, #1
 800c102:	d103      	bne.n	800c10c <_printf_common+0xac>
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10c:	3501      	adds	r5, #1
 800c10e:	e7c6      	b.n	800c09e <_printf_common+0x3e>
 800c110:	18e1      	adds	r1, r4, r3
 800c112:	1c5a      	adds	r2, r3, #1
 800c114:	2030      	movs	r0, #48	; 0x30
 800c116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c11a:	4422      	add	r2, r4
 800c11c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c124:	3302      	adds	r3, #2
 800c126:	e7c7      	b.n	800c0b8 <_printf_common+0x58>
 800c128:	2301      	movs	r3, #1
 800c12a:	4622      	mov	r2, r4
 800c12c:	4649      	mov	r1, r9
 800c12e:	4638      	mov	r0, r7
 800c130:	47c0      	blx	r8
 800c132:	3001      	adds	r0, #1
 800c134:	d0e6      	beq.n	800c104 <_printf_common+0xa4>
 800c136:	3601      	adds	r6, #1
 800c138:	e7d9      	b.n	800c0ee <_printf_common+0x8e>
	...

0800c13c <_printf_i>:
 800c13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c140:	7e0f      	ldrb	r7, [r1, #24]
 800c142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c144:	2f78      	cmp	r7, #120	; 0x78
 800c146:	4691      	mov	r9, r2
 800c148:	4680      	mov	r8, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	469a      	mov	sl, r3
 800c14e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c152:	d807      	bhi.n	800c164 <_printf_i+0x28>
 800c154:	2f62      	cmp	r7, #98	; 0x62
 800c156:	d80a      	bhi.n	800c16e <_printf_i+0x32>
 800c158:	2f00      	cmp	r7, #0
 800c15a:	f000 80d8 	beq.w	800c30e <_printf_i+0x1d2>
 800c15e:	2f58      	cmp	r7, #88	; 0x58
 800c160:	f000 80a3 	beq.w	800c2aa <_printf_i+0x16e>
 800c164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c16c:	e03a      	b.n	800c1e4 <_printf_i+0xa8>
 800c16e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c172:	2b15      	cmp	r3, #21
 800c174:	d8f6      	bhi.n	800c164 <_printf_i+0x28>
 800c176:	a101      	add	r1, pc, #4	; (adr r1, 800c17c <_printf_i+0x40>)
 800c178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c17c:	0800c1d5 	.word	0x0800c1d5
 800c180:	0800c1e9 	.word	0x0800c1e9
 800c184:	0800c165 	.word	0x0800c165
 800c188:	0800c165 	.word	0x0800c165
 800c18c:	0800c165 	.word	0x0800c165
 800c190:	0800c165 	.word	0x0800c165
 800c194:	0800c1e9 	.word	0x0800c1e9
 800c198:	0800c165 	.word	0x0800c165
 800c19c:	0800c165 	.word	0x0800c165
 800c1a0:	0800c165 	.word	0x0800c165
 800c1a4:	0800c165 	.word	0x0800c165
 800c1a8:	0800c2f5 	.word	0x0800c2f5
 800c1ac:	0800c219 	.word	0x0800c219
 800c1b0:	0800c2d7 	.word	0x0800c2d7
 800c1b4:	0800c165 	.word	0x0800c165
 800c1b8:	0800c165 	.word	0x0800c165
 800c1bc:	0800c317 	.word	0x0800c317
 800c1c0:	0800c165 	.word	0x0800c165
 800c1c4:	0800c219 	.word	0x0800c219
 800c1c8:	0800c165 	.word	0x0800c165
 800c1cc:	0800c165 	.word	0x0800c165
 800c1d0:	0800c2df 	.word	0x0800c2df
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	1d1a      	adds	r2, r3, #4
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	602a      	str	r2, [r5, #0]
 800c1dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e0a3      	b.n	800c330 <_printf_i+0x1f4>
 800c1e8:	6820      	ldr	r0, [r4, #0]
 800c1ea:	6829      	ldr	r1, [r5, #0]
 800c1ec:	0606      	lsls	r6, r0, #24
 800c1ee:	f101 0304 	add.w	r3, r1, #4
 800c1f2:	d50a      	bpl.n	800c20a <_printf_i+0xce>
 800c1f4:	680e      	ldr	r6, [r1, #0]
 800c1f6:	602b      	str	r3, [r5, #0]
 800c1f8:	2e00      	cmp	r6, #0
 800c1fa:	da03      	bge.n	800c204 <_printf_i+0xc8>
 800c1fc:	232d      	movs	r3, #45	; 0x2d
 800c1fe:	4276      	negs	r6, r6
 800c200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c204:	485e      	ldr	r0, [pc, #376]	; (800c380 <_printf_i+0x244>)
 800c206:	230a      	movs	r3, #10
 800c208:	e019      	b.n	800c23e <_printf_i+0x102>
 800c20a:	680e      	ldr	r6, [r1, #0]
 800c20c:	602b      	str	r3, [r5, #0]
 800c20e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c212:	bf18      	it	ne
 800c214:	b236      	sxthne	r6, r6
 800c216:	e7ef      	b.n	800c1f8 <_printf_i+0xbc>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	6820      	ldr	r0, [r4, #0]
 800c21c:	1d19      	adds	r1, r3, #4
 800c21e:	6029      	str	r1, [r5, #0]
 800c220:	0601      	lsls	r1, r0, #24
 800c222:	d501      	bpl.n	800c228 <_printf_i+0xec>
 800c224:	681e      	ldr	r6, [r3, #0]
 800c226:	e002      	b.n	800c22e <_printf_i+0xf2>
 800c228:	0646      	lsls	r6, r0, #25
 800c22a:	d5fb      	bpl.n	800c224 <_printf_i+0xe8>
 800c22c:	881e      	ldrh	r6, [r3, #0]
 800c22e:	4854      	ldr	r0, [pc, #336]	; (800c380 <_printf_i+0x244>)
 800c230:	2f6f      	cmp	r7, #111	; 0x6f
 800c232:	bf0c      	ite	eq
 800c234:	2308      	moveq	r3, #8
 800c236:	230a      	movne	r3, #10
 800c238:	2100      	movs	r1, #0
 800c23a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c23e:	6865      	ldr	r5, [r4, #4]
 800c240:	60a5      	str	r5, [r4, #8]
 800c242:	2d00      	cmp	r5, #0
 800c244:	bfa2      	ittt	ge
 800c246:	6821      	ldrge	r1, [r4, #0]
 800c248:	f021 0104 	bicge.w	r1, r1, #4
 800c24c:	6021      	strge	r1, [r4, #0]
 800c24e:	b90e      	cbnz	r6, 800c254 <_printf_i+0x118>
 800c250:	2d00      	cmp	r5, #0
 800c252:	d04d      	beq.n	800c2f0 <_printf_i+0x1b4>
 800c254:	4615      	mov	r5, r2
 800c256:	fbb6 f1f3 	udiv	r1, r6, r3
 800c25a:	fb03 6711 	mls	r7, r3, r1, r6
 800c25e:	5dc7      	ldrb	r7, [r0, r7]
 800c260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c264:	4637      	mov	r7, r6
 800c266:	42bb      	cmp	r3, r7
 800c268:	460e      	mov	r6, r1
 800c26a:	d9f4      	bls.n	800c256 <_printf_i+0x11a>
 800c26c:	2b08      	cmp	r3, #8
 800c26e:	d10b      	bne.n	800c288 <_printf_i+0x14c>
 800c270:	6823      	ldr	r3, [r4, #0]
 800c272:	07de      	lsls	r6, r3, #31
 800c274:	d508      	bpl.n	800c288 <_printf_i+0x14c>
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	6861      	ldr	r1, [r4, #4]
 800c27a:	4299      	cmp	r1, r3
 800c27c:	bfde      	ittt	le
 800c27e:	2330      	movle	r3, #48	; 0x30
 800c280:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c284:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c288:	1b52      	subs	r2, r2, r5
 800c28a:	6122      	str	r2, [r4, #16]
 800c28c:	f8cd a000 	str.w	sl, [sp]
 800c290:	464b      	mov	r3, r9
 800c292:	aa03      	add	r2, sp, #12
 800c294:	4621      	mov	r1, r4
 800c296:	4640      	mov	r0, r8
 800c298:	f7ff fee2 	bl	800c060 <_printf_common>
 800c29c:	3001      	adds	r0, #1
 800c29e:	d14c      	bne.n	800c33a <_printf_i+0x1fe>
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	b004      	add	sp, #16
 800c2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2aa:	4835      	ldr	r0, [pc, #212]	; (800c380 <_printf_i+0x244>)
 800c2ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c2b0:	6829      	ldr	r1, [r5, #0]
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2b8:	6029      	str	r1, [r5, #0]
 800c2ba:	061d      	lsls	r5, r3, #24
 800c2bc:	d514      	bpl.n	800c2e8 <_printf_i+0x1ac>
 800c2be:	07df      	lsls	r7, r3, #31
 800c2c0:	bf44      	itt	mi
 800c2c2:	f043 0320 	orrmi.w	r3, r3, #32
 800c2c6:	6023      	strmi	r3, [r4, #0]
 800c2c8:	b91e      	cbnz	r6, 800c2d2 <_printf_i+0x196>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	f023 0320 	bic.w	r3, r3, #32
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	2310      	movs	r3, #16
 800c2d4:	e7b0      	b.n	800c238 <_printf_i+0xfc>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	f043 0320 	orr.w	r3, r3, #32
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	2378      	movs	r3, #120	; 0x78
 800c2e0:	4828      	ldr	r0, [pc, #160]	; (800c384 <_printf_i+0x248>)
 800c2e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2e6:	e7e3      	b.n	800c2b0 <_printf_i+0x174>
 800c2e8:	0659      	lsls	r1, r3, #25
 800c2ea:	bf48      	it	mi
 800c2ec:	b2b6      	uxthmi	r6, r6
 800c2ee:	e7e6      	b.n	800c2be <_printf_i+0x182>
 800c2f0:	4615      	mov	r5, r2
 800c2f2:	e7bb      	b.n	800c26c <_printf_i+0x130>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	6826      	ldr	r6, [r4, #0]
 800c2f8:	6961      	ldr	r1, [r4, #20]
 800c2fa:	1d18      	adds	r0, r3, #4
 800c2fc:	6028      	str	r0, [r5, #0]
 800c2fe:	0635      	lsls	r5, r6, #24
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	d501      	bpl.n	800c308 <_printf_i+0x1cc>
 800c304:	6019      	str	r1, [r3, #0]
 800c306:	e002      	b.n	800c30e <_printf_i+0x1d2>
 800c308:	0670      	lsls	r0, r6, #25
 800c30a:	d5fb      	bpl.n	800c304 <_printf_i+0x1c8>
 800c30c:	8019      	strh	r1, [r3, #0]
 800c30e:	2300      	movs	r3, #0
 800c310:	6123      	str	r3, [r4, #16]
 800c312:	4615      	mov	r5, r2
 800c314:	e7ba      	b.n	800c28c <_printf_i+0x150>
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	1d1a      	adds	r2, r3, #4
 800c31a:	602a      	str	r2, [r5, #0]
 800c31c:	681d      	ldr	r5, [r3, #0]
 800c31e:	6862      	ldr	r2, [r4, #4]
 800c320:	2100      	movs	r1, #0
 800c322:	4628      	mov	r0, r5
 800c324:	f7f3 ff7c 	bl	8000220 <memchr>
 800c328:	b108      	cbz	r0, 800c32e <_printf_i+0x1f2>
 800c32a:	1b40      	subs	r0, r0, r5
 800c32c:	6060      	str	r0, [r4, #4]
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	6123      	str	r3, [r4, #16]
 800c332:	2300      	movs	r3, #0
 800c334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c338:	e7a8      	b.n	800c28c <_printf_i+0x150>
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	462a      	mov	r2, r5
 800c33e:	4649      	mov	r1, r9
 800c340:	4640      	mov	r0, r8
 800c342:	47d0      	blx	sl
 800c344:	3001      	adds	r0, #1
 800c346:	d0ab      	beq.n	800c2a0 <_printf_i+0x164>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	079b      	lsls	r3, r3, #30
 800c34c:	d413      	bmi.n	800c376 <_printf_i+0x23a>
 800c34e:	68e0      	ldr	r0, [r4, #12]
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	4298      	cmp	r0, r3
 800c354:	bfb8      	it	lt
 800c356:	4618      	movlt	r0, r3
 800c358:	e7a4      	b.n	800c2a4 <_printf_i+0x168>
 800c35a:	2301      	movs	r3, #1
 800c35c:	4632      	mov	r2, r6
 800c35e:	4649      	mov	r1, r9
 800c360:	4640      	mov	r0, r8
 800c362:	47d0      	blx	sl
 800c364:	3001      	adds	r0, #1
 800c366:	d09b      	beq.n	800c2a0 <_printf_i+0x164>
 800c368:	3501      	adds	r5, #1
 800c36a:	68e3      	ldr	r3, [r4, #12]
 800c36c:	9903      	ldr	r1, [sp, #12]
 800c36e:	1a5b      	subs	r3, r3, r1
 800c370:	42ab      	cmp	r3, r5
 800c372:	dcf2      	bgt.n	800c35a <_printf_i+0x21e>
 800c374:	e7eb      	b.n	800c34e <_printf_i+0x212>
 800c376:	2500      	movs	r5, #0
 800c378:	f104 0619 	add.w	r6, r4, #25
 800c37c:	e7f5      	b.n	800c36a <_printf_i+0x22e>
 800c37e:	bf00      	nop
 800c380:	080115ae 	.word	0x080115ae
 800c384:	080115bf 	.word	0x080115bf

0800c388 <iprintf>:
 800c388:	b40f      	push	{r0, r1, r2, r3}
 800c38a:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <iprintf+0x2c>)
 800c38c:	b513      	push	{r0, r1, r4, lr}
 800c38e:	681c      	ldr	r4, [r3, #0]
 800c390:	b124      	cbz	r4, 800c39c <iprintf+0x14>
 800c392:	69a3      	ldr	r3, [r4, #24]
 800c394:	b913      	cbnz	r3, 800c39c <iprintf+0x14>
 800c396:	4620      	mov	r0, r4
 800c398:	f001 ff96 	bl	800e2c8 <__sinit>
 800c39c:	ab05      	add	r3, sp, #20
 800c39e:	9a04      	ldr	r2, [sp, #16]
 800c3a0:	68a1      	ldr	r1, [r4, #8]
 800c3a2:	9301      	str	r3, [sp, #4]
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f003 fa03 	bl	800f7b0 <_vfiprintf_r>
 800c3aa:	b002      	add	sp, #8
 800c3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3b0:	b004      	add	sp, #16
 800c3b2:	4770      	bx	lr
 800c3b4:	2000004c 	.word	0x2000004c

0800c3b8 <_puts_r>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	460e      	mov	r6, r1
 800c3bc:	4605      	mov	r5, r0
 800c3be:	b118      	cbz	r0, 800c3c8 <_puts_r+0x10>
 800c3c0:	6983      	ldr	r3, [r0, #24]
 800c3c2:	b90b      	cbnz	r3, 800c3c8 <_puts_r+0x10>
 800c3c4:	f001 ff80 	bl	800e2c8 <__sinit>
 800c3c8:	69ab      	ldr	r3, [r5, #24]
 800c3ca:	68ac      	ldr	r4, [r5, #8]
 800c3cc:	b913      	cbnz	r3, 800c3d4 <_puts_r+0x1c>
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f001 ff7a 	bl	800e2c8 <__sinit>
 800c3d4:	4b2c      	ldr	r3, [pc, #176]	; (800c488 <_puts_r+0xd0>)
 800c3d6:	429c      	cmp	r4, r3
 800c3d8:	d120      	bne.n	800c41c <_puts_r+0x64>
 800c3da:	686c      	ldr	r4, [r5, #4]
 800c3dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3de:	07db      	lsls	r3, r3, #31
 800c3e0:	d405      	bmi.n	800c3ee <_puts_r+0x36>
 800c3e2:	89a3      	ldrh	r3, [r4, #12]
 800c3e4:	0598      	lsls	r0, r3, #22
 800c3e6:	d402      	bmi.n	800c3ee <_puts_r+0x36>
 800c3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ea:	f002 fb7e 	bl	800eaea <__retarget_lock_acquire_recursive>
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	0719      	lsls	r1, r3, #28
 800c3f2:	d51d      	bpl.n	800c430 <_puts_r+0x78>
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	b1db      	cbz	r3, 800c430 <_puts_r+0x78>
 800c3f8:	3e01      	subs	r6, #1
 800c3fa:	68a3      	ldr	r3, [r4, #8]
 800c3fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c400:	3b01      	subs	r3, #1
 800c402:	60a3      	str	r3, [r4, #8]
 800c404:	bb39      	cbnz	r1, 800c456 <_puts_r+0x9e>
 800c406:	2b00      	cmp	r3, #0
 800c408:	da38      	bge.n	800c47c <_puts_r+0xc4>
 800c40a:	4622      	mov	r2, r4
 800c40c:	210a      	movs	r1, #10
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 ff04 	bl	800d21c <__swbuf_r>
 800c414:	3001      	adds	r0, #1
 800c416:	d011      	beq.n	800c43c <_puts_r+0x84>
 800c418:	250a      	movs	r5, #10
 800c41a:	e011      	b.n	800c440 <_puts_r+0x88>
 800c41c:	4b1b      	ldr	r3, [pc, #108]	; (800c48c <_puts_r+0xd4>)
 800c41e:	429c      	cmp	r4, r3
 800c420:	d101      	bne.n	800c426 <_puts_r+0x6e>
 800c422:	68ac      	ldr	r4, [r5, #8]
 800c424:	e7da      	b.n	800c3dc <_puts_r+0x24>
 800c426:	4b1a      	ldr	r3, [pc, #104]	; (800c490 <_puts_r+0xd8>)
 800c428:	429c      	cmp	r4, r3
 800c42a:	bf08      	it	eq
 800c42c:	68ec      	ldreq	r4, [r5, #12]
 800c42e:	e7d5      	b.n	800c3dc <_puts_r+0x24>
 800c430:	4621      	mov	r1, r4
 800c432:	4628      	mov	r0, r5
 800c434:	f000 ff44 	bl	800d2c0 <__swsetup_r>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d0dd      	beq.n	800c3f8 <_puts_r+0x40>
 800c43c:	f04f 35ff 	mov.w	r5, #4294967295
 800c440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c442:	07da      	lsls	r2, r3, #31
 800c444:	d405      	bmi.n	800c452 <_puts_r+0x9a>
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	059b      	lsls	r3, r3, #22
 800c44a:	d402      	bmi.n	800c452 <_puts_r+0x9a>
 800c44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c44e:	f002 fb4d 	bl	800eaec <__retarget_lock_release_recursive>
 800c452:	4628      	mov	r0, r5
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	2b00      	cmp	r3, #0
 800c458:	da04      	bge.n	800c464 <_puts_r+0xac>
 800c45a:	69a2      	ldr	r2, [r4, #24]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	dc06      	bgt.n	800c46e <_puts_r+0xb6>
 800c460:	290a      	cmp	r1, #10
 800c462:	d004      	beq.n	800c46e <_puts_r+0xb6>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	1c5a      	adds	r2, r3, #1
 800c468:	6022      	str	r2, [r4, #0]
 800c46a:	7019      	strb	r1, [r3, #0]
 800c46c:	e7c5      	b.n	800c3fa <_puts_r+0x42>
 800c46e:	4622      	mov	r2, r4
 800c470:	4628      	mov	r0, r5
 800c472:	f000 fed3 	bl	800d21c <__swbuf_r>
 800c476:	3001      	adds	r0, #1
 800c478:	d1bf      	bne.n	800c3fa <_puts_r+0x42>
 800c47a:	e7df      	b.n	800c43c <_puts_r+0x84>
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	250a      	movs	r5, #10
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	6022      	str	r2, [r4, #0]
 800c484:	701d      	strb	r5, [r3, #0]
 800c486:	e7db      	b.n	800c440 <_puts_r+0x88>
 800c488:	080117d4 	.word	0x080117d4
 800c48c:	080117f4 	.word	0x080117f4
 800c490:	080117b4 	.word	0x080117b4

0800c494 <puts>:
 800c494:	4b02      	ldr	r3, [pc, #8]	; (800c4a0 <puts+0xc>)
 800c496:	4601      	mov	r1, r0
 800c498:	6818      	ldr	r0, [r3, #0]
 800c49a:	f7ff bf8d 	b.w	800c3b8 <_puts_r>
 800c49e:	bf00      	nop
 800c4a0:	2000004c 	.word	0x2000004c

0800c4a4 <sulp>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	ec45 4b10 	vmov	d0, r4, r5
 800c4ae:	4616      	mov	r6, r2
 800c4b0:	f002 ff0e 	bl	800f2d0 <__ulp>
 800c4b4:	ec51 0b10 	vmov	r0, r1, d0
 800c4b8:	b17e      	cbz	r6, 800c4da <sulp+0x36>
 800c4ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dd09      	ble.n	800c4da <sulp+0x36>
 800c4c6:	051b      	lsls	r3, r3, #20
 800c4c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c4cc:	2400      	movs	r4, #0
 800c4ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	f7f4 f8af 	bl	8000638 <__aeabi_dmul>
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	0000      	movs	r0, r0
	...

0800c4e0 <_strtod_l>:
 800c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	ed2d 8b02 	vpush	{d8}
 800c4e8:	b09d      	sub	sp, #116	; 0x74
 800c4ea:	461f      	mov	r7, r3
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	9318      	str	r3, [sp, #96]	; 0x60
 800c4f0:	4ba2      	ldr	r3, [pc, #648]	; (800c77c <_strtod_l+0x29c>)
 800c4f2:	9213      	str	r2, [sp, #76]	; 0x4c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	9305      	str	r3, [sp, #20]
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	4688      	mov	r8, r1
 800c4fe:	f7f3 fe87 	bl	8000210 <strlen>
 800c502:	f04f 0a00 	mov.w	sl, #0
 800c506:	4605      	mov	r5, r0
 800c508:	f04f 0b00 	mov.w	fp, #0
 800c50c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c512:	781a      	ldrb	r2, [r3, #0]
 800c514:	2a2b      	cmp	r2, #43	; 0x2b
 800c516:	d04e      	beq.n	800c5b6 <_strtod_l+0xd6>
 800c518:	d83b      	bhi.n	800c592 <_strtod_l+0xb2>
 800c51a:	2a0d      	cmp	r2, #13
 800c51c:	d834      	bhi.n	800c588 <_strtod_l+0xa8>
 800c51e:	2a08      	cmp	r2, #8
 800c520:	d834      	bhi.n	800c58c <_strtod_l+0xac>
 800c522:	2a00      	cmp	r2, #0
 800c524:	d03e      	beq.n	800c5a4 <_strtod_l+0xc4>
 800c526:	2300      	movs	r3, #0
 800c528:	930a      	str	r3, [sp, #40]	; 0x28
 800c52a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c52c:	7833      	ldrb	r3, [r6, #0]
 800c52e:	2b30      	cmp	r3, #48	; 0x30
 800c530:	f040 80b0 	bne.w	800c694 <_strtod_l+0x1b4>
 800c534:	7873      	ldrb	r3, [r6, #1]
 800c536:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c53a:	2b58      	cmp	r3, #88	; 0x58
 800c53c:	d168      	bne.n	800c610 <_strtod_l+0x130>
 800c53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	ab18      	add	r3, sp, #96	; 0x60
 800c544:	9702      	str	r7, [sp, #8]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	4a8d      	ldr	r2, [pc, #564]	; (800c780 <_strtod_l+0x2a0>)
 800c54a:	ab19      	add	r3, sp, #100	; 0x64
 800c54c:	a917      	add	r1, sp, #92	; 0x5c
 800c54e:	4620      	mov	r0, r4
 800c550:	f001 ffbe 	bl	800e4d0 <__gethex>
 800c554:	f010 0707 	ands.w	r7, r0, #7
 800c558:	4605      	mov	r5, r0
 800c55a:	d005      	beq.n	800c568 <_strtod_l+0x88>
 800c55c:	2f06      	cmp	r7, #6
 800c55e:	d12c      	bne.n	800c5ba <_strtod_l+0xda>
 800c560:	3601      	adds	r6, #1
 800c562:	2300      	movs	r3, #0
 800c564:	9617      	str	r6, [sp, #92]	; 0x5c
 800c566:	930a      	str	r3, [sp, #40]	; 0x28
 800c568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f040 8590 	bne.w	800d090 <_strtod_l+0xbb0>
 800c570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c572:	b1eb      	cbz	r3, 800c5b0 <_strtod_l+0xd0>
 800c574:	4652      	mov	r2, sl
 800c576:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c57a:	ec43 2b10 	vmov	d0, r2, r3
 800c57e:	b01d      	add	sp, #116	; 0x74
 800c580:	ecbd 8b02 	vpop	{d8}
 800c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c588:	2a20      	cmp	r2, #32
 800c58a:	d1cc      	bne.n	800c526 <_strtod_l+0x46>
 800c58c:	3301      	adds	r3, #1
 800c58e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c590:	e7be      	b.n	800c510 <_strtod_l+0x30>
 800c592:	2a2d      	cmp	r2, #45	; 0x2d
 800c594:	d1c7      	bne.n	800c526 <_strtod_l+0x46>
 800c596:	2201      	movs	r2, #1
 800c598:	920a      	str	r2, [sp, #40]	; 0x28
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c59e:	785b      	ldrb	r3, [r3, #1]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1c2      	bne.n	800c52a <_strtod_l+0x4a>
 800c5a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f040 856e 	bne.w	800d08c <_strtod_l+0xbac>
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	465b      	mov	r3, fp
 800c5b4:	e7e1      	b.n	800c57a <_strtod_l+0x9a>
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	e7ee      	b.n	800c598 <_strtod_l+0xb8>
 800c5ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5bc:	b13a      	cbz	r2, 800c5ce <_strtod_l+0xee>
 800c5be:	2135      	movs	r1, #53	; 0x35
 800c5c0:	a81a      	add	r0, sp, #104	; 0x68
 800c5c2:	f002 ff90 	bl	800f4e6 <__copybits>
 800c5c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f002 fb4f 	bl	800ec6c <_Bfree>
 800c5ce:	3f01      	subs	r7, #1
 800c5d0:	2f04      	cmp	r7, #4
 800c5d2:	d806      	bhi.n	800c5e2 <_strtod_l+0x102>
 800c5d4:	e8df f007 	tbb	[pc, r7]
 800c5d8:	1714030a 	.word	0x1714030a
 800c5dc:	0a          	.byte	0x0a
 800c5dd:	00          	.byte	0x00
 800c5de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c5e2:	0728      	lsls	r0, r5, #28
 800c5e4:	d5c0      	bpl.n	800c568 <_strtod_l+0x88>
 800c5e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c5ea:	e7bd      	b.n	800c568 <_strtod_l+0x88>
 800c5ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c5f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c5f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c5f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c5fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5fe:	e7f0      	b.n	800c5e2 <_strtod_l+0x102>
 800c600:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c784 <_strtod_l+0x2a4>
 800c604:	e7ed      	b.n	800c5e2 <_strtod_l+0x102>
 800c606:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c60a:	f04f 3aff 	mov.w	sl, #4294967295
 800c60e:	e7e8      	b.n	800c5e2 <_strtod_l+0x102>
 800c610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c612:	1c5a      	adds	r2, r3, #1
 800c614:	9217      	str	r2, [sp, #92]	; 0x5c
 800c616:	785b      	ldrb	r3, [r3, #1]
 800c618:	2b30      	cmp	r3, #48	; 0x30
 800c61a:	d0f9      	beq.n	800c610 <_strtod_l+0x130>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0a3      	beq.n	800c568 <_strtod_l+0x88>
 800c620:	2301      	movs	r3, #1
 800c622:	f04f 0900 	mov.w	r9, #0
 800c626:	9304      	str	r3, [sp, #16]
 800c628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c62a:	9308      	str	r3, [sp, #32]
 800c62c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c630:	464f      	mov	r7, r9
 800c632:	220a      	movs	r2, #10
 800c634:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c636:	7806      	ldrb	r6, [r0, #0]
 800c638:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c63c:	b2d9      	uxtb	r1, r3
 800c63e:	2909      	cmp	r1, #9
 800c640:	d92a      	bls.n	800c698 <_strtod_l+0x1b8>
 800c642:	9905      	ldr	r1, [sp, #20]
 800c644:	462a      	mov	r2, r5
 800c646:	f003 fa3e 	bl	800fac6 <strncmp>
 800c64a:	b398      	cbz	r0, 800c6b4 <_strtod_l+0x1d4>
 800c64c:	2000      	movs	r0, #0
 800c64e:	4632      	mov	r2, r6
 800c650:	463d      	mov	r5, r7
 800c652:	9005      	str	r0, [sp, #20]
 800c654:	4603      	mov	r3, r0
 800c656:	2a65      	cmp	r2, #101	; 0x65
 800c658:	d001      	beq.n	800c65e <_strtod_l+0x17e>
 800c65a:	2a45      	cmp	r2, #69	; 0x45
 800c65c:	d118      	bne.n	800c690 <_strtod_l+0x1b0>
 800c65e:	b91d      	cbnz	r5, 800c668 <_strtod_l+0x188>
 800c660:	9a04      	ldr	r2, [sp, #16]
 800c662:	4302      	orrs	r2, r0
 800c664:	d09e      	beq.n	800c5a4 <_strtod_l+0xc4>
 800c666:	2500      	movs	r5, #0
 800c668:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c66c:	f108 0201 	add.w	r2, r8, #1
 800c670:	9217      	str	r2, [sp, #92]	; 0x5c
 800c672:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c676:	2a2b      	cmp	r2, #43	; 0x2b
 800c678:	d075      	beq.n	800c766 <_strtod_l+0x286>
 800c67a:	2a2d      	cmp	r2, #45	; 0x2d
 800c67c:	d07b      	beq.n	800c776 <_strtod_l+0x296>
 800c67e:	f04f 0c00 	mov.w	ip, #0
 800c682:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c686:	2909      	cmp	r1, #9
 800c688:	f240 8082 	bls.w	800c790 <_strtod_l+0x2b0>
 800c68c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c690:	2600      	movs	r6, #0
 800c692:	e09d      	b.n	800c7d0 <_strtod_l+0x2f0>
 800c694:	2300      	movs	r3, #0
 800c696:	e7c4      	b.n	800c622 <_strtod_l+0x142>
 800c698:	2f08      	cmp	r7, #8
 800c69a:	bfd8      	it	le
 800c69c:	9907      	ldrle	r1, [sp, #28]
 800c69e:	f100 0001 	add.w	r0, r0, #1
 800c6a2:	bfda      	itte	le
 800c6a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c6a8:	9307      	strle	r3, [sp, #28]
 800c6aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c6ae:	3701      	adds	r7, #1
 800c6b0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c6b2:	e7bf      	b.n	800c634 <_strtod_l+0x154>
 800c6b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6b6:	195a      	adds	r2, r3, r5
 800c6b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6ba:	5d5a      	ldrb	r2, [r3, r5]
 800c6bc:	2f00      	cmp	r7, #0
 800c6be:	d037      	beq.n	800c730 <_strtod_l+0x250>
 800c6c0:	9005      	str	r0, [sp, #20]
 800c6c2:	463d      	mov	r5, r7
 800c6c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c6c8:	2b09      	cmp	r3, #9
 800c6ca:	d912      	bls.n	800c6f2 <_strtod_l+0x212>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e7c2      	b.n	800c656 <_strtod_l+0x176>
 800c6d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6d6:	785a      	ldrb	r2, [r3, #1]
 800c6d8:	3001      	adds	r0, #1
 800c6da:	2a30      	cmp	r2, #48	; 0x30
 800c6dc:	d0f8      	beq.n	800c6d0 <_strtod_l+0x1f0>
 800c6de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c6e2:	2b08      	cmp	r3, #8
 800c6e4:	f200 84d9 	bhi.w	800d09a <_strtod_l+0xbba>
 800c6e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6ea:	9005      	str	r0, [sp, #20]
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	9308      	str	r3, [sp, #32]
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	3a30      	subs	r2, #48	; 0x30
 800c6f4:	f100 0301 	add.w	r3, r0, #1
 800c6f8:	d014      	beq.n	800c724 <_strtod_l+0x244>
 800c6fa:	9905      	ldr	r1, [sp, #20]
 800c6fc:	4419      	add	r1, r3
 800c6fe:	9105      	str	r1, [sp, #20]
 800c700:	462b      	mov	r3, r5
 800c702:	eb00 0e05 	add.w	lr, r0, r5
 800c706:	210a      	movs	r1, #10
 800c708:	4573      	cmp	r3, lr
 800c70a:	d113      	bne.n	800c734 <_strtod_l+0x254>
 800c70c:	182b      	adds	r3, r5, r0
 800c70e:	2b08      	cmp	r3, #8
 800c710:	f105 0501 	add.w	r5, r5, #1
 800c714:	4405      	add	r5, r0
 800c716:	dc1c      	bgt.n	800c752 <_strtod_l+0x272>
 800c718:	9907      	ldr	r1, [sp, #28]
 800c71a:	230a      	movs	r3, #10
 800c71c:	fb03 2301 	mla	r3, r3, r1, r2
 800c720:	9307      	str	r3, [sp, #28]
 800c722:	2300      	movs	r3, #0
 800c724:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c726:	1c51      	adds	r1, r2, #1
 800c728:	9117      	str	r1, [sp, #92]	; 0x5c
 800c72a:	7852      	ldrb	r2, [r2, #1]
 800c72c:	4618      	mov	r0, r3
 800c72e:	e7c9      	b.n	800c6c4 <_strtod_l+0x1e4>
 800c730:	4638      	mov	r0, r7
 800c732:	e7d2      	b.n	800c6da <_strtod_l+0x1fa>
 800c734:	2b08      	cmp	r3, #8
 800c736:	dc04      	bgt.n	800c742 <_strtod_l+0x262>
 800c738:	9e07      	ldr	r6, [sp, #28]
 800c73a:	434e      	muls	r6, r1
 800c73c:	9607      	str	r6, [sp, #28]
 800c73e:	3301      	adds	r3, #1
 800c740:	e7e2      	b.n	800c708 <_strtod_l+0x228>
 800c742:	f103 0c01 	add.w	ip, r3, #1
 800c746:	f1bc 0f10 	cmp.w	ip, #16
 800c74a:	bfd8      	it	le
 800c74c:	fb01 f909 	mulle.w	r9, r1, r9
 800c750:	e7f5      	b.n	800c73e <_strtod_l+0x25e>
 800c752:	2d10      	cmp	r5, #16
 800c754:	bfdc      	itt	le
 800c756:	230a      	movle	r3, #10
 800c758:	fb03 2909 	mlale	r9, r3, r9, r2
 800c75c:	e7e1      	b.n	800c722 <_strtod_l+0x242>
 800c75e:	2300      	movs	r3, #0
 800c760:	9305      	str	r3, [sp, #20]
 800c762:	2301      	movs	r3, #1
 800c764:	e77c      	b.n	800c660 <_strtod_l+0x180>
 800c766:	f04f 0c00 	mov.w	ip, #0
 800c76a:	f108 0202 	add.w	r2, r8, #2
 800c76e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c770:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c774:	e785      	b.n	800c682 <_strtod_l+0x1a2>
 800c776:	f04f 0c01 	mov.w	ip, #1
 800c77a:	e7f6      	b.n	800c76a <_strtod_l+0x28a>
 800c77c:	0801187c 	.word	0x0801187c
 800c780:	080115d0 	.word	0x080115d0
 800c784:	7ff00000 	.word	0x7ff00000
 800c788:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c78a:	1c51      	adds	r1, r2, #1
 800c78c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c78e:	7852      	ldrb	r2, [r2, #1]
 800c790:	2a30      	cmp	r2, #48	; 0x30
 800c792:	d0f9      	beq.n	800c788 <_strtod_l+0x2a8>
 800c794:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c798:	2908      	cmp	r1, #8
 800c79a:	f63f af79 	bhi.w	800c690 <_strtod_l+0x1b0>
 800c79e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c7a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7a4:	9206      	str	r2, [sp, #24]
 800c7a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7a8:	1c51      	adds	r1, r2, #1
 800c7aa:	9117      	str	r1, [sp, #92]	; 0x5c
 800c7ac:	7852      	ldrb	r2, [r2, #1]
 800c7ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c7b2:	2e09      	cmp	r6, #9
 800c7b4:	d937      	bls.n	800c826 <_strtod_l+0x346>
 800c7b6:	9e06      	ldr	r6, [sp, #24]
 800c7b8:	1b89      	subs	r1, r1, r6
 800c7ba:	2908      	cmp	r1, #8
 800c7bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c7c0:	dc02      	bgt.n	800c7c8 <_strtod_l+0x2e8>
 800c7c2:	4576      	cmp	r6, lr
 800c7c4:	bfa8      	it	ge
 800c7c6:	4676      	movge	r6, lr
 800c7c8:	f1bc 0f00 	cmp.w	ip, #0
 800c7cc:	d000      	beq.n	800c7d0 <_strtod_l+0x2f0>
 800c7ce:	4276      	negs	r6, r6
 800c7d0:	2d00      	cmp	r5, #0
 800c7d2:	d14d      	bne.n	800c870 <_strtod_l+0x390>
 800c7d4:	9904      	ldr	r1, [sp, #16]
 800c7d6:	4301      	orrs	r1, r0
 800c7d8:	f47f aec6 	bne.w	800c568 <_strtod_l+0x88>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f47f aee1 	bne.w	800c5a4 <_strtod_l+0xc4>
 800c7e2:	2a69      	cmp	r2, #105	; 0x69
 800c7e4:	d027      	beq.n	800c836 <_strtod_l+0x356>
 800c7e6:	dc24      	bgt.n	800c832 <_strtod_l+0x352>
 800c7e8:	2a49      	cmp	r2, #73	; 0x49
 800c7ea:	d024      	beq.n	800c836 <_strtod_l+0x356>
 800c7ec:	2a4e      	cmp	r2, #78	; 0x4e
 800c7ee:	f47f aed9 	bne.w	800c5a4 <_strtod_l+0xc4>
 800c7f2:	499f      	ldr	r1, [pc, #636]	; (800ca70 <_strtod_l+0x590>)
 800c7f4:	a817      	add	r0, sp, #92	; 0x5c
 800c7f6:	f002 f8c3 	bl	800e980 <__match>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	f43f aed2 	beq.w	800c5a4 <_strtod_l+0xc4>
 800c800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b28      	cmp	r3, #40	; 0x28
 800c806:	d12d      	bne.n	800c864 <_strtod_l+0x384>
 800c808:	499a      	ldr	r1, [pc, #616]	; (800ca74 <_strtod_l+0x594>)
 800c80a:	aa1a      	add	r2, sp, #104	; 0x68
 800c80c:	a817      	add	r0, sp, #92	; 0x5c
 800c80e:	f002 f8cb 	bl	800e9a8 <__hexnan>
 800c812:	2805      	cmp	r0, #5
 800c814:	d126      	bne.n	800c864 <_strtod_l+0x384>
 800c816:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c818:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c81c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c820:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c824:	e6a0      	b.n	800c568 <_strtod_l+0x88>
 800c826:	210a      	movs	r1, #10
 800c828:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c82c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c830:	e7b9      	b.n	800c7a6 <_strtod_l+0x2c6>
 800c832:	2a6e      	cmp	r2, #110	; 0x6e
 800c834:	e7db      	b.n	800c7ee <_strtod_l+0x30e>
 800c836:	4990      	ldr	r1, [pc, #576]	; (800ca78 <_strtod_l+0x598>)
 800c838:	a817      	add	r0, sp, #92	; 0x5c
 800c83a:	f002 f8a1 	bl	800e980 <__match>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f aeb0 	beq.w	800c5a4 <_strtod_l+0xc4>
 800c844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c846:	498d      	ldr	r1, [pc, #564]	; (800ca7c <_strtod_l+0x59c>)
 800c848:	3b01      	subs	r3, #1
 800c84a:	a817      	add	r0, sp, #92	; 0x5c
 800c84c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c84e:	f002 f897 	bl	800e980 <__match>
 800c852:	b910      	cbnz	r0, 800c85a <_strtod_l+0x37a>
 800c854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c856:	3301      	adds	r3, #1
 800c858:	9317      	str	r3, [sp, #92]	; 0x5c
 800c85a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ca8c <_strtod_l+0x5ac>
 800c85e:	f04f 0a00 	mov.w	sl, #0
 800c862:	e681      	b.n	800c568 <_strtod_l+0x88>
 800c864:	4886      	ldr	r0, [pc, #536]	; (800ca80 <_strtod_l+0x5a0>)
 800c866:	f003 f8d3 	bl	800fa10 <nan>
 800c86a:	ec5b ab10 	vmov	sl, fp, d0
 800c86e:	e67b      	b.n	800c568 <_strtod_l+0x88>
 800c870:	9b05      	ldr	r3, [sp, #20]
 800c872:	9807      	ldr	r0, [sp, #28]
 800c874:	1af3      	subs	r3, r6, r3
 800c876:	2f00      	cmp	r7, #0
 800c878:	bf08      	it	eq
 800c87a:	462f      	moveq	r7, r5
 800c87c:	2d10      	cmp	r5, #16
 800c87e:	9306      	str	r3, [sp, #24]
 800c880:	46a8      	mov	r8, r5
 800c882:	bfa8      	it	ge
 800c884:	f04f 0810 	movge.w	r8, #16
 800c888:	f7f3 fe5c 	bl	8000544 <__aeabi_ui2d>
 800c88c:	2d09      	cmp	r5, #9
 800c88e:	4682      	mov	sl, r0
 800c890:	468b      	mov	fp, r1
 800c892:	dd13      	ble.n	800c8bc <_strtod_l+0x3dc>
 800c894:	4b7b      	ldr	r3, [pc, #492]	; (800ca84 <_strtod_l+0x5a4>)
 800c896:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c89a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c89e:	f7f3 fecb 	bl	8000638 <__aeabi_dmul>
 800c8a2:	4682      	mov	sl, r0
 800c8a4:	4648      	mov	r0, r9
 800c8a6:	468b      	mov	fp, r1
 800c8a8:	f7f3 fe4c 	bl	8000544 <__aeabi_ui2d>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4650      	mov	r0, sl
 800c8b2:	4659      	mov	r1, fp
 800c8b4:	f7f3 fd0a 	bl	80002cc <__adddf3>
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	468b      	mov	fp, r1
 800c8bc:	2d0f      	cmp	r5, #15
 800c8be:	dc38      	bgt.n	800c932 <_strtod_l+0x452>
 800c8c0:	9b06      	ldr	r3, [sp, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f43f ae50 	beq.w	800c568 <_strtod_l+0x88>
 800c8c8:	dd24      	ble.n	800c914 <_strtod_l+0x434>
 800c8ca:	2b16      	cmp	r3, #22
 800c8cc:	dc0b      	bgt.n	800c8e6 <_strtod_l+0x406>
 800c8ce:	496d      	ldr	r1, [pc, #436]	; (800ca84 <_strtod_l+0x5a4>)
 800c8d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8d8:	4652      	mov	r2, sl
 800c8da:	465b      	mov	r3, fp
 800c8dc:	f7f3 feac 	bl	8000638 <__aeabi_dmul>
 800c8e0:	4682      	mov	sl, r0
 800c8e2:	468b      	mov	fp, r1
 800c8e4:	e640      	b.n	800c568 <_strtod_l+0x88>
 800c8e6:	9a06      	ldr	r2, [sp, #24]
 800c8e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	db20      	blt.n	800c932 <_strtod_l+0x452>
 800c8f0:	4c64      	ldr	r4, [pc, #400]	; (800ca84 <_strtod_l+0x5a4>)
 800c8f2:	f1c5 050f 	rsb	r5, r5, #15
 800c8f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c8fa:	4652      	mov	r2, sl
 800c8fc:	465b      	mov	r3, fp
 800c8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c902:	f7f3 fe99 	bl	8000638 <__aeabi_dmul>
 800c906:	9b06      	ldr	r3, [sp, #24]
 800c908:	1b5d      	subs	r5, r3, r5
 800c90a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c90e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c912:	e7e3      	b.n	800c8dc <_strtod_l+0x3fc>
 800c914:	9b06      	ldr	r3, [sp, #24]
 800c916:	3316      	adds	r3, #22
 800c918:	db0b      	blt.n	800c932 <_strtod_l+0x452>
 800c91a:	9b05      	ldr	r3, [sp, #20]
 800c91c:	1b9e      	subs	r6, r3, r6
 800c91e:	4b59      	ldr	r3, [pc, #356]	; (800ca84 <_strtod_l+0x5a4>)
 800c920:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c924:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c928:	4650      	mov	r0, sl
 800c92a:	4659      	mov	r1, fp
 800c92c:	f7f3 ffae 	bl	800088c <__aeabi_ddiv>
 800c930:	e7d6      	b.n	800c8e0 <_strtod_l+0x400>
 800c932:	9b06      	ldr	r3, [sp, #24]
 800c934:	eba5 0808 	sub.w	r8, r5, r8
 800c938:	4498      	add	r8, r3
 800c93a:	f1b8 0f00 	cmp.w	r8, #0
 800c93e:	dd74      	ble.n	800ca2a <_strtod_l+0x54a>
 800c940:	f018 030f 	ands.w	r3, r8, #15
 800c944:	d00a      	beq.n	800c95c <_strtod_l+0x47c>
 800c946:	494f      	ldr	r1, [pc, #316]	; (800ca84 <_strtod_l+0x5a4>)
 800c948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c94c:	4652      	mov	r2, sl
 800c94e:	465b      	mov	r3, fp
 800c950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c954:	f7f3 fe70 	bl	8000638 <__aeabi_dmul>
 800c958:	4682      	mov	sl, r0
 800c95a:	468b      	mov	fp, r1
 800c95c:	f038 080f 	bics.w	r8, r8, #15
 800c960:	d04f      	beq.n	800ca02 <_strtod_l+0x522>
 800c962:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c966:	dd22      	ble.n	800c9ae <_strtod_l+0x4ce>
 800c968:	2500      	movs	r5, #0
 800c96a:	462e      	mov	r6, r5
 800c96c:	9507      	str	r5, [sp, #28]
 800c96e:	9505      	str	r5, [sp, #20]
 800c970:	2322      	movs	r3, #34	; 0x22
 800c972:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ca8c <_strtod_l+0x5ac>
 800c976:	6023      	str	r3, [r4, #0]
 800c978:	f04f 0a00 	mov.w	sl, #0
 800c97c:	9b07      	ldr	r3, [sp, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f43f adf2 	beq.w	800c568 <_strtod_l+0x88>
 800c984:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c986:	4620      	mov	r0, r4
 800c988:	f002 f970 	bl	800ec6c <_Bfree>
 800c98c:	9905      	ldr	r1, [sp, #20]
 800c98e:	4620      	mov	r0, r4
 800c990:	f002 f96c 	bl	800ec6c <_Bfree>
 800c994:	4631      	mov	r1, r6
 800c996:	4620      	mov	r0, r4
 800c998:	f002 f968 	bl	800ec6c <_Bfree>
 800c99c:	9907      	ldr	r1, [sp, #28]
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f002 f964 	bl	800ec6c <_Bfree>
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f002 f960 	bl	800ec6c <_Bfree>
 800c9ac:	e5dc      	b.n	800c568 <_strtod_l+0x88>
 800c9ae:	4b36      	ldr	r3, [pc, #216]	; (800ca88 <_strtod_l+0x5a8>)
 800c9b0:	9304      	str	r3, [sp, #16]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	4699      	mov	r9, r3
 800c9be:	f1b8 0f01 	cmp.w	r8, #1
 800c9c2:	dc21      	bgt.n	800ca08 <_strtod_l+0x528>
 800c9c4:	b10b      	cbz	r3, 800c9ca <_strtod_l+0x4ea>
 800c9c6:	4682      	mov	sl, r0
 800c9c8:	468b      	mov	fp, r1
 800c9ca:	4b2f      	ldr	r3, [pc, #188]	; (800ca88 <_strtod_l+0x5a8>)
 800c9cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c9d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c9d4:	4652      	mov	r2, sl
 800c9d6:	465b      	mov	r3, fp
 800c9d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c9dc:	f7f3 fe2c 	bl	8000638 <__aeabi_dmul>
 800c9e0:	4b2a      	ldr	r3, [pc, #168]	; (800ca8c <_strtod_l+0x5ac>)
 800c9e2:	460a      	mov	r2, r1
 800c9e4:	400b      	ands	r3, r1
 800c9e6:	492a      	ldr	r1, [pc, #168]	; (800ca90 <_strtod_l+0x5b0>)
 800c9e8:	428b      	cmp	r3, r1
 800c9ea:	4682      	mov	sl, r0
 800c9ec:	d8bc      	bhi.n	800c968 <_strtod_l+0x488>
 800c9ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c9f2:	428b      	cmp	r3, r1
 800c9f4:	bf86      	itte	hi
 800c9f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ca94 <_strtod_l+0x5b4>
 800c9fa:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ca02:	2300      	movs	r3, #0
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	e084      	b.n	800cb12 <_strtod_l+0x632>
 800ca08:	f018 0f01 	tst.w	r8, #1
 800ca0c:	d005      	beq.n	800ca1a <_strtod_l+0x53a>
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	f7f3 fe10 	bl	8000638 <__aeabi_dmul>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	9a04      	ldr	r2, [sp, #16]
 800ca1c:	3208      	adds	r2, #8
 800ca1e:	f109 0901 	add.w	r9, r9, #1
 800ca22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ca26:	9204      	str	r2, [sp, #16]
 800ca28:	e7c9      	b.n	800c9be <_strtod_l+0x4de>
 800ca2a:	d0ea      	beq.n	800ca02 <_strtod_l+0x522>
 800ca2c:	f1c8 0800 	rsb	r8, r8, #0
 800ca30:	f018 020f 	ands.w	r2, r8, #15
 800ca34:	d00a      	beq.n	800ca4c <_strtod_l+0x56c>
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <_strtod_l+0x5a4>)
 800ca38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca3c:	4650      	mov	r0, sl
 800ca3e:	4659      	mov	r1, fp
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 ff22 	bl	800088c <__aeabi_ddiv>
 800ca48:	4682      	mov	sl, r0
 800ca4a:	468b      	mov	fp, r1
 800ca4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ca50:	d0d7      	beq.n	800ca02 <_strtod_l+0x522>
 800ca52:	f1b8 0f1f 	cmp.w	r8, #31
 800ca56:	dd1f      	ble.n	800ca98 <_strtod_l+0x5b8>
 800ca58:	2500      	movs	r5, #0
 800ca5a:	462e      	mov	r6, r5
 800ca5c:	9507      	str	r5, [sp, #28]
 800ca5e:	9505      	str	r5, [sp, #20]
 800ca60:	2322      	movs	r3, #34	; 0x22
 800ca62:	f04f 0a00 	mov.w	sl, #0
 800ca66:	f04f 0b00 	mov.w	fp, #0
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	e786      	b.n	800c97c <_strtod_l+0x49c>
 800ca6e:	bf00      	nop
 800ca70:	080115a9 	.word	0x080115a9
 800ca74:	080115e4 	.word	0x080115e4
 800ca78:	080115a1 	.word	0x080115a1
 800ca7c:	08011724 	.word	0x08011724
 800ca80:	08011a38 	.word	0x08011a38
 800ca84:	08011918 	.word	0x08011918
 800ca88:	080118f0 	.word	0x080118f0
 800ca8c:	7ff00000 	.word	0x7ff00000
 800ca90:	7ca00000 	.word	0x7ca00000
 800ca94:	7fefffff 	.word	0x7fefffff
 800ca98:	f018 0310 	ands.w	r3, r8, #16
 800ca9c:	bf18      	it	ne
 800ca9e:	236a      	movne	r3, #106	; 0x6a
 800caa0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ce50 <_strtod_l+0x970>
 800caa4:	9304      	str	r3, [sp, #16]
 800caa6:	4650      	mov	r0, sl
 800caa8:	4659      	mov	r1, fp
 800caaa:	2300      	movs	r3, #0
 800caac:	f018 0f01 	tst.w	r8, #1
 800cab0:	d004      	beq.n	800cabc <_strtod_l+0x5dc>
 800cab2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cab6:	f7f3 fdbf 	bl	8000638 <__aeabi_dmul>
 800caba:	2301      	movs	r3, #1
 800cabc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cac0:	f109 0908 	add.w	r9, r9, #8
 800cac4:	d1f2      	bne.n	800caac <_strtod_l+0x5cc>
 800cac6:	b10b      	cbz	r3, 800cacc <_strtod_l+0x5ec>
 800cac8:	4682      	mov	sl, r0
 800caca:	468b      	mov	fp, r1
 800cacc:	9b04      	ldr	r3, [sp, #16]
 800cace:	b1c3      	cbz	r3, 800cb02 <_strtod_l+0x622>
 800cad0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cad4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cad8:	2b00      	cmp	r3, #0
 800cada:	4659      	mov	r1, fp
 800cadc:	dd11      	ble.n	800cb02 <_strtod_l+0x622>
 800cade:	2b1f      	cmp	r3, #31
 800cae0:	f340 8124 	ble.w	800cd2c <_strtod_l+0x84c>
 800cae4:	2b34      	cmp	r3, #52	; 0x34
 800cae6:	bfde      	ittt	le
 800cae8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800caec:	f04f 33ff 	movle.w	r3, #4294967295
 800caf0:	fa03 f202 	lslle.w	r2, r3, r2
 800caf4:	f04f 0a00 	mov.w	sl, #0
 800caf8:	bfcc      	ite	gt
 800cafa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cafe:	ea02 0b01 	andle.w	fp, r2, r1
 800cb02:	2200      	movs	r2, #0
 800cb04:	2300      	movs	r3, #0
 800cb06:	4650      	mov	r0, sl
 800cb08:	4659      	mov	r1, fp
 800cb0a:	f7f3 fffd 	bl	8000b08 <__aeabi_dcmpeq>
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d1a2      	bne.n	800ca58 <_strtod_l+0x578>
 800cb12:	9b07      	ldr	r3, [sp, #28]
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	9908      	ldr	r1, [sp, #32]
 800cb18:	462b      	mov	r3, r5
 800cb1a:	463a      	mov	r2, r7
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f002 f90d 	bl	800ed3c <__s2b>
 800cb22:	9007      	str	r0, [sp, #28]
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f43f af1f 	beq.w	800c968 <_strtod_l+0x488>
 800cb2a:	9b05      	ldr	r3, [sp, #20]
 800cb2c:	1b9e      	subs	r6, r3, r6
 800cb2e:	9b06      	ldr	r3, [sp, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	bfb4      	ite	lt
 800cb34:	4633      	movlt	r3, r6
 800cb36:	2300      	movge	r3, #0
 800cb38:	930c      	str	r3, [sp, #48]	; 0x30
 800cb3a:	9b06      	ldr	r3, [sp, #24]
 800cb3c:	2500      	movs	r5, #0
 800cb3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cb42:	9312      	str	r3, [sp, #72]	; 0x48
 800cb44:	462e      	mov	r6, r5
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	4620      	mov	r0, r4
 800cb4a:	6859      	ldr	r1, [r3, #4]
 800cb4c:	f002 f84e 	bl	800ebec <_Balloc>
 800cb50:	9005      	str	r0, [sp, #20]
 800cb52:	2800      	cmp	r0, #0
 800cb54:	f43f af0c 	beq.w	800c970 <_strtod_l+0x490>
 800cb58:	9b07      	ldr	r3, [sp, #28]
 800cb5a:	691a      	ldr	r2, [r3, #16]
 800cb5c:	3202      	adds	r2, #2
 800cb5e:	f103 010c 	add.w	r1, r3, #12
 800cb62:	0092      	lsls	r2, r2, #2
 800cb64:	300c      	adds	r0, #12
 800cb66:	f7fe ff8f 	bl	800ba88 <memcpy>
 800cb6a:	ec4b ab10 	vmov	d0, sl, fp
 800cb6e:	aa1a      	add	r2, sp, #104	; 0x68
 800cb70:	a919      	add	r1, sp, #100	; 0x64
 800cb72:	4620      	mov	r0, r4
 800cb74:	f002 fc28 	bl	800f3c8 <__d2b>
 800cb78:	ec4b ab18 	vmov	d8, sl, fp
 800cb7c:	9018      	str	r0, [sp, #96]	; 0x60
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	f43f aef6 	beq.w	800c970 <_strtod_l+0x490>
 800cb84:	2101      	movs	r1, #1
 800cb86:	4620      	mov	r0, r4
 800cb88:	f002 f972 	bl	800ee70 <__i2b>
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f43f aeee 	beq.w	800c970 <_strtod_l+0x490>
 800cb94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb96:	9904      	ldr	r1, [sp, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	bfab      	itete	ge
 800cb9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cb9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cba0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cba2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cba6:	bfac      	ite	ge
 800cba8:	eb03 0902 	addge.w	r9, r3, r2
 800cbac:	1ad7      	sublt	r7, r2, r3
 800cbae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cbb0:	eba3 0801 	sub.w	r8, r3, r1
 800cbb4:	4490      	add	r8, r2
 800cbb6:	4ba1      	ldr	r3, [pc, #644]	; (800ce3c <_strtod_l+0x95c>)
 800cbb8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbbc:	4598      	cmp	r8, r3
 800cbbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cbc2:	f280 80c7 	bge.w	800cd54 <_strtod_l+0x874>
 800cbc6:	eba3 0308 	sub.w	r3, r3, r8
 800cbca:	2b1f      	cmp	r3, #31
 800cbcc:	eba2 0203 	sub.w	r2, r2, r3
 800cbd0:	f04f 0101 	mov.w	r1, #1
 800cbd4:	f300 80b1 	bgt.w	800cd3a <_strtod_l+0x85a>
 800cbd8:	fa01 f303 	lsl.w	r3, r1, r3
 800cbdc:	930d      	str	r3, [sp, #52]	; 0x34
 800cbde:	2300      	movs	r3, #0
 800cbe0:	9308      	str	r3, [sp, #32]
 800cbe2:	eb09 0802 	add.w	r8, r9, r2
 800cbe6:	9b04      	ldr	r3, [sp, #16]
 800cbe8:	45c1      	cmp	r9, r8
 800cbea:	4417      	add	r7, r2
 800cbec:	441f      	add	r7, r3
 800cbee:	464b      	mov	r3, r9
 800cbf0:	bfa8      	it	ge
 800cbf2:	4643      	movge	r3, r8
 800cbf4:	42bb      	cmp	r3, r7
 800cbf6:	bfa8      	it	ge
 800cbf8:	463b      	movge	r3, r7
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	bfc2      	ittt	gt
 800cbfe:	eba8 0803 	subgt.w	r8, r8, r3
 800cc02:	1aff      	subgt	r7, r7, r3
 800cc04:	eba9 0903 	subgt.w	r9, r9, r3
 800cc08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dd17      	ble.n	800cc3e <_strtod_l+0x75e>
 800cc0e:	4631      	mov	r1, r6
 800cc10:	461a      	mov	r2, r3
 800cc12:	4620      	mov	r0, r4
 800cc14:	f002 f9ec 	bl	800eff0 <__pow5mult>
 800cc18:	4606      	mov	r6, r0
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	f43f aea8 	beq.w	800c970 <_strtod_l+0x490>
 800cc20:	4601      	mov	r1, r0
 800cc22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc24:	4620      	mov	r0, r4
 800cc26:	f002 f939 	bl	800ee9c <__multiply>
 800cc2a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	f43f ae9f 	beq.w	800c970 <_strtod_l+0x490>
 800cc32:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc34:	4620      	mov	r0, r4
 800cc36:	f002 f819 	bl	800ec6c <_Bfree>
 800cc3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3c:	9318      	str	r3, [sp, #96]	; 0x60
 800cc3e:	f1b8 0f00 	cmp.w	r8, #0
 800cc42:	f300 808c 	bgt.w	800cd5e <_strtod_l+0x87e>
 800cc46:	9b06      	ldr	r3, [sp, #24]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	dd08      	ble.n	800cc5e <_strtod_l+0x77e>
 800cc4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc4e:	9905      	ldr	r1, [sp, #20]
 800cc50:	4620      	mov	r0, r4
 800cc52:	f002 f9cd 	bl	800eff0 <__pow5mult>
 800cc56:	9005      	str	r0, [sp, #20]
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	f43f ae89 	beq.w	800c970 <_strtod_l+0x490>
 800cc5e:	2f00      	cmp	r7, #0
 800cc60:	dd08      	ble.n	800cc74 <_strtod_l+0x794>
 800cc62:	9905      	ldr	r1, [sp, #20]
 800cc64:	463a      	mov	r2, r7
 800cc66:	4620      	mov	r0, r4
 800cc68:	f002 fa1c 	bl	800f0a4 <__lshift>
 800cc6c:	9005      	str	r0, [sp, #20]
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f43f ae7e 	beq.w	800c970 <_strtod_l+0x490>
 800cc74:	f1b9 0f00 	cmp.w	r9, #0
 800cc78:	dd08      	ble.n	800cc8c <_strtod_l+0x7ac>
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	464a      	mov	r2, r9
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f002 fa10 	bl	800f0a4 <__lshift>
 800cc84:	4606      	mov	r6, r0
 800cc86:	2800      	cmp	r0, #0
 800cc88:	f43f ae72 	beq.w	800c970 <_strtod_l+0x490>
 800cc8c:	9a05      	ldr	r2, [sp, #20]
 800cc8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc90:	4620      	mov	r0, r4
 800cc92:	f002 fa93 	bl	800f1bc <__mdiff>
 800cc96:	4605      	mov	r5, r0
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	f43f ae69 	beq.w	800c970 <_strtod_l+0x490>
 800cc9e:	68c3      	ldr	r3, [r0, #12]
 800cca0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cca2:	2300      	movs	r3, #0
 800cca4:	60c3      	str	r3, [r0, #12]
 800cca6:	4631      	mov	r1, r6
 800cca8:	f002 fa6c 	bl	800f184 <__mcmp>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	da60      	bge.n	800cd72 <_strtod_l+0x892>
 800ccb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccb2:	ea53 030a 	orrs.w	r3, r3, sl
 800ccb6:	f040 8082 	bne.w	800cdbe <_strtod_l+0x8de>
 800ccba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d17d      	bne.n	800cdbe <_strtod_l+0x8de>
 800ccc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ccc6:	0d1b      	lsrs	r3, r3, #20
 800ccc8:	051b      	lsls	r3, r3, #20
 800ccca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ccce:	d976      	bls.n	800cdbe <_strtod_l+0x8de>
 800ccd0:	696b      	ldr	r3, [r5, #20]
 800ccd2:	b913      	cbnz	r3, 800ccda <_strtod_l+0x7fa>
 800ccd4:	692b      	ldr	r3, [r5, #16]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	dd71      	ble.n	800cdbe <_strtod_l+0x8de>
 800ccda:	4629      	mov	r1, r5
 800ccdc:	2201      	movs	r2, #1
 800ccde:	4620      	mov	r0, r4
 800cce0:	f002 f9e0 	bl	800f0a4 <__lshift>
 800cce4:	4631      	mov	r1, r6
 800cce6:	4605      	mov	r5, r0
 800cce8:	f002 fa4c 	bl	800f184 <__mcmp>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	dd66      	ble.n	800cdbe <_strtod_l+0x8de>
 800ccf0:	9904      	ldr	r1, [sp, #16]
 800ccf2:	4a53      	ldr	r2, [pc, #332]	; (800ce40 <_strtod_l+0x960>)
 800ccf4:	465b      	mov	r3, fp
 800ccf6:	2900      	cmp	r1, #0
 800ccf8:	f000 8081 	beq.w	800cdfe <_strtod_l+0x91e>
 800ccfc:	ea02 010b 	and.w	r1, r2, fp
 800cd00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cd04:	dc7b      	bgt.n	800cdfe <_strtod_l+0x91e>
 800cd06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cd0a:	f77f aea9 	ble.w	800ca60 <_strtod_l+0x580>
 800cd0e:	4b4d      	ldr	r3, [pc, #308]	; (800ce44 <_strtod_l+0x964>)
 800cd10:	4650      	mov	r0, sl
 800cd12:	4659      	mov	r1, fp
 800cd14:	2200      	movs	r2, #0
 800cd16:	f7f3 fc8f 	bl	8000638 <__aeabi_dmul>
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4303      	orrs	r3, r0
 800cd1e:	bf08      	it	eq
 800cd20:	2322      	moveq	r3, #34	; 0x22
 800cd22:	4682      	mov	sl, r0
 800cd24:	468b      	mov	fp, r1
 800cd26:	bf08      	it	eq
 800cd28:	6023      	streq	r3, [r4, #0]
 800cd2a:	e62b      	b.n	800c984 <_strtod_l+0x4a4>
 800cd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd30:	fa02 f303 	lsl.w	r3, r2, r3
 800cd34:	ea03 0a0a 	and.w	sl, r3, sl
 800cd38:	e6e3      	b.n	800cb02 <_strtod_l+0x622>
 800cd3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cd3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cd42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cd46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cd4a:	fa01 f308 	lsl.w	r3, r1, r8
 800cd4e:	9308      	str	r3, [sp, #32]
 800cd50:	910d      	str	r1, [sp, #52]	; 0x34
 800cd52:	e746      	b.n	800cbe2 <_strtod_l+0x702>
 800cd54:	2300      	movs	r3, #0
 800cd56:	9308      	str	r3, [sp, #32]
 800cd58:	2301      	movs	r3, #1
 800cd5a:	930d      	str	r3, [sp, #52]	; 0x34
 800cd5c:	e741      	b.n	800cbe2 <_strtod_l+0x702>
 800cd5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd60:	4642      	mov	r2, r8
 800cd62:	4620      	mov	r0, r4
 800cd64:	f002 f99e 	bl	800f0a4 <__lshift>
 800cd68:	9018      	str	r0, [sp, #96]	; 0x60
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	f47f af6b 	bne.w	800cc46 <_strtod_l+0x766>
 800cd70:	e5fe      	b.n	800c970 <_strtod_l+0x490>
 800cd72:	465f      	mov	r7, fp
 800cd74:	d16e      	bne.n	800ce54 <_strtod_l+0x974>
 800cd76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd7c:	b342      	cbz	r2, 800cdd0 <_strtod_l+0x8f0>
 800cd7e:	4a32      	ldr	r2, [pc, #200]	; (800ce48 <_strtod_l+0x968>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d128      	bne.n	800cdd6 <_strtod_l+0x8f6>
 800cd84:	9b04      	ldr	r3, [sp, #16]
 800cd86:	4651      	mov	r1, sl
 800cd88:	b1eb      	cbz	r3, 800cdc6 <_strtod_l+0x8e6>
 800cd8a:	4b2d      	ldr	r3, [pc, #180]	; (800ce40 <_strtod_l+0x960>)
 800cd8c:	403b      	ands	r3, r7
 800cd8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd92:	f04f 32ff 	mov.w	r2, #4294967295
 800cd96:	d819      	bhi.n	800cdcc <_strtod_l+0x8ec>
 800cd98:	0d1b      	lsrs	r3, r3, #20
 800cd9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cda2:	4299      	cmp	r1, r3
 800cda4:	d117      	bne.n	800cdd6 <_strtod_l+0x8f6>
 800cda6:	4b29      	ldr	r3, [pc, #164]	; (800ce4c <_strtod_l+0x96c>)
 800cda8:	429f      	cmp	r7, r3
 800cdaa:	d102      	bne.n	800cdb2 <_strtod_l+0x8d2>
 800cdac:	3101      	adds	r1, #1
 800cdae:	f43f addf 	beq.w	800c970 <_strtod_l+0x490>
 800cdb2:	4b23      	ldr	r3, [pc, #140]	; (800ce40 <_strtod_l+0x960>)
 800cdb4:	403b      	ands	r3, r7
 800cdb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cdba:	f04f 0a00 	mov.w	sl, #0
 800cdbe:	9b04      	ldr	r3, [sp, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1a4      	bne.n	800cd0e <_strtod_l+0x82e>
 800cdc4:	e5de      	b.n	800c984 <_strtod_l+0x4a4>
 800cdc6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdca:	e7ea      	b.n	800cda2 <_strtod_l+0x8c2>
 800cdcc:	4613      	mov	r3, r2
 800cdce:	e7e8      	b.n	800cda2 <_strtod_l+0x8c2>
 800cdd0:	ea53 030a 	orrs.w	r3, r3, sl
 800cdd4:	d08c      	beq.n	800ccf0 <_strtod_l+0x810>
 800cdd6:	9b08      	ldr	r3, [sp, #32]
 800cdd8:	b1db      	cbz	r3, 800ce12 <_strtod_l+0x932>
 800cdda:	423b      	tst	r3, r7
 800cddc:	d0ef      	beq.n	800cdbe <_strtod_l+0x8de>
 800cdde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cde0:	9a04      	ldr	r2, [sp, #16]
 800cde2:	4650      	mov	r0, sl
 800cde4:	4659      	mov	r1, fp
 800cde6:	b1c3      	cbz	r3, 800ce1a <_strtod_l+0x93a>
 800cde8:	f7ff fb5c 	bl	800c4a4 <sulp>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	ec51 0b18 	vmov	r0, r1, d8
 800cdf4:	f7f3 fa6a 	bl	80002cc <__adddf3>
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	468b      	mov	fp, r1
 800cdfc:	e7df      	b.n	800cdbe <_strtod_l+0x8de>
 800cdfe:	4013      	ands	r3, r2
 800ce00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ce04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ce08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ce0c:	f04f 3aff 	mov.w	sl, #4294967295
 800ce10:	e7d5      	b.n	800cdbe <_strtod_l+0x8de>
 800ce12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce14:	ea13 0f0a 	tst.w	r3, sl
 800ce18:	e7e0      	b.n	800cddc <_strtod_l+0x8fc>
 800ce1a:	f7ff fb43 	bl	800c4a4 <sulp>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	ec51 0b18 	vmov	r0, r1, d8
 800ce26:	f7f3 fa4f 	bl	80002c8 <__aeabi_dsub>
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	4682      	mov	sl, r0
 800ce30:	468b      	mov	fp, r1
 800ce32:	f7f3 fe69 	bl	8000b08 <__aeabi_dcmpeq>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d0c1      	beq.n	800cdbe <_strtod_l+0x8de>
 800ce3a:	e611      	b.n	800ca60 <_strtod_l+0x580>
 800ce3c:	fffffc02 	.word	0xfffffc02
 800ce40:	7ff00000 	.word	0x7ff00000
 800ce44:	39500000 	.word	0x39500000
 800ce48:	000fffff 	.word	0x000fffff
 800ce4c:	7fefffff 	.word	0x7fefffff
 800ce50:	080115f8 	.word	0x080115f8
 800ce54:	4631      	mov	r1, r6
 800ce56:	4628      	mov	r0, r5
 800ce58:	f002 fb12 	bl	800f480 <__ratio>
 800ce5c:	ec59 8b10 	vmov	r8, r9, d0
 800ce60:	ee10 0a10 	vmov	r0, s0
 800ce64:	2200      	movs	r2, #0
 800ce66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce6a:	4649      	mov	r1, r9
 800ce6c:	f7f3 fe60 	bl	8000b30 <__aeabi_dcmple>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d07a      	beq.n	800cf6a <_strtod_l+0xa8a>
 800ce74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d04a      	beq.n	800cf10 <_strtod_l+0xa30>
 800ce7a:	4b95      	ldr	r3, [pc, #596]	; (800d0d0 <_strtod_l+0xbf0>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ce82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d0d0 <_strtod_l+0xbf0>
 800ce86:	f04f 0800 	mov.w	r8, #0
 800ce8a:	4b92      	ldr	r3, [pc, #584]	; (800d0d4 <_strtod_l+0xbf4>)
 800ce8c:	403b      	ands	r3, r7
 800ce8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ce90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce92:	4b91      	ldr	r3, [pc, #580]	; (800d0d8 <_strtod_l+0xbf8>)
 800ce94:	429a      	cmp	r2, r3
 800ce96:	f040 80b0 	bne.w	800cffa <_strtod_l+0xb1a>
 800ce9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cea2:	ec4b ab10 	vmov	d0, sl, fp
 800cea6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ceaa:	f002 fa11 	bl	800f2d0 <__ulp>
 800ceae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ceb2:	ec53 2b10 	vmov	r2, r3, d0
 800ceb6:	f7f3 fbbf 	bl	8000638 <__aeabi_dmul>
 800ceba:	4652      	mov	r2, sl
 800cebc:	465b      	mov	r3, fp
 800cebe:	f7f3 fa05 	bl	80002cc <__adddf3>
 800cec2:	460b      	mov	r3, r1
 800cec4:	4983      	ldr	r1, [pc, #524]	; (800d0d4 <_strtod_l+0xbf4>)
 800cec6:	4a85      	ldr	r2, [pc, #532]	; (800d0dc <_strtod_l+0xbfc>)
 800cec8:	4019      	ands	r1, r3
 800ceca:	4291      	cmp	r1, r2
 800cecc:	4682      	mov	sl, r0
 800cece:	d960      	bls.n	800cf92 <_strtod_l+0xab2>
 800ced0:	ee18 3a90 	vmov	r3, s17
 800ced4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d104      	bne.n	800cee6 <_strtod_l+0xa06>
 800cedc:	ee18 3a10 	vmov	r3, s16
 800cee0:	3301      	adds	r3, #1
 800cee2:	f43f ad45 	beq.w	800c970 <_strtod_l+0x490>
 800cee6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d0e8 <_strtod_l+0xc08>
 800ceea:	f04f 3aff 	mov.w	sl, #4294967295
 800ceee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cef0:	4620      	mov	r0, r4
 800cef2:	f001 febb 	bl	800ec6c <_Bfree>
 800cef6:	9905      	ldr	r1, [sp, #20]
 800cef8:	4620      	mov	r0, r4
 800cefa:	f001 feb7 	bl	800ec6c <_Bfree>
 800cefe:	4631      	mov	r1, r6
 800cf00:	4620      	mov	r0, r4
 800cf02:	f001 feb3 	bl	800ec6c <_Bfree>
 800cf06:	4629      	mov	r1, r5
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f001 feaf 	bl	800ec6c <_Bfree>
 800cf0e:	e61a      	b.n	800cb46 <_strtod_l+0x666>
 800cf10:	f1ba 0f00 	cmp.w	sl, #0
 800cf14:	d11b      	bne.n	800cf4e <_strtod_l+0xa6e>
 800cf16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf1a:	b9f3      	cbnz	r3, 800cf5a <_strtod_l+0xa7a>
 800cf1c:	4b6c      	ldr	r3, [pc, #432]	; (800d0d0 <_strtod_l+0xbf0>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4640      	mov	r0, r8
 800cf22:	4649      	mov	r1, r9
 800cf24:	f7f3 fdfa 	bl	8000b1c <__aeabi_dcmplt>
 800cf28:	b9d0      	cbnz	r0, 800cf60 <_strtod_l+0xa80>
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	4649      	mov	r1, r9
 800cf2e:	4b6c      	ldr	r3, [pc, #432]	; (800d0e0 <_strtod_l+0xc00>)
 800cf30:	2200      	movs	r2, #0
 800cf32:	f7f3 fb81 	bl	8000638 <__aeabi_dmul>
 800cf36:	4680      	mov	r8, r0
 800cf38:	4689      	mov	r9, r1
 800cf3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cf3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cf42:	9315      	str	r3, [sp, #84]	; 0x54
 800cf44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cf48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cf4c:	e79d      	b.n	800ce8a <_strtod_l+0x9aa>
 800cf4e:	f1ba 0f01 	cmp.w	sl, #1
 800cf52:	d102      	bne.n	800cf5a <_strtod_l+0xa7a>
 800cf54:	2f00      	cmp	r7, #0
 800cf56:	f43f ad83 	beq.w	800ca60 <_strtod_l+0x580>
 800cf5a:	4b62      	ldr	r3, [pc, #392]	; (800d0e4 <_strtod_l+0xc04>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	e78e      	b.n	800ce7e <_strtod_l+0x99e>
 800cf60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d0e0 <_strtod_l+0xc00>
 800cf64:	f04f 0800 	mov.w	r8, #0
 800cf68:	e7e7      	b.n	800cf3a <_strtod_l+0xa5a>
 800cf6a:	4b5d      	ldr	r3, [pc, #372]	; (800d0e0 <_strtod_l+0xc00>)
 800cf6c:	4640      	mov	r0, r8
 800cf6e:	4649      	mov	r1, r9
 800cf70:	2200      	movs	r2, #0
 800cf72:	f7f3 fb61 	bl	8000638 <__aeabi_dmul>
 800cf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf78:	4680      	mov	r8, r0
 800cf7a:	4689      	mov	r9, r1
 800cf7c:	b933      	cbnz	r3, 800cf8c <_strtod_l+0xaac>
 800cf7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf82:	900e      	str	r0, [sp, #56]	; 0x38
 800cf84:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cf8a:	e7dd      	b.n	800cf48 <_strtod_l+0xa68>
 800cf8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cf90:	e7f9      	b.n	800cf86 <_strtod_l+0xaa6>
 800cf92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cf96:	9b04      	ldr	r3, [sp, #16]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1a8      	bne.n	800ceee <_strtod_l+0xa0e>
 800cf9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfa2:	0d1b      	lsrs	r3, r3, #20
 800cfa4:	051b      	lsls	r3, r3, #20
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d1a1      	bne.n	800ceee <_strtod_l+0xa0e>
 800cfaa:	4640      	mov	r0, r8
 800cfac:	4649      	mov	r1, r9
 800cfae:	f7f3 fea3 	bl	8000cf8 <__aeabi_d2lz>
 800cfb2:	f7f3 fb13 	bl	80005dc <__aeabi_l2d>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	4640      	mov	r0, r8
 800cfbc:	4649      	mov	r1, r9
 800cfbe:	f7f3 f983 	bl	80002c8 <__aeabi_dsub>
 800cfc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfc8:	ea43 030a 	orr.w	r3, r3, sl
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	4680      	mov	r8, r0
 800cfd0:	4689      	mov	r9, r1
 800cfd2:	d055      	beq.n	800d080 <_strtod_l+0xba0>
 800cfd4:	a336      	add	r3, pc, #216	; (adr r3, 800d0b0 <_strtod_l+0xbd0>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7f3 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	f47f acd0 	bne.w	800c984 <_strtod_l+0x4a4>
 800cfe4:	a334      	add	r3, pc, #208	; (adr r3, 800d0b8 <_strtod_l+0xbd8>)
 800cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfea:	4640      	mov	r0, r8
 800cfec:	4649      	mov	r1, r9
 800cfee:	f7f3 fdb3 	bl	8000b58 <__aeabi_dcmpgt>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	f43f af7b 	beq.w	800ceee <_strtod_l+0xa0e>
 800cff8:	e4c4      	b.n	800c984 <_strtod_l+0x4a4>
 800cffa:	9b04      	ldr	r3, [sp, #16]
 800cffc:	b333      	cbz	r3, 800d04c <_strtod_l+0xb6c>
 800cffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d000:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d004:	d822      	bhi.n	800d04c <_strtod_l+0xb6c>
 800d006:	a32e      	add	r3, pc, #184	; (adr r3, 800d0c0 <_strtod_l+0xbe0>)
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	4640      	mov	r0, r8
 800d00e:	4649      	mov	r1, r9
 800d010:	f7f3 fd8e 	bl	8000b30 <__aeabi_dcmple>
 800d014:	b1a0      	cbz	r0, 800d040 <_strtod_l+0xb60>
 800d016:	4649      	mov	r1, r9
 800d018:	4640      	mov	r0, r8
 800d01a:	f7f3 fde5 	bl	8000be8 <__aeabi_d2uiz>
 800d01e:	2801      	cmp	r0, #1
 800d020:	bf38      	it	cc
 800d022:	2001      	movcc	r0, #1
 800d024:	f7f3 fa8e 	bl	8000544 <__aeabi_ui2d>
 800d028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d02a:	4680      	mov	r8, r0
 800d02c:	4689      	mov	r9, r1
 800d02e:	bb23      	cbnz	r3, 800d07a <_strtod_l+0xb9a>
 800d030:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d034:	9010      	str	r0, [sp, #64]	; 0x40
 800d036:	9311      	str	r3, [sp, #68]	; 0x44
 800d038:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d03c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d042:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d044:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d048:	1a9b      	subs	r3, r3, r2
 800d04a:	9309      	str	r3, [sp, #36]	; 0x24
 800d04c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d050:	eeb0 0a48 	vmov.f32	s0, s16
 800d054:	eef0 0a68 	vmov.f32	s1, s17
 800d058:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d05c:	f002 f938 	bl	800f2d0 <__ulp>
 800d060:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d064:	ec53 2b10 	vmov	r2, r3, d0
 800d068:	f7f3 fae6 	bl	8000638 <__aeabi_dmul>
 800d06c:	ec53 2b18 	vmov	r2, r3, d8
 800d070:	f7f3 f92c 	bl	80002cc <__adddf3>
 800d074:	4682      	mov	sl, r0
 800d076:	468b      	mov	fp, r1
 800d078:	e78d      	b.n	800cf96 <_strtod_l+0xab6>
 800d07a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d07e:	e7db      	b.n	800d038 <_strtod_l+0xb58>
 800d080:	a311      	add	r3, pc, #68	; (adr r3, 800d0c8 <_strtod_l+0xbe8>)
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	f7f3 fd49 	bl	8000b1c <__aeabi_dcmplt>
 800d08a:	e7b2      	b.n	800cff2 <_strtod_l+0xb12>
 800d08c:	2300      	movs	r3, #0
 800d08e:	930a      	str	r3, [sp, #40]	; 0x28
 800d090:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d094:	6013      	str	r3, [r2, #0]
 800d096:	f7ff ba6b 	b.w	800c570 <_strtod_l+0x90>
 800d09a:	2a65      	cmp	r2, #101	; 0x65
 800d09c:	f43f ab5f 	beq.w	800c75e <_strtod_l+0x27e>
 800d0a0:	2a45      	cmp	r2, #69	; 0x45
 800d0a2:	f43f ab5c 	beq.w	800c75e <_strtod_l+0x27e>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	f7ff bb94 	b.w	800c7d4 <_strtod_l+0x2f4>
 800d0ac:	f3af 8000 	nop.w
 800d0b0:	94a03595 	.word	0x94a03595
 800d0b4:	3fdfffff 	.word	0x3fdfffff
 800d0b8:	35afe535 	.word	0x35afe535
 800d0bc:	3fe00000 	.word	0x3fe00000
 800d0c0:	ffc00000 	.word	0xffc00000
 800d0c4:	41dfffff 	.word	0x41dfffff
 800d0c8:	94a03595 	.word	0x94a03595
 800d0cc:	3fcfffff 	.word	0x3fcfffff
 800d0d0:	3ff00000 	.word	0x3ff00000
 800d0d4:	7ff00000 	.word	0x7ff00000
 800d0d8:	7fe00000 	.word	0x7fe00000
 800d0dc:	7c9fffff 	.word	0x7c9fffff
 800d0e0:	3fe00000 	.word	0x3fe00000
 800d0e4:	bff00000 	.word	0xbff00000
 800d0e8:	7fefffff 	.word	0x7fefffff

0800d0ec <strtod>:
 800d0ec:	460a      	mov	r2, r1
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	4802      	ldr	r0, [pc, #8]	; (800d0fc <strtod+0x10>)
 800d0f2:	4b03      	ldr	r3, [pc, #12]	; (800d100 <strtod+0x14>)
 800d0f4:	6800      	ldr	r0, [r0, #0]
 800d0f6:	f7ff b9f3 	b.w	800c4e0 <_strtod_l>
 800d0fa:	bf00      	nop
 800d0fc:	2000004c 	.word	0x2000004c
 800d100:	200000b4 	.word	0x200000b4

0800d104 <_strtol_l.constprop.0>:
 800d104:	2b01      	cmp	r3, #1
 800d106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d10a:	d001      	beq.n	800d110 <_strtol_l.constprop.0+0xc>
 800d10c:	2b24      	cmp	r3, #36	; 0x24
 800d10e:	d906      	bls.n	800d11e <_strtol_l.constprop.0+0x1a>
 800d110:	f7fe fc90 	bl	800ba34 <__errno>
 800d114:	2316      	movs	r3, #22
 800d116:	6003      	str	r3, [r0, #0]
 800d118:	2000      	movs	r0, #0
 800d11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d204 <_strtol_l.constprop.0+0x100>
 800d122:	460d      	mov	r5, r1
 800d124:	462e      	mov	r6, r5
 800d126:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d12a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d12e:	f017 0708 	ands.w	r7, r7, #8
 800d132:	d1f7      	bne.n	800d124 <_strtol_l.constprop.0+0x20>
 800d134:	2c2d      	cmp	r4, #45	; 0x2d
 800d136:	d132      	bne.n	800d19e <_strtol_l.constprop.0+0x9a>
 800d138:	782c      	ldrb	r4, [r5, #0]
 800d13a:	2701      	movs	r7, #1
 800d13c:	1cb5      	adds	r5, r6, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d05b      	beq.n	800d1fa <_strtol_l.constprop.0+0xf6>
 800d142:	2b10      	cmp	r3, #16
 800d144:	d109      	bne.n	800d15a <_strtol_l.constprop.0+0x56>
 800d146:	2c30      	cmp	r4, #48	; 0x30
 800d148:	d107      	bne.n	800d15a <_strtol_l.constprop.0+0x56>
 800d14a:	782c      	ldrb	r4, [r5, #0]
 800d14c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d150:	2c58      	cmp	r4, #88	; 0x58
 800d152:	d14d      	bne.n	800d1f0 <_strtol_l.constprop.0+0xec>
 800d154:	786c      	ldrb	r4, [r5, #1]
 800d156:	2310      	movs	r3, #16
 800d158:	3502      	adds	r5, #2
 800d15a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d15e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d162:	f04f 0c00 	mov.w	ip, #0
 800d166:	fbb8 f9f3 	udiv	r9, r8, r3
 800d16a:	4666      	mov	r6, ip
 800d16c:	fb03 8a19 	mls	sl, r3, r9, r8
 800d170:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d174:	f1be 0f09 	cmp.w	lr, #9
 800d178:	d816      	bhi.n	800d1a8 <_strtol_l.constprop.0+0xa4>
 800d17a:	4674      	mov	r4, lr
 800d17c:	42a3      	cmp	r3, r4
 800d17e:	dd24      	ble.n	800d1ca <_strtol_l.constprop.0+0xc6>
 800d180:	f1bc 0f00 	cmp.w	ip, #0
 800d184:	db1e      	blt.n	800d1c4 <_strtol_l.constprop.0+0xc0>
 800d186:	45b1      	cmp	r9, r6
 800d188:	d31c      	bcc.n	800d1c4 <_strtol_l.constprop.0+0xc0>
 800d18a:	d101      	bne.n	800d190 <_strtol_l.constprop.0+0x8c>
 800d18c:	45a2      	cmp	sl, r4
 800d18e:	db19      	blt.n	800d1c4 <_strtol_l.constprop.0+0xc0>
 800d190:	fb06 4603 	mla	r6, r6, r3, r4
 800d194:	f04f 0c01 	mov.w	ip, #1
 800d198:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d19c:	e7e8      	b.n	800d170 <_strtol_l.constprop.0+0x6c>
 800d19e:	2c2b      	cmp	r4, #43	; 0x2b
 800d1a0:	bf04      	itt	eq
 800d1a2:	782c      	ldrbeq	r4, [r5, #0]
 800d1a4:	1cb5      	addeq	r5, r6, #2
 800d1a6:	e7ca      	b.n	800d13e <_strtol_l.constprop.0+0x3a>
 800d1a8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d1ac:	f1be 0f19 	cmp.w	lr, #25
 800d1b0:	d801      	bhi.n	800d1b6 <_strtol_l.constprop.0+0xb2>
 800d1b2:	3c37      	subs	r4, #55	; 0x37
 800d1b4:	e7e2      	b.n	800d17c <_strtol_l.constprop.0+0x78>
 800d1b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d1ba:	f1be 0f19 	cmp.w	lr, #25
 800d1be:	d804      	bhi.n	800d1ca <_strtol_l.constprop.0+0xc6>
 800d1c0:	3c57      	subs	r4, #87	; 0x57
 800d1c2:	e7db      	b.n	800d17c <_strtol_l.constprop.0+0x78>
 800d1c4:	f04f 3cff 	mov.w	ip, #4294967295
 800d1c8:	e7e6      	b.n	800d198 <_strtol_l.constprop.0+0x94>
 800d1ca:	f1bc 0f00 	cmp.w	ip, #0
 800d1ce:	da05      	bge.n	800d1dc <_strtol_l.constprop.0+0xd8>
 800d1d0:	2322      	movs	r3, #34	; 0x22
 800d1d2:	6003      	str	r3, [r0, #0]
 800d1d4:	4646      	mov	r6, r8
 800d1d6:	b942      	cbnz	r2, 800d1ea <_strtol_l.constprop.0+0xe6>
 800d1d8:	4630      	mov	r0, r6
 800d1da:	e79e      	b.n	800d11a <_strtol_l.constprop.0+0x16>
 800d1dc:	b107      	cbz	r7, 800d1e0 <_strtol_l.constprop.0+0xdc>
 800d1de:	4276      	negs	r6, r6
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	d0f9      	beq.n	800d1d8 <_strtol_l.constprop.0+0xd4>
 800d1e4:	f1bc 0f00 	cmp.w	ip, #0
 800d1e8:	d000      	beq.n	800d1ec <_strtol_l.constprop.0+0xe8>
 800d1ea:	1e69      	subs	r1, r5, #1
 800d1ec:	6011      	str	r1, [r2, #0]
 800d1ee:	e7f3      	b.n	800d1d8 <_strtol_l.constprop.0+0xd4>
 800d1f0:	2430      	movs	r4, #48	; 0x30
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1b1      	bne.n	800d15a <_strtol_l.constprop.0+0x56>
 800d1f6:	2308      	movs	r3, #8
 800d1f8:	e7af      	b.n	800d15a <_strtol_l.constprop.0+0x56>
 800d1fa:	2c30      	cmp	r4, #48	; 0x30
 800d1fc:	d0a5      	beq.n	800d14a <_strtol_l.constprop.0+0x46>
 800d1fe:	230a      	movs	r3, #10
 800d200:	e7ab      	b.n	800d15a <_strtol_l.constprop.0+0x56>
 800d202:	bf00      	nop
 800d204:	08011621 	.word	0x08011621

0800d208 <strtol>:
 800d208:	4613      	mov	r3, r2
 800d20a:	460a      	mov	r2, r1
 800d20c:	4601      	mov	r1, r0
 800d20e:	4802      	ldr	r0, [pc, #8]	; (800d218 <strtol+0x10>)
 800d210:	6800      	ldr	r0, [r0, #0]
 800d212:	f7ff bf77 	b.w	800d104 <_strtol_l.constprop.0>
 800d216:	bf00      	nop
 800d218:	2000004c 	.word	0x2000004c

0800d21c <__swbuf_r>:
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	460e      	mov	r6, r1
 800d220:	4614      	mov	r4, r2
 800d222:	4605      	mov	r5, r0
 800d224:	b118      	cbz	r0, 800d22e <__swbuf_r+0x12>
 800d226:	6983      	ldr	r3, [r0, #24]
 800d228:	b90b      	cbnz	r3, 800d22e <__swbuf_r+0x12>
 800d22a:	f001 f84d 	bl	800e2c8 <__sinit>
 800d22e:	4b21      	ldr	r3, [pc, #132]	; (800d2b4 <__swbuf_r+0x98>)
 800d230:	429c      	cmp	r4, r3
 800d232:	d12b      	bne.n	800d28c <__swbuf_r+0x70>
 800d234:	686c      	ldr	r4, [r5, #4]
 800d236:	69a3      	ldr	r3, [r4, #24]
 800d238:	60a3      	str	r3, [r4, #8]
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	071a      	lsls	r2, r3, #28
 800d23e:	d52f      	bpl.n	800d2a0 <__swbuf_r+0x84>
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	b36b      	cbz	r3, 800d2a0 <__swbuf_r+0x84>
 800d244:	6923      	ldr	r3, [r4, #16]
 800d246:	6820      	ldr	r0, [r4, #0]
 800d248:	1ac0      	subs	r0, r0, r3
 800d24a:	6963      	ldr	r3, [r4, #20]
 800d24c:	b2f6      	uxtb	r6, r6
 800d24e:	4283      	cmp	r3, r0
 800d250:	4637      	mov	r7, r6
 800d252:	dc04      	bgt.n	800d25e <__swbuf_r+0x42>
 800d254:	4621      	mov	r1, r4
 800d256:	4628      	mov	r0, r5
 800d258:	f000 ffa2 	bl	800e1a0 <_fflush_r>
 800d25c:	bb30      	cbnz	r0, 800d2ac <__swbuf_r+0x90>
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	3b01      	subs	r3, #1
 800d262:	60a3      	str	r3, [r4, #8]
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	6022      	str	r2, [r4, #0]
 800d26a:	701e      	strb	r6, [r3, #0]
 800d26c:	6963      	ldr	r3, [r4, #20]
 800d26e:	3001      	adds	r0, #1
 800d270:	4283      	cmp	r3, r0
 800d272:	d004      	beq.n	800d27e <__swbuf_r+0x62>
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	07db      	lsls	r3, r3, #31
 800d278:	d506      	bpl.n	800d288 <__swbuf_r+0x6c>
 800d27a:	2e0a      	cmp	r6, #10
 800d27c:	d104      	bne.n	800d288 <__swbuf_r+0x6c>
 800d27e:	4621      	mov	r1, r4
 800d280:	4628      	mov	r0, r5
 800d282:	f000 ff8d 	bl	800e1a0 <_fflush_r>
 800d286:	b988      	cbnz	r0, 800d2ac <__swbuf_r+0x90>
 800d288:	4638      	mov	r0, r7
 800d28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d28c:	4b0a      	ldr	r3, [pc, #40]	; (800d2b8 <__swbuf_r+0x9c>)
 800d28e:	429c      	cmp	r4, r3
 800d290:	d101      	bne.n	800d296 <__swbuf_r+0x7a>
 800d292:	68ac      	ldr	r4, [r5, #8]
 800d294:	e7cf      	b.n	800d236 <__swbuf_r+0x1a>
 800d296:	4b09      	ldr	r3, [pc, #36]	; (800d2bc <__swbuf_r+0xa0>)
 800d298:	429c      	cmp	r4, r3
 800d29a:	bf08      	it	eq
 800d29c:	68ec      	ldreq	r4, [r5, #12]
 800d29e:	e7ca      	b.n	800d236 <__swbuf_r+0x1a>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f80c 	bl	800d2c0 <__swsetup_r>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d0cb      	beq.n	800d244 <__swbuf_r+0x28>
 800d2ac:	f04f 37ff 	mov.w	r7, #4294967295
 800d2b0:	e7ea      	b.n	800d288 <__swbuf_r+0x6c>
 800d2b2:	bf00      	nop
 800d2b4:	080117d4 	.word	0x080117d4
 800d2b8:	080117f4 	.word	0x080117f4
 800d2bc:	080117b4 	.word	0x080117b4

0800d2c0 <__swsetup_r>:
 800d2c0:	4b32      	ldr	r3, [pc, #200]	; (800d38c <__swsetup_r+0xcc>)
 800d2c2:	b570      	push	{r4, r5, r6, lr}
 800d2c4:	681d      	ldr	r5, [r3, #0]
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	b125      	cbz	r5, 800d2d6 <__swsetup_r+0x16>
 800d2cc:	69ab      	ldr	r3, [r5, #24]
 800d2ce:	b913      	cbnz	r3, 800d2d6 <__swsetup_r+0x16>
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	f000 fff9 	bl	800e2c8 <__sinit>
 800d2d6:	4b2e      	ldr	r3, [pc, #184]	; (800d390 <__swsetup_r+0xd0>)
 800d2d8:	429c      	cmp	r4, r3
 800d2da:	d10f      	bne.n	800d2fc <__swsetup_r+0x3c>
 800d2dc:	686c      	ldr	r4, [r5, #4]
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2e4:	0719      	lsls	r1, r3, #28
 800d2e6:	d42c      	bmi.n	800d342 <__swsetup_r+0x82>
 800d2e8:	06dd      	lsls	r5, r3, #27
 800d2ea:	d411      	bmi.n	800d310 <__swsetup_r+0x50>
 800d2ec:	2309      	movs	r3, #9
 800d2ee:	6033      	str	r3, [r6, #0]
 800d2f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2f4:	81a3      	strh	r3, [r4, #12]
 800d2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fa:	e03e      	b.n	800d37a <__swsetup_r+0xba>
 800d2fc:	4b25      	ldr	r3, [pc, #148]	; (800d394 <__swsetup_r+0xd4>)
 800d2fe:	429c      	cmp	r4, r3
 800d300:	d101      	bne.n	800d306 <__swsetup_r+0x46>
 800d302:	68ac      	ldr	r4, [r5, #8]
 800d304:	e7eb      	b.n	800d2de <__swsetup_r+0x1e>
 800d306:	4b24      	ldr	r3, [pc, #144]	; (800d398 <__swsetup_r+0xd8>)
 800d308:	429c      	cmp	r4, r3
 800d30a:	bf08      	it	eq
 800d30c:	68ec      	ldreq	r4, [r5, #12]
 800d30e:	e7e6      	b.n	800d2de <__swsetup_r+0x1e>
 800d310:	0758      	lsls	r0, r3, #29
 800d312:	d512      	bpl.n	800d33a <__swsetup_r+0x7a>
 800d314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d316:	b141      	cbz	r1, 800d32a <__swsetup_r+0x6a>
 800d318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d31c:	4299      	cmp	r1, r3
 800d31e:	d002      	beq.n	800d326 <__swsetup_r+0x66>
 800d320:	4630      	mov	r0, r6
 800d322:	f002 f93b 	bl	800f59c <_free_r>
 800d326:	2300      	movs	r3, #0
 800d328:	6363      	str	r3, [r4, #52]	; 0x34
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d330:	81a3      	strh	r3, [r4, #12]
 800d332:	2300      	movs	r3, #0
 800d334:	6063      	str	r3, [r4, #4]
 800d336:	6923      	ldr	r3, [r4, #16]
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	f043 0308 	orr.w	r3, r3, #8
 800d340:	81a3      	strh	r3, [r4, #12]
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	b94b      	cbnz	r3, 800d35a <__swsetup_r+0x9a>
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d350:	d003      	beq.n	800d35a <__swsetup_r+0x9a>
 800d352:	4621      	mov	r1, r4
 800d354:	4630      	mov	r0, r6
 800d356:	f001 fbef 	bl	800eb38 <__smakebuf_r>
 800d35a:	89a0      	ldrh	r0, [r4, #12]
 800d35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d360:	f010 0301 	ands.w	r3, r0, #1
 800d364:	d00a      	beq.n	800d37c <__swsetup_r+0xbc>
 800d366:	2300      	movs	r3, #0
 800d368:	60a3      	str	r3, [r4, #8]
 800d36a:	6963      	ldr	r3, [r4, #20]
 800d36c:	425b      	negs	r3, r3
 800d36e:	61a3      	str	r3, [r4, #24]
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	b943      	cbnz	r3, 800d386 <__swsetup_r+0xc6>
 800d374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d378:	d1ba      	bne.n	800d2f0 <__swsetup_r+0x30>
 800d37a:	bd70      	pop	{r4, r5, r6, pc}
 800d37c:	0781      	lsls	r1, r0, #30
 800d37e:	bf58      	it	pl
 800d380:	6963      	ldrpl	r3, [r4, #20]
 800d382:	60a3      	str	r3, [r4, #8]
 800d384:	e7f4      	b.n	800d370 <__swsetup_r+0xb0>
 800d386:	2000      	movs	r0, #0
 800d388:	e7f7      	b.n	800d37a <__swsetup_r+0xba>
 800d38a:	bf00      	nop
 800d38c:	2000004c 	.word	0x2000004c
 800d390:	080117d4 	.word	0x080117d4
 800d394:	080117f4 	.word	0x080117f4
 800d398:	080117b4 	.word	0x080117b4

0800d39c <quorem>:
 800d39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	6903      	ldr	r3, [r0, #16]
 800d3a2:	690c      	ldr	r4, [r1, #16]
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	f2c0 8081 	blt.w	800d4ae <quorem+0x112>
 800d3ac:	3c01      	subs	r4, #1
 800d3ae:	f101 0814 	add.w	r8, r1, #20
 800d3b2:	f100 0514 	add.w	r5, r0, #20
 800d3b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3d4:	d331      	bcc.n	800d43a <quorem+0x9e>
 800d3d6:	f04f 0e00 	mov.w	lr, #0
 800d3da:	4640      	mov	r0, r8
 800d3dc:	46ac      	mov	ip, r5
 800d3de:	46f2      	mov	sl, lr
 800d3e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3e4:	b293      	uxth	r3, r2
 800d3e6:	fb06 e303 	mla	r3, r6, r3, lr
 800d3ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ebaa 0303 	sub.w	r3, sl, r3
 800d3f4:	f8dc a000 	ldr.w	sl, [ip]
 800d3f8:	0c12      	lsrs	r2, r2, #16
 800d3fa:	fa13 f38a 	uxtah	r3, r3, sl
 800d3fe:	fb06 e202 	mla	r2, r6, r2, lr
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	9b00      	ldr	r3, [sp, #0]
 800d406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d40a:	b292      	uxth	r2, r2
 800d40c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d414:	f8bd 3000 	ldrh.w	r3, [sp]
 800d418:	4581      	cmp	r9, r0
 800d41a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d41e:	f84c 3b04 	str.w	r3, [ip], #4
 800d422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d426:	d2db      	bcs.n	800d3e0 <quorem+0x44>
 800d428:	f855 300b 	ldr.w	r3, [r5, fp]
 800d42c:	b92b      	cbnz	r3, 800d43a <quorem+0x9e>
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	3b04      	subs	r3, #4
 800d432:	429d      	cmp	r5, r3
 800d434:	461a      	mov	r2, r3
 800d436:	d32e      	bcc.n	800d496 <quorem+0xfa>
 800d438:	613c      	str	r4, [r7, #16]
 800d43a:	4638      	mov	r0, r7
 800d43c:	f001 fea2 	bl	800f184 <__mcmp>
 800d440:	2800      	cmp	r0, #0
 800d442:	db24      	blt.n	800d48e <quorem+0xf2>
 800d444:	3601      	adds	r6, #1
 800d446:	4628      	mov	r0, r5
 800d448:	f04f 0c00 	mov.w	ip, #0
 800d44c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d450:	f8d0 e000 	ldr.w	lr, [r0]
 800d454:	b293      	uxth	r3, r2
 800d456:	ebac 0303 	sub.w	r3, ip, r3
 800d45a:	0c12      	lsrs	r2, r2, #16
 800d45c:	fa13 f38e 	uxtah	r3, r3, lr
 800d460:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d468:	b29b      	uxth	r3, r3
 800d46a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d46e:	45c1      	cmp	r9, r8
 800d470:	f840 3b04 	str.w	r3, [r0], #4
 800d474:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d478:	d2e8      	bcs.n	800d44c <quorem+0xb0>
 800d47a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d47e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d482:	b922      	cbnz	r2, 800d48e <quorem+0xf2>
 800d484:	3b04      	subs	r3, #4
 800d486:	429d      	cmp	r5, r3
 800d488:	461a      	mov	r2, r3
 800d48a:	d30a      	bcc.n	800d4a2 <quorem+0x106>
 800d48c:	613c      	str	r4, [r7, #16]
 800d48e:	4630      	mov	r0, r6
 800d490:	b003      	add	sp, #12
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d496:	6812      	ldr	r2, [r2, #0]
 800d498:	3b04      	subs	r3, #4
 800d49a:	2a00      	cmp	r2, #0
 800d49c:	d1cc      	bne.n	800d438 <quorem+0x9c>
 800d49e:	3c01      	subs	r4, #1
 800d4a0:	e7c7      	b.n	800d432 <quorem+0x96>
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	2a00      	cmp	r2, #0
 800d4a8:	d1f0      	bne.n	800d48c <quorem+0xf0>
 800d4aa:	3c01      	subs	r4, #1
 800d4ac:	e7eb      	b.n	800d486 <quorem+0xea>
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	e7ee      	b.n	800d490 <quorem+0xf4>
 800d4b2:	0000      	movs	r0, r0
 800d4b4:	0000      	movs	r0, r0
	...

0800d4b8 <_dtoa_r>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	ed2d 8b04 	vpush	{d8-d9}
 800d4c0:	ec57 6b10 	vmov	r6, r7, d0
 800d4c4:	b093      	sub	sp, #76	; 0x4c
 800d4c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4cc:	9106      	str	r1, [sp, #24]
 800d4ce:	ee10 aa10 	vmov	sl, s0
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d4d8:	46bb      	mov	fp, r7
 800d4da:	b975      	cbnz	r5, 800d4fa <_dtoa_r+0x42>
 800d4dc:	2010      	movs	r0, #16
 800d4de:	f001 fb6b 	bl	800ebb8 <malloc>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	6260      	str	r0, [r4, #36]	; 0x24
 800d4e6:	b920      	cbnz	r0, 800d4f2 <_dtoa_r+0x3a>
 800d4e8:	4ba7      	ldr	r3, [pc, #668]	; (800d788 <_dtoa_r+0x2d0>)
 800d4ea:	21ea      	movs	r1, #234	; 0xea
 800d4ec:	48a7      	ldr	r0, [pc, #668]	; (800d78c <_dtoa_r+0x2d4>)
 800d4ee:	f002 fb1d 	bl	800fb2c <__assert_func>
 800d4f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4f6:	6005      	str	r5, [r0, #0]
 800d4f8:	60c5      	str	r5, [r0, #12]
 800d4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4fc:	6819      	ldr	r1, [r3, #0]
 800d4fe:	b151      	cbz	r1, 800d516 <_dtoa_r+0x5e>
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	604a      	str	r2, [r1, #4]
 800d504:	2301      	movs	r3, #1
 800d506:	4093      	lsls	r3, r2
 800d508:	608b      	str	r3, [r1, #8]
 800d50a:	4620      	mov	r0, r4
 800d50c:	f001 fbae 	bl	800ec6c <_Bfree>
 800d510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d512:	2200      	movs	r2, #0
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	1e3b      	subs	r3, r7, #0
 800d518:	bfaa      	itet	ge
 800d51a:	2300      	movge	r3, #0
 800d51c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d520:	f8c8 3000 	strge.w	r3, [r8]
 800d524:	4b9a      	ldr	r3, [pc, #616]	; (800d790 <_dtoa_r+0x2d8>)
 800d526:	bfbc      	itt	lt
 800d528:	2201      	movlt	r2, #1
 800d52a:	f8c8 2000 	strlt.w	r2, [r8]
 800d52e:	ea33 030b 	bics.w	r3, r3, fp
 800d532:	d11b      	bne.n	800d56c <_dtoa_r+0xb4>
 800d534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d536:	f242 730f 	movw	r3, #9999	; 0x270f
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d540:	4333      	orrs	r3, r6
 800d542:	f000 8592 	beq.w	800e06a <_dtoa_r+0xbb2>
 800d546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d548:	b963      	cbnz	r3, 800d564 <_dtoa_r+0xac>
 800d54a:	4b92      	ldr	r3, [pc, #584]	; (800d794 <_dtoa_r+0x2dc>)
 800d54c:	e022      	b.n	800d594 <_dtoa_r+0xdc>
 800d54e:	4b92      	ldr	r3, [pc, #584]	; (800d798 <_dtoa_r+0x2e0>)
 800d550:	9301      	str	r3, [sp, #4]
 800d552:	3308      	adds	r3, #8
 800d554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	9801      	ldr	r0, [sp, #4]
 800d55a:	b013      	add	sp, #76	; 0x4c
 800d55c:	ecbd 8b04 	vpop	{d8-d9}
 800d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d564:	4b8b      	ldr	r3, [pc, #556]	; (800d794 <_dtoa_r+0x2dc>)
 800d566:	9301      	str	r3, [sp, #4]
 800d568:	3303      	adds	r3, #3
 800d56a:	e7f3      	b.n	800d554 <_dtoa_r+0x9c>
 800d56c:	2200      	movs	r2, #0
 800d56e:	2300      	movs	r3, #0
 800d570:	4650      	mov	r0, sl
 800d572:	4659      	mov	r1, fp
 800d574:	f7f3 fac8 	bl	8000b08 <__aeabi_dcmpeq>
 800d578:	ec4b ab19 	vmov	d9, sl, fp
 800d57c:	4680      	mov	r8, r0
 800d57e:	b158      	cbz	r0, 800d598 <_dtoa_r+0xe0>
 800d580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d582:	2301      	movs	r3, #1
 800d584:	6013      	str	r3, [r2, #0]
 800d586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 856b 	beq.w	800e064 <_dtoa_r+0xbac>
 800d58e:	4883      	ldr	r0, [pc, #524]	; (800d79c <_dtoa_r+0x2e4>)
 800d590:	6018      	str	r0, [r3, #0]
 800d592:	1e43      	subs	r3, r0, #1
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	e7df      	b.n	800d558 <_dtoa_r+0xa0>
 800d598:	ec4b ab10 	vmov	d0, sl, fp
 800d59c:	aa10      	add	r2, sp, #64	; 0x40
 800d59e:	a911      	add	r1, sp, #68	; 0x44
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f001 ff11 	bl	800f3c8 <__d2b>
 800d5a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d5aa:	ee08 0a10 	vmov	s16, r0
 800d5ae:	2d00      	cmp	r5, #0
 800d5b0:	f000 8084 	beq.w	800d6bc <_dtoa_r+0x204>
 800d5b4:	ee19 3a90 	vmov	r3, s19
 800d5b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5c0:	4656      	mov	r6, sl
 800d5c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5ce:	4b74      	ldr	r3, [pc, #464]	; (800d7a0 <_dtoa_r+0x2e8>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	f7f2 fe77 	bl	80002c8 <__aeabi_dsub>
 800d5da:	a365      	add	r3, pc, #404	; (adr r3, 800d770 <_dtoa_r+0x2b8>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f3 f82a 	bl	8000638 <__aeabi_dmul>
 800d5e4:	a364      	add	r3, pc, #400	; (adr r3, 800d778 <_dtoa_r+0x2c0>)
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	f7f2 fe6f 	bl	80002cc <__adddf3>
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	460f      	mov	r7, r1
 800d5f4:	f7f2 ffb6 	bl	8000564 <__aeabi_i2d>
 800d5f8:	a361      	add	r3, pc, #388	; (adr r3, 800d780 <_dtoa_r+0x2c8>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f3 f81b 	bl	8000638 <__aeabi_dmul>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4630      	mov	r0, r6
 800d608:	4639      	mov	r1, r7
 800d60a:	f7f2 fe5f 	bl	80002cc <__adddf3>
 800d60e:	4606      	mov	r6, r0
 800d610:	460f      	mov	r7, r1
 800d612:	f7f3 fac1 	bl	8000b98 <__aeabi_d2iz>
 800d616:	2200      	movs	r2, #0
 800d618:	9000      	str	r0, [sp, #0]
 800d61a:	2300      	movs	r3, #0
 800d61c:	4630      	mov	r0, r6
 800d61e:	4639      	mov	r1, r7
 800d620:	f7f3 fa7c 	bl	8000b1c <__aeabi_dcmplt>
 800d624:	b150      	cbz	r0, 800d63c <_dtoa_r+0x184>
 800d626:	9800      	ldr	r0, [sp, #0]
 800d628:	f7f2 ff9c 	bl	8000564 <__aeabi_i2d>
 800d62c:	4632      	mov	r2, r6
 800d62e:	463b      	mov	r3, r7
 800d630:	f7f3 fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 800d634:	b910      	cbnz	r0, 800d63c <_dtoa_r+0x184>
 800d636:	9b00      	ldr	r3, [sp, #0]
 800d638:	3b01      	subs	r3, #1
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	9b00      	ldr	r3, [sp, #0]
 800d63e:	2b16      	cmp	r3, #22
 800d640:	d85a      	bhi.n	800d6f8 <_dtoa_r+0x240>
 800d642:	9a00      	ldr	r2, [sp, #0]
 800d644:	4b57      	ldr	r3, [pc, #348]	; (800d7a4 <_dtoa_r+0x2ec>)
 800d646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64e:	ec51 0b19 	vmov	r0, r1, d9
 800d652:	f7f3 fa63 	bl	8000b1c <__aeabi_dcmplt>
 800d656:	2800      	cmp	r0, #0
 800d658:	d050      	beq.n	800d6fc <_dtoa_r+0x244>
 800d65a:	9b00      	ldr	r3, [sp, #0]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	2300      	movs	r3, #0
 800d662:	930b      	str	r3, [sp, #44]	; 0x2c
 800d664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d666:	1b5d      	subs	r5, r3, r5
 800d668:	1e6b      	subs	r3, r5, #1
 800d66a:	9305      	str	r3, [sp, #20]
 800d66c:	bf45      	ittet	mi
 800d66e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d672:	9304      	strmi	r3, [sp, #16]
 800d674:	2300      	movpl	r3, #0
 800d676:	2300      	movmi	r3, #0
 800d678:	bf4c      	ite	mi
 800d67a:	9305      	strmi	r3, [sp, #20]
 800d67c:	9304      	strpl	r3, [sp, #16]
 800d67e:	9b00      	ldr	r3, [sp, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	db3d      	blt.n	800d700 <_dtoa_r+0x248>
 800d684:	9b05      	ldr	r3, [sp, #20]
 800d686:	9a00      	ldr	r2, [sp, #0]
 800d688:	920a      	str	r2, [sp, #40]	; 0x28
 800d68a:	4413      	add	r3, r2
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	2300      	movs	r3, #0
 800d690:	9307      	str	r3, [sp, #28]
 800d692:	9b06      	ldr	r3, [sp, #24]
 800d694:	2b09      	cmp	r3, #9
 800d696:	f200 8089 	bhi.w	800d7ac <_dtoa_r+0x2f4>
 800d69a:	2b05      	cmp	r3, #5
 800d69c:	bfc4      	itt	gt
 800d69e:	3b04      	subgt	r3, #4
 800d6a0:	9306      	strgt	r3, [sp, #24]
 800d6a2:	9b06      	ldr	r3, [sp, #24]
 800d6a4:	f1a3 0302 	sub.w	r3, r3, #2
 800d6a8:	bfcc      	ite	gt
 800d6aa:	2500      	movgt	r5, #0
 800d6ac:	2501      	movle	r5, #1
 800d6ae:	2b03      	cmp	r3, #3
 800d6b0:	f200 8087 	bhi.w	800d7c2 <_dtoa_r+0x30a>
 800d6b4:	e8df f003 	tbb	[pc, r3]
 800d6b8:	59383a2d 	.word	0x59383a2d
 800d6bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d6c0:	441d      	add	r5, r3
 800d6c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6c6:	2b20      	cmp	r3, #32
 800d6c8:	bfc1      	itttt	gt
 800d6ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6da:	bfda      	itte	le
 800d6dc:	f1c3 0320 	rsble	r3, r3, #32
 800d6e0:	fa06 f003 	lslle.w	r0, r6, r3
 800d6e4:	4318      	orrgt	r0, r3
 800d6e6:	f7f2 ff2d 	bl	8000544 <__aeabi_ui2d>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6f2:	3d01      	subs	r5, #1
 800d6f4:	930e      	str	r3, [sp, #56]	; 0x38
 800d6f6:	e76a      	b.n	800d5ce <_dtoa_r+0x116>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e7b2      	b.n	800d662 <_dtoa_r+0x1aa>
 800d6fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6fe:	e7b1      	b.n	800d664 <_dtoa_r+0x1ac>
 800d700:	9b04      	ldr	r3, [sp, #16]
 800d702:	9a00      	ldr	r2, [sp, #0]
 800d704:	1a9b      	subs	r3, r3, r2
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	4253      	negs	r3, r2
 800d70a:	9307      	str	r3, [sp, #28]
 800d70c:	2300      	movs	r3, #0
 800d70e:	930a      	str	r3, [sp, #40]	; 0x28
 800d710:	e7bf      	b.n	800d692 <_dtoa_r+0x1da>
 800d712:	2300      	movs	r3, #0
 800d714:	9308      	str	r3, [sp, #32]
 800d716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d718:	2b00      	cmp	r3, #0
 800d71a:	dc55      	bgt.n	800d7c8 <_dtoa_r+0x310>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d722:	461a      	mov	r2, r3
 800d724:	9209      	str	r2, [sp, #36]	; 0x24
 800d726:	e00c      	b.n	800d742 <_dtoa_r+0x28a>
 800d728:	2301      	movs	r3, #1
 800d72a:	e7f3      	b.n	800d714 <_dtoa_r+0x25c>
 800d72c:	2300      	movs	r3, #0
 800d72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d730:	9308      	str	r3, [sp, #32]
 800d732:	9b00      	ldr	r3, [sp, #0]
 800d734:	4413      	add	r3, r2
 800d736:	9302      	str	r3, [sp, #8]
 800d738:	3301      	adds	r3, #1
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	bfb8      	it	lt
 800d740:	2301      	movlt	r3, #1
 800d742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d744:	2200      	movs	r2, #0
 800d746:	6042      	str	r2, [r0, #4]
 800d748:	2204      	movs	r2, #4
 800d74a:	f102 0614 	add.w	r6, r2, #20
 800d74e:	429e      	cmp	r6, r3
 800d750:	6841      	ldr	r1, [r0, #4]
 800d752:	d93d      	bls.n	800d7d0 <_dtoa_r+0x318>
 800d754:	4620      	mov	r0, r4
 800d756:	f001 fa49 	bl	800ebec <_Balloc>
 800d75a:	9001      	str	r0, [sp, #4]
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d13b      	bne.n	800d7d8 <_dtoa_r+0x320>
 800d760:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <_dtoa_r+0x2f0>)
 800d762:	4602      	mov	r2, r0
 800d764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d768:	e6c0      	b.n	800d4ec <_dtoa_r+0x34>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e7df      	b.n	800d72e <_dtoa_r+0x276>
 800d76e:	bf00      	nop
 800d770:	636f4361 	.word	0x636f4361
 800d774:	3fd287a7 	.word	0x3fd287a7
 800d778:	8b60c8b3 	.word	0x8b60c8b3
 800d77c:	3fc68a28 	.word	0x3fc68a28
 800d780:	509f79fb 	.word	0x509f79fb
 800d784:	3fd34413 	.word	0x3fd34413
 800d788:	0801172e 	.word	0x0801172e
 800d78c:	08011745 	.word	0x08011745
 800d790:	7ff00000 	.word	0x7ff00000
 800d794:	0801172a 	.word	0x0801172a
 800d798:	08011721 	.word	0x08011721
 800d79c:	080115ad 	.word	0x080115ad
 800d7a0:	3ff80000 	.word	0x3ff80000
 800d7a4:	08011918 	.word	0x08011918
 800d7a8:	080117a0 	.word	0x080117a0
 800d7ac:	2501      	movs	r5, #1
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	9306      	str	r3, [sp, #24]
 800d7b2:	9508      	str	r5, [sp, #32]
 800d7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2312      	movs	r3, #18
 800d7c0:	e7b0      	b.n	800d724 <_dtoa_r+0x26c>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	9308      	str	r3, [sp, #32]
 800d7c6:	e7f5      	b.n	800d7b4 <_dtoa_r+0x2fc>
 800d7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7ce:	e7b8      	b.n	800d742 <_dtoa_r+0x28a>
 800d7d0:	3101      	adds	r1, #1
 800d7d2:	6041      	str	r1, [r0, #4]
 800d7d4:	0052      	lsls	r2, r2, #1
 800d7d6:	e7b8      	b.n	800d74a <_dtoa_r+0x292>
 800d7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7da:	9a01      	ldr	r2, [sp, #4]
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	2b0e      	cmp	r3, #14
 800d7e2:	f200 809d 	bhi.w	800d920 <_dtoa_r+0x468>
 800d7e6:	2d00      	cmp	r5, #0
 800d7e8:	f000 809a 	beq.w	800d920 <_dtoa_r+0x468>
 800d7ec:	9b00      	ldr	r3, [sp, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	dd32      	ble.n	800d858 <_dtoa_r+0x3a0>
 800d7f2:	4ab7      	ldr	r2, [pc, #732]	; (800dad0 <_dtoa_r+0x618>)
 800d7f4:	f003 030f 	and.w	r3, r3, #15
 800d7f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d800:	9b00      	ldr	r3, [sp, #0]
 800d802:	05d8      	lsls	r0, r3, #23
 800d804:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d808:	d516      	bpl.n	800d838 <_dtoa_r+0x380>
 800d80a:	4bb2      	ldr	r3, [pc, #712]	; (800dad4 <_dtoa_r+0x61c>)
 800d80c:	ec51 0b19 	vmov	r0, r1, d9
 800d810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d814:	f7f3 f83a 	bl	800088c <__aeabi_ddiv>
 800d818:	f007 070f 	and.w	r7, r7, #15
 800d81c:	4682      	mov	sl, r0
 800d81e:	468b      	mov	fp, r1
 800d820:	2503      	movs	r5, #3
 800d822:	4eac      	ldr	r6, [pc, #688]	; (800dad4 <_dtoa_r+0x61c>)
 800d824:	b957      	cbnz	r7, 800d83c <_dtoa_r+0x384>
 800d826:	4642      	mov	r2, r8
 800d828:	464b      	mov	r3, r9
 800d82a:	4650      	mov	r0, sl
 800d82c:	4659      	mov	r1, fp
 800d82e:	f7f3 f82d 	bl	800088c <__aeabi_ddiv>
 800d832:	4682      	mov	sl, r0
 800d834:	468b      	mov	fp, r1
 800d836:	e028      	b.n	800d88a <_dtoa_r+0x3d2>
 800d838:	2502      	movs	r5, #2
 800d83a:	e7f2      	b.n	800d822 <_dtoa_r+0x36a>
 800d83c:	07f9      	lsls	r1, r7, #31
 800d83e:	d508      	bpl.n	800d852 <_dtoa_r+0x39a>
 800d840:	4640      	mov	r0, r8
 800d842:	4649      	mov	r1, r9
 800d844:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d848:	f7f2 fef6 	bl	8000638 <__aeabi_dmul>
 800d84c:	3501      	adds	r5, #1
 800d84e:	4680      	mov	r8, r0
 800d850:	4689      	mov	r9, r1
 800d852:	107f      	asrs	r7, r7, #1
 800d854:	3608      	adds	r6, #8
 800d856:	e7e5      	b.n	800d824 <_dtoa_r+0x36c>
 800d858:	f000 809b 	beq.w	800d992 <_dtoa_r+0x4da>
 800d85c:	9b00      	ldr	r3, [sp, #0]
 800d85e:	4f9d      	ldr	r7, [pc, #628]	; (800dad4 <_dtoa_r+0x61c>)
 800d860:	425e      	negs	r6, r3
 800d862:	4b9b      	ldr	r3, [pc, #620]	; (800dad0 <_dtoa_r+0x618>)
 800d864:	f006 020f 	and.w	r2, r6, #15
 800d868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	ec51 0b19 	vmov	r0, r1, d9
 800d874:	f7f2 fee0 	bl	8000638 <__aeabi_dmul>
 800d878:	1136      	asrs	r6, r6, #4
 800d87a:	4682      	mov	sl, r0
 800d87c:	468b      	mov	fp, r1
 800d87e:	2300      	movs	r3, #0
 800d880:	2502      	movs	r5, #2
 800d882:	2e00      	cmp	r6, #0
 800d884:	d17a      	bne.n	800d97c <_dtoa_r+0x4c4>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1d3      	bne.n	800d832 <_dtoa_r+0x37a>
 800d88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 8082 	beq.w	800d996 <_dtoa_r+0x4de>
 800d892:	4b91      	ldr	r3, [pc, #580]	; (800dad8 <_dtoa_r+0x620>)
 800d894:	2200      	movs	r2, #0
 800d896:	4650      	mov	r0, sl
 800d898:	4659      	mov	r1, fp
 800d89a:	f7f3 f93f 	bl	8000b1c <__aeabi_dcmplt>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d079      	beq.n	800d996 <_dtoa_r+0x4de>
 800d8a2:	9b03      	ldr	r3, [sp, #12]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d076      	beq.n	800d996 <_dtoa_r+0x4de>
 800d8a8:	9b02      	ldr	r3, [sp, #8]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	dd36      	ble.n	800d91c <_dtoa_r+0x464>
 800d8ae:	9b00      	ldr	r3, [sp, #0]
 800d8b0:	4650      	mov	r0, sl
 800d8b2:	4659      	mov	r1, fp
 800d8b4:	1e5f      	subs	r7, r3, #1
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	4b88      	ldr	r3, [pc, #544]	; (800dadc <_dtoa_r+0x624>)
 800d8ba:	f7f2 febd 	bl	8000638 <__aeabi_dmul>
 800d8be:	9e02      	ldr	r6, [sp, #8]
 800d8c0:	4682      	mov	sl, r0
 800d8c2:	468b      	mov	fp, r1
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f7f2 fe4c 	bl	8000564 <__aeabi_i2d>
 800d8cc:	4652      	mov	r2, sl
 800d8ce:	465b      	mov	r3, fp
 800d8d0:	f7f2 feb2 	bl	8000638 <__aeabi_dmul>
 800d8d4:	4b82      	ldr	r3, [pc, #520]	; (800dae0 <_dtoa_r+0x628>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f7f2 fcf8 	bl	80002cc <__adddf3>
 800d8dc:	46d0      	mov	r8, sl
 800d8de:	46d9      	mov	r9, fp
 800d8e0:	4682      	mov	sl, r0
 800d8e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8e6:	2e00      	cmp	r6, #0
 800d8e8:	d158      	bne.n	800d99c <_dtoa_r+0x4e4>
 800d8ea:	4b7e      	ldr	r3, [pc, #504]	; (800dae4 <_dtoa_r+0x62c>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4640      	mov	r0, r8
 800d8f0:	4649      	mov	r1, r9
 800d8f2:	f7f2 fce9 	bl	80002c8 <__aeabi_dsub>
 800d8f6:	4652      	mov	r2, sl
 800d8f8:	465b      	mov	r3, fp
 800d8fa:	4680      	mov	r8, r0
 800d8fc:	4689      	mov	r9, r1
 800d8fe:	f7f3 f92b 	bl	8000b58 <__aeabi_dcmpgt>
 800d902:	2800      	cmp	r0, #0
 800d904:	f040 8295 	bne.w	800de32 <_dtoa_r+0x97a>
 800d908:	4652      	mov	r2, sl
 800d90a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d90e:	4640      	mov	r0, r8
 800d910:	4649      	mov	r1, r9
 800d912:	f7f3 f903 	bl	8000b1c <__aeabi_dcmplt>
 800d916:	2800      	cmp	r0, #0
 800d918:	f040 8289 	bne.w	800de2e <_dtoa_r+0x976>
 800d91c:	ec5b ab19 	vmov	sl, fp, d9
 800d920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d922:	2b00      	cmp	r3, #0
 800d924:	f2c0 8148 	blt.w	800dbb8 <_dtoa_r+0x700>
 800d928:	9a00      	ldr	r2, [sp, #0]
 800d92a:	2a0e      	cmp	r2, #14
 800d92c:	f300 8144 	bgt.w	800dbb8 <_dtoa_r+0x700>
 800d930:	4b67      	ldr	r3, [pc, #412]	; (800dad0 <_dtoa_r+0x618>)
 800d932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f280 80d5 	bge.w	800daec <_dtoa_r+0x634>
 800d942:	9b03      	ldr	r3, [sp, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	f300 80d1 	bgt.w	800daec <_dtoa_r+0x634>
 800d94a:	f040 826f 	bne.w	800de2c <_dtoa_r+0x974>
 800d94e:	4b65      	ldr	r3, [pc, #404]	; (800dae4 <_dtoa_r+0x62c>)
 800d950:	2200      	movs	r2, #0
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fe6f 	bl	8000638 <__aeabi_dmul>
 800d95a:	4652      	mov	r2, sl
 800d95c:	465b      	mov	r3, fp
 800d95e:	f7f3 f8f1 	bl	8000b44 <__aeabi_dcmpge>
 800d962:	9e03      	ldr	r6, [sp, #12]
 800d964:	4637      	mov	r7, r6
 800d966:	2800      	cmp	r0, #0
 800d968:	f040 8245 	bne.w	800ddf6 <_dtoa_r+0x93e>
 800d96c:	9d01      	ldr	r5, [sp, #4]
 800d96e:	2331      	movs	r3, #49	; 0x31
 800d970:	f805 3b01 	strb.w	r3, [r5], #1
 800d974:	9b00      	ldr	r3, [sp, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	e240      	b.n	800ddfe <_dtoa_r+0x946>
 800d97c:	07f2      	lsls	r2, r6, #31
 800d97e:	d505      	bpl.n	800d98c <_dtoa_r+0x4d4>
 800d980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d984:	f7f2 fe58 	bl	8000638 <__aeabi_dmul>
 800d988:	3501      	adds	r5, #1
 800d98a:	2301      	movs	r3, #1
 800d98c:	1076      	asrs	r6, r6, #1
 800d98e:	3708      	adds	r7, #8
 800d990:	e777      	b.n	800d882 <_dtoa_r+0x3ca>
 800d992:	2502      	movs	r5, #2
 800d994:	e779      	b.n	800d88a <_dtoa_r+0x3d2>
 800d996:	9f00      	ldr	r7, [sp, #0]
 800d998:	9e03      	ldr	r6, [sp, #12]
 800d99a:	e794      	b.n	800d8c6 <_dtoa_r+0x40e>
 800d99c:	9901      	ldr	r1, [sp, #4]
 800d99e:	4b4c      	ldr	r3, [pc, #304]	; (800dad0 <_dtoa_r+0x618>)
 800d9a0:	4431      	add	r1, r6
 800d9a2:	910d      	str	r1, [sp, #52]	; 0x34
 800d9a4:	9908      	ldr	r1, [sp, #32]
 800d9a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d9aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9ae:	2900      	cmp	r1, #0
 800d9b0:	d043      	beq.n	800da3a <_dtoa_r+0x582>
 800d9b2:	494d      	ldr	r1, [pc, #308]	; (800dae8 <_dtoa_r+0x630>)
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	f7f2 ff69 	bl	800088c <__aeabi_ddiv>
 800d9ba:	4652      	mov	r2, sl
 800d9bc:	465b      	mov	r3, fp
 800d9be:	f7f2 fc83 	bl	80002c8 <__aeabi_dsub>
 800d9c2:	9d01      	ldr	r5, [sp, #4]
 800d9c4:	4682      	mov	sl, r0
 800d9c6:	468b      	mov	fp, r1
 800d9c8:	4649      	mov	r1, r9
 800d9ca:	4640      	mov	r0, r8
 800d9cc:	f7f3 f8e4 	bl	8000b98 <__aeabi_d2iz>
 800d9d0:	4606      	mov	r6, r0
 800d9d2:	f7f2 fdc7 	bl	8000564 <__aeabi_i2d>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4640      	mov	r0, r8
 800d9dc:	4649      	mov	r1, r9
 800d9de:	f7f2 fc73 	bl	80002c8 <__aeabi_dsub>
 800d9e2:	3630      	adds	r6, #48	; 0x30
 800d9e4:	f805 6b01 	strb.w	r6, [r5], #1
 800d9e8:	4652      	mov	r2, sl
 800d9ea:	465b      	mov	r3, fp
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	4689      	mov	r9, r1
 800d9f0:	f7f3 f894 	bl	8000b1c <__aeabi_dcmplt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d163      	bne.n	800dac0 <_dtoa_r+0x608>
 800d9f8:	4642      	mov	r2, r8
 800d9fa:	464b      	mov	r3, r9
 800d9fc:	4936      	ldr	r1, [pc, #216]	; (800dad8 <_dtoa_r+0x620>)
 800d9fe:	2000      	movs	r0, #0
 800da00:	f7f2 fc62 	bl	80002c8 <__aeabi_dsub>
 800da04:	4652      	mov	r2, sl
 800da06:	465b      	mov	r3, fp
 800da08:	f7f3 f888 	bl	8000b1c <__aeabi_dcmplt>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f040 80b5 	bne.w	800db7c <_dtoa_r+0x6c4>
 800da12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da14:	429d      	cmp	r5, r3
 800da16:	d081      	beq.n	800d91c <_dtoa_r+0x464>
 800da18:	4b30      	ldr	r3, [pc, #192]	; (800dadc <_dtoa_r+0x624>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	4650      	mov	r0, sl
 800da1e:	4659      	mov	r1, fp
 800da20:	f7f2 fe0a 	bl	8000638 <__aeabi_dmul>
 800da24:	4b2d      	ldr	r3, [pc, #180]	; (800dadc <_dtoa_r+0x624>)
 800da26:	4682      	mov	sl, r0
 800da28:	468b      	mov	fp, r1
 800da2a:	4640      	mov	r0, r8
 800da2c:	4649      	mov	r1, r9
 800da2e:	2200      	movs	r2, #0
 800da30:	f7f2 fe02 	bl	8000638 <__aeabi_dmul>
 800da34:	4680      	mov	r8, r0
 800da36:	4689      	mov	r9, r1
 800da38:	e7c6      	b.n	800d9c8 <_dtoa_r+0x510>
 800da3a:	4650      	mov	r0, sl
 800da3c:	4659      	mov	r1, fp
 800da3e:	f7f2 fdfb 	bl	8000638 <__aeabi_dmul>
 800da42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da44:	9d01      	ldr	r5, [sp, #4]
 800da46:	930f      	str	r3, [sp, #60]	; 0x3c
 800da48:	4682      	mov	sl, r0
 800da4a:	468b      	mov	fp, r1
 800da4c:	4649      	mov	r1, r9
 800da4e:	4640      	mov	r0, r8
 800da50:	f7f3 f8a2 	bl	8000b98 <__aeabi_d2iz>
 800da54:	4606      	mov	r6, r0
 800da56:	f7f2 fd85 	bl	8000564 <__aeabi_i2d>
 800da5a:	3630      	adds	r6, #48	; 0x30
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	4640      	mov	r0, r8
 800da62:	4649      	mov	r1, r9
 800da64:	f7f2 fc30 	bl	80002c8 <__aeabi_dsub>
 800da68:	f805 6b01 	strb.w	r6, [r5], #1
 800da6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da6e:	429d      	cmp	r5, r3
 800da70:	4680      	mov	r8, r0
 800da72:	4689      	mov	r9, r1
 800da74:	f04f 0200 	mov.w	r2, #0
 800da78:	d124      	bne.n	800dac4 <_dtoa_r+0x60c>
 800da7a:	4b1b      	ldr	r3, [pc, #108]	; (800dae8 <_dtoa_r+0x630>)
 800da7c:	4650      	mov	r0, sl
 800da7e:	4659      	mov	r1, fp
 800da80:	f7f2 fc24 	bl	80002cc <__adddf3>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4640      	mov	r0, r8
 800da8a:	4649      	mov	r1, r9
 800da8c:	f7f3 f864 	bl	8000b58 <__aeabi_dcmpgt>
 800da90:	2800      	cmp	r0, #0
 800da92:	d173      	bne.n	800db7c <_dtoa_r+0x6c4>
 800da94:	4652      	mov	r2, sl
 800da96:	465b      	mov	r3, fp
 800da98:	4913      	ldr	r1, [pc, #76]	; (800dae8 <_dtoa_r+0x630>)
 800da9a:	2000      	movs	r0, #0
 800da9c:	f7f2 fc14 	bl	80002c8 <__aeabi_dsub>
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	4640      	mov	r0, r8
 800daa6:	4649      	mov	r1, r9
 800daa8:	f7f3 f838 	bl	8000b1c <__aeabi_dcmplt>
 800daac:	2800      	cmp	r0, #0
 800daae:	f43f af35 	beq.w	800d91c <_dtoa_r+0x464>
 800dab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dab4:	1e6b      	subs	r3, r5, #1
 800dab6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dabc:	2b30      	cmp	r3, #48	; 0x30
 800dabe:	d0f8      	beq.n	800dab2 <_dtoa_r+0x5fa>
 800dac0:	9700      	str	r7, [sp, #0]
 800dac2:	e049      	b.n	800db58 <_dtoa_r+0x6a0>
 800dac4:	4b05      	ldr	r3, [pc, #20]	; (800dadc <_dtoa_r+0x624>)
 800dac6:	f7f2 fdb7 	bl	8000638 <__aeabi_dmul>
 800daca:	4680      	mov	r8, r0
 800dacc:	4689      	mov	r9, r1
 800dace:	e7bd      	b.n	800da4c <_dtoa_r+0x594>
 800dad0:	08011918 	.word	0x08011918
 800dad4:	080118f0 	.word	0x080118f0
 800dad8:	3ff00000 	.word	0x3ff00000
 800dadc:	40240000 	.word	0x40240000
 800dae0:	401c0000 	.word	0x401c0000
 800dae4:	40140000 	.word	0x40140000
 800dae8:	3fe00000 	.word	0x3fe00000
 800daec:	9d01      	ldr	r5, [sp, #4]
 800daee:	4656      	mov	r6, sl
 800daf0:	465f      	mov	r7, fp
 800daf2:	4642      	mov	r2, r8
 800daf4:	464b      	mov	r3, r9
 800daf6:	4630      	mov	r0, r6
 800daf8:	4639      	mov	r1, r7
 800dafa:	f7f2 fec7 	bl	800088c <__aeabi_ddiv>
 800dafe:	f7f3 f84b 	bl	8000b98 <__aeabi_d2iz>
 800db02:	4682      	mov	sl, r0
 800db04:	f7f2 fd2e 	bl	8000564 <__aeabi_i2d>
 800db08:	4642      	mov	r2, r8
 800db0a:	464b      	mov	r3, r9
 800db0c:	f7f2 fd94 	bl	8000638 <__aeabi_dmul>
 800db10:	4602      	mov	r2, r0
 800db12:	460b      	mov	r3, r1
 800db14:	4630      	mov	r0, r6
 800db16:	4639      	mov	r1, r7
 800db18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db1c:	f7f2 fbd4 	bl	80002c8 <__aeabi_dsub>
 800db20:	f805 6b01 	strb.w	r6, [r5], #1
 800db24:	9e01      	ldr	r6, [sp, #4]
 800db26:	9f03      	ldr	r7, [sp, #12]
 800db28:	1bae      	subs	r6, r5, r6
 800db2a:	42b7      	cmp	r7, r6
 800db2c:	4602      	mov	r2, r0
 800db2e:	460b      	mov	r3, r1
 800db30:	d135      	bne.n	800db9e <_dtoa_r+0x6e6>
 800db32:	f7f2 fbcb 	bl	80002cc <__adddf3>
 800db36:	4642      	mov	r2, r8
 800db38:	464b      	mov	r3, r9
 800db3a:	4606      	mov	r6, r0
 800db3c:	460f      	mov	r7, r1
 800db3e:	f7f3 f80b 	bl	8000b58 <__aeabi_dcmpgt>
 800db42:	b9d0      	cbnz	r0, 800db7a <_dtoa_r+0x6c2>
 800db44:	4642      	mov	r2, r8
 800db46:	464b      	mov	r3, r9
 800db48:	4630      	mov	r0, r6
 800db4a:	4639      	mov	r1, r7
 800db4c:	f7f2 ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 800db50:	b110      	cbz	r0, 800db58 <_dtoa_r+0x6a0>
 800db52:	f01a 0f01 	tst.w	sl, #1
 800db56:	d110      	bne.n	800db7a <_dtoa_r+0x6c2>
 800db58:	4620      	mov	r0, r4
 800db5a:	ee18 1a10 	vmov	r1, s16
 800db5e:	f001 f885 	bl	800ec6c <_Bfree>
 800db62:	2300      	movs	r3, #0
 800db64:	9800      	ldr	r0, [sp, #0]
 800db66:	702b      	strb	r3, [r5, #0]
 800db68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db6a:	3001      	adds	r0, #1
 800db6c:	6018      	str	r0, [r3, #0]
 800db6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db70:	2b00      	cmp	r3, #0
 800db72:	f43f acf1 	beq.w	800d558 <_dtoa_r+0xa0>
 800db76:	601d      	str	r5, [r3, #0]
 800db78:	e4ee      	b.n	800d558 <_dtoa_r+0xa0>
 800db7a:	9f00      	ldr	r7, [sp, #0]
 800db7c:	462b      	mov	r3, r5
 800db7e:	461d      	mov	r5, r3
 800db80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db84:	2a39      	cmp	r2, #57	; 0x39
 800db86:	d106      	bne.n	800db96 <_dtoa_r+0x6de>
 800db88:	9a01      	ldr	r2, [sp, #4]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d1f7      	bne.n	800db7e <_dtoa_r+0x6c6>
 800db8e:	9901      	ldr	r1, [sp, #4]
 800db90:	2230      	movs	r2, #48	; 0x30
 800db92:	3701      	adds	r7, #1
 800db94:	700a      	strb	r2, [r1, #0]
 800db96:	781a      	ldrb	r2, [r3, #0]
 800db98:	3201      	adds	r2, #1
 800db9a:	701a      	strb	r2, [r3, #0]
 800db9c:	e790      	b.n	800dac0 <_dtoa_r+0x608>
 800db9e:	4ba6      	ldr	r3, [pc, #664]	; (800de38 <_dtoa_r+0x980>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	f7f2 fd49 	bl	8000638 <__aeabi_dmul>
 800dba6:	2200      	movs	r2, #0
 800dba8:	2300      	movs	r3, #0
 800dbaa:	4606      	mov	r6, r0
 800dbac:	460f      	mov	r7, r1
 800dbae:	f7f2 ffab 	bl	8000b08 <__aeabi_dcmpeq>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d09d      	beq.n	800daf2 <_dtoa_r+0x63a>
 800dbb6:	e7cf      	b.n	800db58 <_dtoa_r+0x6a0>
 800dbb8:	9a08      	ldr	r2, [sp, #32]
 800dbba:	2a00      	cmp	r2, #0
 800dbbc:	f000 80d7 	beq.w	800dd6e <_dtoa_r+0x8b6>
 800dbc0:	9a06      	ldr	r2, [sp, #24]
 800dbc2:	2a01      	cmp	r2, #1
 800dbc4:	f300 80ba 	bgt.w	800dd3c <_dtoa_r+0x884>
 800dbc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbca:	2a00      	cmp	r2, #0
 800dbcc:	f000 80b2 	beq.w	800dd34 <_dtoa_r+0x87c>
 800dbd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbd4:	9e07      	ldr	r6, [sp, #28]
 800dbd6:	9d04      	ldr	r5, [sp, #16]
 800dbd8:	9a04      	ldr	r2, [sp, #16]
 800dbda:	441a      	add	r2, r3
 800dbdc:	9204      	str	r2, [sp, #16]
 800dbde:	9a05      	ldr	r2, [sp, #20]
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	441a      	add	r2, r3
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	9205      	str	r2, [sp, #20]
 800dbe8:	f001 f942 	bl	800ee70 <__i2b>
 800dbec:	4607      	mov	r7, r0
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	dd0c      	ble.n	800dc0c <_dtoa_r+0x754>
 800dbf2:	9b05      	ldr	r3, [sp, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dd09      	ble.n	800dc0c <_dtoa_r+0x754>
 800dbf8:	42ab      	cmp	r3, r5
 800dbfa:	9a04      	ldr	r2, [sp, #16]
 800dbfc:	bfa8      	it	ge
 800dbfe:	462b      	movge	r3, r5
 800dc00:	1ad2      	subs	r2, r2, r3
 800dc02:	9204      	str	r2, [sp, #16]
 800dc04:	9a05      	ldr	r2, [sp, #20]
 800dc06:	1aed      	subs	r5, r5, r3
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	9305      	str	r3, [sp, #20]
 800dc0c:	9b07      	ldr	r3, [sp, #28]
 800dc0e:	b31b      	cbz	r3, 800dc58 <_dtoa_r+0x7a0>
 800dc10:	9b08      	ldr	r3, [sp, #32]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f000 80af 	beq.w	800dd76 <_dtoa_r+0x8be>
 800dc18:	2e00      	cmp	r6, #0
 800dc1a:	dd13      	ble.n	800dc44 <_dtoa_r+0x78c>
 800dc1c:	4639      	mov	r1, r7
 800dc1e:	4632      	mov	r2, r6
 800dc20:	4620      	mov	r0, r4
 800dc22:	f001 f9e5 	bl	800eff0 <__pow5mult>
 800dc26:	ee18 2a10 	vmov	r2, s16
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f001 f934 	bl	800ee9c <__multiply>
 800dc34:	ee18 1a10 	vmov	r1, s16
 800dc38:	4680      	mov	r8, r0
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f001 f816 	bl	800ec6c <_Bfree>
 800dc40:	ee08 8a10 	vmov	s16, r8
 800dc44:	9b07      	ldr	r3, [sp, #28]
 800dc46:	1b9a      	subs	r2, r3, r6
 800dc48:	d006      	beq.n	800dc58 <_dtoa_r+0x7a0>
 800dc4a:	ee18 1a10 	vmov	r1, s16
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f001 f9ce 	bl	800eff0 <__pow5mult>
 800dc54:	ee08 0a10 	vmov	s16, r0
 800dc58:	2101      	movs	r1, #1
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f001 f908 	bl	800ee70 <__i2b>
 800dc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	4606      	mov	r6, r0
 800dc66:	f340 8088 	ble.w	800dd7a <_dtoa_r+0x8c2>
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	4601      	mov	r1, r0
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f001 f9be 	bl	800eff0 <__pow5mult>
 800dc74:	9b06      	ldr	r3, [sp, #24]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	4606      	mov	r6, r0
 800dc7a:	f340 8081 	ble.w	800dd80 <_dtoa_r+0x8c8>
 800dc7e:	f04f 0800 	mov.w	r8, #0
 800dc82:	6933      	ldr	r3, [r6, #16]
 800dc84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc88:	6918      	ldr	r0, [r3, #16]
 800dc8a:	f001 f8a1 	bl	800edd0 <__hi0bits>
 800dc8e:	f1c0 0020 	rsb	r0, r0, #32
 800dc92:	9b05      	ldr	r3, [sp, #20]
 800dc94:	4418      	add	r0, r3
 800dc96:	f010 001f 	ands.w	r0, r0, #31
 800dc9a:	f000 8092 	beq.w	800ddc2 <_dtoa_r+0x90a>
 800dc9e:	f1c0 0320 	rsb	r3, r0, #32
 800dca2:	2b04      	cmp	r3, #4
 800dca4:	f340 808a 	ble.w	800ddbc <_dtoa_r+0x904>
 800dca8:	f1c0 001c 	rsb	r0, r0, #28
 800dcac:	9b04      	ldr	r3, [sp, #16]
 800dcae:	4403      	add	r3, r0
 800dcb0:	9304      	str	r3, [sp, #16]
 800dcb2:	9b05      	ldr	r3, [sp, #20]
 800dcb4:	4403      	add	r3, r0
 800dcb6:	4405      	add	r5, r0
 800dcb8:	9305      	str	r3, [sp, #20]
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dd07      	ble.n	800dcd0 <_dtoa_r+0x818>
 800dcc0:	ee18 1a10 	vmov	r1, s16
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f001 f9ec 	bl	800f0a4 <__lshift>
 800dccc:	ee08 0a10 	vmov	s16, r0
 800dcd0:	9b05      	ldr	r3, [sp, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	dd05      	ble.n	800dce2 <_dtoa_r+0x82a>
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f001 f9e2 	bl	800f0a4 <__lshift>
 800dce0:	4606      	mov	r6, r0
 800dce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d06e      	beq.n	800ddc6 <_dtoa_r+0x90e>
 800dce8:	ee18 0a10 	vmov	r0, s16
 800dcec:	4631      	mov	r1, r6
 800dcee:	f001 fa49 	bl	800f184 <__mcmp>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	da67      	bge.n	800ddc6 <_dtoa_r+0x90e>
 800dcf6:	9b00      	ldr	r3, [sp, #0]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	ee18 1a10 	vmov	r1, s16
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	220a      	movs	r2, #10
 800dd02:	2300      	movs	r3, #0
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 ffd3 	bl	800ecb0 <__multadd>
 800dd0a:	9b08      	ldr	r3, [sp, #32]
 800dd0c:	ee08 0a10 	vmov	s16, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 81b1 	beq.w	800e078 <_dtoa_r+0xbc0>
 800dd16:	2300      	movs	r3, #0
 800dd18:	4639      	mov	r1, r7
 800dd1a:	220a      	movs	r2, #10
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f000 ffc7 	bl	800ecb0 <__multadd>
 800dd22:	9b02      	ldr	r3, [sp, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	4607      	mov	r7, r0
 800dd28:	f300 808e 	bgt.w	800de48 <_dtoa_r+0x990>
 800dd2c:	9b06      	ldr	r3, [sp, #24]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	dc51      	bgt.n	800ddd6 <_dtoa_r+0x91e>
 800dd32:	e089      	b.n	800de48 <_dtoa_r+0x990>
 800dd34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd3a:	e74b      	b.n	800dbd4 <_dtoa_r+0x71c>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	1e5e      	subs	r6, r3, #1
 800dd40:	9b07      	ldr	r3, [sp, #28]
 800dd42:	42b3      	cmp	r3, r6
 800dd44:	bfbf      	itttt	lt
 800dd46:	9b07      	ldrlt	r3, [sp, #28]
 800dd48:	9607      	strlt	r6, [sp, #28]
 800dd4a:	1af2      	sublt	r2, r6, r3
 800dd4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd4e:	bfb6      	itet	lt
 800dd50:	189b      	addlt	r3, r3, r2
 800dd52:	1b9e      	subge	r6, r3, r6
 800dd54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	bfb8      	it	lt
 800dd5a:	2600      	movlt	r6, #0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	bfb7      	itett	lt
 800dd60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd68:	1a9d      	sublt	r5, r3, r2
 800dd6a:	2300      	movlt	r3, #0
 800dd6c:	e734      	b.n	800dbd8 <_dtoa_r+0x720>
 800dd6e:	9e07      	ldr	r6, [sp, #28]
 800dd70:	9d04      	ldr	r5, [sp, #16]
 800dd72:	9f08      	ldr	r7, [sp, #32]
 800dd74:	e73b      	b.n	800dbee <_dtoa_r+0x736>
 800dd76:	9a07      	ldr	r2, [sp, #28]
 800dd78:	e767      	b.n	800dc4a <_dtoa_r+0x792>
 800dd7a:	9b06      	ldr	r3, [sp, #24]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	dc18      	bgt.n	800ddb2 <_dtoa_r+0x8fa>
 800dd80:	f1ba 0f00 	cmp.w	sl, #0
 800dd84:	d115      	bne.n	800ddb2 <_dtoa_r+0x8fa>
 800dd86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd8a:	b993      	cbnz	r3, 800ddb2 <_dtoa_r+0x8fa>
 800dd8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd90:	0d1b      	lsrs	r3, r3, #20
 800dd92:	051b      	lsls	r3, r3, #20
 800dd94:	b183      	cbz	r3, 800ddb8 <_dtoa_r+0x900>
 800dd96:	9b04      	ldr	r3, [sp, #16]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	9304      	str	r3, [sp, #16]
 800dd9c:	9b05      	ldr	r3, [sp, #20]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	9305      	str	r3, [sp, #20]
 800dda2:	f04f 0801 	mov.w	r8, #1
 800dda6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f47f af6a 	bne.w	800dc82 <_dtoa_r+0x7ca>
 800ddae:	2001      	movs	r0, #1
 800ddb0:	e76f      	b.n	800dc92 <_dtoa_r+0x7da>
 800ddb2:	f04f 0800 	mov.w	r8, #0
 800ddb6:	e7f6      	b.n	800dda6 <_dtoa_r+0x8ee>
 800ddb8:	4698      	mov	r8, r3
 800ddba:	e7f4      	b.n	800dda6 <_dtoa_r+0x8ee>
 800ddbc:	f43f af7d 	beq.w	800dcba <_dtoa_r+0x802>
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	301c      	adds	r0, #28
 800ddc4:	e772      	b.n	800dcac <_dtoa_r+0x7f4>
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dc37      	bgt.n	800de3c <_dtoa_r+0x984>
 800ddcc:	9b06      	ldr	r3, [sp, #24]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	dd34      	ble.n	800de3c <_dtoa_r+0x984>
 800ddd2:	9b03      	ldr	r3, [sp, #12]
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	9b02      	ldr	r3, [sp, #8]
 800ddd8:	b96b      	cbnz	r3, 800ddf6 <_dtoa_r+0x93e>
 800ddda:	4631      	mov	r1, r6
 800dddc:	2205      	movs	r2, #5
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 ff66 	bl	800ecb0 <__multadd>
 800dde4:	4601      	mov	r1, r0
 800dde6:	4606      	mov	r6, r0
 800dde8:	ee18 0a10 	vmov	r0, s16
 800ddec:	f001 f9ca 	bl	800f184 <__mcmp>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f73f adbb 	bgt.w	800d96c <_dtoa_r+0x4b4>
 800ddf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf8:	9d01      	ldr	r5, [sp, #4]
 800ddfa:	43db      	mvns	r3, r3
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	f04f 0800 	mov.w	r8, #0
 800de02:	4631      	mov	r1, r6
 800de04:	4620      	mov	r0, r4
 800de06:	f000 ff31 	bl	800ec6c <_Bfree>
 800de0a:	2f00      	cmp	r7, #0
 800de0c:	f43f aea4 	beq.w	800db58 <_dtoa_r+0x6a0>
 800de10:	f1b8 0f00 	cmp.w	r8, #0
 800de14:	d005      	beq.n	800de22 <_dtoa_r+0x96a>
 800de16:	45b8      	cmp	r8, r7
 800de18:	d003      	beq.n	800de22 <_dtoa_r+0x96a>
 800de1a:	4641      	mov	r1, r8
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 ff25 	bl	800ec6c <_Bfree>
 800de22:	4639      	mov	r1, r7
 800de24:	4620      	mov	r0, r4
 800de26:	f000 ff21 	bl	800ec6c <_Bfree>
 800de2a:	e695      	b.n	800db58 <_dtoa_r+0x6a0>
 800de2c:	2600      	movs	r6, #0
 800de2e:	4637      	mov	r7, r6
 800de30:	e7e1      	b.n	800ddf6 <_dtoa_r+0x93e>
 800de32:	9700      	str	r7, [sp, #0]
 800de34:	4637      	mov	r7, r6
 800de36:	e599      	b.n	800d96c <_dtoa_r+0x4b4>
 800de38:	40240000 	.word	0x40240000
 800de3c:	9b08      	ldr	r3, [sp, #32]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 80ca 	beq.w	800dfd8 <_dtoa_r+0xb20>
 800de44:	9b03      	ldr	r3, [sp, #12]
 800de46:	9302      	str	r3, [sp, #8]
 800de48:	2d00      	cmp	r5, #0
 800de4a:	dd05      	ble.n	800de58 <_dtoa_r+0x9a0>
 800de4c:	4639      	mov	r1, r7
 800de4e:	462a      	mov	r2, r5
 800de50:	4620      	mov	r0, r4
 800de52:	f001 f927 	bl	800f0a4 <__lshift>
 800de56:	4607      	mov	r7, r0
 800de58:	f1b8 0f00 	cmp.w	r8, #0
 800de5c:	d05b      	beq.n	800df16 <_dtoa_r+0xa5e>
 800de5e:	6879      	ldr	r1, [r7, #4]
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fec3 	bl	800ebec <_Balloc>
 800de66:	4605      	mov	r5, r0
 800de68:	b928      	cbnz	r0, 800de76 <_dtoa_r+0x9be>
 800de6a:	4b87      	ldr	r3, [pc, #540]	; (800e088 <_dtoa_r+0xbd0>)
 800de6c:	4602      	mov	r2, r0
 800de6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de72:	f7ff bb3b 	b.w	800d4ec <_dtoa_r+0x34>
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	3202      	adds	r2, #2
 800de7a:	0092      	lsls	r2, r2, #2
 800de7c:	f107 010c 	add.w	r1, r7, #12
 800de80:	300c      	adds	r0, #12
 800de82:	f7fd fe01 	bl	800ba88 <memcpy>
 800de86:	2201      	movs	r2, #1
 800de88:	4629      	mov	r1, r5
 800de8a:	4620      	mov	r0, r4
 800de8c:	f001 f90a 	bl	800f0a4 <__lshift>
 800de90:	9b01      	ldr	r3, [sp, #4]
 800de92:	f103 0901 	add.w	r9, r3, #1
 800de96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de9a:	4413      	add	r3, r2
 800de9c:	9305      	str	r3, [sp, #20]
 800de9e:	f00a 0301 	and.w	r3, sl, #1
 800dea2:	46b8      	mov	r8, r7
 800dea4:	9304      	str	r3, [sp, #16]
 800dea6:	4607      	mov	r7, r0
 800dea8:	4631      	mov	r1, r6
 800deaa:	ee18 0a10 	vmov	r0, s16
 800deae:	f7ff fa75 	bl	800d39c <quorem>
 800deb2:	4641      	mov	r1, r8
 800deb4:	9002      	str	r0, [sp, #8]
 800deb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800deba:	ee18 0a10 	vmov	r0, s16
 800debe:	f001 f961 	bl	800f184 <__mcmp>
 800dec2:	463a      	mov	r2, r7
 800dec4:	9003      	str	r0, [sp, #12]
 800dec6:	4631      	mov	r1, r6
 800dec8:	4620      	mov	r0, r4
 800deca:	f001 f977 	bl	800f1bc <__mdiff>
 800dece:	68c2      	ldr	r2, [r0, #12]
 800ded0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ded4:	4605      	mov	r5, r0
 800ded6:	bb02      	cbnz	r2, 800df1a <_dtoa_r+0xa62>
 800ded8:	4601      	mov	r1, r0
 800deda:	ee18 0a10 	vmov	r0, s16
 800dede:	f001 f951 	bl	800f184 <__mcmp>
 800dee2:	4602      	mov	r2, r0
 800dee4:	4629      	mov	r1, r5
 800dee6:	4620      	mov	r0, r4
 800dee8:	9207      	str	r2, [sp, #28]
 800deea:	f000 febf 	bl	800ec6c <_Bfree>
 800deee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800def2:	ea43 0102 	orr.w	r1, r3, r2
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	430b      	orrs	r3, r1
 800defa:	464d      	mov	r5, r9
 800defc:	d10f      	bne.n	800df1e <_dtoa_r+0xa66>
 800defe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df02:	d02a      	beq.n	800df5a <_dtoa_r+0xaa2>
 800df04:	9b03      	ldr	r3, [sp, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	dd02      	ble.n	800df10 <_dtoa_r+0xa58>
 800df0a:	9b02      	ldr	r3, [sp, #8]
 800df0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800df10:	f88b a000 	strb.w	sl, [fp]
 800df14:	e775      	b.n	800de02 <_dtoa_r+0x94a>
 800df16:	4638      	mov	r0, r7
 800df18:	e7ba      	b.n	800de90 <_dtoa_r+0x9d8>
 800df1a:	2201      	movs	r2, #1
 800df1c:	e7e2      	b.n	800dee4 <_dtoa_r+0xa2c>
 800df1e:	9b03      	ldr	r3, [sp, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	db04      	blt.n	800df2e <_dtoa_r+0xa76>
 800df24:	9906      	ldr	r1, [sp, #24]
 800df26:	430b      	orrs	r3, r1
 800df28:	9904      	ldr	r1, [sp, #16]
 800df2a:	430b      	orrs	r3, r1
 800df2c:	d122      	bne.n	800df74 <_dtoa_r+0xabc>
 800df2e:	2a00      	cmp	r2, #0
 800df30:	ddee      	ble.n	800df10 <_dtoa_r+0xa58>
 800df32:	ee18 1a10 	vmov	r1, s16
 800df36:	2201      	movs	r2, #1
 800df38:	4620      	mov	r0, r4
 800df3a:	f001 f8b3 	bl	800f0a4 <__lshift>
 800df3e:	4631      	mov	r1, r6
 800df40:	ee08 0a10 	vmov	s16, r0
 800df44:	f001 f91e 	bl	800f184 <__mcmp>
 800df48:	2800      	cmp	r0, #0
 800df4a:	dc03      	bgt.n	800df54 <_dtoa_r+0xa9c>
 800df4c:	d1e0      	bne.n	800df10 <_dtoa_r+0xa58>
 800df4e:	f01a 0f01 	tst.w	sl, #1
 800df52:	d0dd      	beq.n	800df10 <_dtoa_r+0xa58>
 800df54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df58:	d1d7      	bne.n	800df0a <_dtoa_r+0xa52>
 800df5a:	2339      	movs	r3, #57	; 0x39
 800df5c:	f88b 3000 	strb.w	r3, [fp]
 800df60:	462b      	mov	r3, r5
 800df62:	461d      	mov	r5, r3
 800df64:	3b01      	subs	r3, #1
 800df66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df6a:	2a39      	cmp	r2, #57	; 0x39
 800df6c:	d071      	beq.n	800e052 <_dtoa_r+0xb9a>
 800df6e:	3201      	adds	r2, #1
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	e746      	b.n	800de02 <_dtoa_r+0x94a>
 800df74:	2a00      	cmp	r2, #0
 800df76:	dd07      	ble.n	800df88 <_dtoa_r+0xad0>
 800df78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df7c:	d0ed      	beq.n	800df5a <_dtoa_r+0xaa2>
 800df7e:	f10a 0301 	add.w	r3, sl, #1
 800df82:	f88b 3000 	strb.w	r3, [fp]
 800df86:	e73c      	b.n	800de02 <_dtoa_r+0x94a>
 800df88:	9b05      	ldr	r3, [sp, #20]
 800df8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df8e:	4599      	cmp	r9, r3
 800df90:	d047      	beq.n	800e022 <_dtoa_r+0xb6a>
 800df92:	ee18 1a10 	vmov	r1, s16
 800df96:	2300      	movs	r3, #0
 800df98:	220a      	movs	r2, #10
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 fe88 	bl	800ecb0 <__multadd>
 800dfa0:	45b8      	cmp	r8, r7
 800dfa2:	ee08 0a10 	vmov	s16, r0
 800dfa6:	f04f 0300 	mov.w	r3, #0
 800dfaa:	f04f 020a 	mov.w	r2, #10
 800dfae:	4641      	mov	r1, r8
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	d106      	bne.n	800dfc2 <_dtoa_r+0xb0a>
 800dfb4:	f000 fe7c 	bl	800ecb0 <__multadd>
 800dfb8:	4680      	mov	r8, r0
 800dfba:	4607      	mov	r7, r0
 800dfbc:	f109 0901 	add.w	r9, r9, #1
 800dfc0:	e772      	b.n	800dea8 <_dtoa_r+0x9f0>
 800dfc2:	f000 fe75 	bl	800ecb0 <__multadd>
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	4680      	mov	r8, r0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	220a      	movs	r2, #10
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 fe6e 	bl	800ecb0 <__multadd>
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	e7f1      	b.n	800dfbc <_dtoa_r+0xb04>
 800dfd8:	9b03      	ldr	r3, [sp, #12]
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	9d01      	ldr	r5, [sp, #4]
 800dfde:	ee18 0a10 	vmov	r0, s16
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	f7ff f9da 	bl	800d39c <quorem>
 800dfe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfec:	9b01      	ldr	r3, [sp, #4]
 800dfee:	f805 ab01 	strb.w	sl, [r5], #1
 800dff2:	1aea      	subs	r2, r5, r3
 800dff4:	9b02      	ldr	r3, [sp, #8]
 800dff6:	4293      	cmp	r3, r2
 800dff8:	dd09      	ble.n	800e00e <_dtoa_r+0xb56>
 800dffa:	ee18 1a10 	vmov	r1, s16
 800dffe:	2300      	movs	r3, #0
 800e000:	220a      	movs	r2, #10
 800e002:	4620      	mov	r0, r4
 800e004:	f000 fe54 	bl	800ecb0 <__multadd>
 800e008:	ee08 0a10 	vmov	s16, r0
 800e00c:	e7e7      	b.n	800dfde <_dtoa_r+0xb26>
 800e00e:	9b02      	ldr	r3, [sp, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	bfc8      	it	gt
 800e014:	461d      	movgt	r5, r3
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	bfd8      	it	le
 800e01a:	2501      	movle	r5, #1
 800e01c:	441d      	add	r5, r3
 800e01e:	f04f 0800 	mov.w	r8, #0
 800e022:	ee18 1a10 	vmov	r1, s16
 800e026:	2201      	movs	r2, #1
 800e028:	4620      	mov	r0, r4
 800e02a:	f001 f83b 	bl	800f0a4 <__lshift>
 800e02e:	4631      	mov	r1, r6
 800e030:	ee08 0a10 	vmov	s16, r0
 800e034:	f001 f8a6 	bl	800f184 <__mcmp>
 800e038:	2800      	cmp	r0, #0
 800e03a:	dc91      	bgt.n	800df60 <_dtoa_r+0xaa8>
 800e03c:	d102      	bne.n	800e044 <_dtoa_r+0xb8c>
 800e03e:	f01a 0f01 	tst.w	sl, #1
 800e042:	d18d      	bne.n	800df60 <_dtoa_r+0xaa8>
 800e044:	462b      	mov	r3, r5
 800e046:	461d      	mov	r5, r3
 800e048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e04c:	2a30      	cmp	r2, #48	; 0x30
 800e04e:	d0fa      	beq.n	800e046 <_dtoa_r+0xb8e>
 800e050:	e6d7      	b.n	800de02 <_dtoa_r+0x94a>
 800e052:	9a01      	ldr	r2, [sp, #4]
 800e054:	429a      	cmp	r2, r3
 800e056:	d184      	bne.n	800df62 <_dtoa_r+0xaaa>
 800e058:	9b00      	ldr	r3, [sp, #0]
 800e05a:	3301      	adds	r3, #1
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	2331      	movs	r3, #49	; 0x31
 800e060:	7013      	strb	r3, [r2, #0]
 800e062:	e6ce      	b.n	800de02 <_dtoa_r+0x94a>
 800e064:	4b09      	ldr	r3, [pc, #36]	; (800e08c <_dtoa_r+0xbd4>)
 800e066:	f7ff ba95 	b.w	800d594 <_dtoa_r+0xdc>
 800e06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f47f aa6e 	bne.w	800d54e <_dtoa_r+0x96>
 800e072:	4b07      	ldr	r3, [pc, #28]	; (800e090 <_dtoa_r+0xbd8>)
 800e074:	f7ff ba8e 	b.w	800d594 <_dtoa_r+0xdc>
 800e078:	9b02      	ldr	r3, [sp, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	dcae      	bgt.n	800dfdc <_dtoa_r+0xb24>
 800e07e:	9b06      	ldr	r3, [sp, #24]
 800e080:	2b02      	cmp	r3, #2
 800e082:	f73f aea8 	bgt.w	800ddd6 <_dtoa_r+0x91e>
 800e086:	e7a9      	b.n	800dfdc <_dtoa_r+0xb24>
 800e088:	080117a0 	.word	0x080117a0
 800e08c:	080115ac 	.word	0x080115ac
 800e090:	08011721 	.word	0x08011721

0800e094 <__sflush_r>:
 800e094:	898a      	ldrh	r2, [r1, #12]
 800e096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09a:	4605      	mov	r5, r0
 800e09c:	0710      	lsls	r0, r2, #28
 800e09e:	460c      	mov	r4, r1
 800e0a0:	d458      	bmi.n	800e154 <__sflush_r+0xc0>
 800e0a2:	684b      	ldr	r3, [r1, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dc05      	bgt.n	800e0b4 <__sflush_r+0x20>
 800e0a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	dc02      	bgt.n	800e0b4 <__sflush_r+0x20>
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0b6:	2e00      	cmp	r6, #0
 800e0b8:	d0f9      	beq.n	800e0ae <__sflush_r+0x1a>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0c0:	682f      	ldr	r7, [r5, #0]
 800e0c2:	602b      	str	r3, [r5, #0]
 800e0c4:	d032      	beq.n	800e12c <__sflush_r+0x98>
 800e0c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	075a      	lsls	r2, r3, #29
 800e0cc:	d505      	bpl.n	800e0da <__sflush_r+0x46>
 800e0ce:	6863      	ldr	r3, [r4, #4]
 800e0d0:	1ac0      	subs	r0, r0, r3
 800e0d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0d4:	b10b      	cbz	r3, 800e0da <__sflush_r+0x46>
 800e0d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0d8:	1ac0      	subs	r0, r0, r3
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4602      	mov	r2, r0
 800e0de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0e0:	6a21      	ldr	r1, [r4, #32]
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	47b0      	blx	r6
 800e0e6:	1c43      	adds	r3, r0, #1
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	d106      	bne.n	800e0fa <__sflush_r+0x66>
 800e0ec:	6829      	ldr	r1, [r5, #0]
 800e0ee:	291d      	cmp	r1, #29
 800e0f0:	d82c      	bhi.n	800e14c <__sflush_r+0xb8>
 800e0f2:	4a2a      	ldr	r2, [pc, #168]	; (800e19c <__sflush_r+0x108>)
 800e0f4:	40ca      	lsrs	r2, r1
 800e0f6:	07d6      	lsls	r6, r2, #31
 800e0f8:	d528      	bpl.n	800e14c <__sflush_r+0xb8>
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	6062      	str	r2, [r4, #4]
 800e0fe:	04d9      	lsls	r1, r3, #19
 800e100:	6922      	ldr	r2, [r4, #16]
 800e102:	6022      	str	r2, [r4, #0]
 800e104:	d504      	bpl.n	800e110 <__sflush_r+0x7c>
 800e106:	1c42      	adds	r2, r0, #1
 800e108:	d101      	bne.n	800e10e <__sflush_r+0x7a>
 800e10a:	682b      	ldr	r3, [r5, #0]
 800e10c:	b903      	cbnz	r3, 800e110 <__sflush_r+0x7c>
 800e10e:	6560      	str	r0, [r4, #84]	; 0x54
 800e110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e112:	602f      	str	r7, [r5, #0]
 800e114:	2900      	cmp	r1, #0
 800e116:	d0ca      	beq.n	800e0ae <__sflush_r+0x1a>
 800e118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e11c:	4299      	cmp	r1, r3
 800e11e:	d002      	beq.n	800e126 <__sflush_r+0x92>
 800e120:	4628      	mov	r0, r5
 800e122:	f001 fa3b 	bl	800f59c <_free_r>
 800e126:	2000      	movs	r0, #0
 800e128:	6360      	str	r0, [r4, #52]	; 0x34
 800e12a:	e7c1      	b.n	800e0b0 <__sflush_r+0x1c>
 800e12c:	6a21      	ldr	r1, [r4, #32]
 800e12e:	2301      	movs	r3, #1
 800e130:	4628      	mov	r0, r5
 800e132:	47b0      	blx	r6
 800e134:	1c41      	adds	r1, r0, #1
 800e136:	d1c7      	bne.n	800e0c8 <__sflush_r+0x34>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d0c4      	beq.n	800e0c8 <__sflush_r+0x34>
 800e13e:	2b1d      	cmp	r3, #29
 800e140:	d001      	beq.n	800e146 <__sflush_r+0xb2>
 800e142:	2b16      	cmp	r3, #22
 800e144:	d101      	bne.n	800e14a <__sflush_r+0xb6>
 800e146:	602f      	str	r7, [r5, #0]
 800e148:	e7b1      	b.n	800e0ae <__sflush_r+0x1a>
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	e7ad      	b.n	800e0b0 <__sflush_r+0x1c>
 800e154:	690f      	ldr	r7, [r1, #16]
 800e156:	2f00      	cmp	r7, #0
 800e158:	d0a9      	beq.n	800e0ae <__sflush_r+0x1a>
 800e15a:	0793      	lsls	r3, r2, #30
 800e15c:	680e      	ldr	r6, [r1, #0]
 800e15e:	bf08      	it	eq
 800e160:	694b      	ldreq	r3, [r1, #20]
 800e162:	600f      	str	r7, [r1, #0]
 800e164:	bf18      	it	ne
 800e166:	2300      	movne	r3, #0
 800e168:	eba6 0807 	sub.w	r8, r6, r7
 800e16c:	608b      	str	r3, [r1, #8]
 800e16e:	f1b8 0f00 	cmp.w	r8, #0
 800e172:	dd9c      	ble.n	800e0ae <__sflush_r+0x1a>
 800e174:	6a21      	ldr	r1, [r4, #32]
 800e176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e178:	4643      	mov	r3, r8
 800e17a:	463a      	mov	r2, r7
 800e17c:	4628      	mov	r0, r5
 800e17e:	47b0      	blx	r6
 800e180:	2800      	cmp	r0, #0
 800e182:	dc06      	bgt.n	800e192 <__sflush_r+0xfe>
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e18a:	81a3      	strh	r3, [r4, #12]
 800e18c:	f04f 30ff 	mov.w	r0, #4294967295
 800e190:	e78e      	b.n	800e0b0 <__sflush_r+0x1c>
 800e192:	4407      	add	r7, r0
 800e194:	eba8 0800 	sub.w	r8, r8, r0
 800e198:	e7e9      	b.n	800e16e <__sflush_r+0xda>
 800e19a:	bf00      	nop
 800e19c:	20400001 	.word	0x20400001

0800e1a0 <_fflush_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	690b      	ldr	r3, [r1, #16]
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	b913      	cbnz	r3, 800e1b0 <_fflush_r+0x10>
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	b118      	cbz	r0, 800e1ba <_fflush_r+0x1a>
 800e1b2:	6983      	ldr	r3, [r0, #24]
 800e1b4:	b90b      	cbnz	r3, 800e1ba <_fflush_r+0x1a>
 800e1b6:	f000 f887 	bl	800e2c8 <__sinit>
 800e1ba:	4b14      	ldr	r3, [pc, #80]	; (800e20c <_fflush_r+0x6c>)
 800e1bc:	429c      	cmp	r4, r3
 800e1be:	d11b      	bne.n	800e1f8 <_fflush_r+0x58>
 800e1c0:	686c      	ldr	r4, [r5, #4]
 800e1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d0ef      	beq.n	800e1aa <_fflush_r+0xa>
 800e1ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1cc:	07d0      	lsls	r0, r2, #31
 800e1ce:	d404      	bmi.n	800e1da <_fflush_r+0x3a>
 800e1d0:	0599      	lsls	r1, r3, #22
 800e1d2:	d402      	bmi.n	800e1da <_fflush_r+0x3a>
 800e1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1d6:	f000 fc88 	bl	800eaea <__retarget_lock_acquire_recursive>
 800e1da:	4628      	mov	r0, r5
 800e1dc:	4621      	mov	r1, r4
 800e1de:	f7ff ff59 	bl	800e094 <__sflush_r>
 800e1e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1e4:	07da      	lsls	r2, r3, #31
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	d4e0      	bmi.n	800e1ac <_fflush_r+0xc>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	d4dd      	bmi.n	800e1ac <_fflush_r+0xc>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f000 fc7b 	bl	800eaec <__retarget_lock_release_recursive>
 800e1f6:	e7d9      	b.n	800e1ac <_fflush_r+0xc>
 800e1f8:	4b05      	ldr	r3, [pc, #20]	; (800e210 <_fflush_r+0x70>)
 800e1fa:	429c      	cmp	r4, r3
 800e1fc:	d101      	bne.n	800e202 <_fflush_r+0x62>
 800e1fe:	68ac      	ldr	r4, [r5, #8]
 800e200:	e7df      	b.n	800e1c2 <_fflush_r+0x22>
 800e202:	4b04      	ldr	r3, [pc, #16]	; (800e214 <_fflush_r+0x74>)
 800e204:	429c      	cmp	r4, r3
 800e206:	bf08      	it	eq
 800e208:	68ec      	ldreq	r4, [r5, #12]
 800e20a:	e7da      	b.n	800e1c2 <_fflush_r+0x22>
 800e20c:	080117d4 	.word	0x080117d4
 800e210:	080117f4 	.word	0x080117f4
 800e214:	080117b4 	.word	0x080117b4

0800e218 <std>:
 800e218:	2300      	movs	r3, #0
 800e21a:	b510      	push	{r4, lr}
 800e21c:	4604      	mov	r4, r0
 800e21e:	e9c0 3300 	strd	r3, r3, [r0]
 800e222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e226:	6083      	str	r3, [r0, #8]
 800e228:	8181      	strh	r1, [r0, #12]
 800e22a:	6643      	str	r3, [r0, #100]	; 0x64
 800e22c:	81c2      	strh	r2, [r0, #14]
 800e22e:	6183      	str	r3, [r0, #24]
 800e230:	4619      	mov	r1, r3
 800e232:	2208      	movs	r2, #8
 800e234:	305c      	adds	r0, #92	; 0x5c
 800e236:	f7fd fc35 	bl	800baa4 <memset>
 800e23a:	4b05      	ldr	r3, [pc, #20]	; (800e250 <std+0x38>)
 800e23c:	6263      	str	r3, [r4, #36]	; 0x24
 800e23e:	4b05      	ldr	r3, [pc, #20]	; (800e254 <std+0x3c>)
 800e240:	62a3      	str	r3, [r4, #40]	; 0x28
 800e242:	4b05      	ldr	r3, [pc, #20]	; (800e258 <std+0x40>)
 800e244:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e246:	4b05      	ldr	r3, [pc, #20]	; (800e25c <std+0x44>)
 800e248:	6224      	str	r4, [r4, #32]
 800e24a:	6323      	str	r3, [r4, #48]	; 0x30
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	0800fa41 	.word	0x0800fa41
 800e254:	0800fa63 	.word	0x0800fa63
 800e258:	0800fa9b 	.word	0x0800fa9b
 800e25c:	0800fabf 	.word	0x0800fabf

0800e260 <_cleanup_r>:
 800e260:	4901      	ldr	r1, [pc, #4]	; (800e268 <_cleanup_r+0x8>)
 800e262:	f000 b8af 	b.w	800e3c4 <_fwalk_reent>
 800e266:	bf00      	nop
 800e268:	0800e1a1 	.word	0x0800e1a1

0800e26c <__sfmoreglue>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	2268      	movs	r2, #104	; 0x68
 800e270:	1e4d      	subs	r5, r1, #1
 800e272:	4355      	muls	r5, r2
 800e274:	460e      	mov	r6, r1
 800e276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e27a:	f001 f9fb 	bl	800f674 <_malloc_r>
 800e27e:	4604      	mov	r4, r0
 800e280:	b140      	cbz	r0, 800e294 <__sfmoreglue+0x28>
 800e282:	2100      	movs	r1, #0
 800e284:	e9c0 1600 	strd	r1, r6, [r0]
 800e288:	300c      	adds	r0, #12
 800e28a:	60a0      	str	r0, [r4, #8]
 800e28c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e290:	f7fd fc08 	bl	800baa4 <memset>
 800e294:	4620      	mov	r0, r4
 800e296:	bd70      	pop	{r4, r5, r6, pc}

0800e298 <__sfp_lock_acquire>:
 800e298:	4801      	ldr	r0, [pc, #4]	; (800e2a0 <__sfp_lock_acquire+0x8>)
 800e29a:	f000 bc26 	b.w	800eaea <__retarget_lock_acquire_recursive>
 800e29e:	bf00      	nop
 800e2a0:	20009621 	.word	0x20009621

0800e2a4 <__sfp_lock_release>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__sfp_lock_release+0x8>)
 800e2a6:	f000 bc21 	b.w	800eaec <__retarget_lock_release_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	20009621 	.word	0x20009621

0800e2b0 <__sinit_lock_acquire>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__sinit_lock_acquire+0x8>)
 800e2b2:	f000 bc1a 	b.w	800eaea <__retarget_lock_acquire_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	20009622 	.word	0x20009622

0800e2bc <__sinit_lock_release>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	; (800e2c4 <__sinit_lock_release+0x8>)
 800e2be:	f000 bc15 	b.w	800eaec <__retarget_lock_release_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	20009622 	.word	0x20009622

0800e2c8 <__sinit>:
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	f7ff fff0 	bl	800e2b0 <__sinit_lock_acquire>
 800e2d0:	69a3      	ldr	r3, [r4, #24]
 800e2d2:	b11b      	cbz	r3, 800e2dc <__sinit+0x14>
 800e2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d8:	f7ff bff0 	b.w	800e2bc <__sinit_lock_release>
 800e2dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2e0:	6523      	str	r3, [r4, #80]	; 0x50
 800e2e2:	4b13      	ldr	r3, [pc, #76]	; (800e330 <__sinit+0x68>)
 800e2e4:	4a13      	ldr	r2, [pc, #76]	; (800e334 <__sinit+0x6c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	bf04      	itt	eq
 800e2ee:	2301      	moveq	r3, #1
 800e2f0:	61a3      	streq	r3, [r4, #24]
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 f820 	bl	800e338 <__sfp>
 800e2f8:	6060      	str	r0, [r4, #4]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f000 f81c 	bl	800e338 <__sfp>
 800e300:	60a0      	str	r0, [r4, #8]
 800e302:	4620      	mov	r0, r4
 800e304:	f000 f818 	bl	800e338 <__sfp>
 800e308:	2200      	movs	r2, #0
 800e30a:	60e0      	str	r0, [r4, #12]
 800e30c:	2104      	movs	r1, #4
 800e30e:	6860      	ldr	r0, [r4, #4]
 800e310:	f7ff ff82 	bl	800e218 <std>
 800e314:	68a0      	ldr	r0, [r4, #8]
 800e316:	2201      	movs	r2, #1
 800e318:	2109      	movs	r1, #9
 800e31a:	f7ff ff7d 	bl	800e218 <std>
 800e31e:	68e0      	ldr	r0, [r4, #12]
 800e320:	2202      	movs	r2, #2
 800e322:	2112      	movs	r1, #18
 800e324:	f7ff ff78 	bl	800e218 <std>
 800e328:	2301      	movs	r3, #1
 800e32a:	61a3      	str	r3, [r4, #24]
 800e32c:	e7d2      	b.n	800e2d4 <__sinit+0xc>
 800e32e:	bf00      	nop
 800e330:	08011598 	.word	0x08011598
 800e334:	0800e261 	.word	0x0800e261

0800e338 <__sfp>:
 800e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33a:	4607      	mov	r7, r0
 800e33c:	f7ff ffac 	bl	800e298 <__sfp_lock_acquire>
 800e340:	4b1e      	ldr	r3, [pc, #120]	; (800e3bc <__sfp+0x84>)
 800e342:	681e      	ldr	r6, [r3, #0]
 800e344:	69b3      	ldr	r3, [r6, #24]
 800e346:	b913      	cbnz	r3, 800e34e <__sfp+0x16>
 800e348:	4630      	mov	r0, r6
 800e34a:	f7ff ffbd 	bl	800e2c8 <__sinit>
 800e34e:	3648      	adds	r6, #72	; 0x48
 800e350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e354:	3b01      	subs	r3, #1
 800e356:	d503      	bpl.n	800e360 <__sfp+0x28>
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	b30b      	cbz	r3, 800e3a0 <__sfp+0x68>
 800e35c:	6836      	ldr	r6, [r6, #0]
 800e35e:	e7f7      	b.n	800e350 <__sfp+0x18>
 800e360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e364:	b9d5      	cbnz	r5, 800e39c <__sfp+0x64>
 800e366:	4b16      	ldr	r3, [pc, #88]	; (800e3c0 <__sfp+0x88>)
 800e368:	60e3      	str	r3, [r4, #12]
 800e36a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e36e:	6665      	str	r5, [r4, #100]	; 0x64
 800e370:	f000 fbba 	bl	800eae8 <__retarget_lock_init_recursive>
 800e374:	f7ff ff96 	bl	800e2a4 <__sfp_lock_release>
 800e378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e37c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e380:	6025      	str	r5, [r4, #0]
 800e382:	61a5      	str	r5, [r4, #24]
 800e384:	2208      	movs	r2, #8
 800e386:	4629      	mov	r1, r5
 800e388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e38c:	f7fd fb8a 	bl	800baa4 <memset>
 800e390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e398:	4620      	mov	r0, r4
 800e39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e39c:	3468      	adds	r4, #104	; 0x68
 800e39e:	e7d9      	b.n	800e354 <__sfp+0x1c>
 800e3a0:	2104      	movs	r1, #4
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	f7ff ff62 	bl	800e26c <__sfmoreglue>
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	6030      	str	r0, [r6, #0]
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d1d5      	bne.n	800e35c <__sfp+0x24>
 800e3b0:	f7ff ff78 	bl	800e2a4 <__sfp_lock_release>
 800e3b4:	230c      	movs	r3, #12
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	e7ee      	b.n	800e398 <__sfp+0x60>
 800e3ba:	bf00      	nop
 800e3bc:	08011598 	.word	0x08011598
 800e3c0:	ffff0001 	.word	0xffff0001

0800e3c4 <_fwalk_reent>:
 800e3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	4688      	mov	r8, r1
 800e3cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3d0:	2700      	movs	r7, #0
 800e3d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3d6:	f1b9 0901 	subs.w	r9, r9, #1
 800e3da:	d505      	bpl.n	800e3e8 <_fwalk_reent+0x24>
 800e3dc:	6824      	ldr	r4, [r4, #0]
 800e3de:	2c00      	cmp	r4, #0
 800e3e0:	d1f7      	bne.n	800e3d2 <_fwalk_reent+0xe>
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e8:	89ab      	ldrh	r3, [r5, #12]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d907      	bls.n	800e3fe <_fwalk_reent+0x3a>
 800e3ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	d003      	beq.n	800e3fe <_fwalk_reent+0x3a>
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	47c0      	blx	r8
 800e3fc:	4307      	orrs	r7, r0
 800e3fe:	3568      	adds	r5, #104	; 0x68
 800e400:	e7e9      	b.n	800e3d6 <_fwalk_reent+0x12>

0800e402 <rshift>:
 800e402:	6903      	ldr	r3, [r0, #16]
 800e404:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e40c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e410:	f100 0414 	add.w	r4, r0, #20
 800e414:	dd45      	ble.n	800e4a2 <rshift+0xa0>
 800e416:	f011 011f 	ands.w	r1, r1, #31
 800e41a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e41e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e422:	d10c      	bne.n	800e43e <rshift+0x3c>
 800e424:	f100 0710 	add.w	r7, r0, #16
 800e428:	4629      	mov	r1, r5
 800e42a:	42b1      	cmp	r1, r6
 800e42c:	d334      	bcc.n	800e498 <rshift+0x96>
 800e42e:	1a9b      	subs	r3, r3, r2
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	1eea      	subs	r2, r5, #3
 800e434:	4296      	cmp	r6, r2
 800e436:	bf38      	it	cc
 800e438:	2300      	movcc	r3, #0
 800e43a:	4423      	add	r3, r4
 800e43c:	e015      	b.n	800e46a <rshift+0x68>
 800e43e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e442:	f1c1 0820 	rsb	r8, r1, #32
 800e446:	40cf      	lsrs	r7, r1
 800e448:	f105 0e04 	add.w	lr, r5, #4
 800e44c:	46a1      	mov	r9, r4
 800e44e:	4576      	cmp	r6, lr
 800e450:	46f4      	mov	ip, lr
 800e452:	d815      	bhi.n	800e480 <rshift+0x7e>
 800e454:	1a9a      	subs	r2, r3, r2
 800e456:	0092      	lsls	r2, r2, #2
 800e458:	3a04      	subs	r2, #4
 800e45a:	3501      	adds	r5, #1
 800e45c:	42ae      	cmp	r6, r5
 800e45e:	bf38      	it	cc
 800e460:	2200      	movcc	r2, #0
 800e462:	18a3      	adds	r3, r4, r2
 800e464:	50a7      	str	r7, [r4, r2]
 800e466:	b107      	cbz	r7, 800e46a <rshift+0x68>
 800e468:	3304      	adds	r3, #4
 800e46a:	1b1a      	subs	r2, r3, r4
 800e46c:	42a3      	cmp	r3, r4
 800e46e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e472:	bf08      	it	eq
 800e474:	2300      	moveq	r3, #0
 800e476:	6102      	str	r2, [r0, #16]
 800e478:	bf08      	it	eq
 800e47a:	6143      	streq	r3, [r0, #20]
 800e47c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e480:	f8dc c000 	ldr.w	ip, [ip]
 800e484:	fa0c fc08 	lsl.w	ip, ip, r8
 800e488:	ea4c 0707 	orr.w	r7, ip, r7
 800e48c:	f849 7b04 	str.w	r7, [r9], #4
 800e490:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e494:	40cf      	lsrs	r7, r1
 800e496:	e7da      	b.n	800e44e <rshift+0x4c>
 800e498:	f851 cb04 	ldr.w	ip, [r1], #4
 800e49c:	f847 cf04 	str.w	ip, [r7, #4]!
 800e4a0:	e7c3      	b.n	800e42a <rshift+0x28>
 800e4a2:	4623      	mov	r3, r4
 800e4a4:	e7e1      	b.n	800e46a <rshift+0x68>

0800e4a6 <__hexdig_fun>:
 800e4a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e4aa:	2b09      	cmp	r3, #9
 800e4ac:	d802      	bhi.n	800e4b4 <__hexdig_fun+0xe>
 800e4ae:	3820      	subs	r0, #32
 800e4b0:	b2c0      	uxtb	r0, r0
 800e4b2:	4770      	bx	lr
 800e4b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e4b8:	2b05      	cmp	r3, #5
 800e4ba:	d801      	bhi.n	800e4c0 <__hexdig_fun+0x1a>
 800e4bc:	3847      	subs	r0, #71	; 0x47
 800e4be:	e7f7      	b.n	800e4b0 <__hexdig_fun+0xa>
 800e4c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e4c4:	2b05      	cmp	r3, #5
 800e4c6:	d801      	bhi.n	800e4cc <__hexdig_fun+0x26>
 800e4c8:	3827      	subs	r0, #39	; 0x27
 800e4ca:	e7f1      	b.n	800e4b0 <__hexdig_fun+0xa>
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	4770      	bx	lr

0800e4d0 <__gethex>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	ed2d 8b02 	vpush	{d8}
 800e4d8:	b089      	sub	sp, #36	; 0x24
 800e4da:	ee08 0a10 	vmov	s16, r0
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	4bb4      	ldr	r3, [pc, #720]	; (800e7b4 <__gethex+0x2e4>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	468b      	mov	fp, r1
 800e4ea:	4690      	mov	r8, r2
 800e4ec:	f7f1 fe90 	bl	8000210 <strlen>
 800e4f0:	9b01      	ldr	r3, [sp, #4]
 800e4f2:	f8db 2000 	ldr.w	r2, [fp]
 800e4f6:	4403      	add	r3, r0
 800e4f8:	4682      	mov	sl, r0
 800e4fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e4fe:	9305      	str	r3, [sp, #20]
 800e500:	1c93      	adds	r3, r2, #2
 800e502:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e506:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e50a:	32fe      	adds	r2, #254	; 0xfe
 800e50c:	18d1      	adds	r1, r2, r3
 800e50e:	461f      	mov	r7, r3
 800e510:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e514:	9100      	str	r1, [sp, #0]
 800e516:	2830      	cmp	r0, #48	; 0x30
 800e518:	d0f8      	beq.n	800e50c <__gethex+0x3c>
 800e51a:	f7ff ffc4 	bl	800e4a6 <__hexdig_fun>
 800e51e:	4604      	mov	r4, r0
 800e520:	2800      	cmp	r0, #0
 800e522:	d13a      	bne.n	800e59a <__gethex+0xca>
 800e524:	9901      	ldr	r1, [sp, #4]
 800e526:	4652      	mov	r2, sl
 800e528:	4638      	mov	r0, r7
 800e52a:	f001 facc 	bl	800fac6 <strncmp>
 800e52e:	4605      	mov	r5, r0
 800e530:	2800      	cmp	r0, #0
 800e532:	d168      	bne.n	800e606 <__gethex+0x136>
 800e534:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e538:	eb07 060a 	add.w	r6, r7, sl
 800e53c:	f7ff ffb3 	bl	800e4a6 <__hexdig_fun>
 800e540:	2800      	cmp	r0, #0
 800e542:	d062      	beq.n	800e60a <__gethex+0x13a>
 800e544:	4633      	mov	r3, r6
 800e546:	7818      	ldrb	r0, [r3, #0]
 800e548:	2830      	cmp	r0, #48	; 0x30
 800e54a:	461f      	mov	r7, r3
 800e54c:	f103 0301 	add.w	r3, r3, #1
 800e550:	d0f9      	beq.n	800e546 <__gethex+0x76>
 800e552:	f7ff ffa8 	bl	800e4a6 <__hexdig_fun>
 800e556:	2301      	movs	r3, #1
 800e558:	fab0 f480 	clz	r4, r0
 800e55c:	0964      	lsrs	r4, r4, #5
 800e55e:	4635      	mov	r5, r6
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	463a      	mov	r2, r7
 800e564:	4616      	mov	r6, r2
 800e566:	3201      	adds	r2, #1
 800e568:	7830      	ldrb	r0, [r6, #0]
 800e56a:	f7ff ff9c 	bl	800e4a6 <__hexdig_fun>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d1f8      	bne.n	800e564 <__gethex+0x94>
 800e572:	9901      	ldr	r1, [sp, #4]
 800e574:	4652      	mov	r2, sl
 800e576:	4630      	mov	r0, r6
 800e578:	f001 faa5 	bl	800fac6 <strncmp>
 800e57c:	b980      	cbnz	r0, 800e5a0 <__gethex+0xd0>
 800e57e:	b94d      	cbnz	r5, 800e594 <__gethex+0xc4>
 800e580:	eb06 050a 	add.w	r5, r6, sl
 800e584:	462a      	mov	r2, r5
 800e586:	4616      	mov	r6, r2
 800e588:	3201      	adds	r2, #1
 800e58a:	7830      	ldrb	r0, [r6, #0]
 800e58c:	f7ff ff8b 	bl	800e4a6 <__hexdig_fun>
 800e590:	2800      	cmp	r0, #0
 800e592:	d1f8      	bne.n	800e586 <__gethex+0xb6>
 800e594:	1bad      	subs	r5, r5, r6
 800e596:	00ad      	lsls	r5, r5, #2
 800e598:	e004      	b.n	800e5a4 <__gethex+0xd4>
 800e59a:	2400      	movs	r4, #0
 800e59c:	4625      	mov	r5, r4
 800e59e:	e7e0      	b.n	800e562 <__gethex+0x92>
 800e5a0:	2d00      	cmp	r5, #0
 800e5a2:	d1f7      	bne.n	800e594 <__gethex+0xc4>
 800e5a4:	7833      	ldrb	r3, [r6, #0]
 800e5a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e5aa:	2b50      	cmp	r3, #80	; 0x50
 800e5ac:	d13b      	bne.n	800e626 <__gethex+0x156>
 800e5ae:	7873      	ldrb	r3, [r6, #1]
 800e5b0:	2b2b      	cmp	r3, #43	; 0x2b
 800e5b2:	d02c      	beq.n	800e60e <__gethex+0x13e>
 800e5b4:	2b2d      	cmp	r3, #45	; 0x2d
 800e5b6:	d02e      	beq.n	800e616 <__gethex+0x146>
 800e5b8:	1c71      	adds	r1, r6, #1
 800e5ba:	f04f 0900 	mov.w	r9, #0
 800e5be:	7808      	ldrb	r0, [r1, #0]
 800e5c0:	f7ff ff71 	bl	800e4a6 <__hexdig_fun>
 800e5c4:	1e43      	subs	r3, r0, #1
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	2b18      	cmp	r3, #24
 800e5ca:	d82c      	bhi.n	800e626 <__gethex+0x156>
 800e5cc:	f1a0 0210 	sub.w	r2, r0, #16
 800e5d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e5d4:	f7ff ff67 	bl	800e4a6 <__hexdig_fun>
 800e5d8:	1e43      	subs	r3, r0, #1
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	2b18      	cmp	r3, #24
 800e5de:	d91d      	bls.n	800e61c <__gethex+0x14c>
 800e5e0:	f1b9 0f00 	cmp.w	r9, #0
 800e5e4:	d000      	beq.n	800e5e8 <__gethex+0x118>
 800e5e6:	4252      	negs	r2, r2
 800e5e8:	4415      	add	r5, r2
 800e5ea:	f8cb 1000 	str.w	r1, [fp]
 800e5ee:	b1e4      	cbz	r4, 800e62a <__gethex+0x15a>
 800e5f0:	9b00      	ldr	r3, [sp, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	bf14      	ite	ne
 800e5f6:	2700      	movne	r7, #0
 800e5f8:	2706      	moveq	r7, #6
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	b009      	add	sp, #36	; 0x24
 800e5fe:	ecbd 8b02 	vpop	{d8}
 800e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e606:	463e      	mov	r6, r7
 800e608:	4625      	mov	r5, r4
 800e60a:	2401      	movs	r4, #1
 800e60c:	e7ca      	b.n	800e5a4 <__gethex+0xd4>
 800e60e:	f04f 0900 	mov.w	r9, #0
 800e612:	1cb1      	adds	r1, r6, #2
 800e614:	e7d3      	b.n	800e5be <__gethex+0xee>
 800e616:	f04f 0901 	mov.w	r9, #1
 800e61a:	e7fa      	b.n	800e612 <__gethex+0x142>
 800e61c:	230a      	movs	r3, #10
 800e61e:	fb03 0202 	mla	r2, r3, r2, r0
 800e622:	3a10      	subs	r2, #16
 800e624:	e7d4      	b.n	800e5d0 <__gethex+0x100>
 800e626:	4631      	mov	r1, r6
 800e628:	e7df      	b.n	800e5ea <__gethex+0x11a>
 800e62a:	1bf3      	subs	r3, r6, r7
 800e62c:	3b01      	subs	r3, #1
 800e62e:	4621      	mov	r1, r4
 800e630:	2b07      	cmp	r3, #7
 800e632:	dc0b      	bgt.n	800e64c <__gethex+0x17c>
 800e634:	ee18 0a10 	vmov	r0, s16
 800e638:	f000 fad8 	bl	800ebec <_Balloc>
 800e63c:	4604      	mov	r4, r0
 800e63e:	b940      	cbnz	r0, 800e652 <__gethex+0x182>
 800e640:	4b5d      	ldr	r3, [pc, #372]	; (800e7b8 <__gethex+0x2e8>)
 800e642:	4602      	mov	r2, r0
 800e644:	21de      	movs	r1, #222	; 0xde
 800e646:	485d      	ldr	r0, [pc, #372]	; (800e7bc <__gethex+0x2ec>)
 800e648:	f001 fa70 	bl	800fb2c <__assert_func>
 800e64c:	3101      	adds	r1, #1
 800e64e:	105b      	asrs	r3, r3, #1
 800e650:	e7ee      	b.n	800e630 <__gethex+0x160>
 800e652:	f100 0914 	add.w	r9, r0, #20
 800e656:	f04f 0b00 	mov.w	fp, #0
 800e65a:	f1ca 0301 	rsb	r3, sl, #1
 800e65e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e662:	f8cd b000 	str.w	fp, [sp]
 800e666:	9306      	str	r3, [sp, #24]
 800e668:	42b7      	cmp	r7, r6
 800e66a:	d340      	bcc.n	800e6ee <__gethex+0x21e>
 800e66c:	9802      	ldr	r0, [sp, #8]
 800e66e:	9b00      	ldr	r3, [sp, #0]
 800e670:	f840 3b04 	str.w	r3, [r0], #4
 800e674:	eba0 0009 	sub.w	r0, r0, r9
 800e678:	1080      	asrs	r0, r0, #2
 800e67a:	0146      	lsls	r6, r0, #5
 800e67c:	6120      	str	r0, [r4, #16]
 800e67e:	4618      	mov	r0, r3
 800e680:	f000 fba6 	bl	800edd0 <__hi0bits>
 800e684:	1a30      	subs	r0, r6, r0
 800e686:	f8d8 6000 	ldr.w	r6, [r8]
 800e68a:	42b0      	cmp	r0, r6
 800e68c:	dd63      	ble.n	800e756 <__gethex+0x286>
 800e68e:	1b87      	subs	r7, r0, r6
 800e690:	4639      	mov	r1, r7
 800e692:	4620      	mov	r0, r4
 800e694:	f000 ff4a 	bl	800f52c <__any_on>
 800e698:	4682      	mov	sl, r0
 800e69a:	b1a8      	cbz	r0, 800e6c8 <__gethex+0x1f8>
 800e69c:	1e7b      	subs	r3, r7, #1
 800e69e:	1159      	asrs	r1, r3, #5
 800e6a0:	f003 021f 	and.w	r2, r3, #31
 800e6a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e6a8:	f04f 0a01 	mov.w	sl, #1
 800e6ac:	fa0a f202 	lsl.w	r2, sl, r2
 800e6b0:	420a      	tst	r2, r1
 800e6b2:	d009      	beq.n	800e6c8 <__gethex+0x1f8>
 800e6b4:	4553      	cmp	r3, sl
 800e6b6:	dd05      	ble.n	800e6c4 <__gethex+0x1f4>
 800e6b8:	1eb9      	subs	r1, r7, #2
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f000 ff36 	bl	800f52c <__any_on>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d145      	bne.n	800e750 <__gethex+0x280>
 800e6c4:	f04f 0a02 	mov.w	sl, #2
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7ff fe99 	bl	800e402 <rshift>
 800e6d0:	443d      	add	r5, r7
 800e6d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6d6:	42ab      	cmp	r3, r5
 800e6d8:	da4c      	bge.n	800e774 <__gethex+0x2a4>
 800e6da:	ee18 0a10 	vmov	r0, s16
 800e6de:	4621      	mov	r1, r4
 800e6e0:	f000 fac4 	bl	800ec6c <_Bfree>
 800e6e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	27a3      	movs	r7, #163	; 0xa3
 800e6ec:	e785      	b.n	800e5fa <__gethex+0x12a>
 800e6ee:	1e73      	subs	r3, r6, #1
 800e6f0:	9a05      	ldr	r2, [sp, #20]
 800e6f2:	9303      	str	r3, [sp, #12]
 800e6f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d019      	beq.n	800e730 <__gethex+0x260>
 800e6fc:	f1bb 0f20 	cmp.w	fp, #32
 800e700:	d107      	bne.n	800e712 <__gethex+0x242>
 800e702:	9b02      	ldr	r3, [sp, #8]
 800e704:	9a00      	ldr	r2, [sp, #0]
 800e706:	f843 2b04 	str.w	r2, [r3], #4
 800e70a:	9302      	str	r3, [sp, #8]
 800e70c:	2300      	movs	r3, #0
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	469b      	mov	fp, r3
 800e712:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e716:	f7ff fec6 	bl	800e4a6 <__hexdig_fun>
 800e71a:	9b00      	ldr	r3, [sp, #0]
 800e71c:	f000 000f 	and.w	r0, r0, #15
 800e720:	fa00 f00b 	lsl.w	r0, r0, fp
 800e724:	4303      	orrs	r3, r0
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	f10b 0b04 	add.w	fp, fp, #4
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	e00d      	b.n	800e74c <__gethex+0x27c>
 800e730:	9b03      	ldr	r3, [sp, #12]
 800e732:	9a06      	ldr	r2, [sp, #24]
 800e734:	4413      	add	r3, r2
 800e736:	42bb      	cmp	r3, r7
 800e738:	d3e0      	bcc.n	800e6fc <__gethex+0x22c>
 800e73a:	4618      	mov	r0, r3
 800e73c:	9901      	ldr	r1, [sp, #4]
 800e73e:	9307      	str	r3, [sp, #28]
 800e740:	4652      	mov	r2, sl
 800e742:	f001 f9c0 	bl	800fac6 <strncmp>
 800e746:	9b07      	ldr	r3, [sp, #28]
 800e748:	2800      	cmp	r0, #0
 800e74a:	d1d7      	bne.n	800e6fc <__gethex+0x22c>
 800e74c:	461e      	mov	r6, r3
 800e74e:	e78b      	b.n	800e668 <__gethex+0x198>
 800e750:	f04f 0a03 	mov.w	sl, #3
 800e754:	e7b8      	b.n	800e6c8 <__gethex+0x1f8>
 800e756:	da0a      	bge.n	800e76e <__gethex+0x29e>
 800e758:	1a37      	subs	r7, r6, r0
 800e75a:	4621      	mov	r1, r4
 800e75c:	ee18 0a10 	vmov	r0, s16
 800e760:	463a      	mov	r2, r7
 800e762:	f000 fc9f 	bl	800f0a4 <__lshift>
 800e766:	1bed      	subs	r5, r5, r7
 800e768:	4604      	mov	r4, r0
 800e76a:	f100 0914 	add.w	r9, r0, #20
 800e76e:	f04f 0a00 	mov.w	sl, #0
 800e772:	e7ae      	b.n	800e6d2 <__gethex+0x202>
 800e774:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e778:	42a8      	cmp	r0, r5
 800e77a:	dd72      	ble.n	800e862 <__gethex+0x392>
 800e77c:	1b45      	subs	r5, r0, r5
 800e77e:	42ae      	cmp	r6, r5
 800e780:	dc36      	bgt.n	800e7f0 <__gethex+0x320>
 800e782:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d02a      	beq.n	800e7e0 <__gethex+0x310>
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d02c      	beq.n	800e7e8 <__gethex+0x318>
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d11c      	bne.n	800e7cc <__gethex+0x2fc>
 800e792:	42ae      	cmp	r6, r5
 800e794:	d11a      	bne.n	800e7cc <__gethex+0x2fc>
 800e796:	2e01      	cmp	r6, #1
 800e798:	d112      	bne.n	800e7c0 <__gethex+0x2f0>
 800e79a:	9a04      	ldr	r2, [sp, #16]
 800e79c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7a0:	6013      	str	r3, [r2, #0]
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	6123      	str	r3, [r4, #16]
 800e7a6:	f8c9 3000 	str.w	r3, [r9]
 800e7aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7ac:	2762      	movs	r7, #98	; 0x62
 800e7ae:	601c      	str	r4, [r3, #0]
 800e7b0:	e723      	b.n	800e5fa <__gethex+0x12a>
 800e7b2:	bf00      	nop
 800e7b4:	0801187c 	.word	0x0801187c
 800e7b8:	080117a0 	.word	0x080117a0
 800e7bc:	08011814 	.word	0x08011814
 800e7c0:	1e71      	subs	r1, r6, #1
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f000 feb2 	bl	800f52c <__any_on>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d1e6      	bne.n	800e79a <__gethex+0x2ca>
 800e7cc:	ee18 0a10 	vmov	r0, s16
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	f000 fa4b 	bl	800ec6c <_Bfree>
 800e7d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e7d8:	2300      	movs	r3, #0
 800e7da:	6013      	str	r3, [r2, #0]
 800e7dc:	2750      	movs	r7, #80	; 0x50
 800e7de:	e70c      	b.n	800e5fa <__gethex+0x12a>
 800e7e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1f2      	bne.n	800e7cc <__gethex+0x2fc>
 800e7e6:	e7d8      	b.n	800e79a <__gethex+0x2ca>
 800e7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1d5      	bne.n	800e79a <__gethex+0x2ca>
 800e7ee:	e7ed      	b.n	800e7cc <__gethex+0x2fc>
 800e7f0:	1e6f      	subs	r7, r5, #1
 800e7f2:	f1ba 0f00 	cmp.w	sl, #0
 800e7f6:	d131      	bne.n	800e85c <__gethex+0x38c>
 800e7f8:	b127      	cbz	r7, 800e804 <__gethex+0x334>
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f000 fe95 	bl	800f52c <__any_on>
 800e802:	4682      	mov	sl, r0
 800e804:	117b      	asrs	r3, r7, #5
 800e806:	2101      	movs	r1, #1
 800e808:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e80c:	f007 071f 	and.w	r7, r7, #31
 800e810:	fa01 f707 	lsl.w	r7, r1, r7
 800e814:	421f      	tst	r7, r3
 800e816:	4629      	mov	r1, r5
 800e818:	4620      	mov	r0, r4
 800e81a:	bf18      	it	ne
 800e81c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e820:	1b76      	subs	r6, r6, r5
 800e822:	f7ff fdee 	bl	800e402 <rshift>
 800e826:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e82a:	2702      	movs	r7, #2
 800e82c:	f1ba 0f00 	cmp.w	sl, #0
 800e830:	d048      	beq.n	800e8c4 <__gethex+0x3f4>
 800e832:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e836:	2b02      	cmp	r3, #2
 800e838:	d015      	beq.n	800e866 <__gethex+0x396>
 800e83a:	2b03      	cmp	r3, #3
 800e83c:	d017      	beq.n	800e86e <__gethex+0x39e>
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d109      	bne.n	800e856 <__gethex+0x386>
 800e842:	f01a 0f02 	tst.w	sl, #2
 800e846:	d006      	beq.n	800e856 <__gethex+0x386>
 800e848:	f8d9 0000 	ldr.w	r0, [r9]
 800e84c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e850:	f01a 0f01 	tst.w	sl, #1
 800e854:	d10e      	bne.n	800e874 <__gethex+0x3a4>
 800e856:	f047 0710 	orr.w	r7, r7, #16
 800e85a:	e033      	b.n	800e8c4 <__gethex+0x3f4>
 800e85c:	f04f 0a01 	mov.w	sl, #1
 800e860:	e7d0      	b.n	800e804 <__gethex+0x334>
 800e862:	2701      	movs	r7, #1
 800e864:	e7e2      	b.n	800e82c <__gethex+0x35c>
 800e866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e868:	f1c3 0301 	rsb	r3, r3, #1
 800e86c:	9315      	str	r3, [sp, #84]	; 0x54
 800e86e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e870:	2b00      	cmp	r3, #0
 800e872:	d0f0      	beq.n	800e856 <__gethex+0x386>
 800e874:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e878:	f104 0314 	add.w	r3, r4, #20
 800e87c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e880:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e884:	f04f 0c00 	mov.w	ip, #0
 800e888:	4618      	mov	r0, r3
 800e88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e88e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e892:	d01c      	beq.n	800e8ce <__gethex+0x3fe>
 800e894:	3201      	adds	r2, #1
 800e896:	6002      	str	r2, [r0, #0]
 800e898:	2f02      	cmp	r7, #2
 800e89a:	f104 0314 	add.w	r3, r4, #20
 800e89e:	d13f      	bne.n	800e920 <__gethex+0x450>
 800e8a0:	f8d8 2000 	ldr.w	r2, [r8]
 800e8a4:	3a01      	subs	r2, #1
 800e8a6:	42b2      	cmp	r2, r6
 800e8a8:	d10a      	bne.n	800e8c0 <__gethex+0x3f0>
 800e8aa:	1171      	asrs	r1, r6, #5
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8b2:	f006 061f 	and.w	r6, r6, #31
 800e8b6:	fa02 f606 	lsl.w	r6, r2, r6
 800e8ba:	421e      	tst	r6, r3
 800e8bc:	bf18      	it	ne
 800e8be:	4617      	movne	r7, r2
 800e8c0:	f047 0720 	orr.w	r7, r7, #32
 800e8c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8c6:	601c      	str	r4, [r3, #0]
 800e8c8:	9b04      	ldr	r3, [sp, #16]
 800e8ca:	601d      	str	r5, [r3, #0]
 800e8cc:	e695      	b.n	800e5fa <__gethex+0x12a>
 800e8ce:	4299      	cmp	r1, r3
 800e8d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800e8d4:	d8d8      	bhi.n	800e888 <__gethex+0x3b8>
 800e8d6:	68a3      	ldr	r3, [r4, #8]
 800e8d8:	459b      	cmp	fp, r3
 800e8da:	db19      	blt.n	800e910 <__gethex+0x440>
 800e8dc:	6861      	ldr	r1, [r4, #4]
 800e8de:	ee18 0a10 	vmov	r0, s16
 800e8e2:	3101      	adds	r1, #1
 800e8e4:	f000 f982 	bl	800ebec <_Balloc>
 800e8e8:	4681      	mov	r9, r0
 800e8ea:	b918      	cbnz	r0, 800e8f4 <__gethex+0x424>
 800e8ec:	4b1a      	ldr	r3, [pc, #104]	; (800e958 <__gethex+0x488>)
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	2184      	movs	r1, #132	; 0x84
 800e8f2:	e6a8      	b.n	800e646 <__gethex+0x176>
 800e8f4:	6922      	ldr	r2, [r4, #16]
 800e8f6:	3202      	adds	r2, #2
 800e8f8:	f104 010c 	add.w	r1, r4, #12
 800e8fc:	0092      	lsls	r2, r2, #2
 800e8fe:	300c      	adds	r0, #12
 800e900:	f7fd f8c2 	bl	800ba88 <memcpy>
 800e904:	4621      	mov	r1, r4
 800e906:	ee18 0a10 	vmov	r0, s16
 800e90a:	f000 f9af 	bl	800ec6c <_Bfree>
 800e90e:	464c      	mov	r4, r9
 800e910:	6923      	ldr	r3, [r4, #16]
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e918:	6122      	str	r2, [r4, #16]
 800e91a:	2201      	movs	r2, #1
 800e91c:	615a      	str	r2, [r3, #20]
 800e91e:	e7bb      	b.n	800e898 <__gethex+0x3c8>
 800e920:	6922      	ldr	r2, [r4, #16]
 800e922:	455a      	cmp	r2, fp
 800e924:	dd0b      	ble.n	800e93e <__gethex+0x46e>
 800e926:	2101      	movs	r1, #1
 800e928:	4620      	mov	r0, r4
 800e92a:	f7ff fd6a 	bl	800e402 <rshift>
 800e92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e932:	3501      	adds	r5, #1
 800e934:	42ab      	cmp	r3, r5
 800e936:	f6ff aed0 	blt.w	800e6da <__gethex+0x20a>
 800e93a:	2701      	movs	r7, #1
 800e93c:	e7c0      	b.n	800e8c0 <__gethex+0x3f0>
 800e93e:	f016 061f 	ands.w	r6, r6, #31
 800e942:	d0fa      	beq.n	800e93a <__gethex+0x46a>
 800e944:	4453      	add	r3, sl
 800e946:	f1c6 0620 	rsb	r6, r6, #32
 800e94a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e94e:	f000 fa3f 	bl	800edd0 <__hi0bits>
 800e952:	42b0      	cmp	r0, r6
 800e954:	dbe7      	blt.n	800e926 <__gethex+0x456>
 800e956:	e7f0      	b.n	800e93a <__gethex+0x46a>
 800e958:	080117a0 	.word	0x080117a0

0800e95c <L_shift>:
 800e95c:	f1c2 0208 	rsb	r2, r2, #8
 800e960:	0092      	lsls	r2, r2, #2
 800e962:	b570      	push	{r4, r5, r6, lr}
 800e964:	f1c2 0620 	rsb	r6, r2, #32
 800e968:	6843      	ldr	r3, [r0, #4]
 800e96a:	6804      	ldr	r4, [r0, #0]
 800e96c:	fa03 f506 	lsl.w	r5, r3, r6
 800e970:	432c      	orrs	r4, r5
 800e972:	40d3      	lsrs	r3, r2
 800e974:	6004      	str	r4, [r0, #0]
 800e976:	f840 3f04 	str.w	r3, [r0, #4]!
 800e97a:	4288      	cmp	r0, r1
 800e97c:	d3f4      	bcc.n	800e968 <L_shift+0xc>
 800e97e:	bd70      	pop	{r4, r5, r6, pc}

0800e980 <__match>:
 800e980:	b530      	push	{r4, r5, lr}
 800e982:	6803      	ldr	r3, [r0, #0]
 800e984:	3301      	adds	r3, #1
 800e986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e98a:	b914      	cbnz	r4, 800e992 <__match+0x12>
 800e98c:	6003      	str	r3, [r0, #0]
 800e98e:	2001      	movs	r0, #1
 800e990:	bd30      	pop	{r4, r5, pc}
 800e992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e996:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e99a:	2d19      	cmp	r5, #25
 800e99c:	bf98      	it	ls
 800e99e:	3220      	addls	r2, #32
 800e9a0:	42a2      	cmp	r2, r4
 800e9a2:	d0f0      	beq.n	800e986 <__match+0x6>
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	e7f3      	b.n	800e990 <__match+0x10>

0800e9a8 <__hexnan>:
 800e9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ac:	680b      	ldr	r3, [r1, #0]
 800e9ae:	115e      	asrs	r6, r3, #5
 800e9b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e9b4:	f013 031f 	ands.w	r3, r3, #31
 800e9b8:	b087      	sub	sp, #28
 800e9ba:	bf18      	it	ne
 800e9bc:	3604      	addne	r6, #4
 800e9be:	2500      	movs	r5, #0
 800e9c0:	1f37      	subs	r7, r6, #4
 800e9c2:	4690      	mov	r8, r2
 800e9c4:	6802      	ldr	r2, [r0, #0]
 800e9c6:	9301      	str	r3, [sp, #4]
 800e9c8:	4682      	mov	sl, r0
 800e9ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800e9ce:	46b9      	mov	r9, r7
 800e9d0:	463c      	mov	r4, r7
 800e9d2:	9502      	str	r5, [sp, #8]
 800e9d4:	46ab      	mov	fp, r5
 800e9d6:	7851      	ldrb	r1, [r2, #1]
 800e9d8:	1c53      	adds	r3, r2, #1
 800e9da:	9303      	str	r3, [sp, #12]
 800e9dc:	b341      	cbz	r1, 800ea30 <__hexnan+0x88>
 800e9de:	4608      	mov	r0, r1
 800e9e0:	9205      	str	r2, [sp, #20]
 800e9e2:	9104      	str	r1, [sp, #16]
 800e9e4:	f7ff fd5f 	bl	800e4a6 <__hexdig_fun>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d14f      	bne.n	800ea8c <__hexnan+0xe4>
 800e9ec:	9904      	ldr	r1, [sp, #16]
 800e9ee:	9a05      	ldr	r2, [sp, #20]
 800e9f0:	2920      	cmp	r1, #32
 800e9f2:	d818      	bhi.n	800ea26 <__hexnan+0x7e>
 800e9f4:	9b02      	ldr	r3, [sp, #8]
 800e9f6:	459b      	cmp	fp, r3
 800e9f8:	dd13      	ble.n	800ea22 <__hexnan+0x7a>
 800e9fa:	454c      	cmp	r4, r9
 800e9fc:	d206      	bcs.n	800ea0c <__hexnan+0x64>
 800e9fe:	2d07      	cmp	r5, #7
 800ea00:	dc04      	bgt.n	800ea0c <__hexnan+0x64>
 800ea02:	462a      	mov	r2, r5
 800ea04:	4649      	mov	r1, r9
 800ea06:	4620      	mov	r0, r4
 800ea08:	f7ff ffa8 	bl	800e95c <L_shift>
 800ea0c:	4544      	cmp	r4, r8
 800ea0e:	d950      	bls.n	800eab2 <__hexnan+0x10a>
 800ea10:	2300      	movs	r3, #0
 800ea12:	f1a4 0904 	sub.w	r9, r4, #4
 800ea16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea1a:	f8cd b008 	str.w	fp, [sp, #8]
 800ea1e:	464c      	mov	r4, r9
 800ea20:	461d      	mov	r5, r3
 800ea22:	9a03      	ldr	r2, [sp, #12]
 800ea24:	e7d7      	b.n	800e9d6 <__hexnan+0x2e>
 800ea26:	2929      	cmp	r1, #41	; 0x29
 800ea28:	d156      	bne.n	800ead8 <__hexnan+0x130>
 800ea2a:	3202      	adds	r2, #2
 800ea2c:	f8ca 2000 	str.w	r2, [sl]
 800ea30:	f1bb 0f00 	cmp.w	fp, #0
 800ea34:	d050      	beq.n	800ead8 <__hexnan+0x130>
 800ea36:	454c      	cmp	r4, r9
 800ea38:	d206      	bcs.n	800ea48 <__hexnan+0xa0>
 800ea3a:	2d07      	cmp	r5, #7
 800ea3c:	dc04      	bgt.n	800ea48 <__hexnan+0xa0>
 800ea3e:	462a      	mov	r2, r5
 800ea40:	4649      	mov	r1, r9
 800ea42:	4620      	mov	r0, r4
 800ea44:	f7ff ff8a 	bl	800e95c <L_shift>
 800ea48:	4544      	cmp	r4, r8
 800ea4a:	d934      	bls.n	800eab6 <__hexnan+0x10e>
 800ea4c:	f1a8 0204 	sub.w	r2, r8, #4
 800ea50:	4623      	mov	r3, r4
 800ea52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea56:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea5a:	429f      	cmp	r7, r3
 800ea5c:	d2f9      	bcs.n	800ea52 <__hexnan+0xaa>
 800ea5e:	1b3b      	subs	r3, r7, r4
 800ea60:	f023 0303 	bic.w	r3, r3, #3
 800ea64:	3304      	adds	r3, #4
 800ea66:	3401      	adds	r4, #1
 800ea68:	3e03      	subs	r6, #3
 800ea6a:	42b4      	cmp	r4, r6
 800ea6c:	bf88      	it	hi
 800ea6e:	2304      	movhi	r3, #4
 800ea70:	4443      	add	r3, r8
 800ea72:	2200      	movs	r2, #0
 800ea74:	f843 2b04 	str.w	r2, [r3], #4
 800ea78:	429f      	cmp	r7, r3
 800ea7a:	d2fb      	bcs.n	800ea74 <__hexnan+0xcc>
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	b91b      	cbnz	r3, 800ea88 <__hexnan+0xe0>
 800ea80:	4547      	cmp	r7, r8
 800ea82:	d127      	bne.n	800ead4 <__hexnan+0x12c>
 800ea84:	2301      	movs	r3, #1
 800ea86:	603b      	str	r3, [r7, #0]
 800ea88:	2005      	movs	r0, #5
 800ea8a:	e026      	b.n	800eada <__hexnan+0x132>
 800ea8c:	3501      	adds	r5, #1
 800ea8e:	2d08      	cmp	r5, #8
 800ea90:	f10b 0b01 	add.w	fp, fp, #1
 800ea94:	dd06      	ble.n	800eaa4 <__hexnan+0xfc>
 800ea96:	4544      	cmp	r4, r8
 800ea98:	d9c3      	bls.n	800ea22 <__hexnan+0x7a>
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f844 3c04 	str.w	r3, [r4, #-4]
 800eaa0:	2501      	movs	r5, #1
 800eaa2:	3c04      	subs	r4, #4
 800eaa4:	6822      	ldr	r2, [r4, #0]
 800eaa6:	f000 000f 	and.w	r0, r0, #15
 800eaaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eaae:	6022      	str	r2, [r4, #0]
 800eab0:	e7b7      	b.n	800ea22 <__hexnan+0x7a>
 800eab2:	2508      	movs	r5, #8
 800eab4:	e7b5      	b.n	800ea22 <__hexnan+0x7a>
 800eab6:	9b01      	ldr	r3, [sp, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d0df      	beq.n	800ea7c <__hexnan+0xd4>
 800eabc:	f04f 32ff 	mov.w	r2, #4294967295
 800eac0:	f1c3 0320 	rsb	r3, r3, #32
 800eac4:	fa22 f303 	lsr.w	r3, r2, r3
 800eac8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eacc:	401a      	ands	r2, r3
 800eace:	f846 2c04 	str.w	r2, [r6, #-4]
 800ead2:	e7d3      	b.n	800ea7c <__hexnan+0xd4>
 800ead4:	3f04      	subs	r7, #4
 800ead6:	e7d1      	b.n	800ea7c <__hexnan+0xd4>
 800ead8:	2004      	movs	r0, #4
 800eada:	b007      	add	sp, #28
 800eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eae0 <_localeconv_r>:
 800eae0:	4800      	ldr	r0, [pc, #0]	; (800eae4 <_localeconv_r+0x4>)
 800eae2:	4770      	bx	lr
 800eae4:	200001a4 	.word	0x200001a4

0800eae8 <__retarget_lock_init_recursive>:
 800eae8:	4770      	bx	lr

0800eaea <__retarget_lock_acquire_recursive>:
 800eaea:	4770      	bx	lr

0800eaec <__retarget_lock_release_recursive>:
 800eaec:	4770      	bx	lr

0800eaee <__swhatbuf_r>:
 800eaee:	b570      	push	{r4, r5, r6, lr}
 800eaf0:	460e      	mov	r6, r1
 800eaf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaf6:	2900      	cmp	r1, #0
 800eaf8:	b096      	sub	sp, #88	; 0x58
 800eafa:	4614      	mov	r4, r2
 800eafc:	461d      	mov	r5, r3
 800eafe:	da08      	bge.n	800eb12 <__swhatbuf_r+0x24>
 800eb00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	602a      	str	r2, [r5, #0]
 800eb08:	061a      	lsls	r2, r3, #24
 800eb0a:	d410      	bmi.n	800eb2e <__swhatbuf_r+0x40>
 800eb0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb10:	e00e      	b.n	800eb30 <__swhatbuf_r+0x42>
 800eb12:	466a      	mov	r2, sp
 800eb14:	f001 f84a 	bl	800fbac <_fstat_r>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	dbf1      	blt.n	800eb00 <__swhatbuf_r+0x12>
 800eb1c:	9a01      	ldr	r2, [sp, #4]
 800eb1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb26:	425a      	negs	r2, r3
 800eb28:	415a      	adcs	r2, r3
 800eb2a:	602a      	str	r2, [r5, #0]
 800eb2c:	e7ee      	b.n	800eb0c <__swhatbuf_r+0x1e>
 800eb2e:	2340      	movs	r3, #64	; 0x40
 800eb30:	2000      	movs	r0, #0
 800eb32:	6023      	str	r3, [r4, #0]
 800eb34:	b016      	add	sp, #88	; 0x58
 800eb36:	bd70      	pop	{r4, r5, r6, pc}

0800eb38 <__smakebuf_r>:
 800eb38:	898b      	ldrh	r3, [r1, #12]
 800eb3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb3c:	079d      	lsls	r5, r3, #30
 800eb3e:	4606      	mov	r6, r0
 800eb40:	460c      	mov	r4, r1
 800eb42:	d507      	bpl.n	800eb54 <__smakebuf_r+0x1c>
 800eb44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb48:	6023      	str	r3, [r4, #0]
 800eb4a:	6123      	str	r3, [r4, #16]
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	6163      	str	r3, [r4, #20]
 800eb50:	b002      	add	sp, #8
 800eb52:	bd70      	pop	{r4, r5, r6, pc}
 800eb54:	ab01      	add	r3, sp, #4
 800eb56:	466a      	mov	r2, sp
 800eb58:	f7ff ffc9 	bl	800eaee <__swhatbuf_r>
 800eb5c:	9900      	ldr	r1, [sp, #0]
 800eb5e:	4605      	mov	r5, r0
 800eb60:	4630      	mov	r0, r6
 800eb62:	f000 fd87 	bl	800f674 <_malloc_r>
 800eb66:	b948      	cbnz	r0, 800eb7c <__smakebuf_r+0x44>
 800eb68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb6c:	059a      	lsls	r2, r3, #22
 800eb6e:	d4ef      	bmi.n	800eb50 <__smakebuf_r+0x18>
 800eb70:	f023 0303 	bic.w	r3, r3, #3
 800eb74:	f043 0302 	orr.w	r3, r3, #2
 800eb78:	81a3      	strh	r3, [r4, #12]
 800eb7a:	e7e3      	b.n	800eb44 <__smakebuf_r+0xc>
 800eb7c:	4b0d      	ldr	r3, [pc, #52]	; (800ebb4 <__smakebuf_r+0x7c>)
 800eb7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb80:	89a3      	ldrh	r3, [r4, #12]
 800eb82:	6020      	str	r0, [r4, #0]
 800eb84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb88:	81a3      	strh	r3, [r4, #12]
 800eb8a:	9b00      	ldr	r3, [sp, #0]
 800eb8c:	6163      	str	r3, [r4, #20]
 800eb8e:	9b01      	ldr	r3, [sp, #4]
 800eb90:	6120      	str	r0, [r4, #16]
 800eb92:	b15b      	cbz	r3, 800ebac <__smakebuf_r+0x74>
 800eb94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb98:	4630      	mov	r0, r6
 800eb9a:	f001 f819 	bl	800fbd0 <_isatty_r>
 800eb9e:	b128      	cbz	r0, 800ebac <__smakebuf_r+0x74>
 800eba0:	89a3      	ldrh	r3, [r4, #12]
 800eba2:	f023 0303 	bic.w	r3, r3, #3
 800eba6:	f043 0301 	orr.w	r3, r3, #1
 800ebaa:	81a3      	strh	r3, [r4, #12]
 800ebac:	89a0      	ldrh	r0, [r4, #12]
 800ebae:	4305      	orrs	r5, r0
 800ebb0:	81a5      	strh	r5, [r4, #12]
 800ebb2:	e7cd      	b.n	800eb50 <__smakebuf_r+0x18>
 800ebb4:	0800e261 	.word	0x0800e261

0800ebb8 <malloc>:
 800ebb8:	4b02      	ldr	r3, [pc, #8]	; (800ebc4 <malloc+0xc>)
 800ebba:	4601      	mov	r1, r0
 800ebbc:	6818      	ldr	r0, [r3, #0]
 800ebbe:	f000 bd59 	b.w	800f674 <_malloc_r>
 800ebc2:	bf00      	nop
 800ebc4:	2000004c 	.word	0x2000004c

0800ebc8 <__ascii_mbtowc>:
 800ebc8:	b082      	sub	sp, #8
 800ebca:	b901      	cbnz	r1, 800ebce <__ascii_mbtowc+0x6>
 800ebcc:	a901      	add	r1, sp, #4
 800ebce:	b142      	cbz	r2, 800ebe2 <__ascii_mbtowc+0x1a>
 800ebd0:	b14b      	cbz	r3, 800ebe6 <__ascii_mbtowc+0x1e>
 800ebd2:	7813      	ldrb	r3, [r2, #0]
 800ebd4:	600b      	str	r3, [r1, #0]
 800ebd6:	7812      	ldrb	r2, [r2, #0]
 800ebd8:	1e10      	subs	r0, r2, #0
 800ebda:	bf18      	it	ne
 800ebdc:	2001      	movne	r0, #1
 800ebde:	b002      	add	sp, #8
 800ebe0:	4770      	bx	lr
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	e7fb      	b.n	800ebde <__ascii_mbtowc+0x16>
 800ebe6:	f06f 0001 	mvn.w	r0, #1
 800ebea:	e7f8      	b.n	800ebde <__ascii_mbtowc+0x16>

0800ebec <_Balloc>:
 800ebec:	b570      	push	{r4, r5, r6, lr}
 800ebee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	460d      	mov	r5, r1
 800ebf4:	b976      	cbnz	r6, 800ec14 <_Balloc+0x28>
 800ebf6:	2010      	movs	r0, #16
 800ebf8:	f7ff ffde 	bl	800ebb8 <malloc>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	6260      	str	r0, [r4, #36]	; 0x24
 800ec00:	b920      	cbnz	r0, 800ec0c <_Balloc+0x20>
 800ec02:	4b18      	ldr	r3, [pc, #96]	; (800ec64 <_Balloc+0x78>)
 800ec04:	4818      	ldr	r0, [pc, #96]	; (800ec68 <_Balloc+0x7c>)
 800ec06:	2166      	movs	r1, #102	; 0x66
 800ec08:	f000 ff90 	bl	800fb2c <__assert_func>
 800ec0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec10:	6006      	str	r6, [r0, #0]
 800ec12:	60c6      	str	r6, [r0, #12]
 800ec14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ec16:	68f3      	ldr	r3, [r6, #12]
 800ec18:	b183      	cbz	r3, 800ec3c <_Balloc+0x50>
 800ec1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec22:	b9b8      	cbnz	r0, 800ec54 <_Balloc+0x68>
 800ec24:	2101      	movs	r1, #1
 800ec26:	fa01 f605 	lsl.w	r6, r1, r5
 800ec2a:	1d72      	adds	r2, r6, #5
 800ec2c:	0092      	lsls	r2, r2, #2
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f000 fc9d 	bl	800f56e <_calloc_r>
 800ec34:	b160      	cbz	r0, 800ec50 <_Balloc+0x64>
 800ec36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec3a:	e00e      	b.n	800ec5a <_Balloc+0x6e>
 800ec3c:	2221      	movs	r2, #33	; 0x21
 800ec3e:	2104      	movs	r1, #4
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 fc94 	bl	800f56e <_calloc_r>
 800ec46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec48:	60f0      	str	r0, [r6, #12]
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d1e4      	bne.n	800ec1a <_Balloc+0x2e>
 800ec50:	2000      	movs	r0, #0
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
 800ec54:	6802      	ldr	r2, [r0, #0]
 800ec56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec60:	e7f7      	b.n	800ec52 <_Balloc+0x66>
 800ec62:	bf00      	nop
 800ec64:	0801172e 	.word	0x0801172e
 800ec68:	08011890 	.word	0x08011890

0800ec6c <_Bfree>:
 800ec6c:	b570      	push	{r4, r5, r6, lr}
 800ec6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec70:	4605      	mov	r5, r0
 800ec72:	460c      	mov	r4, r1
 800ec74:	b976      	cbnz	r6, 800ec94 <_Bfree+0x28>
 800ec76:	2010      	movs	r0, #16
 800ec78:	f7ff ff9e 	bl	800ebb8 <malloc>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	6268      	str	r0, [r5, #36]	; 0x24
 800ec80:	b920      	cbnz	r0, 800ec8c <_Bfree+0x20>
 800ec82:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <_Bfree+0x3c>)
 800ec84:	4809      	ldr	r0, [pc, #36]	; (800ecac <_Bfree+0x40>)
 800ec86:	218a      	movs	r1, #138	; 0x8a
 800ec88:	f000 ff50 	bl	800fb2c <__assert_func>
 800ec8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec90:	6006      	str	r6, [r0, #0]
 800ec92:	60c6      	str	r6, [r0, #12]
 800ec94:	b13c      	cbz	r4, 800eca6 <_Bfree+0x3a>
 800ec96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec98:	6862      	ldr	r2, [r4, #4]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eca0:	6021      	str	r1, [r4, #0]
 800eca2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eca6:	bd70      	pop	{r4, r5, r6, pc}
 800eca8:	0801172e 	.word	0x0801172e
 800ecac:	08011890 	.word	0x08011890

0800ecb0 <__multadd>:
 800ecb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb4:	690d      	ldr	r5, [r1, #16]
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	460c      	mov	r4, r1
 800ecba:	461e      	mov	r6, r3
 800ecbc:	f101 0c14 	add.w	ip, r1, #20
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	f8dc 3000 	ldr.w	r3, [ip]
 800ecc6:	b299      	uxth	r1, r3
 800ecc8:	fb02 6101 	mla	r1, r2, r1, r6
 800eccc:	0c1e      	lsrs	r6, r3, #16
 800ecce:	0c0b      	lsrs	r3, r1, #16
 800ecd0:	fb02 3306 	mla	r3, r2, r6, r3
 800ecd4:	b289      	uxth	r1, r1
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecdc:	4285      	cmp	r5, r0
 800ecde:	f84c 1b04 	str.w	r1, [ip], #4
 800ece2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ece6:	dcec      	bgt.n	800ecc2 <__multadd+0x12>
 800ece8:	b30e      	cbz	r6, 800ed2e <__multadd+0x7e>
 800ecea:	68a3      	ldr	r3, [r4, #8]
 800ecec:	42ab      	cmp	r3, r5
 800ecee:	dc19      	bgt.n	800ed24 <__multadd+0x74>
 800ecf0:	6861      	ldr	r1, [r4, #4]
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	3101      	adds	r1, #1
 800ecf6:	f7ff ff79 	bl	800ebec <_Balloc>
 800ecfa:	4680      	mov	r8, r0
 800ecfc:	b928      	cbnz	r0, 800ed0a <__multadd+0x5a>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	4b0c      	ldr	r3, [pc, #48]	; (800ed34 <__multadd+0x84>)
 800ed02:	480d      	ldr	r0, [pc, #52]	; (800ed38 <__multadd+0x88>)
 800ed04:	21b5      	movs	r1, #181	; 0xb5
 800ed06:	f000 ff11 	bl	800fb2c <__assert_func>
 800ed0a:	6922      	ldr	r2, [r4, #16]
 800ed0c:	3202      	adds	r2, #2
 800ed0e:	f104 010c 	add.w	r1, r4, #12
 800ed12:	0092      	lsls	r2, r2, #2
 800ed14:	300c      	adds	r0, #12
 800ed16:	f7fc feb7 	bl	800ba88 <memcpy>
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	f7ff ffa5 	bl	800ec6c <_Bfree>
 800ed22:	4644      	mov	r4, r8
 800ed24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed28:	3501      	adds	r5, #1
 800ed2a:	615e      	str	r6, [r3, #20]
 800ed2c:	6125      	str	r5, [r4, #16]
 800ed2e:	4620      	mov	r0, r4
 800ed30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed34:	080117a0 	.word	0x080117a0
 800ed38:	08011890 	.word	0x08011890

0800ed3c <__s2b>:
 800ed3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed40:	460c      	mov	r4, r1
 800ed42:	4615      	mov	r5, r2
 800ed44:	461f      	mov	r7, r3
 800ed46:	2209      	movs	r2, #9
 800ed48:	3308      	adds	r3, #8
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed50:	2100      	movs	r1, #0
 800ed52:	2201      	movs	r2, #1
 800ed54:	429a      	cmp	r2, r3
 800ed56:	db09      	blt.n	800ed6c <__s2b+0x30>
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7ff ff47 	bl	800ebec <_Balloc>
 800ed5e:	b940      	cbnz	r0, 800ed72 <__s2b+0x36>
 800ed60:	4602      	mov	r2, r0
 800ed62:	4b19      	ldr	r3, [pc, #100]	; (800edc8 <__s2b+0x8c>)
 800ed64:	4819      	ldr	r0, [pc, #100]	; (800edcc <__s2b+0x90>)
 800ed66:	21ce      	movs	r1, #206	; 0xce
 800ed68:	f000 fee0 	bl	800fb2c <__assert_func>
 800ed6c:	0052      	lsls	r2, r2, #1
 800ed6e:	3101      	adds	r1, #1
 800ed70:	e7f0      	b.n	800ed54 <__s2b+0x18>
 800ed72:	9b08      	ldr	r3, [sp, #32]
 800ed74:	6143      	str	r3, [r0, #20]
 800ed76:	2d09      	cmp	r5, #9
 800ed78:	f04f 0301 	mov.w	r3, #1
 800ed7c:	6103      	str	r3, [r0, #16]
 800ed7e:	dd16      	ble.n	800edae <__s2b+0x72>
 800ed80:	f104 0909 	add.w	r9, r4, #9
 800ed84:	46c8      	mov	r8, r9
 800ed86:	442c      	add	r4, r5
 800ed88:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed8c:	4601      	mov	r1, r0
 800ed8e:	3b30      	subs	r3, #48	; 0x30
 800ed90:	220a      	movs	r2, #10
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7ff ff8c 	bl	800ecb0 <__multadd>
 800ed98:	45a0      	cmp	r8, r4
 800ed9a:	d1f5      	bne.n	800ed88 <__s2b+0x4c>
 800ed9c:	f1a5 0408 	sub.w	r4, r5, #8
 800eda0:	444c      	add	r4, r9
 800eda2:	1b2d      	subs	r5, r5, r4
 800eda4:	1963      	adds	r3, r4, r5
 800eda6:	42bb      	cmp	r3, r7
 800eda8:	db04      	blt.n	800edb4 <__s2b+0x78>
 800edaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edae:	340a      	adds	r4, #10
 800edb0:	2509      	movs	r5, #9
 800edb2:	e7f6      	b.n	800eda2 <__s2b+0x66>
 800edb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800edb8:	4601      	mov	r1, r0
 800edba:	3b30      	subs	r3, #48	; 0x30
 800edbc:	220a      	movs	r2, #10
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7ff ff76 	bl	800ecb0 <__multadd>
 800edc4:	e7ee      	b.n	800eda4 <__s2b+0x68>
 800edc6:	bf00      	nop
 800edc8:	080117a0 	.word	0x080117a0
 800edcc:	08011890 	.word	0x08011890

0800edd0 <__hi0bits>:
 800edd0:	0c03      	lsrs	r3, r0, #16
 800edd2:	041b      	lsls	r3, r3, #16
 800edd4:	b9d3      	cbnz	r3, 800ee0c <__hi0bits+0x3c>
 800edd6:	0400      	lsls	r0, r0, #16
 800edd8:	2310      	movs	r3, #16
 800edda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800edde:	bf04      	itt	eq
 800ede0:	0200      	lsleq	r0, r0, #8
 800ede2:	3308      	addeq	r3, #8
 800ede4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ede8:	bf04      	itt	eq
 800edea:	0100      	lsleq	r0, r0, #4
 800edec:	3304      	addeq	r3, #4
 800edee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800edf2:	bf04      	itt	eq
 800edf4:	0080      	lsleq	r0, r0, #2
 800edf6:	3302      	addeq	r3, #2
 800edf8:	2800      	cmp	r0, #0
 800edfa:	db05      	blt.n	800ee08 <__hi0bits+0x38>
 800edfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ee00:	f103 0301 	add.w	r3, r3, #1
 800ee04:	bf08      	it	eq
 800ee06:	2320      	moveq	r3, #32
 800ee08:	4618      	mov	r0, r3
 800ee0a:	4770      	bx	lr
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	e7e4      	b.n	800edda <__hi0bits+0xa>

0800ee10 <__lo0bits>:
 800ee10:	6803      	ldr	r3, [r0, #0]
 800ee12:	f013 0207 	ands.w	r2, r3, #7
 800ee16:	4601      	mov	r1, r0
 800ee18:	d00b      	beq.n	800ee32 <__lo0bits+0x22>
 800ee1a:	07da      	lsls	r2, r3, #31
 800ee1c:	d423      	bmi.n	800ee66 <__lo0bits+0x56>
 800ee1e:	0798      	lsls	r0, r3, #30
 800ee20:	bf49      	itett	mi
 800ee22:	085b      	lsrmi	r3, r3, #1
 800ee24:	089b      	lsrpl	r3, r3, #2
 800ee26:	2001      	movmi	r0, #1
 800ee28:	600b      	strmi	r3, [r1, #0]
 800ee2a:	bf5c      	itt	pl
 800ee2c:	600b      	strpl	r3, [r1, #0]
 800ee2e:	2002      	movpl	r0, #2
 800ee30:	4770      	bx	lr
 800ee32:	b298      	uxth	r0, r3
 800ee34:	b9a8      	cbnz	r0, 800ee62 <__lo0bits+0x52>
 800ee36:	0c1b      	lsrs	r3, r3, #16
 800ee38:	2010      	movs	r0, #16
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	b90a      	cbnz	r2, 800ee42 <__lo0bits+0x32>
 800ee3e:	3008      	adds	r0, #8
 800ee40:	0a1b      	lsrs	r3, r3, #8
 800ee42:	071a      	lsls	r2, r3, #28
 800ee44:	bf04      	itt	eq
 800ee46:	091b      	lsreq	r3, r3, #4
 800ee48:	3004      	addeq	r0, #4
 800ee4a:	079a      	lsls	r2, r3, #30
 800ee4c:	bf04      	itt	eq
 800ee4e:	089b      	lsreq	r3, r3, #2
 800ee50:	3002      	addeq	r0, #2
 800ee52:	07da      	lsls	r2, r3, #31
 800ee54:	d403      	bmi.n	800ee5e <__lo0bits+0x4e>
 800ee56:	085b      	lsrs	r3, r3, #1
 800ee58:	f100 0001 	add.w	r0, r0, #1
 800ee5c:	d005      	beq.n	800ee6a <__lo0bits+0x5a>
 800ee5e:	600b      	str	r3, [r1, #0]
 800ee60:	4770      	bx	lr
 800ee62:	4610      	mov	r0, r2
 800ee64:	e7e9      	b.n	800ee3a <__lo0bits+0x2a>
 800ee66:	2000      	movs	r0, #0
 800ee68:	4770      	bx	lr
 800ee6a:	2020      	movs	r0, #32
 800ee6c:	4770      	bx	lr
	...

0800ee70 <__i2b>:
 800ee70:	b510      	push	{r4, lr}
 800ee72:	460c      	mov	r4, r1
 800ee74:	2101      	movs	r1, #1
 800ee76:	f7ff feb9 	bl	800ebec <_Balloc>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	b928      	cbnz	r0, 800ee8a <__i2b+0x1a>
 800ee7e:	4b05      	ldr	r3, [pc, #20]	; (800ee94 <__i2b+0x24>)
 800ee80:	4805      	ldr	r0, [pc, #20]	; (800ee98 <__i2b+0x28>)
 800ee82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ee86:	f000 fe51 	bl	800fb2c <__assert_func>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	6144      	str	r4, [r0, #20]
 800ee8e:	6103      	str	r3, [r0, #16]
 800ee90:	bd10      	pop	{r4, pc}
 800ee92:	bf00      	nop
 800ee94:	080117a0 	.word	0x080117a0
 800ee98:	08011890 	.word	0x08011890

0800ee9c <__multiply>:
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	4691      	mov	r9, r2
 800eea2:	690a      	ldr	r2, [r1, #16]
 800eea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	bfb8      	it	lt
 800eeac:	460b      	movlt	r3, r1
 800eeae:	460c      	mov	r4, r1
 800eeb0:	bfbc      	itt	lt
 800eeb2:	464c      	movlt	r4, r9
 800eeb4:	4699      	movlt	r9, r3
 800eeb6:	6927      	ldr	r7, [r4, #16]
 800eeb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eebc:	68a3      	ldr	r3, [r4, #8]
 800eebe:	6861      	ldr	r1, [r4, #4]
 800eec0:	eb07 060a 	add.w	r6, r7, sl
 800eec4:	42b3      	cmp	r3, r6
 800eec6:	b085      	sub	sp, #20
 800eec8:	bfb8      	it	lt
 800eeca:	3101      	addlt	r1, #1
 800eecc:	f7ff fe8e 	bl	800ebec <_Balloc>
 800eed0:	b930      	cbnz	r0, 800eee0 <__multiply+0x44>
 800eed2:	4602      	mov	r2, r0
 800eed4:	4b44      	ldr	r3, [pc, #272]	; (800efe8 <__multiply+0x14c>)
 800eed6:	4845      	ldr	r0, [pc, #276]	; (800efec <__multiply+0x150>)
 800eed8:	f240 115d 	movw	r1, #349	; 0x15d
 800eedc:	f000 fe26 	bl	800fb2c <__assert_func>
 800eee0:	f100 0514 	add.w	r5, r0, #20
 800eee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eee8:	462b      	mov	r3, r5
 800eeea:	2200      	movs	r2, #0
 800eeec:	4543      	cmp	r3, r8
 800eeee:	d321      	bcc.n	800ef34 <__multiply+0x98>
 800eef0:	f104 0314 	add.w	r3, r4, #20
 800eef4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eef8:	f109 0314 	add.w	r3, r9, #20
 800eefc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ef00:	9202      	str	r2, [sp, #8]
 800ef02:	1b3a      	subs	r2, r7, r4
 800ef04:	3a15      	subs	r2, #21
 800ef06:	f022 0203 	bic.w	r2, r2, #3
 800ef0a:	3204      	adds	r2, #4
 800ef0c:	f104 0115 	add.w	r1, r4, #21
 800ef10:	428f      	cmp	r7, r1
 800ef12:	bf38      	it	cc
 800ef14:	2204      	movcc	r2, #4
 800ef16:	9201      	str	r2, [sp, #4]
 800ef18:	9a02      	ldr	r2, [sp, #8]
 800ef1a:	9303      	str	r3, [sp, #12]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d80c      	bhi.n	800ef3a <__multiply+0x9e>
 800ef20:	2e00      	cmp	r6, #0
 800ef22:	dd03      	ble.n	800ef2c <__multiply+0x90>
 800ef24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d05a      	beq.n	800efe2 <__multiply+0x146>
 800ef2c:	6106      	str	r6, [r0, #16]
 800ef2e:	b005      	add	sp, #20
 800ef30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef34:	f843 2b04 	str.w	r2, [r3], #4
 800ef38:	e7d8      	b.n	800eeec <__multiply+0x50>
 800ef3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef3e:	f1ba 0f00 	cmp.w	sl, #0
 800ef42:	d024      	beq.n	800ef8e <__multiply+0xf2>
 800ef44:	f104 0e14 	add.w	lr, r4, #20
 800ef48:	46a9      	mov	r9, r5
 800ef4a:	f04f 0c00 	mov.w	ip, #0
 800ef4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef52:	f8d9 1000 	ldr.w	r1, [r9]
 800ef56:	fa1f fb82 	uxth.w	fp, r2
 800ef5a:	b289      	uxth	r1, r1
 800ef5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef64:	f8d9 2000 	ldr.w	r2, [r9]
 800ef68:	4461      	add	r1, ip
 800ef6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ef76:	b289      	uxth	r1, r1
 800ef78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef7c:	4577      	cmp	r7, lr
 800ef7e:	f849 1b04 	str.w	r1, [r9], #4
 800ef82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef86:	d8e2      	bhi.n	800ef4e <__multiply+0xb2>
 800ef88:	9a01      	ldr	r2, [sp, #4]
 800ef8a:	f845 c002 	str.w	ip, [r5, r2]
 800ef8e:	9a03      	ldr	r2, [sp, #12]
 800ef90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ef94:	3304      	adds	r3, #4
 800ef96:	f1b9 0f00 	cmp.w	r9, #0
 800ef9a:	d020      	beq.n	800efde <__multiply+0x142>
 800ef9c:	6829      	ldr	r1, [r5, #0]
 800ef9e:	f104 0c14 	add.w	ip, r4, #20
 800efa2:	46ae      	mov	lr, r5
 800efa4:	f04f 0a00 	mov.w	sl, #0
 800efa8:	f8bc b000 	ldrh.w	fp, [ip]
 800efac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800efb0:	fb09 220b 	mla	r2, r9, fp, r2
 800efb4:	4492      	add	sl, r2
 800efb6:	b289      	uxth	r1, r1
 800efb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800efbc:	f84e 1b04 	str.w	r1, [lr], #4
 800efc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800efc4:	f8be 1000 	ldrh.w	r1, [lr]
 800efc8:	0c12      	lsrs	r2, r2, #16
 800efca:	fb09 1102 	mla	r1, r9, r2, r1
 800efce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800efd2:	4567      	cmp	r7, ip
 800efd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800efd8:	d8e6      	bhi.n	800efa8 <__multiply+0x10c>
 800efda:	9a01      	ldr	r2, [sp, #4]
 800efdc:	50a9      	str	r1, [r5, r2]
 800efde:	3504      	adds	r5, #4
 800efe0:	e79a      	b.n	800ef18 <__multiply+0x7c>
 800efe2:	3e01      	subs	r6, #1
 800efe4:	e79c      	b.n	800ef20 <__multiply+0x84>
 800efe6:	bf00      	nop
 800efe8:	080117a0 	.word	0x080117a0
 800efec:	08011890 	.word	0x08011890

0800eff0 <__pow5mult>:
 800eff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eff4:	4615      	mov	r5, r2
 800eff6:	f012 0203 	ands.w	r2, r2, #3
 800effa:	4606      	mov	r6, r0
 800effc:	460f      	mov	r7, r1
 800effe:	d007      	beq.n	800f010 <__pow5mult+0x20>
 800f000:	4c25      	ldr	r4, [pc, #148]	; (800f098 <__pow5mult+0xa8>)
 800f002:	3a01      	subs	r2, #1
 800f004:	2300      	movs	r3, #0
 800f006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f00a:	f7ff fe51 	bl	800ecb0 <__multadd>
 800f00e:	4607      	mov	r7, r0
 800f010:	10ad      	asrs	r5, r5, #2
 800f012:	d03d      	beq.n	800f090 <__pow5mult+0xa0>
 800f014:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f016:	b97c      	cbnz	r4, 800f038 <__pow5mult+0x48>
 800f018:	2010      	movs	r0, #16
 800f01a:	f7ff fdcd 	bl	800ebb8 <malloc>
 800f01e:	4602      	mov	r2, r0
 800f020:	6270      	str	r0, [r6, #36]	; 0x24
 800f022:	b928      	cbnz	r0, 800f030 <__pow5mult+0x40>
 800f024:	4b1d      	ldr	r3, [pc, #116]	; (800f09c <__pow5mult+0xac>)
 800f026:	481e      	ldr	r0, [pc, #120]	; (800f0a0 <__pow5mult+0xb0>)
 800f028:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f02c:	f000 fd7e 	bl	800fb2c <__assert_func>
 800f030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f034:	6004      	str	r4, [r0, #0]
 800f036:	60c4      	str	r4, [r0, #12]
 800f038:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f03c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f040:	b94c      	cbnz	r4, 800f056 <__pow5mult+0x66>
 800f042:	f240 2171 	movw	r1, #625	; 0x271
 800f046:	4630      	mov	r0, r6
 800f048:	f7ff ff12 	bl	800ee70 <__i2b>
 800f04c:	2300      	movs	r3, #0
 800f04e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f052:	4604      	mov	r4, r0
 800f054:	6003      	str	r3, [r0, #0]
 800f056:	f04f 0900 	mov.w	r9, #0
 800f05a:	07eb      	lsls	r3, r5, #31
 800f05c:	d50a      	bpl.n	800f074 <__pow5mult+0x84>
 800f05e:	4639      	mov	r1, r7
 800f060:	4622      	mov	r2, r4
 800f062:	4630      	mov	r0, r6
 800f064:	f7ff ff1a 	bl	800ee9c <__multiply>
 800f068:	4639      	mov	r1, r7
 800f06a:	4680      	mov	r8, r0
 800f06c:	4630      	mov	r0, r6
 800f06e:	f7ff fdfd 	bl	800ec6c <_Bfree>
 800f072:	4647      	mov	r7, r8
 800f074:	106d      	asrs	r5, r5, #1
 800f076:	d00b      	beq.n	800f090 <__pow5mult+0xa0>
 800f078:	6820      	ldr	r0, [r4, #0]
 800f07a:	b938      	cbnz	r0, 800f08c <__pow5mult+0x9c>
 800f07c:	4622      	mov	r2, r4
 800f07e:	4621      	mov	r1, r4
 800f080:	4630      	mov	r0, r6
 800f082:	f7ff ff0b 	bl	800ee9c <__multiply>
 800f086:	6020      	str	r0, [r4, #0]
 800f088:	f8c0 9000 	str.w	r9, [r0]
 800f08c:	4604      	mov	r4, r0
 800f08e:	e7e4      	b.n	800f05a <__pow5mult+0x6a>
 800f090:	4638      	mov	r0, r7
 800f092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f096:	bf00      	nop
 800f098:	080119e0 	.word	0x080119e0
 800f09c:	0801172e 	.word	0x0801172e
 800f0a0:	08011890 	.word	0x08011890

0800f0a4 <__lshift>:
 800f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	6849      	ldr	r1, [r1, #4]
 800f0ac:	6923      	ldr	r3, [r4, #16]
 800f0ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0b2:	68a3      	ldr	r3, [r4, #8]
 800f0b4:	4607      	mov	r7, r0
 800f0b6:	4691      	mov	r9, r2
 800f0b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0bc:	f108 0601 	add.w	r6, r8, #1
 800f0c0:	42b3      	cmp	r3, r6
 800f0c2:	db0b      	blt.n	800f0dc <__lshift+0x38>
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	f7ff fd91 	bl	800ebec <_Balloc>
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	b948      	cbnz	r0, 800f0e2 <__lshift+0x3e>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	4b2a      	ldr	r3, [pc, #168]	; (800f17c <__lshift+0xd8>)
 800f0d2:	482b      	ldr	r0, [pc, #172]	; (800f180 <__lshift+0xdc>)
 800f0d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f0d8:	f000 fd28 	bl	800fb2c <__assert_func>
 800f0dc:	3101      	adds	r1, #1
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	e7ee      	b.n	800f0c0 <__lshift+0x1c>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f100 0114 	add.w	r1, r0, #20
 800f0e8:	f100 0210 	add.w	r2, r0, #16
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	4553      	cmp	r3, sl
 800f0f0:	db37      	blt.n	800f162 <__lshift+0xbe>
 800f0f2:	6920      	ldr	r0, [r4, #16]
 800f0f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0f8:	f104 0314 	add.w	r3, r4, #20
 800f0fc:	f019 091f 	ands.w	r9, r9, #31
 800f100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f108:	d02f      	beq.n	800f16a <__lshift+0xc6>
 800f10a:	f1c9 0e20 	rsb	lr, r9, #32
 800f10e:	468a      	mov	sl, r1
 800f110:	f04f 0c00 	mov.w	ip, #0
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	fa02 f209 	lsl.w	r2, r2, r9
 800f11a:	ea42 020c 	orr.w	r2, r2, ip
 800f11e:	f84a 2b04 	str.w	r2, [sl], #4
 800f122:	f853 2b04 	ldr.w	r2, [r3], #4
 800f126:	4298      	cmp	r0, r3
 800f128:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f12c:	d8f2      	bhi.n	800f114 <__lshift+0x70>
 800f12e:	1b03      	subs	r3, r0, r4
 800f130:	3b15      	subs	r3, #21
 800f132:	f023 0303 	bic.w	r3, r3, #3
 800f136:	3304      	adds	r3, #4
 800f138:	f104 0215 	add.w	r2, r4, #21
 800f13c:	4290      	cmp	r0, r2
 800f13e:	bf38      	it	cc
 800f140:	2304      	movcc	r3, #4
 800f142:	f841 c003 	str.w	ip, [r1, r3]
 800f146:	f1bc 0f00 	cmp.w	ip, #0
 800f14a:	d001      	beq.n	800f150 <__lshift+0xac>
 800f14c:	f108 0602 	add.w	r6, r8, #2
 800f150:	3e01      	subs	r6, #1
 800f152:	4638      	mov	r0, r7
 800f154:	612e      	str	r6, [r5, #16]
 800f156:	4621      	mov	r1, r4
 800f158:	f7ff fd88 	bl	800ec6c <_Bfree>
 800f15c:	4628      	mov	r0, r5
 800f15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f162:	f842 0f04 	str.w	r0, [r2, #4]!
 800f166:	3301      	adds	r3, #1
 800f168:	e7c1      	b.n	800f0ee <__lshift+0x4a>
 800f16a:	3904      	subs	r1, #4
 800f16c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f170:	f841 2f04 	str.w	r2, [r1, #4]!
 800f174:	4298      	cmp	r0, r3
 800f176:	d8f9      	bhi.n	800f16c <__lshift+0xc8>
 800f178:	e7ea      	b.n	800f150 <__lshift+0xac>
 800f17a:	bf00      	nop
 800f17c:	080117a0 	.word	0x080117a0
 800f180:	08011890 	.word	0x08011890

0800f184 <__mcmp>:
 800f184:	b530      	push	{r4, r5, lr}
 800f186:	6902      	ldr	r2, [r0, #16]
 800f188:	690c      	ldr	r4, [r1, #16]
 800f18a:	1b12      	subs	r2, r2, r4
 800f18c:	d10e      	bne.n	800f1ac <__mcmp+0x28>
 800f18e:	f100 0314 	add.w	r3, r0, #20
 800f192:	3114      	adds	r1, #20
 800f194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f19c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f1a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f1a4:	42a5      	cmp	r5, r4
 800f1a6:	d003      	beq.n	800f1b0 <__mcmp+0x2c>
 800f1a8:	d305      	bcc.n	800f1b6 <__mcmp+0x32>
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	bd30      	pop	{r4, r5, pc}
 800f1b0:	4283      	cmp	r3, r0
 800f1b2:	d3f3      	bcc.n	800f19c <__mcmp+0x18>
 800f1b4:	e7fa      	b.n	800f1ac <__mcmp+0x28>
 800f1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ba:	e7f7      	b.n	800f1ac <__mcmp+0x28>

0800f1bc <__mdiff>:
 800f1bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	4690      	mov	r8, r2
 800f1ca:	f7ff ffdb 	bl	800f184 <__mcmp>
 800f1ce:	1e05      	subs	r5, r0, #0
 800f1d0:	d110      	bne.n	800f1f4 <__mdiff+0x38>
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	f7ff fd09 	bl	800ebec <_Balloc>
 800f1da:	b930      	cbnz	r0, 800f1ea <__mdiff+0x2e>
 800f1dc:	4b3a      	ldr	r3, [pc, #232]	; (800f2c8 <__mdiff+0x10c>)
 800f1de:	4602      	mov	r2, r0
 800f1e0:	f240 2132 	movw	r1, #562	; 0x232
 800f1e4:	4839      	ldr	r0, [pc, #228]	; (800f2cc <__mdiff+0x110>)
 800f1e6:	f000 fca1 	bl	800fb2c <__assert_func>
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f4:	bfa4      	itt	ge
 800f1f6:	4643      	movge	r3, r8
 800f1f8:	46a0      	movge	r8, r4
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f200:	bfa6      	itte	ge
 800f202:	461c      	movge	r4, r3
 800f204:	2500      	movge	r5, #0
 800f206:	2501      	movlt	r5, #1
 800f208:	f7ff fcf0 	bl	800ebec <_Balloc>
 800f20c:	b920      	cbnz	r0, 800f218 <__mdiff+0x5c>
 800f20e:	4b2e      	ldr	r3, [pc, #184]	; (800f2c8 <__mdiff+0x10c>)
 800f210:	4602      	mov	r2, r0
 800f212:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f216:	e7e5      	b.n	800f1e4 <__mdiff+0x28>
 800f218:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f21c:	6926      	ldr	r6, [r4, #16]
 800f21e:	60c5      	str	r5, [r0, #12]
 800f220:	f104 0914 	add.w	r9, r4, #20
 800f224:	f108 0514 	add.w	r5, r8, #20
 800f228:	f100 0e14 	add.w	lr, r0, #20
 800f22c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f234:	f108 0210 	add.w	r2, r8, #16
 800f238:	46f2      	mov	sl, lr
 800f23a:	2100      	movs	r1, #0
 800f23c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f240:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f244:	fa1f f883 	uxth.w	r8, r3
 800f248:	fa11 f18b 	uxtah	r1, r1, fp
 800f24c:	0c1b      	lsrs	r3, r3, #16
 800f24e:	eba1 0808 	sub.w	r8, r1, r8
 800f252:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f256:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f25a:	fa1f f888 	uxth.w	r8, r8
 800f25e:	1419      	asrs	r1, r3, #16
 800f260:	454e      	cmp	r6, r9
 800f262:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f266:	f84a 3b04 	str.w	r3, [sl], #4
 800f26a:	d8e7      	bhi.n	800f23c <__mdiff+0x80>
 800f26c:	1b33      	subs	r3, r6, r4
 800f26e:	3b15      	subs	r3, #21
 800f270:	f023 0303 	bic.w	r3, r3, #3
 800f274:	3304      	adds	r3, #4
 800f276:	3415      	adds	r4, #21
 800f278:	42a6      	cmp	r6, r4
 800f27a:	bf38      	it	cc
 800f27c:	2304      	movcc	r3, #4
 800f27e:	441d      	add	r5, r3
 800f280:	4473      	add	r3, lr
 800f282:	469e      	mov	lr, r3
 800f284:	462e      	mov	r6, r5
 800f286:	4566      	cmp	r6, ip
 800f288:	d30e      	bcc.n	800f2a8 <__mdiff+0xec>
 800f28a:	f10c 0203 	add.w	r2, ip, #3
 800f28e:	1b52      	subs	r2, r2, r5
 800f290:	f022 0203 	bic.w	r2, r2, #3
 800f294:	3d03      	subs	r5, #3
 800f296:	45ac      	cmp	ip, r5
 800f298:	bf38      	it	cc
 800f29a:	2200      	movcc	r2, #0
 800f29c:	441a      	add	r2, r3
 800f29e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f2a2:	b17b      	cbz	r3, 800f2c4 <__mdiff+0x108>
 800f2a4:	6107      	str	r7, [r0, #16]
 800f2a6:	e7a3      	b.n	800f1f0 <__mdiff+0x34>
 800f2a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800f2ac:	fa11 f288 	uxtah	r2, r1, r8
 800f2b0:	1414      	asrs	r4, r2, #16
 800f2b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f2b6:	b292      	uxth	r2, r2
 800f2b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f2bc:	f84e 2b04 	str.w	r2, [lr], #4
 800f2c0:	1421      	asrs	r1, r4, #16
 800f2c2:	e7e0      	b.n	800f286 <__mdiff+0xca>
 800f2c4:	3f01      	subs	r7, #1
 800f2c6:	e7ea      	b.n	800f29e <__mdiff+0xe2>
 800f2c8:	080117a0 	.word	0x080117a0
 800f2cc:	08011890 	.word	0x08011890

0800f2d0 <__ulp>:
 800f2d0:	b082      	sub	sp, #8
 800f2d2:	ed8d 0b00 	vstr	d0, [sp]
 800f2d6:	9b01      	ldr	r3, [sp, #4]
 800f2d8:	4912      	ldr	r1, [pc, #72]	; (800f324 <__ulp+0x54>)
 800f2da:	4019      	ands	r1, r3
 800f2dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f2e0:	2900      	cmp	r1, #0
 800f2e2:	dd05      	ble.n	800f2f0 <__ulp+0x20>
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	ec43 2b10 	vmov	d0, r2, r3
 800f2ec:	b002      	add	sp, #8
 800f2ee:	4770      	bx	lr
 800f2f0:	4249      	negs	r1, r1
 800f2f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f2f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f2fa:	f04f 0200 	mov.w	r2, #0
 800f2fe:	f04f 0300 	mov.w	r3, #0
 800f302:	da04      	bge.n	800f30e <__ulp+0x3e>
 800f304:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f308:	fa41 f300 	asr.w	r3, r1, r0
 800f30c:	e7ec      	b.n	800f2e8 <__ulp+0x18>
 800f30e:	f1a0 0114 	sub.w	r1, r0, #20
 800f312:	291e      	cmp	r1, #30
 800f314:	bfda      	itte	le
 800f316:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f31a:	fa20 f101 	lsrle.w	r1, r0, r1
 800f31e:	2101      	movgt	r1, #1
 800f320:	460a      	mov	r2, r1
 800f322:	e7e1      	b.n	800f2e8 <__ulp+0x18>
 800f324:	7ff00000 	.word	0x7ff00000

0800f328 <__b2d>:
 800f328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32a:	6905      	ldr	r5, [r0, #16]
 800f32c:	f100 0714 	add.w	r7, r0, #20
 800f330:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f334:	1f2e      	subs	r6, r5, #4
 800f336:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f33a:	4620      	mov	r0, r4
 800f33c:	f7ff fd48 	bl	800edd0 <__hi0bits>
 800f340:	f1c0 0320 	rsb	r3, r0, #32
 800f344:	280a      	cmp	r0, #10
 800f346:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f3c4 <__b2d+0x9c>
 800f34a:	600b      	str	r3, [r1, #0]
 800f34c:	dc14      	bgt.n	800f378 <__b2d+0x50>
 800f34e:	f1c0 0e0b 	rsb	lr, r0, #11
 800f352:	fa24 f10e 	lsr.w	r1, r4, lr
 800f356:	42b7      	cmp	r7, r6
 800f358:	ea41 030c 	orr.w	r3, r1, ip
 800f35c:	bf34      	ite	cc
 800f35e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f362:	2100      	movcs	r1, #0
 800f364:	3015      	adds	r0, #21
 800f366:	fa04 f000 	lsl.w	r0, r4, r0
 800f36a:	fa21 f10e 	lsr.w	r1, r1, lr
 800f36e:	ea40 0201 	orr.w	r2, r0, r1
 800f372:	ec43 2b10 	vmov	d0, r2, r3
 800f376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f378:	42b7      	cmp	r7, r6
 800f37a:	bf3a      	itte	cc
 800f37c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f380:	f1a5 0608 	subcc.w	r6, r5, #8
 800f384:	2100      	movcs	r1, #0
 800f386:	380b      	subs	r0, #11
 800f388:	d017      	beq.n	800f3ba <__b2d+0x92>
 800f38a:	f1c0 0c20 	rsb	ip, r0, #32
 800f38e:	fa04 f500 	lsl.w	r5, r4, r0
 800f392:	42be      	cmp	r6, r7
 800f394:	fa21 f40c 	lsr.w	r4, r1, ip
 800f398:	ea45 0504 	orr.w	r5, r5, r4
 800f39c:	bf8c      	ite	hi
 800f39e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f3a2:	2400      	movls	r4, #0
 800f3a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f3a8:	fa01 f000 	lsl.w	r0, r1, r0
 800f3ac:	fa24 f40c 	lsr.w	r4, r4, ip
 800f3b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f3b4:	ea40 0204 	orr.w	r2, r0, r4
 800f3b8:	e7db      	b.n	800f372 <__b2d+0x4a>
 800f3ba:	ea44 030c 	orr.w	r3, r4, ip
 800f3be:	460a      	mov	r2, r1
 800f3c0:	e7d7      	b.n	800f372 <__b2d+0x4a>
 800f3c2:	bf00      	nop
 800f3c4:	3ff00000 	.word	0x3ff00000

0800f3c8 <__d2b>:
 800f3c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3cc:	4689      	mov	r9, r1
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	ec57 6b10 	vmov	r6, r7, d0
 800f3d4:	4690      	mov	r8, r2
 800f3d6:	f7ff fc09 	bl	800ebec <_Balloc>
 800f3da:	4604      	mov	r4, r0
 800f3dc:	b930      	cbnz	r0, 800f3ec <__d2b+0x24>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	4b25      	ldr	r3, [pc, #148]	; (800f478 <__d2b+0xb0>)
 800f3e2:	4826      	ldr	r0, [pc, #152]	; (800f47c <__d2b+0xb4>)
 800f3e4:	f240 310a 	movw	r1, #778	; 0x30a
 800f3e8:	f000 fba0 	bl	800fb2c <__assert_func>
 800f3ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f3f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3f4:	bb35      	cbnz	r5, 800f444 <__d2b+0x7c>
 800f3f6:	2e00      	cmp	r6, #0
 800f3f8:	9301      	str	r3, [sp, #4]
 800f3fa:	d028      	beq.n	800f44e <__d2b+0x86>
 800f3fc:	4668      	mov	r0, sp
 800f3fe:	9600      	str	r6, [sp, #0]
 800f400:	f7ff fd06 	bl	800ee10 <__lo0bits>
 800f404:	9900      	ldr	r1, [sp, #0]
 800f406:	b300      	cbz	r0, 800f44a <__d2b+0x82>
 800f408:	9a01      	ldr	r2, [sp, #4]
 800f40a:	f1c0 0320 	rsb	r3, r0, #32
 800f40e:	fa02 f303 	lsl.w	r3, r2, r3
 800f412:	430b      	orrs	r3, r1
 800f414:	40c2      	lsrs	r2, r0
 800f416:	6163      	str	r3, [r4, #20]
 800f418:	9201      	str	r2, [sp, #4]
 800f41a:	9b01      	ldr	r3, [sp, #4]
 800f41c:	61a3      	str	r3, [r4, #24]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	bf14      	ite	ne
 800f422:	2202      	movne	r2, #2
 800f424:	2201      	moveq	r2, #1
 800f426:	6122      	str	r2, [r4, #16]
 800f428:	b1d5      	cbz	r5, 800f460 <__d2b+0x98>
 800f42a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f42e:	4405      	add	r5, r0
 800f430:	f8c9 5000 	str.w	r5, [r9]
 800f434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f438:	f8c8 0000 	str.w	r0, [r8]
 800f43c:	4620      	mov	r0, r4
 800f43e:	b003      	add	sp, #12
 800f440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f448:	e7d5      	b.n	800f3f6 <__d2b+0x2e>
 800f44a:	6161      	str	r1, [r4, #20]
 800f44c:	e7e5      	b.n	800f41a <__d2b+0x52>
 800f44e:	a801      	add	r0, sp, #4
 800f450:	f7ff fcde 	bl	800ee10 <__lo0bits>
 800f454:	9b01      	ldr	r3, [sp, #4]
 800f456:	6163      	str	r3, [r4, #20]
 800f458:	2201      	movs	r2, #1
 800f45a:	6122      	str	r2, [r4, #16]
 800f45c:	3020      	adds	r0, #32
 800f45e:	e7e3      	b.n	800f428 <__d2b+0x60>
 800f460:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f468:	f8c9 0000 	str.w	r0, [r9]
 800f46c:	6918      	ldr	r0, [r3, #16]
 800f46e:	f7ff fcaf 	bl	800edd0 <__hi0bits>
 800f472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f476:	e7df      	b.n	800f438 <__d2b+0x70>
 800f478:	080117a0 	.word	0x080117a0
 800f47c:	08011890 	.word	0x08011890

0800f480 <__ratio>:
 800f480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	4688      	mov	r8, r1
 800f486:	4669      	mov	r1, sp
 800f488:	4681      	mov	r9, r0
 800f48a:	f7ff ff4d 	bl	800f328 <__b2d>
 800f48e:	a901      	add	r1, sp, #4
 800f490:	4640      	mov	r0, r8
 800f492:	ec55 4b10 	vmov	r4, r5, d0
 800f496:	f7ff ff47 	bl	800f328 <__b2d>
 800f49a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f49e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f4a2:	eba3 0c02 	sub.w	ip, r3, r2
 800f4a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f4aa:	1a9b      	subs	r3, r3, r2
 800f4ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f4b0:	ec51 0b10 	vmov	r0, r1, d0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	bfd6      	itet	le
 800f4b8:	460a      	movle	r2, r1
 800f4ba:	462a      	movgt	r2, r5
 800f4bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f4c0:	468b      	mov	fp, r1
 800f4c2:	462f      	mov	r7, r5
 800f4c4:	bfd4      	ite	le
 800f4c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f4ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	ee10 2a10 	vmov	r2, s0
 800f4d4:	465b      	mov	r3, fp
 800f4d6:	4639      	mov	r1, r7
 800f4d8:	f7f1 f9d8 	bl	800088c <__aeabi_ddiv>
 800f4dc:	ec41 0b10 	vmov	d0, r0, r1
 800f4e0:	b003      	add	sp, #12
 800f4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4e6 <__copybits>:
 800f4e6:	3901      	subs	r1, #1
 800f4e8:	b570      	push	{r4, r5, r6, lr}
 800f4ea:	1149      	asrs	r1, r1, #5
 800f4ec:	6914      	ldr	r4, [r2, #16]
 800f4ee:	3101      	adds	r1, #1
 800f4f0:	f102 0314 	add.w	r3, r2, #20
 800f4f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f4f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f4fc:	1f05      	subs	r5, r0, #4
 800f4fe:	42a3      	cmp	r3, r4
 800f500:	d30c      	bcc.n	800f51c <__copybits+0x36>
 800f502:	1aa3      	subs	r3, r4, r2
 800f504:	3b11      	subs	r3, #17
 800f506:	f023 0303 	bic.w	r3, r3, #3
 800f50a:	3211      	adds	r2, #17
 800f50c:	42a2      	cmp	r2, r4
 800f50e:	bf88      	it	hi
 800f510:	2300      	movhi	r3, #0
 800f512:	4418      	add	r0, r3
 800f514:	2300      	movs	r3, #0
 800f516:	4288      	cmp	r0, r1
 800f518:	d305      	bcc.n	800f526 <__copybits+0x40>
 800f51a:	bd70      	pop	{r4, r5, r6, pc}
 800f51c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f520:	f845 6f04 	str.w	r6, [r5, #4]!
 800f524:	e7eb      	b.n	800f4fe <__copybits+0x18>
 800f526:	f840 3b04 	str.w	r3, [r0], #4
 800f52a:	e7f4      	b.n	800f516 <__copybits+0x30>

0800f52c <__any_on>:
 800f52c:	f100 0214 	add.w	r2, r0, #20
 800f530:	6900      	ldr	r0, [r0, #16]
 800f532:	114b      	asrs	r3, r1, #5
 800f534:	4298      	cmp	r0, r3
 800f536:	b510      	push	{r4, lr}
 800f538:	db11      	blt.n	800f55e <__any_on+0x32>
 800f53a:	dd0a      	ble.n	800f552 <__any_on+0x26>
 800f53c:	f011 011f 	ands.w	r1, r1, #31
 800f540:	d007      	beq.n	800f552 <__any_on+0x26>
 800f542:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f546:	fa24 f001 	lsr.w	r0, r4, r1
 800f54a:	fa00 f101 	lsl.w	r1, r0, r1
 800f54e:	428c      	cmp	r4, r1
 800f550:	d10b      	bne.n	800f56a <__any_on+0x3e>
 800f552:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f556:	4293      	cmp	r3, r2
 800f558:	d803      	bhi.n	800f562 <__any_on+0x36>
 800f55a:	2000      	movs	r0, #0
 800f55c:	bd10      	pop	{r4, pc}
 800f55e:	4603      	mov	r3, r0
 800f560:	e7f7      	b.n	800f552 <__any_on+0x26>
 800f562:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f566:	2900      	cmp	r1, #0
 800f568:	d0f5      	beq.n	800f556 <__any_on+0x2a>
 800f56a:	2001      	movs	r0, #1
 800f56c:	e7f6      	b.n	800f55c <__any_on+0x30>

0800f56e <_calloc_r>:
 800f56e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f570:	fba1 2402 	umull	r2, r4, r1, r2
 800f574:	b94c      	cbnz	r4, 800f58a <_calloc_r+0x1c>
 800f576:	4611      	mov	r1, r2
 800f578:	9201      	str	r2, [sp, #4]
 800f57a:	f000 f87b 	bl	800f674 <_malloc_r>
 800f57e:	9a01      	ldr	r2, [sp, #4]
 800f580:	4605      	mov	r5, r0
 800f582:	b930      	cbnz	r0, 800f592 <_calloc_r+0x24>
 800f584:	4628      	mov	r0, r5
 800f586:	b003      	add	sp, #12
 800f588:	bd30      	pop	{r4, r5, pc}
 800f58a:	220c      	movs	r2, #12
 800f58c:	6002      	str	r2, [r0, #0]
 800f58e:	2500      	movs	r5, #0
 800f590:	e7f8      	b.n	800f584 <_calloc_r+0x16>
 800f592:	4621      	mov	r1, r4
 800f594:	f7fc fa86 	bl	800baa4 <memset>
 800f598:	e7f4      	b.n	800f584 <_calloc_r+0x16>
	...

0800f59c <_free_r>:
 800f59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f59e:	2900      	cmp	r1, #0
 800f5a0:	d044      	beq.n	800f62c <_free_r+0x90>
 800f5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5a6:	9001      	str	r0, [sp, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f5ae:	bfb8      	it	lt
 800f5b0:	18e4      	addlt	r4, r4, r3
 800f5b2:	f000 fb2f 	bl	800fc14 <__malloc_lock>
 800f5b6:	4a1e      	ldr	r2, [pc, #120]	; (800f630 <_free_r+0x94>)
 800f5b8:	9801      	ldr	r0, [sp, #4]
 800f5ba:	6813      	ldr	r3, [r2, #0]
 800f5bc:	b933      	cbnz	r3, 800f5cc <_free_r+0x30>
 800f5be:	6063      	str	r3, [r4, #4]
 800f5c0:	6014      	str	r4, [r2, #0]
 800f5c2:	b003      	add	sp, #12
 800f5c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5c8:	f000 bb2a 	b.w	800fc20 <__malloc_unlock>
 800f5cc:	42a3      	cmp	r3, r4
 800f5ce:	d908      	bls.n	800f5e2 <_free_r+0x46>
 800f5d0:	6825      	ldr	r5, [r4, #0]
 800f5d2:	1961      	adds	r1, r4, r5
 800f5d4:	428b      	cmp	r3, r1
 800f5d6:	bf01      	itttt	eq
 800f5d8:	6819      	ldreq	r1, [r3, #0]
 800f5da:	685b      	ldreq	r3, [r3, #4]
 800f5dc:	1949      	addeq	r1, r1, r5
 800f5de:	6021      	streq	r1, [r4, #0]
 800f5e0:	e7ed      	b.n	800f5be <_free_r+0x22>
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	b10b      	cbz	r3, 800f5ec <_free_r+0x50>
 800f5e8:	42a3      	cmp	r3, r4
 800f5ea:	d9fa      	bls.n	800f5e2 <_free_r+0x46>
 800f5ec:	6811      	ldr	r1, [r2, #0]
 800f5ee:	1855      	adds	r5, r2, r1
 800f5f0:	42a5      	cmp	r5, r4
 800f5f2:	d10b      	bne.n	800f60c <_free_r+0x70>
 800f5f4:	6824      	ldr	r4, [r4, #0]
 800f5f6:	4421      	add	r1, r4
 800f5f8:	1854      	adds	r4, r2, r1
 800f5fa:	42a3      	cmp	r3, r4
 800f5fc:	6011      	str	r1, [r2, #0]
 800f5fe:	d1e0      	bne.n	800f5c2 <_free_r+0x26>
 800f600:	681c      	ldr	r4, [r3, #0]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	6053      	str	r3, [r2, #4]
 800f606:	4421      	add	r1, r4
 800f608:	6011      	str	r1, [r2, #0]
 800f60a:	e7da      	b.n	800f5c2 <_free_r+0x26>
 800f60c:	d902      	bls.n	800f614 <_free_r+0x78>
 800f60e:	230c      	movs	r3, #12
 800f610:	6003      	str	r3, [r0, #0]
 800f612:	e7d6      	b.n	800f5c2 <_free_r+0x26>
 800f614:	6825      	ldr	r5, [r4, #0]
 800f616:	1961      	adds	r1, r4, r5
 800f618:	428b      	cmp	r3, r1
 800f61a:	bf04      	itt	eq
 800f61c:	6819      	ldreq	r1, [r3, #0]
 800f61e:	685b      	ldreq	r3, [r3, #4]
 800f620:	6063      	str	r3, [r4, #4]
 800f622:	bf04      	itt	eq
 800f624:	1949      	addeq	r1, r1, r5
 800f626:	6021      	streq	r1, [r4, #0]
 800f628:	6054      	str	r4, [r2, #4]
 800f62a:	e7ca      	b.n	800f5c2 <_free_r+0x26>
 800f62c:	b003      	add	sp, #12
 800f62e:	bd30      	pop	{r4, r5, pc}
 800f630:	20009624 	.word	0x20009624

0800f634 <sbrk_aligned>:
 800f634:	b570      	push	{r4, r5, r6, lr}
 800f636:	4e0e      	ldr	r6, [pc, #56]	; (800f670 <sbrk_aligned+0x3c>)
 800f638:	460c      	mov	r4, r1
 800f63a:	6831      	ldr	r1, [r6, #0]
 800f63c:	4605      	mov	r5, r0
 800f63e:	b911      	cbnz	r1, 800f646 <sbrk_aligned+0x12>
 800f640:	f000 f9ee 	bl	800fa20 <_sbrk_r>
 800f644:	6030      	str	r0, [r6, #0]
 800f646:	4621      	mov	r1, r4
 800f648:	4628      	mov	r0, r5
 800f64a:	f000 f9e9 	bl	800fa20 <_sbrk_r>
 800f64e:	1c43      	adds	r3, r0, #1
 800f650:	d00a      	beq.n	800f668 <sbrk_aligned+0x34>
 800f652:	1cc4      	adds	r4, r0, #3
 800f654:	f024 0403 	bic.w	r4, r4, #3
 800f658:	42a0      	cmp	r0, r4
 800f65a:	d007      	beq.n	800f66c <sbrk_aligned+0x38>
 800f65c:	1a21      	subs	r1, r4, r0
 800f65e:	4628      	mov	r0, r5
 800f660:	f000 f9de 	bl	800fa20 <_sbrk_r>
 800f664:	3001      	adds	r0, #1
 800f666:	d101      	bne.n	800f66c <sbrk_aligned+0x38>
 800f668:	f04f 34ff 	mov.w	r4, #4294967295
 800f66c:	4620      	mov	r0, r4
 800f66e:	bd70      	pop	{r4, r5, r6, pc}
 800f670:	20009628 	.word	0x20009628

0800f674 <_malloc_r>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	1ccd      	adds	r5, r1, #3
 800f67a:	f025 0503 	bic.w	r5, r5, #3
 800f67e:	3508      	adds	r5, #8
 800f680:	2d0c      	cmp	r5, #12
 800f682:	bf38      	it	cc
 800f684:	250c      	movcc	r5, #12
 800f686:	2d00      	cmp	r5, #0
 800f688:	4607      	mov	r7, r0
 800f68a:	db01      	blt.n	800f690 <_malloc_r+0x1c>
 800f68c:	42a9      	cmp	r1, r5
 800f68e:	d905      	bls.n	800f69c <_malloc_r+0x28>
 800f690:	230c      	movs	r3, #12
 800f692:	603b      	str	r3, [r7, #0]
 800f694:	2600      	movs	r6, #0
 800f696:	4630      	mov	r0, r6
 800f698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f69c:	4e2e      	ldr	r6, [pc, #184]	; (800f758 <_malloc_r+0xe4>)
 800f69e:	f000 fab9 	bl	800fc14 <__malloc_lock>
 800f6a2:	6833      	ldr	r3, [r6, #0]
 800f6a4:	461c      	mov	r4, r3
 800f6a6:	bb34      	cbnz	r4, 800f6f6 <_malloc_r+0x82>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4638      	mov	r0, r7
 800f6ac:	f7ff ffc2 	bl	800f634 <sbrk_aligned>
 800f6b0:	1c43      	adds	r3, r0, #1
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	d14d      	bne.n	800f752 <_malloc_r+0xde>
 800f6b6:	6834      	ldr	r4, [r6, #0]
 800f6b8:	4626      	mov	r6, r4
 800f6ba:	2e00      	cmp	r6, #0
 800f6bc:	d140      	bne.n	800f740 <_malloc_r+0xcc>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	4631      	mov	r1, r6
 800f6c2:	4638      	mov	r0, r7
 800f6c4:	eb04 0803 	add.w	r8, r4, r3
 800f6c8:	f000 f9aa 	bl	800fa20 <_sbrk_r>
 800f6cc:	4580      	cmp	r8, r0
 800f6ce:	d13a      	bne.n	800f746 <_malloc_r+0xd2>
 800f6d0:	6821      	ldr	r1, [r4, #0]
 800f6d2:	3503      	adds	r5, #3
 800f6d4:	1a6d      	subs	r5, r5, r1
 800f6d6:	f025 0503 	bic.w	r5, r5, #3
 800f6da:	3508      	adds	r5, #8
 800f6dc:	2d0c      	cmp	r5, #12
 800f6de:	bf38      	it	cc
 800f6e0:	250c      	movcc	r5, #12
 800f6e2:	4629      	mov	r1, r5
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	f7ff ffa5 	bl	800f634 <sbrk_aligned>
 800f6ea:	3001      	adds	r0, #1
 800f6ec:	d02b      	beq.n	800f746 <_malloc_r+0xd2>
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	442b      	add	r3, r5
 800f6f2:	6023      	str	r3, [r4, #0]
 800f6f4:	e00e      	b.n	800f714 <_malloc_r+0xa0>
 800f6f6:	6822      	ldr	r2, [r4, #0]
 800f6f8:	1b52      	subs	r2, r2, r5
 800f6fa:	d41e      	bmi.n	800f73a <_malloc_r+0xc6>
 800f6fc:	2a0b      	cmp	r2, #11
 800f6fe:	d916      	bls.n	800f72e <_malloc_r+0xba>
 800f700:	1961      	adds	r1, r4, r5
 800f702:	42a3      	cmp	r3, r4
 800f704:	6025      	str	r5, [r4, #0]
 800f706:	bf18      	it	ne
 800f708:	6059      	strne	r1, [r3, #4]
 800f70a:	6863      	ldr	r3, [r4, #4]
 800f70c:	bf08      	it	eq
 800f70e:	6031      	streq	r1, [r6, #0]
 800f710:	5162      	str	r2, [r4, r5]
 800f712:	604b      	str	r3, [r1, #4]
 800f714:	4638      	mov	r0, r7
 800f716:	f104 060b 	add.w	r6, r4, #11
 800f71a:	f000 fa81 	bl	800fc20 <__malloc_unlock>
 800f71e:	f026 0607 	bic.w	r6, r6, #7
 800f722:	1d23      	adds	r3, r4, #4
 800f724:	1af2      	subs	r2, r6, r3
 800f726:	d0b6      	beq.n	800f696 <_malloc_r+0x22>
 800f728:	1b9b      	subs	r3, r3, r6
 800f72a:	50a3      	str	r3, [r4, r2]
 800f72c:	e7b3      	b.n	800f696 <_malloc_r+0x22>
 800f72e:	6862      	ldr	r2, [r4, #4]
 800f730:	42a3      	cmp	r3, r4
 800f732:	bf0c      	ite	eq
 800f734:	6032      	streq	r2, [r6, #0]
 800f736:	605a      	strne	r2, [r3, #4]
 800f738:	e7ec      	b.n	800f714 <_malloc_r+0xa0>
 800f73a:	4623      	mov	r3, r4
 800f73c:	6864      	ldr	r4, [r4, #4]
 800f73e:	e7b2      	b.n	800f6a6 <_malloc_r+0x32>
 800f740:	4634      	mov	r4, r6
 800f742:	6876      	ldr	r6, [r6, #4]
 800f744:	e7b9      	b.n	800f6ba <_malloc_r+0x46>
 800f746:	230c      	movs	r3, #12
 800f748:	603b      	str	r3, [r7, #0]
 800f74a:	4638      	mov	r0, r7
 800f74c:	f000 fa68 	bl	800fc20 <__malloc_unlock>
 800f750:	e7a1      	b.n	800f696 <_malloc_r+0x22>
 800f752:	6025      	str	r5, [r4, #0]
 800f754:	e7de      	b.n	800f714 <_malloc_r+0xa0>
 800f756:	bf00      	nop
 800f758:	20009624 	.word	0x20009624

0800f75c <__sfputc_r>:
 800f75c:	6893      	ldr	r3, [r2, #8]
 800f75e:	3b01      	subs	r3, #1
 800f760:	2b00      	cmp	r3, #0
 800f762:	b410      	push	{r4}
 800f764:	6093      	str	r3, [r2, #8]
 800f766:	da08      	bge.n	800f77a <__sfputc_r+0x1e>
 800f768:	6994      	ldr	r4, [r2, #24]
 800f76a:	42a3      	cmp	r3, r4
 800f76c:	db01      	blt.n	800f772 <__sfputc_r+0x16>
 800f76e:	290a      	cmp	r1, #10
 800f770:	d103      	bne.n	800f77a <__sfputc_r+0x1e>
 800f772:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f776:	f7fd bd51 	b.w	800d21c <__swbuf_r>
 800f77a:	6813      	ldr	r3, [r2, #0]
 800f77c:	1c58      	adds	r0, r3, #1
 800f77e:	6010      	str	r0, [r2, #0]
 800f780:	7019      	strb	r1, [r3, #0]
 800f782:	4608      	mov	r0, r1
 800f784:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <__sfputs_r>:
 800f78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78c:	4606      	mov	r6, r0
 800f78e:	460f      	mov	r7, r1
 800f790:	4614      	mov	r4, r2
 800f792:	18d5      	adds	r5, r2, r3
 800f794:	42ac      	cmp	r4, r5
 800f796:	d101      	bne.n	800f79c <__sfputs_r+0x12>
 800f798:	2000      	movs	r0, #0
 800f79a:	e007      	b.n	800f7ac <__sfputs_r+0x22>
 800f79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a0:	463a      	mov	r2, r7
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f7ff ffda 	bl	800f75c <__sfputc_r>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d1f3      	bne.n	800f794 <__sfputs_r+0xa>
 800f7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7b0 <_vfiprintf_r>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	b09d      	sub	sp, #116	; 0x74
 800f7b8:	4614      	mov	r4, r2
 800f7ba:	4698      	mov	r8, r3
 800f7bc:	4606      	mov	r6, r0
 800f7be:	b118      	cbz	r0, 800f7c8 <_vfiprintf_r+0x18>
 800f7c0:	6983      	ldr	r3, [r0, #24]
 800f7c2:	b90b      	cbnz	r3, 800f7c8 <_vfiprintf_r+0x18>
 800f7c4:	f7fe fd80 	bl	800e2c8 <__sinit>
 800f7c8:	4b89      	ldr	r3, [pc, #548]	; (800f9f0 <_vfiprintf_r+0x240>)
 800f7ca:	429d      	cmp	r5, r3
 800f7cc:	d11b      	bne.n	800f806 <_vfiprintf_r+0x56>
 800f7ce:	6875      	ldr	r5, [r6, #4]
 800f7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7d2:	07d9      	lsls	r1, r3, #31
 800f7d4:	d405      	bmi.n	800f7e2 <_vfiprintf_r+0x32>
 800f7d6:	89ab      	ldrh	r3, [r5, #12]
 800f7d8:	059a      	lsls	r2, r3, #22
 800f7da:	d402      	bmi.n	800f7e2 <_vfiprintf_r+0x32>
 800f7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7de:	f7ff f984 	bl	800eaea <__retarget_lock_acquire_recursive>
 800f7e2:	89ab      	ldrh	r3, [r5, #12]
 800f7e4:	071b      	lsls	r3, r3, #28
 800f7e6:	d501      	bpl.n	800f7ec <_vfiprintf_r+0x3c>
 800f7e8:	692b      	ldr	r3, [r5, #16]
 800f7ea:	b9eb      	cbnz	r3, 800f828 <_vfiprintf_r+0x78>
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f7fd fd66 	bl	800d2c0 <__swsetup_r>
 800f7f4:	b1c0      	cbz	r0, 800f828 <_vfiprintf_r+0x78>
 800f7f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7f8:	07dc      	lsls	r4, r3, #31
 800f7fa:	d50e      	bpl.n	800f81a <_vfiprintf_r+0x6a>
 800f7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f800:	b01d      	add	sp, #116	; 0x74
 800f802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f806:	4b7b      	ldr	r3, [pc, #492]	; (800f9f4 <_vfiprintf_r+0x244>)
 800f808:	429d      	cmp	r5, r3
 800f80a:	d101      	bne.n	800f810 <_vfiprintf_r+0x60>
 800f80c:	68b5      	ldr	r5, [r6, #8]
 800f80e:	e7df      	b.n	800f7d0 <_vfiprintf_r+0x20>
 800f810:	4b79      	ldr	r3, [pc, #484]	; (800f9f8 <_vfiprintf_r+0x248>)
 800f812:	429d      	cmp	r5, r3
 800f814:	bf08      	it	eq
 800f816:	68f5      	ldreq	r5, [r6, #12]
 800f818:	e7da      	b.n	800f7d0 <_vfiprintf_r+0x20>
 800f81a:	89ab      	ldrh	r3, [r5, #12]
 800f81c:	0598      	lsls	r0, r3, #22
 800f81e:	d4ed      	bmi.n	800f7fc <_vfiprintf_r+0x4c>
 800f820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f822:	f7ff f963 	bl	800eaec <__retarget_lock_release_recursive>
 800f826:	e7e9      	b.n	800f7fc <_vfiprintf_r+0x4c>
 800f828:	2300      	movs	r3, #0
 800f82a:	9309      	str	r3, [sp, #36]	; 0x24
 800f82c:	2320      	movs	r3, #32
 800f82e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f832:	f8cd 800c 	str.w	r8, [sp, #12]
 800f836:	2330      	movs	r3, #48	; 0x30
 800f838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f9fc <_vfiprintf_r+0x24c>
 800f83c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f840:	f04f 0901 	mov.w	r9, #1
 800f844:	4623      	mov	r3, r4
 800f846:	469a      	mov	sl, r3
 800f848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f84c:	b10a      	cbz	r2, 800f852 <_vfiprintf_r+0xa2>
 800f84e:	2a25      	cmp	r2, #37	; 0x25
 800f850:	d1f9      	bne.n	800f846 <_vfiprintf_r+0x96>
 800f852:	ebba 0b04 	subs.w	fp, sl, r4
 800f856:	d00b      	beq.n	800f870 <_vfiprintf_r+0xc0>
 800f858:	465b      	mov	r3, fp
 800f85a:	4622      	mov	r2, r4
 800f85c:	4629      	mov	r1, r5
 800f85e:	4630      	mov	r0, r6
 800f860:	f7ff ff93 	bl	800f78a <__sfputs_r>
 800f864:	3001      	adds	r0, #1
 800f866:	f000 80aa 	beq.w	800f9be <_vfiprintf_r+0x20e>
 800f86a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f86c:	445a      	add	r2, fp
 800f86e:	9209      	str	r2, [sp, #36]	; 0x24
 800f870:	f89a 3000 	ldrb.w	r3, [sl]
 800f874:	2b00      	cmp	r3, #0
 800f876:	f000 80a2 	beq.w	800f9be <_vfiprintf_r+0x20e>
 800f87a:	2300      	movs	r3, #0
 800f87c:	f04f 32ff 	mov.w	r2, #4294967295
 800f880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f884:	f10a 0a01 	add.w	sl, sl, #1
 800f888:	9304      	str	r3, [sp, #16]
 800f88a:	9307      	str	r3, [sp, #28]
 800f88c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f890:	931a      	str	r3, [sp, #104]	; 0x68
 800f892:	4654      	mov	r4, sl
 800f894:	2205      	movs	r2, #5
 800f896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f89a:	4858      	ldr	r0, [pc, #352]	; (800f9fc <_vfiprintf_r+0x24c>)
 800f89c:	f7f0 fcc0 	bl	8000220 <memchr>
 800f8a0:	9a04      	ldr	r2, [sp, #16]
 800f8a2:	b9d8      	cbnz	r0, 800f8dc <_vfiprintf_r+0x12c>
 800f8a4:	06d1      	lsls	r1, r2, #27
 800f8a6:	bf44      	itt	mi
 800f8a8:	2320      	movmi	r3, #32
 800f8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8ae:	0713      	lsls	r3, r2, #28
 800f8b0:	bf44      	itt	mi
 800f8b2:	232b      	movmi	r3, #43	; 0x2b
 800f8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f8be:	d015      	beq.n	800f8ec <_vfiprintf_r+0x13c>
 800f8c0:	9a07      	ldr	r2, [sp, #28]
 800f8c2:	4654      	mov	r4, sl
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	f04f 0c0a 	mov.w	ip, #10
 800f8ca:	4621      	mov	r1, r4
 800f8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8d0:	3b30      	subs	r3, #48	; 0x30
 800f8d2:	2b09      	cmp	r3, #9
 800f8d4:	d94e      	bls.n	800f974 <_vfiprintf_r+0x1c4>
 800f8d6:	b1b0      	cbz	r0, 800f906 <_vfiprintf_r+0x156>
 800f8d8:	9207      	str	r2, [sp, #28]
 800f8da:	e014      	b.n	800f906 <_vfiprintf_r+0x156>
 800f8dc:	eba0 0308 	sub.w	r3, r0, r8
 800f8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	9304      	str	r3, [sp, #16]
 800f8e8:	46a2      	mov	sl, r4
 800f8ea:	e7d2      	b.n	800f892 <_vfiprintf_r+0xe2>
 800f8ec:	9b03      	ldr	r3, [sp, #12]
 800f8ee:	1d19      	adds	r1, r3, #4
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	9103      	str	r1, [sp, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	bfbb      	ittet	lt
 800f8f8:	425b      	neglt	r3, r3
 800f8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f8fe:	9307      	strge	r3, [sp, #28]
 800f900:	9307      	strlt	r3, [sp, #28]
 800f902:	bfb8      	it	lt
 800f904:	9204      	strlt	r2, [sp, #16]
 800f906:	7823      	ldrb	r3, [r4, #0]
 800f908:	2b2e      	cmp	r3, #46	; 0x2e
 800f90a:	d10c      	bne.n	800f926 <_vfiprintf_r+0x176>
 800f90c:	7863      	ldrb	r3, [r4, #1]
 800f90e:	2b2a      	cmp	r3, #42	; 0x2a
 800f910:	d135      	bne.n	800f97e <_vfiprintf_r+0x1ce>
 800f912:	9b03      	ldr	r3, [sp, #12]
 800f914:	1d1a      	adds	r2, r3, #4
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	9203      	str	r2, [sp, #12]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	bfb8      	it	lt
 800f91e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f922:	3402      	adds	r4, #2
 800f924:	9305      	str	r3, [sp, #20]
 800f926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa0c <_vfiprintf_r+0x25c>
 800f92a:	7821      	ldrb	r1, [r4, #0]
 800f92c:	2203      	movs	r2, #3
 800f92e:	4650      	mov	r0, sl
 800f930:	f7f0 fc76 	bl	8000220 <memchr>
 800f934:	b140      	cbz	r0, 800f948 <_vfiprintf_r+0x198>
 800f936:	2340      	movs	r3, #64	; 0x40
 800f938:	eba0 000a 	sub.w	r0, r0, sl
 800f93c:	fa03 f000 	lsl.w	r0, r3, r0
 800f940:	9b04      	ldr	r3, [sp, #16]
 800f942:	4303      	orrs	r3, r0
 800f944:	3401      	adds	r4, #1
 800f946:	9304      	str	r3, [sp, #16]
 800f948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f94c:	482c      	ldr	r0, [pc, #176]	; (800fa00 <_vfiprintf_r+0x250>)
 800f94e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f952:	2206      	movs	r2, #6
 800f954:	f7f0 fc64 	bl	8000220 <memchr>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d03f      	beq.n	800f9dc <_vfiprintf_r+0x22c>
 800f95c:	4b29      	ldr	r3, [pc, #164]	; (800fa04 <_vfiprintf_r+0x254>)
 800f95e:	bb1b      	cbnz	r3, 800f9a8 <_vfiprintf_r+0x1f8>
 800f960:	9b03      	ldr	r3, [sp, #12]
 800f962:	3307      	adds	r3, #7
 800f964:	f023 0307 	bic.w	r3, r3, #7
 800f968:	3308      	adds	r3, #8
 800f96a:	9303      	str	r3, [sp, #12]
 800f96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f96e:	443b      	add	r3, r7
 800f970:	9309      	str	r3, [sp, #36]	; 0x24
 800f972:	e767      	b.n	800f844 <_vfiprintf_r+0x94>
 800f974:	fb0c 3202 	mla	r2, ip, r2, r3
 800f978:	460c      	mov	r4, r1
 800f97a:	2001      	movs	r0, #1
 800f97c:	e7a5      	b.n	800f8ca <_vfiprintf_r+0x11a>
 800f97e:	2300      	movs	r3, #0
 800f980:	3401      	adds	r4, #1
 800f982:	9305      	str	r3, [sp, #20]
 800f984:	4619      	mov	r1, r3
 800f986:	f04f 0c0a 	mov.w	ip, #10
 800f98a:	4620      	mov	r0, r4
 800f98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f990:	3a30      	subs	r2, #48	; 0x30
 800f992:	2a09      	cmp	r2, #9
 800f994:	d903      	bls.n	800f99e <_vfiprintf_r+0x1ee>
 800f996:	2b00      	cmp	r3, #0
 800f998:	d0c5      	beq.n	800f926 <_vfiprintf_r+0x176>
 800f99a:	9105      	str	r1, [sp, #20]
 800f99c:	e7c3      	b.n	800f926 <_vfiprintf_r+0x176>
 800f99e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e7f0      	b.n	800f98a <_vfiprintf_r+0x1da>
 800f9a8:	ab03      	add	r3, sp, #12
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	462a      	mov	r2, r5
 800f9ae:	4b16      	ldr	r3, [pc, #88]	; (800fa08 <_vfiprintf_r+0x258>)
 800f9b0:	a904      	add	r1, sp, #16
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7fc f91e 	bl	800bbf4 <_printf_float>
 800f9b8:	4607      	mov	r7, r0
 800f9ba:	1c78      	adds	r0, r7, #1
 800f9bc:	d1d6      	bne.n	800f96c <_vfiprintf_r+0x1bc>
 800f9be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9c0:	07d9      	lsls	r1, r3, #31
 800f9c2:	d405      	bmi.n	800f9d0 <_vfiprintf_r+0x220>
 800f9c4:	89ab      	ldrh	r3, [r5, #12]
 800f9c6:	059a      	lsls	r2, r3, #22
 800f9c8:	d402      	bmi.n	800f9d0 <_vfiprintf_r+0x220>
 800f9ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9cc:	f7ff f88e 	bl	800eaec <__retarget_lock_release_recursive>
 800f9d0:	89ab      	ldrh	r3, [r5, #12]
 800f9d2:	065b      	lsls	r3, r3, #25
 800f9d4:	f53f af12 	bmi.w	800f7fc <_vfiprintf_r+0x4c>
 800f9d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9da:	e711      	b.n	800f800 <_vfiprintf_r+0x50>
 800f9dc:	ab03      	add	r3, sp, #12
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	462a      	mov	r2, r5
 800f9e2:	4b09      	ldr	r3, [pc, #36]	; (800fa08 <_vfiprintf_r+0x258>)
 800f9e4:	a904      	add	r1, sp, #16
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f7fc fba8 	bl	800c13c <_printf_i>
 800f9ec:	e7e4      	b.n	800f9b8 <_vfiprintf_r+0x208>
 800f9ee:	bf00      	nop
 800f9f0:	080117d4 	.word	0x080117d4
 800f9f4:	080117f4 	.word	0x080117f4
 800f9f8:	080117b4 	.word	0x080117b4
 800f9fc:	080119ec 	.word	0x080119ec
 800fa00:	080119f6 	.word	0x080119f6
 800fa04:	0800bbf5 	.word	0x0800bbf5
 800fa08:	0800f78b 	.word	0x0800f78b
 800fa0c:	080119f2 	.word	0x080119f2

0800fa10 <nan>:
 800fa10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fa18 <nan+0x8>
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	00000000 	.word	0x00000000
 800fa1c:	7ff80000 	.word	0x7ff80000

0800fa20 <_sbrk_r>:
 800fa20:	b538      	push	{r3, r4, r5, lr}
 800fa22:	4d06      	ldr	r5, [pc, #24]	; (800fa3c <_sbrk_r+0x1c>)
 800fa24:	2300      	movs	r3, #0
 800fa26:	4604      	mov	r4, r0
 800fa28:	4608      	mov	r0, r1
 800fa2a:	602b      	str	r3, [r5, #0]
 800fa2c:	f7f6 fc66 	bl	80062fc <_sbrk>
 800fa30:	1c43      	adds	r3, r0, #1
 800fa32:	d102      	bne.n	800fa3a <_sbrk_r+0x1a>
 800fa34:	682b      	ldr	r3, [r5, #0]
 800fa36:	b103      	cbz	r3, 800fa3a <_sbrk_r+0x1a>
 800fa38:	6023      	str	r3, [r4, #0]
 800fa3a:	bd38      	pop	{r3, r4, r5, pc}
 800fa3c:	2000962c 	.word	0x2000962c

0800fa40 <__sread>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	460c      	mov	r4, r1
 800fa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa48:	f000 f8f0 	bl	800fc2c <_read_r>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	bfab      	itete	ge
 800fa50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa52:	89a3      	ldrhlt	r3, [r4, #12]
 800fa54:	181b      	addge	r3, r3, r0
 800fa56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa5a:	bfac      	ite	ge
 800fa5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa5e:	81a3      	strhlt	r3, [r4, #12]
 800fa60:	bd10      	pop	{r4, pc}

0800fa62 <__swrite>:
 800fa62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa66:	461f      	mov	r7, r3
 800fa68:	898b      	ldrh	r3, [r1, #12]
 800fa6a:	05db      	lsls	r3, r3, #23
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	460c      	mov	r4, r1
 800fa70:	4616      	mov	r6, r2
 800fa72:	d505      	bpl.n	800fa80 <__swrite+0x1e>
 800fa74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa78:	2302      	movs	r3, #2
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f000 f8b8 	bl	800fbf0 <_lseek_r>
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa8a:	81a3      	strh	r3, [r4, #12]
 800fa8c:	4632      	mov	r2, r6
 800fa8e:	463b      	mov	r3, r7
 800fa90:	4628      	mov	r0, r5
 800fa92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa96:	f000 b837 	b.w	800fb08 <_write_r>

0800fa9a <__sseek>:
 800fa9a:	b510      	push	{r4, lr}
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa2:	f000 f8a5 	bl	800fbf0 <_lseek_r>
 800faa6:	1c43      	adds	r3, r0, #1
 800faa8:	89a3      	ldrh	r3, [r4, #12]
 800faaa:	bf15      	itete	ne
 800faac:	6560      	strne	r0, [r4, #84]	; 0x54
 800faae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fab6:	81a3      	strheq	r3, [r4, #12]
 800fab8:	bf18      	it	ne
 800faba:	81a3      	strhne	r3, [r4, #12]
 800fabc:	bd10      	pop	{r4, pc}

0800fabe <__sclose>:
 800fabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac2:	f000 b851 	b.w	800fb68 <_close_r>

0800fac6 <strncmp>:
 800fac6:	b510      	push	{r4, lr}
 800fac8:	b17a      	cbz	r2, 800faea <strncmp+0x24>
 800faca:	4603      	mov	r3, r0
 800facc:	3901      	subs	r1, #1
 800face:	1884      	adds	r4, r0, r2
 800fad0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fad4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fad8:	4290      	cmp	r0, r2
 800fada:	d101      	bne.n	800fae0 <strncmp+0x1a>
 800fadc:	42a3      	cmp	r3, r4
 800fade:	d101      	bne.n	800fae4 <strncmp+0x1e>
 800fae0:	1a80      	subs	r0, r0, r2
 800fae2:	bd10      	pop	{r4, pc}
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d1f3      	bne.n	800fad0 <strncmp+0xa>
 800fae8:	e7fa      	b.n	800fae0 <strncmp+0x1a>
 800faea:	4610      	mov	r0, r2
 800faec:	e7f9      	b.n	800fae2 <strncmp+0x1c>

0800faee <__ascii_wctomb>:
 800faee:	b149      	cbz	r1, 800fb04 <__ascii_wctomb+0x16>
 800faf0:	2aff      	cmp	r2, #255	; 0xff
 800faf2:	bf85      	ittet	hi
 800faf4:	238a      	movhi	r3, #138	; 0x8a
 800faf6:	6003      	strhi	r3, [r0, #0]
 800faf8:	700a      	strbls	r2, [r1, #0]
 800fafa:	f04f 30ff 	movhi.w	r0, #4294967295
 800fafe:	bf98      	it	ls
 800fb00:	2001      	movls	r0, #1
 800fb02:	4770      	bx	lr
 800fb04:	4608      	mov	r0, r1
 800fb06:	4770      	bx	lr

0800fb08 <_write_r>:
 800fb08:	b538      	push	{r3, r4, r5, lr}
 800fb0a:	4d07      	ldr	r5, [pc, #28]	; (800fb28 <_write_r+0x20>)
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	4608      	mov	r0, r1
 800fb10:	4611      	mov	r1, r2
 800fb12:	2200      	movs	r2, #0
 800fb14:	602a      	str	r2, [r5, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	f7f6 fb9f 	bl	800625a <_write>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d102      	bne.n	800fb26 <_write_r+0x1e>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	b103      	cbz	r3, 800fb26 <_write_r+0x1e>
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	bd38      	pop	{r3, r4, r5, pc}
 800fb28:	2000962c 	.word	0x2000962c

0800fb2c <__assert_func>:
 800fb2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb2e:	4614      	mov	r4, r2
 800fb30:	461a      	mov	r2, r3
 800fb32:	4b09      	ldr	r3, [pc, #36]	; (800fb58 <__assert_func+0x2c>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4605      	mov	r5, r0
 800fb38:	68d8      	ldr	r0, [r3, #12]
 800fb3a:	b14c      	cbz	r4, 800fb50 <__assert_func+0x24>
 800fb3c:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <__assert_func+0x30>)
 800fb3e:	9100      	str	r1, [sp, #0]
 800fb40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb44:	4906      	ldr	r1, [pc, #24]	; (800fb60 <__assert_func+0x34>)
 800fb46:	462b      	mov	r3, r5
 800fb48:	f000 f81e 	bl	800fb88 <fiprintf>
 800fb4c:	f000 f880 	bl	800fc50 <abort>
 800fb50:	4b04      	ldr	r3, [pc, #16]	; (800fb64 <__assert_func+0x38>)
 800fb52:	461c      	mov	r4, r3
 800fb54:	e7f3      	b.n	800fb3e <__assert_func+0x12>
 800fb56:	bf00      	nop
 800fb58:	2000004c 	.word	0x2000004c
 800fb5c:	080119fd 	.word	0x080119fd
 800fb60:	08011a0a 	.word	0x08011a0a
 800fb64:	08011a38 	.word	0x08011a38

0800fb68 <_close_r>:
 800fb68:	b538      	push	{r3, r4, r5, lr}
 800fb6a:	4d06      	ldr	r5, [pc, #24]	; (800fb84 <_close_r+0x1c>)
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	4604      	mov	r4, r0
 800fb70:	4608      	mov	r0, r1
 800fb72:	602b      	str	r3, [r5, #0]
 800fb74:	f7f6 fb8d 	bl	8006292 <_close>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	d102      	bne.n	800fb82 <_close_r+0x1a>
 800fb7c:	682b      	ldr	r3, [r5, #0]
 800fb7e:	b103      	cbz	r3, 800fb82 <_close_r+0x1a>
 800fb80:	6023      	str	r3, [r4, #0]
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
 800fb84:	2000962c 	.word	0x2000962c

0800fb88 <fiprintf>:
 800fb88:	b40e      	push	{r1, r2, r3}
 800fb8a:	b503      	push	{r0, r1, lr}
 800fb8c:	4601      	mov	r1, r0
 800fb8e:	ab03      	add	r3, sp, #12
 800fb90:	4805      	ldr	r0, [pc, #20]	; (800fba8 <fiprintf+0x20>)
 800fb92:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb96:	6800      	ldr	r0, [r0, #0]
 800fb98:	9301      	str	r3, [sp, #4]
 800fb9a:	f7ff fe09 	bl	800f7b0 <_vfiprintf_r>
 800fb9e:	b002      	add	sp, #8
 800fba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fba4:	b003      	add	sp, #12
 800fba6:	4770      	bx	lr
 800fba8:	2000004c 	.word	0x2000004c

0800fbac <_fstat_r>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	4d07      	ldr	r5, [pc, #28]	; (800fbcc <_fstat_r+0x20>)
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	4608      	mov	r0, r1
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	602b      	str	r3, [r5, #0]
 800fbba:	f7f6 fb76 	bl	80062aa <_fstat>
 800fbbe:	1c43      	adds	r3, r0, #1
 800fbc0:	d102      	bne.n	800fbc8 <_fstat_r+0x1c>
 800fbc2:	682b      	ldr	r3, [r5, #0]
 800fbc4:	b103      	cbz	r3, 800fbc8 <_fstat_r+0x1c>
 800fbc6:	6023      	str	r3, [r4, #0]
 800fbc8:	bd38      	pop	{r3, r4, r5, pc}
 800fbca:	bf00      	nop
 800fbcc:	2000962c 	.word	0x2000962c

0800fbd0 <_isatty_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4d06      	ldr	r5, [pc, #24]	; (800fbec <_isatty_r+0x1c>)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	4608      	mov	r0, r1
 800fbda:	602b      	str	r3, [r5, #0]
 800fbdc:	f7f6 fb75 	bl	80062ca <_isatty>
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	d102      	bne.n	800fbea <_isatty_r+0x1a>
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	b103      	cbz	r3, 800fbea <_isatty_r+0x1a>
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	2000962c 	.word	0x2000962c

0800fbf0 <_lseek_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4d07      	ldr	r5, [pc, #28]	; (800fc10 <_lseek_r+0x20>)
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	4608      	mov	r0, r1
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	602a      	str	r2, [r5, #0]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	f7f6 fb6e 	bl	80062e0 <_lseek>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d102      	bne.n	800fc0e <_lseek_r+0x1e>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	b103      	cbz	r3, 800fc0e <_lseek_r+0x1e>
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	bd38      	pop	{r3, r4, r5, pc}
 800fc10:	2000962c 	.word	0x2000962c

0800fc14 <__malloc_lock>:
 800fc14:	4801      	ldr	r0, [pc, #4]	; (800fc1c <__malloc_lock+0x8>)
 800fc16:	f7fe bf68 	b.w	800eaea <__retarget_lock_acquire_recursive>
 800fc1a:	bf00      	nop
 800fc1c:	20009620 	.word	0x20009620

0800fc20 <__malloc_unlock>:
 800fc20:	4801      	ldr	r0, [pc, #4]	; (800fc28 <__malloc_unlock+0x8>)
 800fc22:	f7fe bf63 	b.w	800eaec <__retarget_lock_release_recursive>
 800fc26:	bf00      	nop
 800fc28:	20009620 	.word	0x20009620

0800fc2c <_read_r>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4d07      	ldr	r5, [pc, #28]	; (800fc4c <_read_r+0x20>)
 800fc30:	4604      	mov	r4, r0
 800fc32:	4608      	mov	r0, r1
 800fc34:	4611      	mov	r1, r2
 800fc36:	2200      	movs	r2, #0
 800fc38:	602a      	str	r2, [r5, #0]
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	f7f6 faf0 	bl	8006220 <_read>
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	d102      	bne.n	800fc4a <_read_r+0x1e>
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	b103      	cbz	r3, 800fc4a <_read_r+0x1e>
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	2000962c 	.word	0x2000962c

0800fc50 <abort>:
 800fc50:	b508      	push	{r3, lr}
 800fc52:	2006      	movs	r0, #6
 800fc54:	f000 f82c 	bl	800fcb0 <raise>
 800fc58:	2001      	movs	r0, #1
 800fc5a:	f7f6 fad7 	bl	800620c <_exit>

0800fc5e <_raise_r>:
 800fc5e:	291f      	cmp	r1, #31
 800fc60:	b538      	push	{r3, r4, r5, lr}
 800fc62:	4604      	mov	r4, r0
 800fc64:	460d      	mov	r5, r1
 800fc66:	d904      	bls.n	800fc72 <_raise_r+0x14>
 800fc68:	2316      	movs	r3, #22
 800fc6a:	6003      	str	r3, [r0, #0]
 800fc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc70:	bd38      	pop	{r3, r4, r5, pc}
 800fc72:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc74:	b112      	cbz	r2, 800fc7c <_raise_r+0x1e>
 800fc76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc7a:	b94b      	cbnz	r3, 800fc90 <_raise_r+0x32>
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f000 f831 	bl	800fce4 <_getpid_r>
 800fc82:	462a      	mov	r2, r5
 800fc84:	4601      	mov	r1, r0
 800fc86:	4620      	mov	r0, r4
 800fc88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc8c:	f000 b818 	b.w	800fcc0 <_kill_r>
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d00a      	beq.n	800fcaa <_raise_r+0x4c>
 800fc94:	1c59      	adds	r1, r3, #1
 800fc96:	d103      	bne.n	800fca0 <_raise_r+0x42>
 800fc98:	2316      	movs	r3, #22
 800fc9a:	6003      	str	r3, [r0, #0]
 800fc9c:	2001      	movs	r0, #1
 800fc9e:	e7e7      	b.n	800fc70 <_raise_r+0x12>
 800fca0:	2400      	movs	r4, #0
 800fca2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fca6:	4628      	mov	r0, r5
 800fca8:	4798      	blx	r3
 800fcaa:	2000      	movs	r0, #0
 800fcac:	e7e0      	b.n	800fc70 <_raise_r+0x12>
	...

0800fcb0 <raise>:
 800fcb0:	4b02      	ldr	r3, [pc, #8]	; (800fcbc <raise+0xc>)
 800fcb2:	4601      	mov	r1, r0
 800fcb4:	6818      	ldr	r0, [r3, #0]
 800fcb6:	f7ff bfd2 	b.w	800fc5e <_raise_r>
 800fcba:	bf00      	nop
 800fcbc:	2000004c 	.word	0x2000004c

0800fcc0 <_kill_r>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	4d07      	ldr	r5, [pc, #28]	; (800fce0 <_kill_r+0x20>)
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	4608      	mov	r0, r1
 800fcca:	4611      	mov	r1, r2
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	f7f6 fa8d 	bl	80061ec <_kill>
 800fcd2:	1c43      	adds	r3, r0, #1
 800fcd4:	d102      	bne.n	800fcdc <_kill_r+0x1c>
 800fcd6:	682b      	ldr	r3, [r5, #0]
 800fcd8:	b103      	cbz	r3, 800fcdc <_kill_r+0x1c>
 800fcda:	6023      	str	r3, [r4, #0]
 800fcdc:	bd38      	pop	{r3, r4, r5, pc}
 800fcde:	bf00      	nop
 800fce0:	2000962c 	.word	0x2000962c

0800fce4 <_getpid_r>:
 800fce4:	f7f6 ba7a 	b.w	80061dc <_getpid>

0800fce8 <round>:
 800fce8:	ec51 0b10 	vmov	r0, r1, d0
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800fcf2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800fcf6:	2c13      	cmp	r4, #19
 800fcf8:	ee10 2a10 	vmov	r2, s0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	dc19      	bgt.n	800fd34 <round+0x4c>
 800fd00:	2c00      	cmp	r4, #0
 800fd02:	da09      	bge.n	800fd18 <round+0x30>
 800fd04:	3401      	adds	r4, #1
 800fd06:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fd0a:	d103      	bne.n	800fd14 <round+0x2c>
 800fd0c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fd10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd14:	2200      	movs	r2, #0
 800fd16:	e028      	b.n	800fd6a <round+0x82>
 800fd18:	4d15      	ldr	r5, [pc, #84]	; (800fd70 <round+0x88>)
 800fd1a:	4125      	asrs	r5, r4
 800fd1c:	ea01 0605 	and.w	r6, r1, r5
 800fd20:	4332      	orrs	r2, r6
 800fd22:	d00e      	beq.n	800fd42 <round+0x5a>
 800fd24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fd28:	fa42 f404 	asr.w	r4, r2, r4
 800fd2c:	4423      	add	r3, r4
 800fd2e:	ea23 0305 	bic.w	r3, r3, r5
 800fd32:	e7ef      	b.n	800fd14 <round+0x2c>
 800fd34:	2c33      	cmp	r4, #51	; 0x33
 800fd36:	dd07      	ble.n	800fd48 <round+0x60>
 800fd38:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fd3c:	d101      	bne.n	800fd42 <round+0x5a>
 800fd3e:	f7f0 fac5 	bl	80002cc <__adddf3>
 800fd42:	ec41 0b10 	vmov	d0, r0, r1
 800fd46:	bd70      	pop	{r4, r5, r6, pc}
 800fd48:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800fd4c:	f04f 35ff 	mov.w	r5, #4294967295
 800fd50:	40f5      	lsrs	r5, r6
 800fd52:	4228      	tst	r0, r5
 800fd54:	d0f5      	beq.n	800fd42 <round+0x5a>
 800fd56:	2101      	movs	r1, #1
 800fd58:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fd5c:	fa01 f404 	lsl.w	r4, r1, r4
 800fd60:	1912      	adds	r2, r2, r4
 800fd62:	bf28      	it	cs
 800fd64:	185b      	addcs	r3, r3, r1
 800fd66:	ea22 0205 	bic.w	r2, r2, r5
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	e7e8      	b.n	800fd42 <round+0x5a>
 800fd70:	000fffff 	.word	0x000fffff

0800fd74 <fmaxf>:
 800fd74:	b508      	push	{r3, lr}
 800fd76:	ed2d 8b02 	vpush	{d8}
 800fd7a:	eeb0 8a40 	vmov.f32	s16, s0
 800fd7e:	eef0 8a60 	vmov.f32	s17, s1
 800fd82:	f000 f82d 	bl	800fde0 <__fpclassifyf>
 800fd86:	b148      	cbz	r0, 800fd9c <fmaxf+0x28>
 800fd88:	eeb0 0a68 	vmov.f32	s0, s17
 800fd8c:	f000 f828 	bl	800fde0 <__fpclassifyf>
 800fd90:	b130      	cbz	r0, 800fda0 <fmaxf+0x2c>
 800fd92:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9a:	dc01      	bgt.n	800fda0 <fmaxf+0x2c>
 800fd9c:	eeb0 8a68 	vmov.f32	s16, s17
 800fda0:	eeb0 0a48 	vmov.f32	s0, s16
 800fda4:	ecbd 8b02 	vpop	{d8}
 800fda8:	bd08      	pop	{r3, pc}

0800fdaa <fminf>:
 800fdaa:	b508      	push	{r3, lr}
 800fdac:	ed2d 8b02 	vpush	{d8}
 800fdb0:	eeb0 8a40 	vmov.f32	s16, s0
 800fdb4:	eef0 8a60 	vmov.f32	s17, s1
 800fdb8:	f000 f812 	bl	800fde0 <__fpclassifyf>
 800fdbc:	b148      	cbz	r0, 800fdd2 <fminf+0x28>
 800fdbe:	eeb0 0a68 	vmov.f32	s0, s17
 800fdc2:	f000 f80d 	bl	800fde0 <__fpclassifyf>
 800fdc6:	b130      	cbz	r0, 800fdd6 <fminf+0x2c>
 800fdc8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd0:	d401      	bmi.n	800fdd6 <fminf+0x2c>
 800fdd2:	eeb0 8a68 	vmov.f32	s16, s17
 800fdd6:	eeb0 0a48 	vmov.f32	s0, s16
 800fdda:	ecbd 8b02 	vpop	{d8}
 800fdde:	bd08      	pop	{r3, pc}

0800fde0 <__fpclassifyf>:
 800fde0:	ee10 3a10 	vmov	r3, s0
 800fde4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800fde8:	d00d      	beq.n	800fe06 <__fpclassifyf+0x26>
 800fdea:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800fdee:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800fdf2:	d30a      	bcc.n	800fe0a <__fpclassifyf+0x2a>
 800fdf4:	4b07      	ldr	r3, [pc, #28]	; (800fe14 <__fpclassifyf+0x34>)
 800fdf6:	1e42      	subs	r2, r0, #1
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d908      	bls.n	800fe0e <__fpclassifyf+0x2e>
 800fdfc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800fe00:	4258      	negs	r0, r3
 800fe02:	4158      	adcs	r0, r3
 800fe04:	4770      	bx	lr
 800fe06:	2002      	movs	r0, #2
 800fe08:	4770      	bx	lr
 800fe0a:	2004      	movs	r0, #4
 800fe0c:	4770      	bx	lr
 800fe0e:	2003      	movs	r0, #3
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	007ffffe 	.word	0x007ffffe

0800fe18 <exp>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	ed2d 8b02 	vpush	{d8}
 800fe1e:	ec55 4b10 	vmov	r4, r5, d0
 800fe22:	f000 f881 	bl	800ff28 <__ieee754_exp>
 800fe26:	eeb0 8a40 	vmov.f32	s16, s0
 800fe2a:	eef0 8a60 	vmov.f32	s17, s1
 800fe2e:	ec45 4b10 	vmov	d0, r4, r5
 800fe32:	f000 fab0 	bl	8010396 <finite>
 800fe36:	b168      	cbz	r0, 800fe54 <exp+0x3c>
 800fe38:	a317      	add	r3, pc, #92	; (adr r3, 800fe98 <exp+0x80>)
 800fe3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3e:	4620      	mov	r0, r4
 800fe40:	4629      	mov	r1, r5
 800fe42:	f7f0 fe89 	bl	8000b58 <__aeabi_dcmpgt>
 800fe46:	b160      	cbz	r0, 800fe62 <exp+0x4a>
 800fe48:	f7fb fdf4 	bl	800ba34 <__errno>
 800fe4c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800fe88 <exp+0x70>
 800fe50:	2322      	movs	r3, #34	; 0x22
 800fe52:	6003      	str	r3, [r0, #0]
 800fe54:	eeb0 0a48 	vmov.f32	s0, s16
 800fe58:	eef0 0a68 	vmov.f32	s1, s17
 800fe5c:	ecbd 8b02 	vpop	{d8}
 800fe60:	bd38      	pop	{r3, r4, r5, pc}
 800fe62:	a30f      	add	r3, pc, #60	; (adr r3, 800fea0 <exp+0x88>)
 800fe64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f7f0 fe56 	bl	8000b1c <__aeabi_dcmplt>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d0ef      	beq.n	800fe54 <exp+0x3c>
 800fe74:	f7fb fdde 	bl	800ba34 <__errno>
 800fe78:	2322      	movs	r3, #34	; 0x22
 800fe7a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800fe90 <exp+0x78>
 800fe7e:	6003      	str	r3, [r0, #0]
 800fe80:	e7e8      	b.n	800fe54 <exp+0x3c>
 800fe82:	bf00      	nop
 800fe84:	f3af 8000 	nop.w
 800fe88:	00000000 	.word	0x00000000
 800fe8c:	7ff00000 	.word	0x7ff00000
	...
 800fe98:	fefa39ef 	.word	0xfefa39ef
 800fe9c:	40862e42 	.word	0x40862e42
 800fea0:	d52d3051 	.word	0xd52d3051
 800fea4:	c0874910 	.word	0xc0874910

0800fea8 <fmodf>:
 800fea8:	b508      	push	{r3, lr}
 800feaa:	ed2d 8b02 	vpush	{d8}
 800feae:	eef0 8a40 	vmov.f32	s17, s0
 800feb2:	eeb0 8a60 	vmov.f32	s16, s1
 800feb6:	f000 f9b9 	bl	801022c <__ieee754_fmodf>
 800feba:	eef4 8a48 	vcmp.f32	s17, s16
 800febe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec2:	d60c      	bvs.n	800fede <fmodf+0x36>
 800fec4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800fee4 <fmodf+0x3c>
 800fec8:	eeb4 8a68 	vcmp.f32	s16, s17
 800fecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed0:	d105      	bne.n	800fede <fmodf+0x36>
 800fed2:	f7fb fdaf 	bl	800ba34 <__errno>
 800fed6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800feda:	2321      	movs	r3, #33	; 0x21
 800fedc:	6003      	str	r3, [r0, #0]
 800fede:	ecbd 8b02 	vpop	{d8}
 800fee2:	bd08      	pop	{r3, pc}
 800fee4:	00000000 	.word	0x00000000

0800fee8 <sqrtf>:
 800fee8:	b508      	push	{r3, lr}
 800feea:	ed2d 8b02 	vpush	{d8}
 800feee:	eeb0 8a40 	vmov.f32	s16, s0
 800fef2:	f000 fa1d 	bl	8010330 <__ieee754_sqrtf>
 800fef6:	eeb4 8a48 	vcmp.f32	s16, s16
 800fefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefe:	d60c      	bvs.n	800ff1a <sqrtf+0x32>
 800ff00:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ff20 <sqrtf+0x38>
 800ff04:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ff08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0c:	d505      	bpl.n	800ff1a <sqrtf+0x32>
 800ff0e:	f7fb fd91 	bl	800ba34 <__errno>
 800ff12:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ff16:	2321      	movs	r3, #33	; 0x21
 800ff18:	6003      	str	r3, [r0, #0]
 800ff1a:	ecbd 8b02 	vpop	{d8}
 800ff1e:	bd08      	pop	{r3, pc}
	...

0800ff28 <__ieee754_exp>:
 800ff28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff2c:	ec55 4b10 	vmov	r4, r5, d0
 800ff30:	49b5      	ldr	r1, [pc, #724]	; (8010208 <__ieee754_exp+0x2e0>)
 800ff32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ff36:	428b      	cmp	r3, r1
 800ff38:	ed2d 8b04 	vpush	{d8-d9}
 800ff3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ff40:	d93d      	bls.n	800ffbe <__ieee754_exp+0x96>
 800ff42:	49b2      	ldr	r1, [pc, #712]	; (801020c <__ieee754_exp+0x2e4>)
 800ff44:	428b      	cmp	r3, r1
 800ff46:	d918      	bls.n	800ff7a <__ieee754_exp+0x52>
 800ff48:	ee10 3a10 	vmov	r3, s0
 800ff4c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800ff50:	4313      	orrs	r3, r2
 800ff52:	d009      	beq.n	800ff68 <__ieee754_exp+0x40>
 800ff54:	ee10 2a10 	vmov	r2, s0
 800ff58:	462b      	mov	r3, r5
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	f7f0 f9b5 	bl	80002cc <__adddf3>
 800ff62:	4604      	mov	r4, r0
 800ff64:	460d      	mov	r5, r1
 800ff66:	e002      	b.n	800ff6e <__ieee754_exp+0x46>
 800ff68:	b10e      	cbz	r6, 800ff6e <__ieee754_exp+0x46>
 800ff6a:	2400      	movs	r4, #0
 800ff6c:	2500      	movs	r5, #0
 800ff6e:	ecbd 8b04 	vpop	{d8-d9}
 800ff72:	ec45 4b10 	vmov	d0, r4, r5
 800ff76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff7a:	a38d      	add	r3, pc, #564	; (adr r3, 80101b0 <__ieee754_exp+0x288>)
 800ff7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff80:	ee10 0a10 	vmov	r0, s0
 800ff84:	4629      	mov	r1, r5
 800ff86:	f7f0 fde7 	bl	8000b58 <__aeabi_dcmpgt>
 800ff8a:	4607      	mov	r7, r0
 800ff8c:	b130      	cbz	r0, 800ff9c <__ieee754_exp+0x74>
 800ff8e:	ecbd 8b04 	vpop	{d8-d9}
 800ff92:	2000      	movs	r0, #0
 800ff94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff98:	f000 b9f4 	b.w	8010384 <__math_oflow>
 800ff9c:	a386      	add	r3, pc, #536	; (adr r3, 80101b8 <__ieee754_exp+0x290>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	f7f0 fdb9 	bl	8000b1c <__aeabi_dcmplt>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	f000 808b 	beq.w	80100c6 <__ieee754_exp+0x19e>
 800ffb0:	ecbd 8b04 	vpop	{d8-d9}
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffba:	f000 b9da 	b.w	8010372 <__math_uflow>
 800ffbe:	4a94      	ldr	r2, [pc, #592]	; (8010210 <__ieee754_exp+0x2e8>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	f240 80ac 	bls.w	801011e <__ieee754_exp+0x1f6>
 800ffc6:	4a93      	ldr	r2, [pc, #588]	; (8010214 <__ieee754_exp+0x2ec>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d87c      	bhi.n	80100c6 <__ieee754_exp+0x19e>
 800ffcc:	4b92      	ldr	r3, [pc, #584]	; (8010218 <__ieee754_exp+0x2f0>)
 800ffce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	ee10 0a10 	vmov	r0, s0
 800ffda:	4629      	mov	r1, r5
 800ffdc:	f7f0 f974 	bl	80002c8 <__aeabi_dsub>
 800ffe0:	4b8e      	ldr	r3, [pc, #568]	; (801021c <__ieee754_exp+0x2f4>)
 800ffe2:	00f7      	lsls	r7, r6, #3
 800ffe4:	443b      	add	r3, r7
 800ffe6:	ed93 7b00 	vldr	d7, [r3]
 800ffea:	f1c6 0a01 	rsb	sl, r6, #1
 800ffee:	4680      	mov	r8, r0
 800fff0:	4689      	mov	r9, r1
 800fff2:	ebaa 0a06 	sub.w	sl, sl, r6
 800fff6:	eeb0 8a47 	vmov.f32	s16, s14
 800fffa:	eef0 8a67 	vmov.f32	s17, s15
 800fffe:	ec53 2b18 	vmov	r2, r3, d8
 8010002:	4640      	mov	r0, r8
 8010004:	4649      	mov	r1, r9
 8010006:	f7f0 f95f 	bl	80002c8 <__aeabi_dsub>
 801000a:	4604      	mov	r4, r0
 801000c:	460d      	mov	r5, r1
 801000e:	4622      	mov	r2, r4
 8010010:	462b      	mov	r3, r5
 8010012:	4620      	mov	r0, r4
 8010014:	4629      	mov	r1, r5
 8010016:	f7f0 fb0f 	bl	8000638 <__aeabi_dmul>
 801001a:	a369      	add	r3, pc, #420	; (adr r3, 80101c0 <__ieee754_exp+0x298>)
 801001c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010020:	4606      	mov	r6, r0
 8010022:	460f      	mov	r7, r1
 8010024:	f7f0 fb08 	bl	8000638 <__aeabi_dmul>
 8010028:	a367      	add	r3, pc, #412	; (adr r3, 80101c8 <__ieee754_exp+0x2a0>)
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	f7f0 f94b 	bl	80002c8 <__aeabi_dsub>
 8010032:	4632      	mov	r2, r6
 8010034:	463b      	mov	r3, r7
 8010036:	f7f0 faff 	bl	8000638 <__aeabi_dmul>
 801003a:	a365      	add	r3, pc, #404	; (adr r3, 80101d0 <__ieee754_exp+0x2a8>)
 801003c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010040:	f7f0 f944 	bl	80002cc <__adddf3>
 8010044:	4632      	mov	r2, r6
 8010046:	463b      	mov	r3, r7
 8010048:	f7f0 faf6 	bl	8000638 <__aeabi_dmul>
 801004c:	a362      	add	r3, pc, #392	; (adr r3, 80101d8 <__ieee754_exp+0x2b0>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	f7f0 f939 	bl	80002c8 <__aeabi_dsub>
 8010056:	4632      	mov	r2, r6
 8010058:	463b      	mov	r3, r7
 801005a:	f7f0 faed 	bl	8000638 <__aeabi_dmul>
 801005e:	a360      	add	r3, pc, #384	; (adr r3, 80101e0 <__ieee754_exp+0x2b8>)
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	f7f0 f932 	bl	80002cc <__adddf3>
 8010068:	4632      	mov	r2, r6
 801006a:	463b      	mov	r3, r7
 801006c:	f7f0 fae4 	bl	8000638 <__aeabi_dmul>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	4620      	mov	r0, r4
 8010076:	4629      	mov	r1, r5
 8010078:	f7f0 f926 	bl	80002c8 <__aeabi_dsub>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	4606      	mov	r6, r0
 8010082:	460f      	mov	r7, r1
 8010084:	4620      	mov	r0, r4
 8010086:	4629      	mov	r1, r5
 8010088:	f7f0 fad6 	bl	8000638 <__aeabi_dmul>
 801008c:	ec41 0b19 	vmov	d9, r0, r1
 8010090:	f1ba 0f00 	cmp.w	sl, #0
 8010094:	d15d      	bne.n	8010152 <__ieee754_exp+0x22a>
 8010096:	2200      	movs	r2, #0
 8010098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801009c:	4630      	mov	r0, r6
 801009e:	4639      	mov	r1, r7
 80100a0:	f7f0 f912 	bl	80002c8 <__aeabi_dsub>
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	ec51 0b19 	vmov	r0, r1, d9
 80100ac:	f7f0 fbee 	bl	800088c <__aeabi_ddiv>
 80100b0:	4622      	mov	r2, r4
 80100b2:	462b      	mov	r3, r5
 80100b4:	f7f0 f908 	bl	80002c8 <__aeabi_dsub>
 80100b8:	4602      	mov	r2, r0
 80100ba:	460b      	mov	r3, r1
 80100bc:	2000      	movs	r0, #0
 80100be:	4958      	ldr	r1, [pc, #352]	; (8010220 <__ieee754_exp+0x2f8>)
 80100c0:	f7f0 f902 	bl	80002c8 <__aeabi_dsub>
 80100c4:	e74d      	b.n	800ff62 <__ieee754_exp+0x3a>
 80100c6:	4857      	ldr	r0, [pc, #348]	; (8010224 <__ieee754_exp+0x2fc>)
 80100c8:	a347      	add	r3, pc, #284	; (adr r3, 80101e8 <__ieee754_exp+0x2c0>)
 80100ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ce:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80100d2:	4629      	mov	r1, r5
 80100d4:	4620      	mov	r0, r4
 80100d6:	f7f0 faaf 	bl	8000638 <__aeabi_dmul>
 80100da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80100de:	f7f0 f8f5 	bl	80002cc <__adddf3>
 80100e2:	f7f0 fd59 	bl	8000b98 <__aeabi_d2iz>
 80100e6:	4682      	mov	sl, r0
 80100e8:	f7f0 fa3c 	bl	8000564 <__aeabi_i2d>
 80100ec:	a340      	add	r3, pc, #256	; (adr r3, 80101f0 <__ieee754_exp+0x2c8>)
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	4606      	mov	r6, r0
 80100f4:	460f      	mov	r7, r1
 80100f6:	f7f0 fa9f 	bl	8000638 <__aeabi_dmul>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	4620      	mov	r0, r4
 8010100:	4629      	mov	r1, r5
 8010102:	f7f0 f8e1 	bl	80002c8 <__aeabi_dsub>
 8010106:	a33c      	add	r3, pc, #240	; (adr r3, 80101f8 <__ieee754_exp+0x2d0>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	4680      	mov	r8, r0
 801010e:	4689      	mov	r9, r1
 8010110:	4630      	mov	r0, r6
 8010112:	4639      	mov	r1, r7
 8010114:	f7f0 fa90 	bl	8000638 <__aeabi_dmul>
 8010118:	ec41 0b18 	vmov	d8, r0, r1
 801011c:	e76f      	b.n	800fffe <__ieee754_exp+0xd6>
 801011e:	4a42      	ldr	r2, [pc, #264]	; (8010228 <__ieee754_exp+0x300>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d811      	bhi.n	8010148 <__ieee754_exp+0x220>
 8010124:	a336      	add	r3, pc, #216	; (adr r3, 8010200 <__ieee754_exp+0x2d8>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	ee10 0a10 	vmov	r0, s0
 801012e:	4629      	mov	r1, r5
 8010130:	f7f0 f8cc 	bl	80002cc <__adddf3>
 8010134:	4b3a      	ldr	r3, [pc, #232]	; (8010220 <__ieee754_exp+0x2f8>)
 8010136:	2200      	movs	r2, #0
 8010138:	f7f0 fd0e 	bl	8000b58 <__aeabi_dcmpgt>
 801013c:	b138      	cbz	r0, 801014e <__ieee754_exp+0x226>
 801013e:	4b38      	ldr	r3, [pc, #224]	; (8010220 <__ieee754_exp+0x2f8>)
 8010140:	2200      	movs	r2, #0
 8010142:	4620      	mov	r0, r4
 8010144:	4629      	mov	r1, r5
 8010146:	e70a      	b.n	800ff5e <__ieee754_exp+0x36>
 8010148:	f04f 0a00 	mov.w	sl, #0
 801014c:	e75f      	b.n	801000e <__ieee754_exp+0xe6>
 801014e:	4682      	mov	sl, r0
 8010150:	e75d      	b.n	801000e <__ieee754_exp+0xe6>
 8010152:	4632      	mov	r2, r6
 8010154:	463b      	mov	r3, r7
 8010156:	2000      	movs	r0, #0
 8010158:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801015c:	f7f0 f8b4 	bl	80002c8 <__aeabi_dsub>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	ec51 0b19 	vmov	r0, r1, d9
 8010168:	f7f0 fb90 	bl	800088c <__aeabi_ddiv>
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	ec51 0b18 	vmov	r0, r1, d8
 8010174:	f7f0 f8a8 	bl	80002c8 <__aeabi_dsub>
 8010178:	4642      	mov	r2, r8
 801017a:	464b      	mov	r3, r9
 801017c:	f7f0 f8a4 	bl	80002c8 <__aeabi_dsub>
 8010180:	4602      	mov	r2, r0
 8010182:	460b      	mov	r3, r1
 8010184:	2000      	movs	r0, #0
 8010186:	4926      	ldr	r1, [pc, #152]	; (8010220 <__ieee754_exp+0x2f8>)
 8010188:	f7f0 f89e 	bl	80002c8 <__aeabi_dsub>
 801018c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8010190:	4592      	cmp	sl, r2
 8010192:	db02      	blt.n	801019a <__ieee754_exp+0x272>
 8010194:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010198:	e6e3      	b.n	800ff62 <__ieee754_exp+0x3a>
 801019a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801019e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80101a2:	2200      	movs	r2, #0
 80101a4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80101a8:	f7f0 fa46 	bl	8000638 <__aeabi_dmul>
 80101ac:	e6d9      	b.n	800ff62 <__ieee754_exp+0x3a>
 80101ae:	bf00      	nop
 80101b0:	fefa39ef 	.word	0xfefa39ef
 80101b4:	40862e42 	.word	0x40862e42
 80101b8:	d52d3051 	.word	0xd52d3051
 80101bc:	c0874910 	.word	0xc0874910
 80101c0:	72bea4d0 	.word	0x72bea4d0
 80101c4:	3e663769 	.word	0x3e663769
 80101c8:	c5d26bf1 	.word	0xc5d26bf1
 80101cc:	3ebbbd41 	.word	0x3ebbbd41
 80101d0:	af25de2c 	.word	0xaf25de2c
 80101d4:	3f11566a 	.word	0x3f11566a
 80101d8:	16bebd93 	.word	0x16bebd93
 80101dc:	3f66c16c 	.word	0x3f66c16c
 80101e0:	5555553e 	.word	0x5555553e
 80101e4:	3fc55555 	.word	0x3fc55555
 80101e8:	652b82fe 	.word	0x652b82fe
 80101ec:	3ff71547 	.word	0x3ff71547
 80101f0:	fee00000 	.word	0xfee00000
 80101f4:	3fe62e42 	.word	0x3fe62e42
 80101f8:	35793c76 	.word	0x35793c76
 80101fc:	3dea39ef 	.word	0x3dea39ef
 8010200:	8800759c 	.word	0x8800759c
 8010204:	7e37e43c 	.word	0x7e37e43c
 8010208:	40862e41 	.word	0x40862e41
 801020c:	7fefffff 	.word	0x7fefffff
 8010210:	3fd62e42 	.word	0x3fd62e42
 8010214:	3ff0a2b1 	.word	0x3ff0a2b1
 8010218:	08011a50 	.word	0x08011a50
 801021c:	08011a60 	.word	0x08011a60
 8010220:	3ff00000 	.word	0x3ff00000
 8010224:	08011a40 	.word	0x08011a40
 8010228:	3defffff 	.word	0x3defffff

0801022c <__ieee754_fmodf>:
 801022c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801022e:	ee10 5a90 	vmov	r5, s1
 8010232:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8010236:	d009      	beq.n	801024c <__ieee754_fmodf+0x20>
 8010238:	ee10 2a10 	vmov	r2, s0
 801023c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010240:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010244:	da02      	bge.n	801024c <__ieee754_fmodf+0x20>
 8010246:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801024a:	dd04      	ble.n	8010256 <__ieee754_fmodf+0x2a>
 801024c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8010250:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8010254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010256:	42a3      	cmp	r3, r4
 8010258:	dbfc      	blt.n	8010254 <__ieee754_fmodf+0x28>
 801025a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 801025e:	d105      	bne.n	801026c <__ieee754_fmodf+0x40>
 8010260:	4b32      	ldr	r3, [pc, #200]	; (801032c <__ieee754_fmodf+0x100>)
 8010262:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8010266:	ed93 0a00 	vldr	s0, [r3]
 801026a:	e7f3      	b.n	8010254 <__ieee754_fmodf+0x28>
 801026c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8010270:	d13f      	bne.n	80102f2 <__ieee754_fmodf+0xc6>
 8010272:	0219      	lsls	r1, r3, #8
 8010274:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8010278:	2900      	cmp	r1, #0
 801027a:	dc37      	bgt.n	80102ec <__ieee754_fmodf+0xc0>
 801027c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8010280:	d13d      	bne.n	80102fe <__ieee754_fmodf+0xd2>
 8010282:	0227      	lsls	r7, r4, #8
 8010284:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8010288:	2f00      	cmp	r7, #0
 801028a:	da35      	bge.n	80102f8 <__ieee754_fmodf+0xcc>
 801028c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8010290:	bfbb      	ittet	lt
 8010292:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8010296:	1a12      	sublt	r2, r2, r0
 8010298:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801029c:	4093      	lsllt	r3, r2
 801029e:	bfa8      	it	ge
 80102a0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80102a4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80102a8:	bfb5      	itete	lt
 80102aa:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80102ae:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80102b2:	1a52      	sublt	r2, r2, r1
 80102b4:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80102b8:	bfb8      	it	lt
 80102ba:	4094      	lsllt	r4, r2
 80102bc:	1a40      	subs	r0, r0, r1
 80102be:	1b1a      	subs	r2, r3, r4
 80102c0:	bb00      	cbnz	r0, 8010304 <__ieee754_fmodf+0xd8>
 80102c2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80102c6:	bf38      	it	cc
 80102c8:	4613      	movcc	r3, r2
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d0c8      	beq.n	8010260 <__ieee754_fmodf+0x34>
 80102ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80102d2:	db1f      	blt.n	8010314 <__ieee754_fmodf+0xe8>
 80102d4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80102d8:	db1f      	blt.n	801031a <__ieee754_fmodf+0xee>
 80102da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80102de:	317f      	adds	r1, #127	; 0x7f
 80102e0:	4333      	orrs	r3, r6
 80102e2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80102e6:	ee00 3a10 	vmov	s0, r3
 80102ea:	e7b3      	b.n	8010254 <__ieee754_fmodf+0x28>
 80102ec:	3801      	subs	r0, #1
 80102ee:	0049      	lsls	r1, r1, #1
 80102f0:	e7c2      	b.n	8010278 <__ieee754_fmodf+0x4c>
 80102f2:	15d8      	asrs	r0, r3, #23
 80102f4:	387f      	subs	r0, #127	; 0x7f
 80102f6:	e7c1      	b.n	801027c <__ieee754_fmodf+0x50>
 80102f8:	3901      	subs	r1, #1
 80102fa:	007f      	lsls	r7, r7, #1
 80102fc:	e7c4      	b.n	8010288 <__ieee754_fmodf+0x5c>
 80102fe:	15e1      	asrs	r1, r4, #23
 8010300:	397f      	subs	r1, #127	; 0x7f
 8010302:	e7c3      	b.n	801028c <__ieee754_fmodf+0x60>
 8010304:	2a00      	cmp	r2, #0
 8010306:	da02      	bge.n	801030e <__ieee754_fmodf+0xe2>
 8010308:	005b      	lsls	r3, r3, #1
 801030a:	3801      	subs	r0, #1
 801030c:	e7d7      	b.n	80102be <__ieee754_fmodf+0x92>
 801030e:	d0a7      	beq.n	8010260 <__ieee754_fmodf+0x34>
 8010310:	0053      	lsls	r3, r2, #1
 8010312:	e7fa      	b.n	801030a <__ieee754_fmodf+0xde>
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	3901      	subs	r1, #1
 8010318:	e7d9      	b.n	80102ce <__ieee754_fmodf+0xa2>
 801031a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 801031e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8010322:	3182      	adds	r1, #130	; 0x82
 8010324:	410b      	asrs	r3, r1
 8010326:	4333      	orrs	r3, r6
 8010328:	e7dd      	b.n	80102e6 <__ieee754_fmodf+0xba>
 801032a:	bf00      	nop
 801032c:	08011a70 	.word	0x08011a70

08010330 <__ieee754_sqrtf>:
 8010330:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010334:	4770      	bx	lr

08010336 <with_errno>:
 8010336:	b570      	push	{r4, r5, r6, lr}
 8010338:	4604      	mov	r4, r0
 801033a:	460d      	mov	r5, r1
 801033c:	4616      	mov	r6, r2
 801033e:	f7fb fb79 	bl	800ba34 <__errno>
 8010342:	4629      	mov	r1, r5
 8010344:	6006      	str	r6, [r0, #0]
 8010346:	4620      	mov	r0, r4
 8010348:	bd70      	pop	{r4, r5, r6, pc}

0801034a <xflow>:
 801034a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801034c:	4614      	mov	r4, r2
 801034e:	461d      	mov	r5, r3
 8010350:	b108      	cbz	r0, 8010356 <xflow+0xc>
 8010352:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010356:	e9cd 2300 	strd	r2, r3, [sp]
 801035a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801035e:	4620      	mov	r0, r4
 8010360:	4629      	mov	r1, r5
 8010362:	f7f0 f969 	bl	8000638 <__aeabi_dmul>
 8010366:	2222      	movs	r2, #34	; 0x22
 8010368:	b003      	add	sp, #12
 801036a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801036e:	f7ff bfe2 	b.w	8010336 <with_errno>

08010372 <__math_uflow>:
 8010372:	b508      	push	{r3, lr}
 8010374:	2200      	movs	r2, #0
 8010376:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801037a:	f7ff ffe6 	bl	801034a <xflow>
 801037e:	ec41 0b10 	vmov	d0, r0, r1
 8010382:	bd08      	pop	{r3, pc}

08010384 <__math_oflow>:
 8010384:	b508      	push	{r3, lr}
 8010386:	2200      	movs	r2, #0
 8010388:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801038c:	f7ff ffdd 	bl	801034a <xflow>
 8010390:	ec41 0b10 	vmov	d0, r0, r1
 8010394:	bd08      	pop	{r3, pc}

08010396 <finite>:
 8010396:	b082      	sub	sp, #8
 8010398:	ed8d 0b00 	vstr	d0, [sp]
 801039c:	9801      	ldr	r0, [sp, #4]
 801039e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80103a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80103a6:	0fc0      	lsrs	r0, r0, #31
 80103a8:	b002      	add	sp, #8
 80103aa:	4770      	bx	lr

080103ac <_init>:
 80103ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ae:	bf00      	nop
 80103b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103b2:	bc08      	pop	{r3}
 80103b4:	469e      	mov	lr, r3
 80103b6:	4770      	bx	lr

080103b8 <_fini>:
 80103b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ba:	bf00      	nop
 80103bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103be:	bc08      	pop	{r3}
 80103c0:	469e      	mov	lr, r3
 80103c2:	4770      	bx	lr
