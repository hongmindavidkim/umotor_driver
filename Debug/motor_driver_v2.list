
motor_driver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010394  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a20  08010568  08010568  00020568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f88  08011f88  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08011f88  08011f88  00021f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f90  08011f90  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f90  08011f90  00021f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f94  08011f94  00021f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011f98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009488  20000220  080121b8  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200096a8  080121b8  000396a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea76  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048de  00000000  00000000  0004ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  000535a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  00054d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029088  00000000  00000000  00056380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002233f  00000000  00000000  0007f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76af  00000000  00000000  000a1747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a30  00000000  00000000  00188e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801054c 	.word	0x0801054c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0801054c 	.word	0x0801054c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001058:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_ADC1_Init+0xcc>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC1_Init+0xc8>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001072:	2200      	movs	r2, #0
 8001074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <MX_ADC1_Init+0xd0>)
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001092:	2201      	movs	r2, #1
 8001094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a6:	f005 ffa9 	bl	8006ffc <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010b0:	f004 fa72 	bl	8005598 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010b4:	2316      	movs	r3, #22
 80010b6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010c8:	f006 fb74 	bl	80077b4 <HAL_ADCEx_MultiModeConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f004 fa61 	bl	8005598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010e8:	f006 f936 	bl	8007358 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010f2:	f004 fa51 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000023c 	.word	0x2000023c
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_ADC2_Init+0x90>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_ADC2_Init+0x8c>)
 800113a:	2200      	movs	r2, #0
 800113c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_ADC2_Init+0x8c>)
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ADC2_Init+0x8c>)
 800115c:	2201      	movs	r2, #1
 800115e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001162:	f005 ff4b 	bl	8006ffc <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800116c:	f004 fa14 	bl	8005598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001170:	230b      	movs	r3, #11
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001182:	f006 f8e9 	bl	8007358 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800118c:	f004 fa04 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000284 	.word	0x20000284
 800119c:	40012100 	.word	0x40012100

080011a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC3_Init+0x8c>)
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_ADC3_Init+0x90>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_ADC3_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f6:	f005 ff01 	bl	8006ffc <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001200:	f004 f9ca 	bl	8005598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_ADC3_Init+0x8c>)
 8001216:	f006 f89f 	bl	8007358 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001220:	f004 f9ba 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002cc 	.word	0x200002cc
 8001230:	40012200 	.word	0x40012200

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_ADC_MspInit+0x134>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d128      	bne.n	80012a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_ADC_MspInit+0x138>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_ADC_MspInit+0x138>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4833      	ldr	r0, [pc, #204]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012a2:	f007 f87f 	bl	80083a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012a6:	e05a      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_ADC_MspInit+0x140>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ea:	2302      	movs	r3, #2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012fe:	f007 f851 	bl	80083a4 <HAL_GPIO_Init>
}
 8001302:	e02c      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_ADC_MspInit+0x144>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d127      	bne.n	800135e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_ADC_MspInit+0x138>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_ADC_MspInit+0x148>)
 800135a:	f007 f823 	bl	80083a4 <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	; 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012000 	.word	0x40012000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40012100 	.word	0x40012100
 8001378:	40012200 	.word	0x40012200
 800137c:	40020000 	.word	0x40020000

08001380 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800138e:	4b61      	ldr	r3, [pc, #388]	; (8001514 <order_phases+0x194>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7c1b      	ldrb	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d108      	bne.n	80013ae <order_phases+0x2e>
		printf("\n\r\n\rChecking phase sign, pole pairs\r\n");
 800139c:	485e      	ldr	r0, [pc, #376]	; (8001518 <order_phases+0x198>)
 800139e:	f00b f98d 	bl	800c6bc <puts>
		cal->started = 1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800151c <order_phases+0x19c>
 80013c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80013d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d529      	bpl.n	8001434 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80013f2:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        cal->cal_position.elec_velocity = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013fc:	461a      	mov	r2, r3
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
        controller->i_d_des = I_CAL;
 8001406:	4b46      	ldr	r3, [pc, #280]	; (8001520 <order_phases+0x1a0>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001420:	332c      	adds	r3, #44	; 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f001 fddd 	bl	8002fe4 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
    	return;
 8001432:	e06c      	b.n	800150e <order_phases+0x18e>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a05 	vldr	s15, [r3, #20]
 800143a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001524 <order_phases+0x1a4>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d51d      	bpl.n	8001484 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a05 	vldr	s15, [r3, #20]
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001456:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800146e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001478:	332c      	adds	r3, #44	; 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f001 fdb1 	bl	8002fe4 <commutate>
    	return;
 8001482:	e044      	b.n	800150e <order_phases+0x18e>
    }

	reset_foc(controller);
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f001 fd39 	bl	8002efc <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	617b      	str	r3, [r7, #20]
	// cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));

	if(cal->theta_start < theta_end){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a06 	vldr	s15, [r3, #24]
 8001496:	ed97 7a05 	vldr	s14, [r7, #20]
 800149a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	dd07      	ble.n	80014b4 <order_phases+0x134>
		cal->phase_order = 0;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80014ac:	481e      	ldr	r0, [pc, #120]	; (8001528 <order_phases+0x1a8>)
 80014ae:	f00b f905 	bl	800c6bc <puts>
 80014b2:	e006      	b.n	80014c2 <order_phases+0x142>
	}
	else{
		cal->phase_order = 1;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80014bc:	481b      	ldr	r0, [pc, #108]	; (800152c <order_phases+0x1ac>)
 80014be:	f00b f8fd 	bl	800c6bc <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <order_phases+0x1b0>)
 80014ca:	f00b f871 	bl	800c5b0 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f858 	bl	8000588 <__aeabi_f2d>
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
 80014dc:	6978      	ldr	r0, [r7, #20]
 80014de:	f7ff f853 	bl	8000588 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	e9cd 2300 	strd	r2, r3, [sp]
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <order_phases+0x1b4>)
 80014f0:	f00b f85e 	bl	800c5b0 <iprintf>
    PHASE_ORDER = cal->phase_order;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <order_phases+0x194>)
 80014fe:	601a      	str	r2, [r3, #0]
//    PPAIRS = (float)cal->ppairs;
    cal->started = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bdb0      	pop	{r4, r5, r7, pc}
 8001514:	2000043c 	.word	0x2000043c
 8001518:	08010568 	.word	0x08010568
 800151c:	3851b717 	.word	0x3851b717
 8001520:	2000033c 	.word	0x2000033c
 8001524:	3fd06cbe 	.word	0x3fd06cbe
 8001528:	08010590 	.word	0x08010590
 800152c:	080105a8 	.word	0x080105a8
 8001530:	080105c0 	.word	0x080105c0
 8001534:	080105d4 	.word	0x080105d4

08001538 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	; 0x50
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonlinearity */

	if(!cal->started){
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7c1b      	ldrb	r3, [r3, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d112      	bne.n	8001574 <calibrate_encoder+0x3c>
			printf("Starting offset cal and linearization\r\n");
 800154e:	489d      	ldr	r0, [pc, #628]	; (80017c4 <calibrate_encoder+0x28c>)
 8001550:	f00b f8b4 	bl	800c6bc <puts>
			printf("Theta ref, count ref, count error\r\n");
 8001554:	489c      	ldr	r0, [pc, #624]	; (80017c8 <calibrate_encoder+0x290>)
 8001556:	f00b f8b1 	bl	800c6bc <puts>
			cal->started = 1;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	84da      	strh	r2, [r3, #38]	; 0x26
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001584:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80017cc <calibrate_encoder+0x294>
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	edd3 7a05 	vldr	s15, [r3, #20]
 8001598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	d525      	bpl.n	80015f2 <calibrate_encoder+0xba>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80015b8:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 80015bc:	4b84      	ldr	r3, [pc, #528]	; (80017d0 <calibrate_encoder+0x298>)
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80015d6:	332c      	adds	r3, #44	; 0x2c
 80015d8:	4619      	mov	r1, r3
 80015da:	68b8      	ldr	r0, [r7, #8]
 80015dc:	f001 fd02 	bl	8002fe4 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80015f0:	e26c      	b.n	8001acc <calibrate_encoder+0x594>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	ed93 7a05 	vldr	s14, [r3, #20]
 80015f8:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <calibrate_encoder+0x298>)
 80015fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015fe:	eddf 6a75 	vldr	s13, [pc, #468]	; 80017d4 <calibrate_encoder+0x29c>
 8001602:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001606:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800160a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800160e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	f140 808a 	bpl.w	8001736 <calibrate_encoder+0x1fe>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edd3 7a02 	vldr	s15, [r3, #8]
 8001628:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80017d8 <calibrate_encoder+0x2a0>
 800162c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001640:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800164a:	332c      	adds	r3, #44	; 0x2c
 800164c:	4619      	mov	r1, r3
 800164e:	68b8      	ldr	r0, [r7, #8]
 8001650:	f001 fcc8 	bl	8002fe4 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	ed93 7a05 	vldr	s14, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	dc00      	bgt.n	800166c <calibrate_encoder+0x134>
				return;
			}
			cal->sample_count++;

		}
		return;
 800166a:	e22f      	b.n	8001acc <calibrate_encoder+0x594>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001672:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80017ec <calibrate_encoder+0x2b4>
 8001676:	ee67 6a87 	vmul.f32	s13, s15, s14
 800167a:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <calibrate_encoder+0x298>)
 800167c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001680:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80017d4 <calibrate_encoder+0x29c>
 8001684:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001690:	ee17 3a90 	vmov	r3, s15
 8001694:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	131b      	asrs	r3, r3, #12
 80016a4:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016ac:	4618      	mov	r0, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	441a      	add	r2, r3
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f100 030a 	add.w	r3, r0, #10
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	605a      	str	r2, [r3, #4]
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff60 	bl	8000588 <__aeabi_f2d>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	330a      	adds	r3, #10
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	483e      	ldr	r0, [pc, #248]	; (80017dc <calibrate_encoder+0x2a4>)
 80016e2:	f00a ff65 	bl	800c5b0 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016ec:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80017e0 <calibrate_encoder+0x2a8>
 80016f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001706:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <calibrate_encoder+0x298>)
 8001708:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800170c:	eddf 6a35 	vldr	s13, [pc, #212]	; 80017e4 <calibrate_encoder+0x2ac>
 8001710:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800171c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	f000 81cf 	beq.w	8001ac6 <calibrate_encoder+0x58e>
			cal->sample_count++;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	84da      	strh	r2, [r3, #38]	; 0x26
		return;
 8001734:	e1ca      	b.n	8001acc <calibrate_encoder+0x594>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	ed93 7a05 	vldr	s14, [r3, #20]
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <calibrate_encoder+0x298>)
 800173e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001742:	eddf 6a29 	vldr	s13, [pc, #164]	; 80017e8 <calibrate_encoder+0x2b0>
 8001746:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800174a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800174e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800175a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	f140 80a6 	bpl.w	80018b2 <calibrate_encoder+0x37a>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edd3 7a02 	vldr	s15, [r3, #8]
 800176c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017d8 <calibrate_encoder+0x2a0>
 8001770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <calibrate_encoder+0x298>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001798:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017a2:	332c      	adds	r3, #44	; 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f001 fc1c 	bl	8002fe4 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dc16      	bgt.n	80017f0 <calibrate_encoder+0x2b8>
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);

			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 80017c2:	e182      	b.n	8001aca <calibrate_encoder+0x592>
 80017c4:	080105f0 	.word	0x080105f0
 80017c8:	08010618 	.word	0x08010618
 80017cc:	3851b717 	.word	0x3851b717
 80017d0:	2000033c 	.word	0x2000033c
 80017d4:	40c90fdb 	.word	0x40c90fdb
 80017d8:	3a03126e 	.word	0x3a03126e
 80017dc:	0801063c 	.word	0x0801063c
 80017e0:	3ba0d97c 	.word	0x3ba0d97c
 80017e4:	43000000 	.word	0x43000000
 80017e8:	41490fdb 	.word	0x41490fdb
 80017ec:	49000000 	.word	0x49000000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8168 	beq.w	8001aca <calibrate_encoder+0x592>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001800:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80017ec <calibrate_encoder+0x2b4>
 8001804:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001808:	4bb2      	ldr	r3, [pc, #712]	; (8001ad4 <calibrate_encoder+0x59c>)
 800180a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800180e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001ad8 <calibrate_encoder+0x5a0>
 8001812:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181e:	ee17 3a90 	vmov	r3, s15
 8001822:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	131b      	asrs	r3, r3, #12
 8001832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	330a      	adds	r3, #10
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001852:	4610      	mov	r0, r2
 8001854:	0fda      	lsrs	r2, r3, #31
 8001856:	4413      	add	r3, r2
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	4619      	mov	r1, r3
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	f100 030a 	add.w	r3, r0, #10
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	6059      	str	r1, [r3, #4]
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe8b 	bl	8000588 <__aeabi_f2d>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	330a      	adds	r3, #10
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4894      	ldr	r0, [pc, #592]	; (8001adc <calibrate_encoder+0x5a4>)
 800188c:	f00a fe90 	bl	800c5b0 <iprintf>
			cal->sample_count--;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	84da      	strh	r2, [r3, #38]	; 0x26
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018a2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001ae0 <calibrate_encoder+0x5a8>
 80018a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 80018b0:	e10b      	b.n	8001aca <calibrate_encoder+0x592>
    }

    reset_foc(controller);
 80018b2:	68b8      	ldr	r0, [r7, #8]
 80018b4:	f001 fb22 	bl	8002efc <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80018bc:	2300      	movs	r3, #0
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
 80018c0:	e00b      	b.n	80018da <calibrate_encoder+0x3a2>
		ezero_mean += cal->error_arr[i];
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c6:	330a      	adds	r3, #10
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018d0:	4413      	add	r3, r2
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80018d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d6:	3301      	adds	r3, #1
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
 80018da:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <calibrate_encoder+0x59c>)
 80018dc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 3a90 	vmov	r3, s15
 80018e8:	01db      	lsls	r3, r3, #7
 80018ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbe8      	blt.n	80018c2 <calibrate_encoder+0x38a>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80018f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018fa:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <calibrate_encoder+0x59c>)
 80018fc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001900:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001ae4 <calibrate_encoder+0x5ac>
 8001904:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001910:	ee17 2a90 	vmov	r2, s15
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	61da      	str	r2, [r3, #28]

	// check for valid calibration...ezero mean is in counts, should be less than CPR
	if (cal->ezero < ENC_CPR){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001920:	f280 80bf 	bge.w	8001aa2 <calibrate_encoder+0x56a>
		printf("Valid calibration. Mean elec zero: %d\n\r", cal->ezero);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	4619      	mov	r1, r3
 800192a:	486f      	ldr	r0, [pc, #444]	; (8001ae8 <calibrate_encoder+0x5b0>)
 800192c:	f00a fe40 	bl	800c5b0 <iprintf>
		cal->valid_cal = 1;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		// Moving average to filter out cogging ripple
		int window = SAMPLES_PER_PPAIR;
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
		int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f5c3 2300 	rsb	r3, r3, #524288	; 0x80000
 8001944:	2b00      	cmp	r3, #0
 8001946:	da01      	bge.n	800194c <calibrate_encoder+0x414>
 8001948:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800194c:	131b      	asrs	r3, r3, #12
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i = 0; i<N_LUT; i++){
 8001950:	2300      	movs	r3, #0
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001954:	e0a0      	b.n	8001a98 <calibrate_encoder+0x560>
				int moving_avg = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int j = (-window)/2; j<(window)/2; j++){
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	0fda      	lsrs	r2, r3, #31
 800195e:	4413      	add	r3, r2
 8001960:	105b      	asrs	r3, r3, #1
 8001962:	425b      	negs	r3, r3
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	e068      	b.n	8001a3a <calibrate_encoder+0x502>
					int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001972:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <calibrate_encoder+0x59c>)
 8001974:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001ae4 <calibrate_encoder+0x5ac>
 8001980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001984:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001ae4 <calibrate_encoder+0x5ac>
 8001988:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800198c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199e:	ee17 3a90 	vmov	r3, s15
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
					if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da13      	bge.n	80019d2 <calibrate_encoder+0x49a>
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <calibrate_encoder+0x59c>)
 80019b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019ba:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001ae4 <calibrate_encoder+0x5ac>
 80019be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ca:	ee17 3a90 	vmov	r3, s15
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
 80019d0:	e027      	b.n	8001a22 <calibrate_encoder+0x4ea>
					else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019dc:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <calibrate_encoder+0x59c>)
 80019de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019e2:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001ae4 <calibrate_encoder+0x5ac>
 80019e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	dd12      	ble.n	8001a22 <calibrate_encoder+0x4ea>
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a06:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <calibrate_encoder+0x59c>)
 8001a08:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a0c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001ae4 <calibrate_encoder+0x5ac>
 8001a10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1c:	ee17 3a90 	vmov	r3, s15
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
					moving_avg += cal->error_arr[index];
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	330a      	adds	r3, #10
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a30:	4413      	add	r3, r2
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int j = (-window)/2; j<(window)/2; j++){
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	3301      	adds	r3, #1
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	0fda      	lsrs	r2, r3, #31
 8001a3e:	4413      	add	r3, r2
 8001a40:	105b      	asrs	r3, r3, #1
 8001a42:	461a      	mov	r2, r3
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	4293      	cmp	r3, r2
 8001a48:	db8e      	blt.n	8001968 <calibrate_encoder+0x430>
				}
				moving_avg = moving_avg/window;
 8001a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
				int lut_index = lut_offset + i;
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a58:	4413      	add	r3, r2
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
				if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a60:	dd02      	ble.n	8001a68 <calibrate_encoder+0x530>
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	3b80      	subs	r3, #128	; 0x80
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
				cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a6e:	1ad2      	subs	r2, r2, r3
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a78:	330a      	adds	r3, #10
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	605a      	str	r2, [r3, #4]
				printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a8c:	4817      	ldr	r0, [pc, #92]	; (8001aec <calibrate_encoder+0x5b4>)
 8001a8e:	f00a fd8f 	bl	800c5b0 <iprintf>
		for(int i = 0; i<N_LUT; i++){
 8001a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a94:	3301      	adds	r3, #1
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9c:	f77f af5b 	ble.w	8001956 <calibrate_encoder+0x41e>
 8001aa0:	e009      	b.n	8001ab6 <calibrate_encoder+0x57e>
			}

	} else {
		printf("Bad calibration, won't save the data. Mean elec zero: %d\n\r", cal->ezero);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4811      	ldr	r0, [pc, #68]	; (8001af0 <calibrate_encoder+0x5b8>)
 8001aaa:	f00a fd81 	bl	800c5b0 <iprintf>
		cal->valid_cal = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	}

	cal->started = 0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ac4:	e002      	b.n	8001acc <calibrate_encoder+0x594>
				return;
 8001ac6:	bf00      	nop
 8001ac8:	e000      	b.n	8001acc <calibrate_encoder+0x594>
		return;
 8001aca:	bf00      	nop

}
 8001acc:	3748      	adds	r7, #72	; 0x48
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000033c 	.word	0x2000033c
 8001ad8:	40c90fdb 	.word	0x40c90fdb
 8001adc:	0801063c 	.word	0x0801063c
 8001ae0:	3ba0d97c 	.word	0x3ba0d97c
 8001ae4:	43000000 	.word	0x43000000
 8001ae8:	0801064c 	.word	0x0801064c
 8001aec:	08010674 	.word	0x08010674
 8001af0:	08010680 	.word	0x08010680

08001af4 <check_encoder_init>:
void measure_lr(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
	// TODO: implement this?
}


int check_encoder_init(EncoderStruct *encoder, ControllerStruct *controller, CalStruct *cal){
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b091      	sub	sp, #68	; 0x44
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]

	printf("\n\r Checking encoder initialization\n\r");
 8001b00:	4892      	ldr	r0, [pc, #584]	; (8001d4c <check_encoder_init+0x258>)
 8001b02:	f00a fd55 	bl	800c5b0 <iprintf>

	float theta_elec_read = 0.0f;
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float theta_elec_err = 0.0f;
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
	int theta_elec_counts = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24

	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
 8001b1a:	e026      	b.n	8001b6a <check_encoder_init+0x76>
		cal->theta_ref = PI_F/2.0f;//W_CAL*cal->time;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a8c      	ldr	r2, [pc, #560]	; (8001d50 <check_encoder_init+0x25c>)
 8001b20:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001b2c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b36:	461a      	mov	r2, r3
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001b40:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <check_encoder_init+0x260>)
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001b5a:	332c      	adds	r3, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68b8      	ldr	r0, [r7, #8]
 8001b60:	f001 fa40 	bl	8002fe4 <commutate>
	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	3301      	adds	r3, #1
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b70:	4293      	cmp	r3, r2
 8001b72:	ddd3      	ble.n	8001b1c <check_encoder_init+0x28>
	}

	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	e033      	b.n	8001be2 <check_encoder_init+0xee>
		cal->theta_ref = 0.0f;//W_CAL*cal->time;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001b8c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b96:	461a      	mov	r2, r3
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <check_encoder_init+0x260>)
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001bba:	332c      	adds	r3, #44	; 0x2c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68b8      	ldr	r0, [r7, #8]
 8001bc0:	f001 fa10 	bl	8002fe4 <commutate>
		if (i==15000) {
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d106      	bne.n	8001bdc <check_encoder_init+0xe8>
			theta_elec_read = encoder->elec_angle;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			theta_elec_counts = encoder->count;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	3301      	adds	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001be8:	4293      	cmp	r3, r2
 8001bea:	ddc6      	ble.n	8001b7a <check_encoder_init+0x86>
		}
	}

	// how far from elec angle of 0?
	if (theta_elec_read > PI_F) { theta_elec_err = theta_elec_read - 2.0f*PI_F; } // wrap from -PI to PI instead of 0 to 2*PI
 8001bec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bf0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001d58 <check_encoder_init+0x264>
 8001bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	dd08      	ble.n	8001c10 <check_encoder_init+0x11c>
 8001bfe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c02:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001d5c <check_encoder_init+0x268>
 8001c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001c0e:	e001      	b.n	8001c14 <check_encoder_init+0x120>
	else { theta_elec_err = theta_elec_read; };
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28

	float diff_zeros = ((float)(theta_elec_counts-E_ZERO))*PPAIRS/((float)ENC_CPR);
 8001c14:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <check_encoder_init+0x26c>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <check_encoder_init+0x260>)
 8001c26:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001d64 <check_encoder_init+0x270>
 8001c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c36:	edc7 7a06 	vstr	s15, [r7, #24]
	int diff_int = diff_zeros;
 8001c3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c42:	ee17 3a90 	vmov	r3, s15
 8001c46:	617b      	str	r3, [r7, #20]
	diff_zeros = diff_zeros - (float)diff_int;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c52:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5a:	edc7 7a06 	vstr	s15, [r7, #24]
	diff_zeros = diff_zeros>0.5 ? diff_zeros-1.0 : diff_zeros<-0.5 ? diff_zeros+1.0 : diff_zeros;
 8001c5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	dd06      	ble.n	8001c7e <check_encoder_init+0x18a>
 8001c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c7c:	e011      	b.n	8001ca2 <check_encoder_init+0x1ae>
 8001c7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c82:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	d506      	bpl.n	8001c9e <check_encoder_init+0x1aa>
 8001c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c9c:	e001      	b.n	8001ca2 <check_encoder_init+0x1ae>
 8001c9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca2:	edc7 7a06 	vstr	s15, [r7, #24]

	// Print difference and status of initialization
	if ((theta_elec_err < (PI_F/2.0f)) && (theta_elec_err > (-PI_F/2.0f)) ) { // initialization is good
 8001ca6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001caa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001d68 <check_encoder_init+0x274>
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	d526      	bpl.n	8001d06 <check_encoder_init+0x212>
 8001cb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cbc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001d6c <check_encoder_init+0x278>
 8001cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	dd1d      	ble.n	8001d06 <check_encoder_init+0x212>
		printf(" Good initialization! \n\r");
 8001cca:	4829      	ldr	r0, [pc, #164]	; (8001d70 <check_encoder_init+0x27c>)
 8001ccc:	f00a fc70 	bl	800c5b0 <iprintf>
		printf(" Angle Error = %.2f, Old Zero = %d, New Zero = %d, Zero Diff (Elec Rots) = %.2f\r\n", theta_elec_err, E_ZERO, theta_elec_counts, diff_zeros);
 8001cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cd2:	f7fe fc59 	bl	8000588 <__aeabi_f2d>
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	460d      	mov	r5, r1
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <check_encoder_init+0x26c>)
 8001cdc:	69de      	ldr	r6, [r3, #28]
 8001cde:	69b8      	ldr	r0, [r7, #24]
 8001ce0:	f7fe fc52 	bl	8000588 <__aeabi_f2d>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	9600      	str	r6, [sp, #0]
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	481f      	ldr	r0, [pc, #124]	; (8001d74 <check_encoder_init+0x280>)
 8001cf8:	f00a fc5a 	bl	800c5b0 <iprintf>
		encoder->init_status = 1;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001d04:	e01c      	b.n	8001d40 <check_encoder_init+0x24c>
	} else { // electrical angle error is larger than 90deg
		printf(" BAD initialization! \n\r");
 8001d06:	481c      	ldr	r0, [pc, #112]	; (8001d78 <check_encoder_init+0x284>)
 8001d08:	f00a fc52 	bl	800c5b0 <iprintf>
		printf(" Angle Error = %.2f, Old Zero = %d, New Zero = %d, Zero Diff (Elec Rots) = %.2f\r\n", theta_elec_err, E_ZERO, theta_elec_counts, diff_zeros);
 8001d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d0e:	f7fe fc3b 	bl	8000588 <__aeabi_f2d>
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <check_encoder_init+0x26c>)
 8001d18:	69de      	ldr	r6, [r3, #28]
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f7fe fc34 	bl	8000588 <__aeabi_f2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	9600      	str	r6, [sp, #0]
 8001d2e:	4622      	mov	r2, r4
 8001d30:	462b      	mov	r3, r5
 8001d32:	4810      	ldr	r0, [pc, #64]	; (8001d74 <check_encoder_init+0x280>)
 8001d34:	f00a fc3c 	bl	800c5b0 <iprintf>
		encoder->init_status = 0;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	}

	// return encoder->elec_angle? encoder->count?
	return theta_elec_counts; //theta_elec_read;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24

} // end check_encoder_init function
 8001d42:	4618      	mov	r0, r3
 8001d44:	3734      	adds	r7, #52	; 0x34
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	080106bc 	.word	0x080106bc
 8001d50:	3fc90fdb 	.word	0x3fc90fdb
 8001d54:	2000033c 	.word	0x2000033c
 8001d58:	40490fdb 	.word	0x40490fdb
 8001d5c:	40c90fdb 	.word	0x40c90fdb
 8001d60:	2000043c 	.word	0x2000043c
 8001d64:	49000000 	.word	0x49000000
 8001d68:	3fc90fdb 	.word	0x3fc90fdb
 8001d6c:	bfc90fdb 	.word	0xbfc90fdb
 8001d70:	080106e4 	.word	0x080106e4
 8001d74:	08010700 	.word	0x08010700
 8001d78:	08010754 	.word	0x08010754

08001d7c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001d82:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <MX_CAN1_Init+0x6c>)
 8001d84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001d88:	2205      	movs	r2, #5
 8001d8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d98:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001d9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001da0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001da4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001da8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <MX_CAN1_Init+0x68>)
 8001dd0:	f005 fd36 	bl	8007840 <HAL_CAN_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001dda:	f003 fbdd 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000314 	.word	0x20000314
 8001de8:	40006400 	.word	0x40006400

08001dec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_CAN_MspInit+0x84>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12c      	bne.n	8001e68 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_CAN_MspInit+0x88>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_CAN_MspInit+0x88>)
 8001e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_CAN_MspInit+0x88>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_CAN_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_CAN_MspInit+0x88>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_CAN_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e58:	2309      	movs	r3, #9
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <HAL_CAN_MspInit+0x8c>)
 8001e64:	f006 fa9e 	bl	80083a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40006400 	.word	0x40006400
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020400 	.word	0x40020400

08001e7c <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <can_rx_init+0x54>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3328      	adds	r3, #40	; 0x28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <can_rx_init+0x58>)
 8001ec4:	f005 fdb8 	bl	8007a38 <HAL_CAN_ConfigFilter>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000043c 	.word	0x2000043c
 8001ed4:	20000314 	.word	0x20000314

08001ed8 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 6; 			// message size of 8 byte
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2206      	movs	r2, #6
 8001ee4:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <can_tx_init+0x30>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	2000043c 	.word	0x2000043c

08001f0c <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6178      	str	r0, [r7, #20]
 8001f14:	460b      	mov	r3, r1
 8001f16:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f1e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001f22:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <pack_reply+0xc0>)
 8001f26:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <pack_reply+0xc0>)
 8001f2c:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001f30:	2010      	movs	r0, #16
 8001f32:	eeb0 1a47 	vmov.f32	s2, s14
 8001f36:	eef0 0a67 	vmov.f32	s1, s15
 8001f3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f3e:	f003 fc1b 	bl	8005778 <float_to_uint>
 8001f42:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <pack_reply+0xc0>)
 8001f46:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <pack_reply+0xc0>)
 8001f4c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8001f50:	200c      	movs	r0, #12
 8001f52:	eeb0 1a47 	vmov.f32	s2, s14
 8001f56:	eef0 0a67 	vmov.f32	s1, s15
 8001f5a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f5e:	f003 fc0b 	bl	8005778 <float_to_uint>
 8001f62:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, T_MIN, T_MAX, 12); //-I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <pack_reply+0xc0>)
 8001f66:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <pack_reply+0xc0>)
 8001f6c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8001f70:	200c      	movs	r0, #12
 8001f72:	eeb0 1a47 	vmov.f32	s2, s14
 8001f76:	eef0 0a67 	vmov.f32	s1, s15
 8001f7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f7e:	f003 fbfb 	bl	8005778 <float_to_uint>
 8001f82:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	7cfa      	ldrb	r2, [r7, #19]
 8001f88:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	121b      	asrs	r3, r3, #8
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	111b      	asrs	r3, r3, #4
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	121b      	asrs	r3, r3, #8
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	719a      	strb	r2, [r3, #6]
    }
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000033c 	.word	0x2000033c

08001fd0 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	b590      	push	{r4, r7, lr}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8001fe0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001ff8:	0912      	lsrs	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002000:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800200a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8002012:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800201c:	0912      	lsrs	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	4313      	orrs	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8002024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800202e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002032:	4313      	orrs	r3, r2
 8002034:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8002036:	4b33      	ldr	r3, [pc, #204]	; (8002104 <unpack_cmd+0x134>)
 8002038:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <unpack_cmd+0x134>)
 800203e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002042:	2110      	movs	r1, #16
 8002044:	eef0 0a47 	vmov.f32	s1, s14
 8002048:	eeb0 0a67 	vmov.f32	s0, s15
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f003 fbc6 	bl	80057de <uint_to_float>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002058:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <unpack_cmd+0x134>)
 800205e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002062:	4b28      	ldr	r3, [pc, #160]	; (8002104 <unpack_cmd+0x134>)
 8002064:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800206a:	1d1c      	adds	r4, r3, #4
 800206c:	210c      	movs	r1, #12
 800206e:	eef0 0a47 	vmov.f32	s1, s14
 8002072:	eeb0 0a67 	vmov.f32	s0, s15
 8002076:	6938      	ldr	r0, [r7, #16]
 8002078:	f003 fbb1 	bl	80057de <uint_to_float>
 800207c:	eef0 7a40 	vmov.f32	s15, s0
 8002080:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <unpack_cmd+0x134>)
 8002086:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800208a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800208c:	f103 0408 	add.w	r4, r3, #8
 8002090:	210c      	movs	r1, #12
 8002092:	eef0 0a67 	vmov.f32	s1, s15
 8002096:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002108 <unpack_cmd+0x138>
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f003 fb9f 	bl	80057de <uint_to_float>
 80020a0:	eef0 7a40 	vmov.f32	s15, s0
 80020a4:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <unpack_cmd+0x134>)
 80020aa:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80020ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b0:	f103 040c 	add.w	r4, r3, #12
 80020b4:	210c      	movs	r1, #12
 80020b6:	eef0 0a67 	vmov.f32	s1, s15
 80020ba:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002108 <unpack_cmd+0x138>
 80020be:	68b8      	ldr	r0, [r7, #8]
 80020c0:	f003 fb8d 	bl	80057de <uint_to_float>
 80020c4:	eef0 7a40 	vmov.f32	s15, s0
 80020c8:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, T_MIN, T_MAX, 12); //-I_MAX*KT*GR, I_MAX*KT*GR, 12);
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <unpack_cmd+0x134>)
 80020ce:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <unpack_cmd+0x134>)
 80020d4:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80020d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020da:	f103 0410 	add.w	r4, r3, #16
 80020de:	210c      	movs	r1, #12
 80020e0:	eef0 0a47 	vmov.f32	s1, s14
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f003 fb78 	bl	80057de <uint_to_float>
 80020ee:	eef0 7a40 	vmov.f32	s15, s0
 80020f2:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002100:	b004      	add	sp, #16
 8002102:	4770      	bx	lr
 8002104:	2000033c 	.word	0x2000033c
 8002108:	00000000 	.word	0x00000000

0800210c <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af02      	add	r7, sp, #8
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 800211e:	2200      	movs	r2, #0
 8002120:	2110      	movs	r1, #16
 8002122:	480f      	ldr	r0, [pc, #60]	; (8002160 <drv_spi_write+0x54>)
 8002124:	f006 fad2 	bl	80086cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1c9a      	adds	r2, r3, #2
 800212e:	2364      	movs	r3, #100	; 0x64
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	480b      	ldr	r0, [pc, #44]	; (8002164 <drv_spi_write+0x58>)
 8002136:	f007 f9a4 	bl	8009482 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800213a:	bf00      	nop
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <drv_spi_write+0x58>)
 800213e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d0f9      	beq.n	800213c <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8002148:	2201      	movs	r2, #1
 800214a:	2110      	movs	r1, #16
 800214c:	4804      	ldr	r0, [pc, #16]	; (8002160 <drv_spi_write+0x54>)
 800214e:	f006 fabd 	bl	80086cc <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	885b      	ldrh	r3, [r3, #2]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40020000 	.word	0x40020000
 8002164:	200094c4 	.word	0x200094c4

08002168 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	463b      	mov	r3, r7
 8002170:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8002174:	463b      	mov	r3, r7
 8002176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ffc6 	bl	800210c <drv_spi_write>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	463b      	mov	r3, r7
 8002192:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8002196:	463b      	mov	r3, r7
 8002198:	f248 0101 	movw	r1, #32769	; 0x8001
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ffb5 	bl	800210c <drv_spi_write>
 80021a2:	4603      	mov	r3, r0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80021ba:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	02db      	lsls	r3, r3, #11
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff99 	bl	800210c <drv_spi_write>
 80021da:	4603      	mov	r3, r0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	f107 0408 	add.w	r4, r7, #8
 80021ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	02db      	lsls	r3, r3, #11
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21b      	sxth	r3, r3
 8002204:	b29a      	uxth	r2, r3
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff7d 	bl	800210c <drv_spi_write>
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}

0800221a <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800221a:	b590      	push	{r4, r7, lr}
 800221c:	b087      	sub	sp, #28
 800221e:	af00      	add	r7, sp, #0
 8002220:	f107 0408 	add.w	r4, r7, #8
 8002224:	e884 0003 	stmia.w	r4, {r0, r1}
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	025b      	lsls	r3, r3, #9
 8002230:	b21b      	sxth	r3, r3
 8002232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002236:	b21a      	sxth	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21b      	sxth	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b21a      	sxth	r2, r3
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	01db      	lsls	r3, r3, #7
 8002246:	b21b      	sxth	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b21a      	sxth	r2, r3
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	015b      	lsls	r3, r3, #5
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21a      	sxth	r2, r3
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b21a      	sxth	r2, r3
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	b21b      	sxth	r3, r3
 8002266:	4313      	orrs	r3, r2
 8002268:	b21a      	sxth	r2, r3
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b21a      	sxth	r2, r3
 8002274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21a      	sxth	r2, r3
 800227e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002280:	b21b      	sxth	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b21b      	sxth	r3, r3
 8002286:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002288:	8afa      	ldrh	r2, [r7, #22]
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff3b 	bl	800210c <drv_spi_write>
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}

0800229e <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 800229e:	b590      	push	{r4, r7, lr}
 80022a0:	b087      	sub	sp, #28
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	f107 0408 	add.w	r4, r7, #8
 80022a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80022ba:	b21a      	sxth	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21a      	sxth	r2, r3
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	b21b      	sxth	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80022e4:	8afa      	ldrh	r2, [r7, #22]
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff0d 	bl	800210c <drv_spi_write>
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}

080022fa <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b087      	sub	sp, #28
 80022fe:	af00      	add	r7, sp, #0
 8002300:	f107 0408 	add.w	r4, r7, #8
 8002304:	e884 0003 	stmia.w	r4, {r0, r1}
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	b21b      	sxth	r3, r3
 8002312:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002316:	b21a      	sxth	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	025b      	lsls	r3, r3, #9
 800231c:	b21b      	sxth	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b21a      	sxth	r2, r3
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b21b      	sxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b21a      	sxth	r2, r3
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	019b      	lsls	r3, r3, #6
 8002330:	b21b      	sxth	r3, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	b21a      	sxth	r2, r3
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	b21b      	sxth	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b21a      	sxth	r2, r3
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b21a      	sxth	r2, r3
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21a      	sxth	r2, r3
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	b21b      	sxth	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b21a      	sxth	r2, r3
 800235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21b      	sxth	r3, r3
 8002366:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002368:	8afa      	ldrh	r2, [r7, #22]
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fecb 	bl	800210c <drv_spi_write>
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}

0800237e <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	463b      	mov	r3, r7
 8002386:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 800238a:	2202      	movs	r2, #2
 800238c:	463b      	mov	r3, r7
 800238e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002392:	f7ff ff0b 	bl	80021ac <drv_read_register>
 8002396:	4603      	mov	r3, r0
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800239e:	89fb      	ldrh	r3, [r7, #14]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4639      	mov	r1, r7
 80023a4:	c903      	ldmia	r1, {r0, r1}
 80023a6:	f7ff ff1d 	bl	80021e4 <drv_write_register>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	463b      	mov	r3, r7
 80023ba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 80023be:	2202      	movs	r2, #2
 80023c0:	463b      	mov	r3, r7
 80023c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023c6:	f7ff fef1 	bl	80021ac <drv_read_register>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	2202      	movs	r2, #2
 80023d6:	4639      	mov	r1, r7
 80023d8:	c903      	ldmia	r1, {r0, r1}
 80023da:	f7ff ff03 	bl	80021e4 <drv_write_register>
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <drv_check_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_check_faults(DRVStruct drv, FSMStruct* fsmstate){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80023f6:	607a      	str	r2, [r7, #4]
    uint16_t val1 = drv_read_FSR1(drv);
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002400:	f7ff feb2 	bl	8002168 <drv_read_FSR1>
 8002404:	4603      	mov	r3, r0
 8002406:	82fb      	strh	r3, [r7, #22]
    uint16_t val2 = drv_read_FSR2(drv);
 8002408:	f107 0308 	add.w	r3, r7, #8
 800240c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002410:	f7ff febb 	bl	800218a <drv_read_FSR2>
 8002414:	4603      	mov	r3, r0
 8002416:	82bb      	strh	r3, [r7, #20]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");} // fault value
 8002418:	8afb      	ldrh	r3, [r7, #22]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <drv_check_faults+0x40>
 8002422:	4857      	ldr	r0, [pc, #348]	; (8002580 <drv_check_faults+0x198>)
 8002424:	f00a f8c4 	bl	800c5b0 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");} // VDS monitor overcurrent
 8002428:	8afb      	ldrh	r3, [r7, #22]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <drv_check_faults+0x50>
 8002432:	4854      	ldr	r0, [pc, #336]	; (8002584 <drv_check_faults+0x19c>)
 8002434:	f00a f8bc 	bl	800c5b0 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");} // gate drive fault condition
 8002438:	8afb      	ldrh	r3, [r7, #22]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <drv_check_faults+0x60>
 8002442:	4851      	ldr	r0, [pc, #324]	; (8002588 <drv_check_faults+0x1a0>)
 8002444:	f00a f8b4 	bl	800c5b0 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");} // undervoltage lockout fault condition
 8002448:	8afb      	ldrh	r3, [r7, #22]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <drv_check_faults+0x70>
 8002452:	484e      	ldr	r0, [pc, #312]	; (800258c <drv_check_faults+0x1a4>)
 8002454:	f00a f8ac 	bl	800c5b0 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");} // overtemperature shutdown
 8002458:	8afb      	ldrh	r3, [r7, #22]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <drv_check_faults+0x80>
 8002462:	484b      	ldr	r0, [pc, #300]	; (8002590 <drv_check_faults+0x1a8>)
 8002464:	f00a f8a4 	bl	800c5b0 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");} // VDS overcurrent, A high-side
 8002468:	8afb      	ldrh	r3, [r7, #22]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <drv_check_faults+0x90>
 8002472:	4848      	ldr	r0, [pc, #288]	; (8002594 <drv_check_faults+0x1ac>)
 8002474:	f00a f89c 	bl	800c5b0 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");} // VDS overcurrent, A low-side
 8002478:	8afb      	ldrh	r3, [r7, #22]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <drv_check_faults+0xa0>
 8002482:	4845      	ldr	r0, [pc, #276]	; (8002598 <drv_check_faults+0x1b0>)
 8002484:	f00a f894 	bl	800c5b0 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");} // VDS overcurrent, B high-side
 8002488:	8afb      	ldrh	r3, [r7, #22]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <drv_check_faults+0xb0>
 8002492:	4842      	ldr	r0, [pc, #264]	; (800259c <drv_check_faults+0x1b4>)
 8002494:	f00a f88c 	bl	800c5b0 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");} // VDS overcurrent, B low-side
 8002498:	8afb      	ldrh	r3, [r7, #22]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <drv_check_faults+0xc0>
 80024a2:	483f      	ldr	r0, [pc, #252]	; (80025a0 <drv_check_faults+0x1b8>)
 80024a4:	f00a f884 	bl	800c5b0 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");} // VDS overcurrent, C high-side
 80024a8:	8afb      	ldrh	r3, [r7, #22]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <drv_check_faults+0xd0>
 80024b2:	483c      	ldr	r0, [pc, #240]	; (80025a4 <drv_check_faults+0x1bc>)
 80024b4:	f00a f87c 	bl	800c5b0 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");} // VDS overcurrent, C low-side
 80024b8:	8afb      	ldrh	r3, [r7, #22]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <drv_check_faults+0xe0>
 80024c2:	4839      	ldr	r0, [pc, #228]	; (80025a8 <drv_check_faults+0x1c0>)
 80024c4:	f00a f874 	bl	800c5b0 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");} // overcurrent phase A sense amplifier
 80024c8:	8abb      	ldrh	r3, [r7, #20]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <drv_check_faults+0xf0>
 80024d2:	4836      	ldr	r0, [pc, #216]	; (80025ac <drv_check_faults+0x1c4>)
 80024d4:	f00a f86c 	bl	800c5b0 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");} // overcurrent phase B sense amplifier
 80024d8:	8abb      	ldrh	r3, [r7, #20]
 80024da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <drv_check_faults+0x100>
 80024e2:	4833      	ldr	r0, [pc, #204]	; (80025b0 <drv_check_faults+0x1c8>)
 80024e4:	f00a f864 	bl	800c5b0 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");} // overcurrent phase C sense amplifier
 80024e8:	8abb      	ldrh	r3, [r7, #20]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <drv_check_faults+0x110>
 80024f2:	4830      	ldr	r0, [pc, #192]	; (80025b4 <drv_check_faults+0x1cc>)
 80024f4:	f00a f85c 	bl	800c5b0 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");} // overtemperature warning
 80024f8:	8abb      	ldrh	r3, [r7, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <drv_check_faults+0x120>
 8002502:	482d      	ldr	r0, [pc, #180]	; (80025b8 <drv_check_faults+0x1d0>)
 8002504:	f00a f854 	bl	800c5b0 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");} // VCP charge pump and/or VGLS undervoltage fault
 8002508:	8abb      	ldrh	r3, [r7, #20]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <drv_check_faults+0x130>
 8002512:	482a      	ldr	r0, [pc, #168]	; (80025bc <drv_check_faults+0x1d4>)
 8002514:	f00a f84c 	bl	800c5b0 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");} // gate drive fault, A high-side
 8002518:	8abb      	ldrh	r3, [r7, #20]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <drv_check_faults+0x140>
 8002522:	4827      	ldr	r0, [pc, #156]	; (80025c0 <drv_check_faults+0x1d8>)
 8002524:	f00a f844 	bl	800c5b0 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");} // gate drive fault, A low-side
 8002528:	8abb      	ldrh	r3, [r7, #20]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <drv_check_faults+0x150>
 8002532:	4824      	ldr	r0, [pc, #144]	; (80025c4 <drv_check_faults+0x1dc>)
 8002534:	f00a f83c 	bl	800c5b0 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");} // gate drive fault, B high-side
 8002538:	8abb      	ldrh	r3, [r7, #20]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <drv_check_faults+0x160>
 8002542:	4821      	ldr	r0, [pc, #132]	; (80025c8 <drv_check_faults+0x1e0>)
 8002544:	f00a f834 	bl	800c5b0 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");} // gate drive fault, B low-side
 8002548:	8abb      	ldrh	r3, [r7, #20]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <drv_check_faults+0x170>
 8002552:	481e      	ldr	r0, [pc, #120]	; (80025cc <drv_check_faults+0x1e4>)
 8002554:	f00a f82c 	bl	800c5b0 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");} // gate drive fault, C high-side
 8002558:	8abb      	ldrh	r3, [r7, #20]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <drv_check_faults+0x180>
 8002562:	481b      	ldr	r0, [pc, #108]	; (80025d0 <drv_check_faults+0x1e8>)
 8002564:	f00a f824 	bl	800c5b0 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");} // gate drive fault, C low-side
 8002568:	8abb      	ldrh	r3, [r7, #20]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <drv_check_faults+0x190>
 8002572:	4818      	ldr	r0, [pc, #96]	; (80025d4 <drv_check_faults+0x1ec>)
 8002574:	f00a f81c 	bl	800c5b0 <iprintf>
    // TODO: store fault values for using in fault mode?
//    if(val1 & (1<<10)){ // fault bit is set
//    	fsmstate->next_state = FAULT_MODE;
//    }

}
 8002578:	bf00      	nop
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	0801076c 	.word	0x0801076c
 8002584:	08010778 	.word	0x08010778
 8002588:	08010784 	.word	0x08010784
 800258c:	0801078c 	.word	0x0801078c
 8002590:	08010794 	.word	0x08010794
 8002594:	0801079c 	.word	0x0801079c
 8002598:	080107a8 	.word	0x080107a8
 800259c:	080107b4 	.word	0x080107b4
 80025a0:	080107c0 	.word	0x080107c0
 80025a4:	080107cc 	.word	0x080107cc
 80025a8:	080107d8 	.word	0x080107d8
 80025ac:	080107e4 	.word	0x080107e4
 80025b0:	080107ec 	.word	0x080107ec
 80025b4:	080107f4 	.word	0x080107f4
 80025b8:	080107fc 	.word	0x080107fc
 80025bc:	08010804 	.word	0x08010804
 80025c0:	0801080c 	.word	0x0801080c
 80025c4:	08010818 	.word	0x08010818
 80025c8:	08010824 	.word	0x08010824
 80025cc:	08010830 	.word	0x08010830
 80025d0:	0801083c 	.word	0x0801083c
 80025d4:	08010848 	.word	0x08010848

080025d8 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b07      	cmp	r3, #7
 80025e6:	d901      	bls.n	80025ec <flash_writer_init+0x14>
 80025e8:	2307      	movs	r3, #7
 80025ea:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <flash_writer_init+0x38>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000000 	.word	0x20000000

08002614 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 800261c:	f003 fdd8 	bl	80061d0 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8002620:	20f1      	movs	r0, #241	; 0xf1
 8002622:	f003 fe91 	bl	8006348 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <flash_writer_open+0x34>)
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	2102      	movs	r1, #2
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fdf4 	bl	8006220 <FLASH_EraseSector>
    fw->ready = true;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000020 	.word	0x20000020

0800264c <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	1d3c      	adds	r4, r7, #4
 8002654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002658:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fe38 	bl	80062e0 <FLASH_ProgramWord>
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}

08002678 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	f107 040c 	add.w	r4, r7, #12
 8002682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fe1f 	bl	80062e0 <FLASH_ProgramWord>
}
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}

080026aa <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 80026b2:	f003 fda5 	bl	8006200 <FLASH_Lock>
    fw->ready = false;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 80026c4:	b490      	push	{r4, r7}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	1d3c      	adds	r4, r7, #4
 80026cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026d0:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <flash_read_int+0x28>)
 80026d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	681b      	ldr	r3, [r3, #0]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc90      	pop	{r4, r7}
 80026ea:	4770      	bx	lr
 80026ec:	20000000 	.word	0x20000000

080026f0 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80026f0:	b490      	push	{r4, r7}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	1d3c      	adds	r4, r7, #4
 80026f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026fc:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <flash_read_float+0x30>)
 8002702:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	ee07 3a90 	vmov	s15, r3
}
 8002712:	eeb0 0a67 	vmov.f32	s0, s15
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bc90      	pop	{r4, r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000

08002724 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274c:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800275a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800276c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002770:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <set_dtc+0x140>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d136      	bne.n	80027ea <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <set_dtc+0x144>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800278a:	edd7 7a05 	vldr	s15, [r7, #20]
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	4b35      	ldr	r3, [pc, #212]	; (8002868 <set_dtc+0x144>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800279a:	ee17 2a90 	vmov	r2, s15
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80027a0:	4b31      	ldr	r3, [pc, #196]	; (8002868 <set_dtc+0x144>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <set_dtc+0x144>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027be:	ee17 2a90 	vmov	r2, s15
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <set_dtc+0x144>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <set_dtc+0x144>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e2:	ee17 2a90 	vmov	r2, s15
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80027e8:	e035      	b.n	8002856 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <set_dtc+0x144>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <set_dtc+0x144>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002808:	ee17 2a90 	vmov	r2, s15
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <set_dtc+0x144>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800281c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <set_dtc+0x144>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	ee17 2a90 	vmov	r2, s15
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <set_dtc+0x144>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002840:	edd7 7a03 	vldr	s15, [r7, #12]
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <set_dtc+0x144>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002850:	ee17 2a90 	vmov	r2, s15
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000043c 	.word	0x2000043c
 8002868:	20009578 	.word	0x20009578

0800286c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */

	// moved to start to get new values from ADC
	HAL_ADC_Start(&ADC_CH_MAIN);
 8002874:	4838      	ldr	r0, [pc, #224]	; (8002958 <analog_sample+0xec>)
 8002876:	f004 fc05 	bl	8007084 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 800287a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800287e:	4836      	ldr	r0, [pc, #216]	; (8002958 <analog_sample+0xec>)
 8002880:	f004 fcd2 	bl	8007228 <HAL_ADC_PollForConversion>

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <analog_sample+0xf0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10e      	bne.n	80028aa <analog_sample+0x3e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800288c:	4832      	ldr	r0, [pc, #200]	; (8002958 <analog_sample+0xec>)
 800288e:	f004 fd56 	bl	800733e <HAL_ADC_GetValue>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800289a:	4831      	ldr	r0, [pc, #196]	; (8002960 <analog_sample+0xf4>)
 800289c:	f004 fd4f 	bl	800733e <HAL_ADC_GetValue>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e00d      	b.n	80028c6 <analog_sample+0x5a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80028aa:	482d      	ldr	r0, [pc, #180]	; (8002960 <analog_sample+0xf4>)
 80028ac:	f004 fd47 	bl	800733e <HAL_ADC_GetValue>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80028b8:	4827      	ldr	r0, [pc, #156]	; (8002958 <analog_sample+0xec>)
 80028ba:	f004 fd40 	bl	800733e <HAL_ADC_GetValue>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	609a      	str	r2, [r3, #8]
	}

//	HAL_ADC_Start(&ADC_CH_MAIN);
//	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 80028c6:	4827      	ldr	r0, [pc, #156]	; (8002964 <analog_sample+0xf8>)
 80028c8:	f004 fd39 	bl	800733e <HAL_ADC_GetValue>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002968 <analog_sample+0xfc>
 80028e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	ee07 3a90 	vmov	s15, r3
 8002904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edd3 7a05 	vldr	s15, [r3, #20]
 800293c:	eeb1 7a67 	vneg.f32	s14, s15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	edd3 7a06 	vldr	s15, [r3, #24]
 8002946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000023c 	.word	0x2000023c
 800295c:	2000043c 	.word	0x2000043c
 8002960:	20000284 	.word	0x20000284
 8002964:	200002cc 	.word	0x200002cc
 8002968:	3cd33318 	.word	0x3cd33318

0800296c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	ed87 0a05 	vstr	s0, [r7, #20]
 8002976:	edc7 0a04 	vstr	s1, [r7, #16]
 800297a:	ed87 1a03 	vstr	s2, [r7, #12]
 800297e:	60b8      	str	r0, [r7, #8]
 8002980:	6079      	str	r1, [r7, #4]
 8002982:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002984:	ed97 0a05 	vldr	s0, [r7, #20]
 8002988:	f002 ff96 	bl	80058b8 <cos_lut>
 800298c:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002990:	ed97 0a05 	vldr	s0, [r7, #20]
 8002994:	f002 ff56 	bl	8005844 <sin_lut>
 8002998:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 800299c:	ed97 7a07 	vldr	s14, [r7, #28]
 80029a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80029ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80029be:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002a6c <abc+0x100>
 80029c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80029ce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80029d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029da:	edd7 7a04 	vldr	s15, [r7, #16]
 80029de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80029e6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002a70 <abc+0x104>
 80029ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80029f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a14:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002a70 <abc+0x104>
 8002a18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a20:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002a24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a34:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a38:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002a6c <abc+0x100>
 8002a3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a40:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002a62:	bf00      	nop
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	3f5db3d7 	.word	0x3f5db3d7
 8002a70:	bf5db3d7 	.word	0xbf5db3d7

08002a74 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a7e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a82:	ed87 1a03 	vstr	s2, [r7, #12]
 8002a86:	edc7 1a02 	vstr	s3, [r7, #8]
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002a8e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a92:	f002 ff11 	bl	80058b8 <cos_lut>
 8002a96:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002a9a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a9e:	f002 fed1 	bl	8005844 <sin_lut>
 8002aa2:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002aa6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ab6:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002b88 <dq0+0x114>
 8002aba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002abe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ac2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002ac6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002aca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ada:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ade:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002b8c <dq0+0x118>
 8002ae2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ae6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aea:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002aee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002af2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b90 <dq0+0x11c>
 8002b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002b10:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b14:	eeb1 7a67 	vneg.f32	s14, s15
 8002b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b20:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b24:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002b8c <dq0+0x118>
 8002b28:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b30:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b4c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002b88 <dq0+0x114>
 8002b50:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b54:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b58:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b70:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b90 <dq0+0x11c>
 8002b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002b7e:	bf00      	nop
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	3f5db3d7 	.word	0x3f5db3d7
 8002b8c:	bf5db3d7 	.word	0xbf5db3d7
 8002b90:	3f2aaaab 	.word	0x3f2aaaab

08002b94 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	ed2d 8b02 	vpush	{d8}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002ba2:	edc7 0a06 	vstr	s1, [r7, #24]
 8002ba6:	ed87 1a05 	vstr	s2, [r7, #20]
 8002baa:	edc7 1a04 	vstr	s3, [r7, #16]
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002bb4:	ed97 1a04 	vldr	s2, [r7, #16]
 8002bb8:	edd7 0a05 	vldr	s1, [r7, #20]
 8002bbc:	ed97 0a06 	vldr	s0, [r7, #24]
 8002bc0:	f002 fd5d 	bl	800567e <fminf3>
 8002bc4:	eeb0 8a40 	vmov.f32	s16, s0
 8002bc8:	ed97 1a04 	vldr	s2, [r7, #16]
 8002bcc:	edd7 0a05 	vldr	s1, [r7, #20]
 8002bd0:	ed97 0a06 	vldr	s0, [r7, #24]
 8002bd4:	f002 fd1f 	bl	8005616 <fmaxf3>
 8002bd8:	eef0 7a40 	vmov.f32	s15, s0
 8002bdc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002be0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002bec:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <svm+0x160>)
 8002bee:	623b      	str	r3, [r7, #32]
//    // Dead-time compensation
//	float u_comp = DTC_COMP*(-(i_sector==4) + (i_sector==3));
//	float v_comp = DTC_COMP*(-(i_sector==2) + (i_sector==5));
//	float w_comp = DTC_COMP*((i_sector==6) - (i_sector==1));

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002bf0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c04:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002cf8 <svm+0x164>
 8002c08:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1c:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002cfc <svm+0x168>
 8002c20:	eeb0 0a67 	vmov.f32	s0, s15
 8002c24:	f002 fcbf 	bl	80055a6 <fast_fmaxf>
 8002c28:	eef0 7a40 	vmov.f32	s15, s0
 8002c2c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002d00 <svm+0x16c>
 8002c30:	eeb0 0a67 	vmov.f32	s0, s15
 8002c34:	f002 fcd3 	bl	80055de <fast_fminf>
 8002c38:	eef0 7a40 	vmov.f32	s15, s0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002c42:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c56:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002cf8 <svm+0x164>
 8002c5a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c66:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002cfc <svm+0x168>
 8002c72:	eeb0 0a67 	vmov.f32	s0, s15
 8002c76:	f002 fc96 	bl	80055a6 <fast_fmaxf>
 8002c7a:	eef0 7a40 	vmov.f32	s15, s0
 8002c7e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002d00 <svm+0x16c>
 8002c82:	eeb0 0a67 	vmov.f32	s0, s15
 8002c86:	f002 fcaa 	bl	80055de <fast_fminf>
 8002c8a:	eef0 7a40 	vmov.f32	s15, s0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002cf8 <svm+0x164>
 8002cac:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002cfc <svm+0x168>
 8002cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc8:	f002 fc6d 	bl	80055a6 <fast_fmaxf>
 8002ccc:	eef0 7a40 	vmov.f32	s15, s0
 8002cd0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002d00 <svm+0x16c>
 8002cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd8:	f002 fc81 	bl	80055de <fast_fminf>
 8002cdc:	eef0 7a40 	vmov.f32	s15, s0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	edc3 7a00 	vstr	s15, [r3]
//	*dtc_v = fminf(fmaxf((v/v_bus + .5f), DTC_MIN), DTC_MAX);
//	*dtc_w = fminf(fmaxf((w/v_bus + .5f), DTC_MIN), DTC_MAX);
//	*/


    }
 8002ce6:	bf00      	nop
 8002ce8:	3728      	adds	r7, #40	; 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	ecbd 8b02 	vpop	{d8}
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	3ef0a3d7 	.word	0x3ef0a3d7
 8002cf8:	3f933333 	.word	0x3f933333
 8002cfc:	00000000 	.word	0x00000000
 8002d00:	3f70a3d7 	.word	0x3f70a3d7

08002d04 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d18:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fcf6 	bl	8002724 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e00f      	b.n	8002d5e <zero_current+0x5a>
    	analog_sample(controller);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fd94 	bl	800286c <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	dbeb      	blt.n	8002d3e <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <init_controller_params+0x138>)
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <init_controller_params+0x138>)
 8002d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 8002da2:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <init_controller_params+0x13c>)
 8002da4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002da8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002ecc <init_controller_params+0x140>
 8002dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <init_controller_params+0x13c>)
 8002db8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dbc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002ecc <init_controller_params+0x140>
 8002dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <init_controller_params+0x13c>)
 8002dcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002ed0 <init_controller_params+0x144>
 8002dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ed4 <init_controller_params+0x148>
 8002ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002de4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002e04:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002ed8 <init_controller_params+0x14c>
 8002e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 8002e12:	4b32      	ldr	r3, [pc, #200]	; (8002edc <init_controller_params+0x150>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <init_controller_params+0x13c>)
 8002e1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e22:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002ee0 <init_controller_params+0x154>
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d803      	bhi.n	8002e38 <init_controller_params+0xac>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a2c      	ldr	r2, [pc, #176]	; (8002ee4 <init_controller_params+0x158>)
 8002e34:	671a      	str	r2, [r3, #112]	; 0x70
 8002e36:	e002      	b.n	8002e3e <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <init_controller_params+0x15c>)
 8002e3c:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e037      	b.n	8002eb4 <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e4e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002eec <init_controller_params+0x160>
 8002e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e56:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ef0 <init_controller_params+0x164>
 8002e5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e5e:	ee16 0a90 	vmov	r0, s13
 8002e62:	f7fd fb91 	bl	8000588 <__aeabi_f2d>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	ec43 2b10 	vmov	d0, r2, r3
 8002e6e:	f00d f8a3 	bl	800ffb8 <exp>
 8002e72:	ec51 0b10 	vmov	r0, r1, d0
 8002e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <init_controller_params+0x168>)
 8002e7c:	f7fd fbdc 	bl	8000638 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <init_controller_params+0x16c>)
 8002e8e:	f7fd fa1d 	bl	80002cc <__adddf3>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f7fd fec5 	bl	8000c28 <__aeabi_d2f>
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	333c      	adds	r3, #60	; 0x3c
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8002eb8:	ddc4      	ble.n	8002e44 <init_controller_params+0xb8>
    }

    }
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	3d18c7e3 	.word	0x3d18c7e3
 8002ec8:	2000033c 	.word	0x2000033c
 8002ecc:	390b75ea 	.word	0x390b75ea
 8002ed0:	3851b717 	.word	0x3851b717
 8002ed4:	40c90fdb 	.word	0x40c90fdb
 8002ed8:	3dcccccd 	.word	0x3dcccccd
 8002edc:	2000043c 	.word	0x2000043c
 8002ee0:	42200000 	.word	0x42200000
 8002ee4:	3ca4ffff 	.word	0x3ca4ffff
 8002ee8:	3d24ffff 	.word	0x3d24ffff
 8002eec:	bc000000 	.word	0xbc000000
 8002ef0:	3d03126f 	.word	0x3d03126f
 8002ef4:	3ff33333 	.word	0x3ff33333
 8002ef8:	3ff00000 	.word	0x3ff00000

08002efc <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <reset_foc+0xe4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <reset_foc+0xe4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f22:	ee17 2a90 	vmov	r2, s15
 8002f26:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <reset_foc+0xe4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <reset_foc+0xe4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f46:	ee17 2a90 	vmov	r2, s15
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <reset_foc+0xe4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f62:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <reset_foc+0xe4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f6a:	ee17 2a90 	vmov	r2, s15
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20009578 	.word	0x20009578

08002fe4 <commutate>:
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);


}
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003004:	4bd7      	ldr	r3, [pc, #860]	; (8003364 <commutate+0x380>)
 8003006:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800300a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	edd3 6a05 	vldr	s13, [r3, #20]
 800301a:	4bd2      	ldr	r3, [pc, #840]	; (8003364 <commutate+0x380>)
 800301c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	ed93 7a05 	vldr	s14, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	edd3 6a06 	vldr	s13, [r3, #24]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	ed93 6a07 	vldr	s12, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3340      	adds	r3, #64	; 0x40
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	eef0 1a46 	vmov.f32	s3, s12
 8003054:	eeb0 1a66 	vmov.f32	s2, s13
 8003058:	eef0 0a47 	vmov.f32	s1, s14
 800305c:	eeb0 0a67 	vmov.f32	s0, s15
 8003060:	f7ff fd08 	bl	8002a74 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800306a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003368 <commutate+0x384>
 800306e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003078:	eddf 6abc 	vldr	s13, [pc, #752]	; 800336c <commutate+0x388>
 800307c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003090:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003368 <commutate+0x384>
 8003094:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800309e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800336c <commutate+0x388>
 80030a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030b6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003368 <commutate+0x384>
 80030ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80030c4:	eddf 6aa9 	vldr	s13, [pc, #676]	; 800336c <commutate+0x388>
 80030c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       // TODO: remove or hard-code v_max for now?
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030dc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003370 <commutate+0x38c>
 80030e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030e4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003374 <commutate+0x390>
 80030e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ec:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003378 <commutate+0x394>
 80030f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80030fa:	4b9a      	ldr	r3, [pc, #616]	; (8003364 <commutate+0x380>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003116:	eeb0 0a67 	vmov.f32	s0, s15
 800311a:	4610      	mov	r0, r2
 800311c:	f002 fae3 	bl	80056e6 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003144:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800315a:	edd7 7a07 	vldr	s15, [r7, #28]
 800315e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800316c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003186:	eef0 0a47 	vmov.f32	s1, s14
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	f002 fa26 	bl	80055de <fast_fminf>
 8003192:	eeb0 7a40 	vmov.f32	s14, s0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800319c:	eef1 7a67 	vneg.f32	s15, s15
 80031a0:	eef0 0a67 	vmov.f32	s1, s15
 80031a4:	eeb0 0a47 	vmov.f32	s0, s14
 80031a8:	f002 f9fd 	bl	80055a6 <fast_fmaxf>
 80031ac:	eef0 7a40 	vmov.f32	s15, s0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80031c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80031d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80031ea:	eef0 0a47 	vmov.f32	s1, s14
 80031ee:	eeb0 0a67 	vmov.f32	s0, s15
 80031f2:	f002 f9f4 	bl	80055de <fast_fminf>
 80031f6:	eeb0 7a40 	vmov.f32	s14, s0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003200:	eef1 7a67 	vneg.f32	s15, s15
 8003204:	eef0 0a67 	vmov.f32	s1, s15
 8003208:	eeb0 0a47 	vmov.f32	s0, s14
 800320c:	f002 f9cb 	bl	80055a6 <fast_fmaxf>
 8003210:	eef0 7a40 	vmov.f32	s15, s0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800323a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	f00c ff21 	bl	8010088 <sqrtf>
 8003246:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003250:	edd7 7a06 	vldr	s15, [r7, #24]
 8003254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800325e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003262:	edd7 7a04 	vldr	s15, [r7, #16]
 8003266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003282:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003286:	edd7 7a06 	vldr	s15, [r7, #24]
 800328a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80032a4:	eef0 0a47 	vmov.f32	s1, s14
 80032a8:	eeb0 0a67 	vmov.f32	s0, s15
 80032ac:	f002 f997 	bl	80055de <fast_fminf>
 80032b0:	eeb0 7a40 	vmov.f32	s14, s0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80032ba:	eef1 7a67 	vneg.f32	s15, s15
 80032be:	eef0 0a67 	vmov.f32	s1, s15
 80032c2:	eeb0 0a47 	vmov.f32	s0, s14
 80032c6:	f002 f96e 	bl	80055a6 <fast_fmaxf>
 80032ca:	eef0 7a40 	vmov.f32	s15, s0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80032e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	f00c fec4 	bl	8010088 <sqrtf>
 8003300:	eef0 7a40 	vmov.f32	s15, s0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003310:	edd7 0a03 	vldr	s1, [r7, #12]
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f002 f961 	bl	80055de <fast_fminf>
 800331c:	eeb0 7a40 	vmov.f32	s14, s0
 8003320:	edd7 7a03 	vldr	s15, [r7, #12]
 8003324:	eef1 7a67 	vneg.f32	s15, s15
 8003328:	eef0 0a67 	vmov.f32	s1, s15
 800332c:	eeb0 0a47 	vmov.f32	s0, s14
 8003330:	f002 f939 	bl	80055a6 <fast_fmaxf>
 8003334:	eef0 7a40 	vmov.f32	s15, s0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003350:	eeb0 0a67 	vmov.f32	s0, s15
 8003354:	4610      	mov	r0, r2
 8003356:	f002 f9c6 	bl	80056e6 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	e00d      	b.n	8003380 <commutate+0x39c>
 8003364:	2000033c 	.word	0x2000033c
 8003368:	3f733333 	.word	0x3f733333
 800336c:	3d4ccccd 	.word	0x3d4ccccd
 8003370:	3f933333 	.word	0x3f933333
 8003374:	3f70a3d7 	.word	0x3f70a3d7
 8003378:	3f13cd3a 	.word	0x3f13cd3a
 800337c:	389d4951 	.word	0x389d4951
 8003380:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003384:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800337c <commutate+0x398>
 8003388:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800338c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	336c      	adds	r3, #108	; 0x6c
 80033ac:	461a      	mov	r2, r3
 80033ae:	eeb0 1a66 	vmov.f32	s2, s13
 80033b2:	eef0 0a47 	vmov.f32	s1, s14
 80033b6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ba:	f7ff fad7 	bl	800296c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3360      	adds	r3, #96	; 0x60
 80033e6:	461a      	mov	r2, r3
 80033e8:	eef0 1a46 	vmov.f32	s3, s12
 80033ec:	eeb0 1a66 	vmov.f32	s2, s13
 80033f0:	eef0 0a47 	vmov.f32	s1, s14
 80033f4:	eeb0 0a67 	vmov.f32	s0, s15
 80033f8:	f7ff fbcc 	bl	8002b94 <svm>

       set_dtc(controller);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff f991 	bl	8002724 <set_dtc>

    }
 8003402:	bf00      	nop
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop

0800340c <torque_control>:


void torque_control(ControllerStruct *controller){
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003426:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800342a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800344a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800344e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003456:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT_OUT), controller->i_max), -controller->i_max);
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <torque_control+0xa4>)
 800345c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003460:	ed97 7a03 	vldr	s14, [r7, #12]
 8003464:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 800346e:	eef0 0a67 	vmov.f32	s1, s15
 8003472:	eeb0 0a66 	vmov.f32	s0, s13
 8003476:	f002 f8b2 	bl	80055de <fast_fminf>
 800347a:	eeb0 7a40 	vmov.f32	s14, s0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003484:	eef1 7a67 	vneg.f32	s15, s15
 8003488:	eef0 0a67 	vmov.f32	s1, s15
 800348c:	eeb0 0a47 	vmov.f32	s0, s14
 8003490:	f002 f889 	bl	80055a6 <fast_fmaxf>
 8003494:	eef0 7a40 	vmov.f32	s15, s0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000033c 	.word	0x2000033c

080034b4 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <run_fsm>:
#include "drv8323.h"

//CAN ACTIVE FLAG
extern int CAN_ACTIVE;

 void run_fsm(FSMStruct * fsmstate){
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b085      	sub	sp, #20
 8003508:	af02      	add	r7, sp, #8
 800350a:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	785a      	ldrb	r2, [r3, #1]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d00d      	beq.n	8003534 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f9b5 	bl	8003888 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	78db      	ldrb	r3, [r3, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	785a      	ldrb	r2, [r3, #1]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f928 	bl	8003784 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b07      	cmp	r3, #7
 800353a:	f200 8108 	bhi.w	800374e <run_fsm+0x24a>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <run_fsm+0x40>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003749 	.word	0x08003749
 8003548:	08003565 	.word	0x08003565
 800354c:	08003675 	.word	0x08003675
 8003550:	0800374f 	.word	0x0800374f
 8003554:	08003749 	.word	0x08003749
 8003558:	080036c9 	.word	0x080036c9
 800355c:	08003749 	.word	0x08003749
 8003560:	080036ed 	.word	0x080036ed
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003564:	4b7c      	ldr	r3, [pc, #496]	; (8003758 <run_fsm+0x254>)
 8003566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <run_fsm+0x7c>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800356e:	4b7b      	ldr	r3, [pc, #492]	; (800375c <run_fsm+0x258>)
 8003570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003574:	4a78      	ldr	r2, [pc, #480]	; (8003758 <run_fsm+0x254>)
 8003576:	4979      	ldr	r1, [pc, #484]	; (800375c <run_fsm+0x258>)
 8003578:	4879      	ldr	r0, [pc, #484]	; (8003760 <run_fsm+0x25c>)
 800357a:	f7fd ff01 	bl	8001380 <order_phases>
				 // exit to menu state
				 fsmstate->next_state = MENU_MODE;
				 fsmstate->ready = 0;
			 }

			 break;
 800357e:	e0e6      	b.n	800374e <run_fsm+0x24a>
			 else if(!comm_encoder_cal.done_cal){
 8003580:	4b75      	ldr	r3, [pc, #468]	; (8003758 <run_fsm+0x254>)
 8003582:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <run_fsm+0x98>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800358a:	4b74      	ldr	r3, [pc, #464]	; (800375c <run_fsm+0x258>)
 800358c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003590:	4a71      	ldr	r2, [pc, #452]	; (8003758 <run_fsm+0x254>)
 8003592:	4972      	ldr	r1, [pc, #456]	; (800375c <run_fsm+0x258>)
 8003594:	4872      	ldr	r0, [pc, #456]	; (8003760 <run_fsm+0x25c>)
 8003596:	f7fd ffcf 	bl	8001538 <calibrate_encoder>
			 break;
 800359a:	e0d8      	b.n	800374e <run_fsm+0x24a>
				 if (comm_encoder_cal.valid_cal == 1){
 800359c:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <run_fsm+0x254>)
 800359e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d15f      	bne.n	8003666 <run_fsm+0x162>
					 E_ZERO = comm_encoder_cal.ezero;
 80035a6:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <run_fsm+0x254>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4a6e      	ldr	r2, [pc, #440]	; (8003764 <run_fsm+0x260>)
 80035ac:	61d3      	str	r3, [r2, #28]
					 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80035ae:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <run_fsm+0x260>)
 80035b0:	69dc      	ldr	r4, [r3, #28]
 80035b2:	4b6b      	ldr	r3, [pc, #428]	; (8003760 <run_fsm+0x25c>)
 80035b4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <run_fsm+0x260>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	425b      	negs	r3, r3
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003768 <run_fsm+0x264>
 80035ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80035d6:	eeb0 0a47 	vmov.f32	s0, s14
 80035da:	f00c fd35 	bl	8010048 <fmodf>
 80035de:	eef0 7a40 	vmov.f32	s15, s0
 80035e2:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800376c <run_fsm+0x268>
 80035e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ea:	ee17 0a90 	vmov	r0, s15
 80035ee:	f7fc ffcb 	bl	8000588 <__aeabi_f2d>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4621      	mov	r1, r4
 80035f8:	485d      	ldr	r0, [pc, #372]	; (8003770 <run_fsm+0x26c>)
 80035fa:	f008 ffd9 	bl	800c5b0 <iprintf>
					 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80035fe:	4b58      	ldr	r3, [pc, #352]	; (8003760 <run_fsm+0x25c>)
 8003600:	4a55      	ldr	r2, [pc, #340]	; (8003758 <run_fsm+0x254>)
 8003602:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003606:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800360a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003612:	4618      	mov	r0, r3
 8003614:	f008 fb4c 	bl	800bcb0 <memcpy>
					 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003618:	4b52      	ldr	r3, [pc, #328]	; (8003764 <run_fsm+0x260>)
 800361a:	4a4f      	ldr	r2, [pc, #316]	; (8003758 <run_fsm+0x254>)
 800361c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003620:	3320      	adds	r3, #32
 8003622:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8003626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362a:	4618      	mov	r0, r3
 800362c:	f008 fb40 	bl	800bcb0 <memcpy>
					 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <run_fsm+0x270>)
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003638:	f002 fc42 	bl	8005ec0 <preference_writer_ready>
 800363c:	4603      	mov	r3, r0
 800363e:	f083 0301 	eor.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <run_fsm+0x14a>
 8003648:	484a      	ldr	r0, [pc, #296]	; (8003774 <run_fsm+0x270>)
 800364a:	f002 fc2a 	bl	8005ea2 <preference_writer_open>
					 preference_writer_flush(&prefs);
 800364e:	4849      	ldr	r0, [pc, #292]	; (8003774 <run_fsm+0x270>)
 8003650:	f002 fc44 	bl	8005edc <preference_writer_flush>
					 preference_writer_close(&prefs);
 8003654:	4847      	ldr	r0, [pc, #284]	; (8003774 <run_fsm+0x270>)
 8003656:	f002 fcbf 	bl	8005fd8 <preference_writer_close>
					 preference_writer_load(prefs);
 800365a:	4b46      	ldr	r3, [pc, #280]	; (8003774 <run_fsm+0x270>)
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003662:	f002 fc77 	bl	8005f54 <preference_writer_load>
				 fsmstate->next_state = MENU_MODE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	705a      	strb	r2, [r3, #1]
				 fsmstate->ready = 0;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	70da      	strb	r2, [r3, #3]
			 break;
 8003672:	e06c      	b.n	800374e <run_fsm+0x24a>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT) && (CAN_ACTIVE==1)){ // ONLY DO THIS IF CAN HAS BEEN RECIEVED
 8003674:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <run_fsm+0x260>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	dd16      	ble.n	80036aa <run_fsm+0x1a6>
 800367c:	4b37      	ldr	r3, [pc, #220]	; (800375c <run_fsm+0x258>)
 800367e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <run_fsm+0x260>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	429a      	cmp	r2, r3
 8003688:	dd0f      	ble.n	80036aa <run_fsm+0x1a6>
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <run_fsm+0x274>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10b      	bne.n	80036aa <run_fsm+0x1a6>
				 zero_commands(&controller);
 8003692:	4832      	ldr	r0, [pc, #200]	; (800375c <run_fsm+0x258>)
 8003694:	f7ff ff0e 	bl	80034b4 <zero_commands>
				 //drop into MENU MODE
				 fsmstate->next_state = MENU_MODE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	705a      	strb	r2, [r3, #1]
				 fsmstate->ready = 0;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	70da      	strb	r2, [r3, #3]
				 CAN_ACTIVE = 0;
 80036a4:	4b34      	ldr	r3, [pc, #208]	; (8003778 <run_fsm+0x274>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
			 }

			 /* commutate */
			 torque_control(&controller);
 80036aa:	482c      	ldr	r0, [pc, #176]	; (800375c <run_fsm+0x258>)
 80036ac:	f7ff feae 	bl	800340c <torque_control>
			 //field_weaken(&controller); // TODO: add field-weakening back at some point
			 commutate(&controller, &comm_encoder);
 80036b0:	492b      	ldr	r1, [pc, #172]	; (8003760 <run_fsm+0x25c>)
 80036b2:	482a      	ldr	r0, [pc, #168]	; (800375c <run_fsm+0x258>)
 80036b4:	f7ff fc96 	bl	8002fe4 <commutate>
			 controller.timeout ++;
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <run_fsm+0x258>)
 80036ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036be:	3301      	adds	r3, #1
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <run_fsm+0x258>)
 80036c2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 80036c6:	e042      	b.n	800374e <run_fsm+0x24a>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 if (fsmstate->print_iter == 800){
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80036d0:	d106      	bne.n	80036e0 <run_fsm+0x1dc>
				 ps_print(&comm_encoder);
 80036d2:	4823      	ldr	r0, [pc, #140]	; (8003760 <run_fsm+0x25c>)
 80036d4:	f002 fb7e 	bl	8005dd4 <ps_print>
//				 printf("Current A: %f, Current B: %f, Bus voltage: %f\n\r", controller.i_a, controller.i_b, controller.v_bus);
				 fsmstate->print_iter = 0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
			 } else {
				 fsmstate->print_iter +=1;
			 }
			 break;
 80036de:	e036      	b.n	800374e <run_fsm+0x24a>
				 fsmstate->print_iter +=1;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	605a      	str	r2, [r3, #4]
			 break;
 80036ea:	e030      	b.n	800374e <run_fsm+0x24a>
			 break;

		 case FAULT_MODE:
			 // depending on fault, display different LED blink patterns

			 if((controller.loop_count%5000)==0){
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <run_fsm+0x258>)
 80036ee:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <run_fsm+0x278>)
 80036f4:	fb83 1302 	smull	r1, r3, r3, r2
 80036f8:	12d9      	asrs	r1, r3, #11
 80036fa:	17d3      	asrs	r3, r2, #31
 80036fc:	1acb      	subs	r3, r1, r3
 80036fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <run_fsm+0x214>
				 HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 800370c:	2201      	movs	r2, #1
 800370e:	2120      	movs	r1, #32
 8003710:	481b      	ldr	r0, [pc, #108]	; (8003780 <run_fsm+0x27c>)
 8003712:	f004 ffdb 	bl	80086cc <HAL_GPIO_WritePin>
			 } else if ((controller.loop_count%5000)==2500){
				 HAL_GPIO_WritePin(LED, GPIO_PIN_RESET);
			 }

			 break;
 8003716:	e019      	b.n	800374c <run_fsm+0x248>
			 } else if ((controller.loop_count%5000)==2500){
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <run_fsm+0x258>)
 800371a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800371e:	4b17      	ldr	r3, [pc, #92]	; (800377c <run_fsm+0x278>)
 8003720:	fb83 1302 	smull	r1, r3, r3, r2
 8003724:	12d9      	asrs	r1, r3, #11
 8003726:	17d3      	asrs	r3, r2, #31
 8003728:	1acb      	subs	r3, r1, r3
 800372a:	f241 3188 	movw	r1, #5000	; 0x1388
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003738:	4293      	cmp	r3, r2
 800373a:	d107      	bne.n	800374c <run_fsm+0x248>
				 HAL_GPIO_WritePin(LED, GPIO_PIN_RESET);
 800373c:	2200      	movs	r2, #0
 800373e:	2120      	movs	r1, #32
 8003740:	480f      	ldr	r0, [pc, #60]	; (8003780 <run_fsm+0x27c>)
 8003742:	f004 ffc3 	bl	80086cc <HAL_GPIO_WritePin>
			 break;
 8003746:	e001      	b.n	800374c <run_fsm+0x248>
			 break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <run_fsm+0x24a>
			 break;
 800374c:	bf00      	nop
	 }

 }
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	bf00      	nop
 8003758:	20000ec0 	.word	0x20000ec0
 800375c:	20000850 	.word	0x20000850
 8003760:	20000b5c 	.word	0x20000b5c
 8003764:	2000043c 	.word	0x2000043c
 8003768:	49000000 	.word	0x49000000
 800376c:	40c90fdb 	.word	0x40c90fdb
 8003770:	08010854 	.word	0x08010854
 8003774:	2000083c 	.word	0x2000083c
 8003778:	200094b8 	.word	0x200094b8
 800377c:	68db8bad 	.word	0x68db8bad
 8003780:	40020800 	.word	0x40020800

08003784 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b07      	cmp	r3, #7
 8003792:	d865      	bhi.n	8003860 <fsm_enter_state+0xdc>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <fsm_enter_state+0x18>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037bd 	.word	0x080037bd
 80037a0:	08003807 	.word	0x08003807
 80037a4:	080037d9 	.word	0x080037d9
 80037a8:	08003861 	.word	0x08003861
 80037ac:	080037c3 	.word	0x080037c3
 80037b0:	080037c9 	.word	0x080037c9
 80037b4:	08003861 	.word	0x08003861
 80037b8:	08003859 	.word	0x08003859
			case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 80037bc:	f000 f9c0 	bl	8003b40 <enter_menu_state>
				break;
 80037c0:	e04e      	b.n	8003860 <fsm_enter_state+0xdc>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 80037c2:	f000 f9f1 	bl	8003ba8 <enter_setup_state>
				break;
 80037c6:	e04b      	b.n	8003860 <fsm_enter_state+0xdc>
			case ENCODER_MODE:
				//printf("Entering Encoder Mode\r\n");
				fsmstate->print_iter = 0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	605a      	str	r2, [r3, #4]
				comm_encoder.filt_enable = 0;
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <fsm_enter_state+0xe4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				break;
 80037d6:	e043      	b.n	8003860 <fsm_enter_state+0xdc>
			case MOTOR_MODE:
				printf("\n\r\n\r Entering Motor Mode\r\n");
 80037d8:	4824      	ldr	r0, [pc, #144]	; (800386c <fsm_enter_state+0xe8>)
 80037da:	f008 ff6f 	bl	800c6bc <puts>
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80037de:	2201      	movs	r2, #1
 80037e0:	2120      	movs	r1, #32
 80037e2:	4823      	ldr	r0, [pc, #140]	; (8003870 <fsm_enter_state+0xec>)
 80037e4:	f004 ff72 	bl	80086cc <HAL_GPIO_WritePin>
				reset_foc(&controller);
 80037e8:	4822      	ldr	r0, [pc, #136]	; (8003874 <fsm_enter_state+0xf0>)
 80037ea:	f7ff fb87 	bl	8002efc <reset_foc>
				drv_enable_gd(drv);
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <fsm_enter_state+0xf4>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4611      	mov	r1, r2
 80037f4:	889a      	ldrh	r2, [r3, #4]
 80037f6:	2300      	movs	r3, #0
 80037f8:	f362 030f 	bfi	r3, r2, #0, #16
 80037fc:	4608      	mov	r0, r1
 80037fe:	4619      	mov	r1, r3
 8003800:	f7fe fdbd 	bl	800237e <drv_enable_gd>
				break;
 8003804:	e02c      	b.n	8003860 <fsm_enter_state+0xdc>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */
				comm_encoder_cal.done_cal = 0;
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <fsm_enter_state+0xf8>)
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <fsm_enter_state+0xf8>)
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.valid_cal = 0;
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <fsm_enter_state+0xf8>)
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				comm_encoder_cal.started = 0;
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <fsm_enter_state+0xf8>)
 8003820:	2200      	movs	r2, #0
 8003822:	741a      	strb	r2, [r3, #16]
				// reset electrical zero and encoder filter
				comm_encoder.e_zero = 0;
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <fsm_enter_state+0xe4>)
 8003826:	2200      	movs	r2, #0
 8003828:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
				comm_encoder.filt_enable = 0;
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <fsm_enter_state+0xe4>)
 800382e:	2200      	movs	r2, #0
 8003830:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				// clear lookup table
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003838:	2100      	movs	r1, #0
 800383a:	4811      	ldr	r0, [pc, #68]	; (8003880 <fsm_enter_state+0xfc>)
 800383c:	f008 fa46 	bl	800bccc <memset>
				drv_enable_gd(drv);
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <fsm_enter_state+0xf4>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4611      	mov	r1, r2
 8003846:	889a      	ldrh	r2, [r3, #4]
 8003848:	2300      	movs	r3, #0
 800384a:	f362 030f 	bfi	r3, r2, #0, #16
 800384e:	4608      	mov	r0, r1
 8003850:	4619      	mov	r1, r3
 8003852:	f7fe fd94 	bl	800237e <drv_enable_gd>
				break;
 8003856:	e003      	b.n	8003860 <fsm_enter_state+0xdc>
			case FAULT_MODE:
				printf("\n\r\n\r Entering Fault Mode\n\r");
 8003858:	480a      	ldr	r0, [pc, #40]	; (8003884 <fsm_enter_state+0x100>)
 800385a:	f008 fea9 	bl	800c5b0 <iprintf>
				break;
 800385e:	bf00      	nop

		}
 }
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000b5c 	.word	0x20000b5c
 800386c:	08010868 	.word	0x08010868
 8003870:	40020800 	.word	0x40020800
 8003874:	20000850 	.word	0x20000850
 8003878:	20000eb8 	.word	0x20000eb8
 800387c:	20000ec0 	.word	0x20000ec0
 8003880:	20000cb4 	.word	0x20000cb4
 8003884:	08010884 	.word	0x08010884

08003888 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b05      	cmp	r3, #5
 8003896:	d857      	bhi.n	8003948 <fsm_exit_state+0xc0>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <fsm_exit_state+0x18>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038b9 	.word	0x080038b9
 80038a4:	0800391b 	.word	0x0800391b
 80038a8:	080038e1 	.word	0x080038e1
 80038ac:	08003949 	.word	0x08003949
 80038b0:	080038c1 	.word	0x080038c1
 80038b4:	080038c9 	.word	0x080038c9
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	70da      	strb	r2, [r3, #3]
				break;
 80038be:	e043      	b.n	8003948 <fsm_exit_state+0xc0>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	70da      	strb	r2, [r3, #3]
				break;
 80038c6:	e03f      	b.n	8003948 <fsm_exit_state+0xc0>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				if (EN_ENC_FILTER == 1){
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <fsm_exit_state+0xc8>)
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d103      	bne.n	80038d8 <fsm_exit_state+0x50>
					comm_encoder.filt_enable = 1;
 80038d0:	4b20      	ldr	r3, [pc, #128]	; (8003954 <fsm_exit_state+0xcc>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
				fsmstate->ready = 1;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	70da      	strb	r2, [r3, #3]
				break;
 80038de:	e033      	b.n	8003948 <fsm_exit_state+0xc0>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
				fsmstate->ready = 1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	70da      	strb	r2, [r3, #3]
				drv_disable_gd(drv);
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <fsm_exit_state+0xd0>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4611      	mov	r1, r2
 80038ec:	889a      	ldrh	r2, [r3, #4]
 80038ee:	2300      	movs	r3, #0
 80038f0:	f362 030f 	bfi	r3, r2, #0, #16
 80038f4:	4608      	mov	r0, r1
 80038f6:	4619      	mov	r1, r3
 80038f8:	f7fe fd5b 	bl	80023b2 <drv_disable_gd>
				reset_foc(&controller);
 80038fc:	4817      	ldr	r0, [pc, #92]	; (800395c <fsm_exit_state+0xd4>)
 80038fe:	f7ff fafd 	bl	8002efc <reset_foc>
				printf("\n\r Leaving Motor Mode\r\n");
 8003902:	4817      	ldr	r0, [pc, #92]	; (8003960 <fsm_exit_state+0xd8>)
 8003904:	f008 feda 	bl	800c6bc <puts>
				HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8003908:	2200      	movs	r2, #0
 800390a:	2120      	movs	r1, #32
 800390c:	4815      	ldr	r0, [pc, #84]	; (8003964 <fsm_exit_state+0xdc>)
 800390e:	f004 fedd 	bl	80086cc <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8003912:	4812      	ldr	r0, [pc, #72]	; (800395c <fsm_exit_state+0xd4>)
 8003914:	f7ff fdce 	bl	80034b4 <zero_commands>
				break;
 8003918:	e016      	b.n	8003948 <fsm_exit_state+0xc0>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <fsm_exit_state+0xd0>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4611      	mov	r1, r2
 8003920:	889a      	ldrh	r2, [r3, #4]
 8003922:	2300      	movs	r3, #0
 8003924:	f362 030f 	bfi	r3, r2, #0, #16
 8003928:	4608      	mov	r0, r1
 800392a:	4619      	mov	r1, r3
 800392c:	f7fe fd41 	bl	80023b2 <drv_disable_gd>
				if (EN_ENC_FILTER == 1){
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <fsm_exit_state+0xc8>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d103      	bne.n	8003940 <fsm_exit_state+0xb8>
					comm_encoder.filt_enable = 1;
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <fsm_exit_state+0xcc>)
 800393a:	2201      	movs	r2, #1
 800393c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	70da      	strb	r2, [r3, #3]
				break;
 8003946:	bf00      	nop
		}

 }
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	2000043c 	.word	0x2000043c
 8003954:	20000b5c 	.word	0x20000b5c
 8003958:	20000eb8 	.word	0x20000eb8
 800395c:	20000850 	.word	0x20000850
 8003960:	080108a0 	.word	0x080108a0
 8003964:	40020800 	.word	0x40020800

08003968 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af02      	add	r7, sp, #8
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	2b1b      	cmp	r3, #27
 8003978:	d10d      	bne.n	8003996 <update_fsm+0x2e>
		fsmstate->next_state = MENU_MODE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	70da      	strb	r2, [r3, #3]
		if (fsmstate->state == MENU_MODE){
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 80c6 	bne.w	8003b1c <update_fsm+0x1b4>
			enter_menu_state(); // re-print menu
 8003990:	f000 f8d6 	bl	8003b40 <enter_menu_state>
		}
		return;
 8003994:	e0c2      	b.n	8003b1c <update_fsm+0x1b4>
	}
	switch(fsmstate->state){
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b05      	cmp	r3, #5
 800399c:	f200 80c1 	bhi.w	8003b22 <update_fsm+0x1ba>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <update_fsm+0x40>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039c1 	.word	0x080039c1
 80039ac:	08003b23 	.word	0x08003b23
 80039b0:	08003b23 	.word	0x08003b23
 80039b4:	08003b23 	.word	0x08003b23
 80039b8:	08003ae3 	.word	0x08003ae3
 80039bc:	08003b23 	.word	0x08003b23
		case MENU_MODE:
			switch (fsm_input){
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	3b63      	subs	r3, #99	; 0x63
 80039c4:	2b17      	cmp	r3, #23
 80039c6:	f200 80ab 	bhi.w	8003b20 <update_fsm+0x1b8>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <update_fsm+0x68>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	08003a31 	.word	0x08003a31
 80039d4:	08003b21 	.word	0x08003b21
 80039d8:	08003a4d 	.word	0x08003a4d
 80039dc:	08003b21 	.word	0x08003b21
 80039e0:	08003b21 	.word	0x08003b21
 80039e4:	08003b21 	.word	0x08003b21
 80039e8:	08003b21 	.word	0x08003b21
 80039ec:	08003b21 	.word	0x08003b21
 80039f0:	08003b21 	.word	0x08003b21
 80039f4:	08003b21 	.word	0x08003b21
 80039f8:	08003a3f 	.word	0x08003a3f
 80039fc:	08003b21 	.word	0x08003b21
 8003a00:	08003b21 	.word	0x08003b21
 8003a04:	08003ad1 	.word	0x08003ad1
 8003a08:	08003b21 	.word	0x08003b21
 8003a0c:	08003b21 	.word	0x08003b21
 8003a10:	08003a5b 	.word	0x08003a5b
 8003a14:	08003b21 	.word	0x08003b21
 8003a18:	08003b21 	.word	0x08003b21
 8003a1c:	08003b21 	.word	0x08003b21
 8003a20:	08003b21 	.word	0x08003b21
 8003a24:	08003b21 	.word	0x08003b21
 8003a28:	08003b21 	.word	0x08003b21
 8003a2c:	08003a69 	.word	0x08003a69
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	70da      	strb	r2, [r3, #3]
					break;
 8003a3c:	e050      	b.n	8003ae0 <update_fsm+0x178>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	70da      	strb	r2, [r3, #3]
					break;
 8003a4a:	e049      	b.n	8003ae0 <update_fsm+0x178>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2205      	movs	r2, #5
 8003a50:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	70da      	strb	r2, [r3, #3]
					break;
 8003a58:	e042      	b.n	8003ae0 <update_fsm+0x178>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	70da      	strb	r2, [r3, #3]
					break;
 8003a66:	e03b      	b.n	8003ae0 <update_fsm+0x178>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <update_fsm+0x1c0>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
					ps_sample(&comm_encoder, DT);
 8003a70:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003b2c <update_fsm+0x1c4>
 8003a74:	482c      	ldr	r0, [pc, #176]	; (8003b28 <update_fsm+0x1c0>)
 8003a76:	f001 ff7d 	bl	8005974 <ps_sample>
					int zero_count = comm_encoder.count;
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <update_fsm+0x1c0>)
 8003a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a80:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003a82:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <update_fsm+0x1c8>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6193      	str	r3, [r2, #24]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <update_fsm+0x1cc>)
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	9200      	str	r2, [sp, #0]
 8003a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a90:	f002 fa16 	bl	8005ec0 <preference_writer_ready>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f083 0301 	eor.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <update_fsm+0x13e>
 8003aa0:	4824      	ldr	r0, [pc, #144]	; (8003b34 <update_fsm+0x1cc>)
 8003aa2:	f002 f9fe 	bl	8005ea2 <preference_writer_open>
					preference_writer_flush(&prefs);
 8003aa6:	4823      	ldr	r0, [pc, #140]	; (8003b34 <update_fsm+0x1cc>)
 8003aa8:	f002 fa18 	bl	8005edc <preference_writer_flush>
					preference_writer_close(&prefs);
 8003aac:	4821      	ldr	r0, [pc, #132]	; (8003b34 <update_fsm+0x1cc>)
 8003aae:	f002 fa93 	bl	8005fd8 <preference_writer_close>
					preference_writer_load(prefs);
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <update_fsm+0x1cc>)
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	9200      	str	r2, [sp, #0]
 8003ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aba:	f002 fa4b 	bl	8005f54 <preference_writer_load>
					printf("\n\r\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <update_fsm+0x1c8>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	481c      	ldr	r0, [pc, #112]	; (8003b38 <update_fsm+0x1d0>)
 8003ac6:	f008 fd73 	bl	800c5b0 <iprintf>
					enter_menu_state(); // re-print menu
 8003aca:	f000 f839 	bl	8003b40 <enter_menu_state>
					break;
 8003ace:	e007      	b.n	8003ae0 <update_fsm+0x178>
				case RESET_CMD:
					reset_flash_values();
 8003ad0:	f000 ff18 	bl	8004904 <reset_flash_values>
					printf("\n\r\n\r Flash values have been reset. Power cycle to be safe! \n\r\n\r");
 8003ad4:	4819      	ldr	r0, [pc, #100]	; (8003b3c <update_fsm+0x1d4>)
 8003ad6:	f008 fd6b 	bl	800c5b0 <iprintf>
					enter_menu_state(); // re-print menu
 8003ada:	f000 f831 	bl	8003b40 <enter_menu_state>
					break;
 8003ade:	bf00      	nop
				}
			break;
 8003ae0:	e01e      	b.n	8003b20 <update_fsm+0x1b8>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	2b0d      	cmp	r3, #13
 8003ae6:	d103      	bne.n	8003af0 <update_fsm+0x188>
				process_user_input(fsmstate);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fb27 	bl	800413c <process_user_input>
				break;
 8003aee:	e018      	b.n	8003b22 <update_fsm+0x1ba>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7c1b      	ldrb	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <update_fsm+0x198>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	745a      	strb	r2, [r3, #17]
 8003afe:	e006      	b.n	8003b0e <update_fsm+0x1a6>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7c1b      	ldrb	r3, [r3, #16]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	721a      	strb	r2, [r3, #8]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7c1b      	ldrb	r3, [r3, #16]
 8003b12:	3301      	adds	r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	741a      	strb	r2, [r3, #16]
			/* If enter is typed, process user input */

			break;
 8003b1a:	e002      	b.n	8003b22 <update_fsm+0x1ba>
		return;
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <update_fsm+0x1ba>
			break;
 8003b20:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000b5c 	.word	0x20000b5c
 8003b2c:	3851b717 	.word	0x3851b717
 8003b30:	2000043c 	.word	0x2000043c
 8003b34:	2000083c 	.word	0x2000083c
 8003b38:	080108b8 	.word	0x080108b8
 8003b3c:	080108e0 	.word	0x080108e0

08003b40 <enter_menu_state>:


 void enter_menu_state(void){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003b44:	480e      	ldr	r0, [pc, #56]	; (8003b80 <enter_menu_state+0x40>)
 8003b46:	f008 fd33 	bl	800c5b0 <iprintf>
	    printf(" Commands:\n\r");
 8003b4a:	480e      	ldr	r0, [pc, #56]	; (8003b84 <enter_menu_state+0x44>)
 8003b4c:	f008 fd30 	bl	800c5b0 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003b50:	480d      	ldr	r0, [pc, #52]	; (8003b88 <enter_menu_state+0x48>)
 8003b52:	f008 fd2d 	bl	800c5b0 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003b56:	480d      	ldr	r0, [pc, #52]	; (8003b8c <enter_menu_state+0x4c>)
 8003b58:	f008 fd2a 	bl	800c5b0 <iprintf>
	    printf(" s - Setup\n\r");
 8003b5c:	480c      	ldr	r0, [pc, #48]	; (8003b90 <enter_menu_state+0x50>)
 8003b5e:	f008 fd27 	bl	800c5b0 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003b62:	480c      	ldr	r0, [pc, #48]	; (8003b94 <enter_menu_state+0x54>)
 8003b64:	f008 fd24 	bl	800c5b0 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003b68:	480b      	ldr	r0, [pc, #44]	; (8003b98 <enter_menu_state+0x58>)
 8003b6a:	f008 fd21 	bl	800c5b0 <iprintf>
	    printf(" p - !!! Reset Flash Memory Values !!!\n\r");
 8003b6e:	480b      	ldr	r0, [pc, #44]	; (8003b9c <enter_menu_state+0x5c>)
 8003b70:	f008 fd1e 	bl	800c5b0 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003b74:	480a      	ldr	r0, [pc, #40]	; (8003ba0 <enter_menu_state+0x60>)
 8003b76:	f008 fd1b 	bl	800c5b0 <iprintf>

	    //gpio.led->write(0);
 }
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	08010920 	.word	0x08010920
 8003b84:	08010928 	.word	0x08010928
 8003b88:	08010938 	.word	0x08010938
 8003b8c:	0801094c 	.word	0x0801094c
 8003b90:	08010968 	.word	0x08010968
 8003b94:	08010978 	.word	0x08010978
 8003b98:	08010990 	.word	0x08010990
 8003b9c:	080109ac 	.word	0x080109ac
 8003ba0:	080109d8 	.word	0x080109d8
 8003ba4:	00000000 	.word	0x00000000

08003ba8 <enter_setup_state>:

 void enter_setup_state(void){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003bae:	4898      	ldr	r0, [pc, #608]	; (8003e10 <enter_setup_state+0x268>)
 8003bb0:	f008 fcfe 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-29s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003bb4:	4b97      	ldr	r3, [pc, #604]	; (8003e14 <enter_setup_state+0x26c>)
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	4b97      	ldr	r3, [pc, #604]	; (8003e18 <enter_setup_state+0x270>)
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4b97      	ldr	r3, [pc, #604]	; (8003e1c <enter_setup_state+0x274>)
 8003bbe:	4a98      	ldr	r2, [pc, #608]	; (8003e20 <enter_setup_state+0x278>)
 8003bc0:	4998      	ldr	r1, [pc, #608]	; (8003e24 <enter_setup_state+0x27c>)
 8003bc2:	4899      	ldr	r0, [pc, #612]	; (8003e28 <enter_setup_state+0x280>)
 8003bc4:	f008 fcf4 	bl	800c5b0 <iprintf>

	    printf("\r\n Motor:\r\n");
 8003bc8:	4898      	ldr	r0, [pc, #608]	; (8003e2c <enter_setup_state+0x284>)
 8003bca:	f008 fd77 	bl	800c6bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Encoder Mech Zero", "0", "524288", M_ZERO);
 8003bce:	4b98      	ldr	r3, [pc, #608]	; (8003e30 <enter_setup_state+0x288>)
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	4b97      	ldr	r3, [pc, #604]	; (8003e34 <enter_setup_state+0x28c>)
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	4b97      	ldr	r3, [pc, #604]	; (8003e38 <enter_setup_state+0x290>)
 8003bda:	4a98      	ldr	r2, [pc, #608]	; (8003e3c <enter_setup_state+0x294>)
 8003bdc:	4998      	ldr	r1, [pc, #608]	; (8003e40 <enter_setup_state+0x298>)
 8003bde:	4899      	ldr	r0, [pc, #612]	; (8003e44 <enter_setup_state+0x29c>)
 8003be0:	f008 fce6 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Encoder Elec Zero", "0", "524288", E_ZERO);
 8003be4:	4b92      	ldr	r3, [pc, #584]	; (8003e30 <enter_setup_state+0x288>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	4b92      	ldr	r3, [pc, #584]	; (8003e34 <enter_setup_state+0x28c>)
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	4b92      	ldr	r3, [pc, #584]	; (8003e38 <enter_setup_state+0x290>)
 8003bf0:	4a95      	ldr	r2, [pc, #596]	; (8003e48 <enter_setup_state+0x2a0>)
 8003bf2:	4993      	ldr	r1, [pc, #588]	; (8003e40 <enter_setup_state+0x298>)
 8003bf4:	4893      	ldr	r0, [pc, #588]	; (8003e44 <enter_setup_state+0x29c>)
 8003bf6:	f008 fcdb 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003bfa:	4b94      	ldr	r3, [pc, #592]	; (8003e4c <enter_setup_state+0x2a4>)
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc fcc2 	bl	8000588 <__aeabi_f2d>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c0c:	4b8c      	ldr	r3, [pc, #560]	; (8003e40 <enter_setup_state+0x298>)
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4b89      	ldr	r3, [pc, #548]	; (8003e38 <enter_setup_state+0x290>)
 8003c12:	4a8f      	ldr	r2, [pc, #572]	; (8003e50 <enter_setup_state+0x2a8>)
 8003c14:	498f      	ldr	r1, [pc, #572]	; (8003e54 <enter_setup_state+0x2ac>)
 8003c16:	4890      	ldr	r0, [pc, #576]	; (8003e58 <enter_setup_state+0x2b0>)
 8003c18:	f008 fcca 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Output Torque Constant (N-m/A)", "0", "-", KT_OUT);
 8003c1c:	4b8b      	ldr	r3, [pc, #556]	; (8003e4c <enter_setup_state+0x2a4>)
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fcb1 	bl	8000588 <__aeabi_f2d>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c2e:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <enter_setup_state+0x298>)
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4b81      	ldr	r3, [pc, #516]	; (8003e38 <enter_setup_state+0x290>)
 8003c34:	4a89      	ldr	r2, [pc, #548]	; (8003e5c <enter_setup_state+0x2b4>)
 8003c36:	498a      	ldr	r1, [pc, #552]	; (8003e60 <enter_setup_state+0x2b8>)
 8003c38:	488a      	ldr	r0, [pc, #552]	; (8003e64 <enter_setup_state+0x2bc>)
 8003c3a:	f008 fcb9 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "o", "Motor Phase Resistance (ohms)", "0.0", "10.0", R_PHASE);
 8003c3e:	4b83      	ldr	r3, [pc, #524]	; (8003e4c <enter_setup_state+0x2a4>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fca0 	bl	8000588 <__aeabi_f2d>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c50:	4b85      	ldr	r3, [pc, #532]	; (8003e68 <enter_setup_state+0x2c0>)
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4b85      	ldr	r3, [pc, #532]	; (8003e6c <enter_setup_state+0x2c4>)
 8003c56:	4a86      	ldr	r2, [pc, #536]	; (8003e70 <enter_setup_state+0x2c8>)
 8003c58:	4986      	ldr	r1, [pc, #536]	; (8003e74 <enter_setup_state+0x2cc>)
 8003c5a:	4887      	ldr	r0, [pc, #540]	; (8003e78 <enter_setup_state+0x2d0>)
 8003c5c:	f008 fca8 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "j", "D-axis inductance (H)", "0", "0.1", L_D);
 8003c60:	4b7a      	ldr	r3, [pc, #488]	; (8003e4c <enter_setup_state+0x2a4>)
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fc8f 	bl	8000588 <__aeabi_f2d>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c72:	4b82      	ldr	r3, [pc, #520]	; (8003e7c <enter_setup_state+0x2d4>)
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	4b70      	ldr	r3, [pc, #448]	; (8003e38 <enter_setup_state+0x290>)
 8003c78:	4a81      	ldr	r2, [pc, #516]	; (8003e80 <enter_setup_state+0x2d8>)
 8003c7a:	4982      	ldr	r1, [pc, #520]	; (8003e84 <enter_setup_state+0x2dc>)
 8003c7c:	487e      	ldr	r0, [pc, #504]	; (8003e78 <enter_setup_state+0x2d0>)
 8003c7e:	f008 fc97 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "e", "Q-axis inductance (H)", "0", "0.1", L_Q);
 8003c82:	4b72      	ldr	r3, [pc, #456]	; (8003e4c <enter_setup_state+0x2a4>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc7e 	bl	8000588 <__aeabi_f2d>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c94:	4b79      	ldr	r3, [pc, #484]	; (8003e7c <enter_setup_state+0x2d4>)
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <enter_setup_state+0x290>)
 8003c9a:	4a7b      	ldr	r2, [pc, #492]	; (8003e88 <enter_setup_state+0x2e0>)
 8003c9c:	497b      	ldr	r1, [pc, #492]	; (8003e8c <enter_setup_state+0x2e4>)
 8003c9e:	4876      	ldr	r0, [pc, #472]	; (8003e78 <enter_setup_state+0x2d0>)
 8003ca0:	f008 fc86 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "n", "Number of Pole Pairs (NPP)", "0", "40", PPAIRS);
 8003ca4:	4b69      	ldr	r3, [pc, #420]	; (8003e4c <enter_setup_state+0x2a4>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc6d 	bl	8000588 <__aeabi_f2d>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <enter_setup_state+0x2e8>)
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	4b5f      	ldr	r3, [pc, #380]	; (8003e38 <enter_setup_state+0x290>)
 8003cbc:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <enter_setup_state+0x2ec>)
 8003cbe:	4976      	ldr	r1, [pc, #472]	; (8003e98 <enter_setup_state+0x2f0>)
 8003cc0:	486d      	ldr	r0, [pc, #436]	; (8003e78 <enter_setup_state+0x2d0>)
 8003cc2:	f008 fc75 	bl	800c5b0 <iprintf>

	    printf("\r\n Control:\r\n");
 8003cc6:	4875      	ldr	r0, [pc, #468]	; (8003e9c <enter_setup_state+0x2f4>)
 8003cc8:	f008 fcf8 	bl	800c6bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "y", "Encoder Linearization Enable", "0", "1", EN_ENC_LINEARIZE);
 8003ccc:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <enter_setup_state+0x288>)
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	4b73      	ldr	r3, [pc, #460]	; (8003ea0 <enter_setup_state+0x2f8>)
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4b58      	ldr	r3, [pc, #352]	; (8003e38 <enter_setup_state+0x290>)
 8003cd8:	4a72      	ldr	r2, [pc, #456]	; (8003ea4 <enter_setup_state+0x2fc>)
 8003cda:	4973      	ldr	r1, [pc, #460]	; (8003ea8 <enter_setup_state+0x300>)
 8003cdc:	4859      	ldr	r0, [pc, #356]	; (8003e44 <enter_setup_state+0x29c>)
 8003cde:	f008 fc67 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "z", "Encoder Filter Enable", "0", "1", EN_ENC_FILTER);
 8003ce2:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <enter_setup_state+0x288>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	4b6d      	ldr	r3, [pc, #436]	; (8003ea0 <enter_setup_state+0x2f8>)
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	4b52      	ldr	r3, [pc, #328]	; (8003e38 <enter_setup_state+0x290>)
 8003cee:	4a6f      	ldr	r2, [pc, #444]	; (8003eac <enter_setup_state+0x304>)
 8003cf0:	496f      	ldr	r1, [pc, #444]	; (8003eb0 <enter_setup_state+0x308>)
 8003cf2:	4854      	ldr	r0, [pc, #336]	; (8003e44 <enter_setup_state+0x29c>)
 8003cf4:	f008 fc5c 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Phase Order", "0", "1", PHASE_ORDER);
 8003cf8:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <enter_setup_state+0x288>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <enter_setup_state+0x2f8>)
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <enter_setup_state+0x290>)
 8003d04:	4a6b      	ldr	r2, [pc, #428]	; (8003eb4 <enter_setup_state+0x30c>)
 8003d06:	494e      	ldr	r1, [pc, #312]	; (8003e40 <enter_setup_state+0x298>)
 8003d08:	484e      	ldr	r0, [pc, #312]	; (8003e44 <enter_setup_state+0x29c>)
 8003d0a:	f008 fc51 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller K_SCALE", "-", "-", K_SCALE); // TODO: decide if these should be in flash or not
 8003d0e:	a33c      	add	r3, pc, #240	; (adr r3, 8003e00 <enter_setup_state+0x258>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d18:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <enter_setup_state+0x298>)
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <enter_setup_state+0x298>)
 8003d1e:	4a66      	ldr	r2, [pc, #408]	; (8003eb8 <enter_setup_state+0x310>)
 8003d20:	4947      	ldr	r1, [pc, #284]	; (8003e40 <enter_setup_state+0x298>)
 8003d22:	4855      	ldr	r0, [pc, #340]	; (8003e78 <enter_setup_state+0x2d0>)
 8003d24:	f008 fc44 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller KI_D", "-", "-", KI_D);
 8003d28:	a337      	add	r3, pc, #220	; (adr r3, 8003e08 <enter_setup_state+0x260>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d32:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <enter_setup_state+0x298>)
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	4b42      	ldr	r3, [pc, #264]	; (8003e40 <enter_setup_state+0x298>)
 8003d38:	4a60      	ldr	r2, [pc, #384]	; (8003ebc <enter_setup_state+0x314>)
 8003d3a:	4941      	ldr	r1, [pc, #260]	; (8003e40 <enter_setup_state+0x298>)
 8003d3c:	484e      	ldr	r0, [pc, #312]	; (8003e78 <enter_setup_state+0x2d0>)
 8003d3e:	f008 fc37 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller KI_Q", "-", "-", KI_Q);
 8003d42:	a331      	add	r3, pc, #196	; (adr r3, 8003e08 <enter_setup_state+0x260>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d4c:	4b3c      	ldr	r3, [pc, #240]	; (8003e40 <enter_setup_state+0x298>)
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <enter_setup_state+0x298>)
 8003d52:	4a5b      	ldr	r2, [pc, #364]	; (8003ec0 <enter_setup_state+0x318>)
 8003d54:	493a      	ldr	r1, [pc, #232]	; (8003e40 <enter_setup_state+0x298>)
 8003d56:	4848      	ldr	r0, [pc, #288]	; (8003e78 <enter_setup_state+0x2d0>)
 8003d58:	f008 fc2a 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <enter_setup_state+0x2a4>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fc11 	bl	8000588 <__aeabi_f2d>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d6e:	4b55      	ldr	r3, [pc, #340]	; (8003ec4 <enter_setup_state+0x31c>)
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	4b55      	ldr	r3, [pc, #340]	; (8003ec8 <enter_setup_state+0x320>)
 8003d74:	4a55      	ldr	r2, [pc, #340]	; (8003ecc <enter_setup_state+0x324>)
 8003d76:	4956      	ldr	r1, [pc, #344]	; (8003ed0 <enter_setup_state+0x328>)
 8003d78:	4856      	ldr	r0, [pc, #344]	; (8003ed4 <enter_setup_state+0x32c>)
 8003d7a:	f008 fc19 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003d7e:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <enter_setup_state+0x2a4>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fc00 	bl	8000588 <__aeabi_f2d>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d90:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <enter_setup_state+0x330>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <enter_setup_state+0x2c4>)
 8003d96:	4a51      	ldr	r2, [pc, #324]	; (8003edc <enter_setup_state+0x334>)
 8003d98:	4951      	ldr	r1, [pc, #324]	; (8003ee0 <enter_setup_state+0x338>)
 8003d9a:	484e      	ldr	r0, [pc, #312]	; (8003ed4 <enter_setup_state+0x32c>)
 8003d9c:	f008 fc08 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003da0:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <enter_setup_state+0x2a4>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc fbef 	bl	8000588 <__aeabi_f2d>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003db2:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <enter_setup_state+0x33c>)
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <enter_setup_state+0x2c4>)
 8003db8:	4a4b      	ldr	r2, [pc, #300]	; (8003ee8 <enter_setup_state+0x340>)
 8003dba:	494c      	ldr	r1, [pc, #304]	; (8003eec <enter_setup_state+0x344>)
 8003dbc:	4845      	ldr	r0, [pc, #276]	; (8003ed4 <enter_setup_state+0x32c>)
 8003dbe:	f008 fbf7 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003dc2:	4b22      	ldr	r3, [pc, #136]	; (8003e4c <enter_setup_state+0x2a4>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fbde 	bl	8000588 <__aeabi_f2d>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dd4:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <enter_setup_state+0x348>)
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <enter_setup_state+0x2c4>)
 8003dda:	4a46      	ldr	r2, [pc, #280]	; (8003ef4 <enter_setup_state+0x34c>)
 8003ddc:	4946      	ldr	r1, [pc, #280]	; (8003ef8 <enter_setup_state+0x350>)
 8003dde:	483d      	ldr	r0, [pc, #244]	; (8003ed4 <enter_setup_state+0x32c>)
 8003de0:	f008 fbe6 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <enter_setup_state+0x2a4>)
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fbcd 	bl	8000588 <__aeabi_f2d>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <enter_setup_state+0x354>)
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <enter_setup_state+0x2c4>)
 8003dfc:	e080      	b.n	8003f00 <enter_setup_state+0x358>
 8003dfe:	bf00      	nop
 8003e00:	40000000 	.word	0x40000000
 8003e04:	3f216ebd 	.word	0x3f216ebd
 8003e08:	60000000 	.word	0x60000000
 8003e0c:	3fa318fc 	.word	0x3fa318fc
 8003e10:	080109f0 	.word	0x080109f0
 8003e14:	08010a44 	.word	0x08010a44
 8003e18:	08010a54 	.word	0x08010a54
 8003e1c:	08010a0c 	.word	0x08010a0c
 8003e20:	08010a10 	.word	0x08010a10
 8003e24:	08010a1c 	.word	0x08010a1c
 8003e28:	08010a24 	.word	0x08010a24
 8003e2c:	08010a58 	.word	0x08010a58
 8003e30:	2000043c 	.word	0x2000043c
 8003e34:	08010a9c 	.word	0x08010a9c
 8003e38:	08010a64 	.word	0x08010a64
 8003e3c:	08010a68 	.word	0x08010a68
 8003e40:	08010a7c 	.word	0x08010a7c
 8003e44:	08010a80 	.word	0x08010a80
 8003e48:	08010aa4 	.word	0x08010aa4
 8003e4c:	2000033c 	.word	0x2000033c
 8003e50:	08010ab8 	.word	0x08010ab8
 8003e54:	08010ac4 	.word	0x08010ac4
 8003e58:	08010ac8 	.word	0x08010ac8
 8003e5c:	08010ae8 	.word	0x08010ae8
 8003e60:	08010b08 	.word	0x08010b08
 8003e64:	08010b0c 	.word	0x08010b0c
 8003e68:	08010b70 	.word	0x08010b70
 8003e6c:	08010b2c 	.word	0x08010b2c
 8003e70:	08010b30 	.word	0x08010b30
 8003e74:	08010b50 	.word	0x08010b50
 8003e78:	08010b54 	.word	0x08010b54
 8003e7c:	08010b94 	.word	0x08010b94
 8003e80:	08010b78 	.word	0x08010b78
 8003e84:	08010b90 	.word	0x08010b90
 8003e88:	08010b98 	.word	0x08010b98
 8003e8c:	08010bb0 	.word	0x08010bb0
 8003e90:	08010bd4 	.word	0x08010bd4
 8003e94:	08010bb4 	.word	0x08010bb4
 8003e98:	08010bd0 	.word	0x08010bd0
 8003e9c:	08010bd8 	.word	0x08010bd8
 8003ea0:	08010c0c 	.word	0x08010c0c
 8003ea4:	08010be8 	.word	0x08010be8
 8003ea8:	08010c08 	.word	0x08010c08
 8003eac:	08010c10 	.word	0x08010c10
 8003eb0:	08010c28 	.word	0x08010c28
 8003eb4:	08010c2c 	.word	0x08010c2c
 8003eb8:	08010c38 	.word	0x08010c38
 8003ebc:	08010c54 	.word	0x08010c54
 8003ec0:	08010c6c 	.word	0x08010c6c
 8003ec4:	08010cc4 	.word	0x08010cc4
 8003ec8:	08010c84 	.word	0x08010c84
 8003ecc:	08010c88 	.word	0x08010c88
 8003ed0:	08010ca0 	.word	0x08010ca0
 8003ed4:	08010ca4 	.word	0x08010ca4
 8003ed8:	08010ce4 	.word	0x08010ce4
 8003edc:	08010ccc 	.word	0x08010ccc
 8003ee0:	08010ce0 	.word	0x08010ce0
 8003ee4:	08010d08 	.word	0x08010d08
 8003ee8:	08010cec 	.word	0x08010cec
 8003eec:	08010d04 	.word	0x08010d04
 8003ef0:	08010d2c 	.word	0x08010d2c
 8003ef4:	08010d10 	.word	0x08010d10
 8003ef8:	08010d28 	.word	0x08010d28
 8003efc:	08010d50 	.word	0x08010d50
 8003f00:	4a66      	ldr	r2, [pc, #408]	; (800409c <enter_setup_state+0x4f4>)
 8003f02:	4967      	ldr	r1, [pc, #412]	; (80040a0 <enter_setup_state+0x4f8>)
 8003f04:	4867      	ldr	r0, [pc, #412]	; (80040a4 <enter_setup_state+0x4fc>)
 8003f06:	f008 fb53 	bl	800c5b0 <iprintf>

	    printf("\r\n Thermal:\r\n");
 8003f0a:	4867      	ldr	r0, [pc, #412]	; (80040a8 <enter_setup_state+0x500>)
 8003f0c:	f008 fbd6 	bl	800c6bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0.0", "150.0", TEMP_MAX);
 8003f10:	4b66      	ldr	r3, [pc, #408]	; (80040ac <enter_setup_state+0x504>)
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc fb37 	bl	8000588 <__aeabi_f2d>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f22:	4b63      	ldr	r3, [pc, #396]	; (80040b0 <enter_setup_state+0x508>)
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <enter_setup_state+0x50c>)
 8003f28:	4a63      	ldr	r2, [pc, #396]	; (80040b8 <enter_setup_state+0x510>)
 8003f2a:	4964      	ldr	r1, [pc, #400]	; (80040bc <enter_setup_state+0x514>)
 8003f2c:	485d      	ldr	r0, [pc, #372]	; (80040a4 <enter_setup_state+0x4fc>)
 8003f2e:	f008 fb3f 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.2f\n\r", "-", "Thermal Resistance (K-W/J)", "-", "-", R_TH);
 8003f32:	4b5e      	ldr	r3, [pc, #376]	; (80040ac <enter_setup_state+0x504>)
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc fb26 	bl	8000588 <__aeabi_f2d>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f44:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <enter_setup_state+0x518>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <enter_setup_state+0x518>)
 8003f4a:	4a5e      	ldr	r2, [pc, #376]	; (80040c4 <enter_setup_state+0x51c>)
 8003f4c:	495c      	ldr	r1, [pc, #368]	; (80040c0 <enter_setup_state+0x518>)
 8003f4e:	485e      	ldr	r0, [pc, #376]	; (80040c8 <enter_setup_state+0x520>)
 8003f50:	f008 fb2e 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Observer M Matrix (K/J)", "-", "-", INV_M_TH);
 8003f54:	4b55      	ldr	r3, [pc, #340]	; (80040ac <enter_setup_state+0x504>)
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc fb15 	bl	8000588 <__aeabi_f2d>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f66:	4b56      	ldr	r3, [pc, #344]	; (80040c0 <enter_setup_state+0x518>)
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <enter_setup_state+0x518>)
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <enter_setup_state+0x524>)
 8003f6e:	4954      	ldr	r1, [pc, #336]	; (80040c0 <enter_setup_state+0x518>)
 8003f70:	4857      	ldr	r0, [pc, #348]	; (80040d0 <enter_setup_state+0x528>)
 8003f72:	f008 fb1d 	bl	800c5b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "-", "Ambient Temp @ Calibration (C)", "-", "-", T_AMBIENT);
 8003f76:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <enter_setup_state+0x504>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fb04 	bl	8000588 <__aeabi_f2d>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f88:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <enter_setup_state+0x518>)
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <enter_setup_state+0x518>)
 8003f8e:	4a51      	ldr	r2, [pc, #324]	; (80040d4 <enter_setup_state+0x52c>)
 8003f90:	494b      	ldr	r1, [pc, #300]	; (80040c0 <enter_setup_state+0x518>)
 8003f92:	4844      	ldr	r0, [pc, #272]	; (80040a4 <enter_setup_state+0x4fc>)
 8003f94:	f008 fb0c 	bl	800c5b0 <iprintf>

	    printf("\r\n CAN:\r\n");
 8003f98:	484f      	ldr	r0, [pc, #316]	; (80040d8 <enter_setup_state+0x530>)
 8003f9a:	f008 fb8f 	bl	800c6bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003f9e:	4b4f      	ldr	r3, [pc, #316]	; (80040dc <enter_setup_state+0x534>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <enter_setup_state+0x538>)
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4b4e      	ldr	r3, [pc, #312]	; (80040e4 <enter_setup_state+0x53c>)
 8003faa:	4a4f      	ldr	r2, [pc, #316]	; (80040e8 <enter_setup_state+0x540>)
 8003fac:	494f      	ldr	r1, [pc, #316]	; (80040ec <enter_setup_state+0x544>)
 8003fae:	4850      	ldr	r0, [pc, #320]	; (80040f0 <enter_setup_state+0x548>)
 8003fb0:	f008 fafe 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 8003fb4:	4b49      	ldr	r3, [pc, #292]	; (80040dc <enter_setup_state+0x534>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <enter_setup_state+0x538>)
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4b49      	ldr	r3, [pc, #292]	; (80040e4 <enter_setup_state+0x53c>)
 8003fc0:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <enter_setup_state+0x54c>)
 8003fc2:	494d      	ldr	r1, [pc, #308]	; (80040f8 <enter_setup_state+0x550>)
 8003fc4:	484a      	ldr	r0, [pc, #296]	; (80040f0 <enter_setup_state+0x548>)
 8003fc6:	f008 faf3 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003fca:	4b44      	ldr	r3, [pc, #272]	; (80040dc <enter_setup_state+0x534>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <enter_setup_state+0x554>)
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <enter_setup_state+0x53c>)
 8003fd6:	4a4a      	ldr	r2, [pc, #296]	; (8004100 <enter_setup_state+0x558>)
 8003fd8:	494a      	ldr	r1, [pc, #296]	; (8004104 <enter_setup_state+0x55c>)
 8003fda:	484b      	ldr	r0, [pc, #300]	; (8004108 <enter_setup_state+0x560>)
 8003fdc:	f008 fae8 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003fe0:	4b32      	ldr	r3, [pc, #200]	; (80040ac <enter_setup_state+0x504>)
 8003fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc facf 	bl	8000588 <__aeabi_f2d>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ff2:	4b33      	ldr	r3, [pc, #204]	; (80040c0 <enter_setup_state+0x518>)
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4b32      	ldr	r3, [pc, #200]	; (80040c0 <enter_setup_state+0x518>)
 8003ff8:	4a44      	ldr	r2, [pc, #272]	; (800410c <enter_setup_state+0x564>)
 8003ffa:	4945      	ldr	r1, [pc, #276]	; (8004110 <enter_setup_state+0x568>)
 8003ffc:	4829      	ldr	r0, [pc, #164]	; (80040a4 <enter_setup_state+0x4fc>)
 8003ffe:	f008 fad7 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <enter_setup_state+0x504>)
 8004004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fabe 	bl	8000588 <__aeabi_f2d>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004014:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <enter_setup_state+0x518>)
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <enter_setup_state+0x518>)
 800401a:	4a3e      	ldr	r2, [pc, #248]	; (8004114 <enter_setup_state+0x56c>)
 800401c:	493e      	ldr	r1, [pc, #248]	; (8004118 <enter_setup_state+0x570>)
 800401e:	4821      	ldr	r0, [pc, #132]	; (80040a4 <enter_setup_state+0x4fc>)
 8004020:	f008 fac6 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "-", "-", KP_MAX);
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <enter_setup_state+0x504>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc faad 	bl	8000588 <__aeabi_f2d>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <enter_setup_state+0x518>)
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <enter_setup_state+0x518>)
 800403c:	4a37      	ldr	r2, [pc, #220]	; (800411c <enter_setup_state+0x574>)
 800403e:	4938      	ldr	r1, [pc, #224]	; (8004120 <enter_setup_state+0x578>)
 8004040:	4818      	ldr	r0, [pc, #96]	; (80040a4 <enter_setup_state+0x4fc>)
 8004042:	f008 fab5 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "-", "-", KD_MAX);
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <enter_setup_state+0x504>)
 8004048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404a:	4618      	mov	r0, r3
 800404c:	f7fc fa9c 	bl	8000588 <__aeabi_f2d>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <enter_setup_state+0x518>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <enter_setup_state+0x518>)
 800405e:	4a31      	ldr	r2, [pc, #196]	; (8004124 <enter_setup_state+0x57c>)
 8004060:	4931      	ldr	r1, [pc, #196]	; (8004128 <enter_setup_state+0x580>)
 8004062:	4810      	ldr	r0, [pc, #64]	; (80040a4 <enter_setup_state+0x4fc>)
 8004064:	f008 faa4 	bl	800c5b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "q", "Max Torque Setpoint (Nm)", "-", "-", T_MAX);
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <enter_setup_state+0x504>)
 800406a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa8b 	bl	8000588 <__aeabi_f2d>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <enter_setup_state+0x518>)
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <enter_setup_state+0x518>)
 8004080:	4a2a      	ldr	r2, [pc, #168]	; (800412c <enter_setup_state+0x584>)
 8004082:	492b      	ldr	r1, [pc, #172]	; (8004130 <enter_setup_state+0x588>)
 8004084:	4807      	ldr	r0, [pc, #28]	; (80040a4 <enter_setup_state+0x4fc>)
 8004086:	f008 fa93 	bl	800c5b0 <iprintf>

	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 800408a:	482a      	ldr	r0, [pc, #168]	; (8004134 <enter_setup_state+0x58c>)
 800408c:	f008 fa90 	bl	800c5b0 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8004090:	4829      	ldr	r0, [pc, #164]	; (8004138 <enter_setup_state+0x590>)
 8004092:	f008 fa8d 	bl	800c5b0 <iprintf>
 }
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	08010d34 	.word	0x08010d34
 80040a0:	08010d4c 	.word	0x08010d4c
 80040a4:	08010ca4 	.word	0x08010ca4
 80040a8:	08010d58 	.word	0x08010d58
 80040ac:	2000033c 	.word	0x2000033c
 80040b0:	08010d88 	.word	0x08010d88
 80040b4:	08010b2c 	.word	0x08010b2c
 80040b8:	08010d68 	.word	0x08010d68
 80040bc:	08010d84 	.word	0x08010d84
 80040c0:	08010a7c 	.word	0x08010a7c
 80040c4:	08010d90 	.word	0x08010d90
 80040c8:	08010dac 	.word	0x08010dac
 80040cc:	08010dcc 	.word	0x08010dcc
 80040d0:	08010b54 	.word	0x08010b54
 80040d4:	08010de4 	.word	0x08010de4
 80040d8:	08010e04 	.word	0x08010e04
 80040dc:	2000043c 	.word	0x2000043c
 80040e0:	08010e3c 	.word	0x08010e3c
 80040e4:	08010a64 	.word	0x08010a64
 80040e8:	08010e10 	.word	0x08010e10
 80040ec:	08010e18 	.word	0x08010e18
 80040f0:	08010e1c 	.word	0x08010e1c
 80040f4:	08010e40 	.word	0x08010e40
 80040f8:	08010e4c 	.word	0x08010e4c
 80040fc:	08010e74 	.word	0x08010e74
 8004100:	08010e50 	.word	0x08010e50
 8004104:	08010e70 	.word	0x08010e70
 8004108:	08010a80 	.word	0x08010a80
 800410c:	08010e7c 	.word	0x08010e7c
 8004110:	08010e98 	.word	0x08010e98
 8004114:	08010e9c 	.word	0x08010e9c
 8004118:	08010ebc 	.word	0x08010ebc
 800411c:	08010ec0 	.word	0x08010ec0
 8004120:	08010edc 	.word	0x08010edc
 8004124:	08010ee0 	.word	0x08010ee0
 8004128:	08010f00 	.word	0x08010f00
 800412c:	08010f04 	.word	0x08010f04
 8004130:	08010f20 	.word	0x08010f20
 8004134:	08010f24 	.word	0x08010f24
 8004138:	08010f70 	.word	0x08010f70

0800413c <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af02      	add	r7, sp, #8
 8004142:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7c5b      	ldrb	r3, [r3, #17]
 8004148:	3b61      	subs	r3, #97	; 0x61
 800414a:	2b19      	cmp	r3, #25
 800414c:	f200 83a0 	bhi.w	8004890 <process_user_input+0x754>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <process_user_input+0x1c>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	0800446b 	.word	0x0800446b
 800415c:	0800426d 	.word	0x0800426d
 8004160:	08004417 	.word	0x08004417
 8004164:	0800470f 	.word	0x0800470f
 8004168:	080045f5 	.word	0x080045f5
 800416c:	08004351 	.word	0x08004351
 8004170:	08004519 	.word	0x08004519
 8004174:	080043c3 	.word	0x080043c3
 8004178:	080042c1 	.word	0x080042c1
 800417c:	080045a1 	.word	0x080045a1
 8004180:	0800455d 	.word	0x0800455d
 8004184:	080042fd 	.word	0x080042fd
 8004188:	080042df 	.word	0x080042df
 800418c:	08004649 	.word	0x08004649
 8004190:	08004219 	.word	0x08004219
 8004194:	08004753 	.word	0x08004753
 8004198:	080047fb 	.word	0x080047fb
 800419c:	08004891 	.word	0x08004891
 80041a0:	08004891 	.word	0x08004891
 80041a4:	080043a5 	.word	0x080043a5
 80041a8:	08004891 	.word	0x08004891
 80041ac:	080047a7 	.word	0x080047a7
 80041b0:	08004891 	.word	0x08004891
 80041b4:	080046cb 	.word	0x080046cb
 80041b8:	080041c1 	.word	0x080041c1
 80041bc:	080041ed 	.word	0x080041ed
//		 case 'q':
//			 KI_Q = fmaxf(fminf(atof(fsmstate->cmd_buff), 1.0f), 0.0f);
//			 printf("KI_Q set to %f\r\n", KI_Q);
//			 break;
 		 case 'y':
 			 EN_ENC_LINEARIZE = atoi(fsmstate->cmd_buff);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3308      	adds	r3, #8
 80041c4:	4618      	mov	r0, r3
 80041c6:	f007 fd44 	bl	800bc52 <atoi>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4abc      	ldr	r2, [pc, #752]	; (80044c0 <process_user_input+0x384>)
 80041ce:	6153      	str	r3, [r2, #20]
 			 if (EN_ENC_LINEARIZE!=0) { EN_ENC_LINEARIZE = 1; }
 80041d0:	4bbb      	ldr	r3, [pc, #748]	; (80044c0 <process_user_input+0x384>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <process_user_input+0xa2>
 80041d8:	4bb9      	ldr	r3, [pc, #740]	; (80044c0 <process_user_input+0x384>)
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]
 			 printf("EN_ENC_LINEARIZE set to %d\r\n", EN_ENC_LINEARIZE);
 80041de:	4bb8      	ldr	r3, [pc, #736]	; (80044c0 <process_user_input+0x384>)
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4619      	mov	r1, r3
 80041e4:	48b7      	ldr	r0, [pc, #732]	; (80044c4 <process_user_input+0x388>)
 80041e6:	f008 f9e3 	bl	800c5b0 <iprintf>
 			 break;
 80041ea:	e358      	b.n	800489e <process_user_input+0x762>
 		 case 'z':
 			 EN_ENC_FILTER = atoi(fsmstate->cmd_buff);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3308      	adds	r3, #8
 80041f0:	4618      	mov	r0, r3
 80041f2:	f007 fd2e 	bl	800bc52 <atoi>
 80041f6:	4603      	mov	r3, r0
 80041f8:	4ab1      	ldr	r2, [pc, #708]	; (80044c0 <process_user_input+0x384>)
 80041fa:	6113      	str	r3, [r2, #16]
 			 if (EN_ENC_FILTER!=0) { EN_ENC_FILTER = 1; }
 80041fc:	4bb0      	ldr	r3, [pc, #704]	; (80044c0 <process_user_input+0x384>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <process_user_input+0xce>
 8004204:	4bae      	ldr	r3, [pc, #696]	; (80044c0 <process_user_input+0x384>)
 8004206:	2201      	movs	r2, #1
 8004208:	611a      	str	r2, [r3, #16]
			 printf("EN_ENC_FILTER set to %d\r\n", EN_ENC_FILTER);
 800420a:	4bad      	ldr	r3, [pc, #692]	; (80044c0 <process_user_input+0x384>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	4619      	mov	r1, r3
 8004210:	48ad      	ldr	r0, [pc, #692]	; (80044c8 <process_user_input+0x38c>)
 8004212:	f008 f9cd 	bl	800c5b0 <iprintf>
			 break;
 8004216:	e342      	b.n	800489e <process_user_input+0x762>
 		 case 'o':
			 R_PHASE = fmaxf(fminf(atof(fsmstate->cmd_buff), 10.0f), 0.0f);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3308      	adds	r3, #8
 800421c:	4618      	mov	r0, r3
 800421e:	f007 fd15 	bl	800bc4c <atof>
 8004222:	ec53 2b10 	vmov	r2, r3, d0
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fcfd 	bl	8000c28 <__aeabi_d2f>
 800422e:	4603      	mov	r3, r0
 8004230:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004234:	ee00 3a10 	vmov	s0, r3
 8004238:	f00b fe85 	bl	800ff46 <fminf>
 800423c:	eef0 7a40 	vmov.f32	s15, s0
 8004240:	eddf 0aa2 	vldr	s1, [pc, #648]	; 80044cc <process_user_input+0x390>
 8004244:	eeb0 0a67 	vmov.f32	s0, s15
 8004248:	f00b fe62 	bl	800ff10 <fmaxf>
 800424c:	eef0 7a40 	vmov.f32	s15, s0
 8004250:	4b9f      	ldr	r3, [pc, #636]	; (80044d0 <process_user_input+0x394>)
 8004252:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("R_PHASE set to %f\r\n", R_PHASE);
 8004256:	4b9e      	ldr	r3, [pc, #632]	; (80044d0 <process_user_input+0x394>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	4618      	mov	r0, r3
 800425c:	f7fc f994 	bl	8000588 <__aeabi_f2d>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	489b      	ldr	r0, [pc, #620]	; (80044d4 <process_user_input+0x398>)
 8004266:	f008 f9a3 	bl	800c5b0 <iprintf>
			 break;
 800426a:	e318      	b.n	800489e <process_user_input+0x762>
	 	 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3308      	adds	r3, #8
 8004270:	4618      	mov	r0, r3
 8004272:	f007 fceb 	bl	800bc4c <atof>
 8004276:	ec53 2b10 	vmov	r2, r3, d0
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	f7fc fcd3 	bl	8000c28 <__aeabi_d2f>
 8004282:	4603      	mov	r3, r0
 8004284:	eddf 0a94 	vldr	s1, [pc, #592]	; 80044d8 <process_user_input+0x39c>
 8004288:	ee00 3a10 	vmov	s0, r3
 800428c:	f00b fe5b 	bl	800ff46 <fminf>
 8004290:	eef0 7a40 	vmov.f32	s15, s0
 8004294:	eddf 0a91 	vldr	s1, [pc, #580]	; 80044dc <process_user_input+0x3a0>
 8004298:	eeb0 0a67 	vmov.f32	s0, s15
 800429c:	f00b fe38 	bl	800ff10 <fmaxf>
 80042a0:	eef0 7a40 	vmov.f32	s15, s0
 80042a4:	4b8a      	ldr	r3, [pc, #552]	; (80044d0 <process_user_input+0x394>)
 80042a6:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 80042aa:	4b89      	ldr	r3, [pc, #548]	; (80044d0 <process_user_input+0x394>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f96a 	bl	8000588 <__aeabi_f2d>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4889      	ldr	r0, [pc, #548]	; (80044e0 <process_user_input+0x3a4>)
 80042ba:	f008 f979 	bl	800c5b0 <iprintf>
			 break;
 80042be:	e2ee      	b.n	800489e <process_user_input+0x762>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3308      	adds	r3, #8
 80042c4:	4618      	mov	r0, r3
 80042c6:	f007 fcc4 	bl	800bc52 <atoi>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4a7c      	ldr	r2, [pc, #496]	; (80044c0 <process_user_input+0x384>)
 80042ce:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80042d0:	4b7b      	ldr	r3, [pc, #492]	; (80044c0 <process_user_input+0x384>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4619      	mov	r1, r3
 80042d6:	4883      	ldr	r0, [pc, #524]	; (80044e4 <process_user_input+0x3a8>)
 80042d8:	f008 f96a 	bl	800c5b0 <iprintf>
			 break;
 80042dc:	e2df      	b.n	800489e <process_user_input+0x762>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3308      	adds	r3, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f007 fcb5 	bl	800bc52 <atoi>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <process_user_input+0x384>)
 80042ec:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 80042ee:	4b74      	ldr	r3, [pc, #464]	; (80044c0 <process_user_input+0x384>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	4619      	mov	r1, r3
 80042f4:	487c      	ldr	r0, [pc, #496]	; (80044e8 <process_user_input+0x3ac>)
 80042f6:	f008 f95b 	bl	800c5b0 <iprintf>
			 break;
 80042fa:	e2d0      	b.n	800489e <process_user_input+0x762>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3308      	adds	r3, #8
 8004300:	4618      	mov	r0, r3
 8004302:	f007 fca3 	bl	800bc4c <atof>
 8004306:	ec53 2b10 	vmov	r2, r3, d0
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	f7fc fc8b 	bl	8000c28 <__aeabi_d2f>
 8004312:	4603      	mov	r3, r0
 8004314:	eddf 0a75 	vldr	s1, [pc, #468]	; 80044ec <process_user_input+0x3b0>
 8004318:	ee00 3a10 	vmov	s0, r3
 800431c:	f00b fe13 	bl	800ff46 <fminf>
 8004320:	eef0 7a40 	vmov.f32	s15, s0
 8004324:	eddf 0a69 	vldr	s1, [pc, #420]	; 80044cc <process_user_input+0x390>
 8004328:	eeb0 0a67 	vmov.f32	s0, s15
 800432c:	f00b fdf0 	bl	800ff10 <fmaxf>
 8004330:	eef0 7a40 	vmov.f32	s15, s0
 8004334:	4b66      	ldr	r3, [pc, #408]	; (80044d0 <process_user_input+0x394>)
 8004336:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 800433a:	4b65      	ldr	r3, [pc, #404]	; (80044d0 <process_user_input+0x394>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc f922 	bl	8000588 <__aeabi_f2d>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4869      	ldr	r0, [pc, #420]	; (80044f0 <process_user_input+0x3b4>)
 800434a:	f008 f931 	bl	800c5b0 <iprintf>
			 break;
 800434e:	e2a6      	b.n	800489e <process_user_input+0x762>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3308      	adds	r3, #8
 8004354:	4618      	mov	r0, r3
 8004356:	f007 fc79 	bl	800bc4c <atof>
 800435a:	ec53 2b10 	vmov	r2, r3, d0
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	f7fc fc61 	bl	8000c28 <__aeabi_d2f>
 8004366:	4603      	mov	r3, r0
 8004368:	eddf 0a62 	vldr	s1, [pc, #392]	; 80044f4 <process_user_input+0x3b8>
 800436c:	ee00 3a10 	vmov	s0, r3
 8004370:	f00b fde9 	bl	800ff46 <fminf>
 8004374:	eef0 7a40 	vmov.f32	s15, s0
 8004378:	eddf 0a54 	vldr	s1, [pc, #336]	; 80044cc <process_user_input+0x390>
 800437c:	eeb0 0a67 	vmov.f32	s0, s15
 8004380:	f00b fdc6 	bl	800ff10 <fmaxf>
 8004384:	eef0 7a40 	vmov.f32	s15, s0
 8004388:	4b51      	ldr	r3, [pc, #324]	; (80044d0 <process_user_input+0x394>)
 800438a:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800438e:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <process_user_input+0x394>)
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc f8f8 	bl	8000588 <__aeabi_f2d>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4856      	ldr	r0, [pc, #344]	; (80044f8 <process_user_input+0x3bc>)
 800439e:	f008 f907 	bl	800c5b0 <iprintf>
			 break;
 80043a2:	e27c      	b.n	800489e <process_user_input+0x762>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3308      	adds	r3, #8
 80043a8:	4618      	mov	r0, r3
 80043aa:	f007 fc52 	bl	800bc52 <atoi>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4a43      	ldr	r2, [pc, #268]	; (80044c0 <process_user_input+0x384>)
 80043b2:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80043b4:	4b42      	ldr	r3, [pc, #264]	; (80044c0 <process_user_input+0x384>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4619      	mov	r1, r3
 80043ba:	4850      	ldr	r0, [pc, #320]	; (80044fc <process_user_input+0x3c0>)
 80043bc:	f008 f8f8 	bl	800c5b0 <iprintf>
			 break;
 80043c0:	e26d      	b.n	800489e <process_user_input+0x762>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3308      	adds	r3, #8
 80043c6:	4618      	mov	r0, r3
 80043c8:	f007 fc40 	bl	800bc4c <atof>
 80043cc:	ec53 2b10 	vmov	r2, r3, d0
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7fc fc28 	bl	8000c28 <__aeabi_d2f>
 80043d8:	4603      	mov	r3, r0
 80043da:	eddf 0a49 	vldr	s1, [pc, #292]	; 8004500 <process_user_input+0x3c4>
 80043de:	ee00 3a10 	vmov	s0, r3
 80043e2:	f00b fdb0 	bl	800ff46 <fminf>
 80043e6:	eef0 7a40 	vmov.f32	s15, s0
 80043ea:	eddf 0a38 	vldr	s1, [pc, #224]	; 80044cc <process_user_input+0x390>
 80043ee:	eeb0 0a67 	vmov.f32	s0, s15
 80043f2:	f00b fd8d 	bl	800ff10 <fmaxf>
 80043f6:	eef0 7a40 	vmov.f32	s15, s0
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <process_user_input+0x394>)
 80043fc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8004400:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <process_user_input+0x394>)
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc f8bf 	bl	8000588 <__aeabi_f2d>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	483d      	ldr	r0, [pc, #244]	; (8004504 <process_user_input+0x3c8>)
 8004410:	f008 f8ce 	bl	800c5b0 <iprintf>
			 break;
 8004414:	e243      	b.n	800489e <process_user_input+0x762>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3308      	adds	r3, #8
 800441a:	4618      	mov	r0, r3
 800441c:	f007 fc16 	bl	800bc4c <atof>
 8004420:	ec53 2b10 	vmov	r2, r3, d0
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f7fc fbfe 	bl	8000c28 <__aeabi_d2f>
 800442c:	4603      	mov	r3, r0
 800442e:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004508 <process_user_input+0x3cc>
 8004432:	ee00 3a10 	vmov	s0, r3
 8004436:	f00b fd86 	bl	800ff46 <fminf>
 800443a:	eef0 7a40 	vmov.f32	s15, s0
 800443e:	eddf 0a23 	vldr	s1, [pc, #140]	; 80044cc <process_user_input+0x390>
 8004442:	eeb0 0a67 	vmov.f32	s0, s15
 8004446:	f00b fd63 	bl	800ff10 <fmaxf>
 800444a:	eef0 7a40 	vmov.f32	s15, s0
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <process_user_input+0x394>)
 8004450:	edc3 7a04 	vstr	s15, [r3, #16]
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <process_user_input+0x394>)
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f895 	bl	8000588 <__aeabi_f2d>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	482a      	ldr	r0, [pc, #168]	; (800450c <process_user_input+0x3d0>)
 8004464:	f008 f8a4 	bl	800c5b0 <iprintf>
			 break;
 8004468:	e219      	b.n	800489e <process_user_input+0x762>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3308      	adds	r3, #8
 800446e:	4618      	mov	r0, r3
 8004470:	f007 fbec 	bl	800bc4c <atof>
 8004474:	ec53 2b10 	vmov	r2, r3, d0
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	f7fc fbd4 	bl	8000c28 <__aeabi_d2f>
 8004480:	4603      	mov	r3, r0
 8004482:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004486:	ee00 3a10 	vmov	s0, r3
 800448a:	f00b fd5c 	bl	800ff46 <fminf>
 800448e:	eef0 7a40 	vmov.f32	s15, s0
 8004492:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80044cc <process_user_input+0x390>
 8004496:	eeb0 0a67 	vmov.f32	s0, s15
 800449a:	f00b fd39 	bl	800ff10 <fmaxf>
 800449e:	eef0 7a40 	vmov.f32	s15, s0
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <process_user_input+0x394>)
 80044a4:	edc3 7a05 	vstr	s15, [r3, #20]
			 printf("I_CAL set to %f\r\n", I_CAL);
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <process_user_input+0x394>)
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc f86b 	bl	8000588 <__aeabi_f2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4816      	ldr	r0, [pc, #88]	; (8004510 <process_user_input+0x3d4>)
 80044b8:	f008 f87a 	bl	800c5b0 <iprintf>
			 break;
 80044bc:	e1ef      	b.n	800489e <process_user_input+0x762>
 80044be:	bf00      	nop
 80044c0:	2000043c 	.word	0x2000043c
 80044c4:	08010f9c 	.word	0x08010f9c
 80044c8:	08010fbc 	.word	0x08010fbc
 80044cc:	00000000 	.word	0x00000000
 80044d0:	2000033c 	.word	0x2000033c
 80044d4:	08010fd8 	.word	0x08010fd8
 80044d8:	44fa0000 	.word	0x44fa0000
 80044dc:	42c80000 	.word	0x42c80000
 80044e0:	08010fec 	.word	0x08010fec
 80044e4:	08011000 	.word	0x08011000
 80044e8:	08011014 	.word	0x08011014
 80044ec:	42700000 	.word	0x42700000
 80044f0:	0801102c 	.word	0x0801102c
 80044f4:	42040000 	.word	0x42040000
 80044f8:	08011040 	.word	0x08011040
 80044fc:	08011058 	.word	0x08011058
 8004500:	43160000 	.word	0x43160000
 8004504:	08011070 	.word	0x08011070
 8004508:	42200000 	.word	0x42200000
 800450c:	08011088 	.word	0x08011088
 8004510:	080110a0 	.word	0x080110a0
 8004514:	3a83126f 	.word	0x3a83126f
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3308      	adds	r3, #8
 800451c:	4618      	mov	r0, r3
 800451e:	f007 fb95 	bl	800bc4c <atof>
 8004522:	ec53 2b10 	vmov	r2, r3, d0
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f7fc fb7d 	bl	8000c28 <__aeabi_d2f>
 800452e:	4603      	mov	r3, r0
 8004530:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004514 <process_user_input+0x3d8>
 8004534:	ee00 3a10 	vmov	s0, r3
 8004538:	f00b fcea 	bl	800ff10 <fmaxf>
 800453c:	eef0 7a40 	vmov.f32	s15, s0
 8004540:	4bc3      	ldr	r3, [pc, #780]	; (8004850 <process_user_input+0x714>)
 8004542:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			 printf("GR set to %f\r\n", GR);
 8004546:	4bc2      	ldr	r3, [pc, #776]	; (8004850 <process_user_input+0x714>)
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc f81c 	bl	8000588 <__aeabi_f2d>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	48bf      	ldr	r0, [pc, #764]	; (8004854 <process_user_input+0x718>)
 8004556:	f008 f82b 	bl	800c5b0 <iprintf>
			 break;
 800455a:	e1a0      	b.n	800489e <process_user_input+0x762>
		 case 'k':
			 KT_OUT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3308      	adds	r3, #8
 8004560:	4618      	mov	r0, r3
 8004562:	f007 fb73 	bl	800bc4c <atof>
 8004566:	ec53 2b10 	vmov	r2, r3, d0
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	f7fc fb5b 	bl	8000c28 <__aeabi_d2f>
 8004572:	4603      	mov	r3, r0
 8004574:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8004858 <process_user_input+0x71c>
 8004578:	ee00 3a10 	vmov	s0, r3
 800457c:	f00b fcc8 	bl	800ff10 <fmaxf>
 8004580:	eef0 7a40 	vmov.f32	s15, s0
 8004584:	4bb2      	ldr	r3, [pc, #712]	; (8004850 <process_user_input+0x714>)
 8004586:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT_OUT);
 800458a:	4bb1      	ldr	r3, [pc, #708]	; (8004850 <process_user_input+0x714>)
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	4618      	mov	r0, r3
 8004590:	f7fb fffa 	bl	8000588 <__aeabi_f2d>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	48b0      	ldr	r0, [pc, #704]	; (800485c <process_user_input+0x720>)
 800459a:	f008 f809 	bl	800c5b0 <iprintf>
			 break;
 800459e:	e17e      	b.n	800489e <process_user_input+0x762>

		 case 'j':
			 L_D = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3308      	adds	r3, #8
 80045a4:	4618      	mov	r0, r3
 80045a6:	f007 fb51 	bl	800bc4c <atof>
 80045aa:	ec53 2b10 	vmov	r2, r3, d0
 80045ae:	4610      	mov	r0, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7fc fb39 	bl	8000c28 <__aeabi_d2f>
 80045b6:	4603      	mov	r3, r0
 80045b8:	eddf 0aa9 	vldr	s1, [pc, #676]	; 8004860 <process_user_input+0x724>
 80045bc:	ee00 3a10 	vmov	s0, r3
 80045c0:	f00b fcc1 	bl	800ff46 <fminf>
 80045c4:	eef0 7a40 	vmov.f32	s15, s0
 80045c8:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8004864 <process_user_input+0x728>
 80045cc:	eeb0 0a67 	vmov.f32	s0, s15
 80045d0:	f00b fc9e 	bl	800ff10 <fmaxf>
 80045d4:	eef0 7a40 	vmov.f32	s15, s0
 80045d8:	4b9d      	ldr	r3, [pc, #628]	; (8004850 <process_user_input+0x714>)
 80045da:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("L_D set to %f\r\n", L_D);
 80045de:	4b9c      	ldr	r3, [pc, #624]	; (8004850 <process_user_input+0x714>)
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fb ffd0 	bl	8000588 <__aeabi_f2d>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	489e      	ldr	r0, [pc, #632]	; (8004868 <process_user_input+0x72c>)
 80045ee:	f007 ffdf 	bl	800c5b0 <iprintf>
			 break;
 80045f2:	e154      	b.n	800489e <process_user_input+0x762>
		 case 'e':
			 L_Q = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3308      	adds	r3, #8
 80045f8:	4618      	mov	r0, r3
 80045fa:	f007 fb27 	bl	800bc4c <atof>
 80045fe:	ec53 2b10 	vmov	r2, r3, d0
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	f7fc fb0f 	bl	8000c28 <__aeabi_d2f>
 800460a:	4603      	mov	r3, r0
 800460c:	eddf 0a94 	vldr	s1, [pc, #592]	; 8004860 <process_user_input+0x724>
 8004610:	ee00 3a10 	vmov	s0, r3
 8004614:	f00b fc97 	bl	800ff46 <fminf>
 8004618:	eef0 7a40 	vmov.f32	s15, s0
 800461c:	eddf 0a91 	vldr	s1, [pc, #580]	; 8004864 <process_user_input+0x728>
 8004620:	eeb0 0a67 	vmov.f32	s0, s15
 8004624:	f00b fc74 	bl	800ff10 <fmaxf>
 8004628:	eef0 7a40 	vmov.f32	s15, s0
 800462c:	4b88      	ldr	r3, [pc, #544]	; (8004850 <process_user_input+0x714>)
 800462e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("L_Q set to %f\r\n", L_Q);
 8004632:	4b87      	ldr	r3, [pc, #540]	; (8004850 <process_user_input+0x714>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	4618      	mov	r0, r3
 8004638:	f7fb ffa6 	bl	8000588 <__aeabi_f2d>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	488a      	ldr	r0, [pc, #552]	; (800486c <process_user_input+0x730>)
 8004642:	f007 ffb5 	bl	800c5b0 <iprintf>
			 break;
 8004646:	e12a      	b.n	800489e <process_user_input+0x762>
		 case 'n':
			 PPAIRS = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3308      	adds	r3, #8
 800464c:	4618      	mov	r0, r3
 800464e:	f007 fafd 	bl	800bc4c <atof>
 8004652:	ec53 2b10 	vmov	r2, r3, d0
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	f7fc fae5 	bl	8000c28 <__aeabi_d2f>
 800465e:	4603      	mov	r3, r0
 8004660:	eddf 0a83 	vldr	s1, [pc, #524]	; 8004870 <process_user_input+0x734>
 8004664:	ee00 3a10 	vmov	s0, r3
 8004668:	f00b fc6d 	bl	800ff46 <fminf>
 800466c:	eef0 7a40 	vmov.f32	s15, s0
 8004670:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8004864 <process_user_input+0x728>
 8004674:	eeb0 0a67 	vmov.f32	s0, s15
 8004678:	f00b fc4a 	bl	800ff10 <fmaxf>
 800467c:	eef0 7a40 	vmov.f32	s15, s0
 8004680:	4b73      	ldr	r3, [pc, #460]	; (8004850 <process_user_input+0x714>)
 8004682:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 if (PPAIRS>40.0) {PPAIRS=40.0f;}
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <process_user_input+0x714>)
 8004688:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800468c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004870 <process_user_input+0x734>
 8004690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004698:	dd02      	ble.n	80046a0 <process_user_input+0x564>
 800469a:	4b6d      	ldr	r3, [pc, #436]	; (8004850 <process_user_input+0x714>)
 800469c:	4a75      	ldr	r2, [pc, #468]	; (8004874 <process_user_input+0x738>)
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
			 PPAIRS = (float)( (int)PPAIRS ); // remove any decimal part
 80046a0:	4b6b      	ldr	r3, [pc, #428]	; (8004850 <process_user_input+0x714>)
 80046a2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80046a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ae:	4b68      	ldr	r3, [pc, #416]	; (8004850 <process_user_input+0x714>)
 80046b0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("PPAIRS set to %f\r\n", PPAIRS);
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <process_user_input+0x714>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff65 	bl	8000588 <__aeabi_f2d>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	486d      	ldr	r0, [pc, #436]	; (8004878 <process_user_input+0x73c>)
 80046c4:	f007 ff74 	bl	800c5b0 <iprintf>
			 break;
 80046c8:	e0e9      	b.n	800489e <process_user_input+0x762>

		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3308      	adds	r3, #8
 80046ce:	4618      	mov	r0, r3
 80046d0:	f007 fabc 	bl	800bc4c <atof>
 80046d4:	ec53 2b10 	vmov	r2, r3, d0
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	f7fc faa4 	bl	8000c28 <__aeabi_d2f>
 80046e0:	4603      	mov	r3, r0
 80046e2:	eddf 0a60 	vldr	s1, [pc, #384]	; 8004864 <process_user_input+0x728>
 80046e6:	ee00 3a10 	vmov	s0, r3
 80046ea:	f00b fc11 	bl	800ff10 <fmaxf>
 80046ee:	eef0 7a40 	vmov.f32	s15, s0
 80046f2:	4b57      	ldr	r3, [pc, #348]	; (8004850 <process_user_input+0x714>)
 80046f4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80046f8:	4b55      	ldr	r3, [pc, #340]	; (8004850 <process_user_input+0x714>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb ff43 	bl	8000588 <__aeabi_f2d>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	485d      	ldr	r0, [pc, #372]	; (800487c <process_user_input+0x740>)
 8004708:	f007 ff52 	bl	800c5b0 <iprintf>
			 break;
 800470c:	e0c7      	b.n	800489e <process_user_input+0x762>
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3308      	adds	r3, #8
 8004712:	4618      	mov	r0, r3
 8004714:	f007 fa9a 	bl	800bc4c <atof>
 8004718:	ec53 2b10 	vmov	r2, r3, d0
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f7fc fa82 	bl	8000c28 <__aeabi_d2f>
 8004724:	4603      	mov	r3, r0
 8004726:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8004864 <process_user_input+0x728>
 800472a:	ee00 3a10 	vmov	s0, r3
 800472e:	f00b fbef 	bl	800ff10 <fmaxf>
 8004732:	eef0 7a40 	vmov.f32	s15, s0
 8004736:	4b46      	ldr	r3, [pc, #280]	; (8004850 <process_user_input+0x714>)
 8004738:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800473c:	4b44      	ldr	r3, [pc, #272]	; (8004850 <process_user_input+0x714>)
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	4618      	mov	r0, r3
 8004742:	f7fb ff21 	bl	8000588 <__aeabi_f2d>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	484d      	ldr	r0, [pc, #308]	; (8004880 <process_user_input+0x744>)
 800474c:	f007 ff30 	bl	800c5b0 <iprintf>
			 break;
 8004750:	e0a5      	b.n	800489e <process_user_input+0x762>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3308      	adds	r3, #8
 8004756:	4618      	mov	r0, r3
 8004758:	f007 fa78 	bl	800bc4c <atof>
 800475c:	ec53 2b10 	vmov	r2, r3, d0
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	f7fc fa60 	bl	8000c28 <__aeabi_d2f>
 8004768:	4603      	mov	r3, r0
 800476a:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8004864 <process_user_input+0x728>
 800476e:	ee00 3a10 	vmov	s0, r3
 8004772:	f00b fbcd 	bl	800ff10 <fmaxf>
 8004776:	eef0 7a40 	vmov.f32	s15, s0
 800477a:	4b35      	ldr	r3, [pc, #212]	; (8004850 <process_user_input+0x714>)
 800477c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			 P_MIN = -P_MAX;
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <process_user_input+0x714>)
 8004782:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004786:	eef1 7a67 	vneg.f32	s15, s15
 800478a:	4b31      	ldr	r3, [pc, #196]	; (8004850 <process_user_input+0x714>)
 800478c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("P_MAX set to %f\r\n", P_MAX);
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <process_user_input+0x714>)
 8004792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004794:	4618      	mov	r0, r3
 8004796:	f7fb fef7 	bl	8000588 <__aeabi_f2d>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4839      	ldr	r0, [pc, #228]	; (8004884 <process_user_input+0x748>)
 80047a0:	f007 ff06 	bl	800c5b0 <iprintf>
			 break;
 80047a4:	e07b      	b.n	800489e <process_user_input+0x762>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3308      	adds	r3, #8
 80047aa:	4618      	mov	r0, r3
 80047ac:	f007 fa4e 	bl	800bc4c <atof>
 80047b0:	ec53 2b10 	vmov	r2, r3, d0
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	f7fc fa36 	bl	8000c28 <__aeabi_d2f>
 80047bc:	4603      	mov	r3, r0
 80047be:	eddf 0a29 	vldr	s1, [pc, #164]	; 8004864 <process_user_input+0x728>
 80047c2:	ee00 3a10 	vmov	s0, r3
 80047c6:	f00b fba3 	bl	800ff10 <fmaxf>
 80047ca:	eef0 7a40 	vmov.f32	s15, s0
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <process_user_input+0x714>)
 80047d0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			 V_MIN = -V_MAX;
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <process_user_input+0x714>)
 80047d6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80047da:	eef1 7a67 	vneg.f32	s15, s15
 80047de:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <process_user_input+0x714>)
 80047e0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			 printf("V_MAX set to %f\r\n", V_MAX);
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <process_user_input+0x714>)
 80047e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fb fecd 	bl	8000588 <__aeabi_f2d>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4825      	ldr	r0, [pc, #148]	; (8004888 <process_user_input+0x74c>)
 80047f4:	f007 fedc 	bl	800c5b0 <iprintf>
			 break;
 80047f8:	e051      	b.n	800489e <process_user_input+0x762>
		 case 'q':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3308      	adds	r3, #8
 80047fe:	4618      	mov	r0, r3
 8004800:	f007 fa24 	bl	800bc4c <atof>
 8004804:	ec53 2b10 	vmov	r2, r3, d0
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	f7fc fa0c 	bl	8000c28 <__aeabi_d2f>
 8004810:	4603      	mov	r3, r0
 8004812:	eddf 0a14 	vldr	s1, [pc, #80]	; 8004864 <process_user_input+0x728>
 8004816:	ee00 3a10 	vmov	s0, r3
 800481a:	f00b fb79 	bl	800ff10 <fmaxf>
 800481e:	eef0 7a40 	vmov.f32	s15, s0
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <process_user_input+0x714>)
 8004824:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			 T_MIN = -T_MAX;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <process_user_input+0x714>)
 800482a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800482e:	eef1 7a67 	vneg.f32	s15, s15
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <process_user_input+0x714>)
 8004834:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
			 printf("T_MAX set to %f\r\n", T_MAX);
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <process_user_input+0x714>)
 800483a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483c:	4618      	mov	r0, r3
 800483e:	f7fb fea3 	bl	8000588 <__aeabi_f2d>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4811      	ldr	r0, [pc, #68]	; (800488c <process_user_input+0x750>)
 8004848:	f007 feb2 	bl	800c5b0 <iprintf>
			 break;
 800484c:	e027      	b.n	800489e <process_user_input+0x762>
 800484e:	bf00      	nop
 8004850:	2000033c 	.word	0x2000033c
 8004854:	080110b4 	.word	0x080110b4
 8004858:	38d1b717 	.word	0x38d1b717
 800485c:	080110c4 	.word	0x080110c4
 8004860:	3dcccccd 	.word	0x3dcccccd
 8004864:	00000000 	.word	0x00000000
 8004868:	080110d4 	.word	0x080110d4
 800486c:	080110e4 	.word	0x080110e4
 8004870:	42200000 	.word	0x42200000
 8004874:	42200000 	.word	0x42200000
 8004878:	080110f4 	.word	0x080110f4
 800487c:	08011108 	.word	0x08011108
 8004880:	0801111c 	.word	0x0801111c
 8004884:	08011130 	.word	0x08011130
 8004888:	08011144 	.word	0x08011144
 800488c:	08011158 	.word	0x08011158
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", (char)fsmstate->cmd_buff[0]);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	7a1b      	ldrb	r3, [r3, #8]
 8004894:	4619      	mov	r1, r3
 8004896:	4819      	ldr	r0, [pc, #100]	; (80048fc <process_user_input+0x7c0>)
 8004898:	f007 fe8a 	bl	800c5b0 <iprintf>
			 break;
 800489c:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800489e:	4b18      	ldr	r3, [pc, #96]	; (8004900 <process_user_input+0x7c4>)
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	9200      	str	r2, [sp, #0]
 80048a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048a6:	f001 fb0b 	bl	8005ec0 <preference_writer_ready>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f083 0301 	eor.w	r3, r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <process_user_input+0x780>
 80048b6:	4812      	ldr	r0, [pc, #72]	; (8004900 <process_user_input+0x7c4>)
 80048b8:	f001 faf3 	bl	8005ea2 <preference_writer_open>
	 preference_writer_flush(&prefs);
 80048bc:	4810      	ldr	r0, [pc, #64]	; (8004900 <process_user_input+0x7c4>)
 80048be:	f001 fb0d 	bl	8005edc <preference_writer_flush>
	 preference_writer_close(&prefs);
 80048c2:	480f      	ldr	r0, [pc, #60]	; (8004900 <process_user_input+0x7c4>)
 80048c4:	f001 fb88 	bl	8005fd8 <preference_writer_close>
	 preference_writer_load(prefs);
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <process_user_input+0x7c4>)
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	9200      	str	r2, [sp, #0]
 80048ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048d0:	f001 fb40 	bl	8005f54 <preference_writer_load>

	 enter_setup_state();
 80048d4:	f7ff f968 	bl	8003ba8 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	741a      	strb	r2, [r3, #16]
	 fsmstate->cmd_id = 0;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	745a      	strb	r2, [r3, #17]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3308      	adds	r3, #8
 80048e8:	2208      	movs	r2, #8
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f007 f9ed 	bl	800bccc <memset>
 }
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	0801116c 	.word	0x0801116c
 8004900:	2000083c 	.word	0x2000083c

08004904 <reset_flash_values>:


 void reset_flash_values(){
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af02      	add	r7, sp, #8

	PHASE_ORDER = 0;
 800490a:	4b43      	ldr	r3, [pc, #268]	; (8004a18 <reset_flash_values+0x114>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
	CAN_ID = 1;
 8004910:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <reset_flash_values+0x114>)
 8004912:	2201      	movs	r2, #1
 8004914:	605a      	str	r2, [r3, #4]
	CAN_MASTER = 0;
 8004916:	4b40      	ldr	r3, [pc, #256]	; (8004a18 <reset_flash_values+0x114>)
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
	CAN_TIMEOUT = 1000;
 800491c:	4b3e      	ldr	r3, [pc, #248]	; (8004a18 <reset_flash_values+0x114>)
 800491e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004922:	60da      	str	r2, [r3, #12]
	EN_ENC_FILTER = 0;
 8004924:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <reset_flash_values+0x114>)
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
	EN_ENC_LINEARIZE = 0;
 800492a:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <reset_flash_values+0x114>)
 800492c:	2200      	movs	r2, #0
 800492e:	615a      	str	r2, [r3, #20]
	E_ZERO = 0;
 8004930:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <reset_flash_values+0x114>)
 8004932:	2200      	movs	r2, #0
 8004934:	61da      	str	r2, [r3, #28]
	M_ZERO = 0;
 8004936:	4b38      	ldr	r3, [pc, #224]	; (8004a18 <reset_flash_values+0x114>)
 8004938:	2200      	movs	r2, #0
 800493a:	619a      	str	r2, [r3, #24]

	I_BW = 1000;
 800493c:	4b37      	ldr	r3, [pc, #220]	; (8004a1c <reset_flash_values+0x118>)
 800493e:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <reset_flash_values+0x11c>)
 8004940:	609a      	str	r2, [r3, #8]
	I_MAX=40;
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <reset_flash_values+0x118>)
 8004944:	4a37      	ldr	r2, [pc, #220]	; (8004a24 <reset_flash_values+0x120>)
 8004946:	60da      	str	r2, [r3, #12]
	I_MAX_CONT = 14.0f;
 8004948:	4b34      	ldr	r3, [pc, #208]	; (8004a1c <reset_flash_values+0x118>)
 800494a:	4a37      	ldr	r2, [pc, #220]	; (8004a28 <reset_flash_values+0x124>)
 800494c:	611a      	str	r2, [r3, #16]
	I_CAL = 5.0f;
 800494e:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <reset_flash_values+0x118>)
 8004950:	4a36      	ldr	r2, [pc, #216]	; (8004a2c <reset_flash_values+0x128>)
 8004952:	615a      	str	r2, [r3, #20]
	I_FW_MAX=0;
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <reset_flash_values+0x118>)
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	619a      	str	r2, [r3, #24]

//	K_SCALE = 0.000133f;          // K_loop/Loop BW (Hz) 0.0042
//	KI_D = 0.0373f;                // PI zero, in radians per sample
//	KI_Q = 0.0373f;                // PI zero, in radians per sample

	PPAIRS = 21.0f;
 800495c:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <reset_flash_values+0x118>)
 800495e:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <reset_flash_values+0x12c>)
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
	GR = 6.0f;
 8004962:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <reset_flash_values+0x118>)
 8004964:	4a33      	ldr	r2, [pc, #204]	; (8004a34 <reset_flash_values+0x130>)
 8004966:	635a      	str	r2, [r3, #52]	; 0x34
	KT_OUT = 1.0f;
 8004968:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <reset_flash_values+0x118>)
 800496a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
	L_D = 0.000003f;
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <reset_flash_values+0x118>)
 8004972:	4a31      	ldr	r2, [pc, #196]	; (8004a38 <reset_flash_values+0x134>)
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c
	L_Q = 0.000003f;
 8004976:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <reset_flash_values+0x118>)
 8004978:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <reset_flash_values+0x134>)
 800497a:	641a      	str	r2, [r3, #64]	; 0x40
	R_PHASE = 0.433f;
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <reset_flash_values+0x118>)
 800497e:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <reset_flash_values+0x138>)
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
	R_NOMINAL = 0.0f;
 8004982:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <reset_flash_values+0x118>)
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	649a      	str	r2, [r3, #72]	; 0x48

	R_TH = 1.25f;
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <reset_flash_values+0x118>)
 800498c:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <reset_flash_values+0x13c>)
 800498e:	64da      	str	r2, [r3, #76]	; 0x4c
	C_TH = 0.0f;
 8004990:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <reset_flash_values+0x118>)
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	651a      	str	r2, [r3, #80]	; 0x50
	INV_M_TH = 0.02825f;
 8004998:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <reset_flash_values+0x118>)
 800499a:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <reset_flash_values+0x140>)
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
	T_AMBIENT = 25.0f;
 800499e:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <reset_flash_values+0x118>)
 80049a0:	4a29      	ldr	r2, [pc, #164]	; (8004a48 <reset_flash_values+0x144>)
 80049a2:	659a      	str	r2, [r3, #88]	; 0x58
	TEMP_MAX = 125.0f;
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <reset_flash_values+0x118>)
 80049a6:	4a29      	ldr	r2, [pc, #164]	; (8004a4c <reset_flash_values+0x148>)
 80049a8:	65da      	str	r2, [r3, #92]	; 0x5c

	P_MIN = -12.5f;
 80049aa:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <reset_flash_values+0x118>)
 80049ac:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <reset_flash_values+0x14c>)
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
	P_MAX = 12.5f;
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <reset_flash_values+0x118>)
 80049b2:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <reset_flash_values+0x150>)
 80049b4:	665a      	str	r2, [r3, #100]	; 0x64
	V_MIN = -65.0f;
 80049b6:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <reset_flash_values+0x118>)
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <reset_flash_values+0x154>)
 80049ba:	669a      	str	r2, [r3, #104]	; 0x68
	V_MAX = 65.0f;
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <reset_flash_values+0x118>)
 80049be:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <reset_flash_values+0x158>)
 80049c0:	66da      	str	r2, [r3, #108]	; 0x6c
	KP_MAX = 500.0f;
 80049c2:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <reset_flash_values+0x118>)
 80049c4:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <reset_flash_values+0x15c>)
 80049c6:	671a      	str	r2, [r3, #112]	; 0x70
	KD_MAX = 10.0f;
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <reset_flash_values+0x118>)
 80049ca:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <reset_flash_values+0x160>)
 80049cc:	675a      	str	r2, [r3, #116]	; 0x74
	T_MIN = -72.0f;
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <reset_flash_values+0x118>)
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <reset_flash_values+0x164>)
 80049d2:	679a      	str	r2, [r3, #120]	; 0x78
	T_MAX = 72.0f;
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <reset_flash_values+0x118>)
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <reset_flash_values+0x168>)
 80049d8:	67da      	str	r2, [r3, #124]	; 0x7c

	/* Write new settings to flash */
	if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80049da:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <reset_flash_values+0x16c>)
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	9200      	str	r2, [sp, #0]
 80049e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e2:	f001 fa6d 	bl	8005ec0 <preference_writer_ready>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f083 0301 	eor.w	r3, r3, #1
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <reset_flash_values+0xf4>
 80049f2:	481f      	ldr	r0, [pc, #124]	; (8004a70 <reset_flash_values+0x16c>)
 80049f4:	f001 fa55 	bl	8005ea2 <preference_writer_open>
	preference_writer_flush(&prefs);
 80049f8:	481d      	ldr	r0, [pc, #116]	; (8004a70 <reset_flash_values+0x16c>)
 80049fa:	f001 fa6f 	bl	8005edc <preference_writer_flush>
	preference_writer_close(&prefs);
 80049fe:	481c      	ldr	r0, [pc, #112]	; (8004a70 <reset_flash_values+0x16c>)
 8004a00:	f001 faea 	bl	8005fd8 <preference_writer_close>
	preference_writer_load(prefs);
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <reset_flash_values+0x16c>)
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	9200      	str	r2, [sp, #0]
 8004a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a0c:	f001 faa2 	bl	8005f54 <preference_writer_load>

 }
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	2000043c 	.word	0x2000043c
 8004a1c:	2000033c 	.word	0x2000033c
 8004a20:	447a0000 	.word	0x447a0000
 8004a24:	42200000 	.word	0x42200000
 8004a28:	41600000 	.word	0x41600000
 8004a2c:	40a00000 	.word	0x40a00000
 8004a30:	41a80000 	.word	0x41a80000
 8004a34:	40c00000 	.word	0x40c00000
 8004a38:	3649539c 	.word	0x3649539c
 8004a3c:	3eddb22d 	.word	0x3eddb22d
 8004a40:	3fa00000 	.word	0x3fa00000
 8004a44:	3ce76c8b 	.word	0x3ce76c8b
 8004a48:	41c80000 	.word	0x41c80000
 8004a4c:	42fa0000 	.word	0x42fa0000
 8004a50:	c1480000 	.word	0xc1480000
 8004a54:	41480000 	.word	0x41480000
 8004a58:	c2820000 	.word	0xc2820000
 8004a5c:	42820000 	.word	0x42820000
 8004a60:	43fa0000 	.word	0x43fa0000
 8004a64:	41200000 	.word	0x41200000
 8004a68:	c2900000 	.word	0xc2900000
 8004a6c:	42900000 	.word	0x42900000
 8004a70:	2000083c 	.word	0x2000083c

08004a74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	; 0x28
 8004a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	605a      	str	r2, [r3, #4]
 8004a84:	609a      	str	r2, [r3, #8]
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	4a37      	ldr	r2, [pc, #220]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9a:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a29      	ldr	r2, [pc, #164]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <MX_GPIO_Init+0xfc>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin, GPIO_PIN_RESET);
 8004afa:	2200      	movs	r2, #0
 8004afc:	f648 0110 	movw	r1, #34832	; 0x8810
 8004b00:	481c      	ldr	r0, [pc, #112]	; (8004b74 <MX_GPIO_Init+0x100>)
 8004b02:	f003 fde3 	bl	80086cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2120      	movs	r1, #32
 8004b0a:	481b      	ldr	r0, [pc, #108]	; (8004b78 <MX_GPIO_Init+0x104>)
 8004b0c:	f003 fdde 	bl	80086cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b20:	f107 0314 	add.w	r3, r7, #20
 8004b24:	4619      	mov	r1, r3
 8004b26:	4814      	ldr	r0, [pc, #80]	; (8004b78 <MX_GPIO_Init+0x104>)
 8004b28:	f003 fc3c 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin;
 8004b2c:	f648 0310 	movw	r3, #34832	; 0x8810
 8004b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b32:	2301      	movs	r3, #1
 8004b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4619      	mov	r1, r3
 8004b44:	480b      	ldr	r0, [pc, #44]	; (8004b74 <MX_GPIO_Init+0x100>)
 8004b46:	f003 fc2d 	bl	80083a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b56:	2303      	movs	r3, #3
 8004b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b5a:	f107 0314 	add.w	r3, r7, #20
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4805      	ldr	r0, [pc, #20]	; (8004b78 <MX_GPIO_Init+0x104>)
 8004b62:	f003 fc1f 	bl	80083a4 <HAL_GPIO_Init>

}
 8004b66:	bf00      	nop
 8004b68:	3728      	adds	r7, #40	; 0x28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40020000 	.word	0x40020000
 8004b78:	40020800 	.word	0x40020800
 8004b7c:	00000000 	.word	0x00000000

08004b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b84:	b08e      	sub	sp, #56	; 0x38
 8004b86:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b88:	f002 f9a2 	bl	8006ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b8c:	f000 fc92 	bl	80054b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b90:	f7ff ff70 	bl	8004a74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004b94:	f002 f8d4 	bl	8006d40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004b98:	f001 feda 	bl	8006950 <MX_TIM1_Init>
  MX_CAN1_Init();
 8004b9c:	f7fd f8ee 	bl	8001d7c <MX_CAN1_Init>
  MX_SPI1_Init();
 8004ba0:	f001 fa2a 	bl	8005ff8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8004ba4:	f001 fa60 	bl	8006068 <MX_SPI3_Init>
  MX_ADC1_Init();
 8004ba8:	f7fc fa46 	bl	8001038 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004bac:	f7fc faae 	bl	800110c <MX_ADC2_Init>
  MX_ADC3_Init();
 8004bb0:	f7fc faf6 	bl	80011a0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8004bb4:	f001 ff84 	bl	8006ac0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004bb8:	f001 ffce 	bl	8006b58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // enable this to use delay_us() function
 8004bbc:	48ab      	ldr	r0, [pc, #684]	; (8004e6c <main+0x2ec>)
 8004bbe:	f004 ff1d 	bl	80099fc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); // enable this to time functions in us
 8004bc2:	48ab      	ldr	r0, [pc, #684]	; (8004e70 <main+0x2f0>)
 8004bc4:	f004 ff1a 	bl	80099fc <HAL_TIM_Base_Start>

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8004bc8:	2106      	movs	r1, #6
 8004bca:	48aa      	ldr	r0, [pc, #680]	; (8004e74 <main+0x2f4>)
 8004bcc:	f001 f958 	bl	8005e80 <preference_writer_init>
  preference_writer_load(prefs);
 8004bd0:	4ba8      	ldr	r3, [pc, #672]	; (8004e74 <main+0x2f4>)
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	9200      	str	r2, [sp, #0]
 8004bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bd8:	f001 f9bc 	bl	8005f54 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(PHASE_ORDER==-1){PHASE_ORDER = 0;};
 8004bdc:	4ba6      	ldr	r3, [pc, #664]	; (8004e78 <main+0x2f8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be4:	d102      	bne.n	8004bec <main+0x6c>
 8004be6:	4ba4      	ldr	r3, [pc, #656]	; (8004e78 <main+0x2f8>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004bec:	4ba2      	ldr	r3, [pc, #648]	; (8004e78 <main+0x2f8>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf4:	d102      	bne.n	8004bfc <main+0x7c>
 8004bf6:	4ba0      	ldr	r3, [pc, #640]	; (8004e78 <main+0x2f8>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004bfc:	4b9e      	ldr	r3, [pc, #632]	; (8004e78 <main+0x2f8>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c04:	d102      	bne.n	8004c0c <main+0x8c>
 8004c06:	4b9c      	ldr	r3, [pc, #624]	; (8004e78 <main+0x2f8>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8004c0c:	4b9a      	ldr	r3, [pc, #616]	; (8004e78 <main+0x2f8>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c14:	d103      	bne.n	8004c1e <main+0x9e>
 8004c16:	4b98      	ldr	r3, [pc, #608]	; (8004e78 <main+0x2f8>)
 8004c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c1c:	60da      	str	r2, [r3, #12]
  if(EN_ENC_FILTER ==-1){EN_ENC_FILTER = 0;}
 8004c1e:	4b96      	ldr	r3, [pc, #600]	; (8004e78 <main+0x2f8>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c26:	d102      	bne.n	8004c2e <main+0xae>
 8004c28:	4b93      	ldr	r3, [pc, #588]	; (8004e78 <main+0x2f8>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
  if(EN_ENC_LINEARIZE ==-1){EN_ENC_LINEARIZE = 0;}
 8004c2e:	4b92      	ldr	r3, [pc, #584]	; (8004e78 <main+0x2f8>)
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c36:	d102      	bne.n	8004c3e <main+0xbe>
 8004c38:	4b8f      	ldr	r3, [pc, #572]	; (8004e78 <main+0x2f8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	615a      	str	r2, [r3, #20]
  if(E_ZERO==-1){E_ZERO = 0;}
 8004c3e:	4b8e      	ldr	r3, [pc, #568]	; (8004e78 <main+0x2f8>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c46:	d102      	bne.n	8004c4e <main+0xce>
 8004c48:	4b8b      	ldr	r3, [pc, #556]	; (8004e78 <main+0x2f8>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	61da      	str	r2, [r3, #28]
  if(M_ZERO==-1){M_ZERO = 0;}
 8004c4e:	4b8a      	ldr	r3, [pc, #552]	; (8004e78 <main+0x2f8>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c56:	d102      	bne.n	8004c5e <main+0xde>
 8004c58:	4b87      	ldr	r3, [pc, #540]	; (8004e78 <main+0x2f8>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	619a      	str	r2, [r3, #24]

  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8004c5e:	4b87      	ldr	r3, [pc, #540]	; (8004e7c <main+0x2fc>)
 8004c60:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c64:	eef4 7a67 	vcmp.f32	s15, s15
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	d609      	bvs.n	8004c82 <main+0x102>
 8004c6e:	4b83      	ldr	r3, [pc, #524]	; (8004e7c <main+0x2fc>)
 8004c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c74:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c78:	eef4 7a47 	vcmp.f32	s15, s14
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	d102      	bne.n	8004c88 <main+0x108>
 8004c82:	4b7e      	ldr	r3, [pc, #504]	; (8004e7c <main+0x2fc>)
 8004c84:	4a7e      	ldr	r2, [pc, #504]	; (8004e80 <main+0x300>)
 8004c86:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004c88:	4b7c      	ldr	r3, [pc, #496]	; (8004e7c <main+0x2fc>)
 8004c8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c8e:	eef4 7a67 	vcmp.f32	s15, s15
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	d609      	bvs.n	8004cac <main+0x12c>
 8004c98:	4b78      	ldr	r3, [pc, #480]	; (8004e7c <main+0x2fc>)
 8004c9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c9e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ca2:	eef4 7a47 	vcmp.f32	s15, s14
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	d102      	bne.n	8004cb2 <main+0x132>
 8004cac:	4b73      	ldr	r3, [pc, #460]	; (8004e7c <main+0x2fc>)
 8004cae:	4a75      	ldr	r2, [pc, #468]	; (8004e84 <main+0x304>)
 8004cb0:	60da      	str	r2, [r3, #12]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004cb2:	4b72      	ldr	r3, [pc, #456]	; (8004e7c <main+0x2fc>)
 8004cb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cb8:	eef4 7a67 	vcmp.f32	s15, s15
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	d609      	bvs.n	8004cd6 <main+0x156>
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	; (8004e7c <main+0x2fc>)
 8004cc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cc8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ccc:	eef4 7a47 	vcmp.f32	s15, s14
 8004cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd4:	d102      	bne.n	8004cdc <main+0x15c>
 8004cd6:	4b69      	ldr	r3, [pc, #420]	; (8004e7c <main+0x2fc>)
 8004cd8:	4a6b      	ldr	r2, [pc, #428]	; (8004e88 <main+0x308>)
 8004cda:	611a      	str	r2, [r3, #16]
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004cdc:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <main+0x2fc>)
 8004cde:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ce2:	eef4 7a67 	vcmp.f32	s15, s15
 8004ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cea:	d609      	bvs.n	8004d00 <main+0x180>
 8004cec:	4b63      	ldr	r3, [pc, #396]	; (8004e7c <main+0x2fc>)
 8004cee:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cf2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004cf6:	eef4 7a47 	vcmp.f32	s15, s14
 8004cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfe:	d102      	bne.n	8004d06 <main+0x186>
 8004d00:	4b5e      	ldr	r3, [pc, #376]	; (8004e7c <main+0x2fc>)
 8004d02:	4a62      	ldr	r2, [pc, #392]	; (8004e8c <main+0x30c>)
 8004d04:	615a      	str	r2, [r3, #20]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004d06:	4b5d      	ldr	r3, [pc, #372]	; (8004e7c <main+0x2fc>)
 8004d08:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d0c:	eef4 7a67 	vcmp.f32	s15, s15
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	d609      	bvs.n	8004d2a <main+0x1aa>
 8004d16:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <main+0x2fc>)
 8004d18:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d20:	eef4 7a47 	vcmp.f32	s15, s14
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	d103      	bne.n	8004d32 <main+0x1b2>
 8004d2a:	4b54      	ldr	r3, [pc, #336]	; (8004e7c <main+0x2fc>)
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	619a      	str	r2, [r3, #24]

//  if(isnan(K_SCALE) || K_SCALE==-1){K_SCALE = 0.000133f;}
//  if(isnan(KI_D) || KI_D==-1){KI_D = 0.0373f;}
//  if(isnan(KI_Q) || KI_Q ==-1){KI_Q = 0.0373f;}

  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8004d32:	4b52      	ldr	r3, [pc, #328]	; (8004e7c <main+0x2fc>)
 8004d34:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004d38:	eef4 7a67 	vcmp.f32	s15, s15
 8004d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d40:	d609      	bvs.n	8004d56 <main+0x1d6>
 8004d42:	4b4e      	ldr	r3, [pc, #312]	; (8004e7c <main+0x2fc>)
 8004d44:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004d48:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d4c:	eef4 7a47 	vcmp.f32	s15, s14
 8004d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d54:	d102      	bne.n	8004d5c <main+0x1dc>
 8004d56:	4b49      	ldr	r3, [pc, #292]	; (8004e7c <main+0x2fc>)
 8004d58:	4a4d      	ldr	r2, [pc, #308]	; (8004e90 <main+0x310>)
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(GR) || GR==-1){GR = 6.0f;}
 8004d5c:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <main+0x2fc>)
 8004d5e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d62:	eef4 7a67 	vcmp.f32	s15, s15
 8004d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6a:	d609      	bvs.n	8004d80 <main+0x200>
 8004d6c:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <main+0x2fc>)
 8004d6e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d76:	eef4 7a47 	vcmp.f32	s15, s14
 8004d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7e:	d102      	bne.n	8004d86 <main+0x206>
 8004d80:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <main+0x2fc>)
 8004d82:	4a44      	ldr	r2, [pc, #272]	; (8004e94 <main+0x314>)
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34
  if(isnan(KT_OUT) || KT_OUT==-1){KT_OUT = 1.0f;}
 8004d86:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <main+0x2fc>)
 8004d88:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004d8c:	eef4 7a67 	vcmp.f32	s15, s15
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	d609      	bvs.n	8004daa <main+0x22a>
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <main+0x2fc>)
 8004d98:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004d9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004da0:	eef4 7a47 	vcmp.f32	s15, s14
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	d103      	bne.n	8004db2 <main+0x232>
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <main+0x2fc>)
 8004dac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(L_D) || L_D==-1){L_D = 0.000003f;}
 8004db2:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <main+0x2fc>)
 8004db4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004db8:	eef4 7a67 	vcmp.f32	s15, s15
 8004dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc0:	d609      	bvs.n	8004dd6 <main+0x256>
 8004dc2:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <main+0x2fc>)
 8004dc4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004dc8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004dcc:	eef4 7a47 	vcmp.f32	s15, s14
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	d102      	bne.n	8004ddc <main+0x25c>
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <main+0x2fc>)
 8004dd8:	4a2f      	ldr	r2, [pc, #188]	; (8004e98 <main+0x318>)
 8004dda:	63da      	str	r2, [r3, #60]	; 0x3c
  if(isnan(L_Q) || L_Q==-1){L_Q = 0.000003f;}
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <main+0x2fc>)
 8004dde:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004de2:	eef4 7a67 	vcmp.f32	s15, s15
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	d609      	bvs.n	8004e00 <main+0x280>
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <main+0x2fc>)
 8004dee:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004df2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004df6:	eef4 7a47 	vcmp.f32	s15, s14
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	d102      	bne.n	8004e06 <main+0x286>
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <main+0x2fc>)
 8004e02:	4a25      	ldr	r2, [pc, #148]	; (8004e98 <main+0x318>)
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40
  if(isnan(R_PHASE) || R_PHASE==-1){R_PHASE = 0.433f;}
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <main+0x2fc>)
 8004e08:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004e0c:	eef4 7a67 	vcmp.f32	s15, s15
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	d609      	bvs.n	8004e2a <main+0x2aa>
 8004e16:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <main+0x2fc>)
 8004e18:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004e1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e20:	eef4 7a47 	vcmp.f32	s15, s14
 8004e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e28:	d102      	bne.n	8004e30 <main+0x2b0>
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <main+0x2fc>)
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <main+0x31c>)
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004e30:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <main+0x2fc>)
 8004e32:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004e36:	eef4 7a67 	vcmp.f32	s15, s15
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3e:	d609      	bvs.n	8004e54 <main+0x2d4>
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <main+0x2fc>)
 8004e42:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004e46:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e4a:	eef4 7a47 	vcmp.f32	s15, s14
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	d103      	bne.n	8004e5c <main+0x2dc>
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <main+0x2fc>)
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	649a      	str	r2, [r3, #72]	; 0x48

  if(isnan(R_TH) || R_TH==-1){R_TH = 1.25f;}
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <main+0x2fc>)
 8004e5e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004e62:	eef4 7a67 	vcmp.f32	s15, s15
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	e019      	b.n	8004ea0 <main+0x320>
 8004e6c:	200095c0 	.word	0x200095c0
 8004e70:	20009608 	.word	0x20009608
 8004e74:	2000083c 	.word	0x2000083c
 8004e78:	2000043c 	.word	0x2000043c
 8004e7c:	2000033c 	.word	0x2000033c
 8004e80:	447a0000 	.word	0x447a0000
 8004e84:	42200000 	.word	0x42200000
 8004e88:	41600000 	.word	0x41600000
 8004e8c:	40a00000 	.word	0x40a00000
 8004e90:	41a80000 	.word	0x41a80000
 8004e94:	40c00000 	.word	0x40c00000
 8004e98:	3649539c 	.word	0x3649539c
 8004e9c:	3eddb22d 	.word	0x3eddb22d
 8004ea0:	d609      	bvs.n	8004eb6 <main+0x336>
 8004ea2:	4bb5      	ldr	r3, [pc, #724]	; (8005178 <main+0x5f8>)
 8004ea4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004ea8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004eac:	eef4 7a47 	vcmp.f32	s15, s14
 8004eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb4:	d102      	bne.n	8004ebc <main+0x33c>
 8004eb6:	4bb0      	ldr	r3, [pc, #704]	; (8005178 <main+0x5f8>)
 8004eb8:	4ab0      	ldr	r2, [pc, #704]	; (800517c <main+0x5fc>)
 8004eba:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(C_TH) || C_TH==-1){C_TH = 0.0f;}
 8004ebc:	4bae      	ldr	r3, [pc, #696]	; (8005178 <main+0x5f8>)
 8004ebe:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004ec2:	eef4 7a67 	vcmp.f32	s15, s15
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	d609      	bvs.n	8004ee0 <main+0x360>
 8004ecc:	4baa      	ldr	r3, [pc, #680]	; (8005178 <main+0x5f8>)
 8004ece:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004ed2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ed6:	eef4 7a47 	vcmp.f32	s15, s14
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	d103      	bne.n	8004ee8 <main+0x368>
 8004ee0:	4ba5      	ldr	r3, [pc, #660]	; (8005178 <main+0x5f8>)
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(INV_M_TH) || INV_M_TH==-1){INV_M_TH = 0.02825f;}
 8004ee8:	4ba3      	ldr	r3, [pc, #652]	; (8005178 <main+0x5f8>)
 8004eea:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004eee:	eef4 7a67 	vcmp.f32	s15, s15
 8004ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef6:	d609      	bvs.n	8004f0c <main+0x38c>
 8004ef8:	4b9f      	ldr	r3, [pc, #636]	; (8005178 <main+0x5f8>)
 8004efa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004efe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f02:	eef4 7a47 	vcmp.f32	s15, s14
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	d102      	bne.n	8004f12 <main+0x392>
 8004f0c:	4b9a      	ldr	r3, [pc, #616]	; (8005178 <main+0x5f8>)
 8004f0e:	4a9c      	ldr	r2, [pc, #624]	; (8005180 <main+0x600>)
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(T_AMBIENT) || T_AMBIENT==-1){T_AMBIENT = 25.0f;}
 8004f12:	4b99      	ldr	r3, [pc, #612]	; (8005178 <main+0x5f8>)
 8004f14:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f18:	eef4 7a67 	vcmp.f32	s15, s15
 8004f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f20:	d609      	bvs.n	8004f36 <main+0x3b6>
 8004f22:	4b95      	ldr	r3, [pc, #596]	; (8005178 <main+0x5f8>)
 8004f24:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f2c:	eef4 7a47 	vcmp.f32	s15, s14
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	d102      	bne.n	8004f3c <main+0x3bc>
 8004f36:	4b90      	ldr	r3, [pc, #576]	; (8005178 <main+0x5f8>)
 8004f38:	4a92      	ldr	r2, [pc, #584]	; (8005184 <main+0x604>)
 8004f3a:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004f3c:	4b8e      	ldr	r3, [pc, #568]	; (8005178 <main+0x5f8>)
 8004f3e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f42:	eef4 7a67 	vcmp.f32	s15, s15
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d609      	bvs.n	8004f60 <main+0x3e0>
 8004f4c:	4b8a      	ldr	r3, [pc, #552]	; (8005178 <main+0x5f8>)
 8004f4e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f52:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f56:	eef4 7a47 	vcmp.f32	s15, s14
 8004f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5e:	d102      	bne.n	8004f66 <main+0x3e6>
 8004f60:	4b85      	ldr	r3, [pc, #532]	; (8005178 <main+0x5f8>)
 8004f62:	4a89      	ldr	r2, [pc, #548]	; (8005188 <main+0x608>)
 8004f64:	65da      	str	r2, [r3, #92]	; 0x5c

  if(isnan(P_MIN) || P_MIN==-1){P_MIN = -12.5f;}
 8004f66:	4b84      	ldr	r3, [pc, #528]	; (8005178 <main+0x5f8>)
 8004f68:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f6c:	eef4 7a67 	vcmp.f32	s15, s15
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	d609      	bvs.n	8004f8a <main+0x40a>
 8004f76:	4b80      	ldr	r3, [pc, #512]	; (8005178 <main+0x5f8>)
 8004f78:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f7c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f80:	eef4 7a47 	vcmp.f32	s15, s14
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	d102      	bne.n	8004f90 <main+0x410>
 8004f8a:	4b7b      	ldr	r3, [pc, #492]	; (8005178 <main+0x5f8>)
 8004f8c:	4a7f      	ldr	r2, [pc, #508]	; (800518c <main+0x60c>)
 8004f8e:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX) || P_MAX==-1){P_MAX = 12.5f;}
 8004f90:	4b79      	ldr	r3, [pc, #484]	; (8005178 <main+0x5f8>)
 8004f92:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004f96:	eef4 7a67 	vcmp.f32	s15, s15
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	d609      	bvs.n	8004fb4 <main+0x434>
 8004fa0:	4b75      	ldr	r3, [pc, #468]	; (8005178 <main+0x5f8>)
 8004fa2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004fa6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004faa:	eef4 7a47 	vcmp.f32	s15, s14
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	d102      	bne.n	8004fba <main+0x43a>
 8004fb4:	4b70      	ldr	r3, [pc, #448]	; (8005178 <main+0x5f8>)
 8004fb6:	4a76      	ldr	r2, [pc, #472]	; (8005190 <main+0x610>)
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64
  if(isnan(V_MIN) || V_MIN==-1){V_MIN = -65.0f;}
 8004fba:	4b6f      	ldr	r3, [pc, #444]	; (8005178 <main+0x5f8>)
 8004fbc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004fc0:	eef4 7a67 	vcmp.f32	s15, s15
 8004fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc8:	d609      	bvs.n	8004fde <main+0x45e>
 8004fca:	4b6b      	ldr	r3, [pc, #428]	; (8005178 <main+0x5f8>)
 8004fcc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004fd0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004fd4:	eef4 7a47 	vcmp.f32	s15, s14
 8004fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fdc:	d102      	bne.n	8004fe4 <main+0x464>
 8004fde:	4b66      	ldr	r3, [pc, #408]	; (8005178 <main+0x5f8>)
 8004fe0:	4a6c      	ldr	r2, [pc, #432]	; (8005194 <main+0x614>)
 8004fe2:	669a      	str	r2, [r3, #104]	; 0x68
  if(isnan(V_MAX) || V_MAX==-1){V_MAX = 65.0f;}
 8004fe4:	4b64      	ldr	r3, [pc, #400]	; (8005178 <main+0x5f8>)
 8004fe6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004fea:	eef4 7a67 	vcmp.f32	s15, s15
 8004fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff2:	d609      	bvs.n	8005008 <main+0x488>
 8004ff4:	4b60      	ldr	r3, [pc, #384]	; (8005178 <main+0x5f8>)
 8004ff6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004ffa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ffe:	eef4 7a47 	vcmp.f32	s15, s14
 8005002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005006:	d102      	bne.n	800500e <main+0x48e>
 8005008:	4b5b      	ldr	r3, [pc, #364]	; (8005178 <main+0x5f8>)
 800500a:	4a63      	ldr	r2, [pc, #396]	; (8005198 <main+0x618>)
 800500c:	66da      	str	r2, [r3, #108]	; 0x6c
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800500e:	4b5a      	ldr	r3, [pc, #360]	; (8005178 <main+0x5f8>)
 8005010:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005014:	eef4 7a67 	vcmp.f32	s15, s15
 8005018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501c:	d609      	bvs.n	8005032 <main+0x4b2>
 800501e:	4b56      	ldr	r3, [pc, #344]	; (8005178 <main+0x5f8>)
 8005020:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005024:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005028:	eef4 7a47 	vcmp.f32	s15, s14
 800502c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005030:	d102      	bne.n	8005038 <main+0x4b8>
 8005032:	4b51      	ldr	r3, [pc, #324]	; (8005178 <main+0x5f8>)
 8005034:	4a59      	ldr	r2, [pc, #356]	; (800519c <main+0x61c>)
 8005036:	671a      	str	r2, [r3, #112]	; 0x70
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 10.0f;}
 8005038:	4b4f      	ldr	r3, [pc, #316]	; (8005178 <main+0x5f8>)
 800503a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800503e:	eef4 7a67 	vcmp.f32	s15, s15
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	d609      	bvs.n	800505c <main+0x4dc>
 8005048:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <main+0x5f8>)
 800504a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800504e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005052:	eef4 7a47 	vcmp.f32	s15, s14
 8005056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505a:	d102      	bne.n	8005062 <main+0x4e2>
 800505c:	4b46      	ldr	r3, [pc, #280]	; (8005178 <main+0x5f8>)
 800505e:	4a50      	ldr	r2, [pc, #320]	; (80051a0 <main+0x620>)
 8005060:	675a      	str	r2, [r3, #116]	; 0x74
  if(isnan(T_MIN) || T_MIN==-1){T_MIN = -72.0f;}
 8005062:	4b45      	ldr	r3, [pc, #276]	; (8005178 <main+0x5f8>)
 8005064:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005068:	eef4 7a67 	vcmp.f32	s15, s15
 800506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005070:	d609      	bvs.n	8005086 <main+0x506>
 8005072:	4b41      	ldr	r3, [pc, #260]	; (8005178 <main+0x5f8>)
 8005074:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005078:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800507c:	eef4 7a47 	vcmp.f32	s15, s14
 8005080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005084:	d102      	bne.n	800508c <main+0x50c>
 8005086:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <main+0x5f8>)
 8005088:	4a46      	ldr	r2, [pc, #280]	; (80051a4 <main+0x624>)
 800508a:	679a      	str	r2, [r3, #120]	; 0x78
  if(isnan(T_MAX) || T_MAX==-1){T_MAX = 72.0f;}
 800508c:	4b3a      	ldr	r3, [pc, #232]	; (8005178 <main+0x5f8>)
 800508e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8005092:	eef4 7a67 	vcmp.f32	s15, s15
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	d609      	bvs.n	80050b0 <main+0x530>
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <main+0x5f8>)
 800509e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80050a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80050a6:	eef4 7a47 	vcmp.f32	s15, s14
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d102      	bne.n	80050b6 <main+0x536>
 80050b0:	4b31      	ldr	r3, [pc, #196]	; (8005178 <main+0x5f8>)
 80050b2:	4a3d      	ldr	r2, [pc, #244]	; (80051a8 <main+0x628>)
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 80050b6:	a32e      	add	r3, pc, #184	; (adr r3, 8005170 <main+0x5f0>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	483b      	ldr	r0, [pc, #236]	; (80051ac <main+0x62c>)
 80050be:	f007 fa77 	bl	800c5b0 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 80050c2:	483b      	ldr	r0, [pc, #236]	; (80051b0 <main+0x630>)
 80050c4:	f7fd fe62 	bl	8002d8c <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80050c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80050cc:	2100      	movs	r1, #0
 80050ce:	4839      	ldr	r0, [pc, #228]	; (80051b4 <main+0x634>)
 80050d0:	f006 fdfc 	bl	800bccc <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 80050d4:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <main+0x638>)
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	4a38      	ldr	r2, [pc, #224]	; (80051bc <main+0x63c>)
 80050da:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  comm_encoder.e_zero = E_ZERO;
 80050de:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <main+0x638>)
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	4a36      	ldr	r2, [pc, #216]	; (80051bc <main+0x63c>)
 80050e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  comm_encoder.ppairs = PPAIRS;
 80050e8:	4b23      	ldr	r3, [pc, #140]	; (8005178 <main+0x5f8>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	4a33      	ldr	r2, [pc, #204]	; (80051bc <main+0x63c>)
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 80050f0:	2164      	movs	r1, #100	; 0x64
 80050f2:	4832      	ldr	r0, [pc, #200]	; (80051bc <main+0x63c>)
 80050f4:	f000 fbf8 	bl	80058e8 <ps_warmup>

  memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));	// Copy the linearization lookup table
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <main+0x63c>)
 80050fa:	4a2f      	ldr	r2, [pc, #188]	; (80051b8 <main+0x638>)
 80050fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005100:	f102 0120 	add.w	r1, r2, #32
 8005104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005108:	4618      	mov	r0, r3
 800510a:	f006 fdd1 	bl	800bcb0 <memcpy>
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 800510e:	482c      	ldr	r0, [pc, #176]	; (80051c0 <main+0x640>)
 8005110:	f001 ffb8 	bl	8007084 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8005114:	482b      	ldr	r0, [pc, #172]	; (80051c4 <main+0x644>)
 8005116:	f001 ffb5 	bl	8007084 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800511a:	482b      	ldr	r0, [pc, #172]	; (80051c8 <main+0x648>)
 800511c:	f001 ffb2 	bl	8007084 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8005120:	2201      	movs	r2, #1
 8005122:	2110      	movs	r1, #16
 8005124:	4829      	ldr	r0, [pc, #164]	; (80051cc <main+0x64c>)
 8005126:	f003 fad1 	bl	80086cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 800512a:	2201      	movs	r2, #1
 800512c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005130:	4826      	ldr	r0, [pc, #152]	; (80051cc <main+0x64c>)
 8005132:	f003 facb 	bl	80086cc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005136:	2001      	movs	r0, #1
 8005138:	f001 ff3c 	bl	8006fb4 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1); //  TODO: enable gate drive fault?
 800513c:	4924      	ldr	r1, [pc, #144]	; (80051d0 <main+0x650>)
 800513e:	2301      	movs	r3, #1
 8005140:	9306      	str	r3, [sp, #24]
 8005142:	2300      	movs	r3, #0
 8005144:	9305      	str	r3, [sp, #20]
 8005146:	2300      	movs	r3, #0
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	2300      	movs	r3, #0
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	2300      	movs	r3, #0
 8005150:	9302      	str	r3, [sp, #8]
 8005152:	2301      	movs	r3, #1
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	2300      	movs	r3, #0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2301      	movs	r3, #1
 800515c:	2200      	movs	r2, #0
 800515e:	c903      	ldmia	r1, {r0, r1}
 8005160:	f7fd f85b 	bl	800221a <drv_write_DCR>
  HAL_Delay(1);
 8005164:	2001      	movs	r0, #1
 8005166:	f001 ff25 	bl	8006fb4 <HAL_Delay>
 800516a:	e033      	b.n	80051d4 <main+0x654>
 800516c:	f3af 8000 	nop.w
 8005170:	c0000000 	.word	0xc0000000
 8005174:	400828f5 	.word	0x400828f5
 8005178:	2000033c 	.word	0x2000033c
 800517c:	3fa00000 	.word	0x3fa00000
 8005180:	3ce76c8b 	.word	0x3ce76c8b
 8005184:	41c80000 	.word	0x41c80000
 8005188:	42fa0000 	.word	0x42fa0000
 800518c:	c1480000 	.word	0xc1480000
 8005190:	41480000 	.word	0x41480000
 8005194:	c2820000 	.word	0xc2820000
 8005198:	42820000 	.word	0x42820000
 800519c:	43fa0000 	.word	0x43fa0000
 80051a0:	41200000 	.word	0x41200000
 80051a4:	c2900000 	.word	0xc2900000
 80051a8:	42900000 	.word	0x42900000
 80051ac:	08011194 	.word	0x08011194
 80051b0:	20000850 	.word	0x20000850
 80051b4:	200090ec 	.word	0x200090ec
 80051b8:	2000043c 	.word	0x2000043c
 80051bc:	20000b5c 	.word	0x20000b5c
 80051c0:	2000023c 	.word	0x2000023c
 80051c4:	20000284 	.word	0x20000284
 80051c8:	200002cc 	.word	0x200002cc
 80051cc:	40020000 	.word	0x40020000
 80051d0:	20000eb8 	.word	0x20000eb8
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, DIS_SEN_EN, 0x1, 0x1, 0x1, SEN_LVL_1_0); // calibrate shunt amplifiers
 80051d4:	49a6      	ldr	r1, [pc, #664]	; (8005470 <main+0x8f0>)
 80051d6:	2303      	movs	r3, #3
 80051d8:	9306      	str	r3, [sp, #24]
 80051da:	2301      	movs	r3, #1
 80051dc:	9305      	str	r3, [sp, #20]
 80051de:	2301      	movs	r3, #1
 80051e0:	9304      	str	r3, [sp, #16]
 80051e2:	2301      	movs	r3, #1
 80051e4:	9303      	str	r3, [sp, #12]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9302      	str	r3, [sp, #8]
 80051ea:	2303      	movs	r3, #3
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	2300      	movs	r3, #0
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	2301      	movs	r3, #1
 80051f4:	2200      	movs	r2, #0
 80051f6:	c903      	ldmia	r1, {r0, r1}
 80051f8:	f7fd f87f 	bl	80022fa <drv_write_CSACR>
  HAL_Delay(1);
 80051fc:	2001      	movs	r0, #1
 80051fe:	f001 fed9 	bl	8006fb4 <HAL_Delay>
  zero_current(&controller); // moved this between the two drv_write_CSACR calls to match mbed fw version
 8005202:	489c      	ldr	r0, [pc, #624]	; (8005474 <main+0x8f4>)
 8005204:	f7fd fd7e 	bl	8002d04 <zero_current>
  HAL_Delay(1);
 8005208:	2001      	movs	r0, #1
 800520a:	f001 fed3 	bl	8006fb4 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, DIS_SEN_DIS, 0x0, 0x0, 0x0, SEN_LVL_1_0); // TODO: enable sensing of overcurrent fault?
 800520e:	4998      	ldr	r1, [pc, #608]	; (8005470 <main+0x8f0>)
 8005210:	2303      	movs	r3, #3
 8005212:	9306      	str	r3, [sp, #24]
 8005214:	2300      	movs	r3, #0
 8005216:	9305      	str	r3, [sp, #20]
 8005218:	2300      	movs	r3, #0
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	2300      	movs	r3, #0
 800521e:	9303      	str	r3, [sp, #12]
 8005220:	2301      	movs	r3, #1
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	2303      	movs	r3, #3
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	2300      	movs	r3, #0
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2301      	movs	r3, #1
 800522e:	2200      	movs	r2, #0
 8005230:	c903      	ldmia	r1, {r0, r1}
 8005232:	f7fd f862 	bl	80022fa <drv_write_CSACR>
  HAL_Delay(1);
 8005236:	2001      	movs	r0, #1
 8005238:	f001 febc 	bl	8006fb4 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_NONE, OCP_DEG_8US, VDS_LVL_1_88); // TODO: reduce VDS level and add OCP_RETRY?
 800523c:	498c      	ldr	r1, [pc, #560]	; (8005470 <main+0x8f0>)
 800523e:	230f      	movs	r3, #15
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	2303      	movs	r3, #3
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	2303      	movs	r3, #3
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2300      	movs	r3, #0
 800524c:	2201      	movs	r2, #1
 800524e:	c903      	ldmia	r1, {r0, r1}
 8005250:	f7fd f825 	bl	800229e <drv_write_OCPCR>
  HAL_Delay(1);
 8005254:	2001      	movs	r0, #1
 8005256:	f001 fead 	bl	8006fb4 <HAL_Delay>
  drv_disable_gd(drv);
 800525a:	4b85      	ldr	r3, [pc, #532]	; (8005470 <main+0x8f0>)
 800525c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005260:	f7fd f8a7 	bl	80023b2 <drv_disable_gd>
  HAL_Delay(1);
 8005264:	2001      	movs	r0, #1
 8005266:	f001 fea5 	bl	8006fb4 <HAL_Delay>
  //drv_enable_gd(drv);
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 800526a:	4b82      	ldr	r3, [pc, #520]	; (8005474 <main+0x8f4>)
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005270:	4a80      	ldr	r2, [pc, #512]	; (8005474 <main+0x8f4>)
 8005272:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8005276:	4619      	mov	r1, r3
 8005278:	487f      	ldr	r0, [pc, #508]	; (8005478 <main+0x8f8>)
 800527a:	f007 f999 	bl	800c5b0 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800527e:	2100      	movs	r1, #0
 8005280:	487e      	ldr	r0, [pc, #504]	; (800547c <main+0x8fc>)
 8005282:	f004 fced 	bl	8009c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8005286:	2104      	movs	r1, #4
 8005288:	487c      	ldr	r0, [pc, #496]	; (800547c <main+0x8fc>)
 800528a:	f004 fce9 	bl	8009c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800528e:	2108      	movs	r1, #8
 8005290:	487a      	ldr	r0, [pc, #488]	; (800547c <main+0x8fc>)
 8005292:	f004 fce5 	bl	8009c60 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8005296:	487a      	ldr	r0, [pc, #488]	; (8005480 <main+0x900>)
 8005298:	f7fc fdf0 	bl	8001e7c <can_rx_init>
  can_tx_init(&can_tx);
 800529c:	4879      	ldr	r0, [pc, #484]	; (8005484 <main+0x904>)
 800529e:	f7fc fe1b 	bl	8001ed8 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 80052a2:	4879      	ldr	r0, [pc, #484]	; (8005488 <main+0x908>)
 80052a4:	f002 fca8 	bl	8007bf8 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x01,0x01); // commutation > communication
 80052a8:	2201      	movs	r2, #1
 80052aa:	2101      	movs	r1, #1
 80052ac:	2019      	movs	r0, #25
 80052ae:	f002 ffb0 	bl	8008212 <HAL_NVIC_SetPriority>
//  HAL_NVIC_SetPriority(CAN_ISR, 0x02, 0x02);

  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80052b2:	2201      	movs	r2, #1
 80052b4:	4975      	ldr	r1, [pc, #468]	; (800548c <main+0x90c>)
 80052b6:	4876      	ldr	r0, [pc, #472]	; (8005490 <main+0x910>)
 80052b8:	f005 fd2f 	bl	800ad1a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1); // start main control interrupt
 80052bc:	486f      	ldr	r0, [pc, #444]	; (800547c <main+0x8fc>)
 80052be:	f004 fc05 	bl	8009acc <HAL_TIM_Base_Start_IT>

  // Check encoder initialization here
  int new_offset = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]
  ps_sample(&comm_encoder, 0.001);
 80052c6:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8005494 <main+0x914>
 80052ca:	4873      	ldr	r0, [pc, #460]	; (8005498 <main+0x918>)
 80052cc:	f000 fb52 	bl	8005974 <ps_sample>
  HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80052d0:	2201      	movs	r2, #1
 80052d2:	2120      	movs	r1, #32
 80052d4:	4871      	ldr	r0, [pc, #452]	; (800549c <main+0x91c>)
 80052d6:	f003 f9f9 	bl	80086cc <HAL_GPIO_WritePin>
  drv_enable_gd(drv);
 80052da:	4b65      	ldr	r3, [pc, #404]	; (8005470 <main+0x8f0>)
 80052dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052e0:	f7fd f84d 	bl	800237e <drv_enable_gd>
  new_offset = check_encoder_init(&comm_encoder, &controller, &comm_encoder_cal);             // status = 1 is good
 80052e4:	4a6e      	ldr	r2, [pc, #440]	; (80054a0 <main+0x920>)
 80052e6:	4963      	ldr	r1, [pc, #396]	; (8005474 <main+0x8f4>)
 80052e8:	486b      	ldr	r0, [pc, #428]	; (8005498 <main+0x918>)
 80052ea:	f7fc fc03 	bl	8001af4 <check_encoder_init>
 80052ee:	60b8      	str	r0, [r7, #8]
  HAL_Delay(100);
 80052f0:	2064      	movs	r0, #100	; 0x64
 80052f2:	f001 fe5f 	bl	8006fb4 <HAL_Delay>
  drv_disable_gd(drv);
 80052f6:	4b5e      	ldr	r3, [pc, #376]	; (8005470 <main+0x8f0>)
 80052f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052fc:	f7fd f859 	bl	80023b2 <drv_disable_gd>
  HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8005300:	2200      	movs	r2, #0
 8005302:	2120      	movs	r1, #32
 8005304:	4865      	ldr	r0, [pc, #404]	; (800549c <main+0x91c>)
 8005306:	f003 f9e1 	bl	80086cc <HAL_GPIO_WritePin>

  E_ZERO = new_offset;
 800530a:	4a66      	ldr	r2, [pc, #408]	; (80054a4 <main+0x924>)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	61d3      	str	r3, [r2, #28]
  comm_encoder.e_zero = E_ZERO;
 8005310:	4b64      	ldr	r3, [pc, #400]	; (80054a4 <main+0x924>)
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4a60      	ldr	r2, [pc, #384]	; (8005498 <main+0x918>)
 8005316:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  printf(" Position Sensor Electrical Offset: %d\n\r", E_ZERO);
 800531a:	4b62      	ldr	r3, [pc, #392]	; (80054a4 <main+0x924>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4619      	mov	r1, r3
 8005320:	4861      	ldr	r0, [pc, #388]	; (80054a8 <main+0x928>)
 8005322:	f007 f945 	bl	800c5b0 <iprintf>

  // initialize filter here for position sensor
  HAL_Delay(100);
 8005326:	2064      	movs	r0, #100	; 0x64
 8005328:	f001 fe44 	bl	8006fb4 <HAL_Delay>
//  ps_filter_init(&comm_encoder);

  // average 100 samples for filter init values
  int num_filt_init = 100;
 800532c:	2364      	movs	r3, #100	; 0x64
 800532e:	607b      	str	r3, [r7, #4]
  float filt_prev_mech_temp = 0.0f;
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  float filt_prev_elec_temp = 0.0f;
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
  for (int i=0; i<num_filt_init; i++){
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e069      	b.n	8005416 <main+0x896>
	  filt_prev_mech_temp += (1.0/(float)num_filt_init)*comm_encoder.angle_multiturn[0];
 8005342:	6978      	ldr	r0, [r7, #20]
 8005344:	f7fb f920 	bl	8000588 <__aeabi_f2d>
 8005348:	4604      	mov	r4, r0
 800534a:	460d      	mov	r5, r1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005356:	ee17 0a90 	vmov	r0, s15
 800535a:	f7fb f915 	bl	8000588 <__aeabi_f2d>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	4951      	ldr	r1, [pc, #324]	; (80054ac <main+0x92c>)
 8005368:	f7fb fa90 	bl	800088c <__aeabi_ddiv>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4690      	mov	r8, r2
 8005372:	4699      	mov	r9, r3
 8005374:	4b48      	ldr	r3, [pc, #288]	; (8005498 <main+0x918>)
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb f905 	bl	8000588 <__aeabi_f2d>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4640      	mov	r0, r8
 8005384:	4649      	mov	r1, r9
 8005386:	f7fb f957 	bl	8000638 <__aeabi_dmul>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fa ff9b 	bl	80002cc <__adddf3>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	f7fb fc43 	bl	8000c28 <__aeabi_d2f>
 80053a2:	4603      	mov	r3, r0
 80053a4:	617b      	str	r3, [r7, #20]
	  filt_prev_elec_temp += (1.0/(float)num_filt_init)*comm_encoder.elec_angle;
 80053a6:	6938      	ldr	r0, [r7, #16]
 80053a8:	f7fb f8ee 	bl	8000588 <__aeabi_f2d>
 80053ac:	4604      	mov	r4, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ba:	ee17 0a90 	vmov	r0, s15
 80053be:	f7fb f8e3 	bl	8000588 <__aeabi_f2d>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	f04f 0000 	mov.w	r0, #0
 80053ca:	4938      	ldr	r1, [pc, #224]	; (80054ac <main+0x92c>)
 80053cc:	f7fb fa5e 	bl	800088c <__aeabi_ddiv>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4690      	mov	r8, r2
 80053d6:	4699      	mov	r9, r3
 80053d8:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <main+0x918>)
 80053da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fb f8d3 	bl	8000588 <__aeabi_f2d>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4640      	mov	r0, r8
 80053e8:	4649      	mov	r1, r9
 80053ea:	f7fb f925 	bl	8000638 <__aeabi_dmul>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4620      	mov	r0, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	f7fa ff69 	bl	80002cc <__adddf3>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4610      	mov	r0, r2
 8005400:	4619      	mov	r1, r3
 8005402:	f7fb fc11 	bl	8000c28 <__aeabi_d2f>
 8005406:	4603      	mov	r3, r0
 8005408:	613b      	str	r3, [r7, #16]
	  HAL_Delay(1); // need to wait for some time to get a new position sample
 800540a:	2001      	movs	r0, #1
 800540c:	f001 fdd2 	bl	8006fb4 <HAL_Delay>
  for (int i=0; i<num_filt_init; i++){
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	db91      	blt.n	8005342 <main+0x7c2>
  }
  comm_encoder.filt_prev_mech = filt_prev_mech_temp;
 800541e:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <main+0x918>)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	67d3      	str	r3, [r2, #124]	; 0x7c
  comm_encoder.filt_prev_elec = filt_prev_elec_temp;
 8005424:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <main+0x918>)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  if (EN_ENC_FILTER == 1){
 800542c:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <main+0x924>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d103      	bne.n	800543c <main+0x8bc>
	  comm_encoder.filt_enable = 1;
 8005434:	4b18      	ldr	r3, [pc, #96]	; (8005498 <main+0x918>)
 8005436:	2201      	movs	r2, #1
 8005438:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  }
  // reset encoder sample count
  comm_encoder.first_sample = 0;
 800543c:	4b16      	ldr	r3, [pc, #88]	; (8005498 <main+0x918>)
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

  /* Start the FSM */
  state.state = MENU_MODE;
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <main+0x930>)
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 800544a:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <main+0x930>)
 800544c:	2200      	movs	r2, #0
 800544e:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8005450:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <main+0x930>)
 8005452:	2201      	movs	r2, #1
 8005454:	70da      	strb	r2, [r3, #3]
  fsm_enter_state(&state);
 8005456:	4816      	ldr	r0, [pc, #88]	; (80054b0 <main+0x930>)
 8005458:	f7fe f994 	bl	8003784 <fsm_enter_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 800545c:	2064      	movs	r0, #100	; 0x64
 800545e:	f001 fda9 	bl	8006fb4 <HAL_Delay>
//	  printf("%d\n\r", loop_time);
	  drv_check_faults(drv, &state);
 8005462:	4b03      	ldr	r3, [pc, #12]	; (8005470 <main+0x8f0>)
 8005464:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <main+0x930>)
 8005466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800546a:	f7fc ffbd 	bl	80023e8 <drv_check_faults>
	  HAL_Delay(100);
 800546e:	e7f5      	b.n	800545c <main+0x8dc>
 8005470:	20000eb8 	.word	0x20000eb8
 8005474:	20000850 	.word	0x20000850
 8005478:	080111b8 	.word	0x080111b8
 800547c:	20009578 	.word	0x20009578
 8005480:	20009468 	.word	0x20009468
 8005484:	20009448 	.word	0x20009448
 8005488:	20000314 	.word	0x20000314
 800548c:	200094bc 	.word	0x200094bc
 8005490:	20009650 	.word	0x20009650
 8005494:	3a83126f 	.word	0x3a83126f
 8005498:	20000b5c 	.word	0x20000b5c
 800549c:	40020800 	.word	0x40020800
 80054a0:	20000ec0 	.word	0x20000ec0
 80054a4:	2000043c 	.word	0x2000043c
 80054a8:	080111e0 	.word	0x080111e0
 80054ac:	3ff00000 	.word	0x3ff00000
 80054b0:	20000b48 	.word	0x20000b48

080054b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b094      	sub	sp, #80	; 0x50
 80054b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054ba:	f107 031c 	add.w	r3, r7, #28
 80054be:	2234      	movs	r2, #52	; 0x34
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f006 fc02 	bl	800bccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054c8:	f107 0308 	add.w	r3, r7, #8
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	60da      	str	r2, [r3, #12]
 80054d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80054d8:	2300      	movs	r3, #0
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <SystemClock_Config+0xdc>)
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <SystemClock_Config+0xdc>)
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	6413      	str	r3, [r2, #64]	; 0x40
 80054e8:	4b29      	ldr	r3, [pc, #164]	; (8005590 <SystemClock_Config+0xdc>)
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4b26      	ldr	r3, [pc, #152]	; (8005594 <SystemClock_Config+0xe0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <SystemClock_Config+0xe0>)
 80054fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b23      	ldr	r3, [pc, #140]	; (8005594 <SystemClock_Config+0xe0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005510:	2301      	movs	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005518:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800551a:	2302      	movs	r3, #2
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800551e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005522:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005524:	2304      	movs	r3, #4
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005528:	23b4      	movs	r3, #180	; 0xb4
 800552a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800552c:	2302      	movs	r3, #2
 800552e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005530:	2302      	movs	r3, #2
 8005532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005534:	2302      	movs	r3, #2
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005538:	f107 031c 	add.w	r3, r7, #28
 800553c:	4618      	mov	r0, r3
 800553e:	f003 fc79 	bl	8008e34 <HAL_RCC_OscConfig>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005548:	f000 f826 	bl	8005598 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800554c:	f003 f8d8 	bl	8008700 <HAL_PWREx_EnableOverDrive>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005556:	f000 f81f 	bl	8005598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800555a:	230f      	movs	r3, #15
 800555c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800555e:	2302      	movs	r3, #2
 8005560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005566:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800556a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800556c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005570:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	2105      	movs	r1, #5
 8005578:	4618      	mov	r0, r3
 800557a:	f003 f911 	bl	80087a0 <HAL_RCC_ClockConfig>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005584:	f000 f808 	bl	8005598 <Error_Handler>
  }
}
 8005588:	bf00      	nop
 800558a:	3750      	adds	r7, #80	; 0x50
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40023800 	.word	0x40023800
 8005594:	40007000 	.word	0x40007000

08005598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800559c:	bf00      	nop
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80055b0:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 80055b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80055b8:	edd7 7a00 	vldr	s15, [r7]
 80055bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c4:	dd01      	ble.n	80055ca <fast_fmaxf+0x24>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	e000      	b.n	80055cc <fast_fmaxf+0x26>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	ee07 3a90 	vmov	s15, r3
    }
 80055d0:	eeb0 0a67 	vmov.f32	s0, s15
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <fast_fminf>:

float fast_fminf(float x, float y){
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80055e8:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80055ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80055f0:	edd7 7a00 	vldr	s15, [r7]
 80055f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	d501      	bpl.n	8005602 <fast_fminf+0x24>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	e000      	b.n	8005604 <fast_fminf+0x26>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	ee07 3a90 	vmov	s15, r3
    }
 8005608:	eeb0 0a67 	vmov.f32	s0, s15
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005620:	edc7 0a02 	vstr	s1, [r7, #8]
 8005624:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8005628:	ed97 7a03 	vldr	s14, [r7, #12]
 800562c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	dd0c      	ble.n	8005654 <fmaxf3+0x3e>
 800563a:	ed97 7a03 	vldr	s14, [r7, #12]
 800563e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	dd01      	ble.n	8005650 <fmaxf3+0x3a>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	e00d      	b.n	800566c <fmaxf3+0x56>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	e00b      	b.n	800566c <fmaxf3+0x56>
 8005654:	ed97 7a02 	vldr	s14, [r7, #8]
 8005658:	edd7 7a01 	vldr	s15, [r7, #4]
 800565c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005664:	dd01      	ble.n	800566a <fmaxf3+0x54>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	e000      	b.n	800566c <fmaxf3+0x56>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	ee07 3a90 	vmov	s15, r3
    }
 8005670:	eeb0 0a67 	vmov.f32	s0, s15
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <fminf3>:

float fminf3(float x, float y, float z){
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	ed87 0a03 	vstr	s0, [r7, #12]
 8005688:	edc7 0a02 	vstr	s1, [r7, #8]
 800568c:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8005690:	ed97 7a03 	vldr	s14, [r7, #12]
 8005694:	edd7 7a02 	vldr	s15, [r7, #8]
 8005698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a0:	d50c      	bpl.n	80056bc <fminf3+0x3e>
 80056a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80056a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b2:	d501      	bpl.n	80056b8 <fminf3+0x3a>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	e00d      	b.n	80056d4 <fminf3+0x56>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	e00b      	b.n	80056d4 <fminf3+0x56>
 80056bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80056c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80056c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056cc:	d501      	bpl.n	80056d2 <fminf3+0x54>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	e000      	b.n	80056d4 <fminf3+0x56>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	ee07 3a90 	vmov	s15, r3
    }
 80056d8:	eeb0 0a67 	vmov.f32	s0, s15
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b086      	sub	sp, #24
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	ed93 7a00 	vldr	s14, [r3]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	edd3 7a00 	vldr	s15, [r3]
 8005700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	edd3 6a00 	vldr	s13, [r3]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	edd3 7a00 	vldr	s15, [r3]
 8005710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005718:	eeb0 0a67 	vmov.f32	s0, s15
 800571c:	f00a fcb4 	bl	8010088 <sqrtf>
 8005720:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8005724:	ed97 7a05 	vldr	s14, [r7, #20]
 8005728:	edd7 7a01 	vldr	s15, [r7, #4]
 800572c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005734:	dc00      	bgt.n	8005738 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8005736:	e01b      	b.n	8005770 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	ed93 7a00 	vldr	s14, [r3]
 800573e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005742:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005746:	ed97 7a05 	vldr	s14, [r7, #20]
 800574a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	ed93 7a00 	vldr	s14, [r3]
 800575a:	edd7 7a01 	vldr	s15, [r7, #4]
 800575e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005762:	ed97 7a05 	vldr	s14, [r7, #20]
 8005766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	edc3 7a00 	vstr	s15, [r3]
    }
 8005770:	bf00      	nop
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005782:	edc7 0a02 	vstr	s1, [r7, #8]
 8005786:	ed87 1a01 	vstr	s2, [r7, #4]
 800578a:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 800578c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005790:	edd7 7a02 	vldr	s15, [r7, #8]
 8005794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005798:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80057a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80057a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80057a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057ac:	2201      	movs	r2, #1
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80057c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80057c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ce:	ee17 3a90 	vmov	r3, s15
    }
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80057ea:	edc7 0a01 	vstr	s1, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 80057f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80057f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80057f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057fc:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800580e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005812:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005816:	2201      	movs	r2, #1
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005830:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8005834:	eeb0 0a67 	vmov.f32	s0, s15
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <sin_lut>:

float sin_lut(float theta){
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 800584e:	eddf 0a17 	vldr	s1, [pc, #92]	; 80058ac <sin_lut+0x68>
 8005852:	ed97 0a01 	vldr	s0, [r7, #4]
 8005856:	f00a fbf7 	bl	8010048 <fmodf>
 800585a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 800585e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586a:	d506      	bpl.n	800587a <sin_lut+0x36>
 800586c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005870:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80058ac <sin_lut+0x68>
 8005874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005878:	e001      	b.n	800587e <sin_lut+0x3a>
 800587a:	edd7 7a01 	vldr	s15, [r7, #4]
 800587e:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8005882:	edd7 7a01 	vldr	s15, [r7, #4]
 8005886:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80058b0 <sin_lut+0x6c>
 800588a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800588e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005892:	ee17 3a90 	vmov	r3, s15
 8005896:	4a07      	ldr	r2, [pc, #28]	; (80058b4 <sin_lut+0x70>)
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	ee07 3a90 	vmov	s15, r3
}
 80058a2:	eeb0 0a67 	vmov.f32	s0, s15
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40c90fdb 	.word	0x40c90fdb
 80058b0:	42a2f983 	.word	0x42a2f983
 80058b4:	0801128c 	.word	0x0801128c

080058b8 <cos_lut>:

float cos_lut(float theta){
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 80058c2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80058e4 <cos_lut+0x2c>
 80058c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80058ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ce:	eeb0 0a67 	vmov.f32	s0, s15
 80058d2:	f7ff ffb7 	bl	8005844 <sin_lut>
 80058d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80058da:	eeb0 0a67 	vmov.f32	s0, s15
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	3fc90fdb 	.word	0x3fc90fdb

080058e8 <ps_warmup>:
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"


void ps_warmup(EncoderStruct * encoder, int n){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
//	int raw;
	for(int i = 0; i<n; i++){
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e030      	b.n	800595a <ps_warmup+0x72>
		encoder->spi_tx_buff[0] = 0xA6;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	22a6      	movs	r2, #166	; 0xa6
 80058fc:	701a      	strb	r2, [r3, #0]
		encoder->spi_tx_buff[1] = 0x00;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	705a      	strb	r2, [r3, #1]
		encoder->spi_tx_buff[2] = 0x00;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	709a      	strb	r2, [r3, #2]
		encoder->spi_tx_buff[3] = 0x00;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8005910:	2200      	movs	r2, #0
 8005912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005916:	4815      	ldr	r0, [pc, #84]	; (800596c <ps_warmup+0x84>)
 8005918:	f002 fed8 	bl	80086cc <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	2364      	movs	r3, #100	; 0x64
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	2304      	movs	r3, #4
 8005928:	4811      	ldr	r0, [pc, #68]	; (8005970 <ps_warmup+0x88>)
 800592a:	f003 fdaa 	bl	8009482 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800592e:	bf00      	nop
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <ps_warmup+0x88>)
 8005932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d0f9      	beq.n	8005930 <ps_warmup+0x48>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800593c:	2201      	movs	r2, #1
 800593e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005942:	480a      	ldr	r0, [pc, #40]	; (800596c <ps_warmup+0x84>)
 8005944:	f002 fec2 	bl	80086cc <HAL_GPIO_WritePin>
		delay_us(100);
 8005948:	2064      	movs	r0, #100	; 0x64
 800594a:	f001 f9df 	bl	8006d0c <delay_us>
//		raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
//		printf("%d\n\r", raw);
		delay_us(100);
 800594e:	2064      	movs	r0, #100	; 0x64
 8005950:	f001 f9dc 	bl	8006d0c <delay_us>
	for(int i = 0; i<n; i++){
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	dbca      	blt.n	80058f8 <ps_warmup+0x10>
	}
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40020000 	.word	0x40020000
 8005970:	2000951c 	.word	0x2000951c

08005974 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8005974:	b580      	push	{r7, lr}
 8005976:	b08c      	sub	sp, #48	; 0x30
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	611a      	str	r2, [r3, #16]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005988:	2313      	movs	r3, #19
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	e011      	b.n	80059b2 <ps_sample+0x3e>
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	3b01      	subs	r3, #1
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	3304      	adds	r3, #4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	3304      	adds	r3, #4
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	3304      	adds	r3, #4
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	3b01      	subs	r3, #1
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dcea      	bgt.n	800598e <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_buff[0] = 0xA6;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	22a6      	movs	r2, #166	; 0xa6
 80059bc:	701a      	strb	r2, [r3, #0]
	encoder->spi_tx_buff[1] = 0x00;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	705a      	strb	r2, [r3, #1]
	encoder->spi_tx_buff[2] = 0x00;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	709a      	strb	r2, [r3, #2]
	encoder->spi_tx_buff[3] = 0x00;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	70da      	strb	r2, [r3, #3]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80059d0:	2200      	movs	r2, #0
 80059d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059d6:	489d      	ldr	r0, [pc, #628]	; (8005c4c <ps_sample+0x2d8>)
 80059d8:	f002 fe78 	bl	80086cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	1d1a      	adds	r2, r3, #4
 80059e2:	2364      	movs	r3, #100	; 0x64
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2304      	movs	r3, #4
 80059e8:	4899      	ldr	r0, [pc, #612]	; (8005c50 <ps_sample+0x2dc>)
 80059ea:	f003 fd4a 	bl	8009482 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80059ee:	bf00      	nop
 80059f0:	4b97      	ldr	r3, [pc, #604]	; (8005c50 <ps_sample+0x2dc>)
 80059f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d0f9      	beq.n	80059f0 <ps_sample+0x7c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80059fc:	2201      	movs	r2, #1
 80059fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a02:	4892      	ldr	r0, [pc, #584]	; (8005c4c <ps_sample+0x2d8>)
 8005a04:	f002 fe62 	bl	80086cc <HAL_GPIO_WritePin>

	encoder->raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	795b      	ldrb	r3, [r3, #5]
 8005a0c:	041a      	lsls	r2, r3, #16
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	799b      	ldrb	r3, [r3, #6]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	4313      	orrs	r3, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	79d2      	ldrb	r2, [r2, #7]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	115b      	asrs	r3, r3, #5
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	609a      	str	r2, [r3, #8]

	/* Linearization */
	encoder->offset_ind1 = (encoder->raw)>>LUT_SHIFT;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	0b1b      	lsrs	r3, r3, #12
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	encoder->offset_ind2 = ((encoder->raw>>LUT_SHIFT)+1)%128;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	0b1b      	lsrs	r3, r3, #12
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	encoder->offset1 = encoder->offset_lut[(encoder->raw)>>LUT_SHIFT];				// lookup table lower entry
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	0b1a      	lsrs	r2, r3, #12
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3256      	adds	r2, #86	; 0x56
 8005a4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	encoder->offset2 = encoder->offset_lut[((encoder->raw>>LUT_SHIFT)+1)%128];		// lookup table higher entry
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	0b1b      	lsrs	r3, r3, #12
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3256      	adds	r2, #86	; 0x56
 8005a68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	int raw_mod = encoder->raw & LUT_MASK;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7a:	617b      	str	r3, [r7, #20]
	encoder->offset_interp = encoder->offset1 + ( (encoder->offset2-encoder->offset1) * raw_mod / (1<<LUT_SHIFT) );     // Interpolate between lookup table entries
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a8e:	1acb      	subs	r3, r1, r3
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da01      	bge.n	8005a9e <ps_sample+0x12a>
 8005a9a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005a9e:	131b      	asrs	r3, r3, #12
 8005aa0:	441a      	add	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0


	if (EN_ENC_LINEARIZE == 1){
 8005aa8:	4b6a      	ldr	r3, [pc, #424]	; (8005c54 <ps_sample+0x2e0>)
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10a      	bne.n	8005ac6 <ps_sample+0x152>
		encoder->count = encoder->raw + encoder->offset_interp;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8005aba:	4413      	add	r3, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8005ac4:	e005      	b.n	8005ad2 <ps_sample+0x15e>
	} else {
		encoder->count = encoder->raw;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	}

	/* Real angles in radians */
	// MAPPED FROM -PI to PI, instead of 0 to 2*PI
	encoder->angle_singleturn = TWO_PI_F*((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005ad8:	4b5e      	ldr	r3, [pc, #376]	; (8005c54 <ps_sample+0x2e0>)
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005c64 <ps_sample+0x2f0>
 8005aea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005aee:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8005c58 <ps_sample+0x2e4>
 8005af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	edc3 7a03 	vstr	s15, [r3, #12]
//	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
	encoder->angle_singleturn = encoder->angle_singleturn<-PI_F ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b02:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005c5c <ps_sample+0x2e8>
 8005b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0e:	d507      	bpl.n	8005b20 <ps_sample+0x1ac>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b16:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005c64 <ps_sample+0x2f0>
 8005b1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b1e:	e002      	b.n	8005b26 <ps_sample+0x1b2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	edc3 7a03 	vstr	s15, [r3, #12]
	encoder->angle_singleturn = encoder->angle_singleturn>PI_F  ? encoder->angle_singleturn - TWO_PI_F : encoder->angle_singleturn;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b32:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005c60 <ps_sample+0x2ec>
 8005b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	dd07      	ble.n	8005b50 <ps_sample+0x1dc>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b46:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005c64 <ps_sample+0x2f0>
 8005b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b4e:	e002      	b.n	8005b56 <ps_sample+0x1e2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005b68:	4b3a      	ldr	r3, [pc, #232]	; (8005c54 <ps_sample+0x2e0>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b7a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005c58 <ps_sample+0x2e4>
 8005b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	int mod_angle = (int)encoder->elec_angle;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b92:	ee17 3a90 	vmov	r3, s15
 8005b96:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)mod_angle);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bac:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005c64 <ps_sample+0x2f0>
 8005bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc8:	d507      	bpl.n	8005bda <ps_sample+0x266>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005bd0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005c64 <ps_sample+0x2f0>
 8005bd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bd8:	e002      	b.n	8005be0 <ps_sample+0x26c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	/* Rollover */
	int rollover = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	ed93 7a03 	vldr	s14, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8005bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bfa:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005bfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c02:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005c60 <ps_sample+0x2ec>
 8005c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0e:	dd03      	ble.n	8005c18 <ps_sample+0x2a4>
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	e00a      	b.n	8005c2e <ps_sample+0x2ba>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c1c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005c5c <ps_sample+0x2e8>
 8005c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c28:	d501      	bpl.n	8005c2e <ps_sample+0x2ba>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	623b      	str	r3, [r7, #32]
	if(!encoder->first_sample){
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3358 	ldrb.w	r3, [r3, #856]	; 0x358
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d117      	bne.n	8005c68 <ps_sample+0x2f4>
		encoder->turns = 0;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		encoder->first_sample = 1;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8005c48:	e016      	b.n	8005c78 <ps_sample+0x304>
 8005c4a:	bf00      	nop
 8005c4c:	40020000 	.word	0x40020000
 8005c50:	2000951c 	.word	0x2000951c
 8005c54:	2000043c 	.word	0x2000043c
 8005c58:	49000000 	.word	0x49000000
 8005c5c:	c0490fdb 	.word	0xc0490fdb
 8005c60:	40490fdb 	.word	0x40490fdb
 8005c64:	40c90fdb 	.word	0x40c90fdb
	} else {
		encoder->turns += rollover;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	441a      	add	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c8c:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 8005c64 <ps_sample+0x2f0>
 8005c90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Velocity */

	// old velocity calculation modified to match MBed code calculation of velocity!
	//encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
	encoder->single_vel = (encoder->angle_multiturn[0] - encoder->angle_multiturn[1])/dt;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	ed93 7a05 	vldr	s14, [r3, #20]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	edd3 7a06 	vldr	s15, [r3, #24]
 8005caa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005cae:	ed97 7a00 	vldr	s14, [r7]
 8005cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	// Filter out bad position samples
	if ( (encoder->filt_enable==1) && ((encoder->single_vel > (V_MAX*GR)) || (encoder->single_vel < (V_MIN*GR))) ) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d12e      	bne.n	8005d24 <ps_sample+0x3b0>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8005ccc:	4b40      	ldr	r3, [pc, #256]	; (8005dd0 <ps_sample+0x45c>)
 8005cce:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8005cd2:	4b3f      	ldr	r3, [pc, #252]	; (8005dd0 <ps_sample+0x45c>)
 8005cd4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	dc0f      	bgt.n	8005d06 <ps_sample+0x392>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8005cec:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <ps_sample+0x45c>)
 8005cee:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8005cf2:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <ps_sample+0x45c>)
 8005cf4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d04:	d50e      	bpl.n	8005d24 <ps_sample+0x3b0>
		encoder->angle_multiturn[0] = encoder->filt_prev_mech;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	615a      	str	r2, [r3, #20]
		encoder->elec_angle = encoder->filt_prev_elec;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	665a      	str	r2, [r3, #100]	; 0x64
		encoder->single_vel = 0.0;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d22:	e008      	b.n	8005d36 <ps_sample+0x3c2>
	}
	else {
		encoder->filt_prev_mech = encoder->angle_multiturn[0];
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	67da      	str	r2, [r3, #124]	; 0x7c
		encoder->filt_prev_elec = encoder->elec_angle;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	float sum = encoder->single_vel;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005d3c:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i < N_POS_SAMPLES; i++){
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e024      	b.n	8005d8e <ps_sample+0x41a>
		encoder->vel_vec[N_POS_SAMPLES - i] = encoder->vel_vec[N_POS_SAMPLES-i-1];
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f1c3 0213 	rsb	r2, r3, #19
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f1c3 0314 	rsb	r3, r3, #20
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	3220      	adds	r2, #32
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	440a      	add	r2, r1
 8005d58:	3204      	adds	r2, #4
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	3320      	adds	r3, #32
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3304      	adds	r3, #4
 8005d66:	601a      	str	r2, [r3, #0]
		sum += encoder->vel_vec[N_POS_SAMPLES-i];
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f1c3 0314 	rsb	r3, r3, #20
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	3320      	adds	r3, #32
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	3304      	adds	r3, #4
 8005d78:	edd3 7a00 	vldr	s15, [r3]
 8005d7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d84:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 1; i < N_POS_SAMPLES; i++){
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b13      	cmp	r3, #19
 8005d92:	ddd7      	ble.n	8005d44 <ps_sample+0x3d0>
		}
	encoder->vel_vec[0] = encoder->single_vel;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	encoder->velocity =  sum/((float)N_POS_SAMPLES);
 8005da0:	ed97 7a07 	vldr	s14, [r7, #28]
 8005da4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

}
 8005dc8:	bf00      	nop
 8005dca:	3728      	adds	r7, #40	; 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	2000033c 	.word	0x2000033c

08005dd4 <ps_print>:

void ps_print(EncoderStruct * encoder){
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	printf("   Raw: %u", (unsigned int)encoder->raw);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4619      	mov	r1, r3
 8005de2:	4820      	ldr	r0, [pc, #128]	; (8005e64 <ps_print+0x90>)
 8005de4:	f006 fbe4 	bl	800c5b0 <iprintf>
//	printf("   LUT ind 1: %d", encoder->offset_ind1);
//	printf("   LUT ind 2: %d", encoder->offset_ind2);
//	printf("   Offset 1: %d", encoder->offset1);
//	printf("   Offset 2: %d", encoder->offset2);
//	printf("   Offset Interp: %d", encoder->offset_interp);
	printf("   Linearized: %d", encoder->count);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dee:	4619      	mov	r1, r3
 8005df0:	481d      	ldr	r0, [pc, #116]	; (8005e68 <ps_print+0x94>)
 8005df2:	f006 fbdd 	bl	800c5b0 <iprintf>
	printf("   Single Turn: %.3f", encoder->angle_singleturn);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa fbc4 	bl	8000588 <__aeabi_f2d>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4819      	ldr	r0, [pc, #100]	; (8005e6c <ps_print+0x98>)
 8005e06:	f006 fbd3 	bl	800c5b0 <iprintf>
	printf("   Multiturn: %.3f", encoder->angle_multiturn[0]);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fa fbba 	bl	8000588 <__aeabi_f2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4815      	ldr	r0, [pc, #84]	; (8005e70 <ps_print+0x9c>)
 8005e1a:	f006 fbc9 	bl	800c5b0 <iprintf>
	printf("   Electrical: %.3f", encoder->elec_angle);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fbb0 	bl	8000588 <__aeabi_f2d>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4811      	ldr	r0, [pc, #68]	; (8005e74 <ps_print+0xa0>)
 8005e2e:	f006 fbbf 	bl	800c5b0 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005e38:	4619      	mov	r1, r3
 8005e3a:	480f      	ldr	r0, [pc, #60]	; (8005e78 <ps_print+0xa4>)
 8005e3c:	f006 fbb8 	bl	800c5b0 <iprintf>
	printf("   Vel: %.4f\n\r", encoder->velocity);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa fb9f 	bl	8000588 <__aeabi_f2d>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	480b      	ldr	r0, [pc, #44]	; (8005e7c <ps_print+0xa8>)
 8005e50:	f006 fbae 	bl	800c5b0 <iprintf>
	delay_us(10000);
 8005e54:	f242 7010 	movw	r0, #10000	; 0x2710
 8005e58:	f000 ff58 	bl	8006d0c <delay_us>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	0801120c 	.word	0x0801120c
 8005e68:	08011218 	.word	0x08011218
 8005e6c:	0801122c 	.word	0x0801122c
 8005e70:	08011244 	.word	0x08011244
 8005e74:	08011258 	.word	0x08011258
 8005e78:	0801126c 	.word	0x0801126c
 8005e7c:	0801127c 	.word	0x0801127c

08005e80 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fc fba2 	bl	80025d8 <flash_writer_init>
	pr->sector = sector;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	60da      	str	r2, [r3, #12]
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fc fbb1 	bl	8002614 <flash_writer_open>
    pr->ready = true;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	741a      	strb	r2, [r3, #16]
}
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	b490      	push	{r4, r7}
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	f107 0408 	add.w	r4, r7, #8
 8005eca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005ece:	7e3b      	ldrb	r3, [r7, #24]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc90      	pop	{r4, r7}
 8005ed6:	b004      	add	sp, #16
 8005ed8:	4770      	bx	lr
	...

08005edc <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e00d      	b.n	8005f06 <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <preference_writer_flush+0x70>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005efc:	f7fc fba6 	bl	800264c <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2bff      	cmp	r3, #255	; 0xff
 8005f0a:	ddee      	ble.n	8005eea <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005f0c:	e012      	b.n	8005f34 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f16:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <preference_writer_flush+0x74>)
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	edd3 7a00 	vldr	s15, [r3]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	eeb0 0a67 	vmov.f32	s0, s15
 8005f26:	460b      	mov	r3, r1
 8005f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f2a:	f7fc fba5 	bl	8002678 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3301      	adds	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005f3a:	dbe8      	blt.n	8005f0e <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	741a      	strb	r2, [r3, #16]
}
 8005f42:	bf00      	nop
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	2000043c 	.word	0x2000043c
 8005f50:	2000033c 	.word	0x2000033c

08005f54 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005f54:	b084      	sub	sp, #16
 8005f56:	b590      	push	{r4, r7, lr}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	f107 0418 	add.w	r4, r7, #24
 8005f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005f64:	2300      	movs	r3, #0
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	e00d      	b.n	8005f86 <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f107 0218 	add.w	r2, r7, #24
 8005f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f72:	f7fc fba7 	bl	80026c4 <flash_read_int>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4915      	ldr	r1, [pc, #84]	; (8005fd0 <preference_writer_load+0x7c>)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3301      	adds	r3, #1
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2bff      	cmp	r3, #255	; 0xff
 8005f8a:	ddee      	ble.n	8005f6a <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8005f8c:	e013      	b.n	8005fb6 <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8005f96:	4613      	mov	r3, r2
 8005f98:	f107 0218 	add.w	r2, r7, #24
 8005f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f9e:	f7fc fba7 	bl	80026f0 <flash_read_float>
 8005fa2:	eef0 7a40 	vmov.f32	s15, s0
 8005fa6:	4a0b      	ldr	r2, [pc, #44]	; (8005fd4 <preference_writer_load+0x80>)
 8005fa8:	00a3      	lsls	r3, r4, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	607b      	str	r3, [r7, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005fbc:	dbe7      	blt.n	8005f8e <preference_writer_load+0x3a>
    }
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005fca:	b004      	add	sp, #16
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	2000043c 	.word	0x2000043c
 8005fd4:	2000033c 	.word	0x2000033c

08005fd8 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fc fb5e 	bl	80026aa <flash_writer_close>
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <MX_SPI1_Init+0x68>)
 8005ffe:	4a19      	ldr	r2, [pc, #100]	; (8006064 <MX_SPI1_Init+0x6c>)
 8006000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006002:	4b17      	ldr	r3, [pc, #92]	; (8006060 <MX_SPI1_Init+0x68>)
 8006004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <MX_SPI1_Init+0x68>)
 800600c:	2200      	movs	r2, #0
 800600e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8006010:	4b13      	ldr	r3, [pc, #76]	; (8006060 <MX_SPI1_Init+0x68>)
 8006012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006016:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006018:	4b11      	ldr	r3, [pc, #68]	; (8006060 <MX_SPI1_Init+0x68>)
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800601e:	4b10      	ldr	r3, [pc, #64]	; (8006060 <MX_SPI1_Init+0x68>)
 8006020:	2201      	movs	r2, #1
 8006022:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <MX_SPI1_Init+0x68>)
 8006026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800602a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <MX_SPI1_Init+0x68>)
 800602e:	2228      	movs	r2, #40	; 0x28
 8006030:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006032:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <MX_SPI1_Init+0x68>)
 8006034:	2200      	movs	r2, #0
 8006036:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <MX_SPI1_Init+0x68>)
 800603a:	2200      	movs	r2, #0
 800603c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800603e:	4b08      	ldr	r3, [pc, #32]	; (8006060 <MX_SPI1_Init+0x68>)
 8006040:	2200      	movs	r2, #0
 8006042:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <MX_SPI1_Init+0x68>)
 8006046:	220a      	movs	r2, #10
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800604a:	4805      	ldr	r0, [pc, #20]	; (8006060 <MX_SPI1_Init+0x68>)
 800604c:	f003 f990 	bl	8009370 <HAL_SPI_Init>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8006056:	f7ff fa9f 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800605a:	bf00      	nop
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	200094c4 	.word	0x200094c4
 8006064:	40013000 	.word	0x40013000

08006068 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800606c:	4b17      	ldr	r3, [pc, #92]	; (80060cc <MX_SPI3_Init+0x64>)
 800606e:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <MX_SPI3_Init+0x68>)
 8006070:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <MX_SPI3_Init+0x64>)
 8006074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006078:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800607a:	4b14      	ldr	r3, [pc, #80]	; (80060cc <MX_SPI3_Init+0x64>)
 800607c:	2200      	movs	r2, #0
 800607e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <MX_SPI3_Init+0x64>)
 8006082:	2200      	movs	r2, #0
 8006084:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006086:	4b11      	ldr	r3, [pc, #68]	; (80060cc <MX_SPI3_Init+0x64>)
 8006088:	2200      	movs	r2, #0
 800608a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <MX_SPI3_Init+0x64>)
 800608e:	2200      	movs	r2, #0
 8006090:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <MX_SPI3_Init+0x64>)
 8006094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006098:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <MX_SPI3_Init+0x64>)
 800609c:	2200      	movs	r2, #0
 800609e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <MX_SPI3_Init+0x64>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <MX_SPI3_Init+0x64>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <MX_SPI3_Init+0x64>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <MX_SPI3_Init+0x64>)
 80060b4:	220a      	movs	r2, #10
 80060b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80060b8:	4804      	ldr	r0, [pc, #16]	; (80060cc <MX_SPI3_Init+0x64>)
 80060ba:	f003 f959 	bl	8009370 <HAL_SPI_Init>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80060c4:	f7ff fa68 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	2000951c 	.word	0x2000951c
 80060d0:	40003c00 	.word	0x40003c00

080060d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	; 0x30
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060dc:	f107 031c 	add.w	r3, r7, #28
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a32      	ldr	r2, [pc, #200]	; (80061bc <HAL_SPI_MspInit+0xe8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d12c      	bne.n	8006150 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 80060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fe:	4a30      	ldr	r2, [pc, #192]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006104:	6453      	str	r3, [r2, #68]	; 0x44
 8006106:	4b2e      	ldr	r3, [pc, #184]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	6313      	str	r3, [r2, #48]	; 0x30
 8006122:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800612e:	23e0      	movs	r3, #224	; 0xe0
 8006130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006132:	2302      	movs	r3, #2
 8006134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006136:	2300      	movs	r3, #0
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800613a:	2303      	movs	r3, #3
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800613e:	2305      	movs	r3, #5
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006142:	f107 031c 	add.w	r3, r7, #28
 8006146:	4619      	mov	r1, r3
 8006148:	481e      	ldr	r0, [pc, #120]	; (80061c4 <HAL_SPI_MspInit+0xf0>)
 800614a:	f002 f92b 	bl	80083a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800614e:	e031      	b.n	80061b4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <HAL_SPI_MspInit+0xf4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d12c      	bne.n	80061b4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	4a17      	ldr	r2, [pc, #92]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006168:	6413      	str	r3, [r2, #64]	; 0x40
 800616a:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006180:	f043 0304 	orr.w	r3, r3, #4
 8006184:	6313      	str	r3, [r2, #48]	; 0x30
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <HAL_SPI_MspInit+0xec>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006192:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006198:	2302      	movs	r3, #2
 800619a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619c:	2300      	movs	r3, #0
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061a0:	2303      	movs	r3, #3
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80061a4:	2306      	movs	r3, #6
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061a8:	f107 031c 	add.w	r3, r7, #28
 80061ac:	4619      	mov	r1, r3
 80061ae:	4807      	ldr	r0, [pc, #28]	; (80061cc <HAL_SPI_MspInit+0xf8>)
 80061b0:	f002 f8f8 	bl	80083a4 <HAL_GPIO_Init>
}
 80061b4:	bf00      	nop
 80061b6:	3730      	adds	r7, #48	; 0x30
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40013000 	.word	0x40013000
 80061c0:	40023800 	.word	0x40023800
 80061c4:	40020000 	.word	0x40020000
 80061c8:	40003c00 	.word	0x40003c00
 80061cc:	40020800 	.word	0x40020800

080061d0 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80061d4:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <FLASH_Unlock+0x24>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da05      	bge.n	80061e8 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <FLASH_Unlock+0x24>)
 80061de:	4a06      	ldr	r2, [pc, #24]	; (80061f8 <FLASH_Unlock+0x28>)
 80061e0:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80061e2:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <FLASH_Unlock+0x24>)
 80061e4:	4a05      	ldr	r2, [pc, #20]	; (80061fc <FLASH_Unlock+0x2c>)
 80061e6:	605a      	str	r2, [r3, #4]
  }  
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40023c00 	.word	0x40023c00
 80061f8:	45670123 	.word	0x45670123
 80061fc:	cdef89ab 	.word	0xcdef89ab

08006200 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <FLASH_Lock+0x1c>)
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	4a04      	ldr	r2, [pc, #16]	; (800621c <FLASH_Lock+0x1c>)
 800620a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800620e:	6113      	str	r3, [r2, #16]
}
 8006210:	bf00      	nop
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40023c00 	.word	0x40023c00

08006220 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8006230:	2309      	movs	r3, #9
 8006232:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	e010      	b.n	8006262 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d103      	bne.n	800624e <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	e009      	b.n	8006262 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d103      	bne.n	800625c <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e002      	b.n	8006262 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800625c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006260:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8006262:	f000 f8bf 	bl	80063e4 <FLASH_WaitForLastOperation2>
 8006266:	4603      	mov	r3, r0
 8006268:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	2b09      	cmp	r3, #9
 800626e:	d12f      	bne.n	80062d0 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8006270:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <FLASH_EraseSector+0xbc>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <FLASH_EraseSector+0xbc>)
 8006276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800627a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 800627c:	4b17      	ldr	r3, [pc, #92]	; (80062dc <FLASH_EraseSector+0xbc>)
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	4916      	ldr	r1, [pc, #88]	; (80062dc <FLASH_EraseSector+0xbc>)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <FLASH_EraseSector+0xbc>)
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <FLASH_EraseSector+0xbc>)
 800628e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006292:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <FLASH_EraseSector+0xbc>)
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4313      	orrs	r3, r2
 800629c:	4a0f      	ldr	r2, [pc, #60]	; (80062dc <FLASH_EraseSector+0xbc>)
 800629e:	f043 0302 	orr.w	r3, r3, #2
 80062a2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <FLASH_EraseSector+0xbc>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	4a0c      	ldr	r2, [pc, #48]	; (80062dc <FLASH_EraseSector+0xbc>)
 80062aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ae:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 80062b0:	f000 f898 	bl	80063e4 <FLASH_WaitForLastOperation2>
 80062b4:	4603      	mov	r3, r0
 80062b6:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <FLASH_EraseSector+0xbc>)
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	4a07      	ldr	r2, [pc, #28]	; (80062dc <FLASH_EraseSector+0xbc>)
 80062be:	f023 0302 	bic.w	r3, r3, #2
 80062c2:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <FLASH_EraseSector+0xbc>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	4a04      	ldr	r2, [pc, #16]	; (80062dc <FLASH_EraseSector+0xbc>)
 80062ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062ce:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 80062d0:	7afb      	ldrb	r3, [r7, #11]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40023c00 	.word	0x40023c00

080062e0 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 80062ea:	2309      	movs	r3, #9
 80062ec:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 80062ee:	f000 f879 	bl	80063e4 <FLASH_WaitForLastOperation2>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b09      	cmp	r3, #9
 80062fa:	d11e      	bne.n	800633a <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <FLASH_ProgramWord+0x64>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4a10      	ldr	r2, [pc, #64]	; (8006344 <FLASH_ProgramWord+0x64>)
 8006302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006306:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <FLASH_ProgramWord+0x64>)
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	4a0d      	ldr	r2, [pc, #52]	; (8006344 <FLASH_ProgramWord+0x64>)
 800630e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006312:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <FLASH_ProgramWord+0x64>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <FLASH_ProgramWord+0x64>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8006326:	f000 f85d 	bl	80063e4 <FLASH_WaitForLastOperation2>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <FLASH_ProgramWord+0x64>)
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	4a04      	ldr	r2, [pc, #16]	; (8006344 <FLASH_ProgramWord+0x64>)
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40023c00 	.word	0x40023c00

08006348 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006350:	4a04      	ldr	r2, [pc, #16]	; (8006364 <FLASH_ClearFlag+0x1c>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60d3      	str	r3, [r2, #12]
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40023c00 	.word	0x40023c00

08006368 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 800636e:	2309      	movs	r3, #9
 8006370:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006372:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <FLASH_GetStatus+0x78>)
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637e:	d102      	bne.n	8006386 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8006380:	2301      	movs	r3, #1
 8006382:	71fb      	strb	r3, [r7, #7]
 8006384:	e025      	b.n	80063d2 <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8006386:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <FLASH_GetStatus+0x78>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 8006392:	2306      	movs	r3, #6
 8006394:	71fb      	strb	r3, [r7, #7]
 8006396:	e01c      	b.n	80063d2 <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <FLASH_GetStatus+0x78>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 80063a4:	2302      	movs	r3, #2
 80063a6:	71fb      	strb	r3, [r7, #7]
 80063a8:	e013      	b.n	80063d2 <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <FLASH_GetStatus+0x78>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 80063b6:	2307      	movs	r3, #7
 80063b8:	71fb      	strb	r3, [r7, #7]
 80063ba:	e00a      	b.n	80063d2 <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <FLASH_GetStatus+0x78>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 80063c8:	2308      	movs	r3, #8
 80063ca:	71fb      	strb	r3, [r7, #7]
 80063cc:	e001      	b.n	80063d2 <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 80063ce:	2309      	movs	r3, #9
 80063d0:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80063d2:	79fb      	ldrb	r3, [r7, #7]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40023c00 	.word	0x40023c00

080063e4 <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 80063ea:	2309      	movs	r3, #9
 80063ec:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80063ee:	f7ff ffbb 	bl	8006368 <FLASH_GetStatus>
 80063f2:	4603      	mov	r3, r0
 80063f4:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 80063f6:	e003      	b.n	8006400 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 80063f8:	f7ff ffb6 	bl	8006368 <FLASH_GetStatus>
 80063fc:	4603      	mov	r3, r0
 80063fe:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d0f7      	beq.n	80063f8 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	b2db      	uxtb	r3, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <HAL_MspInit+0x4c>)
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	4a0f      	ldr	r2, [pc, #60]	; (8006460 <HAL_MspInit+0x4c>)
 8006424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006428:	6453      	str	r3, [r2, #68]	; 0x44
 800642a:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <HAL_MspInit+0x4c>)
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006432:	607b      	str	r3, [r7, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <HAL_MspInit+0x4c>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	4a08      	ldr	r2, [pc, #32]	; (8006460 <HAL_MspInit+0x4c>)
 8006440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006444:	6413      	str	r3, [r2, #64]	; 0x40
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_MspInit+0x4c>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006452:	2005      	movs	r0, #5
 8006454:	f001 fed2 	bl	80081fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40023800 	.word	0x40023800

08006464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006468:	bf00      	nop
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006472:	b480      	push	{r7}
 8006474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006476:	e7fe      	b.n	8006476 <HardFault_Handler+0x4>

08006478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800647c:	e7fe      	b.n	800647c <MemManage_Handler+0x4>

0800647e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800647e:	b480      	push	{r7}
 8006480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006482:	e7fe      	b.n	8006482 <BusFault_Handler+0x4>

08006484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006488:	e7fe      	b.n	8006488 <UsageFault_Handler+0x4>

0800648a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800648a:	b480      	push	{r7}
 800648c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800648e:	bf00      	nop
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064aa:	bf00      	nop
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064b8:	f000 fd5c 	bl	8006f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064bc:	bf00      	nop
 80064be:	bd80      	pop	{r7, pc}

080064c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	// grab timer value and reset
	loop_time = __HAL_TIM_GET_COUNTER(&htim3);
 80064c4:	4b11      	ldr	r3, [pc, #68]	; (800650c <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	461a      	mov	r2, r3
 80064cc:	4b10      	ldr	r3, [pc, #64]	; (8006510 <TIM1_UP_TIM10_IRQHandler+0x50>)
 80064ce:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80064d0:	4b0e      	ldr	r3, [pc, #56]	; (800650c <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2200      	movs	r2, #0
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

	/* Sample ADCs */
	analog_sample(&controller);
 80064d8:	480e      	ldr	r0, [pc, #56]	; (8006514 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80064da:	f7fc f9c7 	bl	800286c <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80064de:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006518 <TIM1_UP_TIM10_IRQHandler+0x58>
 80064e2:	480e      	ldr	r0, [pc, #56]	; (800651c <TIM1_UP_TIM10_IRQHandler+0x5c>)
 80064e4:	f7ff fa46 	bl	8005974 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 80064e8:	480d      	ldr	r0, [pc, #52]	; (8006520 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80064ea:	f7fd f80b 	bl	8003504 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 80064ee:	f000 f837 	bl	8006560 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80064f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064f8:	3301      	adds	r3, #1
 80064fa:	4a06      	ldr	r2, [pc, #24]	; (8006514 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80064fc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006500:	4808      	ldr	r0, [pc, #32]	; (8006524 <TIM1_UP_TIM10_IRQHandler+0x64>)
 8006502:	f003 fc75 	bl	8009df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */



  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006506:	bf00      	nop
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20009608 	.word	0x20009608
 8006510:	200094c0 	.word	0x200094c0
 8006514:	20000850 	.word	0x20000850
 8006518:	3851b717 	.word	0x3851b717
 800651c:	20000b5c 	.word	0x20000b5c
 8006520:	20000b48 	.word	0x20000b48
 8006524:	20009578 	.word	0x20009578

08006528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800652e:	4809      	ldr	r0, [pc, #36]	; (8006554 <USART2_IRQHandler+0x2c>)
 8006530:	f004 fc24 	bl	800ad7c <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <USART2_IRQHandler+0x30>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	4619      	mov	r1, r3
 800653e:	4807      	ldr	r0, [pc, #28]	; (800655c <USART2_IRQHandler+0x34>)
 8006540:	f7fd fa12 	bl	8003968 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006544:	4803      	ldr	r0, [pc, #12]	; (8006554 <USART2_IRQHandler+0x2c>)
 8006546:	f004 fc19 	bl	800ad7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20009650 	.word	0x20009650
 8006558:	200094bc 	.word	0x200094bc
 800655c:	20000b48 	.word	0x20000b48

08006560 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8006560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006562:	b095      	sub	sp, #84	; 0x54
 8006564:	af12      	add	r7, sp, #72	; 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8006566:	4b83      	ldr	r3, [pc, #524]	; (8006774 <can_tx_rx+0x214>)
 8006568:	4a83      	ldr	r2, [pc, #524]	; (8006778 <can_tx_rx+0x218>)
 800656a:	2100      	movs	r1, #0
 800656c:	4883      	ldr	r0, [pc, #524]	; (800677c <can_tx_rx+0x21c>)
 800656e:	f001 fc62 	bl	8007e36 <HAL_CAN_GetRxMessage>
 8006572:	4603      	mov	r3, r0
 8006574:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 80f7 	bne.w	800676c <can_tx_rx+0x20c>
		//CAN RECIEVE FLAG SET
		CAN_ACTIVE = 1;
 800657e:	4b80      	ldr	r3, [pc, #512]	; (8006780 <can_tx_rx+0x220>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
//		printf("RX: %X, %X, %X, %X, %X, %X, %X, %X\n\r", can_rx.data[0], can_rx.data[1], can_rx.data[2], can_rx.data[3], can_rx.data[4], can_rx.data[5], can_rx.data[6], can_rx.data[7]);
//		HAL_GPIO_TogglePin(LED); //Toggle the state of led on can rx
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT_OUT);	// Pack response
 8006584:	4b7f      	ldr	r3, [pc, #508]	; (8006784 <can_tx_rx+0x224>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4a7f      	ldr	r2, [pc, #508]	; (8006788 <can_tx_rx+0x228>)
 800658c:	ed92 7a05 	vldr	s14, [r2, #20]
 8006590:	4a7e      	ldr	r2, [pc, #504]	; (800678c <can_tx_rx+0x22c>)
 8006592:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006596:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800659a:	4a7b      	ldr	r2, [pc, #492]	; (8006788 <can_tx_rx+0x228>)
 800659c:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 80065a0:	4a7a      	ldr	r2, [pc, #488]	; (800678c <can_tx_rx+0x22c>)
 80065a2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80065a6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80065aa:	4a79      	ldr	r2, [pc, #484]	; (8006790 <can_tx_rx+0x230>)
 80065ac:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 80065b0:	4a76      	ldr	r2, [pc, #472]	; (800678c <can_tx_rx+0x22c>)
 80065b2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80065b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ba:	eeb0 1a67 	vmov.f32	s2, s15
 80065be:	eef0 0a46 	vmov.f32	s1, s12
 80065c2:	eeb0 0a66 	vmov.f32	s0, s13
 80065c6:	4619      	mov	r1, r3
 80065c8:	4872      	ldr	r0, [pc, #456]	; (8006794 <can_tx_rx+0x234>)
 80065ca:	f7fb fc9f 	bl	8001f0c <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 80065ce:	463b      	mov	r3, r7
 80065d0:	4a71      	ldr	r2, [pc, #452]	; (8006798 <can_tx_rx+0x238>)
 80065d2:	4972      	ldr	r1, [pc, #456]	; (800679c <can_tx_rx+0x23c>)
 80065d4:	4869      	ldr	r0, [pc, #420]	; (800677c <can_tx_rx+0x21c>)
 80065d6:	f001 fb53 	bl	8007c80 <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80065da:	4b71      	ldr	r3, [pc, #452]	; (80067a0 <can_tx_rx+0x240>)
 80065dc:	785a      	ldrb	r2, [r3, #1]
 80065de:	4b70      	ldr	r3, [pc, #448]	; (80067a0 <can_tx_rx+0x240>)
 80065e0:	789b      	ldrb	r3, [r3, #2]
 80065e2:	4013      	ands	r3, r2
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4b6e      	ldr	r3, [pc, #440]	; (80067a0 <can_tx_rx+0x240>)
 80065e8:	78db      	ldrb	r3, [r3, #3]
 80065ea:	4013      	ands	r3, r2
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	4b6c      	ldr	r3, [pc, #432]	; (80067a0 <can_tx_rx+0x240>)
 80065f0:	791b      	ldrb	r3, [r3, #4]
 80065f2:	4013      	ands	r3, r2
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4b6a      	ldr	r3, [pc, #424]	; (80067a0 <can_tx_rx+0x240>)
 80065f8:	795b      	ldrb	r3, [r3, #5]
 80065fa:	4013      	ands	r3, r2
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4b68      	ldr	r3, [pc, #416]	; (80067a0 <can_tx_rx+0x240>)
 8006600:	799b      	ldrb	r3, [r3, #6]
 8006602:	4013      	ands	r3, r2
 8006604:	b2da      	uxtb	r2, r3
 8006606:	4b66      	ldr	r3, [pc, #408]	; (80067a0 <can_tx_rx+0x240>)
 8006608:	79db      	ldrb	r3, [r3, #7]
 800660a:	4013      	ands	r3, r2
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2bff      	cmp	r3, #255	; 0xff
 8006610:	bf0c      	ite	eq
 8006612:	2301      	moveq	r3, #1
 8006614:	2300      	movne	r3, #0
 8006616:	b2da      	uxtb	r2, r3
 8006618:	4b61      	ldr	r3, [pc, #388]	; (80067a0 <can_tx_rx+0x240>)
 800661a:	7a1b      	ldrb	r3, [r3, #8]
 800661c:	2bfc      	cmp	r3, #252	; 0xfc
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	4013      	ands	r3, r2
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <can_tx_rx+0xd8>
			  update_fsm(&state, MOTOR_CMD);
 800662e:	216d      	movs	r1, #109	; 0x6d
 8006630:	485c      	ldr	r0, [pc, #368]	; (80067a4 <can_tx_rx+0x244>)
 8006632:	f7fd f999 	bl	8003968 <update_fsm>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
			  controller.timeout = 0;					// Reset timeout counter
		}
	}

}
 8006636:	e099      	b.n	800676c <can_tx_rx+0x20c>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8006638:	4b59      	ldr	r3, [pc, #356]	; (80067a0 <can_tx_rx+0x240>)
 800663a:	785a      	ldrb	r2, [r3, #1]
 800663c:	4b58      	ldr	r3, [pc, #352]	; (80067a0 <can_tx_rx+0x240>)
 800663e:	789b      	ldrb	r3, [r3, #2]
 8006640:	4013      	ands	r3, r2
 8006642:	b2da      	uxtb	r2, r3
 8006644:	4b56      	ldr	r3, [pc, #344]	; (80067a0 <can_tx_rx+0x240>)
 8006646:	78db      	ldrb	r3, [r3, #3]
 8006648:	4013      	ands	r3, r2
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2bff      	cmp	r3, #255	; 0xff
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	4b51      	ldr	r3, [pc, #324]	; (80067a0 <can_tx_rx+0x240>)
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	2bff      	cmp	r3, #255	; 0xff
 800665e:	bf0c      	ite	eq
 8006660:	2301      	moveq	r3, #1
 8006662:	2300      	movne	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	4619      	mov	r1, r3
 8006668:	4b4d      	ldr	r3, [pc, #308]	; (80067a0 <can_tx_rx+0x240>)
 800666a:	795b      	ldrb	r3, [r3, #5]
 800666c:	2bff      	cmp	r3, #255	; 0xff
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4013      	ands	r3, r2
 800667c:	4a48      	ldr	r2, [pc, #288]	; (80067a0 <can_tx_rx+0x240>)
 800667e:	7992      	ldrb	r2, [r2, #6]
 8006680:	2aff      	cmp	r2, #255	; 0xff
 8006682:	bf0c      	ite	eq
 8006684:	2201      	moveq	r2, #1
 8006686:	2200      	movne	r2, #0
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	4013      	ands	r3, r2
 800668c:	4a44      	ldr	r2, [pc, #272]	; (80067a0 <can_tx_rx+0x240>)
 800668e:	79d2      	ldrb	r2, [r2, #7]
 8006690:	2aff      	cmp	r2, #255	; 0xff
 8006692:	bf0c      	ite	eq
 8006694:	2201      	moveq	r2, #1
 8006696:	2200      	movne	r2, #0
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	4013      	ands	r3, r2
 800669c:	4a40      	ldr	r2, [pc, #256]	; (80067a0 <can_tx_rx+0x240>)
 800669e:	7a12      	ldrb	r2, [r2, #8]
 80066a0:	2afd      	cmp	r2, #253	; 0xfd
 80066a2:	bf0c      	ite	eq
 80066a4:	2201      	moveq	r2, #1
 80066a6:	2200      	movne	r2, #0
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <can_tx_rx+0x15a>
			update_fsm(&state, MENU_CMD);
 80066b0:	211b      	movs	r1, #27
 80066b2:	483c      	ldr	r0, [pc, #240]	; (80067a4 <can_tx_rx+0x244>)
 80066b4:	f7fd f958 	bl	8003968 <update_fsm>
}
 80066b8:	e058      	b.n	800676c <can_tx_rx+0x20c>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80066ba:	4b39      	ldr	r3, [pc, #228]	; (80067a0 <can_tx_rx+0x240>)
 80066bc:	785a      	ldrb	r2, [r3, #1]
 80066be:	4b38      	ldr	r3, [pc, #224]	; (80067a0 <can_tx_rx+0x240>)
 80066c0:	789b      	ldrb	r3, [r3, #2]
 80066c2:	4013      	ands	r3, r2
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b36      	ldr	r3, [pc, #216]	; (80067a0 <can_tx_rx+0x240>)
 80066c8:	78db      	ldrb	r3, [r3, #3]
 80066ca:	4013      	ands	r3, r2
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2bff      	cmp	r3, #255	; 0xff
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	4b31      	ldr	r3, [pc, #196]	; (80067a0 <can_tx_rx+0x240>)
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	2bff      	cmp	r3, #255	; 0xff
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	4619      	mov	r1, r3
 80066ea:	4b2d      	ldr	r3, [pc, #180]	; (80067a0 <can_tx_rx+0x240>)
 80066ec:	795b      	ldrb	r3, [r3, #5]
 80066ee:	2bff      	cmp	r3, #255	; 0xff
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4013      	ands	r3, r2
 80066fe:	4a28      	ldr	r2, [pc, #160]	; (80067a0 <can_tx_rx+0x240>)
 8006700:	7992      	ldrb	r2, [r2, #6]
 8006702:	2aff      	cmp	r2, #255	; 0xff
 8006704:	bf0c      	ite	eq
 8006706:	2201      	moveq	r2, #1
 8006708:	2200      	movne	r2, #0
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	4013      	ands	r3, r2
 800670e:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <can_tx_rx+0x240>)
 8006710:	79d2      	ldrb	r2, [r2, #7]
 8006712:	2aff      	cmp	r2, #255	; 0xff
 8006714:	bf0c      	ite	eq
 8006716:	2201      	moveq	r2, #1
 8006718:	2200      	movne	r2, #0
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	4013      	ands	r3, r2
 800671e:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <can_tx_rx+0x240>)
 8006720:	7a12      	ldrb	r2, [r2, #8]
 8006722:	2afe      	cmp	r2, #254	; 0xfe
 8006724:	bf0c      	ite	eq
 8006726:	2201      	moveq	r2, #1
 8006728:	2200      	movne	r2, #0
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	4013      	ands	r3, r2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <can_tx_rx+0x1dc>
			  update_fsm(&state, ZERO_CMD);
 8006732:	217a      	movs	r1, #122	; 0x7a
 8006734:	481b      	ldr	r0, [pc, #108]	; (80067a4 <can_tx_rx+0x244>)
 8006736:	f7fd f917 	bl	8003968 <update_fsm>
}
 800673a:	e017      	b.n	800676c <can_tx_rx+0x20c>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 800673c:	4e18      	ldr	r6, [pc, #96]	; (80067a0 <can_tx_rx+0x240>)
 800673e:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <can_tx_rx+0x248>)
 8006740:	9310      	str	r3, [sp, #64]	; 0x40
 8006742:	466d      	mov	r5, sp
 8006744:	f106 0410 	add.w	r4, r6, #16
 8006748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800674a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800674c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800674e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006754:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006758:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800675c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006760:	f7fb fc36 	bl	8001fd0 <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <can_tx_rx+0x230>)
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006774:	20009469 	.word	0x20009469
 8006778:	20009474 	.word	0x20009474
 800677c:	20000314 	.word	0x20000314
 8006780:	200094b8 	.word	0x200094b8
 8006784:	2000043c 	.word	0x2000043c
 8006788:	20000b5c 	.word	0x20000b5c
 800678c:	2000033c 	.word	0x2000033c
 8006790:	20000850 	.word	0x20000850
 8006794:	20009448 	.word	0x20009448
 8006798:	20009449 	.word	0x20009449
 800679c:	20009450 	.word	0x20009450
 80067a0:	20009468 	.word	0x20009468
 80067a4:	20000b48 	.word	0x20000b48
 80067a8:	2000091c 	.word	0x2000091c

080067ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
	return 1;
 80067b0:	2301      	movs	r3, #1
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <_kill>:

int _kill(int pid, int sig)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80067c6:	f005 fa49 	bl	800bc5c <__errno>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2216      	movs	r2, #22
 80067ce:	601a      	str	r2, [r3, #0]
	return -1;
 80067d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_exit>:

void _exit (int status)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80067e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ffe7 	bl	80067bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80067ee:	e7fe      	b.n	80067ee <_exit+0x12>

080067f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e00a      	b.n	8006818 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006802:	f3af 8000 	nop.w
 8006806:	4601      	mov	r1, r0
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	60ba      	str	r2, [r7, #8]
 800680e:	b2ca      	uxtb	r2, r1
 8006810:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	3301      	adds	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	429a      	cmp	r2, r3
 800681e:	dbf0      	blt.n	8006802 <_read+0x12>
	}

return len;
 8006820:	687b      	ldr	r3, [r7, #4]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e009      	b.n	8006850 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	60ba      	str	r2, [r7, #8]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 faf5 	bl	8006e34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	3301      	adds	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	dbf1      	blt.n	800683c <_write+0x12>
	}
	return len;
 8006858:	687b      	ldr	r3, [r7, #4]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <_close>:

int _close(int file)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
	return -1;
 800686a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800688a:	605a      	str	r2, [r3, #4]
	return 0;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <_isatty>:

int _isatty(int file)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
	return 1;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
	return 0;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80068d4:	4b11      	ldr	r3, [pc, #68]	; (800691c <_sbrk+0x50>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <_sbrk+0x16>
		heap_end = &end;
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <_sbrk+0x50>)
 80068de:	4a10      	ldr	r2, [pc, #64]	; (8006920 <_sbrk+0x54>)
 80068e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80068e2:	4b0e      	ldr	r3, [pc, #56]	; (800691c <_sbrk+0x50>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <_sbrk+0x50>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4413      	add	r3, r2
 80068f0:	466a      	mov	r2, sp
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d907      	bls.n	8006906 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80068f6:	f005 f9b1 	bl	800bc5c <__errno>
 80068fa:	4603      	mov	r3, r0
 80068fc:	220c      	movs	r2, #12
 80068fe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006904:	e006      	b.n	8006914 <_sbrk+0x48>
	}

	heap_end += incr;
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <_sbrk+0x50>)
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	4a03      	ldr	r2, [pc, #12]	; (800691c <_sbrk+0x50>)
 8006910:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006912:	68fb      	ldr	r3, [r7, #12]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20009574 	.word	0x20009574
 8006920:	200096a8 	.word	0x200096a8

08006924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006928:	4b08      	ldr	r3, [pc, #32]	; (800694c <SystemInit+0x28>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	4a07      	ldr	r2, [pc, #28]	; (800694c <SystemInit+0x28>)
 8006930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006938:	4b04      	ldr	r3, [pc, #16]	; (800694c <SystemInit+0x28>)
 800693a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800693e:	609a      	str	r2, [r3, #8]
#endif
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	e000ed00 	.word	0xe000ed00

08006950 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b096      	sub	sp, #88	; 0x58
 8006954:	af00      	add	r7, sp, #0
	// - 40kHz loop timing is 2250 timer period


  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	605a      	str	r2, [r3, #4]
 8006960:	609a      	str	r2, [r3, #8]
 8006962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800696e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	605a      	str	r2, [r3, #4]
 8006978:	609a      	str	r2, [r3, #8]
 800697a:	60da      	str	r2, [r3, #12]
 800697c:	611a      	str	r2, [r3, #16]
 800697e:	615a      	str	r2, [r3, #20]
 8006980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	2220      	movs	r2, #32
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f005 f99f 	bl	800bccc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800698e:	4b4a      	ldr	r3, [pc, #296]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006990:	4a4a      	ldr	r2, [pc, #296]	; (8006abc <MX_TIM1_Init+0x16c>)
 8006992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006994:	4b48      	ldr	r3, [pc, #288]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006996:	2200      	movs	r2, #0
 8006998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800699a:	4b47      	ldr	r3, [pc, #284]	; (8006ab8 <MX_TIM1_Init+0x168>)
 800699c:	2220      	movs	r2, #32
 800699e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 80069a0:	4b45      	ldr	r3, [pc, #276]	; (8006ab8 <MX_TIM1_Init+0x168>)
 80069a2:	f241 1294 	movw	r2, #4500	; 0x1194
 80069a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069a8:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <MX_TIM1_Init+0x168>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80069ae:	4b42      	ldr	r3, [pc, #264]	; (8006ab8 <MX_TIM1_Init+0x168>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80069b4:	4b40      	ldr	r3, [pc, #256]	; (8006ab8 <MX_TIM1_Init+0x168>)
 80069b6:	2280      	movs	r2, #128	; 0x80
 80069b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80069ba:	483f      	ldr	r0, [pc, #252]	; (8006ab8 <MX_TIM1_Init+0x168>)
 80069bc:	f002 ffce 	bl	800995c <HAL_TIM_Base_Init>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80069c6:	f7fe fde7 	bl	8005598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80069ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80069d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80069d4:	4619      	mov	r1, r3
 80069d6:	4838      	ldr	r0, [pc, #224]	; (8006ab8 <MX_TIM1_Init+0x168>)
 80069d8:	f003 fbd4 	bl	800a184 <HAL_TIM_ConfigClockSource>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80069e2:	f7fe fdd9 	bl	8005598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80069e6:	4834      	ldr	r0, [pc, #208]	; (8006ab8 <MX_TIM1_Init+0x168>)
 80069e8:	f003 f8e0 	bl	8009bac <HAL_TIM_PWM_Init>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80069f2:	f7fe fdd1 	bl	8005598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069f6:	2300      	movs	r3, #0
 80069f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80069fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a02:	4619      	mov	r1, r3
 8006a04:	482c      	ldr	r0, [pc, #176]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006a06:	f003 ffc7 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006a10:	f7fe fdc2 	bl	8005598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a14:	2360      	movs	r3, #96	; 0x60
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006a20:	2300      	movs	r3, #0
 8006a22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006a24:	2304      	movs	r3, #4
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a34:	2200      	movs	r2, #0
 8006a36:	4619      	mov	r1, r3
 8006a38:	481f      	ldr	r0, [pc, #124]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006a3a:	f003 fae1 	bl	800a000 <HAL_TIM_PWM_ConfigChannel>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006a44:	f7fe fda8 	bl	8005598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4819      	ldr	r0, [pc, #100]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006a52:	f003 fad5 	bl	800a000 <HAL_TIM_PWM_ConfigChannel>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006a5c:	f7fe fd9c 	bl	8005598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a64:	2208      	movs	r2, #8
 8006a66:	4619      	mov	r1, r3
 8006a68:	4813      	ldr	r0, [pc, #76]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006a6a:	f003 fac9 	bl	800a000 <HAL_TIM_PWM_ConfigChannel>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8006a74:	f7fe fd90 	bl	8005598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006a96:	1d3b      	adds	r3, r7, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4807      	ldr	r0, [pc, #28]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006a9c:	f003 fff8 	bl	800aa90 <HAL_TIMEx_ConfigBreakDeadTime>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8006aa6:	f7fe fd77 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006aaa:	4803      	ldr	r0, [pc, #12]	; (8006ab8 <MX_TIM1_Init+0x168>)
 8006aac:	f000 f8f4 	bl	8006c98 <HAL_TIM_MspPostInit>

}
 8006ab0:	bf00      	nop
 8006ab2:	3758      	adds	r7, #88	; 0x58
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20009578 	.word	0x20009578
 8006abc:	40010000 	.word	0x40010000

08006ac0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ac6:	f107 0308 	add.w	r3, r7, #8
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	605a      	str	r2, [r3, #4]
 8006ad0:	609a      	str	r2, [r3, #8]
 8006ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006adc:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006ae6:	225a      	movs	r2, #90	; 0x5a
 8006ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006af0:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006af8:	4b16      	ldr	r3, [pc, #88]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006b04:	4813      	ldr	r0, [pc, #76]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006b06:	f002 ff29 	bl	800995c <HAL_TIM_Base_Init>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006b10:	f7fe fd42 	bl	8005598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4619      	mov	r1, r3
 8006b20:	480c      	ldr	r0, [pc, #48]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006b22:	f003 fb2f 	bl	800a184 <HAL_TIM_ConfigClockSource>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006b2c:	f7fe fd34 	bl	8005598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b30:	2300      	movs	r3, #0
 8006b32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b38:	463b      	mov	r3, r7
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4805      	ldr	r0, [pc, #20]	; (8006b54 <MX_TIM2_Init+0x94>)
 8006b3e:	f003 ff2b 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006b48:	f7fe fd26 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006b4c:	bf00      	nop
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	200095c0 	.word	0x200095c0

08006b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b5e:	f107 0308 	add.w	r3, r7, #8
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006b74:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <MX_TIM3_Init+0x94>)
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <MX_TIM3_Init+0x98>)
 8006b78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90;
 8006b7a:	4b1c      	ldr	r3, [pc, #112]	; (8006bec <MX_TIM3_Init+0x94>)
 8006b7c:	225a      	movs	r2, #90	; 0x5a
 8006b7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b80:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <MX_TIM3_Init+0x94>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <MX_TIM3_Init+0x94>)
 8006b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b8e:	4b17      	ldr	r3, [pc, #92]	; (8006bec <MX_TIM3_Init+0x94>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b94:	4b15      	ldr	r3, [pc, #84]	; (8006bec <MX_TIM3_Init+0x94>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006b9a:	4814      	ldr	r0, [pc, #80]	; (8006bec <MX_TIM3_Init+0x94>)
 8006b9c:	f002 fede 	bl	800995c <HAL_TIM_Base_Init>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006ba6:	f7fe fcf7 	bl	8005598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006bb0:	f107 0308 	add.w	r3, r7, #8
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	480d      	ldr	r0, [pc, #52]	; (8006bec <MX_TIM3_Init+0x94>)
 8006bb8:	f003 fae4 	bl	800a184 <HAL_TIM_ConfigClockSource>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8006bc2:	f7fe fce9 	bl	8005598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006bce:	463b      	mov	r3, r7
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4806      	ldr	r0, [pc, #24]	; (8006bec <MX_TIM3_Init+0x94>)
 8006bd4:	f003 fee0 	bl	800a998 <HAL_TIMEx_MasterConfigSynchronization>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8006bde:	f7fe fcdb 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006be2:	bf00      	nop
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20009608 	.word	0x20009608
 8006bf0:	40000400 	.word	0x40000400

08006bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a22      	ldr	r2, [pc, #136]	; (8006c8c <HAL_TIM_Base_MspInit+0x98>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d116      	bne.n	8006c34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	4b21      	ldr	r3, [pc, #132]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	4a20      	ldr	r2, [pc, #128]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	6453      	str	r3, [r2, #68]	; 0x44
 8006c16:	4b1e      	ldr	r3, [pc, #120]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8006c22:	2200      	movs	r2, #0
 8006c24:	2101      	movs	r1, #1
 8006c26:	2019      	movs	r0, #25
 8006c28:	f001 faf3 	bl	8008212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006c2c:	2019      	movs	r0, #25
 8006c2e:	f001 fb0c 	bl	800824a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006c32:	e026      	b.n	8006c82 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3c:	d10e      	bne.n	8006c5c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c3e:	2300      	movs	r3, #0
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	693b      	ldr	r3, [r7, #16]
}
 8006c5a:	e012      	b.n	8006c82 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a0c      	ldr	r2, [pc, #48]	; (8006c94 <HAL_TIM_Base_MspInit+0xa0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d10d      	bne.n	8006c82 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	6413      	str	r3, [r2, #64]	; 0x40
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <HAL_TIM_Base_MspInit+0x9c>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40000400 	.word	0x40000400

08006c98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca0:	f107 030c 	add.w	r3, r7, #12
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	605a      	str	r2, [r3, #4]
 8006caa:	609a      	str	r2, [r3, #8]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a12      	ldr	r2, [pc, #72]	; (8006d00 <HAL_TIM_MspPostInit+0x68>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d11e      	bne.n	8006cf8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <HAL_TIM_MspPostInit+0x6c>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <HAL_TIM_MspPostInit+0x6c>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <HAL_TIM_MspPostInit+0x6c>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006cd6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006cda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cec:	f107 030c 	add.w	r3, r7, #12
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4805      	ldr	r0, [pc, #20]	; (8006d08 <HAL_TIM_MspPostInit+0x70>)
 8006cf4:	f001 fb56 	bl	80083a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006cf8:	bf00      	nop
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40020000 	.word	0x40020000

08006d0c <delay_us>:
}

/* USER CODE BEGIN 1 */

void delay_us (uint16_t us)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <delay_us+0x30>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8006d1e:	bf00      	nop
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <delay_us+0x30>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d3f9      	bcc.n	8006d20 <delay_us+0x14>
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	200095c0 	.word	0x200095c0

08006d40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006d44:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d46:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <MX_USART2_UART_Init+0x50>)
 8006d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8006d4a:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d4c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006d52:	4b0e      	ldr	r3, [pc, #56]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d66:	220c      	movs	r2, #12
 8006d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006d76:	4805      	ldr	r0, [pc, #20]	; (8006d8c <MX_USART2_UART_Init+0x4c>)
 8006d78:	f003 fef0 	bl	800ab5c <HAL_UART_Init>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006d82:	f7fe fc09 	bl	8005598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006d86:	bf00      	nop
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20009650 	.word	0x20009650
 8006d90:	40004400 	.word	0x40004400

08006d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d9c:	f107 0314 	add.w	r3, r7, #20
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	; (8006e28 <HAL_UART_MspInit+0x94>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d133      	bne.n	8006e1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006db6:	2300      	movs	r3, #0
 8006db8:	613b      	str	r3, [r7, #16]
 8006dba:	4b1c      	ldr	r3, [pc, #112]	; (8006e2c <HAL_UART_MspInit+0x98>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <HAL_UART_MspInit+0x98>)
 8006dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006dc6:	4b19      	ldr	r3, [pc, #100]	; (8006e2c <HAL_UART_MspInit+0x98>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <HAL_UART_MspInit+0x98>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <HAL_UART_MspInit+0x98>)
 8006ddc:	f043 0301 	orr.w	r3, r3, #1
 8006de0:	6313      	str	r3, [r2, #48]	; 0x30
 8006de2:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <HAL_UART_MspInit+0x98>)
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006dee:	230c      	movs	r3, #12
 8006df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df2:	2302      	movs	r3, #2
 8006df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006dfe:	2307      	movs	r3, #7
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e02:	f107 0314 	add.w	r3, r7, #20
 8006e06:	4619      	mov	r1, r3
 8006e08:	4809      	ldr	r0, [pc, #36]	; (8006e30 <HAL_UART_MspInit+0x9c>)
 8006e0a:	f001 facb 	bl	80083a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2102      	movs	r1, #2
 8006e12:	2026      	movs	r0, #38	; 0x26
 8006e14:	f001 f9fd 	bl	8008212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006e18:	2026      	movs	r0, #38	; 0x26
 8006e1a:	f001 fa16 	bl	800824a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3728      	adds	r7, #40	; 0x28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40004400 	.word	0x40004400
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	40020000 	.word	0x40020000

08006e34 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006e3c:	1d39      	adds	r1, r7, #4
 8006e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e42:	2201      	movs	r2, #1
 8006e44:	4803      	ldr	r0, [pc, #12]	; (8006e54 <__io_putchar+0x20>)
 8006e46:	f003 fed6 	bl	800abf6 <HAL_UART_Transmit>
  return ch;
 8006e4a:	687b      	ldr	r3, [r7, #4]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20009650 	.word	0x20009650

08006e58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8006e60:	2201      	movs	r2, #1
 8006e62:	4904      	ldr	r1, [pc, #16]	; (8006e74 <HAL_UART_RxCpltCallback+0x1c>)
 8006e64:	4804      	ldr	r0, [pc, #16]	; (8006e78 <HAL_UART_RxCpltCallback+0x20>)
 8006e66:	f003 ff58 	bl	800ad1a <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	200094bc 	.word	0x200094bc
 8006e78:	20009650 	.word	0x20009650

08006e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e80:	480d      	ldr	r0, [pc, #52]	; (8006eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006e82:	490e      	ldr	r1, [pc, #56]	; (8006ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006e84:	4a0e      	ldr	r2, [pc, #56]	; (8006ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e88:	e002      	b.n	8006e90 <LoopCopyDataInit>

08006e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e8e:	3304      	adds	r3, #4

08006e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e94:	d3f9      	bcc.n	8006e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e96:	4a0b      	ldr	r2, [pc, #44]	; (8006ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006e98:	4c0b      	ldr	r4, [pc, #44]	; (8006ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e9c:	e001      	b.n	8006ea2 <LoopFillZerobss>

08006e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ea0:	3204      	adds	r2, #4

08006ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ea4:	d3fb      	bcc.n	8006e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006ea6:	f7ff fd3d 	bl	8006924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006eaa:	f004 fedd 	bl	800bc68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006eae:	f7fd fe67 	bl	8004b80 <main>
  bx  lr    
 8006eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ebc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8006ec0:	08011f98 	.word	0x08011f98
  ldr r2, =_sbss
 8006ec4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006ec8:	200096a8 	.word	0x200096a8

08006ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ecc:	e7fe      	b.n	8006ecc <ADC_IRQHandler>
	...

08006ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <HAL_Init+0x40>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a0d      	ldr	r2, [pc, #52]	; (8006f10 <HAL_Init+0x40>)
 8006eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_Init+0x40>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a0a      	ldr	r2, [pc, #40]	; (8006f10 <HAL_Init+0x40>)
 8006ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <HAL_Init+0x40>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a07      	ldr	r2, [pc, #28]	; (8006f10 <HAL_Init+0x40>)
 8006ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ef8:	2003      	movs	r0, #3
 8006efa:	f001 f97f 	bl	80081fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f000 f808 	bl	8006f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f04:	f7ff fa86 	bl	8006414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40023c00 	.word	0x40023c00

08006f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f1c:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <HAL_InitTick+0x54>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <HAL_InitTick+0x58>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f997 	bl	8008266 <HAL_SYSTICK_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e00e      	b.n	8006f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b0f      	cmp	r3, #15
 8006f46:	d80a      	bhi.n	8006f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f48:	2200      	movs	r2, #0
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f50:	f001 f95f 	bl	8008212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f54:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <HAL_InitTick+0x5c>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000040 	.word	0x20000040
 8006f6c:	20000048 	.word	0x20000048
 8006f70:	20000044 	.word	0x20000044

08006f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <HAL_IncTick+0x20>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_IncTick+0x24>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4413      	add	r3, r2
 8006f84:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <HAL_IncTick+0x24>)
 8006f86:	6013      	str	r3, [r2, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000048 	.word	0x20000048
 8006f98:	20009694 	.word	0x20009694

08006f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <HAL_GetTick+0x14>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20009694 	.word	0x20009694

08006fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fbc:	f7ff ffee 	bl	8006f9c <HAL_GetTick>
 8006fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fcc:	d005      	beq.n	8006fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <HAL_Delay+0x44>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006fda:	bf00      	nop
 8006fdc:	f7ff ffde 	bl	8006f9c <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d8f7      	bhi.n	8006fdc <HAL_Delay+0x28>
  {
  }
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000048 	.word	0x20000048

08006ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e033      	b.n	800707a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fa f90a 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	2b00      	cmp	r3, #0
 8007038:	d118      	bne.n	800706c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007042:	f023 0302 	bic.w	r3, r3, #2
 8007046:	f043 0202 	orr.w	r2, r3, #2
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fab4 	bl	80075bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	f043 0201 	orr.w	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	641a      	str	r2, [r3, #64]	; 0x40
 800706a:	e001      	b.n	8007070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_ADC_Start+0x1a>
 800709a:	2302      	movs	r3, #2
 800709c:	e0b2      	b.n	8007204 <HAL_ADC_Start+0x180>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d018      	beq.n	80070e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80070c4:	4b52      	ldr	r3, [pc, #328]	; (8007210 <HAL_ADC_Start+0x18c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a52      	ldr	r2, [pc, #328]	; (8007214 <HAL_ADC_Start+0x190>)
 80070ca:	fba2 2303 	umull	r2, r3, r2, r3
 80070ce:	0c9a      	lsrs	r2, r3, #18
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80070d8:	e002      	b.n	80070e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	3b01      	subs	r3, #1
 80070de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f9      	bne.n	80070da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d17a      	bne.n	80071ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007112:	2b00      	cmp	r3, #0
 8007114:	d007      	beq.n	8007126 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800711e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007132:	d106      	bne.n	8007142 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007138:	f023 0206 	bic.w	r2, r3, #6
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	645a      	str	r2, [r3, #68]	; 0x44
 8007140:	e002      	b.n	8007148 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007150:	4b31      	ldr	r3, [pc, #196]	; (8007218 <HAL_ADC_Start+0x194>)
 8007152:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800715c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	2b00      	cmp	r3, #0
 8007168:	d12a      	bne.n	80071c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2b      	ldr	r2, [pc, #172]	; (800721c <HAL_ADC_Start+0x198>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d015      	beq.n	80071a0 <HAL_ADC_Start+0x11c>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a29      	ldr	r2, [pc, #164]	; (8007220 <HAL_ADC_Start+0x19c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d105      	bne.n	800718a <HAL_ADC_Start+0x106>
 800717e:	4b26      	ldr	r3, [pc, #152]	; (8007218 <HAL_ADC_Start+0x194>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a25      	ldr	r2, [pc, #148]	; (8007224 <HAL_ADC_Start+0x1a0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d136      	bne.n	8007202 <HAL_ADC_Start+0x17e>
 8007194:	4b20      	ldr	r3, [pc, #128]	; (8007218 <HAL_ADC_Start+0x194>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b00      	cmp	r3, #0
 800719e:	d130      	bne.n	8007202 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d129      	bne.n	8007202 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071bc:	609a      	str	r2, [r3, #8]
 80071be:	e020      	b.n	8007202 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a15      	ldr	r2, [pc, #84]	; (800721c <HAL_ADC_Start+0x198>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d11b      	bne.n	8007202 <HAL_ADC_Start+0x17e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d114      	bne.n	8007202 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	e00b      	b.n	8007202 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f043 0210 	orr.w	r2, r3, #16
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	f043 0201 	orr.w	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20000040 	.word	0x20000040
 8007214:	431bde83 	.word	0x431bde83
 8007218:	40012300 	.word	0x40012300
 800721c:	40012000 	.word	0x40012000
 8007220:	40012100 	.word	0x40012100
 8007224:	40012200 	.word	0x40012200

08007228 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007244:	d113      	bne.n	800726e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007254:	d10b      	bne.n	800726e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f043 0220 	orr.w	r2, r3, #32
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e063      	b.n	8007336 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800726e:	f7ff fe95 	bl	8006f9c <HAL_GetTick>
 8007272:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007274:	e021      	b.n	80072ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800727c:	d01d      	beq.n	80072ba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <HAL_ADC_PollForConversion+0x6c>
 8007284:	f7ff fe8a 	bl	8006f9c <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d212      	bcs.n	80072ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d00b      	beq.n	80072ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f043 0204 	orr.w	r2, r3, #4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e03d      	b.n	8007336 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d1d6      	bne.n	8007276 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0212 	mvn.w	r2, #18
 80072d0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d123      	bne.n	8007334 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d11f      	bne.n	8007334 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d006      	beq.n	8007310 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800730c:	2b00      	cmp	r3, #0
 800730e:	d111      	bne.n	8007334 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	f043 0201 	orr.w	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_ADC_ConfigChannel+0x1c>
 8007370:	2302      	movs	r3, #2
 8007372:	e113      	b.n	800759c <HAL_ADC_ConfigChannel+0x244>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b09      	cmp	r3, #9
 8007382:	d925      	bls.n	80073d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68d9      	ldr	r1, [r3, #12]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	4613      	mov	r3, r2
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	4413      	add	r3, r2
 8007398:	3b1e      	subs	r3, #30
 800739a:	2207      	movs	r2, #7
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	43da      	mvns	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	400a      	ands	r2, r1
 80073a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68d9      	ldr	r1, [r3, #12]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4618      	mov	r0, r3
 80073bc:	4603      	mov	r3, r0
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4403      	add	r3, r0
 80073c2:	3b1e      	subs	r3, #30
 80073c4:	409a      	lsls	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	e022      	b.n	8007416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6919      	ldr	r1, [r3, #16]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	4613      	mov	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4413      	add	r3, r2
 80073e4:	2207      	movs	r2, #7
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	43da      	mvns	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	400a      	ands	r2, r1
 80073f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6919      	ldr	r1, [r3, #16]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	4618      	mov	r0, r3
 8007406:	4603      	mov	r3, r0
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	4403      	add	r3, r0
 800740c:	409a      	lsls	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b06      	cmp	r3, #6
 800741c:	d824      	bhi.n	8007468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	3b05      	subs	r3, #5
 8007430:	221f      	movs	r2, #31
 8007432:	fa02 f303 	lsl.w	r3, r2, r3
 8007436:	43da      	mvns	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	400a      	ands	r2, r1
 800743e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	4618      	mov	r0, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	3b05      	subs	r3, #5
 800745a:	fa00 f203 	lsl.w	r2, r0, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	635a      	str	r2, [r3, #52]	; 0x34
 8007466:	e04c      	b.n	8007502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2b0c      	cmp	r3, #12
 800746e:	d824      	bhi.n	80074ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	3b23      	subs	r3, #35	; 0x23
 8007482:	221f      	movs	r2, #31
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	43da      	mvns	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	400a      	ands	r2, r1
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	4618      	mov	r0, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	3b23      	subs	r3, #35	; 0x23
 80074ac:	fa00 f203 	lsl.w	r2, r0, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
 80074b8:	e023      	b.n	8007502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	3b41      	subs	r3, #65	; 0x41
 80074cc:	221f      	movs	r2, #31
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	43da      	mvns	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	400a      	ands	r2, r1
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	4618      	mov	r0, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	3b41      	subs	r3, #65	; 0x41
 80074f6:	fa00 f203 	lsl.w	r2, r0, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007502:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <HAL_ADC_ConfigChannel+0x250>)
 8007504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a28      	ldr	r2, [pc, #160]	; (80075ac <HAL_ADC_ConfigChannel+0x254>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10f      	bne.n	8007530 <HAL_ADC_ConfigChannel+0x1d8>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b12      	cmp	r3, #18
 8007516:	d10b      	bne.n	8007530 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1d      	ldr	r2, [pc, #116]	; (80075ac <HAL_ADC_ConfigChannel+0x254>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d12b      	bne.n	8007592 <HAL_ADC_ConfigChannel+0x23a>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <HAL_ADC_ConfigChannel+0x258>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <HAL_ADC_ConfigChannel+0x1f4>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b11      	cmp	r3, #17
 800754a:	d122      	bne.n	8007592 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <HAL_ADC_ConfigChannel+0x258>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d111      	bne.n	8007592 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <HAL_ADC_ConfigChannel+0x25c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <HAL_ADC_ConfigChannel+0x260>)
 8007574:	fba2 2303 	umull	r2, r3, r2, r3
 8007578:	0c9a      	lsrs	r2, r3, #18
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007584:	e002      	b.n	800758c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	3b01      	subs	r3, #1
 800758a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f9      	bne.n	8007586 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	40012300 	.word	0x40012300
 80075ac:	40012000 	.word	0x40012000
 80075b0:	10000012 	.word	0x10000012
 80075b4:	20000040 	.word	0x20000040
 80075b8:	431bde83 	.word	0x431bde83

080075bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075c4:	4b79      	ldr	r3, [pc, #484]	; (80077ac <ADC_Init+0x1f0>)
 80075c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	431a      	orrs	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6859      	ldr	r1, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	021a      	lsls	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6859      	ldr	r1, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6899      	ldr	r1, [r3, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	4a58      	ldr	r2, [pc, #352]	; (80077b0 <ADC_Init+0x1f4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d022      	beq.n	800769a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6899      	ldr	r1, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6899      	ldr	r1, [r3, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	e00f      	b.n	80076ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0202 	bic.w	r2, r2, #2
 80076c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6899      	ldr	r1, [r3, #8]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	7e1b      	ldrb	r3, [r3, #24]
 80076d4:	005a      	lsls	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01b      	beq.n	8007720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	3b01      	subs	r3, #1
 8007714:	035a      	lsls	r2, r3, #13
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	e007      	b.n	8007730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800772e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	3b01      	subs	r3, #1
 800774c:	051a      	lsls	r2, r3, #20
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6899      	ldr	r1, [r3, #8]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007772:	025a      	lsls	r2, r3, #9
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6899      	ldr	r1, [r3, #8]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	029a      	lsls	r2, r3, #10
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	40012300 	.word	0x40012300
 80077b0:	0f000001 	.word	0x0f000001

080077b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e031      	b.n	8007830 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077d4:	4b19      	ldr	r3, [pc, #100]	; (800783c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f023 021f 	bic.w	r2, r3, #31
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	431a      	orrs	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	431a      	orrs	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	40012300 	.word	0x40012300

08007840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e0ed      	b.n	8007a2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d102      	bne.n	8007864 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fa fac4 	bl	8001dec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007874:	f7ff fb92 	bl	8006f9c <HAL_GetTick>
 8007878:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800787a:	e012      	b.n	80078a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800787c:	f7ff fb8e 	bl	8006f9c <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	2b0a      	cmp	r3, #10
 8007888:	d90b      	bls.n	80078a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2205      	movs	r2, #5
 800789a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e0c5      	b.n	8007a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0e5      	beq.n	800787c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0202 	bic.w	r2, r2, #2
 80078be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078c0:	f7ff fb6c 	bl	8006f9c <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80078c6:	e012      	b.n	80078ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078c8:	f7ff fb68 	bl	8006f9c <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b0a      	cmp	r3, #10
 80078d4:	d90b      	bls.n	80078ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2205      	movs	r2, #5
 80078e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e09f      	b.n	8007a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e5      	bne.n	80078c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7e1b      	ldrb	r3, [r3, #24]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d108      	bne.n	8007916 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	e007      	b.n	8007926 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7e5b      	ldrb	r3, [r3, #25]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d108      	bne.n	8007940 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e007      	b.n	8007950 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800794e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7e9b      	ldrb	r3, [r3, #26]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d108      	bne.n	800796a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0220 	orr.w	r2, r2, #32
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e007      	b.n	800797a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0220 	bic.w	r2, r2, #32
 8007978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7edb      	ldrb	r3, [r3, #27]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d108      	bne.n	8007994 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0210 	bic.w	r2, r2, #16
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	e007      	b.n	80079a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0210 	orr.w	r2, r2, #16
 80079a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	7f1b      	ldrb	r3, [r3, #28]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d108      	bne.n	80079be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0208 	orr.w	r2, r2, #8
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e007      	b.n	80079ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0208 	bic.w	r2, r2, #8
 80079cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7f5b      	ldrb	r3, [r3, #29]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d108      	bne.n	80079e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0204 	orr.w	r2, r2, #4
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e007      	b.n	80079f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0204 	bic.w	r2, r2, #4
 80079f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	ea42 0103 	orr.w	r1, r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	1e5a      	subs	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007a50:	7cfb      	ldrb	r3, [r7, #19]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d003      	beq.n	8007a5e <HAL_CAN_ConfigFilter+0x26>
 8007a56:	7cfb      	ldrb	r3, [r7, #19]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	f040 80be 	bne.w	8007bda <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007a5e:	4b65      	ldr	r3, [pc, #404]	; (8007bf4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007a60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a68:	f043 0201 	orr.w	r2, r3, #1
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	401a      	ands	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d123      	bne.n	8007b08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	401a      	ands	r2, r3
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007ae2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	3248      	adds	r2, #72	; 0x48
 8007ae8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007afc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007afe:	6979      	ldr	r1, [r7, #20]
 8007b00:	3348      	adds	r3, #72	; 0x48
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	440b      	add	r3, r1
 8007b06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d122      	bne.n	8007b56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007b30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	3248      	adds	r2, #72	; 0x48
 8007b36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007b4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007b4c:	6979      	ldr	r1, [r7, #20]
 8007b4e:	3348      	adds	r3, #72	; 0x48
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	43db      	mvns	r3, r3
 8007b68:	401a      	ands	r2, r3
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007b70:	e007      	b.n	8007b82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	43db      	mvns	r3, r3
 8007b94:	401a      	ands	r2, r3
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007b9c:	e007      	b.n	8007bae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d107      	bne.n	8007bc6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bcc:	f023 0201 	bic.w	r2, r3, #1
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e006      	b.n	8007be8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	40006400 	.word	0x40006400

08007bf8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d12e      	bne.n	8007c6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c24:	f7ff f9ba 	bl	8006f9c <HAL_GetTick>
 8007c28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007c2a:	e012      	b.n	8007c52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007c2c:	f7ff f9b6 	bl	8006f9c <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b0a      	cmp	r3, #10
 8007c38:	d90b      	bls.n	8007c52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2205      	movs	r2, #5
 8007c4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e012      	b.n	8007c78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e5      	bne.n	8007c2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e006      	b.n	8007c78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
  }
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d003      	beq.n	8007cac <HAL_CAN_AddTxMessage+0x2c>
 8007ca4:	7ffb      	ldrb	r3, [r7, #31]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	f040 80b8 	bne.w	8007e1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d105      	bne.n	8007ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 80a0 	beq.w	8007e0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	0e1b      	lsrs	r3, r3, #24
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d907      	bls.n	8007cec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e09e      	b.n	8007e2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007cec:	2201      	movs	r2, #1
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	409a      	lsls	r2, r3
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10d      	bne.n	8007d1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007d08:	68f9      	ldr	r1, [r7, #12]
 8007d0a:	6809      	ldr	r1, [r1, #0]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	3318      	adds	r3, #24
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	440b      	add	r3, r1
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	e00f      	b.n	8007d3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007d2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3318      	adds	r3, #24
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	440b      	add	r3, r1
 8007d38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6819      	ldr	r1, [r3, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	3318      	adds	r3, #24
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	440b      	add	r3, r1
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	7d1b      	ldrb	r3, [r3, #20]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d111      	bne.n	8007d7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	3318      	adds	r3, #24
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	4413      	add	r3, r2
 8007d62:	3304      	adds	r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	6811      	ldr	r1, [r2, #0]
 8007d6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3318      	adds	r3, #24
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	440b      	add	r3, r1
 8007d76:	3304      	adds	r3, #4
 8007d78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3307      	adds	r3, #7
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	061a      	lsls	r2, r3, #24
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3306      	adds	r3, #6
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3305      	adds	r3, #5
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	4313      	orrs	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	3204      	adds	r2, #4
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	6811      	ldr	r1, [r2, #0]
 8007da2:	ea43 0200 	orr.w	r2, r3, r0
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	440b      	add	r3, r1
 8007dac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007db0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	3303      	adds	r3, #3
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	061a      	lsls	r2, r3, #24
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	041b      	lsls	r3, r3, #16
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6811      	ldr	r1, [r2, #0]
 8007dd8:	ea43 0200 	orr.w	r2, r3, r0
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	440b      	add	r3, r1
 8007de2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007de6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	3318      	adds	r3, #24
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	4413      	add	r3, r2
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	6811      	ldr	r1, [r2, #0]
 8007dfa:	f043 0201 	orr.w	r2, r3, #1
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	3318      	adds	r3, #24
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	440b      	add	r3, r1
 8007e06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e00e      	b.n	8007e2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e006      	b.n	8007e2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3724      	adds	r7, #36	; 0x24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007e36:	b480      	push	{r7}
 8007e38:	b087      	sub	sp, #28
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
 8007e42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d003      	beq.n	8007e5a <HAL_CAN_GetRxMessage+0x24>
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	f040 80f3 	bne.w	8008040 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10e      	bne.n	8007e7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d116      	bne.n	8007e9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e0e7      	b.n	800804e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d107      	bne.n	8007e9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e0d8      	b.n	800804e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	331b      	adds	r3, #27
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	4413      	add	r3, r2
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0204 	and.w	r2, r3, #4
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10c      	bne.n	8007ed4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	331b      	adds	r3, #27
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	4413      	add	r3, r2
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	0d5b      	lsrs	r3, r3, #21
 8007eca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	e00b      	b.n	8007eec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	331b      	adds	r3, #27
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	4413      	add	r3, r2
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	08db      	lsrs	r3, r3, #3
 8007ee4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	331b      	adds	r3, #27
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	4413      	add	r3, r2
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0202 	and.w	r2, r3, #2
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	331b      	adds	r3, #27
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	4413      	add	r3, r2
 8007f0e:	3304      	adds	r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 020f 	and.w	r2, r3, #15
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	331b      	adds	r3, #27
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	4413      	add	r3, r2
 8007f26:	3304      	adds	r3, #4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	331b      	adds	r3, #27
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3304      	adds	r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	0c1b      	lsrs	r3, r3, #16
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	0a1a      	lsrs	r2, r3, #8
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	0c1a      	lsrs	r2, r3, #16
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	3302      	adds	r3, #2
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	0e1a      	lsrs	r2, r3, #24
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	3303      	adds	r3, #3
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	0a1a      	lsrs	r2, r3, #8
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	3305      	adds	r3, #5
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0c1a      	lsrs	r2, r3, #16
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	3306      	adds	r3, #6
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	4413      	add	r3, r2
 8008004:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	0e1a      	lsrs	r2, r3, #24
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	3307      	adds	r3, #7
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d108      	bne.n	800802c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0220 	orr.w	r2, r2, #32
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	e007      	b.n	800803c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0220 	orr.w	r2, r2, #32
 800803a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	e006      	b.n	800804e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
  }
}
 800804e:	4618      	mov	r0, r3
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
	...

0800805c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800806c:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <__NVIC_SetPriorityGrouping+0x44>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008078:	4013      	ands	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800808c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800808e:	4a04      	ldr	r2, [pc, #16]	; (80080a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	60d3      	str	r3, [r2, #12]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	e000ed00 	.word	0xe000ed00

080080a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080a8:	4b04      	ldr	r3, [pc, #16]	; (80080bc <__NVIC_GetPriorityGrouping+0x18>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	0a1b      	lsrs	r3, r3, #8
 80080ae:	f003 0307 	and.w	r3, r3, #7
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	e000ed00 	.word	0xe000ed00

080080c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	db0b      	blt.n	80080ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	f003 021f 	and.w	r2, r3, #31
 80080d8:	4907      	ldr	r1, [pc, #28]	; (80080f8 <__NVIC_EnableIRQ+0x38>)
 80080da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080de:	095b      	lsrs	r3, r3, #5
 80080e0:	2001      	movs	r0, #1
 80080e2:	fa00 f202 	lsl.w	r2, r0, r2
 80080e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	e000e100 	.word	0xe000e100

080080fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800810c:	2b00      	cmp	r3, #0
 800810e:	db0a      	blt.n	8008126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	490c      	ldr	r1, [pc, #48]	; (8008148 <__NVIC_SetPriority+0x4c>)
 8008116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800811a:	0112      	lsls	r2, r2, #4
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	440b      	add	r3, r1
 8008120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008124:	e00a      	b.n	800813c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	b2da      	uxtb	r2, r3
 800812a:	4908      	ldr	r1, [pc, #32]	; (800814c <__NVIC_SetPriority+0x50>)
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	f003 030f 	and.w	r3, r3, #15
 8008132:	3b04      	subs	r3, #4
 8008134:	0112      	lsls	r2, r2, #4
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	440b      	add	r3, r1
 800813a:	761a      	strb	r2, [r3, #24]
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	e000e100 	.word	0xe000e100
 800814c:	e000ed00 	.word	0xe000ed00

08008150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008150:	b480      	push	{r7}
 8008152:	b089      	sub	sp, #36	; 0x24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	f1c3 0307 	rsb	r3, r3, #7
 800816a:	2b04      	cmp	r3, #4
 800816c:	bf28      	it	cs
 800816e:	2304      	movcs	r3, #4
 8008170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	3304      	adds	r3, #4
 8008176:	2b06      	cmp	r3, #6
 8008178:	d902      	bls.n	8008180 <NVIC_EncodePriority+0x30>
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	3b03      	subs	r3, #3
 800817e:	e000      	b.n	8008182 <NVIC_EncodePriority+0x32>
 8008180:	2300      	movs	r3, #0
 8008182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	43da      	mvns	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	401a      	ands	r2, r3
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	fa01 f303 	lsl.w	r3, r1, r3
 80081a2:	43d9      	mvns	r1, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081a8:	4313      	orrs	r3, r2
         );
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3724      	adds	r7, #36	; 0x24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
	...

080081b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081c8:	d301      	bcc.n	80081ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081ca:	2301      	movs	r3, #1
 80081cc:	e00f      	b.n	80081ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081ce:	4a0a      	ldr	r2, [pc, #40]	; (80081f8 <SysTick_Config+0x40>)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081d6:	210f      	movs	r1, #15
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081dc:	f7ff ff8e 	bl	80080fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <SysTick_Config+0x40>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081e6:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <SysTick_Config+0x40>)
 80081e8:	2207      	movs	r2, #7
 80081ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	e000e010 	.word	0xe000e010

080081fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff ff29 	bl	800805c <__NVIC_SetPriorityGrouping>
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008212:	b580      	push	{r7, lr}
 8008214:	b086      	sub	sp, #24
 8008216:	af00      	add	r7, sp, #0
 8008218:	4603      	mov	r3, r0
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008220:	2300      	movs	r3, #0
 8008222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008224:	f7ff ff3e 	bl	80080a4 <__NVIC_GetPriorityGrouping>
 8008228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	6978      	ldr	r0, [r7, #20]
 8008230:	f7ff ff8e 	bl	8008150 <NVIC_EncodePriority>
 8008234:	4602      	mov	r2, r0
 8008236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff ff5d 	bl	80080fc <__NVIC_SetPriority>
}
 8008242:	bf00      	nop
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	4603      	mov	r3, r0
 8008252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff ff31 	bl	80080c0 <__NVIC_EnableIRQ>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff ffa2 	bl	80081b8 <SysTick_Config>
 8008274:	4603      	mov	r3, r0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800828c:	f7fe fe86 	bl	8006f9c <HAL_GetTick>
 8008290:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d008      	beq.n	80082b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2280      	movs	r2, #128	; 0x80
 80082a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e052      	b.n	8008356 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0216 	bic.w	r2, r2, #22
 80082be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695a      	ldr	r2, [r3, #20]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <HAL_DMA_Abort+0x62>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0208 	bic.w	r2, r2, #8
 80082ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0201 	bic.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008300:	e013      	b.n	800832a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008302:	f7fe fe4b 	bl	8006f9c <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b05      	cmp	r3, #5
 800830e:	d90c      	bls.n	800832a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2203      	movs	r2, #3
 800831a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e015      	b.n	8008356 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e4      	bne.n	8008302 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833c:	223f      	movs	r2, #63	; 0x3f
 800833e:	409a      	lsls	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d004      	beq.n	800837c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2280      	movs	r2, #128	; 0x80
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e00c      	b.n	8008396 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2205      	movs	r2, #5
 8008380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0201 	bic.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
	...

080083a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b089      	sub	sp, #36	; 0x24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083ba:	2300      	movs	r3, #0
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e165      	b.n	800868c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80083c0:	2201      	movs	r2, #1
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	fa02 f303 	lsl.w	r3, r2, r3
 80083c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4013      	ands	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	429a      	cmp	r2, r3
 80083da:	f040 8154 	bne.w	8008686 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d005      	beq.n	80083f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d130      	bne.n	8008458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	2203      	movs	r2, #3
 8008402:	fa02 f303 	lsl.w	r3, r2, r3
 8008406:	43db      	mvns	r3, r3
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4013      	ands	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	fa02 f303 	lsl.w	r3, r2, r3
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	4313      	orrs	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800842c:	2201      	movs	r2, #1
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	43db      	mvns	r3, r3
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	4013      	ands	r3, r2
 800843a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	091b      	lsrs	r3, r3, #4
 8008442:	f003 0201 	and.w	r2, r3, #1
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	fa02 f303 	lsl.w	r3, r2, r3
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	4313      	orrs	r3, r2
 8008450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	2b03      	cmp	r3, #3
 8008462:	d017      	beq.n	8008494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	2203      	movs	r2, #3
 8008470:	fa02 f303 	lsl.w	r3, r2, r3
 8008474:	43db      	mvns	r3, r3
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	4013      	ands	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	fa02 f303 	lsl.w	r3, r2, r3
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	4313      	orrs	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f003 0303 	and.w	r3, r3, #3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d123      	bne.n	80084e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	08da      	lsrs	r2, r3, #3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3208      	adds	r2, #8
 80084a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	220f      	movs	r2, #15
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	43db      	mvns	r3, r3
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	4013      	ands	r3, r2
 80084c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	08da      	lsrs	r2, r3, #3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3208      	adds	r2, #8
 80084e2:	69b9      	ldr	r1, [r7, #24]
 80084e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	2203      	movs	r2, #3
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	43db      	mvns	r3, r3
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	4013      	ands	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f003 0203 	and.w	r2, r3, #3
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	4313      	orrs	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80ae 	beq.w	8008686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	4b5d      	ldr	r3, [pc, #372]	; (80086a4 <HAL_GPIO_Init+0x300>)
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	4a5c      	ldr	r2, [pc, #368]	; (80086a4 <HAL_GPIO_Init+0x300>)
 8008534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008538:	6453      	str	r3, [r2, #68]	; 0x44
 800853a:	4b5a      	ldr	r3, [pc, #360]	; (80086a4 <HAL_GPIO_Init+0x300>)
 800853c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008546:	4a58      	ldr	r2, [pc, #352]	; (80086a8 <HAL_GPIO_Init+0x304>)
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	089b      	lsrs	r3, r3, #2
 800854c:	3302      	adds	r3, #2
 800854e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	220f      	movs	r2, #15
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	43db      	mvns	r3, r3
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	4013      	ands	r3, r2
 8008568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a4f      	ldr	r2, [pc, #316]	; (80086ac <HAL_GPIO_Init+0x308>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d025      	beq.n	80085be <HAL_GPIO_Init+0x21a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a4e      	ldr	r2, [pc, #312]	; (80086b0 <HAL_GPIO_Init+0x30c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d01f      	beq.n	80085ba <HAL_GPIO_Init+0x216>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a4d      	ldr	r2, [pc, #308]	; (80086b4 <HAL_GPIO_Init+0x310>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d019      	beq.n	80085b6 <HAL_GPIO_Init+0x212>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a4c      	ldr	r2, [pc, #304]	; (80086b8 <HAL_GPIO_Init+0x314>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <HAL_GPIO_Init+0x20e>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a4b      	ldr	r2, [pc, #300]	; (80086bc <HAL_GPIO_Init+0x318>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00d      	beq.n	80085ae <HAL_GPIO_Init+0x20a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a4a      	ldr	r2, [pc, #296]	; (80086c0 <HAL_GPIO_Init+0x31c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d007      	beq.n	80085aa <HAL_GPIO_Init+0x206>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a49      	ldr	r2, [pc, #292]	; (80086c4 <HAL_GPIO_Init+0x320>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d101      	bne.n	80085a6 <HAL_GPIO_Init+0x202>
 80085a2:	2306      	movs	r3, #6
 80085a4:	e00c      	b.n	80085c0 <HAL_GPIO_Init+0x21c>
 80085a6:	2307      	movs	r3, #7
 80085a8:	e00a      	b.n	80085c0 <HAL_GPIO_Init+0x21c>
 80085aa:	2305      	movs	r3, #5
 80085ac:	e008      	b.n	80085c0 <HAL_GPIO_Init+0x21c>
 80085ae:	2304      	movs	r3, #4
 80085b0:	e006      	b.n	80085c0 <HAL_GPIO_Init+0x21c>
 80085b2:	2303      	movs	r3, #3
 80085b4:	e004      	b.n	80085c0 <HAL_GPIO_Init+0x21c>
 80085b6:	2302      	movs	r3, #2
 80085b8:	e002      	b.n	80085c0 <HAL_GPIO_Init+0x21c>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <HAL_GPIO_Init+0x21c>
 80085be:	2300      	movs	r3, #0
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	f002 0203 	and.w	r2, r2, #3
 80085c6:	0092      	lsls	r2, r2, #2
 80085c8:	4093      	lsls	r3, r2
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085d0:	4935      	ldr	r1, [pc, #212]	; (80086a8 <HAL_GPIO_Init+0x304>)
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	089b      	lsrs	r3, r3, #2
 80085d6:	3302      	adds	r3, #2
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80085de:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <HAL_GPIO_Init+0x324>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	43db      	mvns	r3, r3
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	4013      	ands	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008602:	4a31      	ldr	r2, [pc, #196]	; (80086c8 <HAL_GPIO_Init+0x324>)
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008608:	4b2f      	ldr	r3, [pc, #188]	; (80086c8 <HAL_GPIO_Init+0x324>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	43db      	mvns	r3, r3
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	4013      	ands	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800862c:	4a26      	ldr	r2, [pc, #152]	; (80086c8 <HAL_GPIO_Init+0x324>)
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008632:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <HAL_GPIO_Init+0x324>)
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	43db      	mvns	r3, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	4313      	orrs	r3, r2
 8008654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008656:	4a1c      	ldr	r2, [pc, #112]	; (80086c8 <HAL_GPIO_Init+0x324>)
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <HAL_GPIO_Init+0x324>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	43db      	mvns	r3, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	4013      	ands	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4313      	orrs	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008680:	4a11      	ldr	r2, [pc, #68]	; (80086c8 <HAL_GPIO_Init+0x324>)
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	3301      	adds	r3, #1
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2b0f      	cmp	r3, #15
 8008690:	f67f ae96 	bls.w	80083c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop
 8008698:	3724      	adds	r7, #36	; 0x24
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40013800 	.word	0x40013800
 80086ac:	40020000 	.word	0x40020000
 80086b0:	40020400 	.word	0x40020400
 80086b4:	40020800 	.word	0x40020800
 80086b8:	40020c00 	.word	0x40020c00
 80086bc:	40021000 	.word	0x40021000
 80086c0:	40021400 	.word	0x40021400
 80086c4:	40021800 	.word	0x40021800
 80086c8:	40013c00 	.word	0x40013c00

080086cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
 80086d8:	4613      	mov	r3, r2
 80086da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086dc:	787b      	ldrb	r3, [r7, #1]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80086e8:	e003      	b.n	80086f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80086ea:	887b      	ldrh	r3, [r7, #2]
 80086ec:	041a      	lsls	r2, r3, #16
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	619a      	str	r2, [r3, #24]
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800870a:	2300      	movs	r3, #0
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	4b20      	ldr	r3, [pc, #128]	; (8008790 <HAL_PWREx_EnableOverDrive+0x90>)
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	4a1f      	ldr	r2, [pc, #124]	; (8008790 <HAL_PWREx_EnableOverDrive+0x90>)
 8008714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008718:	6413      	str	r3, [r2, #64]	; 0x40
 800871a:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <HAL_PWREx_EnableOverDrive+0x90>)
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <HAL_PWREx_EnableOverDrive+0x94>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800872c:	f7fe fc36 	bl	8006f9c <HAL_GetTick>
 8008730:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008732:	e009      	b.n	8008748 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008734:	f7fe fc32 	bl	8006f9c <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008742:	d901      	bls.n	8008748 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e01f      	b.n	8008788 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008748:	4b13      	ldr	r3, [pc, #76]	; (8008798 <HAL_PWREx_EnableOverDrive+0x98>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008754:	d1ee      	bne.n	8008734 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800875c:	f7fe fc1e 	bl	8006f9c <HAL_GetTick>
 8008760:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008762:	e009      	b.n	8008778 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008764:	f7fe fc1a 	bl	8006f9c <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008772:	d901      	bls.n	8008778 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e007      	b.n	8008788 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008778:	4b07      	ldr	r3, [pc, #28]	; (8008798 <HAL_PWREx_EnableOverDrive+0x98>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008784:	d1ee      	bne.n	8008764 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40023800 	.word	0x40023800
 8008794:	420e0040 	.word	0x420e0040
 8008798:	40007000 	.word	0x40007000
 800879c:	420e0044 	.word	0x420e0044

080087a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e0cc      	b.n	800894e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087b4:	4b68      	ldr	r3, [pc, #416]	; (8008958 <HAL_RCC_ClockConfig+0x1b8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d90c      	bls.n	80087dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087c2:	4b65      	ldr	r3, [pc, #404]	; (8008958 <HAL_RCC_ClockConfig+0x1b8>)
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ca:	4b63      	ldr	r3, [pc, #396]	; (8008958 <HAL_RCC_ClockConfig+0x1b8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d001      	beq.n	80087dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e0b8      	b.n	800894e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d020      	beq.n	800882a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087f4:	4b59      	ldr	r3, [pc, #356]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	4a58      	ldr	r2, [pc, #352]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 80087fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800880c:	4b53      	ldr	r3, [pc, #332]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	4a52      	ldr	r2, [pc, #328]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008818:	4b50      	ldr	r3, [pc, #320]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	494d      	ldr	r1, [pc, #308]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	4313      	orrs	r3, r2
 8008828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d044      	beq.n	80088c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d107      	bne.n	800884e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800883e:	4b47      	ldr	r3, [pc, #284]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d119      	bne.n	800887e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e07f      	b.n	800894e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d003      	beq.n	800885e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800885a:	2b03      	cmp	r3, #3
 800885c:	d107      	bne.n	800886e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800885e:	4b3f      	ldr	r3, [pc, #252]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d109      	bne.n	800887e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e06f      	b.n	800894e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800886e:	4b3b      	ldr	r3, [pc, #236]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e067      	b.n	800894e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800887e:	4b37      	ldr	r3, [pc, #220]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f023 0203 	bic.w	r2, r3, #3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	4934      	ldr	r1, [pc, #208]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 800888c:	4313      	orrs	r3, r2
 800888e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008890:	f7fe fb84 	bl	8006f9c <HAL_GetTick>
 8008894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008896:	e00a      	b.n	80088ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008898:	f7fe fb80 	bl	8006f9c <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e04f      	b.n	800894e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088ae:	4b2b      	ldr	r3, [pc, #172]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 020c 	and.w	r2, r3, #12
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	429a      	cmp	r2, r3
 80088be:	d1eb      	bne.n	8008898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088c0:	4b25      	ldr	r3, [pc, #148]	; (8008958 <HAL_RCC_ClockConfig+0x1b8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 030f 	and.w	r3, r3, #15
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d20c      	bcs.n	80088e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ce:	4b22      	ldr	r3, [pc, #136]	; (8008958 <HAL_RCC_ClockConfig+0x1b8>)
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	b2d2      	uxtb	r2, r2
 80088d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088d6:	4b20      	ldr	r3, [pc, #128]	; (8008958 <HAL_RCC_ClockConfig+0x1b8>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d001      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e032      	b.n	800894e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088f4:	4b19      	ldr	r3, [pc, #100]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	4916      	ldr	r1, [pc, #88]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008902:	4313      	orrs	r3, r2
 8008904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008912:	4b12      	ldr	r3, [pc, #72]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	490e      	ldr	r1, [pc, #56]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	4313      	orrs	r3, r2
 8008924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008926:	f000 f855 	bl	80089d4 <HAL_RCC_GetSysClockFreq>
 800892a:	4602      	mov	r2, r0
 800892c:	4b0b      	ldr	r3, [pc, #44]	; (800895c <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	091b      	lsrs	r3, r3, #4
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	490a      	ldr	r1, [pc, #40]	; (8008960 <HAL_RCC_ClockConfig+0x1c0>)
 8008938:	5ccb      	ldrb	r3, [r1, r3]
 800893a:	fa22 f303 	lsr.w	r3, r2, r3
 800893e:	4a09      	ldr	r2, [pc, #36]	; (8008964 <HAL_RCC_ClockConfig+0x1c4>)
 8008940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008942:	4b09      	ldr	r3, [pc, #36]	; (8008968 <HAL_RCC_ClockConfig+0x1c8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fae4 	bl	8006f14 <HAL_InitTick>

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40023c00 	.word	0x40023c00
 800895c:	40023800 	.word	0x40023800
 8008960:	08011a8c 	.word	0x08011a8c
 8008964:	20000040 	.word	0x20000040
 8008968:	20000044 	.word	0x20000044

0800896c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008970:	4b03      	ldr	r3, [pc, #12]	; (8008980 <HAL_RCC_GetHCLKFreq+0x14>)
 8008972:	681b      	ldr	r3, [r3, #0]
}
 8008974:	4618      	mov	r0, r3
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	20000040 	.word	0x20000040

08008984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008988:	f7ff fff0 	bl	800896c <HAL_RCC_GetHCLKFreq>
 800898c:	4602      	mov	r2, r0
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	0a9b      	lsrs	r3, r3, #10
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	4903      	ldr	r1, [pc, #12]	; (80089a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800899a:	5ccb      	ldrb	r3, [r1, r3]
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	40023800 	.word	0x40023800
 80089a8:	08011a9c 	.word	0x08011a9c

080089ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089b0:	f7ff ffdc 	bl	800896c <HAL_RCC_GetHCLKFreq>
 80089b4:	4602      	mov	r2, r0
 80089b6:	4b05      	ldr	r3, [pc, #20]	; (80089cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	0b5b      	lsrs	r3, r3, #13
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	4903      	ldr	r1, [pc, #12]	; (80089d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089c2:	5ccb      	ldrb	r3, [r1, r3]
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	40023800 	.word	0x40023800
 80089d0:	08011a9c 	.word	0x08011a9c

080089d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d8:	b0ae      	sub	sp, #184	; 0xb8
 80089da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089fa:	4bcb      	ldr	r3, [pc, #812]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f003 030c 	and.w	r3, r3, #12
 8008a02:	2b0c      	cmp	r3, #12
 8008a04:	f200 8206 	bhi.w	8008e14 <HAL_RCC_GetSysClockFreq+0x440>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a45 	.word	0x08008a45
 8008a14:	08008e15 	.word	0x08008e15
 8008a18:	08008e15 	.word	0x08008e15
 8008a1c:	08008e15 	.word	0x08008e15
 8008a20:	08008a4d 	.word	0x08008a4d
 8008a24:	08008e15 	.word	0x08008e15
 8008a28:	08008e15 	.word	0x08008e15
 8008a2c:	08008e15 	.word	0x08008e15
 8008a30:	08008a55 	.word	0x08008a55
 8008a34:	08008e15 	.word	0x08008e15
 8008a38:	08008e15 	.word	0x08008e15
 8008a3c:	08008e15 	.word	0x08008e15
 8008a40:	08008c45 	.word	0x08008c45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a44:	4bb9      	ldr	r3, [pc, #740]	; (8008d2c <HAL_RCC_GetSysClockFreq+0x358>)
 8008a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008a4a:	e1e7      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a4c:	4bb8      	ldr	r3, [pc, #736]	; (8008d30 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008a52:	e1e3      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a54:	4bb4      	ldr	r3, [pc, #720]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a60:	4bb1      	ldr	r3, [pc, #708]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d071      	beq.n	8008b50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a6c:	4bae      	ldr	r3, [pc, #696]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	099b      	lsrs	r3, r3, #6
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a78:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a92:	4622      	mov	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	f04f 0000 	mov.w	r0, #0
 8008a9a:	f04f 0100 	mov.w	r1, #0
 8008a9e:	0159      	lsls	r1, r3, #5
 8008aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008aa4:	0150      	lsls	r0, r2, #5
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4621      	mov	r1, r4
 8008aac:	1a51      	subs	r1, r2, r1
 8008aae:	6439      	str	r1, [r7, #64]	; 0x40
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8008ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	f04f 0300 	mov.w	r3, #0
 8008ac0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	018b      	lsls	r3, r1, #6
 8008ac8:	4641      	mov	r1, r8
 8008aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ace:	4641      	mov	r1, r8
 8008ad0:	018a      	lsls	r2, r1, #6
 8008ad2:	4641      	mov	r1, r8
 8008ad4:	1a51      	subs	r1, r2, r1
 8008ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ad8:	4649      	mov	r1, r9
 8008ada:	eb63 0301 	sbc.w	r3, r3, r1
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008aec:	4649      	mov	r1, r9
 8008aee:	00cb      	lsls	r3, r1, #3
 8008af0:	4641      	mov	r1, r8
 8008af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008af6:	4641      	mov	r1, r8
 8008af8:	00ca      	lsls	r2, r1, #3
 8008afa:	4610      	mov	r0, r2
 8008afc:	4619      	mov	r1, r3
 8008afe:	4603      	mov	r3, r0
 8008b00:	4622      	mov	r2, r4
 8008b02:	189b      	adds	r3, r3, r2
 8008b04:	633b      	str	r3, [r7, #48]	; 0x30
 8008b06:	462b      	mov	r3, r5
 8008b08:	460a      	mov	r2, r1
 8008b0a:	eb42 0303 	adc.w	r3, r2, r3
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	f04f 0300 	mov.w	r3, #0
 8008b18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	024b      	lsls	r3, r1, #9
 8008b20:	4621      	mov	r1, r4
 8008b22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b26:	4621      	mov	r1, r4
 8008b28:	024a      	lsls	r2, r1, #9
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008b40:	f7f8 f8c2 	bl	8000cc8 <__aeabi_uldivmod>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4613      	mov	r3, r2
 8008b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b4e:	e067      	b.n	8008c20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b50:	4b75      	ldr	r3, [pc, #468]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	099b      	lsrs	r3, r3, #6
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008b72:	4622      	mov	r2, r4
 8008b74:	462b      	mov	r3, r5
 8008b76:	f04f 0000 	mov.w	r0, #0
 8008b7a:	f04f 0100 	mov.w	r1, #0
 8008b7e:	0159      	lsls	r1, r3, #5
 8008b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b84:	0150      	lsls	r0, r2, #5
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	1a51      	subs	r1, r2, r1
 8008b8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b90:	4629      	mov	r1, r5
 8008b92:	eb63 0301 	sbc.w	r3, r3, r1
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b98:	f04f 0200 	mov.w	r2, #0
 8008b9c:	f04f 0300 	mov.w	r3, #0
 8008ba0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	018b      	lsls	r3, r1, #6
 8008ba8:	4641      	mov	r1, r8
 8008baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bae:	4641      	mov	r1, r8
 8008bb0:	018a      	lsls	r2, r1, #6
 8008bb2:	4641      	mov	r1, r8
 8008bb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bb8:	4649      	mov	r1, r9
 8008bba:	eb63 0b01 	sbc.w	fp, r3, r1
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bd2:	4692      	mov	sl, r2
 8008bd4:	469b      	mov	fp, r3
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	eb1a 0303 	adds.w	r3, sl, r3
 8008bdc:	623b      	str	r3, [r7, #32]
 8008bde:	462b      	mov	r3, r5
 8008be0:	eb4b 0303 	adc.w	r3, fp, r3
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
 8008be6:	f04f 0200 	mov.w	r2, #0
 8008bea:	f04f 0300 	mov.w	r3, #0
 8008bee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	028b      	lsls	r3, r1, #10
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	028a      	lsls	r2, r1, #10
 8008c00:	4610      	mov	r0, r2
 8008c02:	4619      	mov	r1, r3
 8008c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c08:	2200      	movs	r2, #0
 8008c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8008c0c:	677a      	str	r2, [r7, #116]	; 0x74
 8008c0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008c12:	f7f8 f859 	bl	8000cc8 <__aeabi_uldivmod>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c20:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	0c1b      	lsrs	r3, r3, #16
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008c42:	e0eb      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c44:	4b38      	ldr	r3, [pc, #224]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c50:	4b35      	ldr	r3, [pc, #212]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d06b      	beq.n	8008d34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c5c:	4b32      	ldr	r3, [pc, #200]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	099b      	lsrs	r3, r3, #6
 8008c62:	2200      	movs	r2, #0
 8008c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6e:	663b      	str	r3, [r7, #96]	; 0x60
 8008c70:	2300      	movs	r3, #0
 8008c72:	667b      	str	r3, [r7, #100]	; 0x64
 8008c74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008c78:	4622      	mov	r2, r4
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	f04f 0000 	mov.w	r0, #0
 8008c80:	f04f 0100 	mov.w	r1, #0
 8008c84:	0159      	lsls	r1, r3, #5
 8008c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c8a:	0150      	lsls	r0, r2, #5
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4621      	mov	r1, r4
 8008c92:	1a51      	subs	r1, r2, r1
 8008c94:	61b9      	str	r1, [r7, #24]
 8008c96:	4629      	mov	r1, r5
 8008c98:	eb63 0301 	sbc.w	r3, r3, r1
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	f04f 0200 	mov.w	r2, #0
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008caa:	4659      	mov	r1, fp
 8008cac:	018b      	lsls	r3, r1, #6
 8008cae:	4651      	mov	r1, sl
 8008cb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cb4:	4651      	mov	r1, sl
 8008cb6:	018a      	lsls	r2, r1, #6
 8008cb8:	4651      	mov	r1, sl
 8008cba:	ebb2 0801 	subs.w	r8, r2, r1
 8008cbe:	4659      	mov	r1, fp
 8008cc0:	eb63 0901 	sbc.w	r9, r3, r1
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cd8:	4690      	mov	r8, r2
 8008cda:	4699      	mov	r9, r3
 8008cdc:	4623      	mov	r3, r4
 8008cde:	eb18 0303 	adds.w	r3, r8, r3
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	eb49 0303 	adc.w	r3, r9, r3
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	024b      	lsls	r3, r1, #9
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d02:	4621      	mov	r1, r4
 8008d04:	024a      	lsls	r2, r1, #9
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d0e:	2200      	movs	r2, #0
 8008d10:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008d14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d18:	f7f7 ffd6 	bl	8000cc8 <__aeabi_uldivmod>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4613      	mov	r3, r2
 8008d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d26:	e065      	b.n	8008df4 <HAL_RCC_GetSysClockFreq+0x420>
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	00f42400 	.word	0x00f42400
 8008d30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d34:	4b3d      	ldr	r3, [pc, #244]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x458>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	099b      	lsrs	r3, r3, #6
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	4611      	mov	r1, r2
 8008d40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d44:	653b      	str	r3, [r7, #80]	; 0x50
 8008d46:	2300      	movs	r3, #0
 8008d48:	657b      	str	r3, [r7, #84]	; 0x54
 8008d4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008d4e:	4642      	mov	r2, r8
 8008d50:	464b      	mov	r3, r9
 8008d52:	f04f 0000 	mov.w	r0, #0
 8008d56:	f04f 0100 	mov.w	r1, #0
 8008d5a:	0159      	lsls	r1, r3, #5
 8008d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d60:	0150      	lsls	r0, r2, #5
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4641      	mov	r1, r8
 8008d68:	1a51      	subs	r1, r2, r1
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	f04f 0200 	mov.w	r2, #0
 8008d78:	f04f 0300 	mov.w	r3, #0
 8008d7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008d80:	4659      	mov	r1, fp
 8008d82:	018b      	lsls	r3, r1, #6
 8008d84:	4651      	mov	r1, sl
 8008d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d8a:	4651      	mov	r1, sl
 8008d8c:	018a      	lsls	r2, r1, #6
 8008d8e:	4651      	mov	r1, sl
 8008d90:	1a54      	subs	r4, r2, r1
 8008d92:	4659      	mov	r1, fp
 8008d94:	eb63 0501 	sbc.w	r5, r3, r1
 8008d98:	f04f 0200 	mov.w	r2, #0
 8008d9c:	f04f 0300 	mov.w	r3, #0
 8008da0:	00eb      	lsls	r3, r5, #3
 8008da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008da6:	00e2      	lsls	r2, r4, #3
 8008da8:	4614      	mov	r4, r2
 8008daa:	461d      	mov	r5, r3
 8008dac:	4643      	mov	r3, r8
 8008dae:	18e3      	adds	r3, r4, r3
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	464b      	mov	r3, r9
 8008db4:	eb45 0303 	adc.w	r3, r5, r3
 8008db8:	607b      	str	r3, [r7, #4]
 8008dba:	f04f 0200 	mov.w	r2, #0
 8008dbe:	f04f 0300 	mov.w	r3, #0
 8008dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	028b      	lsls	r3, r1, #10
 8008dca:	4621      	mov	r1, r4
 8008dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	028a      	lsls	r2, r1, #10
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ddc:	2200      	movs	r2, #0
 8008dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8008de0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008de2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008de6:	f7f7 ff6f 	bl	8000cc8 <__aeabi_uldivmod>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4613      	mov	r3, r2
 8008df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008df4:	4b0d      	ldr	r3, [pc, #52]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x458>)
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	0f1b      	lsrs	r3, r3, #28
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008e12:	e003      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008e1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	37b8      	adds	r7, #184	; 0xb8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e2a:	bf00      	nop
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	00f42400 	.word	0x00f42400

08008e34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e28d      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 8083 	beq.w	8008f5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008e54:	4b94      	ldr	r3, [pc, #592]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 030c 	and.w	r3, r3, #12
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d019      	beq.n	8008e94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008e60:	4b91      	ldr	r3, [pc, #580]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d106      	bne.n	8008e7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008e6c:	4b8e      	ldr	r3, [pc, #568]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e78:	d00c      	beq.n	8008e94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e7a:	4b8b      	ldr	r3, [pc, #556]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008e82:	2b0c      	cmp	r3, #12
 8008e84:	d112      	bne.n	8008eac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e86:	4b88      	ldr	r3, [pc, #544]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e92:	d10b      	bne.n	8008eac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e94:	4b84      	ldr	r3, [pc, #528]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d05b      	beq.n	8008f58 <HAL_RCC_OscConfig+0x124>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d157      	bne.n	8008f58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e25a      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb4:	d106      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x90>
 8008eb6:	4b7c      	ldr	r3, [pc, #496]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a7b      	ldr	r2, [pc, #492]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	e01d      	b.n	8008f00 <HAL_RCC_OscConfig+0xcc>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ecc:	d10c      	bne.n	8008ee8 <HAL_RCC_OscConfig+0xb4>
 8008ece:	4b76      	ldr	r3, [pc, #472]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a75      	ldr	r2, [pc, #468]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	4b73      	ldr	r3, [pc, #460]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a72      	ldr	r2, [pc, #456]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	e00b      	b.n	8008f00 <HAL_RCC_OscConfig+0xcc>
 8008ee8:	4b6f      	ldr	r3, [pc, #444]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a6e      	ldr	r2, [pc, #440]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	4b6c      	ldr	r3, [pc, #432]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a6b      	ldr	r2, [pc, #428]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d013      	beq.n	8008f30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fe f848 	bl	8006f9c <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f10:	f7fe f844 	bl	8006f9c <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b64      	cmp	r3, #100	; 0x64
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e21f      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f22:	4b61      	ldr	r3, [pc, #388]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0f0      	beq.n	8008f10 <HAL_RCC_OscConfig+0xdc>
 8008f2e:	e014      	b.n	8008f5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7fe f834 	bl	8006f9c <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f38:	f7fe f830 	bl	8006f9c <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b64      	cmp	r3, #100	; 0x64
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e20b      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f4a:	4b57      	ldr	r3, [pc, #348]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1f0      	bne.n	8008f38 <HAL_RCC_OscConfig+0x104>
 8008f56:	e000      	b.n	8008f5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d06f      	beq.n	8009046 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008f66:	4b50      	ldr	r3, [pc, #320]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 030c 	and.w	r3, r3, #12
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d017      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008f72:	4b4d      	ldr	r3, [pc, #308]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d105      	bne.n	8008f8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008f7e:	4b4a      	ldr	r3, [pc, #296]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00b      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f8a:	4b47      	ldr	r3, [pc, #284]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008f92:	2b0c      	cmp	r3, #12
 8008f94:	d11c      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f96:	4b44      	ldr	r3, [pc, #272]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d116      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fa2:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_RCC_OscConfig+0x186>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d001      	beq.n	8008fba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e1d3      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fba:	4b3b      	ldr	r3, [pc, #236]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	4937      	ldr	r1, [pc, #220]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fce:	e03a      	b.n	8009046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d020      	beq.n	800901a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fd8:	4b34      	ldr	r3, [pc, #208]	; (80090ac <HAL_RCC_OscConfig+0x278>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fde:	f7fd ffdd 	bl	8006f9c <HAL_GetTick>
 8008fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fe4:	e008      	b.n	8008ff8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fe6:	f7fd ffd9 	bl	8006f9c <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d901      	bls.n	8008ff8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e1b4      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ff8:	4b2b      	ldr	r3, [pc, #172]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0f0      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009004:	4b28      	ldr	r3, [pc, #160]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	4925      	ldr	r1, [pc, #148]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 8009014:	4313      	orrs	r3, r2
 8009016:	600b      	str	r3, [r1, #0]
 8009018:	e015      	b.n	8009046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800901a:	4b24      	ldr	r3, [pc, #144]	; (80090ac <HAL_RCC_OscConfig+0x278>)
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009020:	f7fd ffbc 	bl	8006f9c <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009026:	e008      	b.n	800903a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009028:	f7fd ffb8 	bl	8006f9c <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b02      	cmp	r3, #2
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e193      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800903a:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1f0      	bne.n	8009028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d036      	beq.n	80090c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d016      	beq.n	8009088 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800905a:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <HAL_RCC_OscConfig+0x27c>)
 800905c:	2201      	movs	r2, #1
 800905e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009060:	f7fd ff9c 	bl	8006f9c <HAL_GetTick>
 8009064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009066:	e008      	b.n	800907a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009068:	f7fd ff98 	bl	8006f9c <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	2b02      	cmp	r3, #2
 8009074:	d901      	bls.n	800907a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e173      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <HAL_RCC_OscConfig+0x274>)
 800907c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0f0      	beq.n	8009068 <HAL_RCC_OscConfig+0x234>
 8009086:	e01b      	b.n	80090c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009088:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <HAL_RCC_OscConfig+0x27c>)
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800908e:	f7fd ff85 	bl	8006f9c <HAL_GetTick>
 8009092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009094:	e00e      	b.n	80090b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009096:	f7fd ff81 	bl	8006f9c <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d907      	bls.n	80090b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e15c      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
 80090a8:	40023800 	.word	0x40023800
 80090ac:	42470000 	.word	0x42470000
 80090b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090b4:	4b8a      	ldr	r3, [pc, #552]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80090b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1ea      	bne.n	8009096 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8097 	beq.w	80091fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090d2:	4b83      	ldr	r3, [pc, #524]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10f      	bne.n	80090fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090de:	2300      	movs	r3, #0
 80090e0:	60bb      	str	r3, [r7, #8]
 80090e2:	4b7f      	ldr	r3, [pc, #508]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	4a7e      	ldr	r2, [pc, #504]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80090e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ec:	6413      	str	r3, [r2, #64]	; 0x40
 80090ee:	4b7c      	ldr	r3, [pc, #496]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f6:	60bb      	str	r3, [r7, #8]
 80090f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090fa:	2301      	movs	r3, #1
 80090fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090fe:	4b79      	ldr	r3, [pc, #484]	; (80092e4 <HAL_RCC_OscConfig+0x4b0>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009106:	2b00      	cmp	r3, #0
 8009108:	d118      	bne.n	800913c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800910a:	4b76      	ldr	r3, [pc, #472]	; (80092e4 <HAL_RCC_OscConfig+0x4b0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a75      	ldr	r2, [pc, #468]	; (80092e4 <HAL_RCC_OscConfig+0x4b0>)
 8009110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009116:	f7fd ff41 	bl	8006f9c <HAL_GetTick>
 800911a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800911c:	e008      	b.n	8009130 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800911e:	f7fd ff3d 	bl	8006f9c <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d901      	bls.n	8009130 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e118      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009130:	4b6c      	ldr	r3, [pc, #432]	; (80092e4 <HAL_RCC_OscConfig+0x4b0>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0f0      	beq.n	800911e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d106      	bne.n	8009152 <HAL_RCC_OscConfig+0x31e>
 8009144:	4b66      	ldr	r3, [pc, #408]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009148:	4a65      	ldr	r2, [pc, #404]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 800914a:	f043 0301 	orr.w	r3, r3, #1
 800914e:	6713      	str	r3, [r2, #112]	; 0x70
 8009150:	e01c      	b.n	800918c <HAL_RCC_OscConfig+0x358>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2b05      	cmp	r3, #5
 8009158:	d10c      	bne.n	8009174 <HAL_RCC_OscConfig+0x340>
 800915a:	4b61      	ldr	r3, [pc, #388]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 800915c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915e:	4a60      	ldr	r2, [pc, #384]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009160:	f043 0304 	orr.w	r3, r3, #4
 8009164:	6713      	str	r3, [r2, #112]	; 0x70
 8009166:	4b5e      	ldr	r3, [pc, #376]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916a:	4a5d      	ldr	r2, [pc, #372]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 800916c:	f043 0301 	orr.w	r3, r3, #1
 8009170:	6713      	str	r3, [r2, #112]	; 0x70
 8009172:	e00b      	b.n	800918c <HAL_RCC_OscConfig+0x358>
 8009174:	4b5a      	ldr	r3, [pc, #360]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009178:	4a59      	ldr	r2, [pc, #356]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 800917a:	f023 0301 	bic.w	r3, r3, #1
 800917e:	6713      	str	r3, [r2, #112]	; 0x70
 8009180:	4b57      	ldr	r3, [pc, #348]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009184:	4a56      	ldr	r2, [pc, #344]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009186:	f023 0304 	bic.w	r3, r3, #4
 800918a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d015      	beq.n	80091c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009194:	f7fd ff02 	bl	8006f9c <HAL_GetTick>
 8009198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800919a:	e00a      	b.n	80091b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800919c:	f7fd fefe 	bl	8006f9c <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e0d7      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091b2:	4b4b      	ldr	r3, [pc, #300]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80091b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0ee      	beq.n	800919c <HAL_RCC_OscConfig+0x368>
 80091be:	e014      	b.n	80091ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091c0:	f7fd feec 	bl	8006f9c <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091c6:	e00a      	b.n	80091de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091c8:	f7fd fee8 	bl	8006f9c <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e0c1      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091de:	4b40      	ldr	r3, [pc, #256]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80091e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1ee      	bne.n	80091c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d105      	bne.n	80091fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091f0:	4b3b      	ldr	r3, [pc, #236]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80091f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f4:	4a3a      	ldr	r2, [pc, #232]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80091f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 80ad 	beq.w	8009360 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009206:	4b36      	ldr	r3, [pc, #216]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 030c 	and.w	r3, r3, #12
 800920e:	2b08      	cmp	r3, #8
 8009210:	d060      	beq.n	80092d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d145      	bne.n	80092a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800921a:	4b33      	ldr	r3, [pc, #204]	; (80092e8 <HAL_RCC_OscConfig+0x4b4>)
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009220:	f7fd febc 	bl	8006f9c <HAL_GetTick>
 8009224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009226:	e008      	b.n	800923a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009228:	f7fd feb8 	bl	8006f9c <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	2b02      	cmp	r3, #2
 8009234:	d901      	bls.n	800923a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e093      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800923a:	4b29      	ldr	r3, [pc, #164]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1f0      	bne.n	8009228 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69da      	ldr	r2, [r3, #28]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	019b      	lsls	r3, r3, #6
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	085b      	lsrs	r3, r3, #1
 800925e:	3b01      	subs	r3, #1
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	061b      	lsls	r3, r3, #24
 800926a:	431a      	orrs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009270:	071b      	lsls	r3, r3, #28
 8009272:	491b      	ldr	r1, [pc, #108]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 8009274:	4313      	orrs	r3, r2
 8009276:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009278:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <HAL_RCC_OscConfig+0x4b4>)
 800927a:	2201      	movs	r2, #1
 800927c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927e:	f7fd fe8d 	bl	8006f9c <HAL_GetTick>
 8009282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009286:	f7fd fe89 	bl	8006f9c <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e064      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009298:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f0      	beq.n	8009286 <HAL_RCC_OscConfig+0x452>
 80092a4:	e05c      	b.n	8009360 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092a6:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <HAL_RCC_OscConfig+0x4b4>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ac:	f7fd fe76 	bl	8006f9c <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092b2:	e008      	b.n	80092c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092b4:	f7fd fe72 	bl	8006f9c <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d901      	bls.n	80092c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e04d      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <HAL_RCC_OscConfig+0x4ac>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1f0      	bne.n	80092b4 <HAL_RCC_OscConfig+0x480>
 80092d2:	e045      	b.n	8009360 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d107      	bne.n	80092ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e040      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
 80092e0:	40023800 	.word	0x40023800
 80092e4:	40007000 	.word	0x40007000
 80092e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092ec:	4b1f      	ldr	r3, [pc, #124]	; (800936c <HAL_RCC_OscConfig+0x538>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d030      	beq.n	800935c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009304:	429a      	cmp	r2, r3
 8009306:	d129      	bne.n	800935c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009312:	429a      	cmp	r2, r3
 8009314:	d122      	bne.n	800935c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800931c:	4013      	ands	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009324:	4293      	cmp	r3, r2
 8009326:	d119      	bne.n	800935c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	3b01      	subs	r3, #1
 8009336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009338:	429a      	cmp	r2, r3
 800933a:	d10f      	bne.n	800935c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009348:	429a      	cmp	r2, r3
 800934a:	d107      	bne.n	800935c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009358:	429a      	cmp	r2, r3
 800935a:	d001      	beq.n	8009360 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	40023800 	.word	0x40023800

08009370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e07b      	b.n	800947a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	2b00      	cmp	r3, #0
 8009388:	d108      	bne.n	800939c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009392:	d009      	beq.n	80093a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	61da      	str	r2, [r3, #28]
 800939a:	e005      	b.n	80093a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d106      	bne.n	80093c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7fc fe86 	bl	80060d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	431a      	orrs	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800942c:	ea42 0103 	orr.w	r1, r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009434:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	0c1b      	lsrs	r3, r3, #16
 8009446:	f003 0104 	and.w	r1, r3, #4
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	f003 0210 	and.w	r2, r3, #16
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b08c      	sub	sp, #48	; 0x30
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
 800948e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009490:	2301      	movs	r3, #1
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <HAL_SPI_TransmitReceive+0x26>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e18a      	b.n	80097be <HAL_SPI_TransmitReceive+0x33c>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094b0:	f7fd fd74 	bl	8006f9c <HAL_GetTick>
 80094b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80094c6:	887b      	ldrh	r3, [r7, #2]
 80094c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d00f      	beq.n	80094f2 <HAL_SPI_TransmitReceive+0x70>
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094d8:	d107      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d103      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x68>
 80094e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d003      	beq.n	80094f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80094ea:	2302      	movs	r3, #2
 80094ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80094f0:	e15b      	b.n	80097aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_SPI_TransmitReceive+0x82>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_SPI_TransmitReceive+0x82>
 80094fe:	887b      	ldrh	r3, [r7, #2]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d103      	bne.n	800950c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800950a:	e14e      	b.n	80097aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b04      	cmp	r3, #4
 8009516:	d003      	beq.n	8009520 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2205      	movs	r2, #5
 800951c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	887a      	ldrh	r2, [r7, #2]
 8009530:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	887a      	ldrh	r2, [r7, #2]
 8009536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	887a      	ldrh	r2, [r7, #2]
 8009542:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	887a      	ldrh	r2, [r7, #2]
 8009548:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009560:	2b40      	cmp	r3, #64	; 0x40
 8009562:	d007      	beq.n	8009574 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800957c:	d178      	bne.n	8009670 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <HAL_SPI_TransmitReceive+0x10a>
 8009586:	8b7b      	ldrh	r3, [r7, #26]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d166      	bne.n	800965a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009590:	881a      	ldrh	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959c:	1c9a      	adds	r2, r3, #2
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	3b01      	subs	r3, #1
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095b0:	e053      	b.n	800965a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d11b      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x176>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d016      	beq.n	80095f8 <HAL_SPI_TransmitReceive+0x176>
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d113      	bne.n	80095f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	881a      	ldrh	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e0:	1c9a      	adds	r2, r3, #2
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b01      	cmp	r3, #1
 8009604:	d119      	bne.n	800963a <HAL_SPI_TransmitReceive+0x1b8>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800960a:	b29b      	uxth	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	d014      	beq.n	800963a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	b292      	uxth	r2, r2
 800961c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	1c9a      	adds	r2, r3, #2
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009636:	2301      	movs	r3, #1
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800963a:	f7fd fcaf 	bl	8006f9c <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009646:	429a      	cmp	r2, r3
 8009648:	d807      	bhi.n	800965a <HAL_SPI_TransmitReceive+0x1d8>
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009650:	d003      	beq.n	800965a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009658:	e0a7      	b.n	80097aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800965e:	b29b      	uxth	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1a6      	bne.n	80095b2 <HAL_SPI_TransmitReceive+0x130>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009668:	b29b      	uxth	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1a1      	bne.n	80095b2 <HAL_SPI_TransmitReceive+0x130>
 800966e:	e07c      	b.n	800976a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <HAL_SPI_TransmitReceive+0x1fc>
 8009678:	8b7b      	ldrh	r3, [r7, #26]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d16b      	bne.n	8009756 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	330c      	adds	r3, #12
 8009688:	7812      	ldrb	r2, [r2, #0]
 800968a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096a4:	e057      	b.n	8009756 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d11c      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x26c>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d017      	beq.n	80096ee <HAL_SPI_TransmitReceive+0x26c>
 80096be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d114      	bne.n	80096ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d119      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x2ae>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d014      	beq.n	8009730 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	b2d2      	uxtb	r2, r2
 8009712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009722:	b29b      	uxth	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	b29a      	uxth	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009730:	f7fd fc34 	bl	8006f9c <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800973c:	429a      	cmp	r2, r3
 800973e:	d803      	bhi.n	8009748 <HAL_SPI_TransmitReceive+0x2c6>
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009746:	d102      	bne.n	800974e <HAL_SPI_TransmitReceive+0x2cc>
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	2b00      	cmp	r3, #0
 800974c:	d103      	bne.n	8009756 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009754:	e029      	b.n	80097aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975a:	b29b      	uxth	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1a2      	bne.n	80096a6 <HAL_SPI_TransmitReceive+0x224>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009764:	b29b      	uxth	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d19d      	bne.n	80096a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800976a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800976c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f8b2 	bl	80098d8 <SPI_EndRxTxTransaction>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d006      	beq.n	8009788 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009786:	e010      	b.n	80097aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10b      	bne.n	80097a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	617b      	str	r3, [r7, #20]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	617b      	str	r3, [r7, #20]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	e000      	b.n	80097aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80097a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3730      	adds	r7, #48	; 0x30
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	4613      	mov	r3, r2
 80097d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097d8:	f7fd fbe0 	bl	8006f9c <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	1a9b      	subs	r3, r3, r2
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4413      	add	r3, r2
 80097e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097e8:	f7fd fbd8 	bl	8006f9c <HAL_GetTick>
 80097ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097ee:	4b39      	ldr	r3, [pc, #228]	; (80098d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	015b      	lsls	r3, r3, #5
 80097f4:	0d1b      	lsrs	r3, r3, #20
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	fb02 f303 	mul.w	r3, r2, r3
 80097fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097fe:	e054      	b.n	80098aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009806:	d050      	beq.n	80098aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009808:	f7fd fbc8 	bl	8006f9c <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	429a      	cmp	r2, r3
 8009816:	d902      	bls.n	800981e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d13d      	bne.n	800989a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800982c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009836:	d111      	bne.n	800985c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009840:	d004      	beq.n	800984c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800984a:	d107      	bne.n	800985c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800985a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009864:	d10f      	bne.n	8009886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e017      	b.n	80098ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4013      	ands	r3, r2
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	bf0c      	ite	eq
 80098ba:	2301      	moveq	r3, #1
 80098bc:	2300      	movne	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d19b      	bne.n	8009800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20000040 	.word	0x20000040

080098d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af02      	add	r7, sp, #8
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80098e4:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <SPI_EndRxTxTransaction+0x7c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a1b      	ldr	r2, [pc, #108]	; (8009958 <SPI_EndRxTxTransaction+0x80>)
 80098ea:	fba2 2303 	umull	r2, r3, r2, r3
 80098ee:	0d5b      	lsrs	r3, r3, #21
 80098f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098f4:	fb02 f303 	mul.w	r3, r2, r3
 80098f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009902:	d112      	bne.n	800992a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	2180      	movs	r1, #128	; 0x80
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7ff ff5a 	bl	80097c8 <SPI_WaitFlagStateUntilTimeout>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d016      	beq.n	8009948 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991e:	f043 0220 	orr.w	r2, r3, #32
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e00f      	b.n	800994a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00a      	beq.n	8009946 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	3b01      	subs	r3, #1
 8009934:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009940:	2b80      	cmp	r3, #128	; 0x80
 8009942:	d0f2      	beq.n	800992a <SPI_EndRxTxTransaction+0x52>
 8009944:	e000      	b.n	8009948 <SPI_EndRxTxTransaction+0x70>
        break;
 8009946:	bf00      	nop
  }

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000040 	.word	0x20000040
 8009958:	165e9f81 	.word	0x165e9f81

0800995c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e041      	b.n	80099f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d106      	bne.n	8009988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7fd f936 	bl	8006bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f000 fcec 	bl	800a378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d001      	beq.n	8009a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e046      	b.n	8009aa2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a23      	ldr	r2, [pc, #140]	; (8009ab0 <HAL_TIM_Base_Start+0xb4>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d022      	beq.n	8009a6c <HAL_TIM_Base_Start+0x70>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a2e:	d01d      	beq.n	8009a6c <HAL_TIM_Base_Start+0x70>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1f      	ldr	r2, [pc, #124]	; (8009ab4 <HAL_TIM_Base_Start+0xb8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d018      	beq.n	8009a6c <HAL_TIM_Base_Start+0x70>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a1e      	ldr	r2, [pc, #120]	; (8009ab8 <HAL_TIM_Base_Start+0xbc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d013      	beq.n	8009a6c <HAL_TIM_Base_Start+0x70>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a1c      	ldr	r2, [pc, #112]	; (8009abc <HAL_TIM_Base_Start+0xc0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d00e      	beq.n	8009a6c <HAL_TIM_Base_Start+0x70>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a1b      	ldr	r2, [pc, #108]	; (8009ac0 <HAL_TIM_Base_Start+0xc4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d009      	beq.n	8009a6c <HAL_TIM_Base_Start+0x70>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a19      	ldr	r2, [pc, #100]	; (8009ac4 <HAL_TIM_Base_Start+0xc8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d004      	beq.n	8009a6c <HAL_TIM_Base_Start+0x70>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a18      	ldr	r2, [pc, #96]	; (8009ac8 <HAL_TIM_Base_Start+0xcc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d111      	bne.n	8009a90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b06      	cmp	r3, #6
 8009a7c:	d010      	beq.n	8009aa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8e:	e007      	b.n	8009aa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	40010000 	.word	0x40010000
 8009ab4:	40000400 	.word	0x40000400
 8009ab8:	40000800 	.word	0x40000800
 8009abc:	40000c00 	.word	0x40000c00
 8009ac0:	40010400 	.word	0x40010400
 8009ac4:	40014000 	.word	0x40014000
 8009ac8:	40001800 	.word	0x40001800

08009acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d001      	beq.n	8009ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e04e      	b.n	8009b82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68da      	ldr	r2, [r3, #12]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a23      	ldr	r2, [pc, #140]	; (8009b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d022      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x80>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b0e:	d01d      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x80>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a1f      	ldr	r2, [pc, #124]	; (8009b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d018      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x80>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d013      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x80>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a1c      	ldr	r2, [pc, #112]	; (8009b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d00e      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x80>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a1b      	ldr	r2, [pc, #108]	; (8009ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d009      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x80>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a19      	ldr	r2, [pc, #100]	; (8009ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d004      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x80>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a18      	ldr	r2, [pc, #96]	; (8009ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d111      	bne.n	8009b70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b06      	cmp	r3, #6
 8009b5c:	d010      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f042 0201 	orr.w	r2, r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b6e:	e007      	b.n	8009b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0201 	orr.w	r2, r2, #1
 8009b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	40010000 	.word	0x40010000
 8009b94:	40000400 	.word	0x40000400
 8009b98:	40000800 	.word	0x40000800
 8009b9c:	40000c00 	.word	0x40000c00
 8009ba0:	40010400 	.word	0x40010400
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40001800 	.word	0x40001800

08009bac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e041      	b.n	8009c42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f839 	bl	8009c4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4619      	mov	r1, r3
 8009bea:	4610      	mov	r0, r2
 8009bec:	f000 fbc4 	bl	800a378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c52:	bf00      	nop
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
	...

08009c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d109      	bne.n	8009c84 <HAL_TIM_PWM_Start+0x24>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	bf14      	ite	ne
 8009c7c:	2301      	movne	r3, #1
 8009c7e:	2300      	moveq	r3, #0
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	e022      	b.n	8009cca <HAL_TIM_PWM_Start+0x6a>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d109      	bne.n	8009c9e <HAL_TIM_PWM_Start+0x3e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	bf14      	ite	ne
 8009c96:	2301      	movne	r3, #1
 8009c98:	2300      	moveq	r3, #0
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	e015      	b.n	8009cca <HAL_TIM_PWM_Start+0x6a>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d109      	bne.n	8009cb8 <HAL_TIM_PWM_Start+0x58>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	bf14      	ite	ne
 8009cb0:	2301      	movne	r3, #1
 8009cb2:	2300      	moveq	r3, #0
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	e008      	b.n	8009cca <HAL_TIM_PWM_Start+0x6a>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	bf14      	ite	ne
 8009cc4:	2301      	movne	r3, #1
 8009cc6:	2300      	moveq	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e07c      	b.n	8009dcc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d104      	bne.n	8009ce2 <HAL_TIM_PWM_Start+0x82>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ce0:	e013      	b.n	8009d0a <HAL_TIM_PWM_Start+0xaa>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d104      	bne.n	8009cf2 <HAL_TIM_PWM_Start+0x92>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cf0:	e00b      	b.n	8009d0a <HAL_TIM_PWM_Start+0xaa>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d104      	bne.n	8009d02 <HAL_TIM_PWM_Start+0xa2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d00:	e003      	b.n	8009d0a <HAL_TIM_PWM_Start+0xaa>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fe1a 	bl	800a94c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a2d      	ldr	r2, [pc, #180]	; (8009dd4 <HAL_TIM_PWM_Start+0x174>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d004      	beq.n	8009d2c <HAL_TIM_PWM_Start+0xcc>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a2c      	ldr	r2, [pc, #176]	; (8009dd8 <HAL_TIM_PWM_Start+0x178>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d101      	bne.n	8009d30 <HAL_TIM_PWM_Start+0xd0>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e000      	b.n	8009d32 <HAL_TIM_PWM_Start+0xd2>
 8009d30:	2300      	movs	r3, #0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d007      	beq.n	8009d46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a22      	ldr	r2, [pc, #136]	; (8009dd4 <HAL_TIM_PWM_Start+0x174>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d022      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x136>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d58:	d01d      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x136>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1f      	ldr	r2, [pc, #124]	; (8009ddc <HAL_TIM_PWM_Start+0x17c>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d018      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x136>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a1d      	ldr	r2, [pc, #116]	; (8009de0 <HAL_TIM_PWM_Start+0x180>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d013      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x136>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1c      	ldr	r2, [pc, #112]	; (8009de4 <HAL_TIM_PWM_Start+0x184>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d00e      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x136>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a16      	ldr	r2, [pc, #88]	; (8009dd8 <HAL_TIM_PWM_Start+0x178>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d009      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x136>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a18      	ldr	r2, [pc, #96]	; (8009de8 <HAL_TIM_PWM_Start+0x188>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d004      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x136>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a16      	ldr	r2, [pc, #88]	; (8009dec <HAL_TIM_PWM_Start+0x18c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d111      	bne.n	8009dba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f003 0307 	and.w	r3, r3, #7
 8009da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b06      	cmp	r3, #6
 8009da6:	d010      	beq.n	8009dca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db8:	e007      	b.n	8009dca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f042 0201 	orr.w	r2, r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	40010000 	.word	0x40010000
 8009dd8:	40010400 	.word	0x40010400
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	40014000 	.word	0x40014000
 8009dec:	40001800 	.word	0x40001800

08009df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d122      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d11b      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f06f 0202 	mvn.w	r2, #2
 8009e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	f003 0303 	and.w	r3, r3, #3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fa81 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 8009e38:	e005      	b.n	8009e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa73 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fa84 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f003 0304 	and.w	r3, r3, #4
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d122      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d11b      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f06f 0204 	mvn.w	r2, #4
 8009e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa57 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 8009e8c:	e005      	b.n	8009e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa49 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fa5a 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0308 	and.w	r3, r3, #8
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	d122      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d11b      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f06f 0208 	mvn.w	r2, #8
 8009ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2204      	movs	r2, #4
 8009eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa2d 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 8009ee0:	e005      	b.n	8009eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa1f 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fa30 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0310 	and.w	r3, r3, #16
 8009efe:	2b10      	cmp	r3, #16
 8009f00:	d122      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0310 	and.w	r3, r3, #16
 8009f0c:	2b10      	cmp	r3, #16
 8009f0e:	d11b      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f06f 0210 	mvn.w	r2, #16
 8009f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa03 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 8009f34:	e005      	b.n	8009f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f9f5 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa06 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d10e      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d107      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0201 	mvn.w	r2, #1
 8009f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f9cf 	bl	800a312 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7e:	2b80      	cmp	r3, #128	; 0x80
 8009f80:	d10e      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8c:	2b80      	cmp	r3, #128	; 0x80
 8009f8e:	d107      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fdd4 	bl	800ab48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009faa:	2b40      	cmp	r3, #64	; 0x40
 8009fac:	d10e      	bne.n	8009fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb8:	2b40      	cmp	r3, #64	; 0x40
 8009fba:	d107      	bne.n	8009fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9cb 	bl	800a362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	d10e      	bne.n	8009ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f003 0320 	and.w	r3, r3, #32
 8009fe4:	2b20      	cmp	r3, #32
 8009fe6:	d107      	bne.n	8009ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f06f 0220 	mvn.w	r2, #32
 8009ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fd9e 	bl	800ab34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e0ae      	b.n	800a17c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b0c      	cmp	r3, #12
 800a02a:	f200 809f 	bhi.w	800a16c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a02e:	a201      	add	r2, pc, #4	; (adr r2, 800a034 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a034:	0800a069 	.word	0x0800a069
 800a038:	0800a16d 	.word	0x0800a16d
 800a03c:	0800a16d 	.word	0x0800a16d
 800a040:	0800a16d 	.word	0x0800a16d
 800a044:	0800a0a9 	.word	0x0800a0a9
 800a048:	0800a16d 	.word	0x0800a16d
 800a04c:	0800a16d 	.word	0x0800a16d
 800a050:	0800a16d 	.word	0x0800a16d
 800a054:	0800a0eb 	.word	0x0800a0eb
 800a058:	0800a16d 	.word	0x0800a16d
 800a05c:	0800a16d 	.word	0x0800a16d
 800a060:	0800a16d 	.word	0x0800a16d
 800a064:	0800a12b 	.word	0x0800a12b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fa22 	bl	800a4b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0208 	orr.w	r2, r2, #8
 800a082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699a      	ldr	r2, [r3, #24]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f022 0204 	bic.w	r2, r2, #4
 800a092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6999      	ldr	r1, [r3, #24]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	619a      	str	r2, [r3, #24]
      break;
 800a0a6:	e064      	b.n	800a172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fa72 	bl	800a598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6999      	ldr	r1, [r3, #24]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	021a      	lsls	r2, r3, #8
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	619a      	str	r2, [r3, #24]
      break;
 800a0e8:	e043      	b.n	800a172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fac7 	bl	800a684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69da      	ldr	r2, [r3, #28]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f042 0208 	orr.w	r2, r2, #8
 800a104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69da      	ldr	r2, [r3, #28]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f022 0204 	bic.w	r2, r2, #4
 800a114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69d9      	ldr	r1, [r3, #28]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	691a      	ldr	r2, [r3, #16]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	430a      	orrs	r2, r1
 800a126:	61da      	str	r2, [r3, #28]
      break;
 800a128:	e023      	b.n	800a172 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68b9      	ldr	r1, [r7, #8]
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fb1b 	bl	800a76c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69da      	ldr	r2, [r3, #28]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69d9      	ldr	r1, [r3, #28]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	021a      	lsls	r2, r3, #8
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	61da      	str	r2, [r3, #28]
      break;
 800a16a:	e002      	b.n	800a172 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	75fb      	strb	r3, [r7, #23]
      break;
 800a170:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a17a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d101      	bne.n	800a1a0 <HAL_TIM_ConfigClockSource+0x1c>
 800a19c:	2302      	movs	r3, #2
 800a19e:	e0b4      	b.n	800a30a <HAL_TIM_ConfigClockSource+0x186>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1d8:	d03e      	beq.n	800a258 <HAL_TIM_ConfigClockSource+0xd4>
 800a1da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1de:	f200 8087 	bhi.w	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e6:	f000 8086 	beq.w	800a2f6 <HAL_TIM_ConfigClockSource+0x172>
 800a1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ee:	d87f      	bhi.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f0:	2b70      	cmp	r3, #112	; 0x70
 800a1f2:	d01a      	beq.n	800a22a <HAL_TIM_ConfigClockSource+0xa6>
 800a1f4:	2b70      	cmp	r3, #112	; 0x70
 800a1f6:	d87b      	bhi.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f8:	2b60      	cmp	r3, #96	; 0x60
 800a1fa:	d050      	beq.n	800a29e <HAL_TIM_ConfigClockSource+0x11a>
 800a1fc:	2b60      	cmp	r3, #96	; 0x60
 800a1fe:	d877      	bhi.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a200:	2b50      	cmp	r3, #80	; 0x50
 800a202:	d03c      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0xfa>
 800a204:	2b50      	cmp	r3, #80	; 0x50
 800a206:	d873      	bhi.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a208:	2b40      	cmp	r3, #64	; 0x40
 800a20a:	d058      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x13a>
 800a20c:	2b40      	cmp	r3, #64	; 0x40
 800a20e:	d86f      	bhi.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a210:	2b30      	cmp	r3, #48	; 0x30
 800a212:	d064      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x15a>
 800a214:	2b30      	cmp	r3, #48	; 0x30
 800a216:	d86b      	bhi.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a218:	2b20      	cmp	r3, #32
 800a21a:	d060      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x15a>
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	d867      	bhi.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a220:	2b00      	cmp	r3, #0
 800a222:	d05c      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x15a>
 800a224:	2b10      	cmp	r3, #16
 800a226:	d05a      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x15a>
 800a228:	e062      	b.n	800a2f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6899      	ldr	r1, [r3, #8]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f000 fb67 	bl	800a90c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a24c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	609a      	str	r2, [r3, #8]
      break;
 800a256:	e04f      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	6899      	ldr	r1, [r3, #8]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f000 fb50 	bl	800a90c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a27a:	609a      	str	r2, [r3, #8]
      break;
 800a27c:	e03c      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6859      	ldr	r1, [r3, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f000 fac4 	bl	800a818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2150      	movs	r1, #80	; 0x50
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fb1d 	bl	800a8d6 <TIM_ITRx_SetConfig>
      break;
 800a29c:	e02c      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6859      	ldr	r1, [r3, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f000 fae3 	bl	800a876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2160      	movs	r1, #96	; 0x60
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 fb0d 	bl	800a8d6 <TIM_ITRx_SetConfig>
      break;
 800a2bc:	e01c      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6859      	ldr	r1, [r3, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f000 faa4 	bl	800a818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2140      	movs	r1, #64	; 0x40
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fafd 	bl	800a8d6 <TIM_ITRx_SetConfig>
      break;
 800a2dc:	e00c      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	f000 faf4 	bl	800a8d6 <TIM_ITRx_SetConfig>
      break;
 800a2ee:	e003      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f4:	e000      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a2f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a312:	b480      	push	{r7}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a31a:	bf00      	nop
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a32e:	bf00      	nop
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a40      	ldr	r2, [pc, #256]	; (800a48c <TIM_Base_SetConfig+0x114>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d013      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a396:	d00f      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a3d      	ldr	r2, [pc, #244]	; (800a490 <TIM_Base_SetConfig+0x118>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00b      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a3c      	ldr	r2, [pc, #240]	; (800a494 <TIM_Base_SetConfig+0x11c>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d007      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a3b      	ldr	r2, [pc, #236]	; (800a498 <TIM_Base_SetConfig+0x120>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d003      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a3a      	ldr	r2, [pc, #232]	; (800a49c <TIM_Base_SetConfig+0x124>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d108      	bne.n	800a3ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a2f      	ldr	r2, [pc, #188]	; (800a48c <TIM_Base_SetConfig+0x114>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d02b      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d8:	d027      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a2c      	ldr	r2, [pc, #176]	; (800a490 <TIM_Base_SetConfig+0x118>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d023      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a2b      	ldr	r2, [pc, #172]	; (800a494 <TIM_Base_SetConfig+0x11c>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d01f      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a2a      	ldr	r2, [pc, #168]	; (800a498 <TIM_Base_SetConfig+0x120>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d01b      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a29      	ldr	r2, [pc, #164]	; (800a49c <TIM_Base_SetConfig+0x124>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d017      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a28      	ldr	r2, [pc, #160]	; (800a4a0 <TIM_Base_SetConfig+0x128>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d013      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a27      	ldr	r2, [pc, #156]	; (800a4a4 <TIM_Base_SetConfig+0x12c>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d00f      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a26      	ldr	r2, [pc, #152]	; (800a4a8 <TIM_Base_SetConfig+0x130>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00b      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a25      	ldr	r2, [pc, #148]	; (800a4ac <TIM_Base_SetConfig+0x134>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d007      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a24      	ldr	r2, [pc, #144]	; (800a4b0 <TIM_Base_SetConfig+0x138>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d003      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a23      	ldr	r2, [pc, #140]	; (800a4b4 <TIM_Base_SetConfig+0x13c>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d108      	bne.n	800a43c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4313      	orrs	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a0a      	ldr	r2, [pc, #40]	; (800a48c <TIM_Base_SetConfig+0x114>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d003      	beq.n	800a470 <TIM_Base_SetConfig+0xf8>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a0c      	ldr	r2, [pc, #48]	; (800a49c <TIM_Base_SetConfig+0x124>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d103      	bne.n	800a478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	691a      	ldr	r2, [r3, #16]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	615a      	str	r2, [r3, #20]
}
 800a47e:	bf00      	nop
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	40010000 	.word	0x40010000
 800a490:	40000400 	.word	0x40000400
 800a494:	40000800 	.word	0x40000800
 800a498:	40000c00 	.word	0x40000c00
 800a49c:	40010400 	.word	0x40010400
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	40014400 	.word	0x40014400
 800a4a8:	40014800 	.word	0x40014800
 800a4ac:	40001800 	.word	0x40001800
 800a4b0:	40001c00 	.word	0x40001c00
 800a4b4:	40002000 	.word	0x40002000

0800a4b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f023 0201 	bic.w	r2, r3, #1
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f023 0303 	bic.w	r3, r3, #3
 800a4ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f023 0302 	bic.w	r3, r3, #2
 800a500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	4313      	orrs	r3, r2
 800a50a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a20      	ldr	r2, [pc, #128]	; (800a590 <TIM_OC1_SetConfig+0xd8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d003      	beq.n	800a51c <TIM_OC1_SetConfig+0x64>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a1f      	ldr	r2, [pc, #124]	; (800a594 <TIM_OC1_SetConfig+0xdc>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d10c      	bne.n	800a536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f023 0308 	bic.w	r3, r3, #8
 800a522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f023 0304 	bic.w	r3, r3, #4
 800a534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a15      	ldr	r2, [pc, #84]	; (800a590 <TIM_OC1_SetConfig+0xd8>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d003      	beq.n	800a546 <TIM_OC1_SetConfig+0x8e>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a14      	ldr	r2, [pc, #80]	; (800a594 <TIM_OC1_SetConfig+0xdc>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d111      	bne.n	800a56a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a54c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	4313      	orrs	r3, r2
 800a568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	621a      	str	r2, [r3, #32]
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	40010000 	.word	0x40010000
 800a594:	40010400 	.word	0x40010400

0800a598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	f023 0210 	bic.w	r2, r3, #16
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f023 0320 	bic.w	r3, r3, #32
 800a5e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	011b      	lsls	r3, r3, #4
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a22      	ldr	r2, [pc, #136]	; (800a67c <TIM_OC2_SetConfig+0xe4>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d003      	beq.n	800a600 <TIM_OC2_SetConfig+0x68>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a21      	ldr	r2, [pc, #132]	; (800a680 <TIM_OC2_SetConfig+0xe8>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d10d      	bne.n	800a61c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	011b      	lsls	r3, r3, #4
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	4313      	orrs	r3, r2
 800a612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a61a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a17      	ldr	r2, [pc, #92]	; (800a67c <TIM_OC2_SetConfig+0xe4>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d003      	beq.n	800a62c <TIM_OC2_SetConfig+0x94>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a16      	ldr	r2, [pc, #88]	; (800a680 <TIM_OC2_SetConfig+0xe8>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d113      	bne.n	800a654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a63a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	4313      	orrs	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	621a      	str	r2, [r3, #32]
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40010000 	.word	0x40010000
 800a680:	40010400 	.word	0x40010400

0800a684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a684:	b480      	push	{r7}
 800a686:	b087      	sub	sp, #28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a21      	ldr	r2, [pc, #132]	; (800a764 <TIM_OC3_SetConfig+0xe0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d003      	beq.n	800a6ea <TIM_OC3_SetConfig+0x66>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a20      	ldr	r2, [pc, #128]	; (800a768 <TIM_OC3_SetConfig+0xe4>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d10d      	bne.n	800a706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a16      	ldr	r2, [pc, #88]	; (800a764 <TIM_OC3_SetConfig+0xe0>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d003      	beq.n	800a716 <TIM_OC3_SetConfig+0x92>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a15      	ldr	r2, [pc, #84]	; (800a768 <TIM_OC3_SetConfig+0xe4>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d113      	bne.n	800a73e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a71c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	011b      	lsls	r3, r3, #4
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	621a      	str	r2, [r3, #32]
}
 800a758:	bf00      	nop
 800a75a:	371c      	adds	r7, #28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	40010000 	.word	0x40010000
 800a768:	40010400 	.word	0x40010400

0800a76c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	031b      	lsls	r3, r3, #12
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a12      	ldr	r2, [pc, #72]	; (800a810 <TIM_OC4_SetConfig+0xa4>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d003      	beq.n	800a7d4 <TIM_OC4_SetConfig+0x68>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a11      	ldr	r2, [pc, #68]	; (800a814 <TIM_OC4_SetConfig+0xa8>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d109      	bne.n	800a7e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	019b      	lsls	r3, r3, #6
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	621a      	str	r2, [r3, #32]
}
 800a802:	bf00      	nop
 800a804:	371c      	adds	r7, #28
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	40010000 	.word	0x40010000
 800a814:	40010400 	.word	0x40010400

0800a818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	f023 0201 	bic.w	r2, r3, #1
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	011b      	lsls	r3, r3, #4
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f023 030a 	bic.w	r3, r3, #10
 800a854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	621a      	str	r2, [r3, #32]
}
 800a86a:	bf00      	nop
 800a86c:	371c      	adds	r7, #28
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a876:	b480      	push	{r7}
 800a878:	b087      	sub	sp, #28
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	f023 0210 	bic.w	r2, r3, #16
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	031b      	lsls	r3, r3, #12
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	621a      	str	r2, [r3, #32]
}
 800a8ca:	bf00      	nop
 800a8cc:	371c      	adds	r7, #28
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	f043 0307 	orr.w	r3, r3, #7
 800a8f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	609a      	str	r2, [r3, #8]
}
 800a900:	bf00      	nop
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	021a      	lsls	r2, r3, #8
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	431a      	orrs	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4313      	orrs	r3, r2
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	4313      	orrs	r3, r2
 800a938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	609a      	str	r2, [r3, #8]
}
 800a940:	bf00      	nop
 800a942:	371c      	adds	r7, #28
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f003 031f 	and.w	r3, r3, #31
 800a95e:	2201      	movs	r2, #1
 800a960:	fa02 f303 	lsl.w	r3, r2, r3
 800a964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6a1a      	ldr	r2, [r3, #32]
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	43db      	mvns	r3, r3
 800a96e:	401a      	ands	r2, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6a1a      	ldr	r2, [r3, #32]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	f003 031f 	and.w	r3, r3, #31
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	fa01 f303 	lsl.w	r3, r1, r3
 800a984:	431a      	orrs	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	621a      	str	r2, [r3, #32]
}
 800a98a:	bf00      	nop
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
	...

0800a998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d101      	bne.n	800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	e05a      	b.n	800aa66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a21      	ldr	r2, [pc, #132]	; (800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d022      	beq.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fc:	d01d      	beq.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a1d      	ldr	r2, [pc, #116]	; (800aa78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d018      	beq.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a1b      	ldr	r2, [pc, #108]	; (800aa7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d013      	beq.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a1a      	ldr	r2, [pc, #104]	; (800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d00e      	beq.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a18      	ldr	r2, [pc, #96]	; (800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d009      	beq.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a17      	ldr	r2, [pc, #92]	; (800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d004      	beq.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a15      	ldr	r2, [pc, #84]	; (800aa8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d10c      	bne.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40010000 	.word	0x40010000
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00
 800aa84:	40010400 	.word	0x40010400
 800aa88:	40014000 	.word	0x40014000
 800aa8c:	40001800 	.word	0x40001800

0800aa90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d101      	bne.n	800aaac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	e03d      	b.n	800ab28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	4313      	orrs	r3, r2
 800aace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	4313      	orrs	r3, r2
 800aadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e03f      	b.n	800abee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7fc f906 	bl	8006d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2224      	movs	r2, #36	; 0x24
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fddf 	bl	800b764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	691a      	ldr	r2, [r3, #16]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	695a      	ldr	r2, [r3, #20]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68da      	ldr	r2, [r3, #12]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800abd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2220      	movs	r2, #32
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2220      	movs	r2, #32
 800abe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b08a      	sub	sp, #40	; 0x28
 800abfa:	af02      	add	r7, sp, #8
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	4613      	mov	r3, r2
 800ac04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d17c      	bne.n	800ad10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <HAL_UART_Transmit+0x2c>
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e075      	b.n	800ad12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d101      	bne.n	800ac34 <HAL_UART_Transmit+0x3e>
 800ac30:	2302      	movs	r3, #2
 800ac32:	e06e      	b.n	800ad12 <HAL_UART_Transmit+0x11c>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2221      	movs	r2, #33	; 0x21
 800ac46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac4a:	f7fc f9a7 	bl	8006f9c <HAL_GetTick>
 800ac4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	88fa      	ldrh	r2, [r7, #6]
 800ac54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	88fa      	ldrh	r2, [r7, #6]
 800ac5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac64:	d108      	bne.n	800ac78 <HAL_UART_Transmit+0x82>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d104      	bne.n	800ac78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	61bb      	str	r3, [r7, #24]
 800ac76:	e003      	b.n	800ac80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ac88:	e02a      	b.n	800ace0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2200      	movs	r2, #0
 800ac92:	2180      	movs	r1, #128	; 0x80
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 fb1f 	bl	800b2d8 <UART_WaitOnFlagUntilTimeout>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e036      	b.n	800ad12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10b      	bne.n	800acc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	3302      	adds	r3, #2
 800acbe:	61bb      	str	r3, [r7, #24]
 800acc0:	e007      	b.n	800acd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	781a      	ldrb	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	3301      	adds	r3, #1
 800acd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	3b01      	subs	r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1cf      	bne.n	800ac8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2200      	movs	r2, #0
 800acf2:	2140      	movs	r1, #64	; 0x40
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 faef 	bl	800b2d8 <UART_WaitOnFlagUntilTimeout>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e006      	b.n	800ad12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e000      	b.n	800ad12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ad10:	2302      	movs	r3, #2
  }
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3720      	adds	r7, #32
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	4613      	mov	r3, r2
 800ad26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b20      	cmp	r3, #32
 800ad32:	d11d      	bne.n	800ad70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <HAL_UART_Receive_IT+0x26>
 800ad3a:	88fb      	ldrh	r3, [r7, #6]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e016      	b.n	800ad72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d101      	bne.n	800ad52 <HAL_UART_Receive_IT+0x38>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	e00f      	b.n	800ad72 <HAL_UART_Receive_IT+0x58>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad60:	88fb      	ldrh	r3, [r7, #6]
 800ad62:	461a      	mov	r2, r3
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fb24 	bl	800b3b4 <UART_Start_Receive_IT>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	e000      	b.n	800ad72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ad70:	2302      	movs	r3, #2
  }
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b0ba      	sub	sp, #232	; 0xe8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800adae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800adba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10f      	bne.n	800ade2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d009      	beq.n	800ade2 <HAL_UART_IRQHandler+0x66>
 800adce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800add2:	f003 0320 	and.w	r3, r3, #32
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fc07 	bl	800b5ee <UART_Receive_IT>
      return;
 800ade0:	e256      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ade2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 80de 	beq.w	800afa8 <HAL_UART_IRQHandler+0x22c>
 800adec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d106      	bne.n	800ae06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800adf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 80d1 	beq.w	800afa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00b      	beq.n	800ae2a <HAL_UART_IRQHandler+0xae>
 800ae12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d005      	beq.n	800ae2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	f043 0201 	orr.w	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2e:	f003 0304 	and.w	r3, r3, #4
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00b      	beq.n	800ae4e <HAL_UART_IRQHandler+0xd2>
 800ae36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d005      	beq.n	800ae4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	f043 0202 	orr.w	r2, r3, #2
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00b      	beq.n	800ae72 <HAL_UART_IRQHandler+0xf6>
 800ae5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d005      	beq.n	800ae72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	f043 0204 	orr.w	r2, r3, #4
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ae72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae76:	f003 0308 	and.w	r3, r3, #8
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d011      	beq.n	800aea2 <HAL_UART_IRQHandler+0x126>
 800ae7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d105      	bne.n	800ae96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	f043 0208 	orr.w	r2, r3, #8
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 81ed 	beq.w	800b286 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb0:	f003 0320 	and.w	r3, r3, #32
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <HAL_UART_IRQHandler+0x14e>
 800aeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fb92 	bl	800b5ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed4:	2b40      	cmp	r3, #64	; 0x40
 800aed6:	bf0c      	ite	eq
 800aed8:	2301      	moveq	r3, #1
 800aeda:	2300      	movne	r3, #0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d103      	bne.n	800aef6 <HAL_UART_IRQHandler+0x17a>
 800aeee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d04f      	beq.n	800af96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fa9a 	bl	800b430 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af06:	2b40      	cmp	r3, #64	; 0x40
 800af08:	d141      	bne.n	800af8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3314      	adds	r3, #20
 800af10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3314      	adds	r3, #20
 800af32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1d9      	bne.n	800af0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d013      	beq.n	800af86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af62:	4a7d      	ldr	r2, [pc, #500]	; (800b158 <HAL_UART_IRQHandler+0x3dc>)
 800af64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fd f9f7 	bl	800835e <HAL_DMA_Abort_IT>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d016      	beq.n	800afa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	e00e      	b.n	800afa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f990 	bl	800b2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8c:	e00a      	b.n	800afa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f98c 	bl	800b2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af94:	e006      	b.n	800afa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f988 	bl	800b2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800afa2:	e170      	b.n	800b286 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa4:	bf00      	nop
    return;
 800afa6:	e16e      	b.n	800b286 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	2b01      	cmp	r3, #1
 800afae:	f040 814a 	bne.w	800b246 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800afb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afb6:	f003 0310 	and.w	r3, r3, #16
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8143 	beq.w	800b246 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800afc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afc4:	f003 0310 	and.w	r3, r3, #16
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 813c 	beq.w	800b246 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afce:	2300      	movs	r3, #0
 800afd0:	60bb      	str	r3, [r7, #8]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	60bb      	str	r3, [r7, #8]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	60bb      	str	r3, [r7, #8]
 800afe2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afee:	2b40      	cmp	r3, #64	; 0x40
 800aff0:	f040 80b4 	bne.w	800b15c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 8140 	beq.w	800b28a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b00e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b012:	429a      	cmp	r2, r3
 800b014:	f080 8139 	bcs.w	800b28a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b01e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b02a:	f000 8088 	beq.w	800b13e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	330c      	adds	r3, #12
 800b034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b04c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	330c      	adds	r3, #12
 800b056:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b05a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b05e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b06a:	e841 2300 	strex	r3, r2, [r1]
 800b06e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1d9      	bne.n	800b02e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3314      	adds	r3, #20
 800b080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b08a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b08c:	f023 0301 	bic.w	r3, r3, #1
 800b090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3314      	adds	r3, #20
 800b09a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b09e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1e1      	bne.n	800b07a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3314      	adds	r3, #20
 800b0bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0c0:	e853 3f00 	ldrex	r3, [r3]
 800b0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3314      	adds	r3, #20
 800b0d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e3      	bne.n	800b0b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	330c      	adds	r3, #12
 800b102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b106:	e853 3f00 	ldrex	r3, [r3]
 800b10a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b10e:	f023 0310 	bic.w	r3, r3, #16
 800b112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	330c      	adds	r3, #12
 800b11c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b120:	65ba      	str	r2, [r7, #88]	; 0x58
 800b122:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b128:	e841 2300 	strex	r3, r2, [r1]
 800b12c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e3      	bne.n	800b0fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fd f8a0 	bl	800827e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b146:	b29b      	uxth	r3, r3
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f8b6 	bl	800b2c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b154:	e099      	b.n	800b28a <HAL_UART_IRQHandler+0x50e>
 800b156:	bf00      	nop
 800b158:	0800b4f7 	.word	0x0800b4f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b164:	b29b      	uxth	r3, r3
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b170:	b29b      	uxth	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 808b 	beq.w	800b28e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 8086 	beq.w	800b28e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	330c      	adds	r3, #12
 800b188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	e853 3f00 	ldrex	r3, [r3]
 800b190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	330c      	adds	r3, #12
 800b1a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b1a6:	647a      	str	r2, [r7, #68]	; 0x44
 800b1a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1e3      	bne.n	800b182 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3314      	adds	r3, #20
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f023 0301 	bic.w	r3, r3, #1
 800b1d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3314      	adds	r3, #20
 800b1da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1de:	633a      	str	r2, [r7, #48]	; 0x30
 800b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e3      	bne.n	800b1ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	330c      	adds	r3, #12
 800b206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	e853 3f00 	ldrex	r3, [r3]
 800b20e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f023 0310 	bic.w	r3, r3, #16
 800b216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	330c      	adds	r3, #12
 800b220:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b224:	61fa      	str	r2, [r7, #28]
 800b226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b228:	69b9      	ldr	r1, [r7, #24]
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	e841 2300 	strex	r3, r2, [r1]
 800b230:	617b      	str	r3, [r7, #20]
   return(result);
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e3      	bne.n	800b200 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f83e 	bl	800b2c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b244:	e023      	b.n	800b28e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d009      	beq.n	800b266 <HAL_UART_IRQHandler+0x4ea>
 800b252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f95d 	bl	800b51e <UART_Transmit_IT>
    return;
 800b264:	e014      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <HAL_UART_IRQHandler+0x514>
 800b272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d008      	beq.n	800b290 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f99d 	bl	800b5be <UART_EndTransmit_IT>
    return;
 800b284:	e004      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
    return;
 800b286:	bf00      	nop
 800b288:	e002      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
      return;
 800b28a:	bf00      	nop
 800b28c:	e000      	b.n	800b290 <HAL_UART_IRQHandler+0x514>
      return;
 800b28e:	bf00      	nop
  }
}
 800b290:	37e8      	adds	r7, #232	; 0xe8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop

0800b298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b090      	sub	sp, #64	; 0x40
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2e8:	e050      	b.n	800b38c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2f0:	d04c      	beq.n	800b38c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d007      	beq.n	800b308 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2f8:	f7fb fe50 	bl	8006f9c <HAL_GetTick>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b304:	429a      	cmp	r2, r3
 800b306:	d241      	bcs.n	800b38c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	330c      	adds	r3, #12
 800b30e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	e853 3f00 	ldrex	r3, [r3]
 800b316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	330c      	adds	r3, #12
 800b326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b328:	637a      	str	r2, [r7, #52]	; 0x34
 800b32a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b330:	e841 2300 	strex	r3, r2, [r1]
 800b334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1e5      	bne.n	800b308 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3314      	adds	r3, #20
 800b342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	613b      	str	r3, [r7, #16]
   return(result);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f023 0301 	bic.w	r3, r3, #1
 800b352:	63bb      	str	r3, [r7, #56]	; 0x38
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3314      	adds	r3, #20
 800b35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b35c:	623a      	str	r2, [r7, #32]
 800b35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	69f9      	ldr	r1, [r7, #28]
 800b362:	6a3a      	ldr	r2, [r7, #32]
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	61bb      	str	r3, [r7, #24]
   return(result);
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e5      	bne.n	800b33c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2220      	movs	r2, #32
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2220      	movs	r2, #32
 800b37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e00f      	b.n	800b3ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	4013      	ands	r3, r2
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	429a      	cmp	r2, r3
 800b39a:	bf0c      	ite	eq
 800b39c:	2301      	moveq	r3, #1
 800b39e:	2300      	movne	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d09f      	beq.n	800b2ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3740      	adds	r7, #64	; 0x40
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	88fa      	ldrh	r2, [r7, #6]
 800b3cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	88fa      	ldrh	r2, [r7, #6]
 800b3d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2222      	movs	r2, #34	; 0x22
 800b3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d007      	beq.n	800b402 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68da      	ldr	r2, [r3, #12]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b400:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	695a      	ldr	r2, [r3, #20]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f042 0201 	orr.w	r2, r2, #1
 800b410:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68da      	ldr	r2, [r3, #12]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f042 0220 	orr.w	r2, r2, #32
 800b420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b430:	b480      	push	{r7}
 800b432:	b095      	sub	sp, #84	; 0x54
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	330c      	adds	r3, #12
 800b43e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	e853 3f00 	ldrex	r3, [r3]
 800b446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b44e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	330c      	adds	r3, #12
 800b456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b458:	643a      	str	r2, [r7, #64]	; 0x40
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b45e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b460:	e841 2300 	strex	r3, r2, [r1]
 800b464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e5      	bne.n	800b438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3314      	adds	r3, #20
 800b472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	e853 3f00 	ldrex	r3, [r3]
 800b47a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	f023 0301 	bic.w	r3, r3, #1
 800b482:	64bb      	str	r3, [r7, #72]	; 0x48
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3314      	adds	r3, #20
 800b48a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b48c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b48e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e5      	bne.n	800b46c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d119      	bne.n	800b4dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	330c      	adds	r3, #12
 800b4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	e853 3f00 	ldrex	r3, [r3]
 800b4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f023 0310 	bic.w	r3, r3, #16
 800b4be:	647b      	str	r3, [r7, #68]	; 0x44
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4c8:	61ba      	str	r2, [r7, #24]
 800b4ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	6979      	ldr	r1, [r7, #20]
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e5      	bne.n	800b4a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b4ea:	bf00      	nop
 800b4ec:	3754      	adds	r7, #84	; 0x54
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b502:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff fecb 	bl	800b2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b21      	cmp	r3, #33	; 0x21
 800b530:	d13e      	bne.n	800b5b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b53a:	d114      	bne.n	800b566 <UART_Transmit_IT+0x48>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d110      	bne.n	800b566 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a1b      	ldr	r3, [r3, #32]
 800b548:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b558:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	1c9a      	adds	r2, r3, #2
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	621a      	str	r2, [r3, #32]
 800b564:	e008      	b.n	800b578 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a1b      	ldr	r3, [r3, #32]
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	6211      	str	r1, [r2, #32]
 800b570:	781a      	ldrb	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	3b01      	subs	r3, #1
 800b580:	b29b      	uxth	r3, r3
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	4619      	mov	r1, r3
 800b586:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10f      	bne.n	800b5ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68da      	ldr	r2, [r3, #12]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b59a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68da      	ldr	r2, [r3, #12]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	e000      	b.n	800b5b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b5b0:	2302      	movs	r3, #2
  }
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff fe5a 	bl	800b298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b08c      	sub	sp, #48	; 0x30
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b22      	cmp	r3, #34	; 0x22
 800b600:	f040 80ab 	bne.w	800b75a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b60c:	d117      	bne.n	800b63e <UART_Receive_IT+0x50>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d113      	bne.n	800b63e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	b29b      	uxth	r3, r3
 800b628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b630:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b636:	1c9a      	adds	r2, r3, #2
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	629a      	str	r2, [r3, #40]	; 0x28
 800b63c:	e026      	b.n	800b68c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b644:	2300      	movs	r3, #0
 800b646:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b650:	d007      	beq.n	800b662 <UART_Receive_IT+0x74>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10a      	bne.n	800b670 <UART_Receive_IT+0x82>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	701a      	strb	r2, [r3, #0]
 800b66e:	e008      	b.n	800b682 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	b2db      	uxtb	r3, r3
 800b678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b680:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b690:	b29b      	uxth	r3, r3
 800b692:	3b01      	subs	r3, #1
 800b694:	b29b      	uxth	r3, r3
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	4619      	mov	r1, r3
 800b69a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d15a      	bne.n	800b756 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68da      	ldr	r2, [r3, #12]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f022 0220 	bic.w	r2, r2, #32
 800b6ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	695a      	ldr	r2, [r3, #20]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 0201 	bic.w	r2, r2, #1
 800b6ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2220      	movs	r2, #32
 800b6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d135      	bne.n	800b74c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	330c      	adds	r3, #12
 800b6ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	e853 3f00 	ldrex	r3, [r3]
 800b6f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f023 0310 	bic.w	r3, r3, #16
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	330c      	adds	r3, #12
 800b704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b706:	623a      	str	r2, [r7, #32]
 800b708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	69f9      	ldr	r1, [r7, #28]
 800b70c:	6a3a      	ldr	r2, [r7, #32]
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	61bb      	str	r3, [r7, #24]
   return(result);
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e5      	bne.n	800b6e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0310 	and.w	r3, r3, #16
 800b724:	2b10      	cmp	r3, #16
 800b726:	d10a      	bne.n	800b73e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b728:	2300      	movs	r3, #0
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff fdbb 	bl	800b2c0 <HAL_UARTEx_RxEventCallback>
 800b74a:	e002      	b.n	800b752 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7fb fb83 	bl	8006e58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	e002      	b.n	800b75c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	e000      	b.n	800b75c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b75a:	2302      	movs	r3, #2
  }
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3730      	adds	r7, #48	; 0x30
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b768:	b0c0      	sub	sp, #256	; 0x100
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b780:	68d9      	ldr	r1, [r3, #12]
 800b782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	ea40 0301 	orr.w	r3, r0, r1
 800b78c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b78e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	431a      	orrs	r2, r3
 800b79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7bc:	f021 010c 	bic.w	r1, r1, #12
 800b7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7ca:	430b      	orrs	r3, r1
 800b7cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7de:	6999      	ldr	r1, [r3, #24]
 800b7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	ea40 0301 	orr.w	r3, r0, r1
 800b7ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4b8f      	ldr	r3, [pc, #572]	; (800ba30 <UART_SetConfig+0x2cc>)
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d005      	beq.n	800b804 <UART_SetConfig+0xa0>
 800b7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	4b8d      	ldr	r3, [pc, #564]	; (800ba34 <UART_SetConfig+0x2d0>)
 800b800:	429a      	cmp	r2, r3
 800b802:	d104      	bne.n	800b80e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b804:	f7fd f8d2 	bl	80089ac <HAL_RCC_GetPCLK2Freq>
 800b808:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b80c:	e003      	b.n	800b816 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b80e:	f7fd f8b9 	bl	8008984 <HAL_RCC_GetPCLK1Freq>
 800b812:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b81a:	69db      	ldr	r3, [r3, #28]
 800b81c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b820:	f040 810c 	bne.w	800ba3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b828:	2200      	movs	r2, #0
 800b82a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b82e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b832:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b836:	4622      	mov	r2, r4
 800b838:	462b      	mov	r3, r5
 800b83a:	1891      	adds	r1, r2, r2
 800b83c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b83e:	415b      	adcs	r3, r3
 800b840:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b846:	4621      	mov	r1, r4
 800b848:	eb12 0801 	adds.w	r8, r2, r1
 800b84c:	4629      	mov	r1, r5
 800b84e:	eb43 0901 	adc.w	r9, r3, r1
 800b852:	f04f 0200 	mov.w	r2, #0
 800b856:	f04f 0300 	mov.w	r3, #0
 800b85a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b85e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b866:	4690      	mov	r8, r2
 800b868:	4699      	mov	r9, r3
 800b86a:	4623      	mov	r3, r4
 800b86c:	eb18 0303 	adds.w	r3, r8, r3
 800b870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b874:	462b      	mov	r3, r5
 800b876:	eb49 0303 	adc.w	r3, r9, r3
 800b87a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b87e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b88a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b88e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b892:	460b      	mov	r3, r1
 800b894:	18db      	adds	r3, r3, r3
 800b896:	653b      	str	r3, [r7, #80]	; 0x50
 800b898:	4613      	mov	r3, r2
 800b89a:	eb42 0303 	adc.w	r3, r2, r3
 800b89e:	657b      	str	r3, [r7, #84]	; 0x54
 800b8a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b8a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b8a8:	f7f5 fa0e 	bl	8000cc8 <__aeabi_uldivmod>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4b61      	ldr	r3, [pc, #388]	; (800ba38 <UART_SetConfig+0x2d4>)
 800b8b2:	fba3 2302 	umull	r2, r3, r3, r2
 800b8b6:	095b      	lsrs	r3, r3, #5
 800b8b8:	011c      	lsls	r4, r3, #4
 800b8ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b8c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	464b      	mov	r3, r9
 800b8d0:	1891      	adds	r1, r2, r2
 800b8d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b8d4:	415b      	adcs	r3, r3
 800b8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b8dc:	4641      	mov	r1, r8
 800b8de:	eb12 0a01 	adds.w	sl, r2, r1
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	eb43 0b01 	adc.w	fp, r3, r1
 800b8e8:	f04f 0200 	mov.w	r2, #0
 800b8ec:	f04f 0300 	mov.w	r3, #0
 800b8f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b8f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b8f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8fc:	4692      	mov	sl, r2
 800b8fe:	469b      	mov	fp, r3
 800b900:	4643      	mov	r3, r8
 800b902:	eb1a 0303 	adds.w	r3, sl, r3
 800b906:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b90a:	464b      	mov	r3, r9
 800b90c:	eb4b 0303 	adc.w	r3, fp, r3
 800b910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b920:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b924:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b928:	460b      	mov	r3, r1
 800b92a:	18db      	adds	r3, r3, r3
 800b92c:	643b      	str	r3, [r7, #64]	; 0x40
 800b92e:	4613      	mov	r3, r2
 800b930:	eb42 0303 	adc.w	r3, r2, r3
 800b934:	647b      	str	r3, [r7, #68]	; 0x44
 800b936:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b93a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b93e:	f7f5 f9c3 	bl	8000cc8 <__aeabi_uldivmod>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4611      	mov	r1, r2
 800b948:	4b3b      	ldr	r3, [pc, #236]	; (800ba38 <UART_SetConfig+0x2d4>)
 800b94a:	fba3 2301 	umull	r2, r3, r3, r1
 800b94e:	095b      	lsrs	r3, r3, #5
 800b950:	2264      	movs	r2, #100	; 0x64
 800b952:	fb02 f303 	mul.w	r3, r2, r3
 800b956:	1acb      	subs	r3, r1, r3
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b95e:	4b36      	ldr	r3, [pc, #216]	; (800ba38 <UART_SetConfig+0x2d4>)
 800b960:	fba3 2302 	umull	r2, r3, r3, r2
 800b964:	095b      	lsrs	r3, r3, #5
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b96c:	441c      	add	r4, r3
 800b96e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b972:	2200      	movs	r2, #0
 800b974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b978:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b97c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b980:	4642      	mov	r2, r8
 800b982:	464b      	mov	r3, r9
 800b984:	1891      	adds	r1, r2, r2
 800b986:	63b9      	str	r1, [r7, #56]	; 0x38
 800b988:	415b      	adcs	r3, r3
 800b98a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b98c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b990:	4641      	mov	r1, r8
 800b992:	1851      	adds	r1, r2, r1
 800b994:	6339      	str	r1, [r7, #48]	; 0x30
 800b996:	4649      	mov	r1, r9
 800b998:	414b      	adcs	r3, r1
 800b99a:	637b      	str	r3, [r7, #52]	; 0x34
 800b99c:	f04f 0200 	mov.w	r2, #0
 800b9a0:	f04f 0300 	mov.w	r3, #0
 800b9a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b9a8:	4659      	mov	r1, fp
 800b9aa:	00cb      	lsls	r3, r1, #3
 800b9ac:	4651      	mov	r1, sl
 800b9ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9b2:	4651      	mov	r1, sl
 800b9b4:	00ca      	lsls	r2, r1, #3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	4642      	mov	r2, r8
 800b9be:	189b      	adds	r3, r3, r2
 800b9c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9c4:	464b      	mov	r3, r9
 800b9c6:	460a      	mov	r2, r1
 800b9c8:	eb42 0303 	adc.w	r3, r2, r3
 800b9cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b9e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	18db      	adds	r3, r3, r3
 800b9e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	eb42 0303 	adc.w	r3, r2, r3
 800b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b9f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b9fa:	f7f5 f965 	bl	8000cc8 <__aeabi_uldivmod>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4b0d      	ldr	r3, [pc, #52]	; (800ba38 <UART_SetConfig+0x2d4>)
 800ba04:	fba3 1302 	umull	r1, r3, r3, r2
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	2164      	movs	r1, #100	; 0x64
 800ba0c:	fb01 f303 	mul.w	r3, r1, r3
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	3332      	adds	r3, #50	; 0x32
 800ba16:	4a08      	ldr	r2, [pc, #32]	; (800ba38 <UART_SetConfig+0x2d4>)
 800ba18:	fba2 2303 	umull	r2, r3, r2, r3
 800ba1c:	095b      	lsrs	r3, r3, #5
 800ba1e:	f003 0207 	and.w	r2, r3, #7
 800ba22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4422      	add	r2, r4
 800ba2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba2c:	e105      	b.n	800bc3a <UART_SetConfig+0x4d6>
 800ba2e:	bf00      	nop
 800ba30:	40011000 	.word	0x40011000
 800ba34:	40011400 	.word	0x40011400
 800ba38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba40:	2200      	movs	r2, #0
 800ba42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ba4e:	4642      	mov	r2, r8
 800ba50:	464b      	mov	r3, r9
 800ba52:	1891      	adds	r1, r2, r2
 800ba54:	6239      	str	r1, [r7, #32]
 800ba56:	415b      	adcs	r3, r3
 800ba58:	627b      	str	r3, [r7, #36]	; 0x24
 800ba5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba5e:	4641      	mov	r1, r8
 800ba60:	1854      	adds	r4, r2, r1
 800ba62:	4649      	mov	r1, r9
 800ba64:	eb43 0501 	adc.w	r5, r3, r1
 800ba68:	f04f 0200 	mov.w	r2, #0
 800ba6c:	f04f 0300 	mov.w	r3, #0
 800ba70:	00eb      	lsls	r3, r5, #3
 800ba72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba76:	00e2      	lsls	r2, r4, #3
 800ba78:	4614      	mov	r4, r2
 800ba7a:	461d      	mov	r5, r3
 800ba7c:	4643      	mov	r3, r8
 800ba7e:	18e3      	adds	r3, r4, r3
 800ba80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba84:	464b      	mov	r3, r9
 800ba86:	eb45 0303 	adc.w	r3, r5, r3
 800ba8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba9e:	f04f 0200 	mov.w	r2, #0
 800baa2:	f04f 0300 	mov.w	r3, #0
 800baa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800baaa:	4629      	mov	r1, r5
 800baac:	008b      	lsls	r3, r1, #2
 800baae:	4621      	mov	r1, r4
 800bab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bab4:	4621      	mov	r1, r4
 800bab6:	008a      	lsls	r2, r1, #2
 800bab8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800babc:	f7f5 f904 	bl	8000cc8 <__aeabi_uldivmod>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4b60      	ldr	r3, [pc, #384]	; (800bc48 <UART_SetConfig+0x4e4>)
 800bac6:	fba3 2302 	umull	r2, r3, r3, r2
 800baca:	095b      	lsrs	r3, r3, #5
 800bacc:	011c      	lsls	r4, r3, #4
 800bace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bad2:	2200      	movs	r2, #0
 800bad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bad8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800badc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bae0:	4642      	mov	r2, r8
 800bae2:	464b      	mov	r3, r9
 800bae4:	1891      	adds	r1, r2, r2
 800bae6:	61b9      	str	r1, [r7, #24]
 800bae8:	415b      	adcs	r3, r3
 800baea:	61fb      	str	r3, [r7, #28]
 800baec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800baf0:	4641      	mov	r1, r8
 800baf2:	1851      	adds	r1, r2, r1
 800baf4:	6139      	str	r1, [r7, #16]
 800baf6:	4649      	mov	r1, r9
 800baf8:	414b      	adcs	r3, r1
 800bafa:	617b      	str	r3, [r7, #20]
 800bafc:	f04f 0200 	mov.w	r2, #0
 800bb00:	f04f 0300 	mov.w	r3, #0
 800bb04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb08:	4659      	mov	r1, fp
 800bb0a:	00cb      	lsls	r3, r1, #3
 800bb0c:	4651      	mov	r1, sl
 800bb0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb12:	4651      	mov	r1, sl
 800bb14:	00ca      	lsls	r2, r1, #3
 800bb16:	4610      	mov	r0, r2
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	4642      	mov	r2, r8
 800bb1e:	189b      	adds	r3, r3, r2
 800bb20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb24:	464b      	mov	r3, r9
 800bb26:	460a      	mov	r2, r1
 800bb28:	eb42 0303 	adc.w	r3, r2, r3
 800bb2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bb3c:	f04f 0200 	mov.w	r2, #0
 800bb40:	f04f 0300 	mov.w	r3, #0
 800bb44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bb48:	4649      	mov	r1, r9
 800bb4a:	008b      	lsls	r3, r1, #2
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb52:	4641      	mov	r1, r8
 800bb54:	008a      	lsls	r2, r1, #2
 800bb56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bb5a:	f7f5 f8b5 	bl	8000cc8 <__aeabi_uldivmod>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4b39      	ldr	r3, [pc, #228]	; (800bc48 <UART_SetConfig+0x4e4>)
 800bb64:	fba3 1302 	umull	r1, r3, r3, r2
 800bb68:	095b      	lsrs	r3, r3, #5
 800bb6a:	2164      	movs	r1, #100	; 0x64
 800bb6c:	fb01 f303 	mul.w	r3, r1, r3
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	3332      	adds	r3, #50	; 0x32
 800bb76:	4a34      	ldr	r2, [pc, #208]	; (800bc48 <UART_SetConfig+0x4e4>)
 800bb78:	fba2 2303 	umull	r2, r3, r2, r3
 800bb7c:	095b      	lsrs	r3, r3, #5
 800bb7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb82:	441c      	add	r4, r3
 800bb84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb88:	2200      	movs	r2, #0
 800bb8a:	673b      	str	r3, [r7, #112]	; 0x70
 800bb8c:	677a      	str	r2, [r7, #116]	; 0x74
 800bb8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bb92:	4642      	mov	r2, r8
 800bb94:	464b      	mov	r3, r9
 800bb96:	1891      	adds	r1, r2, r2
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	415b      	adcs	r3, r3
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bba2:	4641      	mov	r1, r8
 800bba4:	1851      	adds	r1, r2, r1
 800bba6:	6039      	str	r1, [r7, #0]
 800bba8:	4649      	mov	r1, r9
 800bbaa:	414b      	adcs	r3, r1
 800bbac:	607b      	str	r3, [r7, #4]
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	f04f 0300 	mov.w	r3, #0
 800bbb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bbba:	4659      	mov	r1, fp
 800bbbc:	00cb      	lsls	r3, r1, #3
 800bbbe:	4651      	mov	r1, sl
 800bbc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbc4:	4651      	mov	r1, sl
 800bbc6:	00ca      	lsls	r2, r1, #3
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4603      	mov	r3, r0
 800bbce:	4642      	mov	r2, r8
 800bbd0:	189b      	adds	r3, r3, r2
 800bbd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbd4:	464b      	mov	r3, r9
 800bbd6:	460a      	mov	r2, r1
 800bbd8:	eb42 0303 	adc.w	r3, r2, r3
 800bbdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	663b      	str	r3, [r7, #96]	; 0x60
 800bbe8:	667a      	str	r2, [r7, #100]	; 0x64
 800bbea:	f04f 0200 	mov.w	r2, #0
 800bbee:	f04f 0300 	mov.w	r3, #0
 800bbf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	008b      	lsls	r3, r1, #2
 800bbfa:	4641      	mov	r1, r8
 800bbfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc00:	4641      	mov	r1, r8
 800bc02:	008a      	lsls	r2, r1, #2
 800bc04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc08:	f7f5 f85e 	bl	8000cc8 <__aeabi_uldivmod>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4b0d      	ldr	r3, [pc, #52]	; (800bc48 <UART_SetConfig+0x4e4>)
 800bc12:	fba3 1302 	umull	r1, r3, r3, r2
 800bc16:	095b      	lsrs	r3, r3, #5
 800bc18:	2164      	movs	r1, #100	; 0x64
 800bc1a:	fb01 f303 	mul.w	r3, r1, r3
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	011b      	lsls	r3, r3, #4
 800bc22:	3332      	adds	r3, #50	; 0x32
 800bc24:	4a08      	ldr	r2, [pc, #32]	; (800bc48 <UART_SetConfig+0x4e4>)
 800bc26:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2a:	095b      	lsrs	r3, r3, #5
 800bc2c:	f003 020f 	and.w	r2, r3, #15
 800bc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4422      	add	r2, r4
 800bc38:	609a      	str	r2, [r3, #8]
}
 800bc3a:	bf00      	nop
 800bc3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bc40:	46bd      	mov	sp, r7
 800bc42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc46:	bf00      	nop
 800bc48:	51eb851f 	.word	0x51eb851f

0800bc4c <atof>:
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	f001 bb61 	b.w	800d314 <strtod>

0800bc52 <atoi>:
 800bc52:	220a      	movs	r2, #10
 800bc54:	2100      	movs	r1, #0
 800bc56:	f001 bbeb 	b.w	800d430 <strtol>
	...

0800bc5c <__errno>:
 800bc5c:	4b01      	ldr	r3, [pc, #4]	; (800bc64 <__errno+0x8>)
 800bc5e:	6818      	ldr	r0, [r3, #0]
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	2000004c 	.word	0x2000004c

0800bc68 <__libc_init_array>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	4d0d      	ldr	r5, [pc, #52]	; (800bca0 <__libc_init_array+0x38>)
 800bc6c:	4c0d      	ldr	r4, [pc, #52]	; (800bca4 <__libc_init_array+0x3c>)
 800bc6e:	1b64      	subs	r4, r4, r5
 800bc70:	10a4      	asrs	r4, r4, #2
 800bc72:	2600      	movs	r6, #0
 800bc74:	42a6      	cmp	r6, r4
 800bc76:	d109      	bne.n	800bc8c <__libc_init_array+0x24>
 800bc78:	4d0b      	ldr	r5, [pc, #44]	; (800bca8 <__libc_init_array+0x40>)
 800bc7a:	4c0c      	ldr	r4, [pc, #48]	; (800bcac <__libc_init_array+0x44>)
 800bc7c:	f004 fc66 	bl	801054c <_init>
 800bc80:	1b64      	subs	r4, r4, r5
 800bc82:	10a4      	asrs	r4, r4, #2
 800bc84:	2600      	movs	r6, #0
 800bc86:	42a6      	cmp	r6, r4
 800bc88:	d105      	bne.n	800bc96 <__libc_init_array+0x2e>
 800bc8a:	bd70      	pop	{r4, r5, r6, pc}
 800bc8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc90:	4798      	blx	r3
 800bc92:	3601      	adds	r6, #1
 800bc94:	e7ee      	b.n	800bc74 <__libc_init_array+0xc>
 800bc96:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc9a:	4798      	blx	r3
 800bc9c:	3601      	adds	r6, #1
 800bc9e:	e7f2      	b.n	800bc86 <__libc_init_array+0x1e>
 800bca0:	08011f90 	.word	0x08011f90
 800bca4:	08011f90 	.word	0x08011f90
 800bca8:	08011f90 	.word	0x08011f90
 800bcac:	08011f94 	.word	0x08011f94

0800bcb0 <memcpy>:
 800bcb0:	440a      	add	r2, r1
 800bcb2:	4291      	cmp	r1, r2
 800bcb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bcb8:	d100      	bne.n	800bcbc <memcpy+0xc>
 800bcba:	4770      	bx	lr
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc6:	4291      	cmp	r1, r2
 800bcc8:	d1f9      	bne.n	800bcbe <memcpy+0xe>
 800bcca:	bd10      	pop	{r4, pc}

0800bccc <memset>:
 800bccc:	4402      	add	r2, r0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d100      	bne.n	800bcd6 <memset+0xa>
 800bcd4:	4770      	bx	lr
 800bcd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcda:	e7f9      	b.n	800bcd0 <memset+0x4>

0800bcdc <__cvt>:
 800bcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	ec55 4b10 	vmov	r4, r5, d0
 800bce4:	2d00      	cmp	r5, #0
 800bce6:	460e      	mov	r6, r1
 800bce8:	4619      	mov	r1, r3
 800bcea:	462b      	mov	r3, r5
 800bcec:	bfbb      	ittet	lt
 800bcee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcf2:	461d      	movlt	r5, r3
 800bcf4:	2300      	movge	r3, #0
 800bcf6:	232d      	movlt	r3, #45	; 0x2d
 800bcf8:	700b      	strb	r3, [r1, #0]
 800bcfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd00:	4691      	mov	r9, r2
 800bd02:	f023 0820 	bic.w	r8, r3, #32
 800bd06:	bfbc      	itt	lt
 800bd08:	4622      	movlt	r2, r4
 800bd0a:	4614      	movlt	r4, r2
 800bd0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd10:	d005      	beq.n	800bd1e <__cvt+0x42>
 800bd12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd16:	d100      	bne.n	800bd1a <__cvt+0x3e>
 800bd18:	3601      	adds	r6, #1
 800bd1a:	2102      	movs	r1, #2
 800bd1c:	e000      	b.n	800bd20 <__cvt+0x44>
 800bd1e:	2103      	movs	r1, #3
 800bd20:	ab03      	add	r3, sp, #12
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	ab02      	add	r3, sp, #8
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	ec45 4b10 	vmov	d0, r4, r5
 800bd2c:	4653      	mov	r3, sl
 800bd2e:	4632      	mov	r2, r6
 800bd30:	f001 fcd6 	bl	800d6e0 <_dtoa_r>
 800bd34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd38:	4607      	mov	r7, r0
 800bd3a:	d102      	bne.n	800bd42 <__cvt+0x66>
 800bd3c:	f019 0f01 	tst.w	r9, #1
 800bd40:	d022      	beq.n	800bd88 <__cvt+0xac>
 800bd42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd46:	eb07 0906 	add.w	r9, r7, r6
 800bd4a:	d110      	bne.n	800bd6e <__cvt+0x92>
 800bd4c:	783b      	ldrb	r3, [r7, #0]
 800bd4e:	2b30      	cmp	r3, #48	; 0x30
 800bd50:	d10a      	bne.n	800bd68 <__cvt+0x8c>
 800bd52:	2200      	movs	r2, #0
 800bd54:	2300      	movs	r3, #0
 800bd56:	4620      	mov	r0, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	f7f4 fed5 	bl	8000b08 <__aeabi_dcmpeq>
 800bd5e:	b918      	cbnz	r0, 800bd68 <__cvt+0x8c>
 800bd60:	f1c6 0601 	rsb	r6, r6, #1
 800bd64:	f8ca 6000 	str.w	r6, [sl]
 800bd68:	f8da 3000 	ldr.w	r3, [sl]
 800bd6c:	4499      	add	r9, r3
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2300      	movs	r3, #0
 800bd72:	4620      	mov	r0, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	f7f4 fec7 	bl	8000b08 <__aeabi_dcmpeq>
 800bd7a:	b108      	cbz	r0, 800bd80 <__cvt+0xa4>
 800bd7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd80:	2230      	movs	r2, #48	; 0x30
 800bd82:	9b03      	ldr	r3, [sp, #12]
 800bd84:	454b      	cmp	r3, r9
 800bd86:	d307      	bcc.n	800bd98 <__cvt+0xbc>
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd8c:	1bdb      	subs	r3, r3, r7
 800bd8e:	4638      	mov	r0, r7
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	b004      	add	sp, #16
 800bd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd98:	1c59      	adds	r1, r3, #1
 800bd9a:	9103      	str	r1, [sp, #12]
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	e7f0      	b.n	800bd82 <__cvt+0xa6>

0800bda0 <__exponent>:
 800bda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda2:	4603      	mov	r3, r0
 800bda4:	2900      	cmp	r1, #0
 800bda6:	bfb8      	it	lt
 800bda8:	4249      	neglt	r1, r1
 800bdaa:	f803 2b02 	strb.w	r2, [r3], #2
 800bdae:	bfb4      	ite	lt
 800bdb0:	222d      	movlt	r2, #45	; 0x2d
 800bdb2:	222b      	movge	r2, #43	; 0x2b
 800bdb4:	2909      	cmp	r1, #9
 800bdb6:	7042      	strb	r2, [r0, #1]
 800bdb8:	dd2a      	ble.n	800be10 <__exponent+0x70>
 800bdba:	f10d 0407 	add.w	r4, sp, #7
 800bdbe:	46a4      	mov	ip, r4
 800bdc0:	270a      	movs	r7, #10
 800bdc2:	46a6      	mov	lr, r4
 800bdc4:	460a      	mov	r2, r1
 800bdc6:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdca:	fb07 1516 	mls	r5, r7, r6, r1
 800bdce:	3530      	adds	r5, #48	; 0x30
 800bdd0:	2a63      	cmp	r2, #99	; 0x63
 800bdd2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bdd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdda:	4631      	mov	r1, r6
 800bddc:	dcf1      	bgt.n	800bdc2 <__exponent+0x22>
 800bdde:	3130      	adds	r1, #48	; 0x30
 800bde0:	f1ae 0502 	sub.w	r5, lr, #2
 800bde4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bde8:	1c44      	adds	r4, r0, #1
 800bdea:	4629      	mov	r1, r5
 800bdec:	4561      	cmp	r1, ip
 800bdee:	d30a      	bcc.n	800be06 <__exponent+0x66>
 800bdf0:	f10d 0209 	add.w	r2, sp, #9
 800bdf4:	eba2 020e 	sub.w	r2, r2, lr
 800bdf8:	4565      	cmp	r5, ip
 800bdfa:	bf88      	it	hi
 800bdfc:	2200      	movhi	r2, #0
 800bdfe:	4413      	add	r3, r2
 800be00:	1a18      	subs	r0, r3, r0
 800be02:	b003      	add	sp, #12
 800be04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be0e:	e7ed      	b.n	800bdec <__exponent+0x4c>
 800be10:	2330      	movs	r3, #48	; 0x30
 800be12:	3130      	adds	r1, #48	; 0x30
 800be14:	7083      	strb	r3, [r0, #2]
 800be16:	70c1      	strb	r1, [r0, #3]
 800be18:	1d03      	adds	r3, r0, #4
 800be1a:	e7f1      	b.n	800be00 <__exponent+0x60>

0800be1c <_printf_float>:
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	ed2d 8b02 	vpush	{d8}
 800be24:	b08d      	sub	sp, #52	; 0x34
 800be26:	460c      	mov	r4, r1
 800be28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be2c:	4616      	mov	r6, r2
 800be2e:	461f      	mov	r7, r3
 800be30:	4605      	mov	r5, r0
 800be32:	f002 ff69 	bl	800ed08 <_localeconv_r>
 800be36:	f8d0 a000 	ldr.w	sl, [r0]
 800be3a:	4650      	mov	r0, sl
 800be3c:	f7f4 f9e8 	bl	8000210 <strlen>
 800be40:	2300      	movs	r3, #0
 800be42:	930a      	str	r3, [sp, #40]	; 0x28
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	9305      	str	r3, [sp, #20]
 800be48:	f8d8 3000 	ldr.w	r3, [r8]
 800be4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be50:	3307      	adds	r3, #7
 800be52:	f023 0307 	bic.w	r3, r3, #7
 800be56:	f103 0208 	add.w	r2, r3, #8
 800be5a:	f8c8 2000 	str.w	r2, [r8]
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be6e:	9307      	str	r3, [sp, #28]
 800be70:	f8cd 8018 	str.w	r8, [sp, #24]
 800be74:	ee08 0a10 	vmov	s16, r0
 800be78:	4b9f      	ldr	r3, [pc, #636]	; (800c0f8 <_printf_float+0x2dc>)
 800be7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be82:	f7f4 fe73 	bl	8000b6c <__aeabi_dcmpun>
 800be86:	bb88      	cbnz	r0, 800beec <_printf_float+0xd0>
 800be88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be8c:	4b9a      	ldr	r3, [pc, #616]	; (800c0f8 <_printf_float+0x2dc>)
 800be8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be92:	f7f4 fe4d 	bl	8000b30 <__aeabi_dcmple>
 800be96:	bb48      	cbnz	r0, 800beec <_printf_float+0xd0>
 800be98:	2200      	movs	r2, #0
 800be9a:	2300      	movs	r3, #0
 800be9c:	4640      	mov	r0, r8
 800be9e:	4649      	mov	r1, r9
 800bea0:	f7f4 fe3c 	bl	8000b1c <__aeabi_dcmplt>
 800bea4:	b110      	cbz	r0, 800beac <_printf_float+0x90>
 800bea6:	232d      	movs	r3, #45	; 0x2d
 800bea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beac:	4b93      	ldr	r3, [pc, #588]	; (800c0fc <_printf_float+0x2e0>)
 800beae:	4894      	ldr	r0, [pc, #592]	; (800c100 <_printf_float+0x2e4>)
 800beb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800beb4:	bf94      	ite	ls
 800beb6:	4698      	movls	r8, r3
 800beb8:	4680      	movhi	r8, r0
 800beba:	2303      	movs	r3, #3
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	9b05      	ldr	r3, [sp, #20]
 800bec0:	f023 0204 	bic.w	r2, r3, #4
 800bec4:	6022      	str	r2, [r4, #0]
 800bec6:	f04f 0900 	mov.w	r9, #0
 800beca:	9700      	str	r7, [sp, #0]
 800becc:	4633      	mov	r3, r6
 800bece:	aa0b      	add	r2, sp, #44	; 0x2c
 800bed0:	4621      	mov	r1, r4
 800bed2:	4628      	mov	r0, r5
 800bed4:	f000 f9d8 	bl	800c288 <_printf_common>
 800bed8:	3001      	adds	r0, #1
 800beda:	f040 8090 	bne.w	800bffe <_printf_float+0x1e2>
 800bede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bee2:	b00d      	add	sp, #52	; 0x34
 800bee4:	ecbd 8b02 	vpop	{d8}
 800bee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beec:	4642      	mov	r2, r8
 800beee:	464b      	mov	r3, r9
 800bef0:	4640      	mov	r0, r8
 800bef2:	4649      	mov	r1, r9
 800bef4:	f7f4 fe3a 	bl	8000b6c <__aeabi_dcmpun>
 800bef8:	b140      	cbz	r0, 800bf0c <_printf_float+0xf0>
 800befa:	464b      	mov	r3, r9
 800befc:	2b00      	cmp	r3, #0
 800befe:	bfbc      	itt	lt
 800bf00:	232d      	movlt	r3, #45	; 0x2d
 800bf02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf06:	487f      	ldr	r0, [pc, #508]	; (800c104 <_printf_float+0x2e8>)
 800bf08:	4b7f      	ldr	r3, [pc, #508]	; (800c108 <_printf_float+0x2ec>)
 800bf0a:	e7d1      	b.n	800beb0 <_printf_float+0x94>
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf12:	9206      	str	r2, [sp, #24]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	d13f      	bne.n	800bf98 <_printf_float+0x17c>
 800bf18:	2306      	movs	r3, #6
 800bf1a:	6063      	str	r3, [r4, #4]
 800bf1c:	9b05      	ldr	r3, [sp, #20]
 800bf1e:	6861      	ldr	r1, [r4, #4]
 800bf20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf24:	2300      	movs	r3, #0
 800bf26:	9303      	str	r3, [sp, #12]
 800bf28:	ab0a      	add	r3, sp, #40	; 0x28
 800bf2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf2e:	ab09      	add	r3, sp, #36	; 0x24
 800bf30:	ec49 8b10 	vmov	d0, r8, r9
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	6022      	str	r2, [r4, #0]
 800bf38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f7ff fecd 	bl	800bcdc <__cvt>
 800bf42:	9b06      	ldr	r3, [sp, #24]
 800bf44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf46:	2b47      	cmp	r3, #71	; 0x47
 800bf48:	4680      	mov	r8, r0
 800bf4a:	d108      	bne.n	800bf5e <_printf_float+0x142>
 800bf4c:	1cc8      	adds	r0, r1, #3
 800bf4e:	db02      	blt.n	800bf56 <_printf_float+0x13a>
 800bf50:	6863      	ldr	r3, [r4, #4]
 800bf52:	4299      	cmp	r1, r3
 800bf54:	dd41      	ble.n	800bfda <_printf_float+0x1be>
 800bf56:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf5a:	fa5f fb8b 	uxtb.w	fp, fp
 800bf5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf62:	d820      	bhi.n	800bfa6 <_printf_float+0x18a>
 800bf64:	3901      	subs	r1, #1
 800bf66:	465a      	mov	r2, fp
 800bf68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf6c:	9109      	str	r1, [sp, #36]	; 0x24
 800bf6e:	f7ff ff17 	bl	800bda0 <__exponent>
 800bf72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf74:	1813      	adds	r3, r2, r0
 800bf76:	2a01      	cmp	r2, #1
 800bf78:	4681      	mov	r9, r0
 800bf7a:	6123      	str	r3, [r4, #16]
 800bf7c:	dc02      	bgt.n	800bf84 <_printf_float+0x168>
 800bf7e:	6822      	ldr	r2, [r4, #0]
 800bf80:	07d2      	lsls	r2, r2, #31
 800bf82:	d501      	bpl.n	800bf88 <_printf_float+0x16c>
 800bf84:	3301      	adds	r3, #1
 800bf86:	6123      	str	r3, [r4, #16]
 800bf88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d09c      	beq.n	800beca <_printf_float+0xae>
 800bf90:	232d      	movs	r3, #45	; 0x2d
 800bf92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf96:	e798      	b.n	800beca <_printf_float+0xae>
 800bf98:	9a06      	ldr	r2, [sp, #24]
 800bf9a:	2a47      	cmp	r2, #71	; 0x47
 800bf9c:	d1be      	bne.n	800bf1c <_printf_float+0x100>
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1bc      	bne.n	800bf1c <_printf_float+0x100>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e7b9      	b.n	800bf1a <_printf_float+0xfe>
 800bfa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfaa:	d118      	bne.n	800bfde <_printf_float+0x1c2>
 800bfac:	2900      	cmp	r1, #0
 800bfae:	6863      	ldr	r3, [r4, #4]
 800bfb0:	dd0b      	ble.n	800bfca <_printf_float+0x1ae>
 800bfb2:	6121      	str	r1, [r4, #16]
 800bfb4:	b913      	cbnz	r3, 800bfbc <_printf_float+0x1a0>
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	07d0      	lsls	r0, r2, #31
 800bfba:	d502      	bpl.n	800bfc2 <_printf_float+0x1a6>
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	440b      	add	r3, r1
 800bfc0:	6123      	str	r3, [r4, #16]
 800bfc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfc4:	f04f 0900 	mov.w	r9, #0
 800bfc8:	e7de      	b.n	800bf88 <_printf_float+0x16c>
 800bfca:	b913      	cbnz	r3, 800bfd2 <_printf_float+0x1b6>
 800bfcc:	6822      	ldr	r2, [r4, #0]
 800bfce:	07d2      	lsls	r2, r2, #31
 800bfd0:	d501      	bpl.n	800bfd6 <_printf_float+0x1ba>
 800bfd2:	3302      	adds	r3, #2
 800bfd4:	e7f4      	b.n	800bfc0 <_printf_float+0x1a4>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e7f2      	b.n	800bfc0 <_printf_float+0x1a4>
 800bfda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bfde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	db05      	blt.n	800bff0 <_printf_float+0x1d4>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	6121      	str	r1, [r4, #16]
 800bfe8:	07d8      	lsls	r0, r3, #31
 800bfea:	d5ea      	bpl.n	800bfc2 <_printf_float+0x1a6>
 800bfec:	1c4b      	adds	r3, r1, #1
 800bfee:	e7e7      	b.n	800bfc0 <_printf_float+0x1a4>
 800bff0:	2900      	cmp	r1, #0
 800bff2:	bfd4      	ite	le
 800bff4:	f1c1 0202 	rsble	r2, r1, #2
 800bff8:	2201      	movgt	r2, #1
 800bffa:	4413      	add	r3, r2
 800bffc:	e7e0      	b.n	800bfc0 <_printf_float+0x1a4>
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	055a      	lsls	r2, r3, #21
 800c002:	d407      	bmi.n	800c014 <_printf_float+0x1f8>
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	4642      	mov	r2, r8
 800c008:	4631      	mov	r1, r6
 800c00a:	4628      	mov	r0, r5
 800c00c:	47b8      	blx	r7
 800c00e:	3001      	adds	r0, #1
 800c010:	d12c      	bne.n	800c06c <_printf_float+0x250>
 800c012:	e764      	b.n	800bede <_printf_float+0xc2>
 800c014:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c018:	f240 80e0 	bls.w	800c1dc <_printf_float+0x3c0>
 800c01c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c020:	2200      	movs	r2, #0
 800c022:	2300      	movs	r3, #0
 800c024:	f7f4 fd70 	bl	8000b08 <__aeabi_dcmpeq>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d034      	beq.n	800c096 <_printf_float+0x27a>
 800c02c:	4a37      	ldr	r2, [pc, #220]	; (800c10c <_printf_float+0x2f0>)
 800c02e:	2301      	movs	r3, #1
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	f43f af51 	beq.w	800bede <_printf_float+0xc2>
 800c03c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c040:	429a      	cmp	r2, r3
 800c042:	db02      	blt.n	800c04a <_printf_float+0x22e>
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	07d8      	lsls	r0, r3, #31
 800c048:	d510      	bpl.n	800c06c <_printf_float+0x250>
 800c04a:	ee18 3a10 	vmov	r3, s16
 800c04e:	4652      	mov	r2, sl
 800c050:	4631      	mov	r1, r6
 800c052:	4628      	mov	r0, r5
 800c054:	47b8      	blx	r7
 800c056:	3001      	adds	r0, #1
 800c058:	f43f af41 	beq.w	800bede <_printf_float+0xc2>
 800c05c:	f04f 0800 	mov.w	r8, #0
 800c060:	f104 091a 	add.w	r9, r4, #26
 800c064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c066:	3b01      	subs	r3, #1
 800c068:	4543      	cmp	r3, r8
 800c06a:	dc09      	bgt.n	800c080 <_printf_float+0x264>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	079b      	lsls	r3, r3, #30
 800c070:	f100 8105 	bmi.w	800c27e <_printf_float+0x462>
 800c074:	68e0      	ldr	r0, [r4, #12]
 800c076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c078:	4298      	cmp	r0, r3
 800c07a:	bfb8      	it	lt
 800c07c:	4618      	movlt	r0, r3
 800c07e:	e730      	b.n	800bee2 <_printf_float+0xc6>
 800c080:	2301      	movs	r3, #1
 800c082:	464a      	mov	r2, r9
 800c084:	4631      	mov	r1, r6
 800c086:	4628      	mov	r0, r5
 800c088:	47b8      	blx	r7
 800c08a:	3001      	adds	r0, #1
 800c08c:	f43f af27 	beq.w	800bede <_printf_float+0xc2>
 800c090:	f108 0801 	add.w	r8, r8, #1
 800c094:	e7e6      	b.n	800c064 <_printf_float+0x248>
 800c096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dc39      	bgt.n	800c110 <_printf_float+0x2f4>
 800c09c:	4a1b      	ldr	r2, [pc, #108]	; (800c10c <_printf_float+0x2f0>)
 800c09e:	2301      	movs	r3, #1
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af19 	beq.w	800bede <_printf_float+0xc2>
 800c0ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	d102      	bne.n	800c0ba <_printf_float+0x29e>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	07d9      	lsls	r1, r3, #31
 800c0b8:	d5d8      	bpl.n	800c06c <_printf_float+0x250>
 800c0ba:	ee18 3a10 	vmov	r3, s16
 800c0be:	4652      	mov	r2, sl
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b8      	blx	r7
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	f43f af09 	beq.w	800bede <_printf_float+0xc2>
 800c0cc:	f04f 0900 	mov.w	r9, #0
 800c0d0:	f104 0a1a 	add.w	sl, r4, #26
 800c0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d6:	425b      	negs	r3, r3
 800c0d8:	454b      	cmp	r3, r9
 800c0da:	dc01      	bgt.n	800c0e0 <_printf_float+0x2c4>
 800c0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0de:	e792      	b.n	800c006 <_printf_float+0x1ea>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	4652      	mov	r2, sl
 800c0e4:	4631      	mov	r1, r6
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	47b8      	blx	r7
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	f43f aef7 	beq.w	800bede <_printf_float+0xc2>
 800c0f0:	f109 0901 	add.w	r9, r9, #1
 800c0f4:	e7ee      	b.n	800c0d4 <_printf_float+0x2b8>
 800c0f6:	bf00      	nop
 800c0f8:	7fefffff 	.word	0x7fefffff
 800c0fc:	08011aa8 	.word	0x08011aa8
 800c100:	08011aac 	.word	0x08011aac
 800c104:	08011ab4 	.word	0x08011ab4
 800c108:	08011ab0 	.word	0x08011ab0
 800c10c:	08011ab8 	.word	0x08011ab8
 800c110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c114:	429a      	cmp	r2, r3
 800c116:	bfa8      	it	ge
 800c118:	461a      	movge	r2, r3
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	4691      	mov	r9, r2
 800c11e:	dc37      	bgt.n	800c190 <_printf_float+0x374>
 800c120:	f04f 0b00 	mov.w	fp, #0
 800c124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c128:	f104 021a 	add.w	r2, r4, #26
 800c12c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c12e:	9305      	str	r3, [sp, #20]
 800c130:	eba3 0309 	sub.w	r3, r3, r9
 800c134:	455b      	cmp	r3, fp
 800c136:	dc33      	bgt.n	800c1a0 <_printf_float+0x384>
 800c138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c13c:	429a      	cmp	r2, r3
 800c13e:	db3b      	blt.n	800c1b8 <_printf_float+0x39c>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	07da      	lsls	r2, r3, #31
 800c144:	d438      	bmi.n	800c1b8 <_printf_float+0x39c>
 800c146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c148:	9a05      	ldr	r2, [sp, #20]
 800c14a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c14c:	1a9a      	subs	r2, r3, r2
 800c14e:	eba3 0901 	sub.w	r9, r3, r1
 800c152:	4591      	cmp	r9, r2
 800c154:	bfa8      	it	ge
 800c156:	4691      	movge	r9, r2
 800c158:	f1b9 0f00 	cmp.w	r9, #0
 800c15c:	dc35      	bgt.n	800c1ca <_printf_float+0x3ae>
 800c15e:	f04f 0800 	mov.w	r8, #0
 800c162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c166:	f104 0a1a 	add.w	sl, r4, #26
 800c16a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c16e:	1a9b      	subs	r3, r3, r2
 800c170:	eba3 0309 	sub.w	r3, r3, r9
 800c174:	4543      	cmp	r3, r8
 800c176:	f77f af79 	ble.w	800c06c <_printf_float+0x250>
 800c17a:	2301      	movs	r3, #1
 800c17c:	4652      	mov	r2, sl
 800c17e:	4631      	mov	r1, r6
 800c180:	4628      	mov	r0, r5
 800c182:	47b8      	blx	r7
 800c184:	3001      	adds	r0, #1
 800c186:	f43f aeaa 	beq.w	800bede <_printf_float+0xc2>
 800c18a:	f108 0801 	add.w	r8, r8, #1
 800c18e:	e7ec      	b.n	800c16a <_printf_float+0x34e>
 800c190:	4613      	mov	r3, r2
 800c192:	4631      	mov	r1, r6
 800c194:	4642      	mov	r2, r8
 800c196:	4628      	mov	r0, r5
 800c198:	47b8      	blx	r7
 800c19a:	3001      	adds	r0, #1
 800c19c:	d1c0      	bne.n	800c120 <_printf_float+0x304>
 800c19e:	e69e      	b.n	800bede <_printf_float+0xc2>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	9205      	str	r2, [sp, #20]
 800c1a8:	47b8      	blx	r7
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	f43f ae97 	beq.w	800bede <_printf_float+0xc2>
 800c1b0:	9a05      	ldr	r2, [sp, #20]
 800c1b2:	f10b 0b01 	add.w	fp, fp, #1
 800c1b6:	e7b9      	b.n	800c12c <_printf_float+0x310>
 800c1b8:	ee18 3a10 	vmov	r3, s16
 800c1bc:	4652      	mov	r2, sl
 800c1be:	4631      	mov	r1, r6
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	47b8      	blx	r7
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d1be      	bne.n	800c146 <_printf_float+0x32a>
 800c1c8:	e689      	b.n	800bede <_printf_float+0xc2>
 800c1ca:	9a05      	ldr	r2, [sp, #20]
 800c1cc:	464b      	mov	r3, r9
 800c1ce:	4442      	add	r2, r8
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	47b8      	blx	r7
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	d1c1      	bne.n	800c15e <_printf_float+0x342>
 800c1da:	e680      	b.n	800bede <_printf_float+0xc2>
 800c1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1de:	2a01      	cmp	r2, #1
 800c1e0:	dc01      	bgt.n	800c1e6 <_printf_float+0x3ca>
 800c1e2:	07db      	lsls	r3, r3, #31
 800c1e4:	d538      	bpl.n	800c258 <_printf_float+0x43c>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	4642      	mov	r2, r8
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	47b8      	blx	r7
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	f43f ae74 	beq.w	800bede <_printf_float+0xc2>
 800c1f6:	ee18 3a10 	vmov	r3, s16
 800c1fa:	4652      	mov	r2, sl
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f ae6b 	beq.w	800bede <_printf_float+0xc2>
 800c208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c20c:	2200      	movs	r2, #0
 800c20e:	2300      	movs	r3, #0
 800c210:	f7f4 fc7a 	bl	8000b08 <__aeabi_dcmpeq>
 800c214:	b9d8      	cbnz	r0, 800c24e <_printf_float+0x432>
 800c216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c218:	f108 0201 	add.w	r2, r8, #1
 800c21c:	3b01      	subs	r3, #1
 800c21e:	4631      	mov	r1, r6
 800c220:	4628      	mov	r0, r5
 800c222:	47b8      	blx	r7
 800c224:	3001      	adds	r0, #1
 800c226:	d10e      	bne.n	800c246 <_printf_float+0x42a>
 800c228:	e659      	b.n	800bede <_printf_float+0xc2>
 800c22a:	2301      	movs	r3, #1
 800c22c:	4652      	mov	r2, sl
 800c22e:	4631      	mov	r1, r6
 800c230:	4628      	mov	r0, r5
 800c232:	47b8      	blx	r7
 800c234:	3001      	adds	r0, #1
 800c236:	f43f ae52 	beq.w	800bede <_printf_float+0xc2>
 800c23a:	f108 0801 	add.w	r8, r8, #1
 800c23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c240:	3b01      	subs	r3, #1
 800c242:	4543      	cmp	r3, r8
 800c244:	dcf1      	bgt.n	800c22a <_printf_float+0x40e>
 800c246:	464b      	mov	r3, r9
 800c248:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c24c:	e6dc      	b.n	800c008 <_printf_float+0x1ec>
 800c24e:	f04f 0800 	mov.w	r8, #0
 800c252:	f104 0a1a 	add.w	sl, r4, #26
 800c256:	e7f2      	b.n	800c23e <_printf_float+0x422>
 800c258:	2301      	movs	r3, #1
 800c25a:	4642      	mov	r2, r8
 800c25c:	e7df      	b.n	800c21e <_printf_float+0x402>
 800c25e:	2301      	movs	r3, #1
 800c260:	464a      	mov	r2, r9
 800c262:	4631      	mov	r1, r6
 800c264:	4628      	mov	r0, r5
 800c266:	47b8      	blx	r7
 800c268:	3001      	adds	r0, #1
 800c26a:	f43f ae38 	beq.w	800bede <_printf_float+0xc2>
 800c26e:	f108 0801 	add.w	r8, r8, #1
 800c272:	68e3      	ldr	r3, [r4, #12]
 800c274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c276:	1a5b      	subs	r3, r3, r1
 800c278:	4543      	cmp	r3, r8
 800c27a:	dcf0      	bgt.n	800c25e <_printf_float+0x442>
 800c27c:	e6fa      	b.n	800c074 <_printf_float+0x258>
 800c27e:	f04f 0800 	mov.w	r8, #0
 800c282:	f104 0919 	add.w	r9, r4, #25
 800c286:	e7f4      	b.n	800c272 <_printf_float+0x456>

0800c288 <_printf_common>:
 800c288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c28c:	4616      	mov	r6, r2
 800c28e:	4699      	mov	r9, r3
 800c290:	688a      	ldr	r2, [r1, #8]
 800c292:	690b      	ldr	r3, [r1, #16]
 800c294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c298:	4293      	cmp	r3, r2
 800c29a:	bfb8      	it	lt
 800c29c:	4613      	movlt	r3, r2
 800c29e:	6033      	str	r3, [r6, #0]
 800c2a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	b10a      	cbz	r2, 800c2ae <_printf_common+0x26>
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	6033      	str	r3, [r6, #0]
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	0699      	lsls	r1, r3, #26
 800c2b2:	bf42      	ittt	mi
 800c2b4:	6833      	ldrmi	r3, [r6, #0]
 800c2b6:	3302      	addmi	r3, #2
 800c2b8:	6033      	strmi	r3, [r6, #0]
 800c2ba:	6825      	ldr	r5, [r4, #0]
 800c2bc:	f015 0506 	ands.w	r5, r5, #6
 800c2c0:	d106      	bne.n	800c2d0 <_printf_common+0x48>
 800c2c2:	f104 0a19 	add.w	sl, r4, #25
 800c2c6:	68e3      	ldr	r3, [r4, #12]
 800c2c8:	6832      	ldr	r2, [r6, #0]
 800c2ca:	1a9b      	subs	r3, r3, r2
 800c2cc:	42ab      	cmp	r3, r5
 800c2ce:	dc26      	bgt.n	800c31e <_printf_common+0x96>
 800c2d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2d4:	1e13      	subs	r3, r2, #0
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	bf18      	it	ne
 800c2da:	2301      	movne	r3, #1
 800c2dc:	0692      	lsls	r2, r2, #26
 800c2de:	d42b      	bmi.n	800c338 <_printf_common+0xb0>
 800c2e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	4638      	mov	r0, r7
 800c2e8:	47c0      	blx	r8
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	d01e      	beq.n	800c32c <_printf_common+0xa4>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	68e5      	ldr	r5, [r4, #12]
 800c2f2:	6832      	ldr	r2, [r6, #0]
 800c2f4:	f003 0306 	and.w	r3, r3, #6
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	bf08      	it	eq
 800c2fc:	1aad      	subeq	r5, r5, r2
 800c2fe:	68a3      	ldr	r3, [r4, #8]
 800c300:	6922      	ldr	r2, [r4, #16]
 800c302:	bf0c      	ite	eq
 800c304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c308:	2500      	movne	r5, #0
 800c30a:	4293      	cmp	r3, r2
 800c30c:	bfc4      	itt	gt
 800c30e:	1a9b      	subgt	r3, r3, r2
 800c310:	18ed      	addgt	r5, r5, r3
 800c312:	2600      	movs	r6, #0
 800c314:	341a      	adds	r4, #26
 800c316:	42b5      	cmp	r5, r6
 800c318:	d11a      	bne.n	800c350 <_printf_common+0xc8>
 800c31a:	2000      	movs	r0, #0
 800c31c:	e008      	b.n	800c330 <_printf_common+0xa8>
 800c31e:	2301      	movs	r3, #1
 800c320:	4652      	mov	r2, sl
 800c322:	4649      	mov	r1, r9
 800c324:	4638      	mov	r0, r7
 800c326:	47c0      	blx	r8
 800c328:	3001      	adds	r0, #1
 800c32a:	d103      	bne.n	800c334 <_printf_common+0xac>
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c334:	3501      	adds	r5, #1
 800c336:	e7c6      	b.n	800c2c6 <_printf_common+0x3e>
 800c338:	18e1      	adds	r1, r4, r3
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	2030      	movs	r0, #48	; 0x30
 800c33e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c342:	4422      	add	r2, r4
 800c344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c34c:	3302      	adds	r3, #2
 800c34e:	e7c7      	b.n	800c2e0 <_printf_common+0x58>
 800c350:	2301      	movs	r3, #1
 800c352:	4622      	mov	r2, r4
 800c354:	4649      	mov	r1, r9
 800c356:	4638      	mov	r0, r7
 800c358:	47c0      	blx	r8
 800c35a:	3001      	adds	r0, #1
 800c35c:	d0e6      	beq.n	800c32c <_printf_common+0xa4>
 800c35e:	3601      	adds	r6, #1
 800c360:	e7d9      	b.n	800c316 <_printf_common+0x8e>
	...

0800c364 <_printf_i>:
 800c364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c368:	7e0f      	ldrb	r7, [r1, #24]
 800c36a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c36c:	2f78      	cmp	r7, #120	; 0x78
 800c36e:	4691      	mov	r9, r2
 800c370:	4680      	mov	r8, r0
 800c372:	460c      	mov	r4, r1
 800c374:	469a      	mov	sl, r3
 800c376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c37a:	d807      	bhi.n	800c38c <_printf_i+0x28>
 800c37c:	2f62      	cmp	r7, #98	; 0x62
 800c37e:	d80a      	bhi.n	800c396 <_printf_i+0x32>
 800c380:	2f00      	cmp	r7, #0
 800c382:	f000 80d8 	beq.w	800c536 <_printf_i+0x1d2>
 800c386:	2f58      	cmp	r7, #88	; 0x58
 800c388:	f000 80a3 	beq.w	800c4d2 <_printf_i+0x16e>
 800c38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c394:	e03a      	b.n	800c40c <_printf_i+0xa8>
 800c396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c39a:	2b15      	cmp	r3, #21
 800c39c:	d8f6      	bhi.n	800c38c <_printf_i+0x28>
 800c39e:	a101      	add	r1, pc, #4	; (adr r1, 800c3a4 <_printf_i+0x40>)
 800c3a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3a4:	0800c3fd 	.word	0x0800c3fd
 800c3a8:	0800c411 	.word	0x0800c411
 800c3ac:	0800c38d 	.word	0x0800c38d
 800c3b0:	0800c38d 	.word	0x0800c38d
 800c3b4:	0800c38d 	.word	0x0800c38d
 800c3b8:	0800c38d 	.word	0x0800c38d
 800c3bc:	0800c411 	.word	0x0800c411
 800c3c0:	0800c38d 	.word	0x0800c38d
 800c3c4:	0800c38d 	.word	0x0800c38d
 800c3c8:	0800c38d 	.word	0x0800c38d
 800c3cc:	0800c38d 	.word	0x0800c38d
 800c3d0:	0800c51d 	.word	0x0800c51d
 800c3d4:	0800c441 	.word	0x0800c441
 800c3d8:	0800c4ff 	.word	0x0800c4ff
 800c3dc:	0800c38d 	.word	0x0800c38d
 800c3e0:	0800c38d 	.word	0x0800c38d
 800c3e4:	0800c53f 	.word	0x0800c53f
 800c3e8:	0800c38d 	.word	0x0800c38d
 800c3ec:	0800c441 	.word	0x0800c441
 800c3f0:	0800c38d 	.word	0x0800c38d
 800c3f4:	0800c38d 	.word	0x0800c38d
 800c3f8:	0800c507 	.word	0x0800c507
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	1d1a      	adds	r2, r3, #4
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	602a      	str	r2, [r5, #0]
 800c404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c40c:	2301      	movs	r3, #1
 800c40e:	e0a3      	b.n	800c558 <_printf_i+0x1f4>
 800c410:	6820      	ldr	r0, [r4, #0]
 800c412:	6829      	ldr	r1, [r5, #0]
 800c414:	0606      	lsls	r6, r0, #24
 800c416:	f101 0304 	add.w	r3, r1, #4
 800c41a:	d50a      	bpl.n	800c432 <_printf_i+0xce>
 800c41c:	680e      	ldr	r6, [r1, #0]
 800c41e:	602b      	str	r3, [r5, #0]
 800c420:	2e00      	cmp	r6, #0
 800c422:	da03      	bge.n	800c42c <_printf_i+0xc8>
 800c424:	232d      	movs	r3, #45	; 0x2d
 800c426:	4276      	negs	r6, r6
 800c428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c42c:	485e      	ldr	r0, [pc, #376]	; (800c5a8 <_printf_i+0x244>)
 800c42e:	230a      	movs	r3, #10
 800c430:	e019      	b.n	800c466 <_printf_i+0x102>
 800c432:	680e      	ldr	r6, [r1, #0]
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c43a:	bf18      	it	ne
 800c43c:	b236      	sxthne	r6, r6
 800c43e:	e7ef      	b.n	800c420 <_printf_i+0xbc>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	6820      	ldr	r0, [r4, #0]
 800c444:	1d19      	adds	r1, r3, #4
 800c446:	6029      	str	r1, [r5, #0]
 800c448:	0601      	lsls	r1, r0, #24
 800c44a:	d501      	bpl.n	800c450 <_printf_i+0xec>
 800c44c:	681e      	ldr	r6, [r3, #0]
 800c44e:	e002      	b.n	800c456 <_printf_i+0xf2>
 800c450:	0646      	lsls	r6, r0, #25
 800c452:	d5fb      	bpl.n	800c44c <_printf_i+0xe8>
 800c454:	881e      	ldrh	r6, [r3, #0]
 800c456:	4854      	ldr	r0, [pc, #336]	; (800c5a8 <_printf_i+0x244>)
 800c458:	2f6f      	cmp	r7, #111	; 0x6f
 800c45a:	bf0c      	ite	eq
 800c45c:	2308      	moveq	r3, #8
 800c45e:	230a      	movne	r3, #10
 800c460:	2100      	movs	r1, #0
 800c462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c466:	6865      	ldr	r5, [r4, #4]
 800c468:	60a5      	str	r5, [r4, #8]
 800c46a:	2d00      	cmp	r5, #0
 800c46c:	bfa2      	ittt	ge
 800c46e:	6821      	ldrge	r1, [r4, #0]
 800c470:	f021 0104 	bicge.w	r1, r1, #4
 800c474:	6021      	strge	r1, [r4, #0]
 800c476:	b90e      	cbnz	r6, 800c47c <_printf_i+0x118>
 800c478:	2d00      	cmp	r5, #0
 800c47a:	d04d      	beq.n	800c518 <_printf_i+0x1b4>
 800c47c:	4615      	mov	r5, r2
 800c47e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c482:	fb03 6711 	mls	r7, r3, r1, r6
 800c486:	5dc7      	ldrb	r7, [r0, r7]
 800c488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c48c:	4637      	mov	r7, r6
 800c48e:	42bb      	cmp	r3, r7
 800c490:	460e      	mov	r6, r1
 800c492:	d9f4      	bls.n	800c47e <_printf_i+0x11a>
 800c494:	2b08      	cmp	r3, #8
 800c496:	d10b      	bne.n	800c4b0 <_printf_i+0x14c>
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	07de      	lsls	r6, r3, #31
 800c49c:	d508      	bpl.n	800c4b0 <_printf_i+0x14c>
 800c49e:	6923      	ldr	r3, [r4, #16]
 800c4a0:	6861      	ldr	r1, [r4, #4]
 800c4a2:	4299      	cmp	r1, r3
 800c4a4:	bfde      	ittt	le
 800c4a6:	2330      	movle	r3, #48	; 0x30
 800c4a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c4b0:	1b52      	subs	r2, r2, r5
 800c4b2:	6122      	str	r2, [r4, #16]
 800c4b4:	f8cd a000 	str.w	sl, [sp]
 800c4b8:	464b      	mov	r3, r9
 800c4ba:	aa03      	add	r2, sp, #12
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4640      	mov	r0, r8
 800c4c0:	f7ff fee2 	bl	800c288 <_printf_common>
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	d14c      	bne.n	800c562 <_printf_i+0x1fe>
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4cc:	b004      	add	sp, #16
 800c4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d2:	4835      	ldr	r0, [pc, #212]	; (800c5a8 <_printf_i+0x244>)
 800c4d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4d8:	6829      	ldr	r1, [r5, #0]
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4e0:	6029      	str	r1, [r5, #0]
 800c4e2:	061d      	lsls	r5, r3, #24
 800c4e4:	d514      	bpl.n	800c510 <_printf_i+0x1ac>
 800c4e6:	07df      	lsls	r7, r3, #31
 800c4e8:	bf44      	itt	mi
 800c4ea:	f043 0320 	orrmi.w	r3, r3, #32
 800c4ee:	6023      	strmi	r3, [r4, #0]
 800c4f0:	b91e      	cbnz	r6, 800c4fa <_printf_i+0x196>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	f023 0320 	bic.w	r3, r3, #32
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	2310      	movs	r3, #16
 800c4fc:	e7b0      	b.n	800c460 <_printf_i+0xfc>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	f043 0320 	orr.w	r3, r3, #32
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	2378      	movs	r3, #120	; 0x78
 800c508:	4828      	ldr	r0, [pc, #160]	; (800c5ac <_printf_i+0x248>)
 800c50a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c50e:	e7e3      	b.n	800c4d8 <_printf_i+0x174>
 800c510:	0659      	lsls	r1, r3, #25
 800c512:	bf48      	it	mi
 800c514:	b2b6      	uxthmi	r6, r6
 800c516:	e7e6      	b.n	800c4e6 <_printf_i+0x182>
 800c518:	4615      	mov	r5, r2
 800c51a:	e7bb      	b.n	800c494 <_printf_i+0x130>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	6826      	ldr	r6, [r4, #0]
 800c520:	6961      	ldr	r1, [r4, #20]
 800c522:	1d18      	adds	r0, r3, #4
 800c524:	6028      	str	r0, [r5, #0]
 800c526:	0635      	lsls	r5, r6, #24
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	d501      	bpl.n	800c530 <_printf_i+0x1cc>
 800c52c:	6019      	str	r1, [r3, #0]
 800c52e:	e002      	b.n	800c536 <_printf_i+0x1d2>
 800c530:	0670      	lsls	r0, r6, #25
 800c532:	d5fb      	bpl.n	800c52c <_printf_i+0x1c8>
 800c534:	8019      	strh	r1, [r3, #0]
 800c536:	2300      	movs	r3, #0
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	4615      	mov	r5, r2
 800c53c:	e7ba      	b.n	800c4b4 <_printf_i+0x150>
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	1d1a      	adds	r2, r3, #4
 800c542:	602a      	str	r2, [r5, #0]
 800c544:	681d      	ldr	r5, [r3, #0]
 800c546:	6862      	ldr	r2, [r4, #4]
 800c548:	2100      	movs	r1, #0
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7f3 fe68 	bl	8000220 <memchr>
 800c550:	b108      	cbz	r0, 800c556 <_printf_i+0x1f2>
 800c552:	1b40      	subs	r0, r0, r5
 800c554:	6060      	str	r0, [r4, #4]
 800c556:	6863      	ldr	r3, [r4, #4]
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	2300      	movs	r3, #0
 800c55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c560:	e7a8      	b.n	800c4b4 <_printf_i+0x150>
 800c562:	6923      	ldr	r3, [r4, #16]
 800c564:	462a      	mov	r2, r5
 800c566:	4649      	mov	r1, r9
 800c568:	4640      	mov	r0, r8
 800c56a:	47d0      	blx	sl
 800c56c:	3001      	adds	r0, #1
 800c56e:	d0ab      	beq.n	800c4c8 <_printf_i+0x164>
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	079b      	lsls	r3, r3, #30
 800c574:	d413      	bmi.n	800c59e <_printf_i+0x23a>
 800c576:	68e0      	ldr	r0, [r4, #12]
 800c578:	9b03      	ldr	r3, [sp, #12]
 800c57a:	4298      	cmp	r0, r3
 800c57c:	bfb8      	it	lt
 800c57e:	4618      	movlt	r0, r3
 800c580:	e7a4      	b.n	800c4cc <_printf_i+0x168>
 800c582:	2301      	movs	r3, #1
 800c584:	4632      	mov	r2, r6
 800c586:	4649      	mov	r1, r9
 800c588:	4640      	mov	r0, r8
 800c58a:	47d0      	blx	sl
 800c58c:	3001      	adds	r0, #1
 800c58e:	d09b      	beq.n	800c4c8 <_printf_i+0x164>
 800c590:	3501      	adds	r5, #1
 800c592:	68e3      	ldr	r3, [r4, #12]
 800c594:	9903      	ldr	r1, [sp, #12]
 800c596:	1a5b      	subs	r3, r3, r1
 800c598:	42ab      	cmp	r3, r5
 800c59a:	dcf2      	bgt.n	800c582 <_printf_i+0x21e>
 800c59c:	e7eb      	b.n	800c576 <_printf_i+0x212>
 800c59e:	2500      	movs	r5, #0
 800c5a0:	f104 0619 	add.w	r6, r4, #25
 800c5a4:	e7f5      	b.n	800c592 <_printf_i+0x22e>
 800c5a6:	bf00      	nop
 800c5a8:	08011aba 	.word	0x08011aba
 800c5ac:	08011acb 	.word	0x08011acb

0800c5b0 <iprintf>:
 800c5b0:	b40f      	push	{r0, r1, r2, r3}
 800c5b2:	4b0a      	ldr	r3, [pc, #40]	; (800c5dc <iprintf+0x2c>)
 800c5b4:	b513      	push	{r0, r1, r4, lr}
 800c5b6:	681c      	ldr	r4, [r3, #0]
 800c5b8:	b124      	cbz	r4, 800c5c4 <iprintf+0x14>
 800c5ba:	69a3      	ldr	r3, [r4, #24]
 800c5bc:	b913      	cbnz	r3, 800c5c4 <iprintf+0x14>
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f001 ff96 	bl	800e4f0 <__sinit>
 800c5c4:	ab05      	add	r3, sp, #20
 800c5c6:	9a04      	ldr	r2, [sp, #16]
 800c5c8:	68a1      	ldr	r1, [r4, #8]
 800c5ca:	9301      	str	r3, [sp, #4]
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f003 fa03 	bl	800f9d8 <_vfiprintf_r>
 800c5d2:	b002      	add	sp, #8
 800c5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d8:	b004      	add	sp, #16
 800c5da:	4770      	bx	lr
 800c5dc:	2000004c 	.word	0x2000004c

0800c5e0 <_puts_r>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	460e      	mov	r6, r1
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	b118      	cbz	r0, 800c5f0 <_puts_r+0x10>
 800c5e8:	6983      	ldr	r3, [r0, #24]
 800c5ea:	b90b      	cbnz	r3, 800c5f0 <_puts_r+0x10>
 800c5ec:	f001 ff80 	bl	800e4f0 <__sinit>
 800c5f0:	69ab      	ldr	r3, [r5, #24]
 800c5f2:	68ac      	ldr	r4, [r5, #8]
 800c5f4:	b913      	cbnz	r3, 800c5fc <_puts_r+0x1c>
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f001 ff7a 	bl	800e4f0 <__sinit>
 800c5fc:	4b2c      	ldr	r3, [pc, #176]	; (800c6b0 <_puts_r+0xd0>)
 800c5fe:	429c      	cmp	r4, r3
 800c600:	d120      	bne.n	800c644 <_puts_r+0x64>
 800c602:	686c      	ldr	r4, [r5, #4]
 800c604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c606:	07db      	lsls	r3, r3, #31
 800c608:	d405      	bmi.n	800c616 <_puts_r+0x36>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	0598      	lsls	r0, r3, #22
 800c60e:	d402      	bmi.n	800c616 <_puts_r+0x36>
 800c610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c612:	f002 fb7e 	bl	800ed12 <__retarget_lock_acquire_recursive>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	0719      	lsls	r1, r3, #28
 800c61a:	d51d      	bpl.n	800c658 <_puts_r+0x78>
 800c61c:	6923      	ldr	r3, [r4, #16]
 800c61e:	b1db      	cbz	r3, 800c658 <_puts_r+0x78>
 800c620:	3e01      	subs	r6, #1
 800c622:	68a3      	ldr	r3, [r4, #8]
 800c624:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c628:	3b01      	subs	r3, #1
 800c62a:	60a3      	str	r3, [r4, #8]
 800c62c:	bb39      	cbnz	r1, 800c67e <_puts_r+0x9e>
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da38      	bge.n	800c6a4 <_puts_r+0xc4>
 800c632:	4622      	mov	r2, r4
 800c634:	210a      	movs	r1, #10
 800c636:	4628      	mov	r0, r5
 800c638:	f000 ff04 	bl	800d444 <__swbuf_r>
 800c63c:	3001      	adds	r0, #1
 800c63e:	d011      	beq.n	800c664 <_puts_r+0x84>
 800c640:	250a      	movs	r5, #10
 800c642:	e011      	b.n	800c668 <_puts_r+0x88>
 800c644:	4b1b      	ldr	r3, [pc, #108]	; (800c6b4 <_puts_r+0xd4>)
 800c646:	429c      	cmp	r4, r3
 800c648:	d101      	bne.n	800c64e <_puts_r+0x6e>
 800c64a:	68ac      	ldr	r4, [r5, #8]
 800c64c:	e7da      	b.n	800c604 <_puts_r+0x24>
 800c64e:	4b1a      	ldr	r3, [pc, #104]	; (800c6b8 <_puts_r+0xd8>)
 800c650:	429c      	cmp	r4, r3
 800c652:	bf08      	it	eq
 800c654:	68ec      	ldreq	r4, [r5, #12]
 800c656:	e7d5      	b.n	800c604 <_puts_r+0x24>
 800c658:	4621      	mov	r1, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	f000 ff44 	bl	800d4e8 <__swsetup_r>
 800c660:	2800      	cmp	r0, #0
 800c662:	d0dd      	beq.n	800c620 <_puts_r+0x40>
 800c664:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c66a:	07da      	lsls	r2, r3, #31
 800c66c:	d405      	bmi.n	800c67a <_puts_r+0x9a>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	059b      	lsls	r3, r3, #22
 800c672:	d402      	bmi.n	800c67a <_puts_r+0x9a>
 800c674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c676:	f002 fb4d 	bl	800ed14 <__retarget_lock_release_recursive>
 800c67a:	4628      	mov	r0, r5
 800c67c:	bd70      	pop	{r4, r5, r6, pc}
 800c67e:	2b00      	cmp	r3, #0
 800c680:	da04      	bge.n	800c68c <_puts_r+0xac>
 800c682:	69a2      	ldr	r2, [r4, #24]
 800c684:	429a      	cmp	r2, r3
 800c686:	dc06      	bgt.n	800c696 <_puts_r+0xb6>
 800c688:	290a      	cmp	r1, #10
 800c68a:	d004      	beq.n	800c696 <_puts_r+0xb6>
 800c68c:	6823      	ldr	r3, [r4, #0]
 800c68e:	1c5a      	adds	r2, r3, #1
 800c690:	6022      	str	r2, [r4, #0]
 800c692:	7019      	strb	r1, [r3, #0]
 800c694:	e7c5      	b.n	800c622 <_puts_r+0x42>
 800c696:	4622      	mov	r2, r4
 800c698:	4628      	mov	r0, r5
 800c69a:	f000 fed3 	bl	800d444 <__swbuf_r>
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d1bf      	bne.n	800c622 <_puts_r+0x42>
 800c6a2:	e7df      	b.n	800c664 <_puts_r+0x84>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	250a      	movs	r5, #10
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	6022      	str	r2, [r4, #0]
 800c6ac:	701d      	strb	r5, [r3, #0]
 800c6ae:	e7db      	b.n	800c668 <_puts_r+0x88>
 800c6b0:	08011ce4 	.word	0x08011ce4
 800c6b4:	08011d04 	.word	0x08011d04
 800c6b8:	08011cc4 	.word	0x08011cc4

0800c6bc <puts>:
 800c6bc:	4b02      	ldr	r3, [pc, #8]	; (800c6c8 <puts+0xc>)
 800c6be:	4601      	mov	r1, r0
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f7ff bf8d 	b.w	800c5e0 <_puts_r>
 800c6c6:	bf00      	nop
 800c6c8:	2000004c 	.word	0x2000004c

0800c6cc <sulp>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	ec45 4b10 	vmov	d0, r4, r5
 800c6d6:	4616      	mov	r6, r2
 800c6d8:	f002 ff0e 	bl	800f4f8 <__ulp>
 800c6dc:	ec51 0b10 	vmov	r0, r1, d0
 800c6e0:	b17e      	cbz	r6, 800c702 <sulp+0x36>
 800c6e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c6e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	dd09      	ble.n	800c702 <sulp+0x36>
 800c6ee:	051b      	lsls	r3, r3, #20
 800c6f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c6f4:	2400      	movs	r4, #0
 800c6f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	462b      	mov	r3, r5
 800c6fe:	f7f3 ff9b 	bl	8000638 <__aeabi_dmul>
 800c702:	bd70      	pop	{r4, r5, r6, pc}
 800c704:	0000      	movs	r0, r0
	...

0800c708 <_strtod_l>:
 800c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	ed2d 8b02 	vpush	{d8}
 800c710:	b09d      	sub	sp, #116	; 0x74
 800c712:	461f      	mov	r7, r3
 800c714:	2300      	movs	r3, #0
 800c716:	9318      	str	r3, [sp, #96]	; 0x60
 800c718:	4ba2      	ldr	r3, [pc, #648]	; (800c9a4 <_strtod_l+0x29c>)
 800c71a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	9305      	str	r3, [sp, #20]
 800c720:	4604      	mov	r4, r0
 800c722:	4618      	mov	r0, r3
 800c724:	4688      	mov	r8, r1
 800c726:	f7f3 fd73 	bl	8000210 <strlen>
 800c72a:	f04f 0a00 	mov.w	sl, #0
 800c72e:	4605      	mov	r5, r0
 800c730:	f04f 0b00 	mov.w	fp, #0
 800c734:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c73a:	781a      	ldrb	r2, [r3, #0]
 800c73c:	2a2b      	cmp	r2, #43	; 0x2b
 800c73e:	d04e      	beq.n	800c7de <_strtod_l+0xd6>
 800c740:	d83b      	bhi.n	800c7ba <_strtod_l+0xb2>
 800c742:	2a0d      	cmp	r2, #13
 800c744:	d834      	bhi.n	800c7b0 <_strtod_l+0xa8>
 800c746:	2a08      	cmp	r2, #8
 800c748:	d834      	bhi.n	800c7b4 <_strtod_l+0xac>
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	d03e      	beq.n	800c7cc <_strtod_l+0xc4>
 800c74e:	2300      	movs	r3, #0
 800c750:	930a      	str	r3, [sp, #40]	; 0x28
 800c752:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c754:	7833      	ldrb	r3, [r6, #0]
 800c756:	2b30      	cmp	r3, #48	; 0x30
 800c758:	f040 80b0 	bne.w	800c8bc <_strtod_l+0x1b4>
 800c75c:	7873      	ldrb	r3, [r6, #1]
 800c75e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c762:	2b58      	cmp	r3, #88	; 0x58
 800c764:	d168      	bne.n	800c838 <_strtod_l+0x130>
 800c766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	ab18      	add	r3, sp, #96	; 0x60
 800c76c:	9702      	str	r7, [sp, #8]
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	4a8d      	ldr	r2, [pc, #564]	; (800c9a8 <_strtod_l+0x2a0>)
 800c772:	ab19      	add	r3, sp, #100	; 0x64
 800c774:	a917      	add	r1, sp, #92	; 0x5c
 800c776:	4620      	mov	r0, r4
 800c778:	f001 ffbe 	bl	800e6f8 <__gethex>
 800c77c:	f010 0707 	ands.w	r7, r0, #7
 800c780:	4605      	mov	r5, r0
 800c782:	d005      	beq.n	800c790 <_strtod_l+0x88>
 800c784:	2f06      	cmp	r7, #6
 800c786:	d12c      	bne.n	800c7e2 <_strtod_l+0xda>
 800c788:	3601      	adds	r6, #1
 800c78a:	2300      	movs	r3, #0
 800c78c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c78e:	930a      	str	r3, [sp, #40]	; 0x28
 800c790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c792:	2b00      	cmp	r3, #0
 800c794:	f040 8590 	bne.w	800d2b8 <_strtod_l+0xbb0>
 800c798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c79a:	b1eb      	cbz	r3, 800c7d8 <_strtod_l+0xd0>
 800c79c:	4652      	mov	r2, sl
 800c79e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7a2:	ec43 2b10 	vmov	d0, r2, r3
 800c7a6:	b01d      	add	sp, #116	; 0x74
 800c7a8:	ecbd 8b02 	vpop	{d8}
 800c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b0:	2a20      	cmp	r2, #32
 800c7b2:	d1cc      	bne.n	800c74e <_strtod_l+0x46>
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c7b8:	e7be      	b.n	800c738 <_strtod_l+0x30>
 800c7ba:	2a2d      	cmp	r2, #45	; 0x2d
 800c7bc:	d1c7      	bne.n	800c74e <_strtod_l+0x46>
 800c7be:	2201      	movs	r2, #1
 800c7c0:	920a      	str	r2, [sp, #40]	; 0x28
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7c6:	785b      	ldrb	r3, [r3, #1]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1c2      	bne.n	800c752 <_strtod_l+0x4a>
 800c7cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f040 856e 	bne.w	800d2b4 <_strtod_l+0xbac>
 800c7d8:	4652      	mov	r2, sl
 800c7da:	465b      	mov	r3, fp
 800c7dc:	e7e1      	b.n	800c7a2 <_strtod_l+0x9a>
 800c7de:	2200      	movs	r2, #0
 800c7e0:	e7ee      	b.n	800c7c0 <_strtod_l+0xb8>
 800c7e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c7e4:	b13a      	cbz	r2, 800c7f6 <_strtod_l+0xee>
 800c7e6:	2135      	movs	r1, #53	; 0x35
 800c7e8:	a81a      	add	r0, sp, #104	; 0x68
 800c7ea:	f002 ff90 	bl	800f70e <__copybits>
 800c7ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f002 fb4f 	bl	800ee94 <_Bfree>
 800c7f6:	3f01      	subs	r7, #1
 800c7f8:	2f04      	cmp	r7, #4
 800c7fa:	d806      	bhi.n	800c80a <_strtod_l+0x102>
 800c7fc:	e8df f007 	tbb	[pc, r7]
 800c800:	1714030a 	.word	0x1714030a
 800c804:	0a          	.byte	0x0a
 800c805:	00          	.byte	0x00
 800c806:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c80a:	0728      	lsls	r0, r5, #28
 800c80c:	d5c0      	bpl.n	800c790 <_strtod_l+0x88>
 800c80e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c812:	e7bd      	b.n	800c790 <_strtod_l+0x88>
 800c814:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c818:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c81a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c81e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c822:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c826:	e7f0      	b.n	800c80a <_strtod_l+0x102>
 800c828:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c9ac <_strtod_l+0x2a4>
 800c82c:	e7ed      	b.n	800c80a <_strtod_l+0x102>
 800c82e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c832:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c836:	e7e8      	b.n	800c80a <_strtod_l+0x102>
 800c838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c83e:	785b      	ldrb	r3, [r3, #1]
 800c840:	2b30      	cmp	r3, #48	; 0x30
 800c842:	d0f9      	beq.n	800c838 <_strtod_l+0x130>
 800c844:	2b00      	cmp	r3, #0
 800c846:	d0a3      	beq.n	800c790 <_strtod_l+0x88>
 800c848:	2301      	movs	r3, #1
 800c84a:	f04f 0900 	mov.w	r9, #0
 800c84e:	9304      	str	r3, [sp, #16]
 800c850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c852:	9308      	str	r3, [sp, #32]
 800c854:	f8cd 901c 	str.w	r9, [sp, #28]
 800c858:	464f      	mov	r7, r9
 800c85a:	220a      	movs	r2, #10
 800c85c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c85e:	7806      	ldrb	r6, [r0, #0]
 800c860:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c864:	b2d9      	uxtb	r1, r3
 800c866:	2909      	cmp	r1, #9
 800c868:	d92a      	bls.n	800c8c0 <_strtod_l+0x1b8>
 800c86a:	9905      	ldr	r1, [sp, #20]
 800c86c:	462a      	mov	r2, r5
 800c86e:	f003 fa3e 	bl	800fcee <strncmp>
 800c872:	b398      	cbz	r0, 800c8dc <_strtod_l+0x1d4>
 800c874:	2000      	movs	r0, #0
 800c876:	4632      	mov	r2, r6
 800c878:	463d      	mov	r5, r7
 800c87a:	9005      	str	r0, [sp, #20]
 800c87c:	4603      	mov	r3, r0
 800c87e:	2a65      	cmp	r2, #101	; 0x65
 800c880:	d001      	beq.n	800c886 <_strtod_l+0x17e>
 800c882:	2a45      	cmp	r2, #69	; 0x45
 800c884:	d118      	bne.n	800c8b8 <_strtod_l+0x1b0>
 800c886:	b91d      	cbnz	r5, 800c890 <_strtod_l+0x188>
 800c888:	9a04      	ldr	r2, [sp, #16]
 800c88a:	4302      	orrs	r2, r0
 800c88c:	d09e      	beq.n	800c7cc <_strtod_l+0xc4>
 800c88e:	2500      	movs	r5, #0
 800c890:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c894:	f108 0201 	add.w	r2, r8, #1
 800c898:	9217      	str	r2, [sp, #92]	; 0x5c
 800c89a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c89e:	2a2b      	cmp	r2, #43	; 0x2b
 800c8a0:	d075      	beq.n	800c98e <_strtod_l+0x286>
 800c8a2:	2a2d      	cmp	r2, #45	; 0x2d
 800c8a4:	d07b      	beq.n	800c99e <_strtod_l+0x296>
 800c8a6:	f04f 0c00 	mov.w	ip, #0
 800c8aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c8ae:	2909      	cmp	r1, #9
 800c8b0:	f240 8082 	bls.w	800c9b8 <_strtod_l+0x2b0>
 800c8b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c8b8:	2600      	movs	r6, #0
 800c8ba:	e09d      	b.n	800c9f8 <_strtod_l+0x2f0>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e7c4      	b.n	800c84a <_strtod_l+0x142>
 800c8c0:	2f08      	cmp	r7, #8
 800c8c2:	bfd8      	it	le
 800c8c4:	9907      	ldrle	r1, [sp, #28]
 800c8c6:	f100 0001 	add.w	r0, r0, #1
 800c8ca:	bfda      	itte	le
 800c8cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8d0:	9307      	strle	r3, [sp, #28]
 800c8d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c8d6:	3701      	adds	r7, #1
 800c8d8:	9017      	str	r0, [sp, #92]	; 0x5c
 800c8da:	e7bf      	b.n	800c85c <_strtod_l+0x154>
 800c8dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8de:	195a      	adds	r2, r3, r5
 800c8e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8e2:	5d5a      	ldrb	r2, [r3, r5]
 800c8e4:	2f00      	cmp	r7, #0
 800c8e6:	d037      	beq.n	800c958 <_strtod_l+0x250>
 800c8e8:	9005      	str	r0, [sp, #20]
 800c8ea:	463d      	mov	r5, r7
 800c8ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c8f0:	2b09      	cmp	r3, #9
 800c8f2:	d912      	bls.n	800c91a <_strtod_l+0x212>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e7c2      	b.n	800c87e <_strtod_l+0x176>
 800c8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8fe:	785a      	ldrb	r2, [r3, #1]
 800c900:	3001      	adds	r0, #1
 800c902:	2a30      	cmp	r2, #48	; 0x30
 800c904:	d0f8      	beq.n	800c8f8 <_strtod_l+0x1f0>
 800c906:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c90a:	2b08      	cmp	r3, #8
 800c90c:	f200 84d9 	bhi.w	800d2c2 <_strtod_l+0xbba>
 800c910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c912:	9005      	str	r0, [sp, #20]
 800c914:	2000      	movs	r0, #0
 800c916:	9308      	str	r3, [sp, #32]
 800c918:	4605      	mov	r5, r0
 800c91a:	3a30      	subs	r2, #48	; 0x30
 800c91c:	f100 0301 	add.w	r3, r0, #1
 800c920:	d014      	beq.n	800c94c <_strtod_l+0x244>
 800c922:	9905      	ldr	r1, [sp, #20]
 800c924:	4419      	add	r1, r3
 800c926:	9105      	str	r1, [sp, #20]
 800c928:	462b      	mov	r3, r5
 800c92a:	eb00 0e05 	add.w	lr, r0, r5
 800c92e:	210a      	movs	r1, #10
 800c930:	4573      	cmp	r3, lr
 800c932:	d113      	bne.n	800c95c <_strtod_l+0x254>
 800c934:	182b      	adds	r3, r5, r0
 800c936:	2b08      	cmp	r3, #8
 800c938:	f105 0501 	add.w	r5, r5, #1
 800c93c:	4405      	add	r5, r0
 800c93e:	dc1c      	bgt.n	800c97a <_strtod_l+0x272>
 800c940:	9907      	ldr	r1, [sp, #28]
 800c942:	230a      	movs	r3, #10
 800c944:	fb03 2301 	mla	r3, r3, r1, r2
 800c948:	9307      	str	r3, [sp, #28]
 800c94a:	2300      	movs	r3, #0
 800c94c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c94e:	1c51      	adds	r1, r2, #1
 800c950:	9117      	str	r1, [sp, #92]	; 0x5c
 800c952:	7852      	ldrb	r2, [r2, #1]
 800c954:	4618      	mov	r0, r3
 800c956:	e7c9      	b.n	800c8ec <_strtod_l+0x1e4>
 800c958:	4638      	mov	r0, r7
 800c95a:	e7d2      	b.n	800c902 <_strtod_l+0x1fa>
 800c95c:	2b08      	cmp	r3, #8
 800c95e:	dc04      	bgt.n	800c96a <_strtod_l+0x262>
 800c960:	9e07      	ldr	r6, [sp, #28]
 800c962:	434e      	muls	r6, r1
 800c964:	9607      	str	r6, [sp, #28]
 800c966:	3301      	adds	r3, #1
 800c968:	e7e2      	b.n	800c930 <_strtod_l+0x228>
 800c96a:	f103 0c01 	add.w	ip, r3, #1
 800c96e:	f1bc 0f10 	cmp.w	ip, #16
 800c972:	bfd8      	it	le
 800c974:	fb01 f909 	mulle.w	r9, r1, r9
 800c978:	e7f5      	b.n	800c966 <_strtod_l+0x25e>
 800c97a:	2d10      	cmp	r5, #16
 800c97c:	bfdc      	itt	le
 800c97e:	230a      	movle	r3, #10
 800c980:	fb03 2909 	mlale	r9, r3, r9, r2
 800c984:	e7e1      	b.n	800c94a <_strtod_l+0x242>
 800c986:	2300      	movs	r3, #0
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	2301      	movs	r3, #1
 800c98c:	e77c      	b.n	800c888 <_strtod_l+0x180>
 800c98e:	f04f 0c00 	mov.w	ip, #0
 800c992:	f108 0202 	add.w	r2, r8, #2
 800c996:	9217      	str	r2, [sp, #92]	; 0x5c
 800c998:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c99c:	e785      	b.n	800c8aa <_strtod_l+0x1a2>
 800c99e:	f04f 0c01 	mov.w	ip, #1
 800c9a2:	e7f6      	b.n	800c992 <_strtod_l+0x28a>
 800c9a4:	08011d8c 	.word	0x08011d8c
 800c9a8:	08011adc 	.word	0x08011adc
 800c9ac:	7ff00000 	.word	0x7ff00000
 800c9b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9b2:	1c51      	adds	r1, r2, #1
 800c9b4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c9b6:	7852      	ldrb	r2, [r2, #1]
 800c9b8:	2a30      	cmp	r2, #48	; 0x30
 800c9ba:	d0f9      	beq.n	800c9b0 <_strtod_l+0x2a8>
 800c9bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c9c0:	2908      	cmp	r1, #8
 800c9c2:	f63f af79 	bhi.w	800c8b8 <_strtod_l+0x1b0>
 800c9c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c9ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9cc:	9206      	str	r2, [sp, #24]
 800c9ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9d0:	1c51      	adds	r1, r2, #1
 800c9d2:	9117      	str	r1, [sp, #92]	; 0x5c
 800c9d4:	7852      	ldrb	r2, [r2, #1]
 800c9d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c9da:	2e09      	cmp	r6, #9
 800c9dc:	d937      	bls.n	800ca4e <_strtod_l+0x346>
 800c9de:	9e06      	ldr	r6, [sp, #24]
 800c9e0:	1b89      	subs	r1, r1, r6
 800c9e2:	2908      	cmp	r1, #8
 800c9e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c9e8:	dc02      	bgt.n	800c9f0 <_strtod_l+0x2e8>
 800c9ea:	4576      	cmp	r6, lr
 800c9ec:	bfa8      	it	ge
 800c9ee:	4676      	movge	r6, lr
 800c9f0:	f1bc 0f00 	cmp.w	ip, #0
 800c9f4:	d000      	beq.n	800c9f8 <_strtod_l+0x2f0>
 800c9f6:	4276      	negs	r6, r6
 800c9f8:	2d00      	cmp	r5, #0
 800c9fa:	d14d      	bne.n	800ca98 <_strtod_l+0x390>
 800c9fc:	9904      	ldr	r1, [sp, #16]
 800c9fe:	4301      	orrs	r1, r0
 800ca00:	f47f aec6 	bne.w	800c790 <_strtod_l+0x88>
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f47f aee1 	bne.w	800c7cc <_strtod_l+0xc4>
 800ca0a:	2a69      	cmp	r2, #105	; 0x69
 800ca0c:	d027      	beq.n	800ca5e <_strtod_l+0x356>
 800ca0e:	dc24      	bgt.n	800ca5a <_strtod_l+0x352>
 800ca10:	2a49      	cmp	r2, #73	; 0x49
 800ca12:	d024      	beq.n	800ca5e <_strtod_l+0x356>
 800ca14:	2a4e      	cmp	r2, #78	; 0x4e
 800ca16:	f47f aed9 	bne.w	800c7cc <_strtod_l+0xc4>
 800ca1a:	499f      	ldr	r1, [pc, #636]	; (800cc98 <_strtod_l+0x590>)
 800ca1c:	a817      	add	r0, sp, #92	; 0x5c
 800ca1e:	f002 f8c3 	bl	800eba8 <__match>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	f43f aed2 	beq.w	800c7cc <_strtod_l+0xc4>
 800ca28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b28      	cmp	r3, #40	; 0x28
 800ca2e:	d12d      	bne.n	800ca8c <_strtod_l+0x384>
 800ca30:	499a      	ldr	r1, [pc, #616]	; (800cc9c <_strtod_l+0x594>)
 800ca32:	aa1a      	add	r2, sp, #104	; 0x68
 800ca34:	a817      	add	r0, sp, #92	; 0x5c
 800ca36:	f002 f8cb 	bl	800ebd0 <__hexnan>
 800ca3a:	2805      	cmp	r0, #5
 800ca3c:	d126      	bne.n	800ca8c <_strtod_l+0x384>
 800ca3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ca44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ca48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ca4c:	e6a0      	b.n	800c790 <_strtod_l+0x88>
 800ca4e:	210a      	movs	r1, #10
 800ca50:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ca54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ca58:	e7b9      	b.n	800c9ce <_strtod_l+0x2c6>
 800ca5a:	2a6e      	cmp	r2, #110	; 0x6e
 800ca5c:	e7db      	b.n	800ca16 <_strtod_l+0x30e>
 800ca5e:	4990      	ldr	r1, [pc, #576]	; (800cca0 <_strtod_l+0x598>)
 800ca60:	a817      	add	r0, sp, #92	; 0x5c
 800ca62:	f002 f8a1 	bl	800eba8 <__match>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f43f aeb0 	beq.w	800c7cc <_strtod_l+0xc4>
 800ca6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca6e:	498d      	ldr	r1, [pc, #564]	; (800cca4 <_strtod_l+0x59c>)
 800ca70:	3b01      	subs	r3, #1
 800ca72:	a817      	add	r0, sp, #92	; 0x5c
 800ca74:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca76:	f002 f897 	bl	800eba8 <__match>
 800ca7a:	b910      	cbnz	r0, 800ca82 <_strtod_l+0x37a>
 800ca7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca7e:	3301      	adds	r3, #1
 800ca80:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca82:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ccb4 <_strtod_l+0x5ac>
 800ca86:	f04f 0a00 	mov.w	sl, #0
 800ca8a:	e681      	b.n	800c790 <_strtod_l+0x88>
 800ca8c:	4886      	ldr	r0, [pc, #536]	; (800cca8 <_strtod_l+0x5a0>)
 800ca8e:	f003 f8d3 	bl	800fc38 <nan>
 800ca92:	ec5b ab10 	vmov	sl, fp, d0
 800ca96:	e67b      	b.n	800c790 <_strtod_l+0x88>
 800ca98:	9b05      	ldr	r3, [sp, #20]
 800ca9a:	9807      	ldr	r0, [sp, #28]
 800ca9c:	1af3      	subs	r3, r6, r3
 800ca9e:	2f00      	cmp	r7, #0
 800caa0:	bf08      	it	eq
 800caa2:	462f      	moveq	r7, r5
 800caa4:	2d10      	cmp	r5, #16
 800caa6:	9306      	str	r3, [sp, #24]
 800caa8:	46a8      	mov	r8, r5
 800caaa:	bfa8      	it	ge
 800caac:	f04f 0810 	movge.w	r8, #16
 800cab0:	f7f3 fd48 	bl	8000544 <__aeabi_ui2d>
 800cab4:	2d09      	cmp	r5, #9
 800cab6:	4682      	mov	sl, r0
 800cab8:	468b      	mov	fp, r1
 800caba:	dd13      	ble.n	800cae4 <_strtod_l+0x3dc>
 800cabc:	4b7b      	ldr	r3, [pc, #492]	; (800ccac <_strtod_l+0x5a4>)
 800cabe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cac2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cac6:	f7f3 fdb7 	bl	8000638 <__aeabi_dmul>
 800caca:	4682      	mov	sl, r0
 800cacc:	4648      	mov	r0, r9
 800cace:	468b      	mov	fp, r1
 800cad0:	f7f3 fd38 	bl	8000544 <__aeabi_ui2d>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4650      	mov	r0, sl
 800cada:	4659      	mov	r1, fp
 800cadc:	f7f3 fbf6 	bl	80002cc <__adddf3>
 800cae0:	4682      	mov	sl, r0
 800cae2:	468b      	mov	fp, r1
 800cae4:	2d0f      	cmp	r5, #15
 800cae6:	dc38      	bgt.n	800cb5a <_strtod_l+0x452>
 800cae8:	9b06      	ldr	r3, [sp, #24]
 800caea:	2b00      	cmp	r3, #0
 800caec:	f43f ae50 	beq.w	800c790 <_strtod_l+0x88>
 800caf0:	dd24      	ble.n	800cb3c <_strtod_l+0x434>
 800caf2:	2b16      	cmp	r3, #22
 800caf4:	dc0b      	bgt.n	800cb0e <_strtod_l+0x406>
 800caf6:	496d      	ldr	r1, [pc, #436]	; (800ccac <_strtod_l+0x5a4>)
 800caf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb00:	4652      	mov	r2, sl
 800cb02:	465b      	mov	r3, fp
 800cb04:	f7f3 fd98 	bl	8000638 <__aeabi_dmul>
 800cb08:	4682      	mov	sl, r0
 800cb0a:	468b      	mov	fp, r1
 800cb0c:	e640      	b.n	800c790 <_strtod_l+0x88>
 800cb0e:	9a06      	ldr	r2, [sp, #24]
 800cb10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cb14:	4293      	cmp	r3, r2
 800cb16:	db20      	blt.n	800cb5a <_strtod_l+0x452>
 800cb18:	4c64      	ldr	r4, [pc, #400]	; (800ccac <_strtod_l+0x5a4>)
 800cb1a:	f1c5 050f 	rsb	r5, r5, #15
 800cb1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb22:	4652      	mov	r2, sl
 800cb24:	465b      	mov	r3, fp
 800cb26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb2a:	f7f3 fd85 	bl	8000638 <__aeabi_dmul>
 800cb2e:	9b06      	ldr	r3, [sp, #24]
 800cb30:	1b5d      	subs	r5, r3, r5
 800cb32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb3a:	e7e3      	b.n	800cb04 <_strtod_l+0x3fc>
 800cb3c:	9b06      	ldr	r3, [sp, #24]
 800cb3e:	3316      	adds	r3, #22
 800cb40:	db0b      	blt.n	800cb5a <_strtod_l+0x452>
 800cb42:	9b05      	ldr	r3, [sp, #20]
 800cb44:	1b9e      	subs	r6, r3, r6
 800cb46:	4b59      	ldr	r3, [pc, #356]	; (800ccac <_strtod_l+0x5a4>)
 800cb48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cb4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb50:	4650      	mov	r0, sl
 800cb52:	4659      	mov	r1, fp
 800cb54:	f7f3 fe9a 	bl	800088c <__aeabi_ddiv>
 800cb58:	e7d6      	b.n	800cb08 <_strtod_l+0x400>
 800cb5a:	9b06      	ldr	r3, [sp, #24]
 800cb5c:	eba5 0808 	sub.w	r8, r5, r8
 800cb60:	4498      	add	r8, r3
 800cb62:	f1b8 0f00 	cmp.w	r8, #0
 800cb66:	dd74      	ble.n	800cc52 <_strtod_l+0x54a>
 800cb68:	f018 030f 	ands.w	r3, r8, #15
 800cb6c:	d00a      	beq.n	800cb84 <_strtod_l+0x47c>
 800cb6e:	494f      	ldr	r1, [pc, #316]	; (800ccac <_strtod_l+0x5a4>)
 800cb70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb74:	4652      	mov	r2, sl
 800cb76:	465b      	mov	r3, fp
 800cb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb7c:	f7f3 fd5c 	bl	8000638 <__aeabi_dmul>
 800cb80:	4682      	mov	sl, r0
 800cb82:	468b      	mov	fp, r1
 800cb84:	f038 080f 	bics.w	r8, r8, #15
 800cb88:	d04f      	beq.n	800cc2a <_strtod_l+0x522>
 800cb8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cb8e:	dd22      	ble.n	800cbd6 <_strtod_l+0x4ce>
 800cb90:	2500      	movs	r5, #0
 800cb92:	462e      	mov	r6, r5
 800cb94:	9507      	str	r5, [sp, #28]
 800cb96:	9505      	str	r5, [sp, #20]
 800cb98:	2322      	movs	r3, #34	; 0x22
 800cb9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ccb4 <_strtod_l+0x5ac>
 800cb9e:	6023      	str	r3, [r4, #0]
 800cba0:	f04f 0a00 	mov.w	sl, #0
 800cba4:	9b07      	ldr	r3, [sp, #28]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f43f adf2 	beq.w	800c790 <_strtod_l+0x88>
 800cbac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f002 f970 	bl	800ee94 <_Bfree>
 800cbb4:	9905      	ldr	r1, [sp, #20]
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f002 f96c 	bl	800ee94 <_Bfree>
 800cbbc:	4631      	mov	r1, r6
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f002 f968 	bl	800ee94 <_Bfree>
 800cbc4:	9907      	ldr	r1, [sp, #28]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f002 f964 	bl	800ee94 <_Bfree>
 800cbcc:	4629      	mov	r1, r5
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f002 f960 	bl	800ee94 <_Bfree>
 800cbd4:	e5dc      	b.n	800c790 <_strtod_l+0x88>
 800cbd6:	4b36      	ldr	r3, [pc, #216]	; (800ccb0 <_strtod_l+0x5a8>)
 800cbd8:	9304      	str	r3, [sp, #16]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	4659      	mov	r1, fp
 800cbe4:	4699      	mov	r9, r3
 800cbe6:	f1b8 0f01 	cmp.w	r8, #1
 800cbea:	dc21      	bgt.n	800cc30 <_strtod_l+0x528>
 800cbec:	b10b      	cbz	r3, 800cbf2 <_strtod_l+0x4ea>
 800cbee:	4682      	mov	sl, r0
 800cbf0:	468b      	mov	fp, r1
 800cbf2:	4b2f      	ldr	r3, [pc, #188]	; (800ccb0 <_strtod_l+0x5a8>)
 800cbf4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cbf8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cbfc:	4652      	mov	r2, sl
 800cbfe:	465b      	mov	r3, fp
 800cc00:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cc04:	f7f3 fd18 	bl	8000638 <__aeabi_dmul>
 800cc08:	4b2a      	ldr	r3, [pc, #168]	; (800ccb4 <_strtod_l+0x5ac>)
 800cc0a:	460a      	mov	r2, r1
 800cc0c:	400b      	ands	r3, r1
 800cc0e:	492a      	ldr	r1, [pc, #168]	; (800ccb8 <_strtod_l+0x5b0>)
 800cc10:	428b      	cmp	r3, r1
 800cc12:	4682      	mov	sl, r0
 800cc14:	d8bc      	bhi.n	800cb90 <_strtod_l+0x488>
 800cc16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc1a:	428b      	cmp	r3, r1
 800cc1c:	bf86      	itte	hi
 800cc1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ccbc <_strtod_l+0x5b4>
 800cc22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800cc26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9304      	str	r3, [sp, #16]
 800cc2e:	e084      	b.n	800cd3a <_strtod_l+0x632>
 800cc30:	f018 0f01 	tst.w	r8, #1
 800cc34:	d005      	beq.n	800cc42 <_strtod_l+0x53a>
 800cc36:	9b04      	ldr	r3, [sp, #16]
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f7f3 fcfc 	bl	8000638 <__aeabi_dmul>
 800cc40:	2301      	movs	r3, #1
 800cc42:	9a04      	ldr	r2, [sp, #16]
 800cc44:	3208      	adds	r2, #8
 800cc46:	f109 0901 	add.w	r9, r9, #1
 800cc4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cc4e:	9204      	str	r2, [sp, #16]
 800cc50:	e7c9      	b.n	800cbe6 <_strtod_l+0x4de>
 800cc52:	d0ea      	beq.n	800cc2a <_strtod_l+0x522>
 800cc54:	f1c8 0800 	rsb	r8, r8, #0
 800cc58:	f018 020f 	ands.w	r2, r8, #15
 800cc5c:	d00a      	beq.n	800cc74 <_strtod_l+0x56c>
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <_strtod_l+0x5a4>)
 800cc60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc64:	4650      	mov	r0, sl
 800cc66:	4659      	mov	r1, fp
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7f3 fe0e 	bl	800088c <__aeabi_ddiv>
 800cc70:	4682      	mov	sl, r0
 800cc72:	468b      	mov	fp, r1
 800cc74:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cc78:	d0d7      	beq.n	800cc2a <_strtod_l+0x522>
 800cc7a:	f1b8 0f1f 	cmp.w	r8, #31
 800cc7e:	dd1f      	ble.n	800ccc0 <_strtod_l+0x5b8>
 800cc80:	2500      	movs	r5, #0
 800cc82:	462e      	mov	r6, r5
 800cc84:	9507      	str	r5, [sp, #28]
 800cc86:	9505      	str	r5, [sp, #20]
 800cc88:	2322      	movs	r3, #34	; 0x22
 800cc8a:	f04f 0a00 	mov.w	sl, #0
 800cc8e:	f04f 0b00 	mov.w	fp, #0
 800cc92:	6023      	str	r3, [r4, #0]
 800cc94:	e786      	b.n	800cba4 <_strtod_l+0x49c>
 800cc96:	bf00      	nop
 800cc98:	08011ab5 	.word	0x08011ab5
 800cc9c:	08011af0 	.word	0x08011af0
 800cca0:	08011aad 	.word	0x08011aad
 800cca4:	08011c34 	.word	0x08011c34
 800cca8:	08011f48 	.word	0x08011f48
 800ccac:	08011e28 	.word	0x08011e28
 800ccb0:	08011e00 	.word	0x08011e00
 800ccb4:	7ff00000 	.word	0x7ff00000
 800ccb8:	7ca00000 	.word	0x7ca00000
 800ccbc:	7fefffff 	.word	0x7fefffff
 800ccc0:	f018 0310 	ands.w	r3, r8, #16
 800ccc4:	bf18      	it	ne
 800ccc6:	236a      	movne	r3, #106	; 0x6a
 800ccc8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d078 <_strtod_l+0x970>
 800cccc:	9304      	str	r3, [sp, #16]
 800ccce:	4650      	mov	r0, sl
 800ccd0:	4659      	mov	r1, fp
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	f018 0f01 	tst.w	r8, #1
 800ccd8:	d004      	beq.n	800cce4 <_strtod_l+0x5dc>
 800ccda:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ccde:	f7f3 fcab 	bl	8000638 <__aeabi_dmul>
 800cce2:	2301      	movs	r3, #1
 800cce4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cce8:	f109 0908 	add.w	r9, r9, #8
 800ccec:	d1f2      	bne.n	800ccd4 <_strtod_l+0x5cc>
 800ccee:	b10b      	cbz	r3, 800ccf4 <_strtod_l+0x5ec>
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	468b      	mov	fp, r1
 800ccf4:	9b04      	ldr	r3, [sp, #16]
 800ccf6:	b1c3      	cbz	r3, 800cd2a <_strtod_l+0x622>
 800ccf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ccfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	4659      	mov	r1, fp
 800cd04:	dd11      	ble.n	800cd2a <_strtod_l+0x622>
 800cd06:	2b1f      	cmp	r3, #31
 800cd08:	f340 8124 	ble.w	800cf54 <_strtod_l+0x84c>
 800cd0c:	2b34      	cmp	r3, #52	; 0x34
 800cd0e:	bfde      	ittt	le
 800cd10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cd14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800cd18:	fa03 f202 	lslle.w	r2, r3, r2
 800cd1c:	f04f 0a00 	mov.w	sl, #0
 800cd20:	bfcc      	ite	gt
 800cd22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cd26:	ea02 0b01 	andle.w	fp, r2, r1
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4650      	mov	r0, sl
 800cd30:	4659      	mov	r1, fp
 800cd32:	f7f3 fee9 	bl	8000b08 <__aeabi_dcmpeq>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d1a2      	bne.n	800cc80 <_strtod_l+0x578>
 800cd3a:	9b07      	ldr	r3, [sp, #28]
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	9908      	ldr	r1, [sp, #32]
 800cd40:	462b      	mov	r3, r5
 800cd42:	463a      	mov	r2, r7
 800cd44:	4620      	mov	r0, r4
 800cd46:	f002 f90d 	bl	800ef64 <__s2b>
 800cd4a:	9007      	str	r0, [sp, #28]
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f43f af1f 	beq.w	800cb90 <_strtod_l+0x488>
 800cd52:	9b05      	ldr	r3, [sp, #20]
 800cd54:	1b9e      	subs	r6, r3, r6
 800cd56:	9b06      	ldr	r3, [sp, #24]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfb4      	ite	lt
 800cd5c:	4633      	movlt	r3, r6
 800cd5e:	2300      	movge	r3, #0
 800cd60:	930c      	str	r3, [sp, #48]	; 0x30
 800cd62:	9b06      	ldr	r3, [sp, #24]
 800cd64:	2500      	movs	r5, #0
 800cd66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd6a:	9312      	str	r3, [sp, #72]	; 0x48
 800cd6c:	462e      	mov	r6, r5
 800cd6e:	9b07      	ldr	r3, [sp, #28]
 800cd70:	4620      	mov	r0, r4
 800cd72:	6859      	ldr	r1, [r3, #4]
 800cd74:	f002 f84e 	bl	800ee14 <_Balloc>
 800cd78:	9005      	str	r0, [sp, #20]
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	f43f af0c 	beq.w	800cb98 <_strtod_l+0x490>
 800cd80:	9b07      	ldr	r3, [sp, #28]
 800cd82:	691a      	ldr	r2, [r3, #16]
 800cd84:	3202      	adds	r2, #2
 800cd86:	f103 010c 	add.w	r1, r3, #12
 800cd8a:	0092      	lsls	r2, r2, #2
 800cd8c:	300c      	adds	r0, #12
 800cd8e:	f7fe ff8f 	bl	800bcb0 <memcpy>
 800cd92:	ec4b ab10 	vmov	d0, sl, fp
 800cd96:	aa1a      	add	r2, sp, #104	; 0x68
 800cd98:	a919      	add	r1, sp, #100	; 0x64
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f002 fc28 	bl	800f5f0 <__d2b>
 800cda0:	ec4b ab18 	vmov	d8, sl, fp
 800cda4:	9018      	str	r0, [sp, #96]	; 0x60
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f43f aef6 	beq.w	800cb98 <_strtod_l+0x490>
 800cdac:	2101      	movs	r1, #1
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f002 f972 	bl	800f098 <__i2b>
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	f43f aeee 	beq.w	800cb98 <_strtod_l+0x490>
 800cdbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdbe:	9904      	ldr	r1, [sp, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	bfab      	itete	ge
 800cdc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cdc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cdc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cdca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cdce:	bfac      	ite	ge
 800cdd0:	eb03 0902 	addge.w	r9, r3, r2
 800cdd4:	1ad7      	sublt	r7, r2, r3
 800cdd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cdd8:	eba3 0801 	sub.w	r8, r3, r1
 800cddc:	4490      	add	r8, r2
 800cdde:	4ba1      	ldr	r3, [pc, #644]	; (800d064 <_strtod_l+0x95c>)
 800cde0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cde4:	4598      	cmp	r8, r3
 800cde6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cdea:	f280 80c7 	bge.w	800cf7c <_strtod_l+0x874>
 800cdee:	eba3 0308 	sub.w	r3, r3, r8
 800cdf2:	2b1f      	cmp	r3, #31
 800cdf4:	eba2 0203 	sub.w	r2, r2, r3
 800cdf8:	f04f 0101 	mov.w	r1, #1
 800cdfc:	f300 80b1 	bgt.w	800cf62 <_strtod_l+0x85a>
 800ce00:	fa01 f303 	lsl.w	r3, r1, r3
 800ce04:	930d      	str	r3, [sp, #52]	; 0x34
 800ce06:	2300      	movs	r3, #0
 800ce08:	9308      	str	r3, [sp, #32]
 800ce0a:	eb09 0802 	add.w	r8, r9, r2
 800ce0e:	9b04      	ldr	r3, [sp, #16]
 800ce10:	45c1      	cmp	r9, r8
 800ce12:	4417      	add	r7, r2
 800ce14:	441f      	add	r7, r3
 800ce16:	464b      	mov	r3, r9
 800ce18:	bfa8      	it	ge
 800ce1a:	4643      	movge	r3, r8
 800ce1c:	42bb      	cmp	r3, r7
 800ce1e:	bfa8      	it	ge
 800ce20:	463b      	movge	r3, r7
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bfc2      	ittt	gt
 800ce26:	eba8 0803 	subgt.w	r8, r8, r3
 800ce2a:	1aff      	subgt	r7, r7, r3
 800ce2c:	eba9 0903 	subgt.w	r9, r9, r3
 800ce30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dd17      	ble.n	800ce66 <_strtod_l+0x75e>
 800ce36:	4631      	mov	r1, r6
 800ce38:	461a      	mov	r2, r3
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f002 f9ec 	bl	800f218 <__pow5mult>
 800ce40:	4606      	mov	r6, r0
 800ce42:	2800      	cmp	r0, #0
 800ce44:	f43f aea8 	beq.w	800cb98 <_strtod_l+0x490>
 800ce48:	4601      	mov	r1, r0
 800ce4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f002 f939 	bl	800f0c4 <__multiply>
 800ce52:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce54:	2800      	cmp	r0, #0
 800ce56:	f43f ae9f 	beq.w	800cb98 <_strtod_l+0x490>
 800ce5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f002 f819 	bl	800ee94 <_Bfree>
 800ce62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce64:	9318      	str	r3, [sp, #96]	; 0x60
 800ce66:	f1b8 0f00 	cmp.w	r8, #0
 800ce6a:	f300 808c 	bgt.w	800cf86 <_strtod_l+0x87e>
 800ce6e:	9b06      	ldr	r3, [sp, #24]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	dd08      	ble.n	800ce86 <_strtod_l+0x77e>
 800ce74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce76:	9905      	ldr	r1, [sp, #20]
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f002 f9cd 	bl	800f218 <__pow5mult>
 800ce7e:	9005      	str	r0, [sp, #20]
 800ce80:	2800      	cmp	r0, #0
 800ce82:	f43f ae89 	beq.w	800cb98 <_strtod_l+0x490>
 800ce86:	2f00      	cmp	r7, #0
 800ce88:	dd08      	ble.n	800ce9c <_strtod_l+0x794>
 800ce8a:	9905      	ldr	r1, [sp, #20]
 800ce8c:	463a      	mov	r2, r7
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f002 fa1c 	bl	800f2cc <__lshift>
 800ce94:	9005      	str	r0, [sp, #20]
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f43f ae7e 	beq.w	800cb98 <_strtod_l+0x490>
 800ce9c:	f1b9 0f00 	cmp.w	r9, #0
 800cea0:	dd08      	ble.n	800ceb4 <_strtod_l+0x7ac>
 800cea2:	4631      	mov	r1, r6
 800cea4:	464a      	mov	r2, r9
 800cea6:	4620      	mov	r0, r4
 800cea8:	f002 fa10 	bl	800f2cc <__lshift>
 800ceac:	4606      	mov	r6, r0
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	f43f ae72 	beq.w	800cb98 <_strtod_l+0x490>
 800ceb4:	9a05      	ldr	r2, [sp, #20]
 800ceb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f002 fa93 	bl	800f3e4 <__mdiff>
 800cebe:	4605      	mov	r5, r0
 800cec0:	2800      	cmp	r0, #0
 800cec2:	f43f ae69 	beq.w	800cb98 <_strtod_l+0x490>
 800cec6:	68c3      	ldr	r3, [r0, #12]
 800cec8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceca:	2300      	movs	r3, #0
 800cecc:	60c3      	str	r3, [r0, #12]
 800cece:	4631      	mov	r1, r6
 800ced0:	f002 fa6c 	bl	800f3ac <__mcmp>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	da60      	bge.n	800cf9a <_strtod_l+0x892>
 800ced8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceda:	ea53 030a 	orrs.w	r3, r3, sl
 800cede:	f040 8082 	bne.w	800cfe6 <_strtod_l+0x8de>
 800cee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d17d      	bne.n	800cfe6 <_strtod_l+0x8de>
 800ceea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ceee:	0d1b      	lsrs	r3, r3, #20
 800cef0:	051b      	lsls	r3, r3, #20
 800cef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cef6:	d976      	bls.n	800cfe6 <_strtod_l+0x8de>
 800cef8:	696b      	ldr	r3, [r5, #20]
 800cefa:	b913      	cbnz	r3, 800cf02 <_strtod_l+0x7fa>
 800cefc:	692b      	ldr	r3, [r5, #16]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	dd71      	ble.n	800cfe6 <_strtod_l+0x8de>
 800cf02:	4629      	mov	r1, r5
 800cf04:	2201      	movs	r2, #1
 800cf06:	4620      	mov	r0, r4
 800cf08:	f002 f9e0 	bl	800f2cc <__lshift>
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	4605      	mov	r5, r0
 800cf10:	f002 fa4c 	bl	800f3ac <__mcmp>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	dd66      	ble.n	800cfe6 <_strtod_l+0x8de>
 800cf18:	9904      	ldr	r1, [sp, #16]
 800cf1a:	4a53      	ldr	r2, [pc, #332]	; (800d068 <_strtod_l+0x960>)
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	2900      	cmp	r1, #0
 800cf20:	f000 8081 	beq.w	800d026 <_strtod_l+0x91e>
 800cf24:	ea02 010b 	and.w	r1, r2, fp
 800cf28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cf2c:	dc7b      	bgt.n	800d026 <_strtod_l+0x91e>
 800cf2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf32:	f77f aea9 	ble.w	800cc88 <_strtod_l+0x580>
 800cf36:	4b4d      	ldr	r3, [pc, #308]	; (800d06c <_strtod_l+0x964>)
 800cf38:	4650      	mov	r0, sl
 800cf3a:	4659      	mov	r1, fp
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f7f3 fb7b 	bl	8000638 <__aeabi_dmul>
 800cf42:	460b      	mov	r3, r1
 800cf44:	4303      	orrs	r3, r0
 800cf46:	bf08      	it	eq
 800cf48:	2322      	moveq	r3, #34	; 0x22
 800cf4a:	4682      	mov	sl, r0
 800cf4c:	468b      	mov	fp, r1
 800cf4e:	bf08      	it	eq
 800cf50:	6023      	streq	r3, [r4, #0]
 800cf52:	e62b      	b.n	800cbac <_strtod_l+0x4a4>
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf58:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5c:	ea03 0a0a 	and.w	sl, r3, sl
 800cf60:	e6e3      	b.n	800cd2a <_strtod_l+0x622>
 800cf62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cf66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cf6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cf6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cf72:	fa01 f308 	lsl.w	r3, r1, r8
 800cf76:	9308      	str	r3, [sp, #32]
 800cf78:	910d      	str	r1, [sp, #52]	; 0x34
 800cf7a:	e746      	b.n	800ce0a <_strtod_l+0x702>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	9308      	str	r3, [sp, #32]
 800cf80:	2301      	movs	r3, #1
 800cf82:	930d      	str	r3, [sp, #52]	; 0x34
 800cf84:	e741      	b.n	800ce0a <_strtod_l+0x702>
 800cf86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf88:	4642      	mov	r2, r8
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f002 f99e 	bl	800f2cc <__lshift>
 800cf90:	9018      	str	r0, [sp, #96]	; 0x60
 800cf92:	2800      	cmp	r0, #0
 800cf94:	f47f af6b 	bne.w	800ce6e <_strtod_l+0x766>
 800cf98:	e5fe      	b.n	800cb98 <_strtod_l+0x490>
 800cf9a:	465f      	mov	r7, fp
 800cf9c:	d16e      	bne.n	800d07c <_strtod_l+0x974>
 800cf9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfa4:	b342      	cbz	r2, 800cff8 <_strtod_l+0x8f0>
 800cfa6:	4a32      	ldr	r2, [pc, #200]	; (800d070 <_strtod_l+0x968>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d128      	bne.n	800cffe <_strtod_l+0x8f6>
 800cfac:	9b04      	ldr	r3, [sp, #16]
 800cfae:	4651      	mov	r1, sl
 800cfb0:	b1eb      	cbz	r3, 800cfee <_strtod_l+0x8e6>
 800cfb2:	4b2d      	ldr	r3, [pc, #180]	; (800d068 <_strtod_l+0x960>)
 800cfb4:	403b      	ands	r3, r7
 800cfb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cfba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfbe:	d819      	bhi.n	800cff4 <_strtod_l+0x8ec>
 800cfc0:	0d1b      	lsrs	r3, r3, #20
 800cfc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfca:	4299      	cmp	r1, r3
 800cfcc:	d117      	bne.n	800cffe <_strtod_l+0x8f6>
 800cfce:	4b29      	ldr	r3, [pc, #164]	; (800d074 <_strtod_l+0x96c>)
 800cfd0:	429f      	cmp	r7, r3
 800cfd2:	d102      	bne.n	800cfda <_strtod_l+0x8d2>
 800cfd4:	3101      	adds	r1, #1
 800cfd6:	f43f addf 	beq.w	800cb98 <_strtod_l+0x490>
 800cfda:	4b23      	ldr	r3, [pc, #140]	; (800d068 <_strtod_l+0x960>)
 800cfdc:	403b      	ands	r3, r7
 800cfde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cfe2:	f04f 0a00 	mov.w	sl, #0
 800cfe6:	9b04      	ldr	r3, [sp, #16]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1a4      	bne.n	800cf36 <_strtod_l+0x82e>
 800cfec:	e5de      	b.n	800cbac <_strtod_l+0x4a4>
 800cfee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cff2:	e7ea      	b.n	800cfca <_strtod_l+0x8c2>
 800cff4:	4613      	mov	r3, r2
 800cff6:	e7e8      	b.n	800cfca <_strtod_l+0x8c2>
 800cff8:	ea53 030a 	orrs.w	r3, r3, sl
 800cffc:	d08c      	beq.n	800cf18 <_strtod_l+0x810>
 800cffe:	9b08      	ldr	r3, [sp, #32]
 800d000:	b1db      	cbz	r3, 800d03a <_strtod_l+0x932>
 800d002:	423b      	tst	r3, r7
 800d004:	d0ef      	beq.n	800cfe6 <_strtod_l+0x8de>
 800d006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d008:	9a04      	ldr	r2, [sp, #16]
 800d00a:	4650      	mov	r0, sl
 800d00c:	4659      	mov	r1, fp
 800d00e:	b1c3      	cbz	r3, 800d042 <_strtod_l+0x93a>
 800d010:	f7ff fb5c 	bl	800c6cc <sulp>
 800d014:	4602      	mov	r2, r0
 800d016:	460b      	mov	r3, r1
 800d018:	ec51 0b18 	vmov	r0, r1, d8
 800d01c:	f7f3 f956 	bl	80002cc <__adddf3>
 800d020:	4682      	mov	sl, r0
 800d022:	468b      	mov	fp, r1
 800d024:	e7df      	b.n	800cfe6 <_strtod_l+0x8de>
 800d026:	4013      	ands	r3, r2
 800d028:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d02c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d030:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d034:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d038:	e7d5      	b.n	800cfe6 <_strtod_l+0x8de>
 800d03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d03c:	ea13 0f0a 	tst.w	r3, sl
 800d040:	e7e0      	b.n	800d004 <_strtod_l+0x8fc>
 800d042:	f7ff fb43 	bl	800c6cc <sulp>
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	ec51 0b18 	vmov	r0, r1, d8
 800d04e:	f7f3 f93b 	bl	80002c8 <__aeabi_dsub>
 800d052:	2200      	movs	r2, #0
 800d054:	2300      	movs	r3, #0
 800d056:	4682      	mov	sl, r0
 800d058:	468b      	mov	fp, r1
 800d05a:	f7f3 fd55 	bl	8000b08 <__aeabi_dcmpeq>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d0c1      	beq.n	800cfe6 <_strtod_l+0x8de>
 800d062:	e611      	b.n	800cc88 <_strtod_l+0x580>
 800d064:	fffffc02 	.word	0xfffffc02
 800d068:	7ff00000 	.word	0x7ff00000
 800d06c:	39500000 	.word	0x39500000
 800d070:	000fffff 	.word	0x000fffff
 800d074:	7fefffff 	.word	0x7fefffff
 800d078:	08011b08 	.word	0x08011b08
 800d07c:	4631      	mov	r1, r6
 800d07e:	4628      	mov	r0, r5
 800d080:	f002 fb12 	bl	800f6a8 <__ratio>
 800d084:	ec59 8b10 	vmov	r8, r9, d0
 800d088:	ee10 0a10 	vmov	r0, s0
 800d08c:	2200      	movs	r2, #0
 800d08e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d092:	4649      	mov	r1, r9
 800d094:	f7f3 fd4c 	bl	8000b30 <__aeabi_dcmple>
 800d098:	2800      	cmp	r0, #0
 800d09a:	d07a      	beq.n	800d192 <_strtod_l+0xa8a>
 800d09c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d04a      	beq.n	800d138 <_strtod_l+0xa30>
 800d0a2:	4b95      	ldr	r3, [pc, #596]	; (800d2f8 <_strtod_l+0xbf0>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d0aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d2f8 <_strtod_l+0xbf0>
 800d0ae:	f04f 0800 	mov.w	r8, #0
 800d0b2:	4b92      	ldr	r3, [pc, #584]	; (800d2fc <_strtod_l+0xbf4>)
 800d0b4:	403b      	ands	r3, r7
 800d0b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d0b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0ba:	4b91      	ldr	r3, [pc, #580]	; (800d300 <_strtod_l+0xbf8>)
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	f040 80b0 	bne.w	800d222 <_strtod_l+0xb1a>
 800d0c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d0ca:	ec4b ab10 	vmov	d0, sl, fp
 800d0ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0d2:	f002 fa11 	bl	800f4f8 <__ulp>
 800d0d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0da:	ec53 2b10 	vmov	r2, r3, d0
 800d0de:	f7f3 faab 	bl	8000638 <__aeabi_dmul>
 800d0e2:	4652      	mov	r2, sl
 800d0e4:	465b      	mov	r3, fp
 800d0e6:	f7f3 f8f1 	bl	80002cc <__adddf3>
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4983      	ldr	r1, [pc, #524]	; (800d2fc <_strtod_l+0xbf4>)
 800d0ee:	4a85      	ldr	r2, [pc, #532]	; (800d304 <_strtod_l+0xbfc>)
 800d0f0:	4019      	ands	r1, r3
 800d0f2:	4291      	cmp	r1, r2
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	d960      	bls.n	800d1ba <_strtod_l+0xab2>
 800d0f8:	ee18 3a90 	vmov	r3, s17
 800d0fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d100:	4293      	cmp	r3, r2
 800d102:	d104      	bne.n	800d10e <_strtod_l+0xa06>
 800d104:	ee18 3a10 	vmov	r3, s16
 800d108:	3301      	adds	r3, #1
 800d10a:	f43f ad45 	beq.w	800cb98 <_strtod_l+0x490>
 800d10e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d310 <_strtod_l+0xc08>
 800d112:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d116:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d118:	4620      	mov	r0, r4
 800d11a:	f001 febb 	bl	800ee94 <_Bfree>
 800d11e:	9905      	ldr	r1, [sp, #20]
 800d120:	4620      	mov	r0, r4
 800d122:	f001 feb7 	bl	800ee94 <_Bfree>
 800d126:	4631      	mov	r1, r6
 800d128:	4620      	mov	r0, r4
 800d12a:	f001 feb3 	bl	800ee94 <_Bfree>
 800d12e:	4629      	mov	r1, r5
 800d130:	4620      	mov	r0, r4
 800d132:	f001 feaf 	bl	800ee94 <_Bfree>
 800d136:	e61a      	b.n	800cd6e <_strtod_l+0x666>
 800d138:	f1ba 0f00 	cmp.w	sl, #0
 800d13c:	d11b      	bne.n	800d176 <_strtod_l+0xa6e>
 800d13e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d142:	b9f3      	cbnz	r3, 800d182 <_strtod_l+0xa7a>
 800d144:	4b6c      	ldr	r3, [pc, #432]	; (800d2f8 <_strtod_l+0xbf0>)
 800d146:	2200      	movs	r2, #0
 800d148:	4640      	mov	r0, r8
 800d14a:	4649      	mov	r1, r9
 800d14c:	f7f3 fce6 	bl	8000b1c <__aeabi_dcmplt>
 800d150:	b9d0      	cbnz	r0, 800d188 <_strtod_l+0xa80>
 800d152:	4640      	mov	r0, r8
 800d154:	4649      	mov	r1, r9
 800d156:	4b6c      	ldr	r3, [pc, #432]	; (800d308 <_strtod_l+0xc00>)
 800d158:	2200      	movs	r2, #0
 800d15a:	f7f3 fa6d 	bl	8000638 <__aeabi_dmul>
 800d15e:	4680      	mov	r8, r0
 800d160:	4689      	mov	r9, r1
 800d162:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d166:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d16a:	9315      	str	r3, [sp, #84]	; 0x54
 800d16c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d174:	e79d      	b.n	800d0b2 <_strtod_l+0x9aa>
 800d176:	f1ba 0f01 	cmp.w	sl, #1
 800d17a:	d102      	bne.n	800d182 <_strtod_l+0xa7a>
 800d17c:	2f00      	cmp	r7, #0
 800d17e:	f43f ad83 	beq.w	800cc88 <_strtod_l+0x580>
 800d182:	4b62      	ldr	r3, [pc, #392]	; (800d30c <_strtod_l+0xc04>)
 800d184:	2200      	movs	r2, #0
 800d186:	e78e      	b.n	800d0a6 <_strtod_l+0x99e>
 800d188:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d308 <_strtod_l+0xc00>
 800d18c:	f04f 0800 	mov.w	r8, #0
 800d190:	e7e7      	b.n	800d162 <_strtod_l+0xa5a>
 800d192:	4b5d      	ldr	r3, [pc, #372]	; (800d308 <_strtod_l+0xc00>)
 800d194:	4640      	mov	r0, r8
 800d196:	4649      	mov	r1, r9
 800d198:	2200      	movs	r2, #0
 800d19a:	f7f3 fa4d 	bl	8000638 <__aeabi_dmul>
 800d19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	4689      	mov	r9, r1
 800d1a4:	b933      	cbnz	r3, 800d1b4 <_strtod_l+0xaac>
 800d1a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1aa:	900e      	str	r0, [sp, #56]	; 0x38
 800d1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d1b2:	e7dd      	b.n	800d170 <_strtod_l+0xa68>
 800d1b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d1b8:	e7f9      	b.n	800d1ae <_strtod_l+0xaa6>
 800d1ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d1be:	9b04      	ldr	r3, [sp, #16]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1a8      	bne.n	800d116 <_strtod_l+0xa0e>
 800d1c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1ca:	0d1b      	lsrs	r3, r3, #20
 800d1cc:	051b      	lsls	r3, r3, #20
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d1a1      	bne.n	800d116 <_strtod_l+0xa0e>
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	f7f3 fd8f 	bl	8000cf8 <__aeabi_d2lz>
 800d1da:	f7f3 f9ff 	bl	80005dc <__aeabi_l2d>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	f7f3 f86f 	bl	80002c8 <__aeabi_dsub>
 800d1ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1f0:	ea43 030a 	orr.w	r3, r3, sl
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	4680      	mov	r8, r0
 800d1f8:	4689      	mov	r9, r1
 800d1fa:	d055      	beq.n	800d2a8 <_strtod_l+0xba0>
 800d1fc:	a336      	add	r3, pc, #216	; (adr r3, 800d2d8 <_strtod_l+0xbd0>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	f7f3 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 800d206:	2800      	cmp	r0, #0
 800d208:	f47f acd0 	bne.w	800cbac <_strtod_l+0x4a4>
 800d20c:	a334      	add	r3, pc, #208	; (adr r3, 800d2e0 <_strtod_l+0xbd8>)
 800d20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	f7f3 fc9f 	bl	8000b58 <__aeabi_dcmpgt>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	f43f af7b 	beq.w	800d116 <_strtod_l+0xa0e>
 800d220:	e4c4      	b.n	800cbac <_strtod_l+0x4a4>
 800d222:	9b04      	ldr	r3, [sp, #16]
 800d224:	b333      	cbz	r3, 800d274 <_strtod_l+0xb6c>
 800d226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d228:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d22c:	d822      	bhi.n	800d274 <_strtod_l+0xb6c>
 800d22e:	a32e      	add	r3, pc, #184	; (adr r3, 800d2e8 <_strtod_l+0xbe0>)
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	4640      	mov	r0, r8
 800d236:	4649      	mov	r1, r9
 800d238:	f7f3 fc7a 	bl	8000b30 <__aeabi_dcmple>
 800d23c:	b1a0      	cbz	r0, 800d268 <_strtod_l+0xb60>
 800d23e:	4649      	mov	r1, r9
 800d240:	4640      	mov	r0, r8
 800d242:	f7f3 fcd1 	bl	8000be8 <__aeabi_d2uiz>
 800d246:	2801      	cmp	r0, #1
 800d248:	bf38      	it	cc
 800d24a:	2001      	movcc	r0, #1
 800d24c:	f7f3 f97a 	bl	8000544 <__aeabi_ui2d>
 800d250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d252:	4680      	mov	r8, r0
 800d254:	4689      	mov	r9, r1
 800d256:	bb23      	cbnz	r3, 800d2a2 <_strtod_l+0xb9a>
 800d258:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d25c:	9010      	str	r0, [sp, #64]	; 0x40
 800d25e:	9311      	str	r3, [sp, #68]	; 0x44
 800d260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d264:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d26c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d270:	1a9b      	subs	r3, r3, r2
 800d272:	9309      	str	r3, [sp, #36]	; 0x24
 800d274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d278:	eeb0 0a48 	vmov.f32	s0, s16
 800d27c:	eef0 0a68 	vmov.f32	s1, s17
 800d280:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d284:	f002 f938 	bl	800f4f8 <__ulp>
 800d288:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d28c:	ec53 2b10 	vmov	r2, r3, d0
 800d290:	f7f3 f9d2 	bl	8000638 <__aeabi_dmul>
 800d294:	ec53 2b18 	vmov	r2, r3, d8
 800d298:	f7f3 f818 	bl	80002cc <__adddf3>
 800d29c:	4682      	mov	sl, r0
 800d29e:	468b      	mov	fp, r1
 800d2a0:	e78d      	b.n	800d1be <_strtod_l+0xab6>
 800d2a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d2a6:	e7db      	b.n	800d260 <_strtod_l+0xb58>
 800d2a8:	a311      	add	r3, pc, #68	; (adr r3, 800d2f0 <_strtod_l+0xbe8>)
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	f7f3 fc35 	bl	8000b1c <__aeabi_dcmplt>
 800d2b2:	e7b2      	b.n	800d21a <_strtod_l+0xb12>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d2ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	f7ff ba6b 	b.w	800c798 <_strtod_l+0x90>
 800d2c2:	2a65      	cmp	r2, #101	; 0x65
 800d2c4:	f43f ab5f 	beq.w	800c986 <_strtod_l+0x27e>
 800d2c8:	2a45      	cmp	r2, #69	; 0x45
 800d2ca:	f43f ab5c 	beq.w	800c986 <_strtod_l+0x27e>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	f7ff bb94 	b.w	800c9fc <_strtod_l+0x2f4>
 800d2d4:	f3af 8000 	nop.w
 800d2d8:	94a03595 	.word	0x94a03595
 800d2dc:	3fdfffff 	.word	0x3fdfffff
 800d2e0:	35afe535 	.word	0x35afe535
 800d2e4:	3fe00000 	.word	0x3fe00000
 800d2e8:	ffc00000 	.word	0xffc00000
 800d2ec:	41dfffff 	.word	0x41dfffff
 800d2f0:	94a03595 	.word	0x94a03595
 800d2f4:	3fcfffff 	.word	0x3fcfffff
 800d2f8:	3ff00000 	.word	0x3ff00000
 800d2fc:	7ff00000 	.word	0x7ff00000
 800d300:	7fe00000 	.word	0x7fe00000
 800d304:	7c9fffff 	.word	0x7c9fffff
 800d308:	3fe00000 	.word	0x3fe00000
 800d30c:	bff00000 	.word	0xbff00000
 800d310:	7fefffff 	.word	0x7fefffff

0800d314 <strtod>:
 800d314:	460a      	mov	r2, r1
 800d316:	4601      	mov	r1, r0
 800d318:	4802      	ldr	r0, [pc, #8]	; (800d324 <strtod+0x10>)
 800d31a:	4b03      	ldr	r3, [pc, #12]	; (800d328 <strtod+0x14>)
 800d31c:	6800      	ldr	r0, [r0, #0]
 800d31e:	f7ff b9f3 	b.w	800c708 <_strtod_l>
 800d322:	bf00      	nop
 800d324:	2000004c 	.word	0x2000004c
 800d328:	200000b4 	.word	0x200000b4

0800d32c <_strtol_l.constprop.0>:
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d332:	d001      	beq.n	800d338 <_strtol_l.constprop.0+0xc>
 800d334:	2b24      	cmp	r3, #36	; 0x24
 800d336:	d906      	bls.n	800d346 <_strtol_l.constprop.0+0x1a>
 800d338:	f7fe fc90 	bl	800bc5c <__errno>
 800d33c:	2316      	movs	r3, #22
 800d33e:	6003      	str	r3, [r0, #0]
 800d340:	2000      	movs	r0, #0
 800d342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d346:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d42c <_strtol_l.constprop.0+0x100>
 800d34a:	460d      	mov	r5, r1
 800d34c:	462e      	mov	r6, r5
 800d34e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d352:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d356:	f017 0708 	ands.w	r7, r7, #8
 800d35a:	d1f7      	bne.n	800d34c <_strtol_l.constprop.0+0x20>
 800d35c:	2c2d      	cmp	r4, #45	; 0x2d
 800d35e:	d132      	bne.n	800d3c6 <_strtol_l.constprop.0+0x9a>
 800d360:	782c      	ldrb	r4, [r5, #0]
 800d362:	2701      	movs	r7, #1
 800d364:	1cb5      	adds	r5, r6, #2
 800d366:	2b00      	cmp	r3, #0
 800d368:	d05b      	beq.n	800d422 <_strtol_l.constprop.0+0xf6>
 800d36a:	2b10      	cmp	r3, #16
 800d36c:	d109      	bne.n	800d382 <_strtol_l.constprop.0+0x56>
 800d36e:	2c30      	cmp	r4, #48	; 0x30
 800d370:	d107      	bne.n	800d382 <_strtol_l.constprop.0+0x56>
 800d372:	782c      	ldrb	r4, [r5, #0]
 800d374:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d378:	2c58      	cmp	r4, #88	; 0x58
 800d37a:	d14d      	bne.n	800d418 <_strtol_l.constprop.0+0xec>
 800d37c:	786c      	ldrb	r4, [r5, #1]
 800d37e:	2310      	movs	r3, #16
 800d380:	3502      	adds	r5, #2
 800d382:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d386:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d38a:	f04f 0c00 	mov.w	ip, #0
 800d38e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d392:	4666      	mov	r6, ip
 800d394:	fb03 8a19 	mls	sl, r3, r9, r8
 800d398:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d39c:	f1be 0f09 	cmp.w	lr, #9
 800d3a0:	d816      	bhi.n	800d3d0 <_strtol_l.constprop.0+0xa4>
 800d3a2:	4674      	mov	r4, lr
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	dd24      	ble.n	800d3f2 <_strtol_l.constprop.0+0xc6>
 800d3a8:	f1bc 0f00 	cmp.w	ip, #0
 800d3ac:	db1e      	blt.n	800d3ec <_strtol_l.constprop.0+0xc0>
 800d3ae:	45b1      	cmp	r9, r6
 800d3b0:	d31c      	bcc.n	800d3ec <_strtol_l.constprop.0+0xc0>
 800d3b2:	d101      	bne.n	800d3b8 <_strtol_l.constprop.0+0x8c>
 800d3b4:	45a2      	cmp	sl, r4
 800d3b6:	db19      	blt.n	800d3ec <_strtol_l.constprop.0+0xc0>
 800d3b8:	fb06 4603 	mla	r6, r6, r3, r4
 800d3bc:	f04f 0c01 	mov.w	ip, #1
 800d3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3c4:	e7e8      	b.n	800d398 <_strtol_l.constprop.0+0x6c>
 800d3c6:	2c2b      	cmp	r4, #43	; 0x2b
 800d3c8:	bf04      	itt	eq
 800d3ca:	782c      	ldrbeq	r4, [r5, #0]
 800d3cc:	1cb5      	addeq	r5, r6, #2
 800d3ce:	e7ca      	b.n	800d366 <_strtol_l.constprop.0+0x3a>
 800d3d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d3d4:	f1be 0f19 	cmp.w	lr, #25
 800d3d8:	d801      	bhi.n	800d3de <_strtol_l.constprop.0+0xb2>
 800d3da:	3c37      	subs	r4, #55	; 0x37
 800d3dc:	e7e2      	b.n	800d3a4 <_strtol_l.constprop.0+0x78>
 800d3de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d3e2:	f1be 0f19 	cmp.w	lr, #25
 800d3e6:	d804      	bhi.n	800d3f2 <_strtol_l.constprop.0+0xc6>
 800d3e8:	3c57      	subs	r4, #87	; 0x57
 800d3ea:	e7db      	b.n	800d3a4 <_strtol_l.constprop.0+0x78>
 800d3ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d3f0:	e7e6      	b.n	800d3c0 <_strtol_l.constprop.0+0x94>
 800d3f2:	f1bc 0f00 	cmp.w	ip, #0
 800d3f6:	da05      	bge.n	800d404 <_strtol_l.constprop.0+0xd8>
 800d3f8:	2322      	movs	r3, #34	; 0x22
 800d3fa:	6003      	str	r3, [r0, #0]
 800d3fc:	4646      	mov	r6, r8
 800d3fe:	b942      	cbnz	r2, 800d412 <_strtol_l.constprop.0+0xe6>
 800d400:	4630      	mov	r0, r6
 800d402:	e79e      	b.n	800d342 <_strtol_l.constprop.0+0x16>
 800d404:	b107      	cbz	r7, 800d408 <_strtol_l.constprop.0+0xdc>
 800d406:	4276      	negs	r6, r6
 800d408:	2a00      	cmp	r2, #0
 800d40a:	d0f9      	beq.n	800d400 <_strtol_l.constprop.0+0xd4>
 800d40c:	f1bc 0f00 	cmp.w	ip, #0
 800d410:	d000      	beq.n	800d414 <_strtol_l.constprop.0+0xe8>
 800d412:	1e69      	subs	r1, r5, #1
 800d414:	6011      	str	r1, [r2, #0]
 800d416:	e7f3      	b.n	800d400 <_strtol_l.constprop.0+0xd4>
 800d418:	2430      	movs	r4, #48	; 0x30
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1b1      	bne.n	800d382 <_strtol_l.constprop.0+0x56>
 800d41e:	2308      	movs	r3, #8
 800d420:	e7af      	b.n	800d382 <_strtol_l.constprop.0+0x56>
 800d422:	2c30      	cmp	r4, #48	; 0x30
 800d424:	d0a5      	beq.n	800d372 <_strtol_l.constprop.0+0x46>
 800d426:	230a      	movs	r3, #10
 800d428:	e7ab      	b.n	800d382 <_strtol_l.constprop.0+0x56>
 800d42a:	bf00      	nop
 800d42c:	08011b31 	.word	0x08011b31

0800d430 <strtol>:
 800d430:	4613      	mov	r3, r2
 800d432:	460a      	mov	r2, r1
 800d434:	4601      	mov	r1, r0
 800d436:	4802      	ldr	r0, [pc, #8]	; (800d440 <strtol+0x10>)
 800d438:	6800      	ldr	r0, [r0, #0]
 800d43a:	f7ff bf77 	b.w	800d32c <_strtol_l.constprop.0>
 800d43e:	bf00      	nop
 800d440:	2000004c 	.word	0x2000004c

0800d444 <__swbuf_r>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	460e      	mov	r6, r1
 800d448:	4614      	mov	r4, r2
 800d44a:	4605      	mov	r5, r0
 800d44c:	b118      	cbz	r0, 800d456 <__swbuf_r+0x12>
 800d44e:	6983      	ldr	r3, [r0, #24]
 800d450:	b90b      	cbnz	r3, 800d456 <__swbuf_r+0x12>
 800d452:	f001 f84d 	bl	800e4f0 <__sinit>
 800d456:	4b21      	ldr	r3, [pc, #132]	; (800d4dc <__swbuf_r+0x98>)
 800d458:	429c      	cmp	r4, r3
 800d45a:	d12b      	bne.n	800d4b4 <__swbuf_r+0x70>
 800d45c:	686c      	ldr	r4, [r5, #4]
 800d45e:	69a3      	ldr	r3, [r4, #24]
 800d460:	60a3      	str	r3, [r4, #8]
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	071a      	lsls	r2, r3, #28
 800d466:	d52f      	bpl.n	800d4c8 <__swbuf_r+0x84>
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	b36b      	cbz	r3, 800d4c8 <__swbuf_r+0x84>
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	6820      	ldr	r0, [r4, #0]
 800d470:	1ac0      	subs	r0, r0, r3
 800d472:	6963      	ldr	r3, [r4, #20]
 800d474:	b2f6      	uxtb	r6, r6
 800d476:	4283      	cmp	r3, r0
 800d478:	4637      	mov	r7, r6
 800d47a:	dc04      	bgt.n	800d486 <__swbuf_r+0x42>
 800d47c:	4621      	mov	r1, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 ffa2 	bl	800e3c8 <_fflush_r>
 800d484:	bb30      	cbnz	r0, 800d4d4 <__swbuf_r+0x90>
 800d486:	68a3      	ldr	r3, [r4, #8]
 800d488:	3b01      	subs	r3, #1
 800d48a:	60a3      	str	r3, [r4, #8]
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	6022      	str	r2, [r4, #0]
 800d492:	701e      	strb	r6, [r3, #0]
 800d494:	6963      	ldr	r3, [r4, #20]
 800d496:	3001      	adds	r0, #1
 800d498:	4283      	cmp	r3, r0
 800d49a:	d004      	beq.n	800d4a6 <__swbuf_r+0x62>
 800d49c:	89a3      	ldrh	r3, [r4, #12]
 800d49e:	07db      	lsls	r3, r3, #31
 800d4a0:	d506      	bpl.n	800d4b0 <__swbuf_r+0x6c>
 800d4a2:	2e0a      	cmp	r6, #10
 800d4a4:	d104      	bne.n	800d4b0 <__swbuf_r+0x6c>
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f000 ff8d 	bl	800e3c8 <_fflush_r>
 800d4ae:	b988      	cbnz	r0, 800d4d4 <__swbuf_r+0x90>
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b4:	4b0a      	ldr	r3, [pc, #40]	; (800d4e0 <__swbuf_r+0x9c>)
 800d4b6:	429c      	cmp	r4, r3
 800d4b8:	d101      	bne.n	800d4be <__swbuf_r+0x7a>
 800d4ba:	68ac      	ldr	r4, [r5, #8]
 800d4bc:	e7cf      	b.n	800d45e <__swbuf_r+0x1a>
 800d4be:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <__swbuf_r+0xa0>)
 800d4c0:	429c      	cmp	r4, r3
 800d4c2:	bf08      	it	eq
 800d4c4:	68ec      	ldreq	r4, [r5, #12]
 800d4c6:	e7ca      	b.n	800d45e <__swbuf_r+0x1a>
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f000 f80c 	bl	800d4e8 <__swsetup_r>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d0cb      	beq.n	800d46c <__swbuf_r+0x28>
 800d4d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d4d8:	e7ea      	b.n	800d4b0 <__swbuf_r+0x6c>
 800d4da:	bf00      	nop
 800d4dc:	08011ce4 	.word	0x08011ce4
 800d4e0:	08011d04 	.word	0x08011d04
 800d4e4:	08011cc4 	.word	0x08011cc4

0800d4e8 <__swsetup_r>:
 800d4e8:	4b32      	ldr	r3, [pc, #200]	; (800d5b4 <__swsetup_r+0xcc>)
 800d4ea:	b570      	push	{r4, r5, r6, lr}
 800d4ec:	681d      	ldr	r5, [r3, #0]
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	b125      	cbz	r5, 800d4fe <__swsetup_r+0x16>
 800d4f4:	69ab      	ldr	r3, [r5, #24]
 800d4f6:	b913      	cbnz	r3, 800d4fe <__swsetup_r+0x16>
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f000 fff9 	bl	800e4f0 <__sinit>
 800d4fe:	4b2e      	ldr	r3, [pc, #184]	; (800d5b8 <__swsetup_r+0xd0>)
 800d500:	429c      	cmp	r4, r3
 800d502:	d10f      	bne.n	800d524 <__swsetup_r+0x3c>
 800d504:	686c      	ldr	r4, [r5, #4]
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d50c:	0719      	lsls	r1, r3, #28
 800d50e:	d42c      	bmi.n	800d56a <__swsetup_r+0x82>
 800d510:	06dd      	lsls	r5, r3, #27
 800d512:	d411      	bmi.n	800d538 <__swsetup_r+0x50>
 800d514:	2309      	movs	r3, #9
 800d516:	6033      	str	r3, [r6, #0]
 800d518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d51c:	81a3      	strh	r3, [r4, #12]
 800d51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d522:	e03e      	b.n	800d5a2 <__swsetup_r+0xba>
 800d524:	4b25      	ldr	r3, [pc, #148]	; (800d5bc <__swsetup_r+0xd4>)
 800d526:	429c      	cmp	r4, r3
 800d528:	d101      	bne.n	800d52e <__swsetup_r+0x46>
 800d52a:	68ac      	ldr	r4, [r5, #8]
 800d52c:	e7eb      	b.n	800d506 <__swsetup_r+0x1e>
 800d52e:	4b24      	ldr	r3, [pc, #144]	; (800d5c0 <__swsetup_r+0xd8>)
 800d530:	429c      	cmp	r4, r3
 800d532:	bf08      	it	eq
 800d534:	68ec      	ldreq	r4, [r5, #12]
 800d536:	e7e6      	b.n	800d506 <__swsetup_r+0x1e>
 800d538:	0758      	lsls	r0, r3, #29
 800d53a:	d512      	bpl.n	800d562 <__swsetup_r+0x7a>
 800d53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d53e:	b141      	cbz	r1, 800d552 <__swsetup_r+0x6a>
 800d540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d544:	4299      	cmp	r1, r3
 800d546:	d002      	beq.n	800d54e <__swsetup_r+0x66>
 800d548:	4630      	mov	r0, r6
 800d54a:	f002 f93b 	bl	800f7c4 <_free_r>
 800d54e:	2300      	movs	r3, #0
 800d550:	6363      	str	r3, [r4, #52]	; 0x34
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	2300      	movs	r3, #0
 800d55c:	6063      	str	r3, [r4, #4]
 800d55e:	6923      	ldr	r3, [r4, #16]
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f043 0308 	orr.w	r3, r3, #8
 800d568:	81a3      	strh	r3, [r4, #12]
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	b94b      	cbnz	r3, 800d582 <__swsetup_r+0x9a>
 800d56e:	89a3      	ldrh	r3, [r4, #12]
 800d570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d578:	d003      	beq.n	800d582 <__swsetup_r+0x9a>
 800d57a:	4621      	mov	r1, r4
 800d57c:	4630      	mov	r0, r6
 800d57e:	f001 fbef 	bl	800ed60 <__smakebuf_r>
 800d582:	89a0      	ldrh	r0, [r4, #12]
 800d584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d588:	f010 0301 	ands.w	r3, r0, #1
 800d58c:	d00a      	beq.n	800d5a4 <__swsetup_r+0xbc>
 800d58e:	2300      	movs	r3, #0
 800d590:	60a3      	str	r3, [r4, #8]
 800d592:	6963      	ldr	r3, [r4, #20]
 800d594:	425b      	negs	r3, r3
 800d596:	61a3      	str	r3, [r4, #24]
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	b943      	cbnz	r3, 800d5ae <__swsetup_r+0xc6>
 800d59c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5a0:	d1ba      	bne.n	800d518 <__swsetup_r+0x30>
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}
 800d5a4:	0781      	lsls	r1, r0, #30
 800d5a6:	bf58      	it	pl
 800d5a8:	6963      	ldrpl	r3, [r4, #20]
 800d5aa:	60a3      	str	r3, [r4, #8]
 800d5ac:	e7f4      	b.n	800d598 <__swsetup_r+0xb0>
 800d5ae:	2000      	movs	r0, #0
 800d5b0:	e7f7      	b.n	800d5a2 <__swsetup_r+0xba>
 800d5b2:	bf00      	nop
 800d5b4:	2000004c 	.word	0x2000004c
 800d5b8:	08011ce4 	.word	0x08011ce4
 800d5bc:	08011d04 	.word	0x08011d04
 800d5c0:	08011cc4 	.word	0x08011cc4

0800d5c4 <quorem>:
 800d5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	6903      	ldr	r3, [r0, #16]
 800d5ca:	690c      	ldr	r4, [r1, #16]
 800d5cc:	42a3      	cmp	r3, r4
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	f2c0 8081 	blt.w	800d6d6 <quorem+0x112>
 800d5d4:	3c01      	subs	r4, #1
 800d5d6:	f101 0814 	add.w	r8, r1, #20
 800d5da:	f100 0514 	add.w	r5, r0, #20
 800d5de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5e2:	9301      	str	r3, [sp, #4]
 800d5e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d5e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d5f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d5f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d5fc:	d331      	bcc.n	800d662 <quorem+0x9e>
 800d5fe:	f04f 0e00 	mov.w	lr, #0
 800d602:	4640      	mov	r0, r8
 800d604:	46ac      	mov	ip, r5
 800d606:	46f2      	mov	sl, lr
 800d608:	f850 2b04 	ldr.w	r2, [r0], #4
 800d60c:	b293      	uxth	r3, r2
 800d60e:	fb06 e303 	mla	r3, r6, r3, lr
 800d612:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d616:	b29b      	uxth	r3, r3
 800d618:	ebaa 0303 	sub.w	r3, sl, r3
 800d61c:	f8dc a000 	ldr.w	sl, [ip]
 800d620:	0c12      	lsrs	r2, r2, #16
 800d622:	fa13 f38a 	uxtah	r3, r3, sl
 800d626:	fb06 e202 	mla	r2, r6, r2, lr
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d632:	b292      	uxth	r2, r2
 800d634:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d63c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d640:	4581      	cmp	r9, r0
 800d642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d646:	f84c 3b04 	str.w	r3, [ip], #4
 800d64a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d64e:	d2db      	bcs.n	800d608 <quorem+0x44>
 800d650:	f855 300b 	ldr.w	r3, [r5, fp]
 800d654:	b92b      	cbnz	r3, 800d662 <quorem+0x9e>
 800d656:	9b01      	ldr	r3, [sp, #4]
 800d658:	3b04      	subs	r3, #4
 800d65a:	429d      	cmp	r5, r3
 800d65c:	461a      	mov	r2, r3
 800d65e:	d32e      	bcc.n	800d6be <quorem+0xfa>
 800d660:	613c      	str	r4, [r7, #16]
 800d662:	4638      	mov	r0, r7
 800d664:	f001 fea2 	bl	800f3ac <__mcmp>
 800d668:	2800      	cmp	r0, #0
 800d66a:	db24      	blt.n	800d6b6 <quorem+0xf2>
 800d66c:	3601      	adds	r6, #1
 800d66e:	4628      	mov	r0, r5
 800d670:	f04f 0c00 	mov.w	ip, #0
 800d674:	f858 2b04 	ldr.w	r2, [r8], #4
 800d678:	f8d0 e000 	ldr.w	lr, [r0]
 800d67c:	b293      	uxth	r3, r2
 800d67e:	ebac 0303 	sub.w	r3, ip, r3
 800d682:	0c12      	lsrs	r2, r2, #16
 800d684:	fa13 f38e 	uxtah	r3, r3, lr
 800d688:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d690:	b29b      	uxth	r3, r3
 800d692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d696:	45c1      	cmp	r9, r8
 800d698:	f840 3b04 	str.w	r3, [r0], #4
 800d69c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6a0:	d2e8      	bcs.n	800d674 <quorem+0xb0>
 800d6a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6aa:	b922      	cbnz	r2, 800d6b6 <quorem+0xf2>
 800d6ac:	3b04      	subs	r3, #4
 800d6ae:	429d      	cmp	r5, r3
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	d30a      	bcc.n	800d6ca <quorem+0x106>
 800d6b4:	613c      	str	r4, [r7, #16]
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	b003      	add	sp, #12
 800d6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6be:	6812      	ldr	r2, [r2, #0]
 800d6c0:	3b04      	subs	r3, #4
 800d6c2:	2a00      	cmp	r2, #0
 800d6c4:	d1cc      	bne.n	800d660 <quorem+0x9c>
 800d6c6:	3c01      	subs	r4, #1
 800d6c8:	e7c7      	b.n	800d65a <quorem+0x96>
 800d6ca:	6812      	ldr	r2, [r2, #0]
 800d6cc:	3b04      	subs	r3, #4
 800d6ce:	2a00      	cmp	r2, #0
 800d6d0:	d1f0      	bne.n	800d6b4 <quorem+0xf0>
 800d6d2:	3c01      	subs	r4, #1
 800d6d4:	e7eb      	b.n	800d6ae <quorem+0xea>
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	e7ee      	b.n	800d6b8 <quorem+0xf4>
 800d6da:	0000      	movs	r0, r0
 800d6dc:	0000      	movs	r0, r0
	...

0800d6e0 <_dtoa_r>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	ed2d 8b04 	vpush	{d8-d9}
 800d6e8:	ec57 6b10 	vmov	r6, r7, d0
 800d6ec:	b093      	sub	sp, #76	; 0x4c
 800d6ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d6f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d6f4:	9106      	str	r1, [sp, #24]
 800d6f6:	ee10 aa10 	vmov	sl, s0
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d6fe:	930c      	str	r3, [sp, #48]	; 0x30
 800d700:	46bb      	mov	fp, r7
 800d702:	b975      	cbnz	r5, 800d722 <_dtoa_r+0x42>
 800d704:	2010      	movs	r0, #16
 800d706:	f001 fb6b 	bl	800ede0 <malloc>
 800d70a:	4602      	mov	r2, r0
 800d70c:	6260      	str	r0, [r4, #36]	; 0x24
 800d70e:	b920      	cbnz	r0, 800d71a <_dtoa_r+0x3a>
 800d710:	4ba7      	ldr	r3, [pc, #668]	; (800d9b0 <_dtoa_r+0x2d0>)
 800d712:	21ea      	movs	r1, #234	; 0xea
 800d714:	48a7      	ldr	r0, [pc, #668]	; (800d9b4 <_dtoa_r+0x2d4>)
 800d716:	f002 fb1d 	bl	800fd54 <__assert_func>
 800d71a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d71e:	6005      	str	r5, [r0, #0]
 800d720:	60c5      	str	r5, [r0, #12]
 800d722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d724:	6819      	ldr	r1, [r3, #0]
 800d726:	b151      	cbz	r1, 800d73e <_dtoa_r+0x5e>
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	604a      	str	r2, [r1, #4]
 800d72c:	2301      	movs	r3, #1
 800d72e:	4093      	lsls	r3, r2
 800d730:	608b      	str	r3, [r1, #8]
 800d732:	4620      	mov	r0, r4
 800d734:	f001 fbae 	bl	800ee94 <_Bfree>
 800d738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]
 800d73e:	1e3b      	subs	r3, r7, #0
 800d740:	bfaa      	itet	ge
 800d742:	2300      	movge	r3, #0
 800d744:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d748:	f8c8 3000 	strge.w	r3, [r8]
 800d74c:	4b9a      	ldr	r3, [pc, #616]	; (800d9b8 <_dtoa_r+0x2d8>)
 800d74e:	bfbc      	itt	lt
 800d750:	2201      	movlt	r2, #1
 800d752:	f8c8 2000 	strlt.w	r2, [r8]
 800d756:	ea33 030b 	bics.w	r3, r3, fp
 800d75a:	d11b      	bne.n	800d794 <_dtoa_r+0xb4>
 800d75c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d75e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d768:	4333      	orrs	r3, r6
 800d76a:	f000 8592 	beq.w	800e292 <_dtoa_r+0xbb2>
 800d76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d770:	b963      	cbnz	r3, 800d78c <_dtoa_r+0xac>
 800d772:	4b92      	ldr	r3, [pc, #584]	; (800d9bc <_dtoa_r+0x2dc>)
 800d774:	e022      	b.n	800d7bc <_dtoa_r+0xdc>
 800d776:	4b92      	ldr	r3, [pc, #584]	; (800d9c0 <_dtoa_r+0x2e0>)
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	3308      	adds	r3, #8
 800d77c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d77e:	6013      	str	r3, [r2, #0]
 800d780:	9801      	ldr	r0, [sp, #4]
 800d782:	b013      	add	sp, #76	; 0x4c
 800d784:	ecbd 8b04 	vpop	{d8-d9}
 800d788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78c:	4b8b      	ldr	r3, [pc, #556]	; (800d9bc <_dtoa_r+0x2dc>)
 800d78e:	9301      	str	r3, [sp, #4]
 800d790:	3303      	adds	r3, #3
 800d792:	e7f3      	b.n	800d77c <_dtoa_r+0x9c>
 800d794:	2200      	movs	r2, #0
 800d796:	2300      	movs	r3, #0
 800d798:	4650      	mov	r0, sl
 800d79a:	4659      	mov	r1, fp
 800d79c:	f7f3 f9b4 	bl	8000b08 <__aeabi_dcmpeq>
 800d7a0:	ec4b ab19 	vmov	d9, sl, fp
 800d7a4:	4680      	mov	r8, r0
 800d7a6:	b158      	cbz	r0, 800d7c0 <_dtoa_r+0xe0>
 800d7a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f000 856b 	beq.w	800e28c <_dtoa_r+0xbac>
 800d7b6:	4883      	ldr	r0, [pc, #524]	; (800d9c4 <_dtoa_r+0x2e4>)
 800d7b8:	6018      	str	r0, [r3, #0]
 800d7ba:	1e43      	subs	r3, r0, #1
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	e7df      	b.n	800d780 <_dtoa_r+0xa0>
 800d7c0:	ec4b ab10 	vmov	d0, sl, fp
 800d7c4:	aa10      	add	r2, sp, #64	; 0x40
 800d7c6:	a911      	add	r1, sp, #68	; 0x44
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f001 ff11 	bl	800f5f0 <__d2b>
 800d7ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d7d2:	ee08 0a10 	vmov	s16, r0
 800d7d6:	2d00      	cmp	r5, #0
 800d7d8:	f000 8084 	beq.w	800d8e4 <_dtoa_r+0x204>
 800d7dc:	ee19 3a90 	vmov	r3, s19
 800d7e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d7e8:	4656      	mov	r6, sl
 800d7ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d7ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d7f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d7f6:	4b74      	ldr	r3, [pc, #464]	; (800d9c8 <_dtoa_r+0x2e8>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	f7f2 fd63 	bl	80002c8 <__aeabi_dsub>
 800d802:	a365      	add	r3, pc, #404	; (adr r3, 800d998 <_dtoa_r+0x2b8>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	f7f2 ff16 	bl	8000638 <__aeabi_dmul>
 800d80c:	a364      	add	r3, pc, #400	; (adr r3, 800d9a0 <_dtoa_r+0x2c0>)
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	f7f2 fd5b 	bl	80002cc <__adddf3>
 800d816:	4606      	mov	r6, r0
 800d818:	4628      	mov	r0, r5
 800d81a:	460f      	mov	r7, r1
 800d81c:	f7f2 fea2 	bl	8000564 <__aeabi_i2d>
 800d820:	a361      	add	r3, pc, #388	; (adr r3, 800d9a8 <_dtoa_r+0x2c8>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	f7f2 ff07 	bl	8000638 <__aeabi_dmul>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4630      	mov	r0, r6
 800d830:	4639      	mov	r1, r7
 800d832:	f7f2 fd4b 	bl	80002cc <__adddf3>
 800d836:	4606      	mov	r6, r0
 800d838:	460f      	mov	r7, r1
 800d83a:	f7f3 f9ad 	bl	8000b98 <__aeabi_d2iz>
 800d83e:	2200      	movs	r2, #0
 800d840:	9000      	str	r0, [sp, #0]
 800d842:	2300      	movs	r3, #0
 800d844:	4630      	mov	r0, r6
 800d846:	4639      	mov	r1, r7
 800d848:	f7f3 f968 	bl	8000b1c <__aeabi_dcmplt>
 800d84c:	b150      	cbz	r0, 800d864 <_dtoa_r+0x184>
 800d84e:	9800      	ldr	r0, [sp, #0]
 800d850:	f7f2 fe88 	bl	8000564 <__aeabi_i2d>
 800d854:	4632      	mov	r2, r6
 800d856:	463b      	mov	r3, r7
 800d858:	f7f3 f956 	bl	8000b08 <__aeabi_dcmpeq>
 800d85c:	b910      	cbnz	r0, 800d864 <_dtoa_r+0x184>
 800d85e:	9b00      	ldr	r3, [sp, #0]
 800d860:	3b01      	subs	r3, #1
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	9b00      	ldr	r3, [sp, #0]
 800d866:	2b16      	cmp	r3, #22
 800d868:	d85a      	bhi.n	800d920 <_dtoa_r+0x240>
 800d86a:	9a00      	ldr	r2, [sp, #0]
 800d86c:	4b57      	ldr	r3, [pc, #348]	; (800d9cc <_dtoa_r+0x2ec>)
 800d86e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	ec51 0b19 	vmov	r0, r1, d9
 800d87a:	f7f3 f94f 	bl	8000b1c <__aeabi_dcmplt>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d050      	beq.n	800d924 <_dtoa_r+0x244>
 800d882:	9b00      	ldr	r3, [sp, #0]
 800d884:	3b01      	subs	r3, #1
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	2300      	movs	r3, #0
 800d88a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d88c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d88e:	1b5d      	subs	r5, r3, r5
 800d890:	1e6b      	subs	r3, r5, #1
 800d892:	9305      	str	r3, [sp, #20]
 800d894:	bf45      	ittet	mi
 800d896:	f1c5 0301 	rsbmi	r3, r5, #1
 800d89a:	9304      	strmi	r3, [sp, #16]
 800d89c:	2300      	movpl	r3, #0
 800d89e:	2300      	movmi	r3, #0
 800d8a0:	bf4c      	ite	mi
 800d8a2:	9305      	strmi	r3, [sp, #20]
 800d8a4:	9304      	strpl	r3, [sp, #16]
 800d8a6:	9b00      	ldr	r3, [sp, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	db3d      	blt.n	800d928 <_dtoa_r+0x248>
 800d8ac:	9b05      	ldr	r3, [sp, #20]
 800d8ae:	9a00      	ldr	r2, [sp, #0]
 800d8b0:	920a      	str	r2, [sp, #40]	; 0x28
 800d8b2:	4413      	add	r3, r2
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	9307      	str	r3, [sp, #28]
 800d8ba:	9b06      	ldr	r3, [sp, #24]
 800d8bc:	2b09      	cmp	r3, #9
 800d8be:	f200 8089 	bhi.w	800d9d4 <_dtoa_r+0x2f4>
 800d8c2:	2b05      	cmp	r3, #5
 800d8c4:	bfc4      	itt	gt
 800d8c6:	3b04      	subgt	r3, #4
 800d8c8:	9306      	strgt	r3, [sp, #24]
 800d8ca:	9b06      	ldr	r3, [sp, #24]
 800d8cc:	f1a3 0302 	sub.w	r3, r3, #2
 800d8d0:	bfcc      	ite	gt
 800d8d2:	2500      	movgt	r5, #0
 800d8d4:	2501      	movle	r5, #1
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	f200 8087 	bhi.w	800d9ea <_dtoa_r+0x30a>
 800d8dc:	e8df f003 	tbb	[pc, r3]
 800d8e0:	59383a2d 	.word	0x59383a2d
 800d8e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d8e8:	441d      	add	r5, r3
 800d8ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d8ee:	2b20      	cmp	r3, #32
 800d8f0:	bfc1      	itttt	gt
 800d8f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d8f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d8fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800d8fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d902:	bfda      	itte	le
 800d904:	f1c3 0320 	rsble	r3, r3, #32
 800d908:	fa06 f003 	lslle.w	r0, r6, r3
 800d90c:	4318      	orrgt	r0, r3
 800d90e:	f7f2 fe19 	bl	8000544 <__aeabi_ui2d>
 800d912:	2301      	movs	r3, #1
 800d914:	4606      	mov	r6, r0
 800d916:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d91a:	3d01      	subs	r5, #1
 800d91c:	930e      	str	r3, [sp, #56]	; 0x38
 800d91e:	e76a      	b.n	800d7f6 <_dtoa_r+0x116>
 800d920:	2301      	movs	r3, #1
 800d922:	e7b2      	b.n	800d88a <_dtoa_r+0x1aa>
 800d924:	900b      	str	r0, [sp, #44]	; 0x2c
 800d926:	e7b1      	b.n	800d88c <_dtoa_r+0x1ac>
 800d928:	9b04      	ldr	r3, [sp, #16]
 800d92a:	9a00      	ldr	r2, [sp, #0]
 800d92c:	1a9b      	subs	r3, r3, r2
 800d92e:	9304      	str	r3, [sp, #16]
 800d930:	4253      	negs	r3, r2
 800d932:	9307      	str	r3, [sp, #28]
 800d934:	2300      	movs	r3, #0
 800d936:	930a      	str	r3, [sp, #40]	; 0x28
 800d938:	e7bf      	b.n	800d8ba <_dtoa_r+0x1da>
 800d93a:	2300      	movs	r3, #0
 800d93c:	9308      	str	r3, [sp, #32]
 800d93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d940:	2b00      	cmp	r3, #0
 800d942:	dc55      	bgt.n	800d9f0 <_dtoa_r+0x310>
 800d944:	2301      	movs	r3, #1
 800d946:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d94a:	461a      	mov	r2, r3
 800d94c:	9209      	str	r2, [sp, #36]	; 0x24
 800d94e:	e00c      	b.n	800d96a <_dtoa_r+0x28a>
 800d950:	2301      	movs	r3, #1
 800d952:	e7f3      	b.n	800d93c <_dtoa_r+0x25c>
 800d954:	2300      	movs	r3, #0
 800d956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d958:	9308      	str	r3, [sp, #32]
 800d95a:	9b00      	ldr	r3, [sp, #0]
 800d95c:	4413      	add	r3, r2
 800d95e:	9302      	str	r3, [sp, #8]
 800d960:	3301      	adds	r3, #1
 800d962:	2b01      	cmp	r3, #1
 800d964:	9303      	str	r3, [sp, #12]
 800d966:	bfb8      	it	lt
 800d968:	2301      	movlt	r3, #1
 800d96a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d96c:	2200      	movs	r2, #0
 800d96e:	6042      	str	r2, [r0, #4]
 800d970:	2204      	movs	r2, #4
 800d972:	f102 0614 	add.w	r6, r2, #20
 800d976:	429e      	cmp	r6, r3
 800d978:	6841      	ldr	r1, [r0, #4]
 800d97a:	d93d      	bls.n	800d9f8 <_dtoa_r+0x318>
 800d97c:	4620      	mov	r0, r4
 800d97e:	f001 fa49 	bl	800ee14 <_Balloc>
 800d982:	9001      	str	r0, [sp, #4]
 800d984:	2800      	cmp	r0, #0
 800d986:	d13b      	bne.n	800da00 <_dtoa_r+0x320>
 800d988:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <_dtoa_r+0x2f0>)
 800d98a:	4602      	mov	r2, r0
 800d98c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d990:	e6c0      	b.n	800d714 <_dtoa_r+0x34>
 800d992:	2301      	movs	r3, #1
 800d994:	e7df      	b.n	800d956 <_dtoa_r+0x276>
 800d996:	bf00      	nop
 800d998:	636f4361 	.word	0x636f4361
 800d99c:	3fd287a7 	.word	0x3fd287a7
 800d9a0:	8b60c8b3 	.word	0x8b60c8b3
 800d9a4:	3fc68a28 	.word	0x3fc68a28
 800d9a8:	509f79fb 	.word	0x509f79fb
 800d9ac:	3fd34413 	.word	0x3fd34413
 800d9b0:	08011c3e 	.word	0x08011c3e
 800d9b4:	08011c55 	.word	0x08011c55
 800d9b8:	7ff00000 	.word	0x7ff00000
 800d9bc:	08011c3a 	.word	0x08011c3a
 800d9c0:	08011c31 	.word	0x08011c31
 800d9c4:	08011ab9 	.word	0x08011ab9
 800d9c8:	3ff80000 	.word	0x3ff80000
 800d9cc:	08011e28 	.word	0x08011e28
 800d9d0:	08011cb0 	.word	0x08011cb0
 800d9d4:	2501      	movs	r5, #1
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	9306      	str	r3, [sp, #24]
 800d9da:	9508      	str	r5, [sp, #32]
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2312      	movs	r3, #18
 800d9e8:	e7b0      	b.n	800d94c <_dtoa_r+0x26c>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	9308      	str	r3, [sp, #32]
 800d9ee:	e7f5      	b.n	800d9dc <_dtoa_r+0x2fc>
 800d9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d9f6:	e7b8      	b.n	800d96a <_dtoa_r+0x28a>
 800d9f8:	3101      	adds	r1, #1
 800d9fa:	6041      	str	r1, [r0, #4]
 800d9fc:	0052      	lsls	r2, r2, #1
 800d9fe:	e7b8      	b.n	800d972 <_dtoa_r+0x292>
 800da00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da02:	9a01      	ldr	r2, [sp, #4]
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	9b03      	ldr	r3, [sp, #12]
 800da08:	2b0e      	cmp	r3, #14
 800da0a:	f200 809d 	bhi.w	800db48 <_dtoa_r+0x468>
 800da0e:	2d00      	cmp	r5, #0
 800da10:	f000 809a 	beq.w	800db48 <_dtoa_r+0x468>
 800da14:	9b00      	ldr	r3, [sp, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	dd32      	ble.n	800da80 <_dtoa_r+0x3a0>
 800da1a:	4ab7      	ldr	r2, [pc, #732]	; (800dcf8 <_dtoa_r+0x618>)
 800da1c:	f003 030f 	and.w	r3, r3, #15
 800da20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da28:	9b00      	ldr	r3, [sp, #0]
 800da2a:	05d8      	lsls	r0, r3, #23
 800da2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800da30:	d516      	bpl.n	800da60 <_dtoa_r+0x380>
 800da32:	4bb2      	ldr	r3, [pc, #712]	; (800dcfc <_dtoa_r+0x61c>)
 800da34:	ec51 0b19 	vmov	r0, r1, d9
 800da38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da3c:	f7f2 ff26 	bl	800088c <__aeabi_ddiv>
 800da40:	f007 070f 	and.w	r7, r7, #15
 800da44:	4682      	mov	sl, r0
 800da46:	468b      	mov	fp, r1
 800da48:	2503      	movs	r5, #3
 800da4a:	4eac      	ldr	r6, [pc, #688]	; (800dcfc <_dtoa_r+0x61c>)
 800da4c:	b957      	cbnz	r7, 800da64 <_dtoa_r+0x384>
 800da4e:	4642      	mov	r2, r8
 800da50:	464b      	mov	r3, r9
 800da52:	4650      	mov	r0, sl
 800da54:	4659      	mov	r1, fp
 800da56:	f7f2 ff19 	bl	800088c <__aeabi_ddiv>
 800da5a:	4682      	mov	sl, r0
 800da5c:	468b      	mov	fp, r1
 800da5e:	e028      	b.n	800dab2 <_dtoa_r+0x3d2>
 800da60:	2502      	movs	r5, #2
 800da62:	e7f2      	b.n	800da4a <_dtoa_r+0x36a>
 800da64:	07f9      	lsls	r1, r7, #31
 800da66:	d508      	bpl.n	800da7a <_dtoa_r+0x39a>
 800da68:	4640      	mov	r0, r8
 800da6a:	4649      	mov	r1, r9
 800da6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da70:	f7f2 fde2 	bl	8000638 <__aeabi_dmul>
 800da74:	3501      	adds	r5, #1
 800da76:	4680      	mov	r8, r0
 800da78:	4689      	mov	r9, r1
 800da7a:	107f      	asrs	r7, r7, #1
 800da7c:	3608      	adds	r6, #8
 800da7e:	e7e5      	b.n	800da4c <_dtoa_r+0x36c>
 800da80:	f000 809b 	beq.w	800dbba <_dtoa_r+0x4da>
 800da84:	9b00      	ldr	r3, [sp, #0]
 800da86:	4f9d      	ldr	r7, [pc, #628]	; (800dcfc <_dtoa_r+0x61c>)
 800da88:	425e      	negs	r6, r3
 800da8a:	4b9b      	ldr	r3, [pc, #620]	; (800dcf8 <_dtoa_r+0x618>)
 800da8c:	f006 020f 	and.w	r2, r6, #15
 800da90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	ec51 0b19 	vmov	r0, r1, d9
 800da9c:	f7f2 fdcc 	bl	8000638 <__aeabi_dmul>
 800daa0:	1136      	asrs	r6, r6, #4
 800daa2:	4682      	mov	sl, r0
 800daa4:	468b      	mov	fp, r1
 800daa6:	2300      	movs	r3, #0
 800daa8:	2502      	movs	r5, #2
 800daaa:	2e00      	cmp	r6, #0
 800daac:	d17a      	bne.n	800dba4 <_dtoa_r+0x4c4>
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1d3      	bne.n	800da5a <_dtoa_r+0x37a>
 800dab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f000 8082 	beq.w	800dbbe <_dtoa_r+0x4de>
 800daba:	4b91      	ldr	r3, [pc, #580]	; (800dd00 <_dtoa_r+0x620>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	4650      	mov	r0, sl
 800dac0:	4659      	mov	r1, fp
 800dac2:	f7f3 f82b 	bl	8000b1c <__aeabi_dcmplt>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d079      	beq.n	800dbbe <_dtoa_r+0x4de>
 800daca:	9b03      	ldr	r3, [sp, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d076      	beq.n	800dbbe <_dtoa_r+0x4de>
 800dad0:	9b02      	ldr	r3, [sp, #8]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	dd36      	ble.n	800db44 <_dtoa_r+0x464>
 800dad6:	9b00      	ldr	r3, [sp, #0]
 800dad8:	4650      	mov	r0, sl
 800dada:	4659      	mov	r1, fp
 800dadc:	1e5f      	subs	r7, r3, #1
 800dade:	2200      	movs	r2, #0
 800dae0:	4b88      	ldr	r3, [pc, #544]	; (800dd04 <_dtoa_r+0x624>)
 800dae2:	f7f2 fda9 	bl	8000638 <__aeabi_dmul>
 800dae6:	9e02      	ldr	r6, [sp, #8]
 800dae8:	4682      	mov	sl, r0
 800daea:	468b      	mov	fp, r1
 800daec:	3501      	adds	r5, #1
 800daee:	4628      	mov	r0, r5
 800daf0:	f7f2 fd38 	bl	8000564 <__aeabi_i2d>
 800daf4:	4652      	mov	r2, sl
 800daf6:	465b      	mov	r3, fp
 800daf8:	f7f2 fd9e 	bl	8000638 <__aeabi_dmul>
 800dafc:	4b82      	ldr	r3, [pc, #520]	; (800dd08 <_dtoa_r+0x628>)
 800dafe:	2200      	movs	r2, #0
 800db00:	f7f2 fbe4 	bl	80002cc <__adddf3>
 800db04:	46d0      	mov	r8, sl
 800db06:	46d9      	mov	r9, fp
 800db08:	4682      	mov	sl, r0
 800db0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db0e:	2e00      	cmp	r6, #0
 800db10:	d158      	bne.n	800dbc4 <_dtoa_r+0x4e4>
 800db12:	4b7e      	ldr	r3, [pc, #504]	; (800dd0c <_dtoa_r+0x62c>)
 800db14:	2200      	movs	r2, #0
 800db16:	4640      	mov	r0, r8
 800db18:	4649      	mov	r1, r9
 800db1a:	f7f2 fbd5 	bl	80002c8 <__aeabi_dsub>
 800db1e:	4652      	mov	r2, sl
 800db20:	465b      	mov	r3, fp
 800db22:	4680      	mov	r8, r0
 800db24:	4689      	mov	r9, r1
 800db26:	f7f3 f817 	bl	8000b58 <__aeabi_dcmpgt>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	f040 8295 	bne.w	800e05a <_dtoa_r+0x97a>
 800db30:	4652      	mov	r2, sl
 800db32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db36:	4640      	mov	r0, r8
 800db38:	4649      	mov	r1, r9
 800db3a:	f7f2 ffef 	bl	8000b1c <__aeabi_dcmplt>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f040 8289 	bne.w	800e056 <_dtoa_r+0x976>
 800db44:	ec5b ab19 	vmov	sl, fp, d9
 800db48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f2c0 8148 	blt.w	800dde0 <_dtoa_r+0x700>
 800db50:	9a00      	ldr	r2, [sp, #0]
 800db52:	2a0e      	cmp	r2, #14
 800db54:	f300 8144 	bgt.w	800dde0 <_dtoa_r+0x700>
 800db58:	4b67      	ldr	r3, [pc, #412]	; (800dcf8 <_dtoa_r+0x618>)
 800db5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db64:	2b00      	cmp	r3, #0
 800db66:	f280 80d5 	bge.w	800dd14 <_dtoa_r+0x634>
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f300 80d1 	bgt.w	800dd14 <_dtoa_r+0x634>
 800db72:	f040 826f 	bne.w	800e054 <_dtoa_r+0x974>
 800db76:	4b65      	ldr	r3, [pc, #404]	; (800dd0c <_dtoa_r+0x62c>)
 800db78:	2200      	movs	r2, #0
 800db7a:	4640      	mov	r0, r8
 800db7c:	4649      	mov	r1, r9
 800db7e:	f7f2 fd5b 	bl	8000638 <__aeabi_dmul>
 800db82:	4652      	mov	r2, sl
 800db84:	465b      	mov	r3, fp
 800db86:	f7f2 ffdd 	bl	8000b44 <__aeabi_dcmpge>
 800db8a:	9e03      	ldr	r6, [sp, #12]
 800db8c:	4637      	mov	r7, r6
 800db8e:	2800      	cmp	r0, #0
 800db90:	f040 8245 	bne.w	800e01e <_dtoa_r+0x93e>
 800db94:	9d01      	ldr	r5, [sp, #4]
 800db96:	2331      	movs	r3, #49	; 0x31
 800db98:	f805 3b01 	strb.w	r3, [r5], #1
 800db9c:	9b00      	ldr	r3, [sp, #0]
 800db9e:	3301      	adds	r3, #1
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	e240      	b.n	800e026 <_dtoa_r+0x946>
 800dba4:	07f2      	lsls	r2, r6, #31
 800dba6:	d505      	bpl.n	800dbb4 <_dtoa_r+0x4d4>
 800dba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbac:	f7f2 fd44 	bl	8000638 <__aeabi_dmul>
 800dbb0:	3501      	adds	r5, #1
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	1076      	asrs	r6, r6, #1
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	e777      	b.n	800daaa <_dtoa_r+0x3ca>
 800dbba:	2502      	movs	r5, #2
 800dbbc:	e779      	b.n	800dab2 <_dtoa_r+0x3d2>
 800dbbe:	9f00      	ldr	r7, [sp, #0]
 800dbc0:	9e03      	ldr	r6, [sp, #12]
 800dbc2:	e794      	b.n	800daee <_dtoa_r+0x40e>
 800dbc4:	9901      	ldr	r1, [sp, #4]
 800dbc6:	4b4c      	ldr	r3, [pc, #304]	; (800dcf8 <_dtoa_r+0x618>)
 800dbc8:	4431      	add	r1, r6
 800dbca:	910d      	str	r1, [sp, #52]	; 0x34
 800dbcc:	9908      	ldr	r1, [sp, #32]
 800dbce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dbd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dbd6:	2900      	cmp	r1, #0
 800dbd8:	d043      	beq.n	800dc62 <_dtoa_r+0x582>
 800dbda:	494d      	ldr	r1, [pc, #308]	; (800dd10 <_dtoa_r+0x630>)
 800dbdc:	2000      	movs	r0, #0
 800dbde:	f7f2 fe55 	bl	800088c <__aeabi_ddiv>
 800dbe2:	4652      	mov	r2, sl
 800dbe4:	465b      	mov	r3, fp
 800dbe6:	f7f2 fb6f 	bl	80002c8 <__aeabi_dsub>
 800dbea:	9d01      	ldr	r5, [sp, #4]
 800dbec:	4682      	mov	sl, r0
 800dbee:	468b      	mov	fp, r1
 800dbf0:	4649      	mov	r1, r9
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	f7f2 ffd0 	bl	8000b98 <__aeabi_d2iz>
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	f7f2 fcb3 	bl	8000564 <__aeabi_i2d>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	460b      	mov	r3, r1
 800dc02:	4640      	mov	r0, r8
 800dc04:	4649      	mov	r1, r9
 800dc06:	f7f2 fb5f 	bl	80002c8 <__aeabi_dsub>
 800dc0a:	3630      	adds	r6, #48	; 0x30
 800dc0c:	f805 6b01 	strb.w	r6, [r5], #1
 800dc10:	4652      	mov	r2, sl
 800dc12:	465b      	mov	r3, fp
 800dc14:	4680      	mov	r8, r0
 800dc16:	4689      	mov	r9, r1
 800dc18:	f7f2 ff80 	bl	8000b1c <__aeabi_dcmplt>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d163      	bne.n	800dce8 <_dtoa_r+0x608>
 800dc20:	4642      	mov	r2, r8
 800dc22:	464b      	mov	r3, r9
 800dc24:	4936      	ldr	r1, [pc, #216]	; (800dd00 <_dtoa_r+0x620>)
 800dc26:	2000      	movs	r0, #0
 800dc28:	f7f2 fb4e 	bl	80002c8 <__aeabi_dsub>
 800dc2c:	4652      	mov	r2, sl
 800dc2e:	465b      	mov	r3, fp
 800dc30:	f7f2 ff74 	bl	8000b1c <__aeabi_dcmplt>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	f040 80b5 	bne.w	800dda4 <_dtoa_r+0x6c4>
 800dc3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc3c:	429d      	cmp	r5, r3
 800dc3e:	d081      	beq.n	800db44 <_dtoa_r+0x464>
 800dc40:	4b30      	ldr	r3, [pc, #192]	; (800dd04 <_dtoa_r+0x624>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	4650      	mov	r0, sl
 800dc46:	4659      	mov	r1, fp
 800dc48:	f7f2 fcf6 	bl	8000638 <__aeabi_dmul>
 800dc4c:	4b2d      	ldr	r3, [pc, #180]	; (800dd04 <_dtoa_r+0x624>)
 800dc4e:	4682      	mov	sl, r0
 800dc50:	468b      	mov	fp, r1
 800dc52:	4640      	mov	r0, r8
 800dc54:	4649      	mov	r1, r9
 800dc56:	2200      	movs	r2, #0
 800dc58:	f7f2 fcee 	bl	8000638 <__aeabi_dmul>
 800dc5c:	4680      	mov	r8, r0
 800dc5e:	4689      	mov	r9, r1
 800dc60:	e7c6      	b.n	800dbf0 <_dtoa_r+0x510>
 800dc62:	4650      	mov	r0, sl
 800dc64:	4659      	mov	r1, fp
 800dc66:	f7f2 fce7 	bl	8000638 <__aeabi_dmul>
 800dc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc6c:	9d01      	ldr	r5, [sp, #4]
 800dc6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc70:	4682      	mov	sl, r0
 800dc72:	468b      	mov	fp, r1
 800dc74:	4649      	mov	r1, r9
 800dc76:	4640      	mov	r0, r8
 800dc78:	f7f2 ff8e 	bl	8000b98 <__aeabi_d2iz>
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	f7f2 fc71 	bl	8000564 <__aeabi_i2d>
 800dc82:	3630      	adds	r6, #48	; 0x30
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	4640      	mov	r0, r8
 800dc8a:	4649      	mov	r1, r9
 800dc8c:	f7f2 fb1c 	bl	80002c8 <__aeabi_dsub>
 800dc90:	f805 6b01 	strb.w	r6, [r5], #1
 800dc94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc96:	429d      	cmp	r5, r3
 800dc98:	4680      	mov	r8, r0
 800dc9a:	4689      	mov	r9, r1
 800dc9c:	f04f 0200 	mov.w	r2, #0
 800dca0:	d124      	bne.n	800dcec <_dtoa_r+0x60c>
 800dca2:	4b1b      	ldr	r3, [pc, #108]	; (800dd10 <_dtoa_r+0x630>)
 800dca4:	4650      	mov	r0, sl
 800dca6:	4659      	mov	r1, fp
 800dca8:	f7f2 fb10 	bl	80002cc <__adddf3>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	f7f2 ff50 	bl	8000b58 <__aeabi_dcmpgt>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d173      	bne.n	800dda4 <_dtoa_r+0x6c4>
 800dcbc:	4652      	mov	r2, sl
 800dcbe:	465b      	mov	r3, fp
 800dcc0:	4913      	ldr	r1, [pc, #76]	; (800dd10 <_dtoa_r+0x630>)
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	f7f2 fb00 	bl	80002c8 <__aeabi_dsub>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4640      	mov	r0, r8
 800dcce:	4649      	mov	r1, r9
 800dcd0:	f7f2 ff24 	bl	8000b1c <__aeabi_dcmplt>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f43f af35 	beq.w	800db44 <_dtoa_r+0x464>
 800dcda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dcdc:	1e6b      	subs	r3, r5, #1
 800dcde:	930f      	str	r3, [sp, #60]	; 0x3c
 800dce0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dce4:	2b30      	cmp	r3, #48	; 0x30
 800dce6:	d0f8      	beq.n	800dcda <_dtoa_r+0x5fa>
 800dce8:	9700      	str	r7, [sp, #0]
 800dcea:	e049      	b.n	800dd80 <_dtoa_r+0x6a0>
 800dcec:	4b05      	ldr	r3, [pc, #20]	; (800dd04 <_dtoa_r+0x624>)
 800dcee:	f7f2 fca3 	bl	8000638 <__aeabi_dmul>
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	4689      	mov	r9, r1
 800dcf6:	e7bd      	b.n	800dc74 <_dtoa_r+0x594>
 800dcf8:	08011e28 	.word	0x08011e28
 800dcfc:	08011e00 	.word	0x08011e00
 800dd00:	3ff00000 	.word	0x3ff00000
 800dd04:	40240000 	.word	0x40240000
 800dd08:	401c0000 	.word	0x401c0000
 800dd0c:	40140000 	.word	0x40140000
 800dd10:	3fe00000 	.word	0x3fe00000
 800dd14:	9d01      	ldr	r5, [sp, #4]
 800dd16:	4656      	mov	r6, sl
 800dd18:	465f      	mov	r7, fp
 800dd1a:	4642      	mov	r2, r8
 800dd1c:	464b      	mov	r3, r9
 800dd1e:	4630      	mov	r0, r6
 800dd20:	4639      	mov	r1, r7
 800dd22:	f7f2 fdb3 	bl	800088c <__aeabi_ddiv>
 800dd26:	f7f2 ff37 	bl	8000b98 <__aeabi_d2iz>
 800dd2a:	4682      	mov	sl, r0
 800dd2c:	f7f2 fc1a 	bl	8000564 <__aeabi_i2d>
 800dd30:	4642      	mov	r2, r8
 800dd32:	464b      	mov	r3, r9
 800dd34:	f7f2 fc80 	bl	8000638 <__aeabi_dmul>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	4639      	mov	r1, r7
 800dd40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dd44:	f7f2 fac0 	bl	80002c8 <__aeabi_dsub>
 800dd48:	f805 6b01 	strb.w	r6, [r5], #1
 800dd4c:	9e01      	ldr	r6, [sp, #4]
 800dd4e:	9f03      	ldr	r7, [sp, #12]
 800dd50:	1bae      	subs	r6, r5, r6
 800dd52:	42b7      	cmp	r7, r6
 800dd54:	4602      	mov	r2, r0
 800dd56:	460b      	mov	r3, r1
 800dd58:	d135      	bne.n	800ddc6 <_dtoa_r+0x6e6>
 800dd5a:	f7f2 fab7 	bl	80002cc <__adddf3>
 800dd5e:	4642      	mov	r2, r8
 800dd60:	464b      	mov	r3, r9
 800dd62:	4606      	mov	r6, r0
 800dd64:	460f      	mov	r7, r1
 800dd66:	f7f2 fef7 	bl	8000b58 <__aeabi_dcmpgt>
 800dd6a:	b9d0      	cbnz	r0, 800dda2 <_dtoa_r+0x6c2>
 800dd6c:	4642      	mov	r2, r8
 800dd6e:	464b      	mov	r3, r9
 800dd70:	4630      	mov	r0, r6
 800dd72:	4639      	mov	r1, r7
 800dd74:	f7f2 fec8 	bl	8000b08 <__aeabi_dcmpeq>
 800dd78:	b110      	cbz	r0, 800dd80 <_dtoa_r+0x6a0>
 800dd7a:	f01a 0f01 	tst.w	sl, #1
 800dd7e:	d110      	bne.n	800dda2 <_dtoa_r+0x6c2>
 800dd80:	4620      	mov	r0, r4
 800dd82:	ee18 1a10 	vmov	r1, s16
 800dd86:	f001 f885 	bl	800ee94 <_Bfree>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	9800      	ldr	r0, [sp, #0]
 800dd8e:	702b      	strb	r3, [r5, #0]
 800dd90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd92:	3001      	adds	r0, #1
 800dd94:	6018      	str	r0, [r3, #0]
 800dd96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f43f acf1 	beq.w	800d780 <_dtoa_r+0xa0>
 800dd9e:	601d      	str	r5, [r3, #0]
 800dda0:	e4ee      	b.n	800d780 <_dtoa_r+0xa0>
 800dda2:	9f00      	ldr	r7, [sp, #0]
 800dda4:	462b      	mov	r3, r5
 800dda6:	461d      	mov	r5, r3
 800dda8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddac:	2a39      	cmp	r2, #57	; 0x39
 800ddae:	d106      	bne.n	800ddbe <_dtoa_r+0x6de>
 800ddb0:	9a01      	ldr	r2, [sp, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d1f7      	bne.n	800dda6 <_dtoa_r+0x6c6>
 800ddb6:	9901      	ldr	r1, [sp, #4]
 800ddb8:	2230      	movs	r2, #48	; 0x30
 800ddba:	3701      	adds	r7, #1
 800ddbc:	700a      	strb	r2, [r1, #0]
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	3201      	adds	r2, #1
 800ddc2:	701a      	strb	r2, [r3, #0]
 800ddc4:	e790      	b.n	800dce8 <_dtoa_r+0x608>
 800ddc6:	4ba6      	ldr	r3, [pc, #664]	; (800e060 <_dtoa_r+0x980>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f7f2 fc35 	bl	8000638 <__aeabi_dmul>
 800ddce:	2200      	movs	r2, #0
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	4606      	mov	r6, r0
 800ddd4:	460f      	mov	r7, r1
 800ddd6:	f7f2 fe97 	bl	8000b08 <__aeabi_dcmpeq>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d09d      	beq.n	800dd1a <_dtoa_r+0x63a>
 800ddde:	e7cf      	b.n	800dd80 <_dtoa_r+0x6a0>
 800dde0:	9a08      	ldr	r2, [sp, #32]
 800dde2:	2a00      	cmp	r2, #0
 800dde4:	f000 80d7 	beq.w	800df96 <_dtoa_r+0x8b6>
 800dde8:	9a06      	ldr	r2, [sp, #24]
 800ddea:	2a01      	cmp	r2, #1
 800ddec:	f300 80ba 	bgt.w	800df64 <_dtoa_r+0x884>
 800ddf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddf2:	2a00      	cmp	r2, #0
 800ddf4:	f000 80b2 	beq.w	800df5c <_dtoa_r+0x87c>
 800ddf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ddfc:	9e07      	ldr	r6, [sp, #28]
 800ddfe:	9d04      	ldr	r5, [sp, #16]
 800de00:	9a04      	ldr	r2, [sp, #16]
 800de02:	441a      	add	r2, r3
 800de04:	9204      	str	r2, [sp, #16]
 800de06:	9a05      	ldr	r2, [sp, #20]
 800de08:	2101      	movs	r1, #1
 800de0a:	441a      	add	r2, r3
 800de0c:	4620      	mov	r0, r4
 800de0e:	9205      	str	r2, [sp, #20]
 800de10:	f001 f942 	bl	800f098 <__i2b>
 800de14:	4607      	mov	r7, r0
 800de16:	2d00      	cmp	r5, #0
 800de18:	dd0c      	ble.n	800de34 <_dtoa_r+0x754>
 800de1a:	9b05      	ldr	r3, [sp, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	dd09      	ble.n	800de34 <_dtoa_r+0x754>
 800de20:	42ab      	cmp	r3, r5
 800de22:	9a04      	ldr	r2, [sp, #16]
 800de24:	bfa8      	it	ge
 800de26:	462b      	movge	r3, r5
 800de28:	1ad2      	subs	r2, r2, r3
 800de2a:	9204      	str	r2, [sp, #16]
 800de2c:	9a05      	ldr	r2, [sp, #20]
 800de2e:	1aed      	subs	r5, r5, r3
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	9305      	str	r3, [sp, #20]
 800de34:	9b07      	ldr	r3, [sp, #28]
 800de36:	b31b      	cbz	r3, 800de80 <_dtoa_r+0x7a0>
 800de38:	9b08      	ldr	r3, [sp, #32]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 80af 	beq.w	800df9e <_dtoa_r+0x8be>
 800de40:	2e00      	cmp	r6, #0
 800de42:	dd13      	ble.n	800de6c <_dtoa_r+0x78c>
 800de44:	4639      	mov	r1, r7
 800de46:	4632      	mov	r2, r6
 800de48:	4620      	mov	r0, r4
 800de4a:	f001 f9e5 	bl	800f218 <__pow5mult>
 800de4e:	ee18 2a10 	vmov	r2, s16
 800de52:	4601      	mov	r1, r0
 800de54:	4607      	mov	r7, r0
 800de56:	4620      	mov	r0, r4
 800de58:	f001 f934 	bl	800f0c4 <__multiply>
 800de5c:	ee18 1a10 	vmov	r1, s16
 800de60:	4680      	mov	r8, r0
 800de62:	4620      	mov	r0, r4
 800de64:	f001 f816 	bl	800ee94 <_Bfree>
 800de68:	ee08 8a10 	vmov	s16, r8
 800de6c:	9b07      	ldr	r3, [sp, #28]
 800de6e:	1b9a      	subs	r2, r3, r6
 800de70:	d006      	beq.n	800de80 <_dtoa_r+0x7a0>
 800de72:	ee18 1a10 	vmov	r1, s16
 800de76:	4620      	mov	r0, r4
 800de78:	f001 f9ce 	bl	800f218 <__pow5mult>
 800de7c:	ee08 0a10 	vmov	s16, r0
 800de80:	2101      	movs	r1, #1
 800de82:	4620      	mov	r0, r4
 800de84:	f001 f908 	bl	800f098 <__i2b>
 800de88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	4606      	mov	r6, r0
 800de8e:	f340 8088 	ble.w	800dfa2 <_dtoa_r+0x8c2>
 800de92:	461a      	mov	r2, r3
 800de94:	4601      	mov	r1, r0
 800de96:	4620      	mov	r0, r4
 800de98:	f001 f9be 	bl	800f218 <__pow5mult>
 800de9c:	9b06      	ldr	r3, [sp, #24]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	4606      	mov	r6, r0
 800dea2:	f340 8081 	ble.w	800dfa8 <_dtoa_r+0x8c8>
 800dea6:	f04f 0800 	mov.w	r8, #0
 800deaa:	6933      	ldr	r3, [r6, #16]
 800deac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800deb0:	6918      	ldr	r0, [r3, #16]
 800deb2:	f001 f8a1 	bl	800eff8 <__hi0bits>
 800deb6:	f1c0 0020 	rsb	r0, r0, #32
 800deba:	9b05      	ldr	r3, [sp, #20]
 800debc:	4418      	add	r0, r3
 800debe:	f010 001f 	ands.w	r0, r0, #31
 800dec2:	f000 8092 	beq.w	800dfea <_dtoa_r+0x90a>
 800dec6:	f1c0 0320 	rsb	r3, r0, #32
 800deca:	2b04      	cmp	r3, #4
 800decc:	f340 808a 	ble.w	800dfe4 <_dtoa_r+0x904>
 800ded0:	f1c0 001c 	rsb	r0, r0, #28
 800ded4:	9b04      	ldr	r3, [sp, #16]
 800ded6:	4403      	add	r3, r0
 800ded8:	9304      	str	r3, [sp, #16]
 800deda:	9b05      	ldr	r3, [sp, #20]
 800dedc:	4403      	add	r3, r0
 800dede:	4405      	add	r5, r0
 800dee0:	9305      	str	r3, [sp, #20]
 800dee2:	9b04      	ldr	r3, [sp, #16]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dd07      	ble.n	800def8 <_dtoa_r+0x818>
 800dee8:	ee18 1a10 	vmov	r1, s16
 800deec:	461a      	mov	r2, r3
 800deee:	4620      	mov	r0, r4
 800def0:	f001 f9ec 	bl	800f2cc <__lshift>
 800def4:	ee08 0a10 	vmov	s16, r0
 800def8:	9b05      	ldr	r3, [sp, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	dd05      	ble.n	800df0a <_dtoa_r+0x82a>
 800defe:	4631      	mov	r1, r6
 800df00:	461a      	mov	r2, r3
 800df02:	4620      	mov	r0, r4
 800df04:	f001 f9e2 	bl	800f2cc <__lshift>
 800df08:	4606      	mov	r6, r0
 800df0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d06e      	beq.n	800dfee <_dtoa_r+0x90e>
 800df10:	ee18 0a10 	vmov	r0, s16
 800df14:	4631      	mov	r1, r6
 800df16:	f001 fa49 	bl	800f3ac <__mcmp>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	da67      	bge.n	800dfee <_dtoa_r+0x90e>
 800df1e:	9b00      	ldr	r3, [sp, #0]
 800df20:	3b01      	subs	r3, #1
 800df22:	ee18 1a10 	vmov	r1, s16
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	220a      	movs	r2, #10
 800df2a:	2300      	movs	r3, #0
 800df2c:	4620      	mov	r0, r4
 800df2e:	f000 ffd3 	bl	800eed8 <__multadd>
 800df32:	9b08      	ldr	r3, [sp, #32]
 800df34:	ee08 0a10 	vmov	s16, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 81b1 	beq.w	800e2a0 <_dtoa_r+0xbc0>
 800df3e:	2300      	movs	r3, #0
 800df40:	4639      	mov	r1, r7
 800df42:	220a      	movs	r2, #10
 800df44:	4620      	mov	r0, r4
 800df46:	f000 ffc7 	bl	800eed8 <__multadd>
 800df4a:	9b02      	ldr	r3, [sp, #8]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	4607      	mov	r7, r0
 800df50:	f300 808e 	bgt.w	800e070 <_dtoa_r+0x990>
 800df54:	9b06      	ldr	r3, [sp, #24]
 800df56:	2b02      	cmp	r3, #2
 800df58:	dc51      	bgt.n	800dffe <_dtoa_r+0x91e>
 800df5a:	e089      	b.n	800e070 <_dtoa_r+0x990>
 800df5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df62:	e74b      	b.n	800ddfc <_dtoa_r+0x71c>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	1e5e      	subs	r6, r3, #1
 800df68:	9b07      	ldr	r3, [sp, #28]
 800df6a:	42b3      	cmp	r3, r6
 800df6c:	bfbf      	itttt	lt
 800df6e:	9b07      	ldrlt	r3, [sp, #28]
 800df70:	9607      	strlt	r6, [sp, #28]
 800df72:	1af2      	sublt	r2, r6, r3
 800df74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800df76:	bfb6      	itet	lt
 800df78:	189b      	addlt	r3, r3, r2
 800df7a:	1b9e      	subge	r6, r3, r6
 800df7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800df7e:	9b03      	ldr	r3, [sp, #12]
 800df80:	bfb8      	it	lt
 800df82:	2600      	movlt	r6, #0
 800df84:	2b00      	cmp	r3, #0
 800df86:	bfb7      	itett	lt
 800df88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800df8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800df90:	1a9d      	sublt	r5, r3, r2
 800df92:	2300      	movlt	r3, #0
 800df94:	e734      	b.n	800de00 <_dtoa_r+0x720>
 800df96:	9e07      	ldr	r6, [sp, #28]
 800df98:	9d04      	ldr	r5, [sp, #16]
 800df9a:	9f08      	ldr	r7, [sp, #32]
 800df9c:	e73b      	b.n	800de16 <_dtoa_r+0x736>
 800df9e:	9a07      	ldr	r2, [sp, #28]
 800dfa0:	e767      	b.n	800de72 <_dtoa_r+0x792>
 800dfa2:	9b06      	ldr	r3, [sp, #24]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	dc18      	bgt.n	800dfda <_dtoa_r+0x8fa>
 800dfa8:	f1ba 0f00 	cmp.w	sl, #0
 800dfac:	d115      	bne.n	800dfda <_dtoa_r+0x8fa>
 800dfae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfb2:	b993      	cbnz	r3, 800dfda <_dtoa_r+0x8fa>
 800dfb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfb8:	0d1b      	lsrs	r3, r3, #20
 800dfba:	051b      	lsls	r3, r3, #20
 800dfbc:	b183      	cbz	r3, 800dfe0 <_dtoa_r+0x900>
 800dfbe:	9b04      	ldr	r3, [sp, #16]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	9304      	str	r3, [sp, #16]
 800dfc4:	9b05      	ldr	r3, [sp, #20]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	9305      	str	r3, [sp, #20]
 800dfca:	f04f 0801 	mov.w	r8, #1
 800dfce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f47f af6a 	bne.w	800deaa <_dtoa_r+0x7ca>
 800dfd6:	2001      	movs	r0, #1
 800dfd8:	e76f      	b.n	800deba <_dtoa_r+0x7da>
 800dfda:	f04f 0800 	mov.w	r8, #0
 800dfde:	e7f6      	b.n	800dfce <_dtoa_r+0x8ee>
 800dfe0:	4698      	mov	r8, r3
 800dfe2:	e7f4      	b.n	800dfce <_dtoa_r+0x8ee>
 800dfe4:	f43f af7d 	beq.w	800dee2 <_dtoa_r+0x802>
 800dfe8:	4618      	mov	r0, r3
 800dfea:	301c      	adds	r0, #28
 800dfec:	e772      	b.n	800ded4 <_dtoa_r+0x7f4>
 800dfee:	9b03      	ldr	r3, [sp, #12]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dc37      	bgt.n	800e064 <_dtoa_r+0x984>
 800dff4:	9b06      	ldr	r3, [sp, #24]
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	dd34      	ble.n	800e064 <_dtoa_r+0x984>
 800dffa:	9b03      	ldr	r3, [sp, #12]
 800dffc:	9302      	str	r3, [sp, #8]
 800dffe:	9b02      	ldr	r3, [sp, #8]
 800e000:	b96b      	cbnz	r3, 800e01e <_dtoa_r+0x93e>
 800e002:	4631      	mov	r1, r6
 800e004:	2205      	movs	r2, #5
 800e006:	4620      	mov	r0, r4
 800e008:	f000 ff66 	bl	800eed8 <__multadd>
 800e00c:	4601      	mov	r1, r0
 800e00e:	4606      	mov	r6, r0
 800e010:	ee18 0a10 	vmov	r0, s16
 800e014:	f001 f9ca 	bl	800f3ac <__mcmp>
 800e018:	2800      	cmp	r0, #0
 800e01a:	f73f adbb 	bgt.w	800db94 <_dtoa_r+0x4b4>
 800e01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e020:	9d01      	ldr	r5, [sp, #4]
 800e022:	43db      	mvns	r3, r3
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	f04f 0800 	mov.w	r8, #0
 800e02a:	4631      	mov	r1, r6
 800e02c:	4620      	mov	r0, r4
 800e02e:	f000 ff31 	bl	800ee94 <_Bfree>
 800e032:	2f00      	cmp	r7, #0
 800e034:	f43f aea4 	beq.w	800dd80 <_dtoa_r+0x6a0>
 800e038:	f1b8 0f00 	cmp.w	r8, #0
 800e03c:	d005      	beq.n	800e04a <_dtoa_r+0x96a>
 800e03e:	45b8      	cmp	r8, r7
 800e040:	d003      	beq.n	800e04a <_dtoa_r+0x96a>
 800e042:	4641      	mov	r1, r8
 800e044:	4620      	mov	r0, r4
 800e046:	f000 ff25 	bl	800ee94 <_Bfree>
 800e04a:	4639      	mov	r1, r7
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 ff21 	bl	800ee94 <_Bfree>
 800e052:	e695      	b.n	800dd80 <_dtoa_r+0x6a0>
 800e054:	2600      	movs	r6, #0
 800e056:	4637      	mov	r7, r6
 800e058:	e7e1      	b.n	800e01e <_dtoa_r+0x93e>
 800e05a:	9700      	str	r7, [sp, #0]
 800e05c:	4637      	mov	r7, r6
 800e05e:	e599      	b.n	800db94 <_dtoa_r+0x4b4>
 800e060:	40240000 	.word	0x40240000
 800e064:	9b08      	ldr	r3, [sp, #32]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f000 80ca 	beq.w	800e200 <_dtoa_r+0xb20>
 800e06c:	9b03      	ldr	r3, [sp, #12]
 800e06e:	9302      	str	r3, [sp, #8]
 800e070:	2d00      	cmp	r5, #0
 800e072:	dd05      	ble.n	800e080 <_dtoa_r+0x9a0>
 800e074:	4639      	mov	r1, r7
 800e076:	462a      	mov	r2, r5
 800e078:	4620      	mov	r0, r4
 800e07a:	f001 f927 	bl	800f2cc <__lshift>
 800e07e:	4607      	mov	r7, r0
 800e080:	f1b8 0f00 	cmp.w	r8, #0
 800e084:	d05b      	beq.n	800e13e <_dtoa_r+0xa5e>
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	4620      	mov	r0, r4
 800e08a:	f000 fec3 	bl	800ee14 <_Balloc>
 800e08e:	4605      	mov	r5, r0
 800e090:	b928      	cbnz	r0, 800e09e <_dtoa_r+0x9be>
 800e092:	4b87      	ldr	r3, [pc, #540]	; (800e2b0 <_dtoa_r+0xbd0>)
 800e094:	4602      	mov	r2, r0
 800e096:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e09a:	f7ff bb3b 	b.w	800d714 <_dtoa_r+0x34>
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	3202      	adds	r2, #2
 800e0a2:	0092      	lsls	r2, r2, #2
 800e0a4:	f107 010c 	add.w	r1, r7, #12
 800e0a8:	300c      	adds	r0, #12
 800e0aa:	f7fd fe01 	bl	800bcb0 <memcpy>
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f001 f90a 	bl	800f2cc <__lshift>
 800e0b8:	9b01      	ldr	r3, [sp, #4]
 800e0ba:	f103 0901 	add.w	r9, r3, #1
 800e0be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	f00a 0301 	and.w	r3, sl, #1
 800e0ca:	46b8      	mov	r8, r7
 800e0cc:	9304      	str	r3, [sp, #16]
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	4631      	mov	r1, r6
 800e0d2:	ee18 0a10 	vmov	r0, s16
 800e0d6:	f7ff fa75 	bl	800d5c4 <quorem>
 800e0da:	4641      	mov	r1, r8
 800e0dc:	9002      	str	r0, [sp, #8]
 800e0de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e0e2:	ee18 0a10 	vmov	r0, s16
 800e0e6:	f001 f961 	bl	800f3ac <__mcmp>
 800e0ea:	463a      	mov	r2, r7
 800e0ec:	9003      	str	r0, [sp, #12]
 800e0ee:	4631      	mov	r1, r6
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f001 f977 	bl	800f3e4 <__mdiff>
 800e0f6:	68c2      	ldr	r2, [r0, #12]
 800e0f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	bb02      	cbnz	r2, 800e142 <_dtoa_r+0xa62>
 800e100:	4601      	mov	r1, r0
 800e102:	ee18 0a10 	vmov	r0, s16
 800e106:	f001 f951 	bl	800f3ac <__mcmp>
 800e10a:	4602      	mov	r2, r0
 800e10c:	4629      	mov	r1, r5
 800e10e:	4620      	mov	r0, r4
 800e110:	9207      	str	r2, [sp, #28]
 800e112:	f000 febf 	bl	800ee94 <_Bfree>
 800e116:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e11a:	ea43 0102 	orr.w	r1, r3, r2
 800e11e:	9b04      	ldr	r3, [sp, #16]
 800e120:	430b      	orrs	r3, r1
 800e122:	464d      	mov	r5, r9
 800e124:	d10f      	bne.n	800e146 <_dtoa_r+0xa66>
 800e126:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e12a:	d02a      	beq.n	800e182 <_dtoa_r+0xaa2>
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	dd02      	ble.n	800e138 <_dtoa_r+0xa58>
 800e132:	9b02      	ldr	r3, [sp, #8]
 800e134:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e138:	f88b a000 	strb.w	sl, [fp]
 800e13c:	e775      	b.n	800e02a <_dtoa_r+0x94a>
 800e13e:	4638      	mov	r0, r7
 800e140:	e7ba      	b.n	800e0b8 <_dtoa_r+0x9d8>
 800e142:	2201      	movs	r2, #1
 800e144:	e7e2      	b.n	800e10c <_dtoa_r+0xa2c>
 800e146:	9b03      	ldr	r3, [sp, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	db04      	blt.n	800e156 <_dtoa_r+0xa76>
 800e14c:	9906      	ldr	r1, [sp, #24]
 800e14e:	430b      	orrs	r3, r1
 800e150:	9904      	ldr	r1, [sp, #16]
 800e152:	430b      	orrs	r3, r1
 800e154:	d122      	bne.n	800e19c <_dtoa_r+0xabc>
 800e156:	2a00      	cmp	r2, #0
 800e158:	ddee      	ble.n	800e138 <_dtoa_r+0xa58>
 800e15a:	ee18 1a10 	vmov	r1, s16
 800e15e:	2201      	movs	r2, #1
 800e160:	4620      	mov	r0, r4
 800e162:	f001 f8b3 	bl	800f2cc <__lshift>
 800e166:	4631      	mov	r1, r6
 800e168:	ee08 0a10 	vmov	s16, r0
 800e16c:	f001 f91e 	bl	800f3ac <__mcmp>
 800e170:	2800      	cmp	r0, #0
 800e172:	dc03      	bgt.n	800e17c <_dtoa_r+0xa9c>
 800e174:	d1e0      	bne.n	800e138 <_dtoa_r+0xa58>
 800e176:	f01a 0f01 	tst.w	sl, #1
 800e17a:	d0dd      	beq.n	800e138 <_dtoa_r+0xa58>
 800e17c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e180:	d1d7      	bne.n	800e132 <_dtoa_r+0xa52>
 800e182:	2339      	movs	r3, #57	; 0x39
 800e184:	f88b 3000 	strb.w	r3, [fp]
 800e188:	462b      	mov	r3, r5
 800e18a:	461d      	mov	r5, r3
 800e18c:	3b01      	subs	r3, #1
 800e18e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e192:	2a39      	cmp	r2, #57	; 0x39
 800e194:	d071      	beq.n	800e27a <_dtoa_r+0xb9a>
 800e196:	3201      	adds	r2, #1
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	e746      	b.n	800e02a <_dtoa_r+0x94a>
 800e19c:	2a00      	cmp	r2, #0
 800e19e:	dd07      	ble.n	800e1b0 <_dtoa_r+0xad0>
 800e1a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1a4:	d0ed      	beq.n	800e182 <_dtoa_r+0xaa2>
 800e1a6:	f10a 0301 	add.w	r3, sl, #1
 800e1aa:	f88b 3000 	strb.w	r3, [fp]
 800e1ae:	e73c      	b.n	800e02a <_dtoa_r+0x94a>
 800e1b0:	9b05      	ldr	r3, [sp, #20]
 800e1b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e1b6:	4599      	cmp	r9, r3
 800e1b8:	d047      	beq.n	800e24a <_dtoa_r+0xb6a>
 800e1ba:	ee18 1a10 	vmov	r1, s16
 800e1be:	2300      	movs	r3, #0
 800e1c0:	220a      	movs	r2, #10
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 fe88 	bl	800eed8 <__multadd>
 800e1c8:	45b8      	cmp	r8, r7
 800e1ca:	ee08 0a10 	vmov	s16, r0
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	f04f 020a 	mov.w	r2, #10
 800e1d6:	4641      	mov	r1, r8
 800e1d8:	4620      	mov	r0, r4
 800e1da:	d106      	bne.n	800e1ea <_dtoa_r+0xb0a>
 800e1dc:	f000 fe7c 	bl	800eed8 <__multadd>
 800e1e0:	4680      	mov	r8, r0
 800e1e2:	4607      	mov	r7, r0
 800e1e4:	f109 0901 	add.w	r9, r9, #1
 800e1e8:	e772      	b.n	800e0d0 <_dtoa_r+0x9f0>
 800e1ea:	f000 fe75 	bl	800eed8 <__multadd>
 800e1ee:	4639      	mov	r1, r7
 800e1f0:	4680      	mov	r8, r0
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	220a      	movs	r2, #10
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f000 fe6e 	bl	800eed8 <__multadd>
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	e7f1      	b.n	800e1e4 <_dtoa_r+0xb04>
 800e200:	9b03      	ldr	r3, [sp, #12]
 800e202:	9302      	str	r3, [sp, #8]
 800e204:	9d01      	ldr	r5, [sp, #4]
 800e206:	ee18 0a10 	vmov	r0, s16
 800e20a:	4631      	mov	r1, r6
 800e20c:	f7ff f9da 	bl	800d5c4 <quorem>
 800e210:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e214:	9b01      	ldr	r3, [sp, #4]
 800e216:	f805 ab01 	strb.w	sl, [r5], #1
 800e21a:	1aea      	subs	r2, r5, r3
 800e21c:	9b02      	ldr	r3, [sp, #8]
 800e21e:	4293      	cmp	r3, r2
 800e220:	dd09      	ble.n	800e236 <_dtoa_r+0xb56>
 800e222:	ee18 1a10 	vmov	r1, s16
 800e226:	2300      	movs	r3, #0
 800e228:	220a      	movs	r2, #10
 800e22a:	4620      	mov	r0, r4
 800e22c:	f000 fe54 	bl	800eed8 <__multadd>
 800e230:	ee08 0a10 	vmov	s16, r0
 800e234:	e7e7      	b.n	800e206 <_dtoa_r+0xb26>
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	bfc8      	it	gt
 800e23c:	461d      	movgt	r5, r3
 800e23e:	9b01      	ldr	r3, [sp, #4]
 800e240:	bfd8      	it	le
 800e242:	2501      	movle	r5, #1
 800e244:	441d      	add	r5, r3
 800e246:	f04f 0800 	mov.w	r8, #0
 800e24a:	ee18 1a10 	vmov	r1, s16
 800e24e:	2201      	movs	r2, #1
 800e250:	4620      	mov	r0, r4
 800e252:	f001 f83b 	bl	800f2cc <__lshift>
 800e256:	4631      	mov	r1, r6
 800e258:	ee08 0a10 	vmov	s16, r0
 800e25c:	f001 f8a6 	bl	800f3ac <__mcmp>
 800e260:	2800      	cmp	r0, #0
 800e262:	dc91      	bgt.n	800e188 <_dtoa_r+0xaa8>
 800e264:	d102      	bne.n	800e26c <_dtoa_r+0xb8c>
 800e266:	f01a 0f01 	tst.w	sl, #1
 800e26a:	d18d      	bne.n	800e188 <_dtoa_r+0xaa8>
 800e26c:	462b      	mov	r3, r5
 800e26e:	461d      	mov	r5, r3
 800e270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e274:	2a30      	cmp	r2, #48	; 0x30
 800e276:	d0fa      	beq.n	800e26e <_dtoa_r+0xb8e>
 800e278:	e6d7      	b.n	800e02a <_dtoa_r+0x94a>
 800e27a:	9a01      	ldr	r2, [sp, #4]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d184      	bne.n	800e18a <_dtoa_r+0xaaa>
 800e280:	9b00      	ldr	r3, [sp, #0]
 800e282:	3301      	adds	r3, #1
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	2331      	movs	r3, #49	; 0x31
 800e288:	7013      	strb	r3, [r2, #0]
 800e28a:	e6ce      	b.n	800e02a <_dtoa_r+0x94a>
 800e28c:	4b09      	ldr	r3, [pc, #36]	; (800e2b4 <_dtoa_r+0xbd4>)
 800e28e:	f7ff ba95 	b.w	800d7bc <_dtoa_r+0xdc>
 800e292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e294:	2b00      	cmp	r3, #0
 800e296:	f47f aa6e 	bne.w	800d776 <_dtoa_r+0x96>
 800e29a:	4b07      	ldr	r3, [pc, #28]	; (800e2b8 <_dtoa_r+0xbd8>)
 800e29c:	f7ff ba8e 	b.w	800d7bc <_dtoa_r+0xdc>
 800e2a0:	9b02      	ldr	r3, [sp, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	dcae      	bgt.n	800e204 <_dtoa_r+0xb24>
 800e2a6:	9b06      	ldr	r3, [sp, #24]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	f73f aea8 	bgt.w	800dffe <_dtoa_r+0x91e>
 800e2ae:	e7a9      	b.n	800e204 <_dtoa_r+0xb24>
 800e2b0:	08011cb0 	.word	0x08011cb0
 800e2b4:	08011ab8 	.word	0x08011ab8
 800e2b8:	08011c31 	.word	0x08011c31

0800e2bc <__sflush_r>:
 800e2bc:	898a      	ldrh	r2, [r1, #12]
 800e2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	0710      	lsls	r0, r2, #28
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	d458      	bmi.n	800e37c <__sflush_r+0xc0>
 800e2ca:	684b      	ldr	r3, [r1, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	dc05      	bgt.n	800e2dc <__sflush_r+0x20>
 800e2d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	dc02      	bgt.n	800e2dc <__sflush_r+0x20>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2de:	2e00      	cmp	r6, #0
 800e2e0:	d0f9      	beq.n	800e2d6 <__sflush_r+0x1a>
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e2e8:	682f      	ldr	r7, [r5, #0]
 800e2ea:	602b      	str	r3, [r5, #0]
 800e2ec:	d032      	beq.n	800e354 <__sflush_r+0x98>
 800e2ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	075a      	lsls	r2, r3, #29
 800e2f4:	d505      	bpl.n	800e302 <__sflush_r+0x46>
 800e2f6:	6863      	ldr	r3, [r4, #4]
 800e2f8:	1ac0      	subs	r0, r0, r3
 800e2fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2fc:	b10b      	cbz	r3, 800e302 <__sflush_r+0x46>
 800e2fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e300:	1ac0      	subs	r0, r0, r3
 800e302:	2300      	movs	r3, #0
 800e304:	4602      	mov	r2, r0
 800e306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e308:	6a21      	ldr	r1, [r4, #32]
 800e30a:	4628      	mov	r0, r5
 800e30c:	47b0      	blx	r6
 800e30e:	1c43      	adds	r3, r0, #1
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	d106      	bne.n	800e322 <__sflush_r+0x66>
 800e314:	6829      	ldr	r1, [r5, #0]
 800e316:	291d      	cmp	r1, #29
 800e318:	d82c      	bhi.n	800e374 <__sflush_r+0xb8>
 800e31a:	4a2a      	ldr	r2, [pc, #168]	; (800e3c4 <__sflush_r+0x108>)
 800e31c:	40ca      	lsrs	r2, r1
 800e31e:	07d6      	lsls	r6, r2, #31
 800e320:	d528      	bpl.n	800e374 <__sflush_r+0xb8>
 800e322:	2200      	movs	r2, #0
 800e324:	6062      	str	r2, [r4, #4]
 800e326:	04d9      	lsls	r1, r3, #19
 800e328:	6922      	ldr	r2, [r4, #16]
 800e32a:	6022      	str	r2, [r4, #0]
 800e32c:	d504      	bpl.n	800e338 <__sflush_r+0x7c>
 800e32e:	1c42      	adds	r2, r0, #1
 800e330:	d101      	bne.n	800e336 <__sflush_r+0x7a>
 800e332:	682b      	ldr	r3, [r5, #0]
 800e334:	b903      	cbnz	r3, 800e338 <__sflush_r+0x7c>
 800e336:	6560      	str	r0, [r4, #84]	; 0x54
 800e338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e33a:	602f      	str	r7, [r5, #0]
 800e33c:	2900      	cmp	r1, #0
 800e33e:	d0ca      	beq.n	800e2d6 <__sflush_r+0x1a>
 800e340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e344:	4299      	cmp	r1, r3
 800e346:	d002      	beq.n	800e34e <__sflush_r+0x92>
 800e348:	4628      	mov	r0, r5
 800e34a:	f001 fa3b 	bl	800f7c4 <_free_r>
 800e34e:	2000      	movs	r0, #0
 800e350:	6360      	str	r0, [r4, #52]	; 0x34
 800e352:	e7c1      	b.n	800e2d8 <__sflush_r+0x1c>
 800e354:	6a21      	ldr	r1, [r4, #32]
 800e356:	2301      	movs	r3, #1
 800e358:	4628      	mov	r0, r5
 800e35a:	47b0      	blx	r6
 800e35c:	1c41      	adds	r1, r0, #1
 800e35e:	d1c7      	bne.n	800e2f0 <__sflush_r+0x34>
 800e360:	682b      	ldr	r3, [r5, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d0c4      	beq.n	800e2f0 <__sflush_r+0x34>
 800e366:	2b1d      	cmp	r3, #29
 800e368:	d001      	beq.n	800e36e <__sflush_r+0xb2>
 800e36a:	2b16      	cmp	r3, #22
 800e36c:	d101      	bne.n	800e372 <__sflush_r+0xb6>
 800e36e:	602f      	str	r7, [r5, #0]
 800e370:	e7b1      	b.n	800e2d6 <__sflush_r+0x1a>
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	e7ad      	b.n	800e2d8 <__sflush_r+0x1c>
 800e37c:	690f      	ldr	r7, [r1, #16]
 800e37e:	2f00      	cmp	r7, #0
 800e380:	d0a9      	beq.n	800e2d6 <__sflush_r+0x1a>
 800e382:	0793      	lsls	r3, r2, #30
 800e384:	680e      	ldr	r6, [r1, #0]
 800e386:	bf08      	it	eq
 800e388:	694b      	ldreq	r3, [r1, #20]
 800e38a:	600f      	str	r7, [r1, #0]
 800e38c:	bf18      	it	ne
 800e38e:	2300      	movne	r3, #0
 800e390:	eba6 0807 	sub.w	r8, r6, r7
 800e394:	608b      	str	r3, [r1, #8]
 800e396:	f1b8 0f00 	cmp.w	r8, #0
 800e39a:	dd9c      	ble.n	800e2d6 <__sflush_r+0x1a>
 800e39c:	6a21      	ldr	r1, [r4, #32]
 800e39e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3a0:	4643      	mov	r3, r8
 800e3a2:	463a      	mov	r2, r7
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	47b0      	blx	r6
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	dc06      	bgt.n	800e3ba <__sflush_r+0xfe>
 800e3ac:	89a3      	ldrh	r3, [r4, #12]
 800e3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b2:	81a3      	strh	r3, [r4, #12]
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3b8:	e78e      	b.n	800e2d8 <__sflush_r+0x1c>
 800e3ba:	4407      	add	r7, r0
 800e3bc:	eba8 0800 	sub.w	r8, r8, r0
 800e3c0:	e7e9      	b.n	800e396 <__sflush_r+0xda>
 800e3c2:	bf00      	nop
 800e3c4:	20400001 	.word	0x20400001

0800e3c8 <_fflush_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	690b      	ldr	r3, [r1, #16]
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	b913      	cbnz	r3, 800e3d8 <_fflush_r+0x10>
 800e3d2:	2500      	movs	r5, #0
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	bd38      	pop	{r3, r4, r5, pc}
 800e3d8:	b118      	cbz	r0, 800e3e2 <_fflush_r+0x1a>
 800e3da:	6983      	ldr	r3, [r0, #24]
 800e3dc:	b90b      	cbnz	r3, 800e3e2 <_fflush_r+0x1a>
 800e3de:	f000 f887 	bl	800e4f0 <__sinit>
 800e3e2:	4b14      	ldr	r3, [pc, #80]	; (800e434 <_fflush_r+0x6c>)
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	d11b      	bne.n	800e420 <_fflush_r+0x58>
 800e3e8:	686c      	ldr	r4, [r5, #4]
 800e3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d0ef      	beq.n	800e3d2 <_fflush_r+0xa>
 800e3f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e3f4:	07d0      	lsls	r0, r2, #31
 800e3f6:	d404      	bmi.n	800e402 <_fflush_r+0x3a>
 800e3f8:	0599      	lsls	r1, r3, #22
 800e3fa:	d402      	bmi.n	800e402 <_fflush_r+0x3a>
 800e3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3fe:	f000 fc88 	bl	800ed12 <__retarget_lock_acquire_recursive>
 800e402:	4628      	mov	r0, r5
 800e404:	4621      	mov	r1, r4
 800e406:	f7ff ff59 	bl	800e2bc <__sflush_r>
 800e40a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e40c:	07da      	lsls	r2, r3, #31
 800e40e:	4605      	mov	r5, r0
 800e410:	d4e0      	bmi.n	800e3d4 <_fflush_r+0xc>
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	059b      	lsls	r3, r3, #22
 800e416:	d4dd      	bmi.n	800e3d4 <_fflush_r+0xc>
 800e418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e41a:	f000 fc7b 	bl	800ed14 <__retarget_lock_release_recursive>
 800e41e:	e7d9      	b.n	800e3d4 <_fflush_r+0xc>
 800e420:	4b05      	ldr	r3, [pc, #20]	; (800e438 <_fflush_r+0x70>)
 800e422:	429c      	cmp	r4, r3
 800e424:	d101      	bne.n	800e42a <_fflush_r+0x62>
 800e426:	68ac      	ldr	r4, [r5, #8]
 800e428:	e7df      	b.n	800e3ea <_fflush_r+0x22>
 800e42a:	4b04      	ldr	r3, [pc, #16]	; (800e43c <_fflush_r+0x74>)
 800e42c:	429c      	cmp	r4, r3
 800e42e:	bf08      	it	eq
 800e430:	68ec      	ldreq	r4, [r5, #12]
 800e432:	e7da      	b.n	800e3ea <_fflush_r+0x22>
 800e434:	08011ce4 	.word	0x08011ce4
 800e438:	08011d04 	.word	0x08011d04
 800e43c:	08011cc4 	.word	0x08011cc4

0800e440 <std>:
 800e440:	2300      	movs	r3, #0
 800e442:	b510      	push	{r4, lr}
 800e444:	4604      	mov	r4, r0
 800e446:	e9c0 3300 	strd	r3, r3, [r0]
 800e44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e44e:	6083      	str	r3, [r0, #8]
 800e450:	8181      	strh	r1, [r0, #12]
 800e452:	6643      	str	r3, [r0, #100]	; 0x64
 800e454:	81c2      	strh	r2, [r0, #14]
 800e456:	6183      	str	r3, [r0, #24]
 800e458:	4619      	mov	r1, r3
 800e45a:	2208      	movs	r2, #8
 800e45c:	305c      	adds	r0, #92	; 0x5c
 800e45e:	f7fd fc35 	bl	800bccc <memset>
 800e462:	4b05      	ldr	r3, [pc, #20]	; (800e478 <std+0x38>)
 800e464:	6263      	str	r3, [r4, #36]	; 0x24
 800e466:	4b05      	ldr	r3, [pc, #20]	; (800e47c <std+0x3c>)
 800e468:	62a3      	str	r3, [r4, #40]	; 0x28
 800e46a:	4b05      	ldr	r3, [pc, #20]	; (800e480 <std+0x40>)
 800e46c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e46e:	4b05      	ldr	r3, [pc, #20]	; (800e484 <std+0x44>)
 800e470:	6224      	str	r4, [r4, #32]
 800e472:	6323      	str	r3, [r4, #48]	; 0x30
 800e474:	bd10      	pop	{r4, pc}
 800e476:	bf00      	nop
 800e478:	0800fc69 	.word	0x0800fc69
 800e47c:	0800fc8b 	.word	0x0800fc8b
 800e480:	0800fcc3 	.word	0x0800fcc3
 800e484:	0800fce7 	.word	0x0800fce7

0800e488 <_cleanup_r>:
 800e488:	4901      	ldr	r1, [pc, #4]	; (800e490 <_cleanup_r+0x8>)
 800e48a:	f000 b8af 	b.w	800e5ec <_fwalk_reent>
 800e48e:	bf00      	nop
 800e490:	0800e3c9 	.word	0x0800e3c9

0800e494 <__sfmoreglue>:
 800e494:	b570      	push	{r4, r5, r6, lr}
 800e496:	2268      	movs	r2, #104	; 0x68
 800e498:	1e4d      	subs	r5, r1, #1
 800e49a:	4355      	muls	r5, r2
 800e49c:	460e      	mov	r6, r1
 800e49e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4a2:	f001 f9fb 	bl	800f89c <_malloc_r>
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	b140      	cbz	r0, 800e4bc <__sfmoreglue+0x28>
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	e9c0 1600 	strd	r1, r6, [r0]
 800e4b0:	300c      	adds	r0, #12
 800e4b2:	60a0      	str	r0, [r4, #8]
 800e4b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4b8:	f7fd fc08 	bl	800bccc <memset>
 800e4bc:	4620      	mov	r0, r4
 800e4be:	bd70      	pop	{r4, r5, r6, pc}

0800e4c0 <__sfp_lock_acquire>:
 800e4c0:	4801      	ldr	r0, [pc, #4]	; (800e4c8 <__sfp_lock_acquire+0x8>)
 800e4c2:	f000 bc26 	b.w	800ed12 <__retarget_lock_acquire_recursive>
 800e4c6:	bf00      	nop
 800e4c8:	20009699 	.word	0x20009699

0800e4cc <__sfp_lock_release>:
 800e4cc:	4801      	ldr	r0, [pc, #4]	; (800e4d4 <__sfp_lock_release+0x8>)
 800e4ce:	f000 bc21 	b.w	800ed14 <__retarget_lock_release_recursive>
 800e4d2:	bf00      	nop
 800e4d4:	20009699 	.word	0x20009699

0800e4d8 <__sinit_lock_acquire>:
 800e4d8:	4801      	ldr	r0, [pc, #4]	; (800e4e0 <__sinit_lock_acquire+0x8>)
 800e4da:	f000 bc1a 	b.w	800ed12 <__retarget_lock_acquire_recursive>
 800e4de:	bf00      	nop
 800e4e0:	2000969a 	.word	0x2000969a

0800e4e4 <__sinit_lock_release>:
 800e4e4:	4801      	ldr	r0, [pc, #4]	; (800e4ec <__sinit_lock_release+0x8>)
 800e4e6:	f000 bc15 	b.w	800ed14 <__retarget_lock_release_recursive>
 800e4ea:	bf00      	nop
 800e4ec:	2000969a 	.word	0x2000969a

0800e4f0 <__sinit>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	f7ff fff0 	bl	800e4d8 <__sinit_lock_acquire>
 800e4f8:	69a3      	ldr	r3, [r4, #24]
 800e4fa:	b11b      	cbz	r3, 800e504 <__sinit+0x14>
 800e4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e500:	f7ff bff0 	b.w	800e4e4 <__sinit_lock_release>
 800e504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e508:	6523      	str	r3, [r4, #80]	; 0x50
 800e50a:	4b13      	ldr	r3, [pc, #76]	; (800e558 <__sinit+0x68>)
 800e50c:	4a13      	ldr	r2, [pc, #76]	; (800e55c <__sinit+0x6c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	62a2      	str	r2, [r4, #40]	; 0x28
 800e512:	42a3      	cmp	r3, r4
 800e514:	bf04      	itt	eq
 800e516:	2301      	moveq	r3, #1
 800e518:	61a3      	streq	r3, [r4, #24]
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 f820 	bl	800e560 <__sfp>
 800e520:	6060      	str	r0, [r4, #4]
 800e522:	4620      	mov	r0, r4
 800e524:	f000 f81c 	bl	800e560 <__sfp>
 800e528:	60a0      	str	r0, [r4, #8]
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 f818 	bl	800e560 <__sfp>
 800e530:	2200      	movs	r2, #0
 800e532:	60e0      	str	r0, [r4, #12]
 800e534:	2104      	movs	r1, #4
 800e536:	6860      	ldr	r0, [r4, #4]
 800e538:	f7ff ff82 	bl	800e440 <std>
 800e53c:	68a0      	ldr	r0, [r4, #8]
 800e53e:	2201      	movs	r2, #1
 800e540:	2109      	movs	r1, #9
 800e542:	f7ff ff7d 	bl	800e440 <std>
 800e546:	68e0      	ldr	r0, [r4, #12]
 800e548:	2202      	movs	r2, #2
 800e54a:	2112      	movs	r1, #18
 800e54c:	f7ff ff78 	bl	800e440 <std>
 800e550:	2301      	movs	r3, #1
 800e552:	61a3      	str	r3, [r4, #24]
 800e554:	e7d2      	b.n	800e4fc <__sinit+0xc>
 800e556:	bf00      	nop
 800e558:	08011aa4 	.word	0x08011aa4
 800e55c:	0800e489 	.word	0x0800e489

0800e560 <__sfp>:
 800e560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e562:	4607      	mov	r7, r0
 800e564:	f7ff ffac 	bl	800e4c0 <__sfp_lock_acquire>
 800e568:	4b1e      	ldr	r3, [pc, #120]	; (800e5e4 <__sfp+0x84>)
 800e56a:	681e      	ldr	r6, [r3, #0]
 800e56c:	69b3      	ldr	r3, [r6, #24]
 800e56e:	b913      	cbnz	r3, 800e576 <__sfp+0x16>
 800e570:	4630      	mov	r0, r6
 800e572:	f7ff ffbd 	bl	800e4f0 <__sinit>
 800e576:	3648      	adds	r6, #72	; 0x48
 800e578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e57c:	3b01      	subs	r3, #1
 800e57e:	d503      	bpl.n	800e588 <__sfp+0x28>
 800e580:	6833      	ldr	r3, [r6, #0]
 800e582:	b30b      	cbz	r3, 800e5c8 <__sfp+0x68>
 800e584:	6836      	ldr	r6, [r6, #0]
 800e586:	e7f7      	b.n	800e578 <__sfp+0x18>
 800e588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e58c:	b9d5      	cbnz	r5, 800e5c4 <__sfp+0x64>
 800e58e:	4b16      	ldr	r3, [pc, #88]	; (800e5e8 <__sfp+0x88>)
 800e590:	60e3      	str	r3, [r4, #12]
 800e592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e596:	6665      	str	r5, [r4, #100]	; 0x64
 800e598:	f000 fbba 	bl	800ed10 <__retarget_lock_init_recursive>
 800e59c:	f7ff ff96 	bl	800e4cc <__sfp_lock_release>
 800e5a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5a8:	6025      	str	r5, [r4, #0]
 800e5aa:	61a5      	str	r5, [r4, #24]
 800e5ac:	2208      	movs	r2, #8
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5b4:	f7fd fb8a 	bl	800bccc <memset>
 800e5b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c4:	3468      	adds	r4, #104	; 0x68
 800e5c6:	e7d9      	b.n	800e57c <__sfp+0x1c>
 800e5c8:	2104      	movs	r1, #4
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	f7ff ff62 	bl	800e494 <__sfmoreglue>
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	6030      	str	r0, [r6, #0]
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d1d5      	bne.n	800e584 <__sfp+0x24>
 800e5d8:	f7ff ff78 	bl	800e4cc <__sfp_lock_release>
 800e5dc:	230c      	movs	r3, #12
 800e5de:	603b      	str	r3, [r7, #0]
 800e5e0:	e7ee      	b.n	800e5c0 <__sfp+0x60>
 800e5e2:	bf00      	nop
 800e5e4:	08011aa4 	.word	0x08011aa4
 800e5e8:	ffff0001 	.word	0xffff0001

0800e5ec <_fwalk_reent>:
 800e5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	4688      	mov	r8, r1
 800e5f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5f8:	2700      	movs	r7, #0
 800e5fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5fe:	f1b9 0901 	subs.w	r9, r9, #1
 800e602:	d505      	bpl.n	800e610 <_fwalk_reent+0x24>
 800e604:	6824      	ldr	r4, [r4, #0]
 800e606:	2c00      	cmp	r4, #0
 800e608:	d1f7      	bne.n	800e5fa <_fwalk_reent+0xe>
 800e60a:	4638      	mov	r0, r7
 800e60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e610:	89ab      	ldrh	r3, [r5, #12]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d907      	bls.n	800e626 <_fwalk_reent+0x3a>
 800e616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e61a:	3301      	adds	r3, #1
 800e61c:	d003      	beq.n	800e626 <_fwalk_reent+0x3a>
 800e61e:	4629      	mov	r1, r5
 800e620:	4630      	mov	r0, r6
 800e622:	47c0      	blx	r8
 800e624:	4307      	orrs	r7, r0
 800e626:	3568      	adds	r5, #104	; 0x68
 800e628:	e7e9      	b.n	800e5fe <_fwalk_reent+0x12>

0800e62a <rshift>:
 800e62a:	6903      	ldr	r3, [r0, #16]
 800e62c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e634:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e638:	f100 0414 	add.w	r4, r0, #20
 800e63c:	dd45      	ble.n	800e6ca <rshift+0xa0>
 800e63e:	f011 011f 	ands.w	r1, r1, #31
 800e642:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e646:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e64a:	d10c      	bne.n	800e666 <rshift+0x3c>
 800e64c:	f100 0710 	add.w	r7, r0, #16
 800e650:	4629      	mov	r1, r5
 800e652:	42b1      	cmp	r1, r6
 800e654:	d334      	bcc.n	800e6c0 <rshift+0x96>
 800e656:	1a9b      	subs	r3, r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	1eea      	subs	r2, r5, #3
 800e65c:	4296      	cmp	r6, r2
 800e65e:	bf38      	it	cc
 800e660:	2300      	movcc	r3, #0
 800e662:	4423      	add	r3, r4
 800e664:	e015      	b.n	800e692 <rshift+0x68>
 800e666:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e66a:	f1c1 0820 	rsb	r8, r1, #32
 800e66e:	40cf      	lsrs	r7, r1
 800e670:	f105 0e04 	add.w	lr, r5, #4
 800e674:	46a1      	mov	r9, r4
 800e676:	4576      	cmp	r6, lr
 800e678:	46f4      	mov	ip, lr
 800e67a:	d815      	bhi.n	800e6a8 <rshift+0x7e>
 800e67c:	1a9a      	subs	r2, r3, r2
 800e67e:	0092      	lsls	r2, r2, #2
 800e680:	3a04      	subs	r2, #4
 800e682:	3501      	adds	r5, #1
 800e684:	42ae      	cmp	r6, r5
 800e686:	bf38      	it	cc
 800e688:	2200      	movcc	r2, #0
 800e68a:	18a3      	adds	r3, r4, r2
 800e68c:	50a7      	str	r7, [r4, r2]
 800e68e:	b107      	cbz	r7, 800e692 <rshift+0x68>
 800e690:	3304      	adds	r3, #4
 800e692:	1b1a      	subs	r2, r3, r4
 800e694:	42a3      	cmp	r3, r4
 800e696:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e69a:	bf08      	it	eq
 800e69c:	2300      	moveq	r3, #0
 800e69e:	6102      	str	r2, [r0, #16]
 800e6a0:	bf08      	it	eq
 800e6a2:	6143      	streq	r3, [r0, #20]
 800e6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6a8:	f8dc c000 	ldr.w	ip, [ip]
 800e6ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6b0:	ea4c 0707 	orr.w	r7, ip, r7
 800e6b4:	f849 7b04 	str.w	r7, [r9], #4
 800e6b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6bc:	40cf      	lsrs	r7, r1
 800e6be:	e7da      	b.n	800e676 <rshift+0x4c>
 800e6c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6c8:	e7c3      	b.n	800e652 <rshift+0x28>
 800e6ca:	4623      	mov	r3, r4
 800e6cc:	e7e1      	b.n	800e692 <rshift+0x68>

0800e6ce <__hexdig_fun>:
 800e6ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e6d2:	2b09      	cmp	r3, #9
 800e6d4:	d802      	bhi.n	800e6dc <__hexdig_fun+0xe>
 800e6d6:	3820      	subs	r0, #32
 800e6d8:	b2c0      	uxtb	r0, r0
 800e6da:	4770      	bx	lr
 800e6dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e6e0:	2b05      	cmp	r3, #5
 800e6e2:	d801      	bhi.n	800e6e8 <__hexdig_fun+0x1a>
 800e6e4:	3847      	subs	r0, #71	; 0x47
 800e6e6:	e7f7      	b.n	800e6d8 <__hexdig_fun+0xa>
 800e6e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e6ec:	2b05      	cmp	r3, #5
 800e6ee:	d801      	bhi.n	800e6f4 <__hexdig_fun+0x26>
 800e6f0:	3827      	subs	r0, #39	; 0x27
 800e6f2:	e7f1      	b.n	800e6d8 <__hexdig_fun+0xa>
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	4770      	bx	lr

0800e6f8 <__gethex>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ed2d 8b02 	vpush	{d8}
 800e700:	b089      	sub	sp, #36	; 0x24
 800e702:	ee08 0a10 	vmov	s16, r0
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	4bb4      	ldr	r3, [pc, #720]	; (800e9dc <__gethex+0x2e4>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	4618      	mov	r0, r3
 800e710:	468b      	mov	fp, r1
 800e712:	4690      	mov	r8, r2
 800e714:	f7f1 fd7c 	bl	8000210 <strlen>
 800e718:	9b01      	ldr	r3, [sp, #4]
 800e71a:	f8db 2000 	ldr.w	r2, [fp]
 800e71e:	4403      	add	r3, r0
 800e720:	4682      	mov	sl, r0
 800e722:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e726:	9305      	str	r3, [sp, #20]
 800e728:	1c93      	adds	r3, r2, #2
 800e72a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e72e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e732:	32fe      	adds	r2, #254	; 0xfe
 800e734:	18d1      	adds	r1, r2, r3
 800e736:	461f      	mov	r7, r3
 800e738:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e73c:	9100      	str	r1, [sp, #0]
 800e73e:	2830      	cmp	r0, #48	; 0x30
 800e740:	d0f8      	beq.n	800e734 <__gethex+0x3c>
 800e742:	f7ff ffc4 	bl	800e6ce <__hexdig_fun>
 800e746:	4604      	mov	r4, r0
 800e748:	2800      	cmp	r0, #0
 800e74a:	d13a      	bne.n	800e7c2 <__gethex+0xca>
 800e74c:	9901      	ldr	r1, [sp, #4]
 800e74e:	4652      	mov	r2, sl
 800e750:	4638      	mov	r0, r7
 800e752:	f001 facc 	bl	800fcee <strncmp>
 800e756:	4605      	mov	r5, r0
 800e758:	2800      	cmp	r0, #0
 800e75a:	d168      	bne.n	800e82e <__gethex+0x136>
 800e75c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e760:	eb07 060a 	add.w	r6, r7, sl
 800e764:	f7ff ffb3 	bl	800e6ce <__hexdig_fun>
 800e768:	2800      	cmp	r0, #0
 800e76a:	d062      	beq.n	800e832 <__gethex+0x13a>
 800e76c:	4633      	mov	r3, r6
 800e76e:	7818      	ldrb	r0, [r3, #0]
 800e770:	2830      	cmp	r0, #48	; 0x30
 800e772:	461f      	mov	r7, r3
 800e774:	f103 0301 	add.w	r3, r3, #1
 800e778:	d0f9      	beq.n	800e76e <__gethex+0x76>
 800e77a:	f7ff ffa8 	bl	800e6ce <__hexdig_fun>
 800e77e:	2301      	movs	r3, #1
 800e780:	fab0 f480 	clz	r4, r0
 800e784:	0964      	lsrs	r4, r4, #5
 800e786:	4635      	mov	r5, r6
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	463a      	mov	r2, r7
 800e78c:	4616      	mov	r6, r2
 800e78e:	3201      	adds	r2, #1
 800e790:	7830      	ldrb	r0, [r6, #0]
 800e792:	f7ff ff9c 	bl	800e6ce <__hexdig_fun>
 800e796:	2800      	cmp	r0, #0
 800e798:	d1f8      	bne.n	800e78c <__gethex+0x94>
 800e79a:	9901      	ldr	r1, [sp, #4]
 800e79c:	4652      	mov	r2, sl
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f001 faa5 	bl	800fcee <strncmp>
 800e7a4:	b980      	cbnz	r0, 800e7c8 <__gethex+0xd0>
 800e7a6:	b94d      	cbnz	r5, 800e7bc <__gethex+0xc4>
 800e7a8:	eb06 050a 	add.w	r5, r6, sl
 800e7ac:	462a      	mov	r2, r5
 800e7ae:	4616      	mov	r6, r2
 800e7b0:	3201      	adds	r2, #1
 800e7b2:	7830      	ldrb	r0, [r6, #0]
 800e7b4:	f7ff ff8b 	bl	800e6ce <__hexdig_fun>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d1f8      	bne.n	800e7ae <__gethex+0xb6>
 800e7bc:	1bad      	subs	r5, r5, r6
 800e7be:	00ad      	lsls	r5, r5, #2
 800e7c0:	e004      	b.n	800e7cc <__gethex+0xd4>
 800e7c2:	2400      	movs	r4, #0
 800e7c4:	4625      	mov	r5, r4
 800e7c6:	e7e0      	b.n	800e78a <__gethex+0x92>
 800e7c8:	2d00      	cmp	r5, #0
 800e7ca:	d1f7      	bne.n	800e7bc <__gethex+0xc4>
 800e7cc:	7833      	ldrb	r3, [r6, #0]
 800e7ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e7d2:	2b50      	cmp	r3, #80	; 0x50
 800e7d4:	d13b      	bne.n	800e84e <__gethex+0x156>
 800e7d6:	7873      	ldrb	r3, [r6, #1]
 800e7d8:	2b2b      	cmp	r3, #43	; 0x2b
 800e7da:	d02c      	beq.n	800e836 <__gethex+0x13e>
 800e7dc:	2b2d      	cmp	r3, #45	; 0x2d
 800e7de:	d02e      	beq.n	800e83e <__gethex+0x146>
 800e7e0:	1c71      	adds	r1, r6, #1
 800e7e2:	f04f 0900 	mov.w	r9, #0
 800e7e6:	7808      	ldrb	r0, [r1, #0]
 800e7e8:	f7ff ff71 	bl	800e6ce <__hexdig_fun>
 800e7ec:	1e43      	subs	r3, r0, #1
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b18      	cmp	r3, #24
 800e7f2:	d82c      	bhi.n	800e84e <__gethex+0x156>
 800e7f4:	f1a0 0210 	sub.w	r2, r0, #16
 800e7f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7fc:	f7ff ff67 	bl	800e6ce <__hexdig_fun>
 800e800:	1e43      	subs	r3, r0, #1
 800e802:	b2db      	uxtb	r3, r3
 800e804:	2b18      	cmp	r3, #24
 800e806:	d91d      	bls.n	800e844 <__gethex+0x14c>
 800e808:	f1b9 0f00 	cmp.w	r9, #0
 800e80c:	d000      	beq.n	800e810 <__gethex+0x118>
 800e80e:	4252      	negs	r2, r2
 800e810:	4415      	add	r5, r2
 800e812:	f8cb 1000 	str.w	r1, [fp]
 800e816:	b1e4      	cbz	r4, 800e852 <__gethex+0x15a>
 800e818:	9b00      	ldr	r3, [sp, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	bf14      	ite	ne
 800e81e:	2700      	movne	r7, #0
 800e820:	2706      	moveq	r7, #6
 800e822:	4638      	mov	r0, r7
 800e824:	b009      	add	sp, #36	; 0x24
 800e826:	ecbd 8b02 	vpop	{d8}
 800e82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82e:	463e      	mov	r6, r7
 800e830:	4625      	mov	r5, r4
 800e832:	2401      	movs	r4, #1
 800e834:	e7ca      	b.n	800e7cc <__gethex+0xd4>
 800e836:	f04f 0900 	mov.w	r9, #0
 800e83a:	1cb1      	adds	r1, r6, #2
 800e83c:	e7d3      	b.n	800e7e6 <__gethex+0xee>
 800e83e:	f04f 0901 	mov.w	r9, #1
 800e842:	e7fa      	b.n	800e83a <__gethex+0x142>
 800e844:	230a      	movs	r3, #10
 800e846:	fb03 0202 	mla	r2, r3, r2, r0
 800e84a:	3a10      	subs	r2, #16
 800e84c:	e7d4      	b.n	800e7f8 <__gethex+0x100>
 800e84e:	4631      	mov	r1, r6
 800e850:	e7df      	b.n	800e812 <__gethex+0x11a>
 800e852:	1bf3      	subs	r3, r6, r7
 800e854:	3b01      	subs	r3, #1
 800e856:	4621      	mov	r1, r4
 800e858:	2b07      	cmp	r3, #7
 800e85a:	dc0b      	bgt.n	800e874 <__gethex+0x17c>
 800e85c:	ee18 0a10 	vmov	r0, s16
 800e860:	f000 fad8 	bl	800ee14 <_Balloc>
 800e864:	4604      	mov	r4, r0
 800e866:	b940      	cbnz	r0, 800e87a <__gethex+0x182>
 800e868:	4b5d      	ldr	r3, [pc, #372]	; (800e9e0 <__gethex+0x2e8>)
 800e86a:	4602      	mov	r2, r0
 800e86c:	21de      	movs	r1, #222	; 0xde
 800e86e:	485d      	ldr	r0, [pc, #372]	; (800e9e4 <__gethex+0x2ec>)
 800e870:	f001 fa70 	bl	800fd54 <__assert_func>
 800e874:	3101      	adds	r1, #1
 800e876:	105b      	asrs	r3, r3, #1
 800e878:	e7ee      	b.n	800e858 <__gethex+0x160>
 800e87a:	f100 0914 	add.w	r9, r0, #20
 800e87e:	f04f 0b00 	mov.w	fp, #0
 800e882:	f1ca 0301 	rsb	r3, sl, #1
 800e886:	f8cd 9008 	str.w	r9, [sp, #8]
 800e88a:	f8cd b000 	str.w	fp, [sp]
 800e88e:	9306      	str	r3, [sp, #24]
 800e890:	42b7      	cmp	r7, r6
 800e892:	d340      	bcc.n	800e916 <__gethex+0x21e>
 800e894:	9802      	ldr	r0, [sp, #8]
 800e896:	9b00      	ldr	r3, [sp, #0]
 800e898:	f840 3b04 	str.w	r3, [r0], #4
 800e89c:	eba0 0009 	sub.w	r0, r0, r9
 800e8a0:	1080      	asrs	r0, r0, #2
 800e8a2:	0146      	lsls	r6, r0, #5
 800e8a4:	6120      	str	r0, [r4, #16]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f000 fba6 	bl	800eff8 <__hi0bits>
 800e8ac:	1a30      	subs	r0, r6, r0
 800e8ae:	f8d8 6000 	ldr.w	r6, [r8]
 800e8b2:	42b0      	cmp	r0, r6
 800e8b4:	dd63      	ble.n	800e97e <__gethex+0x286>
 800e8b6:	1b87      	subs	r7, r0, r6
 800e8b8:	4639      	mov	r1, r7
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f000 ff4a 	bl	800f754 <__any_on>
 800e8c0:	4682      	mov	sl, r0
 800e8c2:	b1a8      	cbz	r0, 800e8f0 <__gethex+0x1f8>
 800e8c4:	1e7b      	subs	r3, r7, #1
 800e8c6:	1159      	asrs	r1, r3, #5
 800e8c8:	f003 021f 	and.w	r2, r3, #31
 800e8cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e8d0:	f04f 0a01 	mov.w	sl, #1
 800e8d4:	fa0a f202 	lsl.w	r2, sl, r2
 800e8d8:	420a      	tst	r2, r1
 800e8da:	d009      	beq.n	800e8f0 <__gethex+0x1f8>
 800e8dc:	4553      	cmp	r3, sl
 800e8de:	dd05      	ble.n	800e8ec <__gethex+0x1f4>
 800e8e0:	1eb9      	subs	r1, r7, #2
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f000 ff36 	bl	800f754 <__any_on>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d145      	bne.n	800e978 <__gethex+0x280>
 800e8ec:	f04f 0a02 	mov.w	sl, #2
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f7ff fe99 	bl	800e62a <rshift>
 800e8f8:	443d      	add	r5, r7
 800e8fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8fe:	42ab      	cmp	r3, r5
 800e900:	da4c      	bge.n	800e99c <__gethex+0x2a4>
 800e902:	ee18 0a10 	vmov	r0, s16
 800e906:	4621      	mov	r1, r4
 800e908:	f000 fac4 	bl	800ee94 <_Bfree>
 800e90c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e90e:	2300      	movs	r3, #0
 800e910:	6013      	str	r3, [r2, #0]
 800e912:	27a3      	movs	r7, #163	; 0xa3
 800e914:	e785      	b.n	800e822 <__gethex+0x12a>
 800e916:	1e73      	subs	r3, r6, #1
 800e918:	9a05      	ldr	r2, [sp, #20]
 800e91a:	9303      	str	r3, [sp, #12]
 800e91c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e920:	4293      	cmp	r3, r2
 800e922:	d019      	beq.n	800e958 <__gethex+0x260>
 800e924:	f1bb 0f20 	cmp.w	fp, #32
 800e928:	d107      	bne.n	800e93a <__gethex+0x242>
 800e92a:	9b02      	ldr	r3, [sp, #8]
 800e92c:	9a00      	ldr	r2, [sp, #0]
 800e92e:	f843 2b04 	str.w	r2, [r3], #4
 800e932:	9302      	str	r3, [sp, #8]
 800e934:	2300      	movs	r3, #0
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	469b      	mov	fp, r3
 800e93a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e93e:	f7ff fec6 	bl	800e6ce <__hexdig_fun>
 800e942:	9b00      	ldr	r3, [sp, #0]
 800e944:	f000 000f 	and.w	r0, r0, #15
 800e948:	fa00 f00b 	lsl.w	r0, r0, fp
 800e94c:	4303      	orrs	r3, r0
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	f10b 0b04 	add.w	fp, fp, #4
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	e00d      	b.n	800e974 <__gethex+0x27c>
 800e958:	9b03      	ldr	r3, [sp, #12]
 800e95a:	9a06      	ldr	r2, [sp, #24]
 800e95c:	4413      	add	r3, r2
 800e95e:	42bb      	cmp	r3, r7
 800e960:	d3e0      	bcc.n	800e924 <__gethex+0x22c>
 800e962:	4618      	mov	r0, r3
 800e964:	9901      	ldr	r1, [sp, #4]
 800e966:	9307      	str	r3, [sp, #28]
 800e968:	4652      	mov	r2, sl
 800e96a:	f001 f9c0 	bl	800fcee <strncmp>
 800e96e:	9b07      	ldr	r3, [sp, #28]
 800e970:	2800      	cmp	r0, #0
 800e972:	d1d7      	bne.n	800e924 <__gethex+0x22c>
 800e974:	461e      	mov	r6, r3
 800e976:	e78b      	b.n	800e890 <__gethex+0x198>
 800e978:	f04f 0a03 	mov.w	sl, #3
 800e97c:	e7b8      	b.n	800e8f0 <__gethex+0x1f8>
 800e97e:	da0a      	bge.n	800e996 <__gethex+0x29e>
 800e980:	1a37      	subs	r7, r6, r0
 800e982:	4621      	mov	r1, r4
 800e984:	ee18 0a10 	vmov	r0, s16
 800e988:	463a      	mov	r2, r7
 800e98a:	f000 fc9f 	bl	800f2cc <__lshift>
 800e98e:	1bed      	subs	r5, r5, r7
 800e990:	4604      	mov	r4, r0
 800e992:	f100 0914 	add.w	r9, r0, #20
 800e996:	f04f 0a00 	mov.w	sl, #0
 800e99a:	e7ae      	b.n	800e8fa <__gethex+0x202>
 800e99c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e9a0:	42a8      	cmp	r0, r5
 800e9a2:	dd72      	ble.n	800ea8a <__gethex+0x392>
 800e9a4:	1b45      	subs	r5, r0, r5
 800e9a6:	42ae      	cmp	r6, r5
 800e9a8:	dc36      	bgt.n	800ea18 <__gethex+0x320>
 800e9aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	d02a      	beq.n	800ea08 <__gethex+0x310>
 800e9b2:	2b03      	cmp	r3, #3
 800e9b4:	d02c      	beq.n	800ea10 <__gethex+0x318>
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d11c      	bne.n	800e9f4 <__gethex+0x2fc>
 800e9ba:	42ae      	cmp	r6, r5
 800e9bc:	d11a      	bne.n	800e9f4 <__gethex+0x2fc>
 800e9be:	2e01      	cmp	r6, #1
 800e9c0:	d112      	bne.n	800e9e8 <__gethex+0x2f0>
 800e9c2:	9a04      	ldr	r2, [sp, #16]
 800e9c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9c8:	6013      	str	r3, [r2, #0]
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	6123      	str	r3, [r4, #16]
 800e9ce:	f8c9 3000 	str.w	r3, [r9]
 800e9d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9d4:	2762      	movs	r7, #98	; 0x62
 800e9d6:	601c      	str	r4, [r3, #0]
 800e9d8:	e723      	b.n	800e822 <__gethex+0x12a>
 800e9da:	bf00      	nop
 800e9dc:	08011d8c 	.word	0x08011d8c
 800e9e0:	08011cb0 	.word	0x08011cb0
 800e9e4:	08011d24 	.word	0x08011d24
 800e9e8:	1e71      	subs	r1, r6, #1
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f000 feb2 	bl	800f754 <__any_on>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d1e6      	bne.n	800e9c2 <__gethex+0x2ca>
 800e9f4:	ee18 0a10 	vmov	r0, s16
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	f000 fa4b 	bl	800ee94 <_Bfree>
 800e9fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea00:	2300      	movs	r3, #0
 800ea02:	6013      	str	r3, [r2, #0]
 800ea04:	2750      	movs	r7, #80	; 0x50
 800ea06:	e70c      	b.n	800e822 <__gethex+0x12a>
 800ea08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1f2      	bne.n	800e9f4 <__gethex+0x2fc>
 800ea0e:	e7d8      	b.n	800e9c2 <__gethex+0x2ca>
 800ea10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d1d5      	bne.n	800e9c2 <__gethex+0x2ca>
 800ea16:	e7ed      	b.n	800e9f4 <__gethex+0x2fc>
 800ea18:	1e6f      	subs	r7, r5, #1
 800ea1a:	f1ba 0f00 	cmp.w	sl, #0
 800ea1e:	d131      	bne.n	800ea84 <__gethex+0x38c>
 800ea20:	b127      	cbz	r7, 800ea2c <__gethex+0x334>
 800ea22:	4639      	mov	r1, r7
 800ea24:	4620      	mov	r0, r4
 800ea26:	f000 fe95 	bl	800f754 <__any_on>
 800ea2a:	4682      	mov	sl, r0
 800ea2c:	117b      	asrs	r3, r7, #5
 800ea2e:	2101      	movs	r1, #1
 800ea30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ea34:	f007 071f 	and.w	r7, r7, #31
 800ea38:	fa01 f707 	lsl.w	r7, r1, r7
 800ea3c:	421f      	tst	r7, r3
 800ea3e:	4629      	mov	r1, r5
 800ea40:	4620      	mov	r0, r4
 800ea42:	bf18      	it	ne
 800ea44:	f04a 0a02 	orrne.w	sl, sl, #2
 800ea48:	1b76      	subs	r6, r6, r5
 800ea4a:	f7ff fdee 	bl	800e62a <rshift>
 800ea4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ea52:	2702      	movs	r7, #2
 800ea54:	f1ba 0f00 	cmp.w	sl, #0
 800ea58:	d048      	beq.n	800eaec <__gethex+0x3f4>
 800ea5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea5e:	2b02      	cmp	r3, #2
 800ea60:	d015      	beq.n	800ea8e <__gethex+0x396>
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d017      	beq.n	800ea96 <__gethex+0x39e>
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d109      	bne.n	800ea7e <__gethex+0x386>
 800ea6a:	f01a 0f02 	tst.w	sl, #2
 800ea6e:	d006      	beq.n	800ea7e <__gethex+0x386>
 800ea70:	f8d9 0000 	ldr.w	r0, [r9]
 800ea74:	ea4a 0a00 	orr.w	sl, sl, r0
 800ea78:	f01a 0f01 	tst.w	sl, #1
 800ea7c:	d10e      	bne.n	800ea9c <__gethex+0x3a4>
 800ea7e:	f047 0710 	orr.w	r7, r7, #16
 800ea82:	e033      	b.n	800eaec <__gethex+0x3f4>
 800ea84:	f04f 0a01 	mov.w	sl, #1
 800ea88:	e7d0      	b.n	800ea2c <__gethex+0x334>
 800ea8a:	2701      	movs	r7, #1
 800ea8c:	e7e2      	b.n	800ea54 <__gethex+0x35c>
 800ea8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea90:	f1c3 0301 	rsb	r3, r3, #1
 800ea94:	9315      	str	r3, [sp, #84]	; 0x54
 800ea96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d0f0      	beq.n	800ea7e <__gethex+0x386>
 800ea9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eaa0:	f104 0314 	add.w	r3, r4, #20
 800eaa4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eaa8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eaac:	f04f 0c00 	mov.w	ip, #0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800eaba:	d01c      	beq.n	800eaf6 <__gethex+0x3fe>
 800eabc:	3201      	adds	r2, #1
 800eabe:	6002      	str	r2, [r0, #0]
 800eac0:	2f02      	cmp	r7, #2
 800eac2:	f104 0314 	add.w	r3, r4, #20
 800eac6:	d13f      	bne.n	800eb48 <__gethex+0x450>
 800eac8:	f8d8 2000 	ldr.w	r2, [r8]
 800eacc:	3a01      	subs	r2, #1
 800eace:	42b2      	cmp	r2, r6
 800ead0:	d10a      	bne.n	800eae8 <__gethex+0x3f0>
 800ead2:	1171      	asrs	r1, r6, #5
 800ead4:	2201      	movs	r2, #1
 800ead6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eada:	f006 061f 	and.w	r6, r6, #31
 800eade:	fa02 f606 	lsl.w	r6, r2, r6
 800eae2:	421e      	tst	r6, r3
 800eae4:	bf18      	it	ne
 800eae6:	4617      	movne	r7, r2
 800eae8:	f047 0720 	orr.w	r7, r7, #32
 800eaec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eaee:	601c      	str	r4, [r3, #0]
 800eaf0:	9b04      	ldr	r3, [sp, #16]
 800eaf2:	601d      	str	r5, [r3, #0]
 800eaf4:	e695      	b.n	800e822 <__gethex+0x12a>
 800eaf6:	4299      	cmp	r1, r3
 800eaf8:	f843 cc04 	str.w	ip, [r3, #-4]
 800eafc:	d8d8      	bhi.n	800eab0 <__gethex+0x3b8>
 800eafe:	68a3      	ldr	r3, [r4, #8]
 800eb00:	459b      	cmp	fp, r3
 800eb02:	db19      	blt.n	800eb38 <__gethex+0x440>
 800eb04:	6861      	ldr	r1, [r4, #4]
 800eb06:	ee18 0a10 	vmov	r0, s16
 800eb0a:	3101      	adds	r1, #1
 800eb0c:	f000 f982 	bl	800ee14 <_Balloc>
 800eb10:	4681      	mov	r9, r0
 800eb12:	b918      	cbnz	r0, 800eb1c <__gethex+0x424>
 800eb14:	4b1a      	ldr	r3, [pc, #104]	; (800eb80 <__gethex+0x488>)
 800eb16:	4602      	mov	r2, r0
 800eb18:	2184      	movs	r1, #132	; 0x84
 800eb1a:	e6a8      	b.n	800e86e <__gethex+0x176>
 800eb1c:	6922      	ldr	r2, [r4, #16]
 800eb1e:	3202      	adds	r2, #2
 800eb20:	f104 010c 	add.w	r1, r4, #12
 800eb24:	0092      	lsls	r2, r2, #2
 800eb26:	300c      	adds	r0, #12
 800eb28:	f7fd f8c2 	bl	800bcb0 <memcpy>
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	ee18 0a10 	vmov	r0, s16
 800eb32:	f000 f9af 	bl	800ee94 <_Bfree>
 800eb36:	464c      	mov	r4, r9
 800eb38:	6923      	ldr	r3, [r4, #16]
 800eb3a:	1c5a      	adds	r2, r3, #1
 800eb3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb40:	6122      	str	r2, [r4, #16]
 800eb42:	2201      	movs	r2, #1
 800eb44:	615a      	str	r2, [r3, #20]
 800eb46:	e7bb      	b.n	800eac0 <__gethex+0x3c8>
 800eb48:	6922      	ldr	r2, [r4, #16]
 800eb4a:	455a      	cmp	r2, fp
 800eb4c:	dd0b      	ble.n	800eb66 <__gethex+0x46e>
 800eb4e:	2101      	movs	r1, #1
 800eb50:	4620      	mov	r0, r4
 800eb52:	f7ff fd6a 	bl	800e62a <rshift>
 800eb56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb5a:	3501      	adds	r5, #1
 800eb5c:	42ab      	cmp	r3, r5
 800eb5e:	f6ff aed0 	blt.w	800e902 <__gethex+0x20a>
 800eb62:	2701      	movs	r7, #1
 800eb64:	e7c0      	b.n	800eae8 <__gethex+0x3f0>
 800eb66:	f016 061f 	ands.w	r6, r6, #31
 800eb6a:	d0fa      	beq.n	800eb62 <__gethex+0x46a>
 800eb6c:	4453      	add	r3, sl
 800eb6e:	f1c6 0620 	rsb	r6, r6, #32
 800eb72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb76:	f000 fa3f 	bl	800eff8 <__hi0bits>
 800eb7a:	42b0      	cmp	r0, r6
 800eb7c:	dbe7      	blt.n	800eb4e <__gethex+0x456>
 800eb7e:	e7f0      	b.n	800eb62 <__gethex+0x46a>
 800eb80:	08011cb0 	.word	0x08011cb0

0800eb84 <L_shift>:
 800eb84:	f1c2 0208 	rsb	r2, r2, #8
 800eb88:	0092      	lsls	r2, r2, #2
 800eb8a:	b570      	push	{r4, r5, r6, lr}
 800eb8c:	f1c2 0620 	rsb	r6, r2, #32
 800eb90:	6843      	ldr	r3, [r0, #4]
 800eb92:	6804      	ldr	r4, [r0, #0]
 800eb94:	fa03 f506 	lsl.w	r5, r3, r6
 800eb98:	432c      	orrs	r4, r5
 800eb9a:	40d3      	lsrs	r3, r2
 800eb9c:	6004      	str	r4, [r0, #0]
 800eb9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eba2:	4288      	cmp	r0, r1
 800eba4:	d3f4      	bcc.n	800eb90 <L_shift+0xc>
 800eba6:	bd70      	pop	{r4, r5, r6, pc}

0800eba8 <__match>:
 800eba8:	b530      	push	{r4, r5, lr}
 800ebaa:	6803      	ldr	r3, [r0, #0]
 800ebac:	3301      	adds	r3, #1
 800ebae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebb2:	b914      	cbnz	r4, 800ebba <__match+0x12>
 800ebb4:	6003      	str	r3, [r0, #0]
 800ebb6:	2001      	movs	r0, #1
 800ebb8:	bd30      	pop	{r4, r5, pc}
 800ebba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ebc2:	2d19      	cmp	r5, #25
 800ebc4:	bf98      	it	ls
 800ebc6:	3220      	addls	r2, #32
 800ebc8:	42a2      	cmp	r2, r4
 800ebca:	d0f0      	beq.n	800ebae <__match+0x6>
 800ebcc:	2000      	movs	r0, #0
 800ebce:	e7f3      	b.n	800ebb8 <__match+0x10>

0800ebd0 <__hexnan>:
 800ebd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd4:	680b      	ldr	r3, [r1, #0]
 800ebd6:	115e      	asrs	r6, r3, #5
 800ebd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ebdc:	f013 031f 	ands.w	r3, r3, #31
 800ebe0:	b087      	sub	sp, #28
 800ebe2:	bf18      	it	ne
 800ebe4:	3604      	addne	r6, #4
 800ebe6:	2500      	movs	r5, #0
 800ebe8:	1f37      	subs	r7, r6, #4
 800ebea:	4690      	mov	r8, r2
 800ebec:	6802      	ldr	r2, [r0, #0]
 800ebee:	9301      	str	r3, [sp, #4]
 800ebf0:	4682      	mov	sl, r0
 800ebf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ebf6:	46b9      	mov	r9, r7
 800ebf8:	463c      	mov	r4, r7
 800ebfa:	9502      	str	r5, [sp, #8]
 800ebfc:	46ab      	mov	fp, r5
 800ebfe:	7851      	ldrb	r1, [r2, #1]
 800ec00:	1c53      	adds	r3, r2, #1
 800ec02:	9303      	str	r3, [sp, #12]
 800ec04:	b341      	cbz	r1, 800ec58 <__hexnan+0x88>
 800ec06:	4608      	mov	r0, r1
 800ec08:	9205      	str	r2, [sp, #20]
 800ec0a:	9104      	str	r1, [sp, #16]
 800ec0c:	f7ff fd5f 	bl	800e6ce <__hexdig_fun>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d14f      	bne.n	800ecb4 <__hexnan+0xe4>
 800ec14:	9904      	ldr	r1, [sp, #16]
 800ec16:	9a05      	ldr	r2, [sp, #20]
 800ec18:	2920      	cmp	r1, #32
 800ec1a:	d818      	bhi.n	800ec4e <__hexnan+0x7e>
 800ec1c:	9b02      	ldr	r3, [sp, #8]
 800ec1e:	459b      	cmp	fp, r3
 800ec20:	dd13      	ble.n	800ec4a <__hexnan+0x7a>
 800ec22:	454c      	cmp	r4, r9
 800ec24:	d206      	bcs.n	800ec34 <__hexnan+0x64>
 800ec26:	2d07      	cmp	r5, #7
 800ec28:	dc04      	bgt.n	800ec34 <__hexnan+0x64>
 800ec2a:	462a      	mov	r2, r5
 800ec2c:	4649      	mov	r1, r9
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f7ff ffa8 	bl	800eb84 <L_shift>
 800ec34:	4544      	cmp	r4, r8
 800ec36:	d950      	bls.n	800ecda <__hexnan+0x10a>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	f1a4 0904 	sub.w	r9, r4, #4
 800ec3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec42:	f8cd b008 	str.w	fp, [sp, #8]
 800ec46:	464c      	mov	r4, r9
 800ec48:	461d      	mov	r5, r3
 800ec4a:	9a03      	ldr	r2, [sp, #12]
 800ec4c:	e7d7      	b.n	800ebfe <__hexnan+0x2e>
 800ec4e:	2929      	cmp	r1, #41	; 0x29
 800ec50:	d156      	bne.n	800ed00 <__hexnan+0x130>
 800ec52:	3202      	adds	r2, #2
 800ec54:	f8ca 2000 	str.w	r2, [sl]
 800ec58:	f1bb 0f00 	cmp.w	fp, #0
 800ec5c:	d050      	beq.n	800ed00 <__hexnan+0x130>
 800ec5e:	454c      	cmp	r4, r9
 800ec60:	d206      	bcs.n	800ec70 <__hexnan+0xa0>
 800ec62:	2d07      	cmp	r5, #7
 800ec64:	dc04      	bgt.n	800ec70 <__hexnan+0xa0>
 800ec66:	462a      	mov	r2, r5
 800ec68:	4649      	mov	r1, r9
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f7ff ff8a 	bl	800eb84 <L_shift>
 800ec70:	4544      	cmp	r4, r8
 800ec72:	d934      	bls.n	800ecde <__hexnan+0x10e>
 800ec74:	f1a8 0204 	sub.w	r2, r8, #4
 800ec78:	4623      	mov	r3, r4
 800ec7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec82:	429f      	cmp	r7, r3
 800ec84:	d2f9      	bcs.n	800ec7a <__hexnan+0xaa>
 800ec86:	1b3b      	subs	r3, r7, r4
 800ec88:	f023 0303 	bic.w	r3, r3, #3
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	3401      	adds	r4, #1
 800ec90:	3e03      	subs	r6, #3
 800ec92:	42b4      	cmp	r4, r6
 800ec94:	bf88      	it	hi
 800ec96:	2304      	movhi	r3, #4
 800ec98:	4443      	add	r3, r8
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f843 2b04 	str.w	r2, [r3], #4
 800eca0:	429f      	cmp	r7, r3
 800eca2:	d2fb      	bcs.n	800ec9c <__hexnan+0xcc>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	b91b      	cbnz	r3, 800ecb0 <__hexnan+0xe0>
 800eca8:	4547      	cmp	r7, r8
 800ecaa:	d127      	bne.n	800ecfc <__hexnan+0x12c>
 800ecac:	2301      	movs	r3, #1
 800ecae:	603b      	str	r3, [r7, #0]
 800ecb0:	2005      	movs	r0, #5
 800ecb2:	e026      	b.n	800ed02 <__hexnan+0x132>
 800ecb4:	3501      	adds	r5, #1
 800ecb6:	2d08      	cmp	r5, #8
 800ecb8:	f10b 0b01 	add.w	fp, fp, #1
 800ecbc:	dd06      	ble.n	800eccc <__hexnan+0xfc>
 800ecbe:	4544      	cmp	r4, r8
 800ecc0:	d9c3      	bls.n	800ec4a <__hexnan+0x7a>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecc8:	2501      	movs	r5, #1
 800ecca:	3c04      	subs	r4, #4
 800eccc:	6822      	ldr	r2, [r4, #0]
 800ecce:	f000 000f 	and.w	r0, r0, #15
 800ecd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ecd6:	6022      	str	r2, [r4, #0]
 800ecd8:	e7b7      	b.n	800ec4a <__hexnan+0x7a>
 800ecda:	2508      	movs	r5, #8
 800ecdc:	e7b5      	b.n	800ec4a <__hexnan+0x7a>
 800ecde:	9b01      	ldr	r3, [sp, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d0df      	beq.n	800eca4 <__hexnan+0xd4>
 800ece4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ece8:	f1c3 0320 	rsb	r3, r3, #32
 800ecec:	fa22 f303 	lsr.w	r3, r2, r3
 800ecf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ecf4:	401a      	ands	r2, r3
 800ecf6:	f846 2c04 	str.w	r2, [r6, #-4]
 800ecfa:	e7d3      	b.n	800eca4 <__hexnan+0xd4>
 800ecfc:	3f04      	subs	r7, #4
 800ecfe:	e7d1      	b.n	800eca4 <__hexnan+0xd4>
 800ed00:	2004      	movs	r0, #4
 800ed02:	b007      	add	sp, #28
 800ed04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed08 <_localeconv_r>:
 800ed08:	4800      	ldr	r0, [pc, #0]	; (800ed0c <_localeconv_r+0x4>)
 800ed0a:	4770      	bx	lr
 800ed0c:	200001a4 	.word	0x200001a4

0800ed10 <__retarget_lock_init_recursive>:
 800ed10:	4770      	bx	lr

0800ed12 <__retarget_lock_acquire_recursive>:
 800ed12:	4770      	bx	lr

0800ed14 <__retarget_lock_release_recursive>:
 800ed14:	4770      	bx	lr

0800ed16 <__swhatbuf_r>:
 800ed16:	b570      	push	{r4, r5, r6, lr}
 800ed18:	460e      	mov	r6, r1
 800ed1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed1e:	2900      	cmp	r1, #0
 800ed20:	b096      	sub	sp, #88	; 0x58
 800ed22:	4614      	mov	r4, r2
 800ed24:	461d      	mov	r5, r3
 800ed26:	da08      	bge.n	800ed3a <__swhatbuf_r+0x24>
 800ed28:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	602a      	str	r2, [r5, #0]
 800ed30:	061a      	lsls	r2, r3, #24
 800ed32:	d410      	bmi.n	800ed56 <__swhatbuf_r+0x40>
 800ed34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed38:	e00e      	b.n	800ed58 <__swhatbuf_r+0x42>
 800ed3a:	466a      	mov	r2, sp
 800ed3c:	f001 f84a 	bl	800fdd4 <_fstat_r>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	dbf1      	blt.n	800ed28 <__swhatbuf_r+0x12>
 800ed44:	9a01      	ldr	r2, [sp, #4]
 800ed46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed4e:	425a      	negs	r2, r3
 800ed50:	415a      	adcs	r2, r3
 800ed52:	602a      	str	r2, [r5, #0]
 800ed54:	e7ee      	b.n	800ed34 <__swhatbuf_r+0x1e>
 800ed56:	2340      	movs	r3, #64	; 0x40
 800ed58:	2000      	movs	r0, #0
 800ed5a:	6023      	str	r3, [r4, #0]
 800ed5c:	b016      	add	sp, #88	; 0x58
 800ed5e:	bd70      	pop	{r4, r5, r6, pc}

0800ed60 <__smakebuf_r>:
 800ed60:	898b      	ldrh	r3, [r1, #12]
 800ed62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed64:	079d      	lsls	r5, r3, #30
 800ed66:	4606      	mov	r6, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	d507      	bpl.n	800ed7c <__smakebuf_r+0x1c>
 800ed6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	6123      	str	r3, [r4, #16]
 800ed74:	2301      	movs	r3, #1
 800ed76:	6163      	str	r3, [r4, #20]
 800ed78:	b002      	add	sp, #8
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	ab01      	add	r3, sp, #4
 800ed7e:	466a      	mov	r2, sp
 800ed80:	f7ff ffc9 	bl	800ed16 <__swhatbuf_r>
 800ed84:	9900      	ldr	r1, [sp, #0]
 800ed86:	4605      	mov	r5, r0
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f000 fd87 	bl	800f89c <_malloc_r>
 800ed8e:	b948      	cbnz	r0, 800eda4 <__smakebuf_r+0x44>
 800ed90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed94:	059a      	lsls	r2, r3, #22
 800ed96:	d4ef      	bmi.n	800ed78 <__smakebuf_r+0x18>
 800ed98:	f023 0303 	bic.w	r3, r3, #3
 800ed9c:	f043 0302 	orr.w	r3, r3, #2
 800eda0:	81a3      	strh	r3, [r4, #12]
 800eda2:	e7e3      	b.n	800ed6c <__smakebuf_r+0xc>
 800eda4:	4b0d      	ldr	r3, [pc, #52]	; (800eddc <__smakebuf_r+0x7c>)
 800eda6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eda8:	89a3      	ldrh	r3, [r4, #12]
 800edaa:	6020      	str	r0, [r4, #0]
 800edac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edb0:	81a3      	strh	r3, [r4, #12]
 800edb2:	9b00      	ldr	r3, [sp, #0]
 800edb4:	6163      	str	r3, [r4, #20]
 800edb6:	9b01      	ldr	r3, [sp, #4]
 800edb8:	6120      	str	r0, [r4, #16]
 800edba:	b15b      	cbz	r3, 800edd4 <__smakebuf_r+0x74>
 800edbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edc0:	4630      	mov	r0, r6
 800edc2:	f001 f819 	bl	800fdf8 <_isatty_r>
 800edc6:	b128      	cbz	r0, 800edd4 <__smakebuf_r+0x74>
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	f023 0303 	bic.w	r3, r3, #3
 800edce:	f043 0301 	orr.w	r3, r3, #1
 800edd2:	81a3      	strh	r3, [r4, #12]
 800edd4:	89a0      	ldrh	r0, [r4, #12]
 800edd6:	4305      	orrs	r5, r0
 800edd8:	81a5      	strh	r5, [r4, #12]
 800edda:	e7cd      	b.n	800ed78 <__smakebuf_r+0x18>
 800eddc:	0800e489 	.word	0x0800e489

0800ede0 <malloc>:
 800ede0:	4b02      	ldr	r3, [pc, #8]	; (800edec <malloc+0xc>)
 800ede2:	4601      	mov	r1, r0
 800ede4:	6818      	ldr	r0, [r3, #0]
 800ede6:	f000 bd59 	b.w	800f89c <_malloc_r>
 800edea:	bf00      	nop
 800edec:	2000004c 	.word	0x2000004c

0800edf0 <__ascii_mbtowc>:
 800edf0:	b082      	sub	sp, #8
 800edf2:	b901      	cbnz	r1, 800edf6 <__ascii_mbtowc+0x6>
 800edf4:	a901      	add	r1, sp, #4
 800edf6:	b142      	cbz	r2, 800ee0a <__ascii_mbtowc+0x1a>
 800edf8:	b14b      	cbz	r3, 800ee0e <__ascii_mbtowc+0x1e>
 800edfa:	7813      	ldrb	r3, [r2, #0]
 800edfc:	600b      	str	r3, [r1, #0]
 800edfe:	7812      	ldrb	r2, [r2, #0]
 800ee00:	1e10      	subs	r0, r2, #0
 800ee02:	bf18      	it	ne
 800ee04:	2001      	movne	r0, #1
 800ee06:	b002      	add	sp, #8
 800ee08:	4770      	bx	lr
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	e7fb      	b.n	800ee06 <__ascii_mbtowc+0x16>
 800ee0e:	f06f 0001 	mvn.w	r0, #1
 800ee12:	e7f8      	b.n	800ee06 <__ascii_mbtowc+0x16>

0800ee14 <_Balloc>:
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee18:	4604      	mov	r4, r0
 800ee1a:	460d      	mov	r5, r1
 800ee1c:	b976      	cbnz	r6, 800ee3c <_Balloc+0x28>
 800ee1e:	2010      	movs	r0, #16
 800ee20:	f7ff ffde 	bl	800ede0 <malloc>
 800ee24:	4602      	mov	r2, r0
 800ee26:	6260      	str	r0, [r4, #36]	; 0x24
 800ee28:	b920      	cbnz	r0, 800ee34 <_Balloc+0x20>
 800ee2a:	4b18      	ldr	r3, [pc, #96]	; (800ee8c <_Balloc+0x78>)
 800ee2c:	4818      	ldr	r0, [pc, #96]	; (800ee90 <_Balloc+0x7c>)
 800ee2e:	2166      	movs	r1, #102	; 0x66
 800ee30:	f000 ff90 	bl	800fd54 <__assert_func>
 800ee34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee38:	6006      	str	r6, [r0, #0]
 800ee3a:	60c6      	str	r6, [r0, #12]
 800ee3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ee3e:	68f3      	ldr	r3, [r6, #12]
 800ee40:	b183      	cbz	r3, 800ee64 <_Balloc+0x50>
 800ee42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee4a:	b9b8      	cbnz	r0, 800ee7c <_Balloc+0x68>
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ee52:	1d72      	adds	r2, r6, #5
 800ee54:	0092      	lsls	r2, r2, #2
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 fc9d 	bl	800f796 <_calloc_r>
 800ee5c:	b160      	cbz	r0, 800ee78 <_Balloc+0x64>
 800ee5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee62:	e00e      	b.n	800ee82 <_Balloc+0x6e>
 800ee64:	2221      	movs	r2, #33	; 0x21
 800ee66:	2104      	movs	r1, #4
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f000 fc94 	bl	800f796 <_calloc_r>
 800ee6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee70:	60f0      	str	r0, [r6, #12]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1e4      	bne.n	800ee42 <_Balloc+0x2e>
 800ee78:	2000      	movs	r0, #0
 800ee7a:	bd70      	pop	{r4, r5, r6, pc}
 800ee7c:	6802      	ldr	r2, [r0, #0]
 800ee7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee82:	2300      	movs	r3, #0
 800ee84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee88:	e7f7      	b.n	800ee7a <_Balloc+0x66>
 800ee8a:	bf00      	nop
 800ee8c:	08011c3e 	.word	0x08011c3e
 800ee90:	08011da0 	.word	0x08011da0

0800ee94 <_Bfree>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee98:	4605      	mov	r5, r0
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	b976      	cbnz	r6, 800eebc <_Bfree+0x28>
 800ee9e:	2010      	movs	r0, #16
 800eea0:	f7ff ff9e 	bl	800ede0 <malloc>
 800eea4:	4602      	mov	r2, r0
 800eea6:	6268      	str	r0, [r5, #36]	; 0x24
 800eea8:	b920      	cbnz	r0, 800eeb4 <_Bfree+0x20>
 800eeaa:	4b09      	ldr	r3, [pc, #36]	; (800eed0 <_Bfree+0x3c>)
 800eeac:	4809      	ldr	r0, [pc, #36]	; (800eed4 <_Bfree+0x40>)
 800eeae:	218a      	movs	r1, #138	; 0x8a
 800eeb0:	f000 ff50 	bl	800fd54 <__assert_func>
 800eeb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eeb8:	6006      	str	r6, [r0, #0]
 800eeba:	60c6      	str	r6, [r0, #12]
 800eebc:	b13c      	cbz	r4, 800eece <_Bfree+0x3a>
 800eebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eec0:	6862      	ldr	r2, [r4, #4]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eec8:	6021      	str	r1, [r4, #0]
 800eeca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eece:	bd70      	pop	{r4, r5, r6, pc}
 800eed0:	08011c3e 	.word	0x08011c3e
 800eed4:	08011da0 	.word	0x08011da0

0800eed8 <__multadd>:
 800eed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eedc:	690d      	ldr	r5, [r1, #16]
 800eede:	4607      	mov	r7, r0
 800eee0:	460c      	mov	r4, r1
 800eee2:	461e      	mov	r6, r3
 800eee4:	f101 0c14 	add.w	ip, r1, #20
 800eee8:	2000      	movs	r0, #0
 800eeea:	f8dc 3000 	ldr.w	r3, [ip]
 800eeee:	b299      	uxth	r1, r3
 800eef0:	fb02 6101 	mla	r1, r2, r1, r6
 800eef4:	0c1e      	lsrs	r6, r3, #16
 800eef6:	0c0b      	lsrs	r3, r1, #16
 800eef8:	fb02 3306 	mla	r3, r2, r6, r3
 800eefc:	b289      	uxth	r1, r1
 800eefe:	3001      	adds	r0, #1
 800ef00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef04:	4285      	cmp	r5, r0
 800ef06:	f84c 1b04 	str.w	r1, [ip], #4
 800ef0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef0e:	dcec      	bgt.n	800eeea <__multadd+0x12>
 800ef10:	b30e      	cbz	r6, 800ef56 <__multadd+0x7e>
 800ef12:	68a3      	ldr	r3, [r4, #8]
 800ef14:	42ab      	cmp	r3, r5
 800ef16:	dc19      	bgt.n	800ef4c <__multadd+0x74>
 800ef18:	6861      	ldr	r1, [r4, #4]
 800ef1a:	4638      	mov	r0, r7
 800ef1c:	3101      	adds	r1, #1
 800ef1e:	f7ff ff79 	bl	800ee14 <_Balloc>
 800ef22:	4680      	mov	r8, r0
 800ef24:	b928      	cbnz	r0, 800ef32 <__multadd+0x5a>
 800ef26:	4602      	mov	r2, r0
 800ef28:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <__multadd+0x84>)
 800ef2a:	480d      	ldr	r0, [pc, #52]	; (800ef60 <__multadd+0x88>)
 800ef2c:	21b5      	movs	r1, #181	; 0xb5
 800ef2e:	f000 ff11 	bl	800fd54 <__assert_func>
 800ef32:	6922      	ldr	r2, [r4, #16]
 800ef34:	3202      	adds	r2, #2
 800ef36:	f104 010c 	add.w	r1, r4, #12
 800ef3a:	0092      	lsls	r2, r2, #2
 800ef3c:	300c      	adds	r0, #12
 800ef3e:	f7fc feb7 	bl	800bcb0 <memcpy>
 800ef42:	4621      	mov	r1, r4
 800ef44:	4638      	mov	r0, r7
 800ef46:	f7ff ffa5 	bl	800ee94 <_Bfree>
 800ef4a:	4644      	mov	r4, r8
 800ef4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef50:	3501      	adds	r5, #1
 800ef52:	615e      	str	r6, [r3, #20]
 800ef54:	6125      	str	r5, [r4, #16]
 800ef56:	4620      	mov	r0, r4
 800ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5c:	08011cb0 	.word	0x08011cb0
 800ef60:	08011da0 	.word	0x08011da0

0800ef64 <__s2b>:
 800ef64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef68:	460c      	mov	r4, r1
 800ef6a:	4615      	mov	r5, r2
 800ef6c:	461f      	mov	r7, r3
 800ef6e:	2209      	movs	r2, #9
 800ef70:	3308      	adds	r3, #8
 800ef72:	4606      	mov	r6, r0
 800ef74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef78:	2100      	movs	r1, #0
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	db09      	blt.n	800ef94 <__s2b+0x30>
 800ef80:	4630      	mov	r0, r6
 800ef82:	f7ff ff47 	bl	800ee14 <_Balloc>
 800ef86:	b940      	cbnz	r0, 800ef9a <__s2b+0x36>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	4b19      	ldr	r3, [pc, #100]	; (800eff0 <__s2b+0x8c>)
 800ef8c:	4819      	ldr	r0, [pc, #100]	; (800eff4 <__s2b+0x90>)
 800ef8e:	21ce      	movs	r1, #206	; 0xce
 800ef90:	f000 fee0 	bl	800fd54 <__assert_func>
 800ef94:	0052      	lsls	r2, r2, #1
 800ef96:	3101      	adds	r1, #1
 800ef98:	e7f0      	b.n	800ef7c <__s2b+0x18>
 800ef9a:	9b08      	ldr	r3, [sp, #32]
 800ef9c:	6143      	str	r3, [r0, #20]
 800ef9e:	2d09      	cmp	r5, #9
 800efa0:	f04f 0301 	mov.w	r3, #1
 800efa4:	6103      	str	r3, [r0, #16]
 800efa6:	dd16      	ble.n	800efd6 <__s2b+0x72>
 800efa8:	f104 0909 	add.w	r9, r4, #9
 800efac:	46c8      	mov	r8, r9
 800efae:	442c      	add	r4, r5
 800efb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800efb4:	4601      	mov	r1, r0
 800efb6:	3b30      	subs	r3, #48	; 0x30
 800efb8:	220a      	movs	r2, #10
 800efba:	4630      	mov	r0, r6
 800efbc:	f7ff ff8c 	bl	800eed8 <__multadd>
 800efc0:	45a0      	cmp	r8, r4
 800efc2:	d1f5      	bne.n	800efb0 <__s2b+0x4c>
 800efc4:	f1a5 0408 	sub.w	r4, r5, #8
 800efc8:	444c      	add	r4, r9
 800efca:	1b2d      	subs	r5, r5, r4
 800efcc:	1963      	adds	r3, r4, r5
 800efce:	42bb      	cmp	r3, r7
 800efd0:	db04      	blt.n	800efdc <__s2b+0x78>
 800efd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efd6:	340a      	adds	r4, #10
 800efd8:	2509      	movs	r5, #9
 800efda:	e7f6      	b.n	800efca <__s2b+0x66>
 800efdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800efe0:	4601      	mov	r1, r0
 800efe2:	3b30      	subs	r3, #48	; 0x30
 800efe4:	220a      	movs	r2, #10
 800efe6:	4630      	mov	r0, r6
 800efe8:	f7ff ff76 	bl	800eed8 <__multadd>
 800efec:	e7ee      	b.n	800efcc <__s2b+0x68>
 800efee:	bf00      	nop
 800eff0:	08011cb0 	.word	0x08011cb0
 800eff4:	08011da0 	.word	0x08011da0

0800eff8 <__hi0bits>:
 800eff8:	0c03      	lsrs	r3, r0, #16
 800effa:	041b      	lsls	r3, r3, #16
 800effc:	b9d3      	cbnz	r3, 800f034 <__hi0bits+0x3c>
 800effe:	0400      	lsls	r0, r0, #16
 800f000:	2310      	movs	r3, #16
 800f002:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f006:	bf04      	itt	eq
 800f008:	0200      	lsleq	r0, r0, #8
 800f00a:	3308      	addeq	r3, #8
 800f00c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f010:	bf04      	itt	eq
 800f012:	0100      	lsleq	r0, r0, #4
 800f014:	3304      	addeq	r3, #4
 800f016:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f01a:	bf04      	itt	eq
 800f01c:	0080      	lsleq	r0, r0, #2
 800f01e:	3302      	addeq	r3, #2
 800f020:	2800      	cmp	r0, #0
 800f022:	db05      	blt.n	800f030 <__hi0bits+0x38>
 800f024:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f028:	f103 0301 	add.w	r3, r3, #1
 800f02c:	bf08      	it	eq
 800f02e:	2320      	moveq	r3, #32
 800f030:	4618      	mov	r0, r3
 800f032:	4770      	bx	lr
 800f034:	2300      	movs	r3, #0
 800f036:	e7e4      	b.n	800f002 <__hi0bits+0xa>

0800f038 <__lo0bits>:
 800f038:	6803      	ldr	r3, [r0, #0]
 800f03a:	f013 0207 	ands.w	r2, r3, #7
 800f03e:	4601      	mov	r1, r0
 800f040:	d00b      	beq.n	800f05a <__lo0bits+0x22>
 800f042:	07da      	lsls	r2, r3, #31
 800f044:	d423      	bmi.n	800f08e <__lo0bits+0x56>
 800f046:	0798      	lsls	r0, r3, #30
 800f048:	bf49      	itett	mi
 800f04a:	085b      	lsrmi	r3, r3, #1
 800f04c:	089b      	lsrpl	r3, r3, #2
 800f04e:	2001      	movmi	r0, #1
 800f050:	600b      	strmi	r3, [r1, #0]
 800f052:	bf5c      	itt	pl
 800f054:	600b      	strpl	r3, [r1, #0]
 800f056:	2002      	movpl	r0, #2
 800f058:	4770      	bx	lr
 800f05a:	b298      	uxth	r0, r3
 800f05c:	b9a8      	cbnz	r0, 800f08a <__lo0bits+0x52>
 800f05e:	0c1b      	lsrs	r3, r3, #16
 800f060:	2010      	movs	r0, #16
 800f062:	b2da      	uxtb	r2, r3
 800f064:	b90a      	cbnz	r2, 800f06a <__lo0bits+0x32>
 800f066:	3008      	adds	r0, #8
 800f068:	0a1b      	lsrs	r3, r3, #8
 800f06a:	071a      	lsls	r2, r3, #28
 800f06c:	bf04      	itt	eq
 800f06e:	091b      	lsreq	r3, r3, #4
 800f070:	3004      	addeq	r0, #4
 800f072:	079a      	lsls	r2, r3, #30
 800f074:	bf04      	itt	eq
 800f076:	089b      	lsreq	r3, r3, #2
 800f078:	3002      	addeq	r0, #2
 800f07a:	07da      	lsls	r2, r3, #31
 800f07c:	d403      	bmi.n	800f086 <__lo0bits+0x4e>
 800f07e:	085b      	lsrs	r3, r3, #1
 800f080:	f100 0001 	add.w	r0, r0, #1
 800f084:	d005      	beq.n	800f092 <__lo0bits+0x5a>
 800f086:	600b      	str	r3, [r1, #0]
 800f088:	4770      	bx	lr
 800f08a:	4610      	mov	r0, r2
 800f08c:	e7e9      	b.n	800f062 <__lo0bits+0x2a>
 800f08e:	2000      	movs	r0, #0
 800f090:	4770      	bx	lr
 800f092:	2020      	movs	r0, #32
 800f094:	4770      	bx	lr
	...

0800f098 <__i2b>:
 800f098:	b510      	push	{r4, lr}
 800f09a:	460c      	mov	r4, r1
 800f09c:	2101      	movs	r1, #1
 800f09e:	f7ff feb9 	bl	800ee14 <_Balloc>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	b928      	cbnz	r0, 800f0b2 <__i2b+0x1a>
 800f0a6:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <__i2b+0x24>)
 800f0a8:	4805      	ldr	r0, [pc, #20]	; (800f0c0 <__i2b+0x28>)
 800f0aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f0ae:	f000 fe51 	bl	800fd54 <__assert_func>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	6144      	str	r4, [r0, #20]
 800f0b6:	6103      	str	r3, [r0, #16]
 800f0b8:	bd10      	pop	{r4, pc}
 800f0ba:	bf00      	nop
 800f0bc:	08011cb0 	.word	0x08011cb0
 800f0c0:	08011da0 	.word	0x08011da0

0800f0c4 <__multiply>:
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	4691      	mov	r9, r2
 800f0ca:	690a      	ldr	r2, [r1, #16]
 800f0cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	bfb8      	it	lt
 800f0d4:	460b      	movlt	r3, r1
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	bfbc      	itt	lt
 800f0da:	464c      	movlt	r4, r9
 800f0dc:	4699      	movlt	r9, r3
 800f0de:	6927      	ldr	r7, [r4, #16]
 800f0e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f0e4:	68a3      	ldr	r3, [r4, #8]
 800f0e6:	6861      	ldr	r1, [r4, #4]
 800f0e8:	eb07 060a 	add.w	r6, r7, sl
 800f0ec:	42b3      	cmp	r3, r6
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	bfb8      	it	lt
 800f0f2:	3101      	addlt	r1, #1
 800f0f4:	f7ff fe8e 	bl	800ee14 <_Balloc>
 800f0f8:	b930      	cbnz	r0, 800f108 <__multiply+0x44>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	4b44      	ldr	r3, [pc, #272]	; (800f210 <__multiply+0x14c>)
 800f0fe:	4845      	ldr	r0, [pc, #276]	; (800f214 <__multiply+0x150>)
 800f100:	f240 115d 	movw	r1, #349	; 0x15d
 800f104:	f000 fe26 	bl	800fd54 <__assert_func>
 800f108:	f100 0514 	add.w	r5, r0, #20
 800f10c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f110:	462b      	mov	r3, r5
 800f112:	2200      	movs	r2, #0
 800f114:	4543      	cmp	r3, r8
 800f116:	d321      	bcc.n	800f15c <__multiply+0x98>
 800f118:	f104 0314 	add.w	r3, r4, #20
 800f11c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f120:	f109 0314 	add.w	r3, r9, #20
 800f124:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f128:	9202      	str	r2, [sp, #8]
 800f12a:	1b3a      	subs	r2, r7, r4
 800f12c:	3a15      	subs	r2, #21
 800f12e:	f022 0203 	bic.w	r2, r2, #3
 800f132:	3204      	adds	r2, #4
 800f134:	f104 0115 	add.w	r1, r4, #21
 800f138:	428f      	cmp	r7, r1
 800f13a:	bf38      	it	cc
 800f13c:	2204      	movcc	r2, #4
 800f13e:	9201      	str	r2, [sp, #4]
 800f140:	9a02      	ldr	r2, [sp, #8]
 800f142:	9303      	str	r3, [sp, #12]
 800f144:	429a      	cmp	r2, r3
 800f146:	d80c      	bhi.n	800f162 <__multiply+0x9e>
 800f148:	2e00      	cmp	r6, #0
 800f14a:	dd03      	ble.n	800f154 <__multiply+0x90>
 800f14c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f150:	2b00      	cmp	r3, #0
 800f152:	d05a      	beq.n	800f20a <__multiply+0x146>
 800f154:	6106      	str	r6, [r0, #16]
 800f156:	b005      	add	sp, #20
 800f158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f15c:	f843 2b04 	str.w	r2, [r3], #4
 800f160:	e7d8      	b.n	800f114 <__multiply+0x50>
 800f162:	f8b3 a000 	ldrh.w	sl, [r3]
 800f166:	f1ba 0f00 	cmp.w	sl, #0
 800f16a:	d024      	beq.n	800f1b6 <__multiply+0xf2>
 800f16c:	f104 0e14 	add.w	lr, r4, #20
 800f170:	46a9      	mov	r9, r5
 800f172:	f04f 0c00 	mov.w	ip, #0
 800f176:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f17a:	f8d9 1000 	ldr.w	r1, [r9]
 800f17e:	fa1f fb82 	uxth.w	fp, r2
 800f182:	b289      	uxth	r1, r1
 800f184:	fb0a 110b 	mla	r1, sl, fp, r1
 800f188:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f18c:	f8d9 2000 	ldr.w	r2, [r9]
 800f190:	4461      	add	r1, ip
 800f192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f196:	fb0a c20b 	mla	r2, sl, fp, ip
 800f19a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f19e:	b289      	uxth	r1, r1
 800f1a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1a4:	4577      	cmp	r7, lr
 800f1a6:	f849 1b04 	str.w	r1, [r9], #4
 800f1aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1ae:	d8e2      	bhi.n	800f176 <__multiply+0xb2>
 800f1b0:	9a01      	ldr	r2, [sp, #4]
 800f1b2:	f845 c002 	str.w	ip, [r5, r2]
 800f1b6:	9a03      	ldr	r2, [sp, #12]
 800f1b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f1bc:	3304      	adds	r3, #4
 800f1be:	f1b9 0f00 	cmp.w	r9, #0
 800f1c2:	d020      	beq.n	800f206 <__multiply+0x142>
 800f1c4:	6829      	ldr	r1, [r5, #0]
 800f1c6:	f104 0c14 	add.w	ip, r4, #20
 800f1ca:	46ae      	mov	lr, r5
 800f1cc:	f04f 0a00 	mov.w	sl, #0
 800f1d0:	f8bc b000 	ldrh.w	fp, [ip]
 800f1d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f1d8:	fb09 220b 	mla	r2, r9, fp, r2
 800f1dc:	4492      	add	sl, r2
 800f1de:	b289      	uxth	r1, r1
 800f1e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f1e4:	f84e 1b04 	str.w	r1, [lr], #4
 800f1e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f1ec:	f8be 1000 	ldrh.w	r1, [lr]
 800f1f0:	0c12      	lsrs	r2, r2, #16
 800f1f2:	fb09 1102 	mla	r1, r9, r2, r1
 800f1f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f1fa:	4567      	cmp	r7, ip
 800f1fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f200:	d8e6      	bhi.n	800f1d0 <__multiply+0x10c>
 800f202:	9a01      	ldr	r2, [sp, #4]
 800f204:	50a9      	str	r1, [r5, r2]
 800f206:	3504      	adds	r5, #4
 800f208:	e79a      	b.n	800f140 <__multiply+0x7c>
 800f20a:	3e01      	subs	r6, #1
 800f20c:	e79c      	b.n	800f148 <__multiply+0x84>
 800f20e:	bf00      	nop
 800f210:	08011cb0 	.word	0x08011cb0
 800f214:	08011da0 	.word	0x08011da0

0800f218 <__pow5mult>:
 800f218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f21c:	4615      	mov	r5, r2
 800f21e:	f012 0203 	ands.w	r2, r2, #3
 800f222:	4606      	mov	r6, r0
 800f224:	460f      	mov	r7, r1
 800f226:	d007      	beq.n	800f238 <__pow5mult+0x20>
 800f228:	4c25      	ldr	r4, [pc, #148]	; (800f2c0 <__pow5mult+0xa8>)
 800f22a:	3a01      	subs	r2, #1
 800f22c:	2300      	movs	r3, #0
 800f22e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f232:	f7ff fe51 	bl	800eed8 <__multadd>
 800f236:	4607      	mov	r7, r0
 800f238:	10ad      	asrs	r5, r5, #2
 800f23a:	d03d      	beq.n	800f2b8 <__pow5mult+0xa0>
 800f23c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f23e:	b97c      	cbnz	r4, 800f260 <__pow5mult+0x48>
 800f240:	2010      	movs	r0, #16
 800f242:	f7ff fdcd 	bl	800ede0 <malloc>
 800f246:	4602      	mov	r2, r0
 800f248:	6270      	str	r0, [r6, #36]	; 0x24
 800f24a:	b928      	cbnz	r0, 800f258 <__pow5mult+0x40>
 800f24c:	4b1d      	ldr	r3, [pc, #116]	; (800f2c4 <__pow5mult+0xac>)
 800f24e:	481e      	ldr	r0, [pc, #120]	; (800f2c8 <__pow5mult+0xb0>)
 800f250:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f254:	f000 fd7e 	bl	800fd54 <__assert_func>
 800f258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f25c:	6004      	str	r4, [r0, #0]
 800f25e:	60c4      	str	r4, [r0, #12]
 800f260:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f268:	b94c      	cbnz	r4, 800f27e <__pow5mult+0x66>
 800f26a:	f240 2171 	movw	r1, #625	; 0x271
 800f26e:	4630      	mov	r0, r6
 800f270:	f7ff ff12 	bl	800f098 <__i2b>
 800f274:	2300      	movs	r3, #0
 800f276:	f8c8 0008 	str.w	r0, [r8, #8]
 800f27a:	4604      	mov	r4, r0
 800f27c:	6003      	str	r3, [r0, #0]
 800f27e:	f04f 0900 	mov.w	r9, #0
 800f282:	07eb      	lsls	r3, r5, #31
 800f284:	d50a      	bpl.n	800f29c <__pow5mult+0x84>
 800f286:	4639      	mov	r1, r7
 800f288:	4622      	mov	r2, r4
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7ff ff1a 	bl	800f0c4 <__multiply>
 800f290:	4639      	mov	r1, r7
 800f292:	4680      	mov	r8, r0
 800f294:	4630      	mov	r0, r6
 800f296:	f7ff fdfd 	bl	800ee94 <_Bfree>
 800f29a:	4647      	mov	r7, r8
 800f29c:	106d      	asrs	r5, r5, #1
 800f29e:	d00b      	beq.n	800f2b8 <__pow5mult+0xa0>
 800f2a0:	6820      	ldr	r0, [r4, #0]
 800f2a2:	b938      	cbnz	r0, 800f2b4 <__pow5mult+0x9c>
 800f2a4:	4622      	mov	r2, r4
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	f7ff ff0b 	bl	800f0c4 <__multiply>
 800f2ae:	6020      	str	r0, [r4, #0]
 800f2b0:	f8c0 9000 	str.w	r9, [r0]
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	e7e4      	b.n	800f282 <__pow5mult+0x6a>
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2be:	bf00      	nop
 800f2c0:	08011ef0 	.word	0x08011ef0
 800f2c4:	08011c3e 	.word	0x08011c3e
 800f2c8:	08011da0 	.word	0x08011da0

0800f2cc <__lshift>:
 800f2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	6849      	ldr	r1, [r1, #4]
 800f2d4:	6923      	ldr	r3, [r4, #16]
 800f2d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2da:	68a3      	ldr	r3, [r4, #8]
 800f2dc:	4607      	mov	r7, r0
 800f2de:	4691      	mov	r9, r2
 800f2e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2e4:	f108 0601 	add.w	r6, r8, #1
 800f2e8:	42b3      	cmp	r3, r6
 800f2ea:	db0b      	blt.n	800f304 <__lshift+0x38>
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	f7ff fd91 	bl	800ee14 <_Balloc>
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	b948      	cbnz	r0, 800f30a <__lshift+0x3e>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	4b2a      	ldr	r3, [pc, #168]	; (800f3a4 <__lshift+0xd8>)
 800f2fa:	482b      	ldr	r0, [pc, #172]	; (800f3a8 <__lshift+0xdc>)
 800f2fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f300:	f000 fd28 	bl	800fd54 <__assert_func>
 800f304:	3101      	adds	r1, #1
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	e7ee      	b.n	800f2e8 <__lshift+0x1c>
 800f30a:	2300      	movs	r3, #0
 800f30c:	f100 0114 	add.w	r1, r0, #20
 800f310:	f100 0210 	add.w	r2, r0, #16
 800f314:	4618      	mov	r0, r3
 800f316:	4553      	cmp	r3, sl
 800f318:	db37      	blt.n	800f38a <__lshift+0xbe>
 800f31a:	6920      	ldr	r0, [r4, #16]
 800f31c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f320:	f104 0314 	add.w	r3, r4, #20
 800f324:	f019 091f 	ands.w	r9, r9, #31
 800f328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f32c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f330:	d02f      	beq.n	800f392 <__lshift+0xc6>
 800f332:	f1c9 0e20 	rsb	lr, r9, #32
 800f336:	468a      	mov	sl, r1
 800f338:	f04f 0c00 	mov.w	ip, #0
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	fa02 f209 	lsl.w	r2, r2, r9
 800f342:	ea42 020c 	orr.w	r2, r2, ip
 800f346:	f84a 2b04 	str.w	r2, [sl], #4
 800f34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f34e:	4298      	cmp	r0, r3
 800f350:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f354:	d8f2      	bhi.n	800f33c <__lshift+0x70>
 800f356:	1b03      	subs	r3, r0, r4
 800f358:	3b15      	subs	r3, #21
 800f35a:	f023 0303 	bic.w	r3, r3, #3
 800f35e:	3304      	adds	r3, #4
 800f360:	f104 0215 	add.w	r2, r4, #21
 800f364:	4290      	cmp	r0, r2
 800f366:	bf38      	it	cc
 800f368:	2304      	movcc	r3, #4
 800f36a:	f841 c003 	str.w	ip, [r1, r3]
 800f36e:	f1bc 0f00 	cmp.w	ip, #0
 800f372:	d001      	beq.n	800f378 <__lshift+0xac>
 800f374:	f108 0602 	add.w	r6, r8, #2
 800f378:	3e01      	subs	r6, #1
 800f37a:	4638      	mov	r0, r7
 800f37c:	612e      	str	r6, [r5, #16]
 800f37e:	4621      	mov	r1, r4
 800f380:	f7ff fd88 	bl	800ee94 <_Bfree>
 800f384:	4628      	mov	r0, r5
 800f386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f38e:	3301      	adds	r3, #1
 800f390:	e7c1      	b.n	800f316 <__lshift+0x4a>
 800f392:	3904      	subs	r1, #4
 800f394:	f853 2b04 	ldr.w	r2, [r3], #4
 800f398:	f841 2f04 	str.w	r2, [r1, #4]!
 800f39c:	4298      	cmp	r0, r3
 800f39e:	d8f9      	bhi.n	800f394 <__lshift+0xc8>
 800f3a0:	e7ea      	b.n	800f378 <__lshift+0xac>
 800f3a2:	bf00      	nop
 800f3a4:	08011cb0 	.word	0x08011cb0
 800f3a8:	08011da0 	.word	0x08011da0

0800f3ac <__mcmp>:
 800f3ac:	b530      	push	{r4, r5, lr}
 800f3ae:	6902      	ldr	r2, [r0, #16]
 800f3b0:	690c      	ldr	r4, [r1, #16]
 800f3b2:	1b12      	subs	r2, r2, r4
 800f3b4:	d10e      	bne.n	800f3d4 <__mcmp+0x28>
 800f3b6:	f100 0314 	add.w	r3, r0, #20
 800f3ba:	3114      	adds	r1, #20
 800f3bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f3c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f3c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f3c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f3cc:	42a5      	cmp	r5, r4
 800f3ce:	d003      	beq.n	800f3d8 <__mcmp+0x2c>
 800f3d0:	d305      	bcc.n	800f3de <__mcmp+0x32>
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	bd30      	pop	{r4, r5, pc}
 800f3d8:	4283      	cmp	r3, r0
 800f3da:	d3f3      	bcc.n	800f3c4 <__mcmp+0x18>
 800f3dc:	e7fa      	b.n	800f3d4 <__mcmp+0x28>
 800f3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3e2:	e7f7      	b.n	800f3d4 <__mcmp+0x28>

0800f3e4 <__mdiff>:
 800f3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e8:	460c      	mov	r4, r1
 800f3ea:	4606      	mov	r6, r0
 800f3ec:	4611      	mov	r1, r2
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	4690      	mov	r8, r2
 800f3f2:	f7ff ffdb 	bl	800f3ac <__mcmp>
 800f3f6:	1e05      	subs	r5, r0, #0
 800f3f8:	d110      	bne.n	800f41c <__mdiff+0x38>
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f7ff fd09 	bl	800ee14 <_Balloc>
 800f402:	b930      	cbnz	r0, 800f412 <__mdiff+0x2e>
 800f404:	4b3a      	ldr	r3, [pc, #232]	; (800f4f0 <__mdiff+0x10c>)
 800f406:	4602      	mov	r2, r0
 800f408:	f240 2132 	movw	r1, #562	; 0x232
 800f40c:	4839      	ldr	r0, [pc, #228]	; (800f4f4 <__mdiff+0x110>)
 800f40e:	f000 fca1 	bl	800fd54 <__assert_func>
 800f412:	2301      	movs	r3, #1
 800f414:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41c:	bfa4      	itt	ge
 800f41e:	4643      	movge	r3, r8
 800f420:	46a0      	movge	r8, r4
 800f422:	4630      	mov	r0, r6
 800f424:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f428:	bfa6      	itte	ge
 800f42a:	461c      	movge	r4, r3
 800f42c:	2500      	movge	r5, #0
 800f42e:	2501      	movlt	r5, #1
 800f430:	f7ff fcf0 	bl	800ee14 <_Balloc>
 800f434:	b920      	cbnz	r0, 800f440 <__mdiff+0x5c>
 800f436:	4b2e      	ldr	r3, [pc, #184]	; (800f4f0 <__mdiff+0x10c>)
 800f438:	4602      	mov	r2, r0
 800f43a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f43e:	e7e5      	b.n	800f40c <__mdiff+0x28>
 800f440:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f444:	6926      	ldr	r6, [r4, #16]
 800f446:	60c5      	str	r5, [r0, #12]
 800f448:	f104 0914 	add.w	r9, r4, #20
 800f44c:	f108 0514 	add.w	r5, r8, #20
 800f450:	f100 0e14 	add.w	lr, r0, #20
 800f454:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f458:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f45c:	f108 0210 	add.w	r2, r8, #16
 800f460:	46f2      	mov	sl, lr
 800f462:	2100      	movs	r1, #0
 800f464:	f859 3b04 	ldr.w	r3, [r9], #4
 800f468:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f46c:	fa1f f883 	uxth.w	r8, r3
 800f470:	fa11 f18b 	uxtah	r1, r1, fp
 800f474:	0c1b      	lsrs	r3, r3, #16
 800f476:	eba1 0808 	sub.w	r8, r1, r8
 800f47a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f47e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f482:	fa1f f888 	uxth.w	r8, r8
 800f486:	1419      	asrs	r1, r3, #16
 800f488:	454e      	cmp	r6, r9
 800f48a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f48e:	f84a 3b04 	str.w	r3, [sl], #4
 800f492:	d8e7      	bhi.n	800f464 <__mdiff+0x80>
 800f494:	1b33      	subs	r3, r6, r4
 800f496:	3b15      	subs	r3, #21
 800f498:	f023 0303 	bic.w	r3, r3, #3
 800f49c:	3304      	adds	r3, #4
 800f49e:	3415      	adds	r4, #21
 800f4a0:	42a6      	cmp	r6, r4
 800f4a2:	bf38      	it	cc
 800f4a4:	2304      	movcc	r3, #4
 800f4a6:	441d      	add	r5, r3
 800f4a8:	4473      	add	r3, lr
 800f4aa:	469e      	mov	lr, r3
 800f4ac:	462e      	mov	r6, r5
 800f4ae:	4566      	cmp	r6, ip
 800f4b0:	d30e      	bcc.n	800f4d0 <__mdiff+0xec>
 800f4b2:	f10c 0203 	add.w	r2, ip, #3
 800f4b6:	1b52      	subs	r2, r2, r5
 800f4b8:	f022 0203 	bic.w	r2, r2, #3
 800f4bc:	3d03      	subs	r5, #3
 800f4be:	45ac      	cmp	ip, r5
 800f4c0:	bf38      	it	cc
 800f4c2:	2200      	movcc	r2, #0
 800f4c4:	441a      	add	r2, r3
 800f4c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f4ca:	b17b      	cbz	r3, 800f4ec <__mdiff+0x108>
 800f4cc:	6107      	str	r7, [r0, #16]
 800f4ce:	e7a3      	b.n	800f418 <__mdiff+0x34>
 800f4d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800f4d4:	fa11 f288 	uxtah	r2, r1, r8
 800f4d8:	1414      	asrs	r4, r2, #16
 800f4da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f4de:	b292      	uxth	r2, r2
 800f4e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f4e4:	f84e 2b04 	str.w	r2, [lr], #4
 800f4e8:	1421      	asrs	r1, r4, #16
 800f4ea:	e7e0      	b.n	800f4ae <__mdiff+0xca>
 800f4ec:	3f01      	subs	r7, #1
 800f4ee:	e7ea      	b.n	800f4c6 <__mdiff+0xe2>
 800f4f0:	08011cb0 	.word	0x08011cb0
 800f4f4:	08011da0 	.word	0x08011da0

0800f4f8 <__ulp>:
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	ed8d 0b00 	vstr	d0, [sp]
 800f4fe:	9b01      	ldr	r3, [sp, #4]
 800f500:	4912      	ldr	r1, [pc, #72]	; (800f54c <__ulp+0x54>)
 800f502:	4019      	ands	r1, r3
 800f504:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f508:	2900      	cmp	r1, #0
 800f50a:	dd05      	ble.n	800f518 <__ulp+0x20>
 800f50c:	2200      	movs	r2, #0
 800f50e:	460b      	mov	r3, r1
 800f510:	ec43 2b10 	vmov	d0, r2, r3
 800f514:	b002      	add	sp, #8
 800f516:	4770      	bx	lr
 800f518:	4249      	negs	r1, r1
 800f51a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f51e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f522:	f04f 0200 	mov.w	r2, #0
 800f526:	f04f 0300 	mov.w	r3, #0
 800f52a:	da04      	bge.n	800f536 <__ulp+0x3e>
 800f52c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f530:	fa41 f300 	asr.w	r3, r1, r0
 800f534:	e7ec      	b.n	800f510 <__ulp+0x18>
 800f536:	f1a0 0114 	sub.w	r1, r0, #20
 800f53a:	291e      	cmp	r1, #30
 800f53c:	bfda      	itte	le
 800f53e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f542:	fa20 f101 	lsrle.w	r1, r0, r1
 800f546:	2101      	movgt	r1, #1
 800f548:	460a      	mov	r2, r1
 800f54a:	e7e1      	b.n	800f510 <__ulp+0x18>
 800f54c:	7ff00000 	.word	0x7ff00000

0800f550 <__b2d>:
 800f550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f552:	6905      	ldr	r5, [r0, #16]
 800f554:	f100 0714 	add.w	r7, r0, #20
 800f558:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f55c:	1f2e      	subs	r6, r5, #4
 800f55e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f562:	4620      	mov	r0, r4
 800f564:	f7ff fd48 	bl	800eff8 <__hi0bits>
 800f568:	f1c0 0320 	rsb	r3, r0, #32
 800f56c:	280a      	cmp	r0, #10
 800f56e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f5ec <__b2d+0x9c>
 800f572:	600b      	str	r3, [r1, #0]
 800f574:	dc14      	bgt.n	800f5a0 <__b2d+0x50>
 800f576:	f1c0 0e0b 	rsb	lr, r0, #11
 800f57a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f57e:	42b7      	cmp	r7, r6
 800f580:	ea41 030c 	orr.w	r3, r1, ip
 800f584:	bf34      	ite	cc
 800f586:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f58a:	2100      	movcs	r1, #0
 800f58c:	3015      	adds	r0, #21
 800f58e:	fa04 f000 	lsl.w	r0, r4, r0
 800f592:	fa21 f10e 	lsr.w	r1, r1, lr
 800f596:	ea40 0201 	orr.w	r2, r0, r1
 800f59a:	ec43 2b10 	vmov	d0, r2, r3
 800f59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5a0:	42b7      	cmp	r7, r6
 800f5a2:	bf3a      	itte	cc
 800f5a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f5a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f5ac:	2100      	movcs	r1, #0
 800f5ae:	380b      	subs	r0, #11
 800f5b0:	d017      	beq.n	800f5e2 <__b2d+0x92>
 800f5b2:	f1c0 0c20 	rsb	ip, r0, #32
 800f5b6:	fa04 f500 	lsl.w	r5, r4, r0
 800f5ba:	42be      	cmp	r6, r7
 800f5bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800f5c0:	ea45 0504 	orr.w	r5, r5, r4
 800f5c4:	bf8c      	ite	hi
 800f5c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f5ca:	2400      	movls	r4, #0
 800f5cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f5d0:	fa01 f000 	lsl.w	r0, r1, r0
 800f5d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800f5d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f5dc:	ea40 0204 	orr.w	r2, r0, r4
 800f5e0:	e7db      	b.n	800f59a <__b2d+0x4a>
 800f5e2:	ea44 030c 	orr.w	r3, r4, ip
 800f5e6:	460a      	mov	r2, r1
 800f5e8:	e7d7      	b.n	800f59a <__b2d+0x4a>
 800f5ea:	bf00      	nop
 800f5ec:	3ff00000 	.word	0x3ff00000

0800f5f0 <__d2b>:
 800f5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5f4:	4689      	mov	r9, r1
 800f5f6:	2101      	movs	r1, #1
 800f5f8:	ec57 6b10 	vmov	r6, r7, d0
 800f5fc:	4690      	mov	r8, r2
 800f5fe:	f7ff fc09 	bl	800ee14 <_Balloc>
 800f602:	4604      	mov	r4, r0
 800f604:	b930      	cbnz	r0, 800f614 <__d2b+0x24>
 800f606:	4602      	mov	r2, r0
 800f608:	4b25      	ldr	r3, [pc, #148]	; (800f6a0 <__d2b+0xb0>)
 800f60a:	4826      	ldr	r0, [pc, #152]	; (800f6a4 <__d2b+0xb4>)
 800f60c:	f240 310a 	movw	r1, #778	; 0x30a
 800f610:	f000 fba0 	bl	800fd54 <__assert_func>
 800f614:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f61c:	bb35      	cbnz	r5, 800f66c <__d2b+0x7c>
 800f61e:	2e00      	cmp	r6, #0
 800f620:	9301      	str	r3, [sp, #4]
 800f622:	d028      	beq.n	800f676 <__d2b+0x86>
 800f624:	4668      	mov	r0, sp
 800f626:	9600      	str	r6, [sp, #0]
 800f628:	f7ff fd06 	bl	800f038 <__lo0bits>
 800f62c:	9900      	ldr	r1, [sp, #0]
 800f62e:	b300      	cbz	r0, 800f672 <__d2b+0x82>
 800f630:	9a01      	ldr	r2, [sp, #4]
 800f632:	f1c0 0320 	rsb	r3, r0, #32
 800f636:	fa02 f303 	lsl.w	r3, r2, r3
 800f63a:	430b      	orrs	r3, r1
 800f63c:	40c2      	lsrs	r2, r0
 800f63e:	6163      	str	r3, [r4, #20]
 800f640:	9201      	str	r2, [sp, #4]
 800f642:	9b01      	ldr	r3, [sp, #4]
 800f644:	61a3      	str	r3, [r4, #24]
 800f646:	2b00      	cmp	r3, #0
 800f648:	bf14      	ite	ne
 800f64a:	2202      	movne	r2, #2
 800f64c:	2201      	moveq	r2, #1
 800f64e:	6122      	str	r2, [r4, #16]
 800f650:	b1d5      	cbz	r5, 800f688 <__d2b+0x98>
 800f652:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f656:	4405      	add	r5, r0
 800f658:	f8c9 5000 	str.w	r5, [r9]
 800f65c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f660:	f8c8 0000 	str.w	r0, [r8]
 800f664:	4620      	mov	r0, r4
 800f666:	b003      	add	sp, #12
 800f668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f66c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f670:	e7d5      	b.n	800f61e <__d2b+0x2e>
 800f672:	6161      	str	r1, [r4, #20]
 800f674:	e7e5      	b.n	800f642 <__d2b+0x52>
 800f676:	a801      	add	r0, sp, #4
 800f678:	f7ff fcde 	bl	800f038 <__lo0bits>
 800f67c:	9b01      	ldr	r3, [sp, #4]
 800f67e:	6163      	str	r3, [r4, #20]
 800f680:	2201      	movs	r2, #1
 800f682:	6122      	str	r2, [r4, #16]
 800f684:	3020      	adds	r0, #32
 800f686:	e7e3      	b.n	800f650 <__d2b+0x60>
 800f688:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f68c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f690:	f8c9 0000 	str.w	r0, [r9]
 800f694:	6918      	ldr	r0, [r3, #16]
 800f696:	f7ff fcaf 	bl	800eff8 <__hi0bits>
 800f69a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f69e:	e7df      	b.n	800f660 <__d2b+0x70>
 800f6a0:	08011cb0 	.word	0x08011cb0
 800f6a4:	08011da0 	.word	0x08011da0

0800f6a8 <__ratio>:
 800f6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	4688      	mov	r8, r1
 800f6ae:	4669      	mov	r1, sp
 800f6b0:	4681      	mov	r9, r0
 800f6b2:	f7ff ff4d 	bl	800f550 <__b2d>
 800f6b6:	a901      	add	r1, sp, #4
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	ec55 4b10 	vmov	r4, r5, d0
 800f6be:	f7ff ff47 	bl	800f550 <__b2d>
 800f6c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f6ca:	eba3 0c02 	sub.w	ip, r3, r2
 800f6ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f6d2:	1a9b      	subs	r3, r3, r2
 800f6d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f6d8:	ec51 0b10 	vmov	r0, r1, d0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	bfd6      	itet	le
 800f6e0:	460a      	movle	r2, r1
 800f6e2:	462a      	movgt	r2, r5
 800f6e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f6e8:	468b      	mov	fp, r1
 800f6ea:	462f      	mov	r7, r5
 800f6ec:	bfd4      	ite	le
 800f6ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f6f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	ee10 2a10 	vmov	r2, s0
 800f6fc:	465b      	mov	r3, fp
 800f6fe:	4639      	mov	r1, r7
 800f700:	f7f1 f8c4 	bl	800088c <__aeabi_ddiv>
 800f704:	ec41 0b10 	vmov	d0, r0, r1
 800f708:	b003      	add	sp, #12
 800f70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f70e <__copybits>:
 800f70e:	3901      	subs	r1, #1
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	1149      	asrs	r1, r1, #5
 800f714:	6914      	ldr	r4, [r2, #16]
 800f716:	3101      	adds	r1, #1
 800f718:	f102 0314 	add.w	r3, r2, #20
 800f71c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f720:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f724:	1f05      	subs	r5, r0, #4
 800f726:	42a3      	cmp	r3, r4
 800f728:	d30c      	bcc.n	800f744 <__copybits+0x36>
 800f72a:	1aa3      	subs	r3, r4, r2
 800f72c:	3b11      	subs	r3, #17
 800f72e:	f023 0303 	bic.w	r3, r3, #3
 800f732:	3211      	adds	r2, #17
 800f734:	42a2      	cmp	r2, r4
 800f736:	bf88      	it	hi
 800f738:	2300      	movhi	r3, #0
 800f73a:	4418      	add	r0, r3
 800f73c:	2300      	movs	r3, #0
 800f73e:	4288      	cmp	r0, r1
 800f740:	d305      	bcc.n	800f74e <__copybits+0x40>
 800f742:	bd70      	pop	{r4, r5, r6, pc}
 800f744:	f853 6b04 	ldr.w	r6, [r3], #4
 800f748:	f845 6f04 	str.w	r6, [r5, #4]!
 800f74c:	e7eb      	b.n	800f726 <__copybits+0x18>
 800f74e:	f840 3b04 	str.w	r3, [r0], #4
 800f752:	e7f4      	b.n	800f73e <__copybits+0x30>

0800f754 <__any_on>:
 800f754:	f100 0214 	add.w	r2, r0, #20
 800f758:	6900      	ldr	r0, [r0, #16]
 800f75a:	114b      	asrs	r3, r1, #5
 800f75c:	4298      	cmp	r0, r3
 800f75e:	b510      	push	{r4, lr}
 800f760:	db11      	blt.n	800f786 <__any_on+0x32>
 800f762:	dd0a      	ble.n	800f77a <__any_on+0x26>
 800f764:	f011 011f 	ands.w	r1, r1, #31
 800f768:	d007      	beq.n	800f77a <__any_on+0x26>
 800f76a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f76e:	fa24 f001 	lsr.w	r0, r4, r1
 800f772:	fa00 f101 	lsl.w	r1, r0, r1
 800f776:	428c      	cmp	r4, r1
 800f778:	d10b      	bne.n	800f792 <__any_on+0x3e>
 800f77a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f77e:	4293      	cmp	r3, r2
 800f780:	d803      	bhi.n	800f78a <__any_on+0x36>
 800f782:	2000      	movs	r0, #0
 800f784:	bd10      	pop	{r4, pc}
 800f786:	4603      	mov	r3, r0
 800f788:	e7f7      	b.n	800f77a <__any_on+0x26>
 800f78a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f78e:	2900      	cmp	r1, #0
 800f790:	d0f5      	beq.n	800f77e <__any_on+0x2a>
 800f792:	2001      	movs	r0, #1
 800f794:	e7f6      	b.n	800f784 <__any_on+0x30>

0800f796 <_calloc_r>:
 800f796:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f798:	fba1 2402 	umull	r2, r4, r1, r2
 800f79c:	b94c      	cbnz	r4, 800f7b2 <_calloc_r+0x1c>
 800f79e:	4611      	mov	r1, r2
 800f7a0:	9201      	str	r2, [sp, #4]
 800f7a2:	f000 f87b 	bl	800f89c <_malloc_r>
 800f7a6:	9a01      	ldr	r2, [sp, #4]
 800f7a8:	4605      	mov	r5, r0
 800f7aa:	b930      	cbnz	r0, 800f7ba <_calloc_r+0x24>
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	b003      	add	sp, #12
 800f7b0:	bd30      	pop	{r4, r5, pc}
 800f7b2:	220c      	movs	r2, #12
 800f7b4:	6002      	str	r2, [r0, #0]
 800f7b6:	2500      	movs	r5, #0
 800f7b8:	e7f8      	b.n	800f7ac <_calloc_r+0x16>
 800f7ba:	4621      	mov	r1, r4
 800f7bc:	f7fc fa86 	bl	800bccc <memset>
 800f7c0:	e7f4      	b.n	800f7ac <_calloc_r+0x16>
	...

0800f7c4 <_free_r>:
 800f7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7c6:	2900      	cmp	r1, #0
 800f7c8:	d044      	beq.n	800f854 <_free_r+0x90>
 800f7ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7ce:	9001      	str	r0, [sp, #4]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f1a1 0404 	sub.w	r4, r1, #4
 800f7d6:	bfb8      	it	lt
 800f7d8:	18e4      	addlt	r4, r4, r3
 800f7da:	f000 fb2f 	bl	800fe3c <__malloc_lock>
 800f7de:	4a1e      	ldr	r2, [pc, #120]	; (800f858 <_free_r+0x94>)
 800f7e0:	9801      	ldr	r0, [sp, #4]
 800f7e2:	6813      	ldr	r3, [r2, #0]
 800f7e4:	b933      	cbnz	r3, 800f7f4 <_free_r+0x30>
 800f7e6:	6063      	str	r3, [r4, #4]
 800f7e8:	6014      	str	r4, [r2, #0]
 800f7ea:	b003      	add	sp, #12
 800f7ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7f0:	f000 bb2a 	b.w	800fe48 <__malloc_unlock>
 800f7f4:	42a3      	cmp	r3, r4
 800f7f6:	d908      	bls.n	800f80a <_free_r+0x46>
 800f7f8:	6825      	ldr	r5, [r4, #0]
 800f7fa:	1961      	adds	r1, r4, r5
 800f7fc:	428b      	cmp	r3, r1
 800f7fe:	bf01      	itttt	eq
 800f800:	6819      	ldreq	r1, [r3, #0]
 800f802:	685b      	ldreq	r3, [r3, #4]
 800f804:	1949      	addeq	r1, r1, r5
 800f806:	6021      	streq	r1, [r4, #0]
 800f808:	e7ed      	b.n	800f7e6 <_free_r+0x22>
 800f80a:	461a      	mov	r2, r3
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	b10b      	cbz	r3, 800f814 <_free_r+0x50>
 800f810:	42a3      	cmp	r3, r4
 800f812:	d9fa      	bls.n	800f80a <_free_r+0x46>
 800f814:	6811      	ldr	r1, [r2, #0]
 800f816:	1855      	adds	r5, r2, r1
 800f818:	42a5      	cmp	r5, r4
 800f81a:	d10b      	bne.n	800f834 <_free_r+0x70>
 800f81c:	6824      	ldr	r4, [r4, #0]
 800f81e:	4421      	add	r1, r4
 800f820:	1854      	adds	r4, r2, r1
 800f822:	42a3      	cmp	r3, r4
 800f824:	6011      	str	r1, [r2, #0]
 800f826:	d1e0      	bne.n	800f7ea <_free_r+0x26>
 800f828:	681c      	ldr	r4, [r3, #0]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	6053      	str	r3, [r2, #4]
 800f82e:	4421      	add	r1, r4
 800f830:	6011      	str	r1, [r2, #0]
 800f832:	e7da      	b.n	800f7ea <_free_r+0x26>
 800f834:	d902      	bls.n	800f83c <_free_r+0x78>
 800f836:	230c      	movs	r3, #12
 800f838:	6003      	str	r3, [r0, #0]
 800f83a:	e7d6      	b.n	800f7ea <_free_r+0x26>
 800f83c:	6825      	ldr	r5, [r4, #0]
 800f83e:	1961      	adds	r1, r4, r5
 800f840:	428b      	cmp	r3, r1
 800f842:	bf04      	itt	eq
 800f844:	6819      	ldreq	r1, [r3, #0]
 800f846:	685b      	ldreq	r3, [r3, #4]
 800f848:	6063      	str	r3, [r4, #4]
 800f84a:	bf04      	itt	eq
 800f84c:	1949      	addeq	r1, r1, r5
 800f84e:	6021      	streq	r1, [r4, #0]
 800f850:	6054      	str	r4, [r2, #4]
 800f852:	e7ca      	b.n	800f7ea <_free_r+0x26>
 800f854:	b003      	add	sp, #12
 800f856:	bd30      	pop	{r4, r5, pc}
 800f858:	2000969c 	.word	0x2000969c

0800f85c <sbrk_aligned>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	4e0e      	ldr	r6, [pc, #56]	; (800f898 <sbrk_aligned+0x3c>)
 800f860:	460c      	mov	r4, r1
 800f862:	6831      	ldr	r1, [r6, #0]
 800f864:	4605      	mov	r5, r0
 800f866:	b911      	cbnz	r1, 800f86e <sbrk_aligned+0x12>
 800f868:	f000 f9ee 	bl	800fc48 <_sbrk_r>
 800f86c:	6030      	str	r0, [r6, #0]
 800f86e:	4621      	mov	r1, r4
 800f870:	4628      	mov	r0, r5
 800f872:	f000 f9e9 	bl	800fc48 <_sbrk_r>
 800f876:	1c43      	adds	r3, r0, #1
 800f878:	d00a      	beq.n	800f890 <sbrk_aligned+0x34>
 800f87a:	1cc4      	adds	r4, r0, #3
 800f87c:	f024 0403 	bic.w	r4, r4, #3
 800f880:	42a0      	cmp	r0, r4
 800f882:	d007      	beq.n	800f894 <sbrk_aligned+0x38>
 800f884:	1a21      	subs	r1, r4, r0
 800f886:	4628      	mov	r0, r5
 800f888:	f000 f9de 	bl	800fc48 <_sbrk_r>
 800f88c:	3001      	adds	r0, #1
 800f88e:	d101      	bne.n	800f894 <sbrk_aligned+0x38>
 800f890:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f894:	4620      	mov	r0, r4
 800f896:	bd70      	pop	{r4, r5, r6, pc}
 800f898:	200096a0 	.word	0x200096a0

0800f89c <_malloc_r>:
 800f89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a0:	1ccd      	adds	r5, r1, #3
 800f8a2:	f025 0503 	bic.w	r5, r5, #3
 800f8a6:	3508      	adds	r5, #8
 800f8a8:	2d0c      	cmp	r5, #12
 800f8aa:	bf38      	it	cc
 800f8ac:	250c      	movcc	r5, #12
 800f8ae:	2d00      	cmp	r5, #0
 800f8b0:	4607      	mov	r7, r0
 800f8b2:	db01      	blt.n	800f8b8 <_malloc_r+0x1c>
 800f8b4:	42a9      	cmp	r1, r5
 800f8b6:	d905      	bls.n	800f8c4 <_malloc_r+0x28>
 800f8b8:	230c      	movs	r3, #12
 800f8ba:	603b      	str	r3, [r7, #0]
 800f8bc:	2600      	movs	r6, #0
 800f8be:	4630      	mov	r0, r6
 800f8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c4:	4e2e      	ldr	r6, [pc, #184]	; (800f980 <_malloc_r+0xe4>)
 800f8c6:	f000 fab9 	bl	800fe3c <__malloc_lock>
 800f8ca:	6833      	ldr	r3, [r6, #0]
 800f8cc:	461c      	mov	r4, r3
 800f8ce:	bb34      	cbnz	r4, 800f91e <_malloc_r+0x82>
 800f8d0:	4629      	mov	r1, r5
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	f7ff ffc2 	bl	800f85c <sbrk_aligned>
 800f8d8:	1c43      	adds	r3, r0, #1
 800f8da:	4604      	mov	r4, r0
 800f8dc:	d14d      	bne.n	800f97a <_malloc_r+0xde>
 800f8de:	6834      	ldr	r4, [r6, #0]
 800f8e0:	4626      	mov	r6, r4
 800f8e2:	2e00      	cmp	r6, #0
 800f8e4:	d140      	bne.n	800f968 <_malloc_r+0xcc>
 800f8e6:	6823      	ldr	r3, [r4, #0]
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	eb04 0803 	add.w	r8, r4, r3
 800f8f0:	f000 f9aa 	bl	800fc48 <_sbrk_r>
 800f8f4:	4580      	cmp	r8, r0
 800f8f6:	d13a      	bne.n	800f96e <_malloc_r+0xd2>
 800f8f8:	6821      	ldr	r1, [r4, #0]
 800f8fa:	3503      	adds	r5, #3
 800f8fc:	1a6d      	subs	r5, r5, r1
 800f8fe:	f025 0503 	bic.w	r5, r5, #3
 800f902:	3508      	adds	r5, #8
 800f904:	2d0c      	cmp	r5, #12
 800f906:	bf38      	it	cc
 800f908:	250c      	movcc	r5, #12
 800f90a:	4629      	mov	r1, r5
 800f90c:	4638      	mov	r0, r7
 800f90e:	f7ff ffa5 	bl	800f85c <sbrk_aligned>
 800f912:	3001      	adds	r0, #1
 800f914:	d02b      	beq.n	800f96e <_malloc_r+0xd2>
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	442b      	add	r3, r5
 800f91a:	6023      	str	r3, [r4, #0]
 800f91c:	e00e      	b.n	800f93c <_malloc_r+0xa0>
 800f91e:	6822      	ldr	r2, [r4, #0]
 800f920:	1b52      	subs	r2, r2, r5
 800f922:	d41e      	bmi.n	800f962 <_malloc_r+0xc6>
 800f924:	2a0b      	cmp	r2, #11
 800f926:	d916      	bls.n	800f956 <_malloc_r+0xba>
 800f928:	1961      	adds	r1, r4, r5
 800f92a:	42a3      	cmp	r3, r4
 800f92c:	6025      	str	r5, [r4, #0]
 800f92e:	bf18      	it	ne
 800f930:	6059      	strne	r1, [r3, #4]
 800f932:	6863      	ldr	r3, [r4, #4]
 800f934:	bf08      	it	eq
 800f936:	6031      	streq	r1, [r6, #0]
 800f938:	5162      	str	r2, [r4, r5]
 800f93a:	604b      	str	r3, [r1, #4]
 800f93c:	4638      	mov	r0, r7
 800f93e:	f104 060b 	add.w	r6, r4, #11
 800f942:	f000 fa81 	bl	800fe48 <__malloc_unlock>
 800f946:	f026 0607 	bic.w	r6, r6, #7
 800f94a:	1d23      	adds	r3, r4, #4
 800f94c:	1af2      	subs	r2, r6, r3
 800f94e:	d0b6      	beq.n	800f8be <_malloc_r+0x22>
 800f950:	1b9b      	subs	r3, r3, r6
 800f952:	50a3      	str	r3, [r4, r2]
 800f954:	e7b3      	b.n	800f8be <_malloc_r+0x22>
 800f956:	6862      	ldr	r2, [r4, #4]
 800f958:	42a3      	cmp	r3, r4
 800f95a:	bf0c      	ite	eq
 800f95c:	6032      	streq	r2, [r6, #0]
 800f95e:	605a      	strne	r2, [r3, #4]
 800f960:	e7ec      	b.n	800f93c <_malloc_r+0xa0>
 800f962:	4623      	mov	r3, r4
 800f964:	6864      	ldr	r4, [r4, #4]
 800f966:	e7b2      	b.n	800f8ce <_malloc_r+0x32>
 800f968:	4634      	mov	r4, r6
 800f96a:	6876      	ldr	r6, [r6, #4]
 800f96c:	e7b9      	b.n	800f8e2 <_malloc_r+0x46>
 800f96e:	230c      	movs	r3, #12
 800f970:	603b      	str	r3, [r7, #0]
 800f972:	4638      	mov	r0, r7
 800f974:	f000 fa68 	bl	800fe48 <__malloc_unlock>
 800f978:	e7a1      	b.n	800f8be <_malloc_r+0x22>
 800f97a:	6025      	str	r5, [r4, #0]
 800f97c:	e7de      	b.n	800f93c <_malloc_r+0xa0>
 800f97e:	bf00      	nop
 800f980:	2000969c 	.word	0x2000969c

0800f984 <__sfputc_r>:
 800f984:	6893      	ldr	r3, [r2, #8]
 800f986:	3b01      	subs	r3, #1
 800f988:	2b00      	cmp	r3, #0
 800f98a:	b410      	push	{r4}
 800f98c:	6093      	str	r3, [r2, #8]
 800f98e:	da08      	bge.n	800f9a2 <__sfputc_r+0x1e>
 800f990:	6994      	ldr	r4, [r2, #24]
 800f992:	42a3      	cmp	r3, r4
 800f994:	db01      	blt.n	800f99a <__sfputc_r+0x16>
 800f996:	290a      	cmp	r1, #10
 800f998:	d103      	bne.n	800f9a2 <__sfputc_r+0x1e>
 800f99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f99e:	f7fd bd51 	b.w	800d444 <__swbuf_r>
 800f9a2:	6813      	ldr	r3, [r2, #0]
 800f9a4:	1c58      	adds	r0, r3, #1
 800f9a6:	6010      	str	r0, [r2, #0]
 800f9a8:	7019      	strb	r1, [r3, #0]
 800f9aa:	4608      	mov	r0, r1
 800f9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9b0:	4770      	bx	lr

0800f9b2 <__sfputs_r>:
 800f9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	460f      	mov	r7, r1
 800f9b8:	4614      	mov	r4, r2
 800f9ba:	18d5      	adds	r5, r2, r3
 800f9bc:	42ac      	cmp	r4, r5
 800f9be:	d101      	bne.n	800f9c4 <__sfputs_r+0x12>
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	e007      	b.n	800f9d4 <__sfputs_r+0x22>
 800f9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c8:	463a      	mov	r2, r7
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f7ff ffda 	bl	800f984 <__sfputc_r>
 800f9d0:	1c43      	adds	r3, r0, #1
 800f9d2:	d1f3      	bne.n	800f9bc <__sfputs_r+0xa>
 800f9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9d8 <_vfiprintf_r>:
 800f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	460d      	mov	r5, r1
 800f9de:	b09d      	sub	sp, #116	; 0x74
 800f9e0:	4614      	mov	r4, r2
 800f9e2:	4698      	mov	r8, r3
 800f9e4:	4606      	mov	r6, r0
 800f9e6:	b118      	cbz	r0, 800f9f0 <_vfiprintf_r+0x18>
 800f9e8:	6983      	ldr	r3, [r0, #24]
 800f9ea:	b90b      	cbnz	r3, 800f9f0 <_vfiprintf_r+0x18>
 800f9ec:	f7fe fd80 	bl	800e4f0 <__sinit>
 800f9f0:	4b89      	ldr	r3, [pc, #548]	; (800fc18 <_vfiprintf_r+0x240>)
 800f9f2:	429d      	cmp	r5, r3
 800f9f4:	d11b      	bne.n	800fa2e <_vfiprintf_r+0x56>
 800f9f6:	6875      	ldr	r5, [r6, #4]
 800f9f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9fa:	07d9      	lsls	r1, r3, #31
 800f9fc:	d405      	bmi.n	800fa0a <_vfiprintf_r+0x32>
 800f9fe:	89ab      	ldrh	r3, [r5, #12]
 800fa00:	059a      	lsls	r2, r3, #22
 800fa02:	d402      	bmi.n	800fa0a <_vfiprintf_r+0x32>
 800fa04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa06:	f7ff f984 	bl	800ed12 <__retarget_lock_acquire_recursive>
 800fa0a:	89ab      	ldrh	r3, [r5, #12]
 800fa0c:	071b      	lsls	r3, r3, #28
 800fa0e:	d501      	bpl.n	800fa14 <_vfiprintf_r+0x3c>
 800fa10:	692b      	ldr	r3, [r5, #16]
 800fa12:	b9eb      	cbnz	r3, 800fa50 <_vfiprintf_r+0x78>
 800fa14:	4629      	mov	r1, r5
 800fa16:	4630      	mov	r0, r6
 800fa18:	f7fd fd66 	bl	800d4e8 <__swsetup_r>
 800fa1c:	b1c0      	cbz	r0, 800fa50 <_vfiprintf_r+0x78>
 800fa1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa20:	07dc      	lsls	r4, r3, #31
 800fa22:	d50e      	bpl.n	800fa42 <_vfiprintf_r+0x6a>
 800fa24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa28:	b01d      	add	sp, #116	; 0x74
 800fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2e:	4b7b      	ldr	r3, [pc, #492]	; (800fc1c <_vfiprintf_r+0x244>)
 800fa30:	429d      	cmp	r5, r3
 800fa32:	d101      	bne.n	800fa38 <_vfiprintf_r+0x60>
 800fa34:	68b5      	ldr	r5, [r6, #8]
 800fa36:	e7df      	b.n	800f9f8 <_vfiprintf_r+0x20>
 800fa38:	4b79      	ldr	r3, [pc, #484]	; (800fc20 <_vfiprintf_r+0x248>)
 800fa3a:	429d      	cmp	r5, r3
 800fa3c:	bf08      	it	eq
 800fa3e:	68f5      	ldreq	r5, [r6, #12]
 800fa40:	e7da      	b.n	800f9f8 <_vfiprintf_r+0x20>
 800fa42:	89ab      	ldrh	r3, [r5, #12]
 800fa44:	0598      	lsls	r0, r3, #22
 800fa46:	d4ed      	bmi.n	800fa24 <_vfiprintf_r+0x4c>
 800fa48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa4a:	f7ff f963 	bl	800ed14 <__retarget_lock_release_recursive>
 800fa4e:	e7e9      	b.n	800fa24 <_vfiprintf_r+0x4c>
 800fa50:	2300      	movs	r3, #0
 800fa52:	9309      	str	r3, [sp, #36]	; 0x24
 800fa54:	2320      	movs	r3, #32
 800fa56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa5e:	2330      	movs	r3, #48	; 0x30
 800fa60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc24 <_vfiprintf_r+0x24c>
 800fa64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa68:	f04f 0901 	mov.w	r9, #1
 800fa6c:	4623      	mov	r3, r4
 800fa6e:	469a      	mov	sl, r3
 800fa70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa74:	b10a      	cbz	r2, 800fa7a <_vfiprintf_r+0xa2>
 800fa76:	2a25      	cmp	r2, #37	; 0x25
 800fa78:	d1f9      	bne.n	800fa6e <_vfiprintf_r+0x96>
 800fa7a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa7e:	d00b      	beq.n	800fa98 <_vfiprintf_r+0xc0>
 800fa80:	465b      	mov	r3, fp
 800fa82:	4622      	mov	r2, r4
 800fa84:	4629      	mov	r1, r5
 800fa86:	4630      	mov	r0, r6
 800fa88:	f7ff ff93 	bl	800f9b2 <__sfputs_r>
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	f000 80aa 	beq.w	800fbe6 <_vfiprintf_r+0x20e>
 800fa92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa94:	445a      	add	r2, fp
 800fa96:	9209      	str	r2, [sp, #36]	; 0x24
 800fa98:	f89a 3000 	ldrb.w	r3, [sl]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f000 80a2 	beq.w	800fbe6 <_vfiprintf_r+0x20e>
 800faa2:	2300      	movs	r3, #0
 800faa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800faa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faac:	f10a 0a01 	add.w	sl, sl, #1
 800fab0:	9304      	str	r3, [sp, #16]
 800fab2:	9307      	str	r3, [sp, #28]
 800fab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fab8:	931a      	str	r3, [sp, #104]	; 0x68
 800faba:	4654      	mov	r4, sl
 800fabc:	2205      	movs	r2, #5
 800fabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac2:	4858      	ldr	r0, [pc, #352]	; (800fc24 <_vfiprintf_r+0x24c>)
 800fac4:	f7f0 fbac 	bl	8000220 <memchr>
 800fac8:	9a04      	ldr	r2, [sp, #16]
 800faca:	b9d8      	cbnz	r0, 800fb04 <_vfiprintf_r+0x12c>
 800facc:	06d1      	lsls	r1, r2, #27
 800face:	bf44      	itt	mi
 800fad0:	2320      	movmi	r3, #32
 800fad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fad6:	0713      	lsls	r3, r2, #28
 800fad8:	bf44      	itt	mi
 800fada:	232b      	movmi	r3, #43	; 0x2b
 800fadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fae0:	f89a 3000 	ldrb.w	r3, [sl]
 800fae4:	2b2a      	cmp	r3, #42	; 0x2a
 800fae6:	d015      	beq.n	800fb14 <_vfiprintf_r+0x13c>
 800fae8:	9a07      	ldr	r2, [sp, #28]
 800faea:	4654      	mov	r4, sl
 800faec:	2000      	movs	r0, #0
 800faee:	f04f 0c0a 	mov.w	ip, #10
 800faf2:	4621      	mov	r1, r4
 800faf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faf8:	3b30      	subs	r3, #48	; 0x30
 800fafa:	2b09      	cmp	r3, #9
 800fafc:	d94e      	bls.n	800fb9c <_vfiprintf_r+0x1c4>
 800fafe:	b1b0      	cbz	r0, 800fb2e <_vfiprintf_r+0x156>
 800fb00:	9207      	str	r2, [sp, #28]
 800fb02:	e014      	b.n	800fb2e <_vfiprintf_r+0x156>
 800fb04:	eba0 0308 	sub.w	r3, r0, r8
 800fb08:	fa09 f303 	lsl.w	r3, r9, r3
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	9304      	str	r3, [sp, #16]
 800fb10:	46a2      	mov	sl, r4
 800fb12:	e7d2      	b.n	800faba <_vfiprintf_r+0xe2>
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	1d19      	adds	r1, r3, #4
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	9103      	str	r1, [sp, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	bfbb      	ittet	lt
 800fb20:	425b      	neglt	r3, r3
 800fb22:	f042 0202 	orrlt.w	r2, r2, #2
 800fb26:	9307      	strge	r3, [sp, #28]
 800fb28:	9307      	strlt	r3, [sp, #28]
 800fb2a:	bfb8      	it	lt
 800fb2c:	9204      	strlt	r2, [sp, #16]
 800fb2e:	7823      	ldrb	r3, [r4, #0]
 800fb30:	2b2e      	cmp	r3, #46	; 0x2e
 800fb32:	d10c      	bne.n	800fb4e <_vfiprintf_r+0x176>
 800fb34:	7863      	ldrb	r3, [r4, #1]
 800fb36:	2b2a      	cmp	r3, #42	; 0x2a
 800fb38:	d135      	bne.n	800fba6 <_vfiprintf_r+0x1ce>
 800fb3a:	9b03      	ldr	r3, [sp, #12]
 800fb3c:	1d1a      	adds	r2, r3, #4
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	9203      	str	r2, [sp, #12]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bfb8      	it	lt
 800fb46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fb4a:	3402      	adds	r4, #2
 800fb4c:	9305      	str	r3, [sp, #20]
 800fb4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc34 <_vfiprintf_r+0x25c>
 800fb52:	7821      	ldrb	r1, [r4, #0]
 800fb54:	2203      	movs	r2, #3
 800fb56:	4650      	mov	r0, sl
 800fb58:	f7f0 fb62 	bl	8000220 <memchr>
 800fb5c:	b140      	cbz	r0, 800fb70 <_vfiprintf_r+0x198>
 800fb5e:	2340      	movs	r3, #64	; 0x40
 800fb60:	eba0 000a 	sub.w	r0, r0, sl
 800fb64:	fa03 f000 	lsl.w	r0, r3, r0
 800fb68:	9b04      	ldr	r3, [sp, #16]
 800fb6a:	4303      	orrs	r3, r0
 800fb6c:	3401      	adds	r4, #1
 800fb6e:	9304      	str	r3, [sp, #16]
 800fb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb74:	482c      	ldr	r0, [pc, #176]	; (800fc28 <_vfiprintf_r+0x250>)
 800fb76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb7a:	2206      	movs	r2, #6
 800fb7c:	f7f0 fb50 	bl	8000220 <memchr>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d03f      	beq.n	800fc04 <_vfiprintf_r+0x22c>
 800fb84:	4b29      	ldr	r3, [pc, #164]	; (800fc2c <_vfiprintf_r+0x254>)
 800fb86:	bb1b      	cbnz	r3, 800fbd0 <_vfiprintf_r+0x1f8>
 800fb88:	9b03      	ldr	r3, [sp, #12]
 800fb8a:	3307      	adds	r3, #7
 800fb8c:	f023 0307 	bic.w	r3, r3, #7
 800fb90:	3308      	adds	r3, #8
 800fb92:	9303      	str	r3, [sp, #12]
 800fb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb96:	443b      	add	r3, r7
 800fb98:	9309      	str	r3, [sp, #36]	; 0x24
 800fb9a:	e767      	b.n	800fa6c <_vfiprintf_r+0x94>
 800fb9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fba0:	460c      	mov	r4, r1
 800fba2:	2001      	movs	r0, #1
 800fba4:	e7a5      	b.n	800faf2 <_vfiprintf_r+0x11a>
 800fba6:	2300      	movs	r3, #0
 800fba8:	3401      	adds	r4, #1
 800fbaa:	9305      	str	r3, [sp, #20]
 800fbac:	4619      	mov	r1, r3
 800fbae:	f04f 0c0a 	mov.w	ip, #10
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbb8:	3a30      	subs	r2, #48	; 0x30
 800fbba:	2a09      	cmp	r2, #9
 800fbbc:	d903      	bls.n	800fbc6 <_vfiprintf_r+0x1ee>
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d0c5      	beq.n	800fb4e <_vfiprintf_r+0x176>
 800fbc2:	9105      	str	r1, [sp, #20]
 800fbc4:	e7c3      	b.n	800fb4e <_vfiprintf_r+0x176>
 800fbc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbca:	4604      	mov	r4, r0
 800fbcc:	2301      	movs	r3, #1
 800fbce:	e7f0      	b.n	800fbb2 <_vfiprintf_r+0x1da>
 800fbd0:	ab03      	add	r3, sp, #12
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	4b16      	ldr	r3, [pc, #88]	; (800fc30 <_vfiprintf_r+0x258>)
 800fbd8:	a904      	add	r1, sp, #16
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f7fc f91e 	bl	800be1c <_printf_float>
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	1c78      	adds	r0, r7, #1
 800fbe4:	d1d6      	bne.n	800fb94 <_vfiprintf_r+0x1bc>
 800fbe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbe8:	07d9      	lsls	r1, r3, #31
 800fbea:	d405      	bmi.n	800fbf8 <_vfiprintf_r+0x220>
 800fbec:	89ab      	ldrh	r3, [r5, #12]
 800fbee:	059a      	lsls	r2, r3, #22
 800fbf0:	d402      	bmi.n	800fbf8 <_vfiprintf_r+0x220>
 800fbf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbf4:	f7ff f88e 	bl	800ed14 <__retarget_lock_release_recursive>
 800fbf8:	89ab      	ldrh	r3, [r5, #12]
 800fbfa:	065b      	lsls	r3, r3, #25
 800fbfc:	f53f af12 	bmi.w	800fa24 <_vfiprintf_r+0x4c>
 800fc00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc02:	e711      	b.n	800fa28 <_vfiprintf_r+0x50>
 800fc04:	ab03      	add	r3, sp, #12
 800fc06:	9300      	str	r3, [sp, #0]
 800fc08:	462a      	mov	r2, r5
 800fc0a:	4b09      	ldr	r3, [pc, #36]	; (800fc30 <_vfiprintf_r+0x258>)
 800fc0c:	a904      	add	r1, sp, #16
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f7fc fba8 	bl	800c364 <_printf_i>
 800fc14:	e7e4      	b.n	800fbe0 <_vfiprintf_r+0x208>
 800fc16:	bf00      	nop
 800fc18:	08011ce4 	.word	0x08011ce4
 800fc1c:	08011d04 	.word	0x08011d04
 800fc20:	08011cc4 	.word	0x08011cc4
 800fc24:	08011efc 	.word	0x08011efc
 800fc28:	08011f06 	.word	0x08011f06
 800fc2c:	0800be1d 	.word	0x0800be1d
 800fc30:	0800f9b3 	.word	0x0800f9b3
 800fc34:	08011f02 	.word	0x08011f02

0800fc38 <nan>:
 800fc38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fc40 <nan+0x8>
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	00000000 	.word	0x00000000
 800fc44:	7ff80000 	.word	0x7ff80000

0800fc48 <_sbrk_r>:
 800fc48:	b538      	push	{r3, r4, r5, lr}
 800fc4a:	4d06      	ldr	r5, [pc, #24]	; (800fc64 <_sbrk_r+0x1c>)
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4604      	mov	r4, r0
 800fc50:	4608      	mov	r0, r1
 800fc52:	602b      	str	r3, [r5, #0]
 800fc54:	f7f6 fe3a 	bl	80068cc <_sbrk>
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	d102      	bne.n	800fc62 <_sbrk_r+0x1a>
 800fc5c:	682b      	ldr	r3, [r5, #0]
 800fc5e:	b103      	cbz	r3, 800fc62 <_sbrk_r+0x1a>
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	200096a4 	.word	0x200096a4

0800fc68 <__sread>:
 800fc68:	b510      	push	{r4, lr}
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc70:	f000 f8f0 	bl	800fe54 <_read_r>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	bfab      	itete	ge
 800fc78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc7a:	89a3      	ldrhlt	r3, [r4, #12]
 800fc7c:	181b      	addge	r3, r3, r0
 800fc7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc82:	bfac      	ite	ge
 800fc84:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc86:	81a3      	strhlt	r3, [r4, #12]
 800fc88:	bd10      	pop	{r4, pc}

0800fc8a <__swrite>:
 800fc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc8e:	461f      	mov	r7, r3
 800fc90:	898b      	ldrh	r3, [r1, #12]
 800fc92:	05db      	lsls	r3, r3, #23
 800fc94:	4605      	mov	r5, r0
 800fc96:	460c      	mov	r4, r1
 800fc98:	4616      	mov	r6, r2
 800fc9a:	d505      	bpl.n	800fca8 <__swrite+0x1e>
 800fc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fca0:	2302      	movs	r3, #2
 800fca2:	2200      	movs	r2, #0
 800fca4:	f000 f8b8 	bl	800fe18 <_lseek_r>
 800fca8:	89a3      	ldrh	r3, [r4, #12]
 800fcaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fcb2:	81a3      	strh	r3, [r4, #12]
 800fcb4:	4632      	mov	r2, r6
 800fcb6:	463b      	mov	r3, r7
 800fcb8:	4628      	mov	r0, r5
 800fcba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcbe:	f000 b837 	b.w	800fd30 <_write_r>

0800fcc2 <__sseek>:
 800fcc2:	b510      	push	{r4, lr}
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcca:	f000 f8a5 	bl	800fe18 <_lseek_r>
 800fcce:	1c43      	adds	r3, r0, #1
 800fcd0:	89a3      	ldrh	r3, [r4, #12]
 800fcd2:	bf15      	itete	ne
 800fcd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcde:	81a3      	strheq	r3, [r4, #12]
 800fce0:	bf18      	it	ne
 800fce2:	81a3      	strhne	r3, [r4, #12]
 800fce4:	bd10      	pop	{r4, pc}

0800fce6 <__sclose>:
 800fce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcea:	f000 b851 	b.w	800fd90 <_close_r>

0800fcee <strncmp>:
 800fcee:	b510      	push	{r4, lr}
 800fcf0:	b17a      	cbz	r2, 800fd12 <strncmp+0x24>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	3901      	subs	r1, #1
 800fcf6:	1884      	adds	r4, r0, r2
 800fcf8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fcfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fd00:	4290      	cmp	r0, r2
 800fd02:	d101      	bne.n	800fd08 <strncmp+0x1a>
 800fd04:	42a3      	cmp	r3, r4
 800fd06:	d101      	bne.n	800fd0c <strncmp+0x1e>
 800fd08:	1a80      	subs	r0, r0, r2
 800fd0a:	bd10      	pop	{r4, pc}
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d1f3      	bne.n	800fcf8 <strncmp+0xa>
 800fd10:	e7fa      	b.n	800fd08 <strncmp+0x1a>
 800fd12:	4610      	mov	r0, r2
 800fd14:	e7f9      	b.n	800fd0a <strncmp+0x1c>

0800fd16 <__ascii_wctomb>:
 800fd16:	b149      	cbz	r1, 800fd2c <__ascii_wctomb+0x16>
 800fd18:	2aff      	cmp	r2, #255	; 0xff
 800fd1a:	bf85      	ittet	hi
 800fd1c:	238a      	movhi	r3, #138	; 0x8a
 800fd1e:	6003      	strhi	r3, [r0, #0]
 800fd20:	700a      	strbls	r2, [r1, #0]
 800fd22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fd26:	bf98      	it	ls
 800fd28:	2001      	movls	r0, #1
 800fd2a:	4770      	bx	lr
 800fd2c:	4608      	mov	r0, r1
 800fd2e:	4770      	bx	lr

0800fd30 <_write_r>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	4d07      	ldr	r5, [pc, #28]	; (800fd50 <_write_r+0x20>)
 800fd34:	4604      	mov	r4, r0
 800fd36:	4608      	mov	r0, r1
 800fd38:	4611      	mov	r1, r2
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	602a      	str	r2, [r5, #0]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	f7f6 fd73 	bl	800682a <_write>
 800fd44:	1c43      	adds	r3, r0, #1
 800fd46:	d102      	bne.n	800fd4e <_write_r+0x1e>
 800fd48:	682b      	ldr	r3, [r5, #0]
 800fd4a:	b103      	cbz	r3, 800fd4e <_write_r+0x1e>
 800fd4c:	6023      	str	r3, [r4, #0]
 800fd4e:	bd38      	pop	{r3, r4, r5, pc}
 800fd50:	200096a4 	.word	0x200096a4

0800fd54 <__assert_func>:
 800fd54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd56:	4614      	mov	r4, r2
 800fd58:	461a      	mov	r2, r3
 800fd5a:	4b09      	ldr	r3, [pc, #36]	; (800fd80 <__assert_func+0x2c>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4605      	mov	r5, r0
 800fd60:	68d8      	ldr	r0, [r3, #12]
 800fd62:	b14c      	cbz	r4, 800fd78 <__assert_func+0x24>
 800fd64:	4b07      	ldr	r3, [pc, #28]	; (800fd84 <__assert_func+0x30>)
 800fd66:	9100      	str	r1, [sp, #0]
 800fd68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd6c:	4906      	ldr	r1, [pc, #24]	; (800fd88 <__assert_func+0x34>)
 800fd6e:	462b      	mov	r3, r5
 800fd70:	f000 f81e 	bl	800fdb0 <fiprintf>
 800fd74:	f000 f880 	bl	800fe78 <abort>
 800fd78:	4b04      	ldr	r3, [pc, #16]	; (800fd8c <__assert_func+0x38>)
 800fd7a:	461c      	mov	r4, r3
 800fd7c:	e7f3      	b.n	800fd66 <__assert_func+0x12>
 800fd7e:	bf00      	nop
 800fd80:	2000004c 	.word	0x2000004c
 800fd84:	08011f0d 	.word	0x08011f0d
 800fd88:	08011f1a 	.word	0x08011f1a
 800fd8c:	08011f48 	.word	0x08011f48

0800fd90 <_close_r>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	4d06      	ldr	r5, [pc, #24]	; (800fdac <_close_r+0x1c>)
 800fd94:	2300      	movs	r3, #0
 800fd96:	4604      	mov	r4, r0
 800fd98:	4608      	mov	r0, r1
 800fd9a:	602b      	str	r3, [r5, #0]
 800fd9c:	f7f6 fd61 	bl	8006862 <_close>
 800fda0:	1c43      	adds	r3, r0, #1
 800fda2:	d102      	bne.n	800fdaa <_close_r+0x1a>
 800fda4:	682b      	ldr	r3, [r5, #0]
 800fda6:	b103      	cbz	r3, 800fdaa <_close_r+0x1a>
 800fda8:	6023      	str	r3, [r4, #0]
 800fdaa:	bd38      	pop	{r3, r4, r5, pc}
 800fdac:	200096a4 	.word	0x200096a4

0800fdb0 <fiprintf>:
 800fdb0:	b40e      	push	{r1, r2, r3}
 800fdb2:	b503      	push	{r0, r1, lr}
 800fdb4:	4601      	mov	r1, r0
 800fdb6:	ab03      	add	r3, sp, #12
 800fdb8:	4805      	ldr	r0, [pc, #20]	; (800fdd0 <fiprintf+0x20>)
 800fdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdbe:	6800      	ldr	r0, [r0, #0]
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	f7ff fe09 	bl	800f9d8 <_vfiprintf_r>
 800fdc6:	b002      	add	sp, #8
 800fdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdcc:	b003      	add	sp, #12
 800fdce:	4770      	bx	lr
 800fdd0:	2000004c 	.word	0x2000004c

0800fdd4 <_fstat_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4d07      	ldr	r5, [pc, #28]	; (800fdf4 <_fstat_r+0x20>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4604      	mov	r4, r0
 800fddc:	4608      	mov	r0, r1
 800fdde:	4611      	mov	r1, r2
 800fde0:	602b      	str	r3, [r5, #0]
 800fde2:	f7f6 fd4a 	bl	800687a <_fstat>
 800fde6:	1c43      	adds	r3, r0, #1
 800fde8:	d102      	bne.n	800fdf0 <_fstat_r+0x1c>
 800fdea:	682b      	ldr	r3, [r5, #0]
 800fdec:	b103      	cbz	r3, 800fdf0 <_fstat_r+0x1c>
 800fdee:	6023      	str	r3, [r4, #0]
 800fdf0:	bd38      	pop	{r3, r4, r5, pc}
 800fdf2:	bf00      	nop
 800fdf4:	200096a4 	.word	0x200096a4

0800fdf8 <_isatty_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d06      	ldr	r5, [pc, #24]	; (800fe14 <_isatty_r+0x1c>)
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4608      	mov	r0, r1
 800fe02:	602b      	str	r3, [r5, #0]
 800fe04:	f7f6 fd49 	bl	800689a <_isatty>
 800fe08:	1c43      	adds	r3, r0, #1
 800fe0a:	d102      	bne.n	800fe12 <_isatty_r+0x1a>
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	b103      	cbz	r3, 800fe12 <_isatty_r+0x1a>
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	bd38      	pop	{r3, r4, r5, pc}
 800fe14:	200096a4 	.word	0x200096a4

0800fe18 <_lseek_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4d07      	ldr	r5, [pc, #28]	; (800fe38 <_lseek_r+0x20>)
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	4608      	mov	r0, r1
 800fe20:	4611      	mov	r1, r2
 800fe22:	2200      	movs	r2, #0
 800fe24:	602a      	str	r2, [r5, #0]
 800fe26:	461a      	mov	r2, r3
 800fe28:	f7f6 fd42 	bl	80068b0 <_lseek>
 800fe2c:	1c43      	adds	r3, r0, #1
 800fe2e:	d102      	bne.n	800fe36 <_lseek_r+0x1e>
 800fe30:	682b      	ldr	r3, [r5, #0]
 800fe32:	b103      	cbz	r3, 800fe36 <_lseek_r+0x1e>
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	bd38      	pop	{r3, r4, r5, pc}
 800fe38:	200096a4 	.word	0x200096a4

0800fe3c <__malloc_lock>:
 800fe3c:	4801      	ldr	r0, [pc, #4]	; (800fe44 <__malloc_lock+0x8>)
 800fe3e:	f7fe bf68 	b.w	800ed12 <__retarget_lock_acquire_recursive>
 800fe42:	bf00      	nop
 800fe44:	20009698 	.word	0x20009698

0800fe48 <__malloc_unlock>:
 800fe48:	4801      	ldr	r0, [pc, #4]	; (800fe50 <__malloc_unlock+0x8>)
 800fe4a:	f7fe bf63 	b.w	800ed14 <__retarget_lock_release_recursive>
 800fe4e:	bf00      	nop
 800fe50:	20009698 	.word	0x20009698

0800fe54 <_read_r>:
 800fe54:	b538      	push	{r3, r4, r5, lr}
 800fe56:	4d07      	ldr	r5, [pc, #28]	; (800fe74 <_read_r+0x20>)
 800fe58:	4604      	mov	r4, r0
 800fe5a:	4608      	mov	r0, r1
 800fe5c:	4611      	mov	r1, r2
 800fe5e:	2200      	movs	r2, #0
 800fe60:	602a      	str	r2, [r5, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	f7f6 fcc4 	bl	80067f0 <_read>
 800fe68:	1c43      	adds	r3, r0, #1
 800fe6a:	d102      	bne.n	800fe72 <_read_r+0x1e>
 800fe6c:	682b      	ldr	r3, [r5, #0]
 800fe6e:	b103      	cbz	r3, 800fe72 <_read_r+0x1e>
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	bd38      	pop	{r3, r4, r5, pc}
 800fe74:	200096a4 	.word	0x200096a4

0800fe78 <abort>:
 800fe78:	b508      	push	{r3, lr}
 800fe7a:	2006      	movs	r0, #6
 800fe7c:	f000 f82c 	bl	800fed8 <raise>
 800fe80:	2001      	movs	r0, #1
 800fe82:	f7f6 fcab 	bl	80067dc <_exit>

0800fe86 <_raise_r>:
 800fe86:	291f      	cmp	r1, #31
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	d904      	bls.n	800fe9a <_raise_r+0x14>
 800fe90:	2316      	movs	r3, #22
 800fe92:	6003      	str	r3, [r0, #0]
 800fe94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe98:	bd38      	pop	{r3, r4, r5, pc}
 800fe9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe9c:	b112      	cbz	r2, 800fea4 <_raise_r+0x1e>
 800fe9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fea2:	b94b      	cbnz	r3, 800feb8 <_raise_r+0x32>
 800fea4:	4620      	mov	r0, r4
 800fea6:	f000 f831 	bl	800ff0c <_getpid_r>
 800feaa:	462a      	mov	r2, r5
 800feac:	4601      	mov	r1, r0
 800feae:	4620      	mov	r0, r4
 800feb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feb4:	f000 b818 	b.w	800fee8 <_kill_r>
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d00a      	beq.n	800fed2 <_raise_r+0x4c>
 800febc:	1c59      	adds	r1, r3, #1
 800febe:	d103      	bne.n	800fec8 <_raise_r+0x42>
 800fec0:	2316      	movs	r3, #22
 800fec2:	6003      	str	r3, [r0, #0]
 800fec4:	2001      	movs	r0, #1
 800fec6:	e7e7      	b.n	800fe98 <_raise_r+0x12>
 800fec8:	2400      	movs	r4, #0
 800feca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fece:	4628      	mov	r0, r5
 800fed0:	4798      	blx	r3
 800fed2:	2000      	movs	r0, #0
 800fed4:	e7e0      	b.n	800fe98 <_raise_r+0x12>
	...

0800fed8 <raise>:
 800fed8:	4b02      	ldr	r3, [pc, #8]	; (800fee4 <raise+0xc>)
 800feda:	4601      	mov	r1, r0
 800fedc:	6818      	ldr	r0, [r3, #0]
 800fede:	f7ff bfd2 	b.w	800fe86 <_raise_r>
 800fee2:	bf00      	nop
 800fee4:	2000004c 	.word	0x2000004c

0800fee8 <_kill_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	4d07      	ldr	r5, [pc, #28]	; (800ff08 <_kill_r+0x20>)
 800feec:	2300      	movs	r3, #0
 800feee:	4604      	mov	r4, r0
 800fef0:	4608      	mov	r0, r1
 800fef2:	4611      	mov	r1, r2
 800fef4:	602b      	str	r3, [r5, #0]
 800fef6:	f7f6 fc61 	bl	80067bc <_kill>
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	d102      	bne.n	800ff04 <_kill_r+0x1c>
 800fefe:	682b      	ldr	r3, [r5, #0]
 800ff00:	b103      	cbz	r3, 800ff04 <_kill_r+0x1c>
 800ff02:	6023      	str	r3, [r4, #0]
 800ff04:	bd38      	pop	{r3, r4, r5, pc}
 800ff06:	bf00      	nop
 800ff08:	200096a4 	.word	0x200096a4

0800ff0c <_getpid_r>:
 800ff0c:	f7f6 bc4e 	b.w	80067ac <_getpid>

0800ff10 <fmaxf>:
 800ff10:	b508      	push	{r3, lr}
 800ff12:	ed2d 8b02 	vpush	{d8}
 800ff16:	eeb0 8a40 	vmov.f32	s16, s0
 800ff1a:	eef0 8a60 	vmov.f32	s17, s1
 800ff1e:	f000 f82d 	bl	800ff7c <__fpclassifyf>
 800ff22:	b148      	cbz	r0, 800ff38 <fmaxf+0x28>
 800ff24:	eeb0 0a68 	vmov.f32	s0, s17
 800ff28:	f000 f828 	bl	800ff7c <__fpclassifyf>
 800ff2c:	b130      	cbz	r0, 800ff3c <fmaxf+0x2c>
 800ff2e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff36:	dc01      	bgt.n	800ff3c <fmaxf+0x2c>
 800ff38:	eeb0 8a68 	vmov.f32	s16, s17
 800ff3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ff40:	ecbd 8b02 	vpop	{d8}
 800ff44:	bd08      	pop	{r3, pc}

0800ff46 <fminf>:
 800ff46:	b508      	push	{r3, lr}
 800ff48:	ed2d 8b02 	vpush	{d8}
 800ff4c:	eeb0 8a40 	vmov.f32	s16, s0
 800ff50:	eef0 8a60 	vmov.f32	s17, s1
 800ff54:	f000 f812 	bl	800ff7c <__fpclassifyf>
 800ff58:	b148      	cbz	r0, 800ff6e <fminf+0x28>
 800ff5a:	eeb0 0a68 	vmov.f32	s0, s17
 800ff5e:	f000 f80d 	bl	800ff7c <__fpclassifyf>
 800ff62:	b130      	cbz	r0, 800ff72 <fminf+0x2c>
 800ff64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ff68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6c:	d401      	bmi.n	800ff72 <fminf+0x2c>
 800ff6e:	eeb0 8a68 	vmov.f32	s16, s17
 800ff72:	eeb0 0a48 	vmov.f32	s0, s16
 800ff76:	ecbd 8b02 	vpop	{d8}
 800ff7a:	bd08      	pop	{r3, pc}

0800ff7c <__fpclassifyf>:
 800ff7c:	ee10 3a10 	vmov	r3, s0
 800ff80:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800ff84:	d00d      	beq.n	800ffa2 <__fpclassifyf+0x26>
 800ff86:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800ff8a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ff8e:	d30a      	bcc.n	800ffa6 <__fpclassifyf+0x2a>
 800ff90:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <__fpclassifyf+0x34>)
 800ff92:	1e42      	subs	r2, r0, #1
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d908      	bls.n	800ffaa <__fpclassifyf+0x2e>
 800ff98:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800ff9c:	4258      	negs	r0, r3
 800ff9e:	4158      	adcs	r0, r3
 800ffa0:	4770      	bx	lr
 800ffa2:	2002      	movs	r0, #2
 800ffa4:	4770      	bx	lr
 800ffa6:	2004      	movs	r0, #4
 800ffa8:	4770      	bx	lr
 800ffaa:	2003      	movs	r0, #3
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	007ffffe 	.word	0x007ffffe
 800ffb4:	00000000 	.word	0x00000000

0800ffb8 <exp>:
 800ffb8:	b538      	push	{r3, r4, r5, lr}
 800ffba:	ed2d 8b02 	vpush	{d8}
 800ffbe:	ec55 4b10 	vmov	r4, r5, d0
 800ffc2:	f000 f881 	bl	80100c8 <__ieee754_exp>
 800ffc6:	eeb0 8a40 	vmov.f32	s16, s0
 800ffca:	eef0 8a60 	vmov.f32	s17, s1
 800ffce:	ec45 4b10 	vmov	d0, r4, r5
 800ffd2:	f000 fab0 	bl	8010536 <finite>
 800ffd6:	b168      	cbz	r0, 800fff4 <exp+0x3c>
 800ffd8:	a317      	add	r3, pc, #92	; (adr r3, 8010038 <exp+0x80>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	4620      	mov	r0, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 fdb9 	bl	8000b58 <__aeabi_dcmpgt>
 800ffe6:	b160      	cbz	r0, 8010002 <exp+0x4a>
 800ffe8:	f7fb fe38 	bl	800bc5c <__errno>
 800ffec:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010028 <exp+0x70>
 800fff0:	2322      	movs	r3, #34	; 0x22
 800fff2:	6003      	str	r3, [r0, #0]
 800fff4:	eeb0 0a48 	vmov.f32	s0, s16
 800fff8:	eef0 0a68 	vmov.f32	s1, s17
 800fffc:	ecbd 8b02 	vpop	{d8}
 8010000:	bd38      	pop	{r3, r4, r5, pc}
 8010002:	a30f      	add	r3, pc, #60	; (adr r3, 8010040 <exp+0x88>)
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	4620      	mov	r0, r4
 801000a:	4629      	mov	r1, r5
 801000c:	f7f0 fd86 	bl	8000b1c <__aeabi_dcmplt>
 8010010:	2800      	cmp	r0, #0
 8010012:	d0ef      	beq.n	800fff4 <exp+0x3c>
 8010014:	f7fb fe22 	bl	800bc5c <__errno>
 8010018:	2322      	movs	r3, #34	; 0x22
 801001a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010030 <exp+0x78>
 801001e:	6003      	str	r3, [r0, #0]
 8010020:	e7e8      	b.n	800fff4 <exp+0x3c>
 8010022:	bf00      	nop
 8010024:	f3af 8000 	nop.w
 8010028:	00000000 	.word	0x00000000
 801002c:	7ff00000 	.word	0x7ff00000
	...
 8010038:	fefa39ef 	.word	0xfefa39ef
 801003c:	40862e42 	.word	0x40862e42
 8010040:	d52d3051 	.word	0xd52d3051
 8010044:	c0874910 	.word	0xc0874910

08010048 <fmodf>:
 8010048:	b508      	push	{r3, lr}
 801004a:	ed2d 8b02 	vpush	{d8}
 801004e:	eef0 8a40 	vmov.f32	s17, s0
 8010052:	eeb0 8a60 	vmov.f32	s16, s1
 8010056:	f000 f9b9 	bl	80103cc <__ieee754_fmodf>
 801005a:	eef4 8a48 	vcmp.f32	s17, s16
 801005e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010062:	d60c      	bvs.n	801007e <fmodf+0x36>
 8010064:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010084 <fmodf+0x3c>
 8010068:	eeb4 8a68 	vcmp.f32	s16, s17
 801006c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010070:	d105      	bne.n	801007e <fmodf+0x36>
 8010072:	f7fb fdf3 	bl	800bc5c <__errno>
 8010076:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801007a:	2321      	movs	r3, #33	; 0x21
 801007c:	6003      	str	r3, [r0, #0]
 801007e:	ecbd 8b02 	vpop	{d8}
 8010082:	bd08      	pop	{r3, pc}
 8010084:	00000000 	.word	0x00000000

08010088 <sqrtf>:
 8010088:	b508      	push	{r3, lr}
 801008a:	ed2d 8b02 	vpush	{d8}
 801008e:	eeb0 8a40 	vmov.f32	s16, s0
 8010092:	f000 fa1d 	bl	80104d0 <__ieee754_sqrtf>
 8010096:	eeb4 8a48 	vcmp.f32	s16, s16
 801009a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801009e:	d60c      	bvs.n	80100ba <sqrtf+0x32>
 80100a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80100c0 <sqrtf+0x38>
 80100a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80100a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ac:	d505      	bpl.n	80100ba <sqrtf+0x32>
 80100ae:	f7fb fdd5 	bl	800bc5c <__errno>
 80100b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80100b6:	2321      	movs	r3, #33	; 0x21
 80100b8:	6003      	str	r3, [r0, #0]
 80100ba:	ecbd 8b02 	vpop	{d8}
 80100be:	bd08      	pop	{r3, pc}
	...

080100c8 <__ieee754_exp>:
 80100c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100cc:	ec55 4b10 	vmov	r4, r5, d0
 80100d0:	49b5      	ldr	r1, [pc, #724]	; (80103a8 <__ieee754_exp+0x2e0>)
 80100d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80100d6:	428b      	cmp	r3, r1
 80100d8:	ed2d 8b04 	vpush	{d8-d9}
 80100dc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80100e0:	d93d      	bls.n	801015e <__ieee754_exp+0x96>
 80100e2:	49b2      	ldr	r1, [pc, #712]	; (80103ac <__ieee754_exp+0x2e4>)
 80100e4:	428b      	cmp	r3, r1
 80100e6:	d918      	bls.n	801011a <__ieee754_exp+0x52>
 80100e8:	ee10 3a10 	vmov	r3, s0
 80100ec:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80100f0:	4313      	orrs	r3, r2
 80100f2:	d009      	beq.n	8010108 <__ieee754_exp+0x40>
 80100f4:	ee10 2a10 	vmov	r2, s0
 80100f8:	462b      	mov	r3, r5
 80100fa:	4620      	mov	r0, r4
 80100fc:	4629      	mov	r1, r5
 80100fe:	f7f0 f8e5 	bl	80002cc <__adddf3>
 8010102:	4604      	mov	r4, r0
 8010104:	460d      	mov	r5, r1
 8010106:	e002      	b.n	801010e <__ieee754_exp+0x46>
 8010108:	b10e      	cbz	r6, 801010e <__ieee754_exp+0x46>
 801010a:	2400      	movs	r4, #0
 801010c:	2500      	movs	r5, #0
 801010e:	ecbd 8b04 	vpop	{d8-d9}
 8010112:	ec45 4b10 	vmov	d0, r4, r5
 8010116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801011a:	a38d      	add	r3, pc, #564	; (adr r3, 8010350 <__ieee754_exp+0x288>)
 801011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010120:	ee10 0a10 	vmov	r0, s0
 8010124:	4629      	mov	r1, r5
 8010126:	f7f0 fd17 	bl	8000b58 <__aeabi_dcmpgt>
 801012a:	4607      	mov	r7, r0
 801012c:	b130      	cbz	r0, 801013c <__ieee754_exp+0x74>
 801012e:	ecbd 8b04 	vpop	{d8-d9}
 8010132:	2000      	movs	r0, #0
 8010134:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010138:	f000 b9f4 	b.w	8010524 <__math_oflow>
 801013c:	a386      	add	r3, pc, #536	; (adr r3, 8010358 <__ieee754_exp+0x290>)
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	4620      	mov	r0, r4
 8010144:	4629      	mov	r1, r5
 8010146:	f7f0 fce9 	bl	8000b1c <__aeabi_dcmplt>
 801014a:	2800      	cmp	r0, #0
 801014c:	f000 808b 	beq.w	8010266 <__ieee754_exp+0x19e>
 8010150:	ecbd 8b04 	vpop	{d8-d9}
 8010154:	4638      	mov	r0, r7
 8010156:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801015a:	f000 b9da 	b.w	8010512 <__math_uflow>
 801015e:	4a94      	ldr	r2, [pc, #592]	; (80103b0 <__ieee754_exp+0x2e8>)
 8010160:	4293      	cmp	r3, r2
 8010162:	f240 80ac 	bls.w	80102be <__ieee754_exp+0x1f6>
 8010166:	4a93      	ldr	r2, [pc, #588]	; (80103b4 <__ieee754_exp+0x2ec>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d87c      	bhi.n	8010266 <__ieee754_exp+0x19e>
 801016c:	4b92      	ldr	r3, [pc, #584]	; (80103b8 <__ieee754_exp+0x2f0>)
 801016e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	ee10 0a10 	vmov	r0, s0
 801017a:	4629      	mov	r1, r5
 801017c:	f7f0 f8a4 	bl	80002c8 <__aeabi_dsub>
 8010180:	4b8e      	ldr	r3, [pc, #568]	; (80103bc <__ieee754_exp+0x2f4>)
 8010182:	00f7      	lsls	r7, r6, #3
 8010184:	443b      	add	r3, r7
 8010186:	ed93 7b00 	vldr	d7, [r3]
 801018a:	f1c6 0a01 	rsb	sl, r6, #1
 801018e:	4680      	mov	r8, r0
 8010190:	4689      	mov	r9, r1
 8010192:	ebaa 0a06 	sub.w	sl, sl, r6
 8010196:	eeb0 8a47 	vmov.f32	s16, s14
 801019a:	eef0 8a67 	vmov.f32	s17, s15
 801019e:	ec53 2b18 	vmov	r2, r3, d8
 80101a2:	4640      	mov	r0, r8
 80101a4:	4649      	mov	r1, r9
 80101a6:	f7f0 f88f 	bl	80002c8 <__aeabi_dsub>
 80101aa:	4604      	mov	r4, r0
 80101ac:	460d      	mov	r5, r1
 80101ae:	4622      	mov	r2, r4
 80101b0:	462b      	mov	r3, r5
 80101b2:	4620      	mov	r0, r4
 80101b4:	4629      	mov	r1, r5
 80101b6:	f7f0 fa3f 	bl	8000638 <__aeabi_dmul>
 80101ba:	a369      	add	r3, pc, #420	; (adr r3, 8010360 <__ieee754_exp+0x298>)
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	4606      	mov	r6, r0
 80101c2:	460f      	mov	r7, r1
 80101c4:	f7f0 fa38 	bl	8000638 <__aeabi_dmul>
 80101c8:	a367      	add	r3, pc, #412	; (adr r3, 8010368 <__ieee754_exp+0x2a0>)
 80101ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ce:	f7f0 f87b 	bl	80002c8 <__aeabi_dsub>
 80101d2:	4632      	mov	r2, r6
 80101d4:	463b      	mov	r3, r7
 80101d6:	f7f0 fa2f 	bl	8000638 <__aeabi_dmul>
 80101da:	a365      	add	r3, pc, #404	; (adr r3, 8010370 <__ieee754_exp+0x2a8>)
 80101dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e0:	f7f0 f874 	bl	80002cc <__adddf3>
 80101e4:	4632      	mov	r2, r6
 80101e6:	463b      	mov	r3, r7
 80101e8:	f7f0 fa26 	bl	8000638 <__aeabi_dmul>
 80101ec:	a362      	add	r3, pc, #392	; (adr r3, 8010378 <__ieee754_exp+0x2b0>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	f7f0 f869 	bl	80002c8 <__aeabi_dsub>
 80101f6:	4632      	mov	r2, r6
 80101f8:	463b      	mov	r3, r7
 80101fa:	f7f0 fa1d 	bl	8000638 <__aeabi_dmul>
 80101fe:	a360      	add	r3, pc, #384	; (adr r3, 8010380 <__ieee754_exp+0x2b8>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7f0 f862 	bl	80002cc <__adddf3>
 8010208:	4632      	mov	r2, r6
 801020a:	463b      	mov	r3, r7
 801020c:	f7f0 fa14 	bl	8000638 <__aeabi_dmul>
 8010210:	4602      	mov	r2, r0
 8010212:	460b      	mov	r3, r1
 8010214:	4620      	mov	r0, r4
 8010216:	4629      	mov	r1, r5
 8010218:	f7f0 f856 	bl	80002c8 <__aeabi_dsub>
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	4606      	mov	r6, r0
 8010222:	460f      	mov	r7, r1
 8010224:	4620      	mov	r0, r4
 8010226:	4629      	mov	r1, r5
 8010228:	f7f0 fa06 	bl	8000638 <__aeabi_dmul>
 801022c:	ec41 0b19 	vmov	d9, r0, r1
 8010230:	f1ba 0f00 	cmp.w	sl, #0
 8010234:	d15d      	bne.n	80102f2 <__ieee754_exp+0x22a>
 8010236:	2200      	movs	r2, #0
 8010238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801023c:	4630      	mov	r0, r6
 801023e:	4639      	mov	r1, r7
 8010240:	f7f0 f842 	bl	80002c8 <__aeabi_dsub>
 8010244:	4602      	mov	r2, r0
 8010246:	460b      	mov	r3, r1
 8010248:	ec51 0b19 	vmov	r0, r1, d9
 801024c:	f7f0 fb1e 	bl	800088c <__aeabi_ddiv>
 8010250:	4622      	mov	r2, r4
 8010252:	462b      	mov	r3, r5
 8010254:	f7f0 f838 	bl	80002c8 <__aeabi_dsub>
 8010258:	4602      	mov	r2, r0
 801025a:	460b      	mov	r3, r1
 801025c:	2000      	movs	r0, #0
 801025e:	4958      	ldr	r1, [pc, #352]	; (80103c0 <__ieee754_exp+0x2f8>)
 8010260:	f7f0 f832 	bl	80002c8 <__aeabi_dsub>
 8010264:	e74d      	b.n	8010102 <__ieee754_exp+0x3a>
 8010266:	4857      	ldr	r0, [pc, #348]	; (80103c4 <__ieee754_exp+0x2fc>)
 8010268:	a347      	add	r3, pc, #284	; (adr r3, 8010388 <__ieee754_exp+0x2c0>)
 801026a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8010272:	4629      	mov	r1, r5
 8010274:	4620      	mov	r0, r4
 8010276:	f7f0 f9df 	bl	8000638 <__aeabi_dmul>
 801027a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801027e:	f7f0 f825 	bl	80002cc <__adddf3>
 8010282:	f7f0 fc89 	bl	8000b98 <__aeabi_d2iz>
 8010286:	4682      	mov	sl, r0
 8010288:	f7f0 f96c 	bl	8000564 <__aeabi_i2d>
 801028c:	a340      	add	r3, pc, #256	; (adr r3, 8010390 <__ieee754_exp+0x2c8>)
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	4606      	mov	r6, r0
 8010294:	460f      	mov	r7, r1
 8010296:	f7f0 f9cf 	bl	8000638 <__aeabi_dmul>
 801029a:	4602      	mov	r2, r0
 801029c:	460b      	mov	r3, r1
 801029e:	4620      	mov	r0, r4
 80102a0:	4629      	mov	r1, r5
 80102a2:	f7f0 f811 	bl	80002c8 <__aeabi_dsub>
 80102a6:	a33c      	add	r3, pc, #240	; (adr r3, 8010398 <__ieee754_exp+0x2d0>)
 80102a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ac:	4680      	mov	r8, r0
 80102ae:	4689      	mov	r9, r1
 80102b0:	4630      	mov	r0, r6
 80102b2:	4639      	mov	r1, r7
 80102b4:	f7f0 f9c0 	bl	8000638 <__aeabi_dmul>
 80102b8:	ec41 0b18 	vmov	d8, r0, r1
 80102bc:	e76f      	b.n	801019e <__ieee754_exp+0xd6>
 80102be:	4a42      	ldr	r2, [pc, #264]	; (80103c8 <__ieee754_exp+0x300>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d811      	bhi.n	80102e8 <__ieee754_exp+0x220>
 80102c4:	a336      	add	r3, pc, #216	; (adr r3, 80103a0 <__ieee754_exp+0x2d8>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	ee10 0a10 	vmov	r0, s0
 80102ce:	4629      	mov	r1, r5
 80102d0:	f7ef fffc 	bl	80002cc <__adddf3>
 80102d4:	4b3a      	ldr	r3, [pc, #232]	; (80103c0 <__ieee754_exp+0x2f8>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	f7f0 fc3e 	bl	8000b58 <__aeabi_dcmpgt>
 80102dc:	b138      	cbz	r0, 80102ee <__ieee754_exp+0x226>
 80102de:	4b38      	ldr	r3, [pc, #224]	; (80103c0 <__ieee754_exp+0x2f8>)
 80102e0:	2200      	movs	r2, #0
 80102e2:	4620      	mov	r0, r4
 80102e4:	4629      	mov	r1, r5
 80102e6:	e70a      	b.n	80100fe <__ieee754_exp+0x36>
 80102e8:	f04f 0a00 	mov.w	sl, #0
 80102ec:	e75f      	b.n	80101ae <__ieee754_exp+0xe6>
 80102ee:	4682      	mov	sl, r0
 80102f0:	e75d      	b.n	80101ae <__ieee754_exp+0xe6>
 80102f2:	4632      	mov	r2, r6
 80102f4:	463b      	mov	r3, r7
 80102f6:	2000      	movs	r0, #0
 80102f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80102fc:	f7ef ffe4 	bl	80002c8 <__aeabi_dsub>
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	ec51 0b19 	vmov	r0, r1, d9
 8010308:	f7f0 fac0 	bl	800088c <__aeabi_ddiv>
 801030c:	4602      	mov	r2, r0
 801030e:	460b      	mov	r3, r1
 8010310:	ec51 0b18 	vmov	r0, r1, d8
 8010314:	f7ef ffd8 	bl	80002c8 <__aeabi_dsub>
 8010318:	4642      	mov	r2, r8
 801031a:	464b      	mov	r3, r9
 801031c:	f7ef ffd4 	bl	80002c8 <__aeabi_dsub>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	2000      	movs	r0, #0
 8010326:	4926      	ldr	r1, [pc, #152]	; (80103c0 <__ieee754_exp+0x2f8>)
 8010328:	f7ef ffce 	bl	80002c8 <__aeabi_dsub>
 801032c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8010330:	4592      	cmp	sl, r2
 8010332:	db02      	blt.n	801033a <__ieee754_exp+0x272>
 8010334:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010338:	e6e3      	b.n	8010102 <__ieee754_exp+0x3a>
 801033a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801033e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010342:	2200      	movs	r2, #0
 8010344:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010348:	f7f0 f976 	bl	8000638 <__aeabi_dmul>
 801034c:	e6d9      	b.n	8010102 <__ieee754_exp+0x3a>
 801034e:	bf00      	nop
 8010350:	fefa39ef 	.word	0xfefa39ef
 8010354:	40862e42 	.word	0x40862e42
 8010358:	d52d3051 	.word	0xd52d3051
 801035c:	c0874910 	.word	0xc0874910
 8010360:	72bea4d0 	.word	0x72bea4d0
 8010364:	3e663769 	.word	0x3e663769
 8010368:	c5d26bf1 	.word	0xc5d26bf1
 801036c:	3ebbbd41 	.word	0x3ebbbd41
 8010370:	af25de2c 	.word	0xaf25de2c
 8010374:	3f11566a 	.word	0x3f11566a
 8010378:	16bebd93 	.word	0x16bebd93
 801037c:	3f66c16c 	.word	0x3f66c16c
 8010380:	5555553e 	.word	0x5555553e
 8010384:	3fc55555 	.word	0x3fc55555
 8010388:	652b82fe 	.word	0x652b82fe
 801038c:	3ff71547 	.word	0x3ff71547
 8010390:	fee00000 	.word	0xfee00000
 8010394:	3fe62e42 	.word	0x3fe62e42
 8010398:	35793c76 	.word	0x35793c76
 801039c:	3dea39ef 	.word	0x3dea39ef
 80103a0:	8800759c 	.word	0x8800759c
 80103a4:	7e37e43c 	.word	0x7e37e43c
 80103a8:	40862e41 	.word	0x40862e41
 80103ac:	7fefffff 	.word	0x7fefffff
 80103b0:	3fd62e42 	.word	0x3fd62e42
 80103b4:	3ff0a2b1 	.word	0x3ff0a2b1
 80103b8:	08011f60 	.word	0x08011f60
 80103bc:	08011f70 	.word	0x08011f70
 80103c0:	3ff00000 	.word	0x3ff00000
 80103c4:	08011f50 	.word	0x08011f50
 80103c8:	3defffff 	.word	0x3defffff

080103cc <__ieee754_fmodf>:
 80103cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ce:	ee10 5a90 	vmov	r5, s1
 80103d2:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80103d6:	d009      	beq.n	80103ec <__ieee754_fmodf+0x20>
 80103d8:	ee10 2a10 	vmov	r2, s0
 80103dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80103e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80103e4:	da02      	bge.n	80103ec <__ieee754_fmodf+0x20>
 80103e6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80103ea:	dd04      	ble.n	80103f6 <__ieee754_fmodf+0x2a>
 80103ec:	ee60 0a20 	vmul.f32	s1, s0, s1
 80103f0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80103f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103f6:	42a3      	cmp	r3, r4
 80103f8:	dbfc      	blt.n	80103f4 <__ieee754_fmodf+0x28>
 80103fa:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80103fe:	d105      	bne.n	801040c <__ieee754_fmodf+0x40>
 8010400:	4b32      	ldr	r3, [pc, #200]	; (80104cc <__ieee754_fmodf+0x100>)
 8010402:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8010406:	ed93 0a00 	vldr	s0, [r3]
 801040a:	e7f3      	b.n	80103f4 <__ieee754_fmodf+0x28>
 801040c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8010410:	d13f      	bne.n	8010492 <__ieee754_fmodf+0xc6>
 8010412:	0219      	lsls	r1, r3, #8
 8010414:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8010418:	2900      	cmp	r1, #0
 801041a:	dc37      	bgt.n	801048c <__ieee754_fmodf+0xc0>
 801041c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8010420:	d13d      	bne.n	801049e <__ieee754_fmodf+0xd2>
 8010422:	0227      	lsls	r7, r4, #8
 8010424:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8010428:	2f00      	cmp	r7, #0
 801042a:	da35      	bge.n	8010498 <__ieee754_fmodf+0xcc>
 801042c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8010430:	bfbb      	ittet	lt
 8010432:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8010436:	1a12      	sublt	r2, r2, r0
 8010438:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 801043c:	4093      	lsllt	r3, r2
 801043e:	bfa8      	it	ge
 8010440:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8010444:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8010448:	bfb5      	itete	lt
 801044a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801044e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8010452:	1a52      	sublt	r2, r2, r1
 8010454:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8010458:	bfb8      	it	lt
 801045a:	4094      	lsllt	r4, r2
 801045c:	1a40      	subs	r0, r0, r1
 801045e:	1b1a      	subs	r2, r3, r4
 8010460:	bb00      	cbnz	r0, 80104a4 <__ieee754_fmodf+0xd8>
 8010462:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8010466:	bf38      	it	cc
 8010468:	4613      	movcc	r3, r2
 801046a:	2b00      	cmp	r3, #0
 801046c:	d0c8      	beq.n	8010400 <__ieee754_fmodf+0x34>
 801046e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010472:	db1f      	blt.n	80104b4 <__ieee754_fmodf+0xe8>
 8010474:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8010478:	db1f      	blt.n	80104ba <__ieee754_fmodf+0xee>
 801047a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801047e:	317f      	adds	r1, #127	; 0x7f
 8010480:	4333      	orrs	r3, r6
 8010482:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8010486:	ee00 3a10 	vmov	s0, r3
 801048a:	e7b3      	b.n	80103f4 <__ieee754_fmodf+0x28>
 801048c:	3801      	subs	r0, #1
 801048e:	0049      	lsls	r1, r1, #1
 8010490:	e7c2      	b.n	8010418 <__ieee754_fmodf+0x4c>
 8010492:	15d8      	asrs	r0, r3, #23
 8010494:	387f      	subs	r0, #127	; 0x7f
 8010496:	e7c1      	b.n	801041c <__ieee754_fmodf+0x50>
 8010498:	3901      	subs	r1, #1
 801049a:	007f      	lsls	r7, r7, #1
 801049c:	e7c4      	b.n	8010428 <__ieee754_fmodf+0x5c>
 801049e:	15e1      	asrs	r1, r4, #23
 80104a0:	397f      	subs	r1, #127	; 0x7f
 80104a2:	e7c3      	b.n	801042c <__ieee754_fmodf+0x60>
 80104a4:	2a00      	cmp	r2, #0
 80104a6:	da02      	bge.n	80104ae <__ieee754_fmodf+0xe2>
 80104a8:	005b      	lsls	r3, r3, #1
 80104aa:	3801      	subs	r0, #1
 80104ac:	e7d7      	b.n	801045e <__ieee754_fmodf+0x92>
 80104ae:	d0a7      	beq.n	8010400 <__ieee754_fmodf+0x34>
 80104b0:	0053      	lsls	r3, r2, #1
 80104b2:	e7fa      	b.n	80104aa <__ieee754_fmodf+0xde>
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	3901      	subs	r1, #1
 80104b8:	e7d9      	b.n	801046e <__ieee754_fmodf+0xa2>
 80104ba:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80104be:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80104c2:	3182      	adds	r1, #130	; 0x82
 80104c4:	410b      	asrs	r3, r1
 80104c6:	4333      	orrs	r3, r6
 80104c8:	e7dd      	b.n	8010486 <__ieee754_fmodf+0xba>
 80104ca:	bf00      	nop
 80104cc:	08011f80 	.word	0x08011f80

080104d0 <__ieee754_sqrtf>:
 80104d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80104d4:	4770      	bx	lr

080104d6 <with_errno>:
 80104d6:	b570      	push	{r4, r5, r6, lr}
 80104d8:	4604      	mov	r4, r0
 80104da:	460d      	mov	r5, r1
 80104dc:	4616      	mov	r6, r2
 80104de:	f7fb fbbd 	bl	800bc5c <__errno>
 80104e2:	4629      	mov	r1, r5
 80104e4:	6006      	str	r6, [r0, #0]
 80104e6:	4620      	mov	r0, r4
 80104e8:	bd70      	pop	{r4, r5, r6, pc}

080104ea <xflow>:
 80104ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104ec:	4614      	mov	r4, r2
 80104ee:	461d      	mov	r5, r3
 80104f0:	b108      	cbz	r0, 80104f6 <xflow+0xc>
 80104f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104f6:	e9cd 2300 	strd	r2, r3, [sp]
 80104fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104fe:	4620      	mov	r0, r4
 8010500:	4629      	mov	r1, r5
 8010502:	f7f0 f899 	bl	8000638 <__aeabi_dmul>
 8010506:	2222      	movs	r2, #34	; 0x22
 8010508:	b003      	add	sp, #12
 801050a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801050e:	f7ff bfe2 	b.w	80104d6 <with_errno>

08010512 <__math_uflow>:
 8010512:	b508      	push	{r3, lr}
 8010514:	2200      	movs	r2, #0
 8010516:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801051a:	f7ff ffe6 	bl	80104ea <xflow>
 801051e:	ec41 0b10 	vmov	d0, r0, r1
 8010522:	bd08      	pop	{r3, pc}

08010524 <__math_oflow>:
 8010524:	b508      	push	{r3, lr}
 8010526:	2200      	movs	r2, #0
 8010528:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801052c:	f7ff ffdd 	bl	80104ea <xflow>
 8010530:	ec41 0b10 	vmov	d0, r0, r1
 8010534:	bd08      	pop	{r3, pc}

08010536 <finite>:
 8010536:	b082      	sub	sp, #8
 8010538:	ed8d 0b00 	vstr	d0, [sp]
 801053c:	9801      	ldr	r0, [sp, #4]
 801053e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010542:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010546:	0fc0      	lsrs	r0, r0, #31
 8010548:	b002      	add	sp, #8
 801054a:	4770      	bx	lr

0801054c <_init>:
 801054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054e:	bf00      	nop
 8010550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010552:	bc08      	pop	{r3}
 8010554:	469e      	mov	lr, r3
 8010556:	4770      	bx	lr

08010558 <_fini>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	bf00      	nop
 801055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801055e:	bc08      	pop	{r3}
 8010560:	469e      	mov	lr, r3
 8010562:	4770      	bx	lr
