
motor_driver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001031c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c0  080104f0  080104f0  000204f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011eb0  08011eb0  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08011eb0  08011eb0  00021eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eb8  08011eb8  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011eb8  08011eb8  00021eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ebc  08011ebc  00021ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011ec0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009484  20000220  080120e0  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200096a4  080120e0  000396a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea3c  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e4  00000000  00000000  0004ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00053570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  00054d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029094  00000000  00000000  00056348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222ce  00000000  00000000  0007f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7694  00000000  00000000  000a16aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a54  00000000  00000000  00188d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080104d4 	.word	0x080104d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	080104d4 	.word	0x080104d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001058:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_ADC1_Init+0xcc>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC1_Init+0xc8>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001072:	2200      	movs	r2, #0
 8001074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <MX_ADC1_Init+0xd0>)
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001092:	2201      	movs	r2, #1
 8001094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a6:	f005 ff29 	bl	8006efc <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010b0:	f004 f9e0 	bl	8005474 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010b4:	2316      	movs	r3, #22
 80010b6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010c8:	f006 faf4 	bl	80076b4 <HAL_ADCEx_MultiModeConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f004 f9cf 	bl	8005474 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010e8:	f006 f8b6 	bl	8007258 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010f2:	f004 f9bf 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000023c 	.word	0x2000023c
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_ADC2_Init+0x90>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_ADC2_Init+0x8c>)
 800113a:	2200      	movs	r2, #0
 800113c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_ADC2_Init+0x8c>)
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ADC2_Init+0x8c>)
 800115c:	2201      	movs	r2, #1
 800115e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001162:	f005 fecb 	bl	8006efc <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800116c:	f004 f982 	bl	8005474 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001170:	230b      	movs	r3, #11
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001182:	f006 f869 	bl	8007258 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800118c:	f004 f972 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000284 	.word	0x20000284
 800119c:	40012100 	.word	0x40012100

080011a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC3_Init+0x8c>)
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_ADC3_Init+0x90>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_ADC3_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f6:	f005 fe81 	bl	8006efc <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001200:	f004 f938 	bl	8005474 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_ADC3_Init+0x8c>)
 8001216:	f006 f81f 	bl	8007258 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001220:	f004 f928 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002cc 	.word	0x200002cc
 8001230:	40012200 	.word	0x40012200

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_ADC_MspInit+0x134>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d128      	bne.n	80012a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_ADC_MspInit+0x138>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_ADC_MspInit+0x138>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4833      	ldr	r0, [pc, #204]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012a2:	f006 ffff 	bl	80082a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012a6:	e05a      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_ADC_MspInit+0x140>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ea:	2302      	movs	r3, #2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012fe:	f006 ffd1 	bl	80082a4 <HAL_GPIO_Init>
}
 8001302:	e02c      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_ADC_MspInit+0x144>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d127      	bne.n	800135e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_ADC_MspInit+0x138>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_ADC_MspInit+0x148>)
 800135a:	f006 ffa3 	bl	80082a4 <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	; 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012000 	.word	0x40012000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40012100 	.word	0x40012100
 8001378:	40012200 	.word	0x40012200
 800137c:	40020000 	.word	0x40020000

08001380 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <order_phases+0x1e8>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7c1b      	ldrb	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d108      	bne.n	80013ae <order_phases+0x2e>
		printf("\n\r\n\rChecking phase sign, pole pairs\r\n");
 800139c:	4873      	ldr	r0, [pc, #460]	; (800156c <order_phases+0x1ec>)
 800139e:	f00b f90d 	bl	800c5bc <puts>
		cal->started = 1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001570 <order_phases+0x1f0>
 80013c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80013d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d529      	bpl.n	8001434 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80013f2:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        cal->cal_position.elec_velocity = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013fc:	461a      	mov	r2, r3
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
        controller->i_d_des = I_CAL;
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <order_phases+0x1f4>)
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001420:	332c      	adds	r3, #44	; 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f001 fe39 	bl	800309c <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
    	return;
 8001432:	e096      	b.n	8001562 <order_phases+0x1e2>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a05 	vldr	s15, [r3, #20]
 800143a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001578 <order_phases+0x1f8>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d51d      	bpl.n	8001484 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edd3 7a05 	vldr	s15, [r3, #20]
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001456:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800146e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001478:	332c      	adds	r3, #44	; 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f001 fe0d 	bl	800309c <commutate>
    	return;
 8001482:	e06e      	b.n	8001562 <order_phases+0x1e2>
    }

	reset_foc(controller);
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f001 fd95 	bl	8002fb4 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a06 	vldr	s15, [r3, #24]
 8001496:	ed97 7a05 	vldr	s14, [r7, #20]
 800149a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149e:	eef0 7ae7 	vabs.f32	s15, s15
 80014a2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800157c <order_phases+0x1fc>
 80014a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014aa:	ee16 0a90 	vmov	r0, s13
 80014ae:	f7ff f86b 	bl	8000588 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	ec43 2b10 	vmov	d0, r2, r3
 80014ba:	f00e fca9 	bl	800fe10 <round>
 80014be:	ec53 2b10 	vmov	r2, r3, d0
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb8f 	bl	8000be8 <__aeabi_d2uiz>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd07      	ble.n	80014f6 <order_phases+0x176>
		cal->phase_order = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80014ee:	4824      	ldr	r0, [pc, #144]	; (8001580 <order_phases+0x200>)
 80014f0:	f00b f864 	bl	800c5bc <puts>
 80014f4:	e006      	b.n	8001504 <order_phases+0x184>
	}
	else{
		cal->phase_order = 1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80014fe:	4821      	ldr	r0, [pc, #132]	; (8001584 <order_phases+0x204>)
 8001500:	f00b f85c 	bl	800c5bc <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	481f      	ldr	r0, [pc, #124]	; (8001588 <order_phases+0x208>)
 800150c:	f00a ffd0 	bl	800c4b0 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4604      	mov	r4, r0
 800151c:	460d      	mov	r5, r1
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff f832 	bl	8000588 <__aeabi_f2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9cd 2300 	strd	r2, r3, [sp]
 800152c:	4622      	mov	r2, r4
 800152e:	462b      	mov	r3, r5
 8001530:	4816      	ldr	r0, [pc, #88]	; (800158c <order_phases+0x20c>)
 8001532:	f00a ffbd 	bl	800c4b0 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	461a      	mov	r2, r3
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <order_phases+0x1e8>)
 8001540:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <order_phases+0x1f4>)
 8001550:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    cal->started = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}
 8001568:	2000043c 	.word	0x2000043c
 800156c:	080104f0 	.word	0x080104f0
 8001570:	3851b717 	.word	0x3851b717
 8001574:	2000033c 	.word	0x2000033c
 8001578:	3fd06cbe 	.word	0x3fd06cbe
 800157c:	40c90fdb 	.word	0x40c90fdb
 8001580:	08010518 	.word	0x08010518
 8001584:	08010530 	.word	0x08010530
 8001588:	08010548 	.word	0x08010548
 800158c:	0801055c 	.word	0x0801055c

08001590 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af02      	add	r7, sp, #8
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonlinearity */

	if(!cal->started){
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7c1b      	ldrb	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 80015a6:	489c      	ldr	r0, [pc, #624]	; (8001818 <calibrate_encoder+0x288>)
 80015a8:	f00b f808 	bl	800c5bc <puts>
			cal->started = 1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	84da      	strh	r2, [r3, #38]	; 0x26
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800181c <calibrate_encoder+0x28c>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80015ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d525      	bpl.n	8001644 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800160a:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
        controller->i_d_des = I_CAL;
 800160e:	4b84      	ldr	r3, [pc, #528]	; (8001820 <calibrate_encoder+0x290>)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        controller->i_q_des = 0.0f;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        commutate(controller, &cal->cal_position);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001628:	332c      	adds	r3, #44	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f001 fd35 	bl	800309c <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001642:	e26b      	b.n	8001b1c <calibrate_encoder+0x58c>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	ed93 7a05 	vldr	s14, [r3, #20]
 800164a:	4b75      	ldr	r3, [pc, #468]	; (8001820 <calibrate_encoder+0x290>)
 800164c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001650:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001824 <calibrate_encoder+0x294>
 8001654:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001658:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800165c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	f140 808a 	bpl.w	8001788 <calibrate_encoder+0x1f8>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edd3 7a02 	vldr	s15, [r3, #8]
 800167a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001828 <calibrate_encoder+0x298>
 800167e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001692:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800169c:	332c      	adds	r3, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f001 fcfb 	bl	800309c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	dc00      	bgt.n	80016be <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 80016bc:	e22e      	b.n	8001b1c <calibrate_encoder+0x58c>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80016c4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800183c <calibrate_encoder+0x2ac>
 80016c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <calibrate_encoder+0x290>)
 80016ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001824 <calibrate_encoder+0x294>
 80016d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e2:	ee17 3a90 	vmov	r3, s15
 80016e6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	131b      	asrs	r3, r3, #12
 80016f6:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016fe:	4618      	mov	r0, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	441a      	add	r2, r3
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	f100 030a 	add.w	r3, r0, #10
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	605a      	str	r2, [r3, #4]
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff37 	bl	8000588 <__aeabi_f2d>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	330a      	adds	r3, #10
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	483e      	ldr	r0, [pc, #248]	; (800182c <calibrate_encoder+0x29c>)
 8001734:	f00a febc 	bl	800c4b0 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800173e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001830 <calibrate_encoder+0x2a0>
 8001742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <calibrate_encoder+0x290>)
 800175a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800175e:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001834 <calibrate_encoder+0x2a4>
 8001762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800176a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800176e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	f000 81ce 	beq.w	8001b16 <calibrate_encoder+0x586>
			cal->sample_count++;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800177e:	3301      	adds	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	84da      	strh	r2, [r3, #38]	; 0x26
		return;
 8001786:	e1c9      	b.n	8001b1c <calibrate_encoder+0x58c>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	ed93 7a05 	vldr	s14, [r3, #20]
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <calibrate_encoder+0x290>)
 8001790:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001794:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001838 <calibrate_encoder+0x2a8>
 8001798:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800179c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80017a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	f140 80a5 	bpl.w	8001902 <calibrate_encoder+0x372>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80017be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001828 <calibrate_encoder+0x298>
 80017c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <calibrate_encoder+0x290>)
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		cal->cal_position.elec_angle = cal->theta_ref;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80017ea:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		commutate(controller, &cal->cal_position);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80017f4:	332c      	adds	r3, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f001 fc4f 	bl	800309c <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	ed93 7a05 	vldr	s14, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800180a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	dc15      	bgt.n	8001840 <calibrate_encoder+0x2b0>
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);

			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001814:	e181      	b.n	8001b1a <calibrate_encoder+0x58a>
 8001816:	bf00      	nop
 8001818:	08010578 	.word	0x08010578
 800181c:	3851b717 	.word	0x3851b717
 8001820:	2000033c 	.word	0x2000033c
 8001824:	40c90fdb 	.word	0x40c90fdb
 8001828:	3a03126e 	.word	0x3a03126e
 800182c:	080105a0 	.word	0x080105a0
 8001830:	3ba0d97c 	.word	0x3ba0d97c
 8001834:	43000000 	.word	0x43000000
 8001838:	41490fdb 	.word	0x41490fdb
 800183c:	49000000 	.word	0x49000000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8168 	beq.w	8001b1a <calibrate_encoder+0x58a>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001850:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800183c <calibrate_encoder+0x2ac>
 8001854:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001858:	4bb2      	ldr	r3, [pc, #712]	; (8001b24 <calibrate_encoder+0x594>)
 800185a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800185e:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001b28 <calibrate_encoder+0x598>
 8001862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800186a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186e:	ee17 3a90 	vmov	r3, s15
 8001872:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	131b      	asrs	r3, r3, #12
 8001882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	330a      	adds	r3, #10
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80018a2:	4610      	mov	r0, r2
 80018a4:	0fda      	lsrs	r2, r3, #31
 80018a6:	4413      	add	r3, r2
 80018a8:	105b      	asrs	r3, r3, #1
 80018aa:	4619      	mov	r1, r3
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	f100 030a 	add.w	r3, r0, #10
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	6059      	str	r1, [r3, #4]
			printf("%.3f %d %d\r\n", cal->theta_ref, count_ref, cal->error_arr[cal->sample_count]);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe63 	bl	8000588 <__aeabi_f2d>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	330a      	adds	r3, #10
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4894      	ldr	r0, [pc, #592]	; (8001b2c <calibrate_encoder+0x59c>)
 80018dc:	f00a fde8 	bl	800c4b0 <iprintf>
			cal->sample_count--;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	84da      	strh	r2, [r3, #38]	; 0x26
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018f2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001b30 <calibrate_encoder+0x5a0>
 80018f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001900:	e10b      	b.n	8001b1a <calibrate_encoder+0x58a>
    }

    reset_foc(controller);
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f001 fb56 	bl	8002fb4 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800190c:	2300      	movs	r3, #0
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
 8001910:	e00b      	b.n	800192a <calibrate_encoder+0x39a>
		ezero_mean += cal->error_arr[i];
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001916:	330a      	adds	r3, #10
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001920:	4413      	add	r3, r2
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	3301      	adds	r3, #1
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
 800192a:	4b7e      	ldr	r3, [pc, #504]	; (8001b24 <calibrate_encoder+0x594>)
 800192c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001934:	ee17 3a90 	vmov	r3, s15
 8001938:	01db      	lsls	r3, r3, #7
 800193a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800193c:	429a      	cmp	r2, r3
 800193e:	dbe8      	blt.n	8001912 <calibrate_encoder+0x382>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <calibrate_encoder+0x594>)
 800194c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001950:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001b34 <calibrate_encoder+0x5a4>
 8001954:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 2a90 	vmov	r2, s15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	61da      	str	r2, [r3, #28]

	// check for valid calibration...ezero mean is in counts, should be less than CPR
	if (cal->ezero < ENC_CPR){
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001970:	f280 80bf 	bge.w	8001af2 <calibrate_encoder+0x562>
		printf("Valid calibration. Mean elec zero: %d\n\r", cal->ezero);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	4619      	mov	r1, r3
 800197a:	486f      	ldr	r0, [pc, #444]	; (8001b38 <calibrate_encoder+0x5a8>)
 800197c:	f00a fd98 	bl	800c4b0 <iprintf>
		cal->valid_cal = 1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		// Moving average to filter out cogging ripple
		int window = SAMPLES_PER_PPAIR;
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
		int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f5c3 2300 	rsb	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	da01      	bge.n	800199c <calibrate_encoder+0x40c>
 8001998:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800199c:	131b      	asrs	r3, r3, #12
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i = 0; i<N_LUT; i++){
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a4:	e0a0      	b.n	8001ae8 <calibrate_encoder+0x558>
				int moving_avg = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int j = (-window)/2; j<(window)/2; j++){
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	0fda      	lsrs	r2, r3, #31
 80019ae:	4413      	add	r3, r2
 80019b0:	105b      	asrs	r3, r3, #1
 80019b2:	425b      	negs	r3, r3
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
 80019b6:	e068      	b.n	8001a8a <calibrate_encoder+0x4fa>
					int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80019b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <calibrate_encoder+0x594>)
 80019c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001b34 <calibrate_encoder+0x5a4>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001b34 <calibrate_encoder+0x5a4>
 80019d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 3a90 	vmov	r3, s15
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
					if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da13      	bge.n	8001a22 <calibrate_encoder+0x492>
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <calibrate_encoder+0x594>)
 8001a06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a0a:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001b34 <calibrate_encoder+0x5a4>
 8001a0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1a:	ee17 3a90 	vmov	r3, s15
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a20:	e027      	b.n	8001a72 <calibrate_encoder+0x4e2>
					else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <calibrate_encoder+0x594>)
 8001a2e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a32:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001b34 <calibrate_encoder+0x5a4>
 8001a36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dd12      	ble.n	8001a72 <calibrate_encoder+0x4e2>
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a56:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <calibrate_encoder+0x594>)
 8001a58:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a5c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001b34 <calibrate_encoder+0x5a4>
 8001a60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6c:	ee17 3a90 	vmov	r3, s15
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
					moving_avg += cal->error_arr[index];
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a76:	330a      	adds	r3, #10
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a80:	4413      	add	r3, r2
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
				for(int j = (-window)/2; j<(window)/2; j++){
 8001a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a86:	3301      	adds	r3, #1
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	0fda      	lsrs	r2, r3, #31
 8001a8e:	4413      	add	r3, r2
 8001a90:	105b      	asrs	r3, r3, #1
 8001a92:	461a      	mov	r2, r3
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	4293      	cmp	r3, r2
 8001a98:	db8e      	blt.n	80019b8 <calibrate_encoder+0x428>
				}
				moving_avg = moving_avg/window;
 8001a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
				int lut_index = lut_offset + i;
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa8:	4413      	add	r3, r2
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
				if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab0:	dd02      	ble.n	8001ab8 <calibrate_encoder+0x528>
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	3b80      	subs	r3, #128	; 0x80
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
				cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ac8:	330a      	adds	r3, #10
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	605a      	str	r2, [r3, #4]
				printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001adc:	4817      	ldr	r0, [pc, #92]	; (8001b3c <calibrate_encoder+0x5ac>)
 8001ade:	f00a fce7 	bl	800c4b0 <iprintf>
		for(int i = 0; i<N_LUT; i++){
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aea:	2b7f      	cmp	r3, #127	; 0x7f
 8001aec:	f77f af5b 	ble.w	80019a6 <calibrate_encoder+0x416>
 8001af0:	e009      	b.n	8001b06 <calibrate_encoder+0x576>
			}

	} else {
		printf("Bad calibration, won't save the data. Mean elec zero: %d\n\r", cal->ezero);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <calibrate_encoder+0x5b0>)
 8001afa:	f00a fcd9 	bl	800c4b0 <iprintf>
		cal->valid_cal = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	}

	cal->started = 0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b14:	e002      	b.n	8001b1c <calibrate_encoder+0x58c>
				return;
 8001b16:	bf00      	nop
 8001b18:	e000      	b.n	8001b1c <calibrate_encoder+0x58c>
		return;
 8001b1a:	bf00      	nop

}
 8001b1c:	3748      	adds	r7, #72	; 0x48
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000033c 	.word	0x2000033c
 8001b28:	40c90fdb 	.word	0x40c90fdb
 8001b2c:	080105a0 	.word	0x080105a0
 8001b30:	3ba0d97c 	.word	0x3ba0d97c
 8001b34:	43000000 	.word	0x43000000
 8001b38:	080105b0 	.word	0x080105b0
 8001b3c:	080105d8 	.word	0x080105d8
 8001b40:	080105e4 	.word	0x080105e4

08001b44 <check_encoder_init>:
void measure_lr(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
	// TODO: implement this?
}


int check_encoder_init(EncoderStruct *encoder, ControllerStruct *controller, CalStruct *cal){
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b091      	sub	sp, #68	; 0x44
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]

	printf("\n\r Checking encoder initialization\n\r");
 8001b50:	4892      	ldr	r0, [pc, #584]	; (8001d9c <check_encoder_init+0x258>)
 8001b52:	f00a fcad 	bl	800c4b0 <iprintf>

	float theta_elec_read = 0.0f;
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float theta_elec_err = 0.0f;
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
	int theta_elec_counts = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	e026      	b.n	8001bba <check_encoder_init+0x76>
		cal->theta_ref = PI_F/2.0f;//W_CAL*cal->time;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a8c      	ldr	r2, [pc, #560]	; (8001da0 <check_encoder_init+0x25c>)
 8001b70:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001b7c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b86:	461a      	mov	r2, r3
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001b90:	4b84      	ldr	r3, [pc, #528]	; (8001da4 <check_encoder_init+0x260>)
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001baa:	332c      	adds	r3, #44	; 0x2c
 8001bac:	4619      	mov	r1, r3
 8001bae:	68b8      	ldr	r0, [r7, #8]
 8001bb0:	f001 fa74 	bl	800309c <commutate>
	for(int i = 0; i<10000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	ddd3      	ble.n	8001b6c <check_encoder_init+0x28>
	}

	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e033      	b.n	8001c32 <check_encoder_init+0xee>
		cal->theta_ref = 0.0f;//W_CAL*cal->time;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001bdc:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
		cal->cal_position.elec_velocity = 0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001be6:	461a      	mov	r2, r3
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
		controller->i_d_des = I_CAL;
 8001bf0:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <check_encoder_init+0x260>)
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		controller->i_q_des = 0.0f;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		commutate(controller, &cal->cal_position);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001c0a:	332c      	adds	r3, #44	; 0x2c
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	f001 fa44 	bl	800309c <commutate>
		if (i==15000) {
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d106      	bne.n	8001c2c <check_encoder_init+0xe8>
			theta_elec_read = encoder->elec_angle;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
			theta_elec_counts = encoder->count;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<20000; i++){		// Set voltage angle to zero, wait for rotor position to settle
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	ddc6      	ble.n	8001bca <check_encoder_init+0x86>
		}
	}

	// how far from elec angle of 0?
	if (theta_elec_read > PI_F) { theta_elec_err = theta_elec_read - 2.0f*PI_F; } // wrap from -PI to PI instead of 0 to 2*PI
 8001c3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c40:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001da8 <check_encoder_init+0x264>
 8001c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	dd08      	ble.n	8001c60 <check_encoder_init+0x11c>
 8001c4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c52:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001dac <check_encoder_init+0x268>
 8001c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c5a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001c5e:	e001      	b.n	8001c64 <check_encoder_init+0x120>
	else { theta_elec_err = theta_elec_read; };
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28

	float diff_zeros = ((float)(theta_elec_counts-E_ZERO))*PPAIRS/((float)ENC_CPR);
 8001c64:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <check_encoder_init+0x26c>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <check_encoder_init+0x260>)
 8001c76:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001db4 <check_encoder_init+0x270>
 8001c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c86:	edc7 7a06 	vstr	s15, [r7, #24]
	int diff_int = diff_zeros;
 8001c8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c92:	ee17 3a90 	vmov	r3, s15
 8001c96:	617b      	str	r3, [r7, #20]
	diff_zeros = diff_zeros - (float)diff_int;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001caa:	edc7 7a06 	vstr	s15, [r7, #24]
	diff_zeros = diff_zeros>0.5 ? diff_zeros-1.0 : diff_zeros<-0.5 ? diff_zeros+1.0 : diff_zeros;
 8001cae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	dd06      	ble.n	8001cce <check_encoder_init+0x18a>
 8001cc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ccc:	e011      	b.n	8001cf2 <check_encoder_init+0x1ae>
 8001cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cd2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	d506      	bpl.n	8001cee <check_encoder_init+0x1aa>
 8001ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cec:	e001      	b.n	8001cf2 <check_encoder_init+0x1ae>
 8001cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf2:	edc7 7a06 	vstr	s15, [r7, #24]

	// Print difference and status of initialization
	if ((theta_elec_err < (PI_F/2.0f)) && (theta_elec_err > (-PI_F/2.0f)) ) { // initialization is good
 8001cf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cfa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001db8 <check_encoder_init+0x274>
 8001cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d526      	bpl.n	8001d56 <check_encoder_init+0x212>
 8001d08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d0c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001dbc <check_encoder_init+0x278>
 8001d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	dd1d      	ble.n	8001d56 <check_encoder_init+0x212>
		printf(" Good initialization! \n\r");
 8001d1a:	4829      	ldr	r0, [pc, #164]	; (8001dc0 <check_encoder_init+0x27c>)
 8001d1c:	f00a fbc8 	bl	800c4b0 <iprintf>
		printf(" Angle Error = %.2f, Old Zero = %d, New Zero = %d, Zero Diff (Elec Rots) = %.2f\r\n", theta_elec_err, E_ZERO, theta_elec_counts, diff_zeros);
 8001d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d22:	f7fe fc31 	bl	8000588 <__aeabi_f2d>
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <check_encoder_init+0x26c>)
 8001d2c:	69de      	ldr	r6, [r3, #28]
 8001d2e:	69b8      	ldr	r0, [r7, #24]
 8001d30:	f7fe fc2a 	bl	8000588 <__aeabi_f2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	9600      	str	r6, [sp, #0]
 8001d42:	4622      	mov	r2, r4
 8001d44:	462b      	mov	r3, r5
 8001d46:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <check_encoder_init+0x280>)
 8001d48:	f00a fbb2 	bl	800c4b0 <iprintf>
		encoder->init_status = 1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001d54:	e01c      	b.n	8001d90 <check_encoder_init+0x24c>
	} else { // electrical angle error is larger than 90deg
		printf(" BAD initialization! \n\r");
 8001d56:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <check_encoder_init+0x284>)
 8001d58:	f00a fbaa 	bl	800c4b0 <iprintf>
		printf(" Angle Error = %.2f, Old Zero = %d, New Zero = %d, Zero Diff (Elec Rots) = %.2f\r\n", theta_elec_err, E_ZERO, theta_elec_counts, diff_zeros);
 8001d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d5e:	f7fe fc13 	bl	8000588 <__aeabi_f2d>
 8001d62:	4604      	mov	r4, r0
 8001d64:	460d      	mov	r5, r1
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <check_encoder_init+0x26c>)
 8001d68:	69de      	ldr	r6, [r3, #28]
 8001d6a:	69b8      	ldr	r0, [r7, #24]
 8001d6c:	f7fe fc0c 	bl	8000588 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9600      	str	r6, [sp, #0]
 8001d7e:	4622      	mov	r2, r4
 8001d80:	462b      	mov	r3, r5
 8001d82:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <check_encoder_init+0x280>)
 8001d84:	f00a fb94 	bl	800c4b0 <iprintf>
		encoder->init_status = 0;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	}

	// return encoder->elec_angle? encoder->count?
	return theta_elec_counts; //theta_elec_read;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24

} // end check_encoder_init function
 8001d92:	4618      	mov	r0, r3
 8001d94:	3734      	adds	r7, #52	; 0x34
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08010620 	.word	0x08010620
 8001da0:	3fc90fdb 	.word	0x3fc90fdb
 8001da4:	2000033c 	.word	0x2000033c
 8001da8:	40490fdb 	.word	0x40490fdb
 8001dac:	40c90fdb 	.word	0x40c90fdb
 8001db0:	2000043c 	.word	0x2000043c
 8001db4:	49000000 	.word	0x49000000
 8001db8:	3fc90fdb 	.word	0x3fc90fdb
 8001dbc:	bfc90fdb 	.word	0xbfc90fdb
 8001dc0:	08010648 	.word	0x08010648
 8001dc4:	08010664 	.word	0x08010664
 8001dc8:	080106b8 	.word	0x080106b8

08001dcc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <MX_CAN1_Init+0x6c>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001dd8:	2205      	movs	r2, #5
 8001dda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001dec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001df0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001df4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001df8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_CAN1_Init+0x68>)
 8001e20:	f005 fc8e 	bl	8007740 <HAL_CAN_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001e2a:	f003 fb23 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000314 	.word	0x20000314
 8001e38:	40006400 	.word	0x40006400

08001e3c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_CAN_MspInit+0x84>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_CAN_MspInit+0x88>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_CAN_MspInit+0x88>)
 8001e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_CAN_MspInit+0x88>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_CAN_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_CAN_MspInit+0x88>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_CAN_MspInit+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ea8:	2309      	movs	r3, #9
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <HAL_CAN_MspInit+0x8c>)
 8001eb4:	f006 f9f6 	bl	80082a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40006400 	.word	0x40006400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <can_rx_init+0x54>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	015b      	lsls	r3, r3, #5
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3328      	adds	r3, #40	; 0x28
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <can_rx_init+0x58>)
 8001f14:	f005 fd10 	bl	8007938 <HAL_CAN_ConfigFilter>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000043c 	.word	0x2000043c
 8001f24:	20000314 	.word	0x20000314

08001f28 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 6; 			// message size of 8 byte
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2206      	movs	r2, #6
 8001f34:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <can_tx_init+0x30>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	461a      	mov	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	2000043c 	.word	0x2000043c

08001f5c <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6178      	str	r0, [r7, #20]
 8001f64:	460b      	mov	r3, r1
 8001f66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f6e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001f72:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <pack_reply+0xec>)
 8001f76:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <pack_reply+0xec>)
 8001f7c:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001f80:	2010      	movs	r0, #16
 8001f82:	eeb0 1a47 	vmov.f32	s2, s14
 8001f86:	eef0 0a67 	vmov.f32	s1, s15
 8001f8a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f8e:	f003 fb61 	bl	8005654 <float_to_uint>
 8001f92:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001f94:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <pack_reply+0xec>)
 8001f96:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <pack_reply+0xec>)
 8001f9c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8001fa0:	200c      	movs	r0, #12
 8001fa2:	eeb0 1a47 	vmov.f32	s2, s14
 8001fa6:	eef0 0a67 	vmov.f32	s1, s15
 8001faa:	ed97 0a02 	vldr	s0, [r7, #8]
 8001fae:	f003 fb51 	bl	8005654 <float_to_uint>
 8001fb2:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001fb4:	4b24      	ldr	r3, [pc, #144]	; (8002048 <pack_reply+0xec>)
 8001fb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fba:	eeb1 7a67 	vneg.f32	s14, s15
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <pack_reply+0xec>)
 8001fc0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <pack_reply+0xec>)
 8001fca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fce:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <pack_reply+0xec>)
 8001fd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <pack_reply+0xec>)
 8001fda:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <pack_reply+0xec>)
 8001fe4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fec:	200c      	movs	r0, #12
 8001fee:	eeb0 1a67 	vmov.f32	s2, s15
 8001ff2:	eef0 0a66 	vmov.f32	s1, s13
 8001ff6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ffa:	f003 fb2b 	bl	8005654 <float_to_uint>
 8001ffe:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	7cfa      	ldrb	r2, [r7, #19]
 8002004:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	121b      	asrs	r3, r3, #8
 800200a:	b2da      	uxtb	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	b2da      	uxtb	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	111b      	asrs	r3, r3, #4
 800201c:	b2da      	uxtb	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	b2da      	uxtb	r2, r3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	121b      	asrs	r3, r3, #8
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4413      	add	r3, r2
 8002030:	b2da      	uxtb	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	719a      	strb	r2, [r3, #6]
    }
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000033c 	.word	0x2000033c

0800204c <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 800204c:	b084      	sub	sp, #16
 800204e:	b590      	push	{r4, r7, lr}
 8002050:	b087      	sub	sp, #28
 8002052:	af00      	add	r7, sp, #0
 8002054:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 800205c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 800206a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002074:	0912      	lsrs	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 800207c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002086:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 800208e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002098:	0912      	lsrs	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	4313      	orrs	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 80020a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020aa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80020ae:	4313      	orrs	r3, r2
 80020b0:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <unpack_cmd+0x160>)
 80020b4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <unpack_cmd+0x160>)
 80020ba:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80020be:	2110      	movs	r1, #16
 80020c0:	eef0 0a47 	vmov.f32	s1, s14
 80020c4:	eeb0 0a67 	vmov.f32	s0, s15
 80020c8:	6978      	ldr	r0, [r7, #20]
 80020ca:	f003 faf6 	bl	80056ba <uint_to_float>
 80020ce:	eef0 7a40 	vmov.f32	s15, s0
 80020d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d4:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <unpack_cmd+0x160>)
 80020da:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <unpack_cmd+0x160>)
 80020e0:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80020e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e6:	1d1c      	adds	r4, r3, #4
 80020e8:	210c      	movs	r1, #12
 80020ea:	eef0 0a47 	vmov.f32	s1, s14
 80020ee:	eeb0 0a67 	vmov.f32	s0, s15
 80020f2:	6938      	ldr	r0, [r7, #16]
 80020f4:	f003 fae1 	bl	80056ba <uint_to_float>
 80020f8:	eef0 7a40 	vmov.f32	s15, s0
 80020fc:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <unpack_cmd+0x160>)
 8002102:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002108:	f103 0408 	add.w	r4, r3, #8
 800210c:	210c      	movs	r1, #12
 800210e:	eef0 0a67 	vmov.f32	s1, s15
 8002112:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80021b0 <unpack_cmd+0x164>
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f003 facf 	bl	80056ba <uint_to_float>
 800211c:	eef0 7a40 	vmov.f32	s15, s0
 8002120:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <unpack_cmd+0x160>)
 8002126:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800212a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800212c:	f103 040c 	add.w	r4, r3, #12
 8002130:	210c      	movs	r1, #12
 8002132:	eef0 0a67 	vmov.f32	s1, s15
 8002136:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80021b0 <unpack_cmd+0x164>
 800213a:	68b8      	ldr	r0, [r7, #8]
 800213c:	f003 fabd 	bl	80056ba <uint_to_float>
 8002140:	eef0 7a40 	vmov.f32	s15, s0
 8002144:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <unpack_cmd+0x160>)
 800214a:	edd3 7a03 	vldr	s15, [r3, #12]
 800214e:	eeb1 7a67 	vneg.f32	s14, s15
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <unpack_cmd+0x160>)
 8002154:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <unpack_cmd+0x160>)
 800215e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002162:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <unpack_cmd+0x160>)
 8002168:	ed93 7a03 	vldr	s14, [r3, #12]
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <unpack_cmd+0x160>)
 800216e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <unpack_cmd+0x160>)
 8002178:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002182:	f103 0410 	add.w	r4, r3, #16
 8002186:	210c      	movs	r1, #12
 8002188:	eef0 0a67 	vmov.f32	s1, s15
 800218c:	eeb0 0a66 	vmov.f32	s0, s13
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f003 fa92 	bl	80056ba <uint_to_float>
 8002196:	eef0 7a40 	vmov.f32	s15, s0
 800219a:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021a8:	b004      	add	sp, #16
 80021aa:	4770      	bx	lr
 80021ac:	2000033c 	.word	0x2000033c
 80021b0:	00000000 	.word	0x00000000

080021b4 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80021c6:	2200      	movs	r2, #0
 80021c8:	2110      	movs	r1, #16
 80021ca:	480f      	ldr	r0, [pc, #60]	; (8002208 <drv_spi_write+0x54>)
 80021cc:	f006 f9fe 	bl	80085cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	1c9a      	adds	r2, r3, #2
 80021d6:	2364      	movs	r3, #100	; 0x64
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	480b      	ldr	r0, [pc, #44]	; (800220c <drv_spi_write+0x58>)
 80021de:	f007 f8d0 	bl	8009382 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80021e2:	bf00      	nop
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <drv_spi_write+0x58>)
 80021e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d0f9      	beq.n	80021e4 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80021f0:	2201      	movs	r2, #1
 80021f2:	2110      	movs	r1, #16
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <drv_spi_write+0x54>)
 80021f6:	f006 f9e9 	bl	80085cc <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	885b      	ldrh	r3, [r3, #2]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40020000 	.word	0x40020000
 800220c:	200094c0 	.word	0x200094c0

08002210 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	463b      	mov	r3, r7
 8002218:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 800221c:	463b      	mov	r3, r7
 800221e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ffc6 	bl	80021b4 <drv_spi_write>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	463b      	mov	r3, r7
 800223a:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 800223e:	463b      	mov	r3, r7
 8002240:	f248 0101 	movw	r1, #32769	; 0x8001
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ffb5 	bl	80021b4 <drv_spi_write>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002262:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	02db      	lsls	r3, r3, #11
 8002268:	b21b      	sxth	r3, r3
 800226a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002272:	b21b      	sxth	r3, r3
 8002274:	b29a      	uxth	r2, r3
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff99 	bl	80021b4 <drv_spi_write>
 8002282:	4603      	mov	r3, r0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	f107 0408 	add.w	r4, r7, #8
 8002296:	e884 0003 	stmia.w	r4, {r0, r1}
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	02db      	lsls	r3, r3, #11
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff7d 	bl	80021b4 <drv_spi_write>
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}

080022c2 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80022c2:	b590      	push	{r4, r7, lr}
 80022c4:	b087      	sub	sp, #28
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	f107 0408 	add.w	r4, r7, #8
 80022cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	025b      	lsls	r3, r3, #9
 80022d8:	b21b      	sxth	r3, r3
 80022da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022de:	b21a      	sxth	r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	01db      	lsls	r3, r3, #7
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b21a      	sxth	r2, r3
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	b21b      	sxth	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b21a      	sxth	r2, r3
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21a      	sxth	r2, r3
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	b21b      	sxth	r3, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	b21a      	sxth	r2, r3
 800231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	b21b      	sxth	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b21a      	sxth	r2, r3
 8002326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002328:	b21b      	sxth	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b21b      	sxth	r3, r3
 800232e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002330:	8afa      	ldrh	r2, [r7, #22]
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff3b 	bl	80021b4 <drv_spi_write>
}
 800233e:	bf00      	nop
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}

08002346 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8002346:	b590      	push	{r4, r7, lr}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	f107 0408 	add.w	r4, r7, #8
 8002350:	e884 0003 	stmia.w	r4, {r0, r1}
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	b21b      	sxth	r3, r3
 800235e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002362:	b21a      	sxth	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21b      	sxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b21a      	sxth	r2, r3
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	b21b      	sxth	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	b21a      	sxth	r2, r3
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21a      	sxth	r2, r3
 8002382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21b      	sxth	r3, r3
 800238a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800238c:	8afa      	ldrh	r2, [r7, #22]
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff0d 	bl	80021b4 <drv_spi_write>
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}

080023a2 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80023a2:	b590      	push	{r4, r7, lr}
 80023a4:	b087      	sub	sp, #28
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	f107 0408 	add.w	r4, r7, #8
 80023ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80023be:	b21a      	sxth	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	025b      	lsls	r3, r3, #9
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	019b      	lsls	r3, r3, #6
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b21a      	sxth	r2, r3
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	015b      	lsls	r3, r3, #5
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	b21b      	sxth	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b21a      	sxth	r2, r3
 8002406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002408:	b21b      	sxth	r3, r3
 800240a:	4313      	orrs	r3, r2
 800240c:	b21b      	sxth	r3, r3
 800240e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002410:	8afa      	ldrh	r2, [r7, #22]
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fecb 	bl	80021b4 <drv_spi_write>
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}

08002426 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	463b      	mov	r3, r7
 800242e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8002432:	2202      	movs	r2, #2
 8002434:	463b      	mov	r3, r7
 8002436:	e893 0003 	ldmia.w	r3, {r0, r1}
 800243a:	f7ff ff0b 	bl	8002254 <drv_read_register>
 800243e:	4603      	mov	r3, r0
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8002446:	89fb      	ldrh	r3, [r7, #14]
 8002448:	2202      	movs	r2, #2
 800244a:	4639      	mov	r1, r7
 800244c:	c903      	ldmia	r1, {r0, r1}
 800244e:	f7ff ff1d 	bl	800228c <drv_write_register>
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	463b      	mov	r3, r7
 8002462:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8002466:	2202      	movs	r2, #2
 8002468:	463b      	mov	r3, r7
 800246a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800246e:	f7ff fef1 	bl	8002254 <drv_read_register>
 8002472:	4603      	mov	r3, r0
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	2202      	movs	r2, #2
 800247e:	4639      	mov	r1, r7
 8002480:	c903      	ldmia	r1, {r0, r1}
 8002482:	f7ff ff03 	bl	800228c <drv_write_register>
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <drv_check_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_check_faults(DRVStruct drv, FSMStruct* fsmstate){
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	f107 0308 	add.w	r3, r7, #8
 800249a:	e883 0003 	stmia.w	r3, {r0, r1}
 800249e:	607a      	str	r2, [r7, #4]
    uint16_t val1 = drv_read_FSR1(drv);
 80024a0:	f107 0308 	add.w	r3, r7, #8
 80024a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024a8:	f7ff feb2 	bl	8002210 <drv_read_FSR1>
 80024ac:	4603      	mov	r3, r0
 80024ae:	82fb      	strh	r3, [r7, #22]
    uint16_t val2 = drv_read_FSR2(drv);
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024b8:	f7ff febb 	bl	8002232 <drv_read_FSR2>
 80024bc:	4603      	mov	r3, r0
 80024be:	82bb      	strh	r3, [r7, #20]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 80024c0:	8afb      	ldrh	r3, [r7, #22]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <drv_check_faults+0x40>
 80024ca:	485b      	ldr	r0, [pc, #364]	; (8002638 <drv_check_faults+0x1a8>)
 80024cc:	f009 fff0 	bl	800c4b0 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 80024d0:	8afb      	ldrh	r3, [r7, #22]
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <drv_check_faults+0x50>
 80024da:	4858      	ldr	r0, [pc, #352]	; (800263c <drv_check_faults+0x1ac>)
 80024dc:	f009 ffe8 	bl	800c4b0 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 80024e0:	8afb      	ldrh	r3, [r7, #22]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <drv_check_faults+0x60>
 80024ea:	4855      	ldr	r0, [pc, #340]	; (8002640 <drv_check_faults+0x1b0>)
 80024ec:	f009 ffe0 	bl	800c4b0 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <drv_check_faults+0x70>
 80024fa:	4852      	ldr	r0, [pc, #328]	; (8002644 <drv_check_faults+0x1b4>)
 80024fc:	f009 ffd8 	bl	800c4b0 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8002500:	8afb      	ldrh	r3, [r7, #22]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <drv_check_faults+0x80>
 800250a:	484f      	ldr	r0, [pc, #316]	; (8002648 <drv_check_faults+0x1b8>)
 800250c:	f009 ffd0 	bl	800c4b0 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8002510:	8afb      	ldrh	r3, [r7, #22]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <drv_check_faults+0x90>
 800251a:	484c      	ldr	r0, [pc, #304]	; (800264c <drv_check_faults+0x1bc>)
 800251c:	f009 ffc8 	bl	800c4b0 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8002520:	8afb      	ldrh	r3, [r7, #22]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <drv_check_faults+0xa0>
 800252a:	4849      	ldr	r0, [pc, #292]	; (8002650 <drv_check_faults+0x1c0>)
 800252c:	f009 ffc0 	bl	800c4b0 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8002530:	8afb      	ldrh	r3, [r7, #22]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <drv_check_faults+0xb0>
 800253a:	4846      	ldr	r0, [pc, #280]	; (8002654 <drv_check_faults+0x1c4>)
 800253c:	f009 ffb8 	bl	800c4b0 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8002540:	8afb      	ldrh	r3, [r7, #22]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <drv_check_faults+0xc0>
 800254a:	4843      	ldr	r0, [pc, #268]	; (8002658 <drv_check_faults+0x1c8>)
 800254c:	f009 ffb0 	bl	800c4b0 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8002550:	8afb      	ldrh	r3, [r7, #22]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <drv_check_faults+0xd0>
 800255a:	4840      	ldr	r0, [pc, #256]	; (800265c <drv_check_faults+0x1cc>)
 800255c:	f009 ffa8 	bl	800c4b0 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002560:	8afb      	ldrh	r3, [r7, #22]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <drv_check_faults+0xe0>
 800256a:	483d      	ldr	r0, [pc, #244]	; (8002660 <drv_check_faults+0x1d0>)
 800256c:	f009 ffa0 	bl	800c4b0 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8002570:	8abb      	ldrh	r3, [r7, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <drv_check_faults+0xf0>
 800257a:	483a      	ldr	r0, [pc, #232]	; (8002664 <drv_check_faults+0x1d4>)
 800257c:	f009 ff98 	bl	800c4b0 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8002580:	8abb      	ldrh	r3, [r7, #20]
 8002582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <drv_check_faults+0x100>
 800258a:	4837      	ldr	r0, [pc, #220]	; (8002668 <drv_check_faults+0x1d8>)
 800258c:	f009 ff90 	bl	800c4b0 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8002590:	8abb      	ldrh	r3, [r7, #20]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <drv_check_faults+0x110>
 800259a:	4834      	ldr	r0, [pc, #208]	; (800266c <drv_check_faults+0x1dc>)
 800259c:	f009 ff88 	bl	800c4b0 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 80025a0:	8abb      	ldrh	r3, [r7, #20]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <drv_check_faults+0x120>
 80025aa:	4831      	ldr	r0, [pc, #196]	; (8002670 <drv_check_faults+0x1e0>)
 80025ac:	f009 ff80 	bl	800c4b0 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80025b0:	8abb      	ldrh	r3, [r7, #20]
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <drv_check_faults+0x130>
 80025ba:	482e      	ldr	r0, [pc, #184]	; (8002674 <drv_check_faults+0x1e4>)
 80025bc:	f009 ff78 	bl	800c4b0 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 80025c0:	8abb      	ldrh	r3, [r7, #20]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <drv_check_faults+0x140>
 80025ca:	482b      	ldr	r0, [pc, #172]	; (8002678 <drv_check_faults+0x1e8>)
 80025cc:	f009 ff70 	bl	800c4b0 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 80025d0:	8abb      	ldrh	r3, [r7, #20]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <drv_check_faults+0x150>
 80025da:	4828      	ldr	r0, [pc, #160]	; (800267c <drv_check_faults+0x1ec>)
 80025dc:	f009 ff68 	bl	800c4b0 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 80025e0:	8abb      	ldrh	r3, [r7, #20]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <drv_check_faults+0x160>
 80025ea:	4825      	ldr	r0, [pc, #148]	; (8002680 <drv_check_faults+0x1f0>)
 80025ec:	f009 ff60 	bl	800c4b0 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 80025f0:	8abb      	ldrh	r3, [r7, #20]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <drv_check_faults+0x170>
 80025fa:	4822      	ldr	r0, [pc, #136]	; (8002684 <drv_check_faults+0x1f4>)
 80025fc:	f009 ff58 	bl	800c4b0 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8002600:	8abb      	ldrh	r3, [r7, #20]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <drv_check_faults+0x180>
 800260a:	481f      	ldr	r0, [pc, #124]	; (8002688 <drv_check_faults+0x1f8>)
 800260c:	f009 ff50 	bl	800c4b0 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002610:	8abb      	ldrh	r3, [r7, #20]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <drv_check_faults+0x190>
 800261a:	481c      	ldr	r0, [pc, #112]	; (800268c <drv_check_faults+0x1fc>)
 800261c:	f009 ff48 	bl	800c4b0 <iprintf>

    // TODO: store fault values for using in fault mode?
    if(val1 & (1<<10)){
 8002620:	8afb      	ldrh	r3, [r7, #22]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <drv_check_faults+0x1a0>
    	fsmstate->next_state = FAULT_MODE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2207      	movs	r2, #7
 800262e:	705a      	strb	r2, [r3, #1]
    }

}
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	080106d0 	.word	0x080106d0
 800263c:	080106dc 	.word	0x080106dc
 8002640:	080106e8 	.word	0x080106e8
 8002644:	080106f0 	.word	0x080106f0
 8002648:	080106f8 	.word	0x080106f8
 800264c:	08010700 	.word	0x08010700
 8002650:	0801070c 	.word	0x0801070c
 8002654:	08010718 	.word	0x08010718
 8002658:	08010724 	.word	0x08010724
 800265c:	08010730 	.word	0x08010730
 8002660:	0801073c 	.word	0x0801073c
 8002664:	08010748 	.word	0x08010748
 8002668:	08010750 	.word	0x08010750
 800266c:	08010758 	.word	0x08010758
 8002670:	08010760 	.word	0x08010760
 8002674:	08010768 	.word	0x08010768
 8002678:	08010770 	.word	0x08010770
 800267c:	0801077c 	.word	0x0801077c
 8002680:	08010788 	.word	0x08010788
 8002684:	08010794 	.word	0x08010794
 8002688:	080107a0 	.word	0x080107a0
 800268c:	080107ac 	.word	0x080107ac

08002690 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b07      	cmp	r3, #7
 800269e:	d901      	bls.n	80026a4 <flash_writer_init+0x14>
 80026a0:	2307      	movs	r3, #7
 80026a2:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <flash_writer_init+0x38>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	20000000 	.word	0x20000000

080026cc <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 80026d4:	f003 fcfc 	bl	80060d0 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80026d8:	20f1      	movs	r0, #241	; 0xf1
 80026da:	f003 fdb5 	bl	8006248 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <flash_writer_open+0x34>)
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fd18 	bl	8006120 <FLASH_EraseSector>
    fw->ready = true;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000020 	.word	0x20000020

08002704 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	1d3c      	adds	r4, r7, #4
 800270c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002710:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 8002712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002714:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fd5c 	bl	80061e0 <FLASH_ProgramWord>
}
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}

08002730 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	f107 040c 	add.w	r4, r7, #12
 800273a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fd43 	bl	80061e0 <FLASH_ProgramWord>
}
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}

08002762 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 800276a:	f003 fcc9 	bl	8006100 <FLASH_Lock>
    fw->ready = false;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 800277c:	b490      	push	{r4, r7}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	1d3c      	adds	r4, r7, #4
 8002784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002788:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <flash_read_int+0x28>)
 800278e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	681b      	ldr	r3, [r3, #0]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc90      	pop	{r4, r7}
 80027a2:	4770      	bx	lr
 80027a4:	20000000 	.word	0x20000000

080027a8 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80027a8:	b490      	push	{r4, r7}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	1d3c      	adds	r4, r7, #4
 80027b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027b4:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <flash_read_float+0x30>)
 80027ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ee07 3a90 	vmov	s15, r3
}
 80027ca:	eeb0 0a67 	vmov.f32	s0, s15
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc90      	pop	{r4, r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000000 	.word	0x20000000

080027dc <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f4:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80027fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002804:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800280e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002828:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800282c:	4b3b      	ldr	r3, [pc, #236]	; (800291c <set_dtc+0x140>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d136      	bne.n	80028a2 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002834:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <set_dtc+0x144>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002842:	edd7 7a05 	vldr	s15, [r7, #20]
 8002846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284a:	4b35      	ldr	r3, [pc, #212]	; (8002920 <set_dtc+0x144>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002852:	ee17 2a90 	vmov	r2, s15
 8002856:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <set_dtc+0x144>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002866:	edd7 7a04 	vldr	s15, [r7, #16]
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <set_dtc+0x144>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002876:	ee17 2a90 	vmov	r2, s15
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800287c:	4b28      	ldr	r3, [pc, #160]	; (8002920 <set_dtc+0x144>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800288a:	edd7 7a03 	vldr	s15, [r7, #12]
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <set_dtc+0x144>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800289a:	ee17 2a90 	vmov	r2, s15
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80028a0:	e035      	b.n	800290e <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <set_dtc+0x144>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80028b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <set_dtc+0x144>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c0:	ee17 2a90 	vmov	r2, s15
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <set_dtc+0x144>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <set_dtc+0x144>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e4:	ee17 2a90 	vmov	r2, s15
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <set_dtc+0x144>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <set_dtc+0x144>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002908:	ee17 2a90 	vmov	r2, s15
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000043c 	.word	0x2000043c
 8002920:	20009574 	.word	0x20009574

08002924 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <analog_sample+0xec>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10e      	bne.n	8002952 <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002934:	4837      	ldr	r0, [pc, #220]	; (8002a14 <analog_sample+0xf0>)
 8002936:	f004 fc82 	bl	800723e <HAL_ADC_GetValue>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002942:	4835      	ldr	r0, [pc, #212]	; (8002a18 <analog_sample+0xf4>)
 8002944:	f004 fc7b 	bl	800723e <HAL_ADC_GetValue>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	e00d      	b.n	800296e <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002952:	4831      	ldr	r0, [pc, #196]	; (8002a18 <analog_sample+0xf4>)
 8002954:	f004 fc73 	bl	800723e <HAL_ADC_GetValue>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002960:	482c      	ldr	r0, [pc, #176]	; (8002a14 <analog_sample+0xf0>)
 8002962:	f004 fc6c 	bl	800723e <HAL_ADC_GetValue>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 800296e:	4829      	ldr	r0, [pc, #164]	; (8002a14 <analog_sample+0xf0>)
 8002970:	f004 fb08 	bl	8006f84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8002974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002978:	4826      	ldr	r0, [pc, #152]	; (8002a14 <analog_sample+0xf0>)
 800297a:	f004 fbd5 	bl	8007128 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 800297e:	4827      	ldr	r0, [pc, #156]	; (8002a1c <analog_sample+0xf8>)
 8002980:	f004 fc5d 	bl	800723e <HAL_ADC_GetValue>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002998:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002a20 <analog_sample+0xfc>
 800299c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80029f4:	eeb1 7a67 	vneg.f32	s14, s15
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80029fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2000043c 	.word	0x2000043c
 8002a14:	2000023c 	.word	0x2000023c
 8002a18:	20000284 	.word	0x20000284
 8002a1c:	200002cc 	.word	0x200002cc
 8002a20:	3c533318 	.word	0x3c533318

08002a24 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a2e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a32:	ed87 1a03 	vstr	s2, [r7, #12]
 8002a36:	60b8      	str	r0, [r7, #8]
 8002a38:	6079      	str	r1, [r7, #4]
 8002a3a:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002a3c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a40:	f002 fea8 	bl	8005794 <cos_lut>
 8002a44:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002a48:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a4c:	f002 fe68 	bl	8005720 <sin_lut>
 8002a50:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 8002a54:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a60:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002a76:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a7a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002b24 <abc+0x100>
 8002a7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a86:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002a8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a9e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002b28 <abc+0x104>
 8002aa2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002aa6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aaa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002aae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ab2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ab6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002acc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b28 <abc+0x104>
 8002ad0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ad4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002adc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aec:	edd7 7a07 	vldr	s15, [r7, #28]
 8002af0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002b24 <abc+0x100>
 8002af4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002af8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002afc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b00:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	edc3 7a00 	vstr	s15, [r3]
    }
 8002b1a:	bf00      	nop
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	3f5db3d7 	.word	0x3f5db3d7
 8002b28:	bf5db3d7 	.word	0xbf5db3d7

08002b2c <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	ed87 0a05 	vstr	s0, [r7, #20]
 8002b36:	edc7 0a04 	vstr	s1, [r7, #16]
 8002b3a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002b3e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002b46:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b4a:	f002 fe23 	bl	8005794 <cos_lut>
 8002b4e:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002b52:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b56:	f002 fde3 	bl	8005720 <sin_lut>
 8002b5a:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002b5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b62:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b6e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002c40 <dq0+0x114>
 8002b72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b76:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b7a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b96:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002c44 <dq0+0x118>
 8002b9a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ba2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002ba6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002baa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c48 <dq0+0x11c>
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002bc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bcc:	eeb1 7a67 	vneg.f32	s14, s15
 8002bd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bdc:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002c44 <dq0+0x118>
 8002be0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002be4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002be8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002bec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002bf0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c00:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c04:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002c40 <dq0+0x114>
 8002c08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c28:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c48 <dq0+0x11c>
 8002c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	edc3 7a00 	vstr	s15, [r3]

    }
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	3f5db3d7 	.word	0x3f5db3d7
 8002c44:	bf5db3d7 	.word	0xbf5db3d7
 8002c48:	3f2aaaab 	.word	0x3f2aaaab

08002c4c <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	ed2d 8b02 	vpush	{d8}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	ed87 0a07 	vstr	s0, [r7, #28]
 8002c5a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002c5e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002c62:	edc7 1a04 	vstr	s3, [r7, #16]
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002c6c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002c70:	edd7 0a05 	vldr	s1, [r7, #20]
 8002c74:	ed97 0a06 	vldr	s0, [r7, #24]
 8002c78:	f002 fc6f 	bl	800555a <fminf3>
 8002c7c:	eeb0 8a40 	vmov.f32	s16, s0
 8002c80:	ed97 1a04 	vldr	s2, [r7, #16]
 8002c84:	edd7 0a05 	vldr	s1, [r7, #20]
 8002c88:	ed97 0a06 	vldr	s0, [r7, #24]
 8002c8c:	f002 fc31 	bl	80054f2 <fmaxf3>
 8002c90:	eef0 7a40 	vmov.f32	s15, s0
 8002c94:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002c98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <svm+0x160>)
 8002ca6:	623b      	str	r3, [r7, #32]
//    // Dead-time compensation
//	float u_comp = DTC_COMP*(-(i_sector==4) + (i_sector==3));
//	float v_comp = DTC_COMP*(-(i_sector==2) + (i_sector==5));
//	float w_comp = DTC_COMP*((i_sector==6) - (i_sector==1));

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002ca8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002db0 <svm+0x164>
 8002cc0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ccc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd4:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002db4 <svm+0x168>
 8002cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cdc:	f002 fbd1 	bl	8005482 <fast_fmaxf>
 8002ce0:	eef0 7a40 	vmov.f32	s15, s0
 8002ce4:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002db8 <svm+0x16c>
 8002ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cec:	f002 fbe5 	bl	80054ba <fast_fminf>
 8002cf0:	eef0 7a40 	vmov.f32	s15, s0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002db0 <svm+0x164>
 8002d12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d16:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d26:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002db4 <svm+0x168>
 8002d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d2e:	f002 fba8 	bl	8005482 <fast_fmaxf>
 8002d32:	eef0 7a40 	vmov.f32	s15, s0
 8002d36:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002db8 <svm+0x16c>
 8002d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3e:	f002 fbbc 	bl	80054ba <fast_fminf>
 8002d42:	eef0 7a40 	vmov.f32	s15, s0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002d4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d60:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002db0 <svm+0x164>
 8002d64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d68:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d70:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002db4 <svm+0x168>
 8002d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d80:	f002 fb7f 	bl	8005482 <fast_fmaxf>
 8002d84:	eef0 7a40 	vmov.f32	s15, s0
 8002d88:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002db8 <svm+0x16c>
 8002d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d90:	f002 fb93 	bl	80054ba <fast_fminf>
 8002d94:	eef0 7a40 	vmov.f32	s15, s0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	edc3 7a00 	vstr	s15, [r3]
//	*dtc_v = fminf(fmaxf((v/v_bus + .5f), DTC_MIN), DTC_MAX);
//	*dtc_w = fminf(fmaxf((w/v_bus + .5f), DTC_MIN), DTC_MAX);
//	*/


    }
 8002d9e:	bf00      	nop
 8002da0:	3728      	adds	r7, #40	; 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	ecbd 8b02 	vpop	{d8}
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	3ef0a3d7 	.word	0x3ef0a3d7
 8002db0:	3f933333 	.word	0x3f933333
 8002db4:	00000000 	.word	0x00000000
 8002db8:	3f70a3d7 	.word	0x3f70a3d7

08002dbc <zero_current>:

void zero_current(ControllerStruct *controller){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd0:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fcf6 	bl	80027dc <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e00f      	b.n	8002e16 <zero_current+0x5a>
    	analog_sample(controller);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fd94 	bl	8002924 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4413      	add	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	dbeb      	blt.n	8002df6 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_b_offset = adc_b_offset/n;
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	fb92 f2f3 	sdiv	r2, r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <init_controller_params+0x138>)
 8002e50:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->ki_q = KI_Q;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a49      	ldr	r2, [pc, #292]	; (8002f7c <init_controller_params+0x138>)
 8002e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    controller->k_d = K_SCALE*I_BW;
 8002e5a:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <init_controller_params+0x13c>)
 8002e5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e60:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002f84 <init_controller_params+0x140>
 8002e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->k_q = K_SCALE*I_BW;
 8002e6e:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <init_controller_params+0x13c>)
 8002e70:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e74:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002f84 <init_controller_params+0x140>
 8002e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002e82:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <init_controller_params+0x13c>)
 8002e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e88:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002f88 <init_controller_params+0x144>
 8002e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e90:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002f8c <init_controller_params+0x148>
 8002e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
    controller->ki_fw = .1f*controller->ki_d;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002ebc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002f90 <init_controller_params+0x14c>
 8002ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->phase_order = PHASE_ORDER;
 8002eca:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <init_controller_params+0x150>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <init_controller_params+0x13c>)
 8002ed6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eda:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f98 <init_controller_params+0x154>
 8002ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	d803      	bhi.n	8002ef0 <init_controller_params+0xac>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a2c      	ldr	r2, [pc, #176]	; (8002f9c <init_controller_params+0x158>)
 8002eec:	671a      	str	r2, [r3, #112]	; 0x70
 8002eee:	e002      	b.n	8002ef6 <init_controller_params+0xb2>
    else{controller->i_scale = 2.0f*I_SCALE;}
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <init_controller_params+0x15c>)
 8002ef4:	671a      	str	r2, [r3, #112]	; 0x70
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e037      	b.n	8002f6c <init_controller_params+0x128>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f06:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002fa4 <init_controller_params+0x160>
 8002f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002fa8 <init_controller_params+0x164>
 8002f12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f16:	ee16 0a90 	vmov	r0, s13
 8002f1a:	f7fd fb35 	bl	8000588 <__aeabi_f2d>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	ec43 2b10 	vmov	d0, r2, r3
 8002f26:	f00d f80b 	bl	800ff40 <exp>
 8002f2a:	ec51 0b10 	vmov	r0, r1, d0
 8002f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <init_controller_params+0x168>)
 8002f34:	f7fd fb80 	bl	8000638 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <init_controller_params+0x16c>)
 8002f46:	f7fd f9c1 	bl	80002cc <__adddf3>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fe69 	bl	8000c28 <__aeabi_d2f>
 8002f56:	4601      	mov	r1, r0
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	333c      	adds	r3, #60	; 0x3c
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f70:	ddc4      	ble.n	8002efc <init_controller_params+0xb8>
    }

    }
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	3d18c7e3 	.word	0x3d18c7e3
 8002f80:	2000033c 	.word	0x2000033c
 8002f84:	390b75ea 	.word	0x390b75ea
 8002f88:	3851b717 	.word	0x3851b717
 8002f8c:	40c90fdb 	.word	0x40c90fdb
 8002f90:	3dcccccd 	.word	0x3dcccccd
 8002f94:	2000043c 	.word	0x2000043c
 8002f98:	42200000 	.word	0x42200000
 8002f9c:	3ca4ffff 	.word	0x3ca4ffff
 8002fa0:	3d24ffff 	.word	0x3d24ffff
 8002fa4:	bc000000 	.word	0xbc000000
 8002fa8:	3d03126f 	.word	0x3d03126f
 8002fac:	3ff33333 	.word	0x3ff33333
 8002fb0:	3ff00000 	.word	0x3ff00000

08002fb4 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <reset_foc+0xe4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	ee07 3a90 	vmov	s15, r3
 8002fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <reset_foc+0xe4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fda:	ee17 2a90 	vmov	r2, s15
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <reset_foc+0xe4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <reset_foc+0xe4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffe:	ee17 2a90 	vmov	r2, s15
 8003002:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <reset_foc+0xe4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <reset_foc+0xe4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003022:	ee17 2a90 	vmov	r2, s15
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_q_des = 0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    controller->i_d = 0;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->d_int = 0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->v_q = 0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    controller->otw_flag = 0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    }
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20009574 	.word	0x20009574

0800309c <commutate>:
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);


}
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80030bc:	4bd7      	ldr	r3, [pc, #860]	; (800341c <commutate+0x380>)
 80030be:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80030c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	edd3 6a05 	vldr	s13, [r3, #20]
 80030d2:	4bd2      	ldr	r3, [pc, #840]	; (800341c <commutate+0x380>)
 80030d4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80030d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edd3 6a06 	vldr	s13, [r3, #24]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	ed93 6a07 	vldr	s12, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3340      	adds	r3, #64	; 0x40
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	eef0 1a46 	vmov.f32	s3, s12
 800310c:	eeb0 1a66 	vmov.f32	s2, s13
 8003110:	eef0 0a47 	vmov.f32	s1, s14
 8003114:	eeb0 0a67 	vmov.f32	s0, s15
 8003118:	f7ff fd08 	bl	8002b2c <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003122:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003420 <commutate+0x384>
 8003126:	ee27 7a87 	vmul.f32	s14, s15, s14
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003130:	eddf 6abc 	vldr	s13, [pc, #752]	; 8003424 <commutate+0x388>
 8003134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003148:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003420 <commutate+0x384>
 800314c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003156:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8003424 <commutate+0x388>
 800315a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800316e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8003420 <commutate+0x384>
 8003172:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	edd3 7a08 	vldr	s15, [r3, #32]
 800317c:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8003424 <commutate+0x388>
 8003180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003194:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003428 <commutate+0x38c>
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800342c <commutate+0x390>
 80031a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003430 <commutate+0x394>
 80031a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80031b2:	4b9a      	ldr	r3, [pc, #616]	; (800341c <commutate+0x380>)
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80031ce:	eeb0 0a67 	vmov.f32	s0, s15
 80031d2:	4610      	mov	r0, r2
 80031d4:	f002 f9f5 	bl	80055c2 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80031e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e8:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fc:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003212:	edd7 7a07 	vldr	s15, [r7, #28]
 8003216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003224:	edd7 7a05 	vldr	s15, [r7, #20]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800323e:	eef0 0a47 	vmov.f32	s1, s14
 8003242:	eeb0 0a67 	vmov.f32	s0, s15
 8003246:	f002 f938 	bl	80054ba <fast_fminf>
 800324a:	eeb0 7a40 	vmov.f32	s14, s0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003254:	eef1 7a67 	vneg.f32	s15, s15
 8003258:	eef0 0a67 	vmov.f32	s1, s15
 800325c:	eeb0 0a47 	vmov.f32	s0, s14
 8003260:	f002 f90f 	bl	8005482 <fast_fmaxf>
 8003264:	eef0 7a40 	vmov.f32	s15, s0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003280:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003284:	edd7 7a07 	vldr	s15, [r7, #28]
 8003288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80032a2:	eef0 0a47 	vmov.f32	s1, s14
 80032a6:	eeb0 0a67 	vmov.f32	s0, s15
 80032aa:	f002 f906 	bl	80054ba <fast_fminf>
 80032ae:	eeb0 7a40 	vmov.f32	s14, s0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80032b8:	eef1 7a67 	vneg.f32	s15, s15
 80032bc:	eef0 0a67 	vmov.f32	s1, s15
 80032c0:	eeb0 0a47 	vmov.f32	s0, s14
 80032c4:	f002 f8dd 	bl	8005482 <fast_fmaxf>
 80032c8:	eef0 7a40 	vmov.f32	s15, s0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80032de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80032ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f6:	eeb0 0a67 	vmov.f32	s0, s15
 80032fa:	f00c fe89 	bl	8010010 <sqrtf>
 80032fe:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003308:	edd7 7a06 	vldr	s15, [r7, #24]
 800330c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800331a:	edd7 7a04 	vldr	s15, [r7, #16]
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800333a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800333e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800335c:	eef0 0a47 	vmov.f32	s1, s14
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	f002 f8a9 	bl	80054ba <fast_fminf>
 8003368:	eeb0 7a40 	vmov.f32	s14, s0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003372:	eef1 7a67 	vneg.f32	s15, s15
 8003376:	eef0 0a67 	vmov.f32	s1, s15
 800337a:	eeb0 0a47 	vmov.f32	s0, s14
 800337e:	f002 f880 	bl	8005482 <fast_fmaxf>
 8003382:	eef0 7a40 	vmov.f32	s15, s0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80033a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b0:	eeb0 0a67 	vmov.f32	s0, s15
 80033b4:	f00c fe2c 	bl	8010010 <sqrtf>
 80033b8:	eef0 7a40 	vmov.f32	s15, s0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80033c8:	edd7 0a03 	vldr	s1, [r7, #12]
 80033cc:	eeb0 0a67 	vmov.f32	s0, s15
 80033d0:	f002 f873 	bl	80054ba <fast_fminf>
 80033d4:	eeb0 7a40 	vmov.f32	s14, s0
 80033d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033dc:	eef1 7a67 	vneg.f32	s15, s15
 80033e0:	eef0 0a67 	vmov.f32	s1, s15
 80033e4:	eeb0 0a47 	vmov.f32	s0, s14
 80033e8:	f002 f84b 	bl	8005482 <fast_fmaxf>
 80033ec:	eef0 7a40 	vmov.f32	s15, s0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003408:	eeb0 0a67 	vmov.f32	s0, s15
 800340c:	4610      	mov	r0, r2
 800340e:	f002 f8d8 	bl	80055c2 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	e00d      	b.n	8003438 <commutate+0x39c>
 800341c:	2000033c 	.word	0x2000033c
 8003420:	3f733333 	.word	0x3f733333
 8003424:	3d4ccccd 	.word	0x3d4ccccd
 8003428:	3f933333 	.word	0x3f933333
 800342c:	3f70a3d7 	.word	0x3f70a3d7
 8003430:	3f13cd3a 	.word	0x3f13cd3a
 8003434:	389d4951 	.word	0x389d4951
 8003438:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800343c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003434 <commutate+0x398>
 8003440:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	336c      	adds	r3, #108	; 0x6c
 8003464:	461a      	mov	r2, r3
 8003466:	eeb0 1a66 	vmov.f32	s2, s13
 800346a:	eef0 0a47 	vmov.f32	s1, s14
 800346e:	eeb0 0a67 	vmov.f32	s0, s15
 8003472:	f7ff fad7 	bl	8002a24 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	461a      	mov	r2, r3
 80034a0:	eef0 1a46 	vmov.f32	s3, s12
 80034a4:	eeb0 1a66 	vmov.f32	s2, s13
 80034a8:	eef0 0a47 	vmov.f32	s1, s14
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	f7ff fbcc 	bl	8002c4c <svm>

       set_dtc(controller);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff f991 	bl	80027dc <set_dtc>

    }
 80034ba:	bf00      	nop
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop

080034c4 <torque_control>:


void torque_control(ControllerStruct *controller){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80034de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80034ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003502:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350e:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <torque_control+0xb0>)
 8003514:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003518:	4b16      	ldr	r3, [pc, #88]	; (8003574 <torque_control+0xb0>)
 800351a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	ed97 7a03 	vldr	s14, [r7, #12]
 8003526:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003530:	eef0 0a67 	vmov.f32	s1, s15
 8003534:	eeb0 0a66 	vmov.f32	s0, s13
 8003538:	f001 ffbf 	bl	80054ba <fast_fminf>
 800353c:	eeb0 7a40 	vmov.f32	s14, s0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8003546:	eef1 7a67 	vneg.f32	s15, s15
 800354a:	eef0 0a67 	vmov.f32	s1, s15
 800354e:	eeb0 0a47 	vmov.f32	s0, s14
 8003552:	f001 ff96 	bl	8005482 <fast_fmaxf>
 8003556:	eef0 7a40 	vmov.f32	s15, s0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    controller->i_d_des = 0.0f;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    }
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000033c 	.word	0x2000033c

08003578 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	controller->kp = 0;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kd = 0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->p_des = 0;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->v_des = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->i_q_des = 0;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	785a      	ldrb	r2, [r3, #1]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d00d      	beq.n	80035f8 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f9a7 	bl	8003930 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	785a      	ldrb	r2, [r3, #1]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f91a 	bl	800382c <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	f200 80fc 	bhi.w	80037fa <run_fsm+0x232>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <run_fsm+0x40>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	080037f5 	.word	0x080037f5
 800360c:	08003629 	.word	0x08003629
 8003610:	08003739 	.word	0x08003739
 8003614:	080037fb 	.word	0x080037fb
 8003618:	080037f5 	.word	0x080037f5
 800361c:	08003775 	.word	0x08003775
 8003620:	080037f5 	.word	0x080037f5
 8003624:	08003799 	.word	0x08003799
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003628:	4b76      	ldr	r3, [pc, #472]	; (8003804 <run_fsm+0x23c>)
 800362a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <run_fsm+0x7c>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8003632:	4b75      	ldr	r3, [pc, #468]	; (8003808 <run_fsm+0x240>)
 8003634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003638:	4a72      	ldr	r2, [pc, #456]	; (8003804 <run_fsm+0x23c>)
 800363a:	4973      	ldr	r1, [pc, #460]	; (8003808 <run_fsm+0x240>)
 800363c:	4873      	ldr	r0, [pc, #460]	; (800380c <run_fsm+0x244>)
 800363e:	f7fd fe9f 	bl	8001380 <order_phases>
				 // exit to menu state
				 fsmstate->next_state = MENU_MODE;
				 fsmstate->ready = 0;
			 }

			 break;
 8003642:	e0da      	b.n	80037fa <run_fsm+0x232>
			 else if(!comm_encoder_cal.done_cal){
 8003644:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <run_fsm+0x23c>)
 8003646:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <run_fsm+0x98>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800364e:	4b6e      	ldr	r3, [pc, #440]	; (8003808 <run_fsm+0x240>)
 8003650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003654:	4a6b      	ldr	r2, [pc, #428]	; (8003804 <run_fsm+0x23c>)
 8003656:	496c      	ldr	r1, [pc, #432]	; (8003808 <run_fsm+0x240>)
 8003658:	486c      	ldr	r0, [pc, #432]	; (800380c <run_fsm+0x244>)
 800365a:	f7fd ff99 	bl	8001590 <calibrate_encoder>
			 break;
 800365e:	e0cc      	b.n	80037fa <run_fsm+0x232>
				 if (comm_encoder_cal.valid_cal == 1){
 8003660:	4b68      	ldr	r3, [pc, #416]	; (8003804 <run_fsm+0x23c>)
 8003662:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003666:	2b01      	cmp	r3, #1
 8003668:	d15f      	bne.n	800372a <run_fsm+0x162>
					 E_ZERO = comm_encoder_cal.ezero;
 800366a:	4b66      	ldr	r3, [pc, #408]	; (8003804 <run_fsm+0x23c>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4a68      	ldr	r2, [pc, #416]	; (8003810 <run_fsm+0x248>)
 8003670:	61d3      	str	r3, [r2, #28]
					 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003672:	4b67      	ldr	r3, [pc, #412]	; (8003810 <run_fsm+0x248>)
 8003674:	69dc      	ldr	r4, [r3, #28]
 8003676:	4b65      	ldr	r3, [pc, #404]	; (800380c <run_fsm+0x244>)
 8003678:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800367c:	4b64      	ldr	r3, [pc, #400]	; (8003810 <run_fsm+0x248>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	425b      	negs	r3, r3
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	eddf 6a61 	vldr	s13, [pc, #388]	; 8003814 <run_fsm+0x24c>
 8003692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003696:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800369a:	eeb0 0a47 	vmov.f32	s0, s14
 800369e:	f00c fc97 	bl	800ffd0 <fmodf>
 80036a2:	eef0 7a40 	vmov.f32	s15, s0
 80036a6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003818 <run_fsm+0x250>
 80036aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ae:	ee17 0a90 	vmov	r0, s15
 80036b2:	f7fc ff69 	bl	8000588 <__aeabi_f2d>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4621      	mov	r1, r4
 80036bc:	4857      	ldr	r0, [pc, #348]	; (800381c <run_fsm+0x254>)
 80036be:	f008 fef7 	bl	800c4b0 <iprintf>
					 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80036c2:	4b52      	ldr	r3, [pc, #328]	; (800380c <run_fsm+0x244>)
 80036c4:	4a4f      	ldr	r2, [pc, #316]	; (8003804 <run_fsm+0x23c>)
 80036c6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80036ca:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80036ce:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80036d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d6:	4618      	mov	r0, r3
 80036d8:	f008 fa6a 	bl	800bbb0 <memcpy>
					 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80036dc:	4b4c      	ldr	r3, [pc, #304]	; (8003810 <run_fsm+0x248>)
 80036de:	4a49      	ldr	r2, [pc, #292]	; (8003804 <run_fsm+0x23c>)
 80036e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80036e4:	3320      	adds	r3, #32
 80036e6:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80036ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ee:	4618      	mov	r0, r3
 80036f0:	f008 fa5e 	bl	800bbb0 <memcpy>
					 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80036f4:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <run_fsm+0x258>)
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	9200      	str	r2, [sp, #0]
 80036fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036fc:	f002 fb61 	bl	8005dc2 <preference_writer_ready>
 8003700:	4603      	mov	r3, r0
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <run_fsm+0x14a>
 800370c:	4844      	ldr	r0, [pc, #272]	; (8003820 <run_fsm+0x258>)
 800370e:	f002 fb49 	bl	8005da4 <preference_writer_open>
					 preference_writer_flush(&prefs);
 8003712:	4843      	ldr	r0, [pc, #268]	; (8003820 <run_fsm+0x258>)
 8003714:	f002 fb62 	bl	8005ddc <preference_writer_flush>
					 preference_writer_close(&prefs);
 8003718:	4841      	ldr	r0, [pc, #260]	; (8003820 <run_fsm+0x258>)
 800371a:	f002 fbdd 	bl	8005ed8 <preference_writer_close>
					 preference_writer_load(prefs);
 800371e:	4b40      	ldr	r3, [pc, #256]	; (8003820 <run_fsm+0x258>)
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	9200      	str	r2, [sp, #0]
 8003724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003726:	f002 fb95 	bl	8005e54 <preference_writer_load>
				 fsmstate->next_state = MENU_MODE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	705a      	strb	r2, [r3, #1]
				 fsmstate->ready = 0;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	70da      	strb	r2, [r3, #3]
			 break;
 8003736:	e060      	b.n	80037fa <run_fsm+0x232>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8003738:	4b35      	ldr	r3, [pc, #212]	; (8003810 <run_fsm+0x248>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	dd0a      	ble.n	8003756 <run_fsm+0x18e>
 8003740:	4b31      	ldr	r3, [pc, #196]	; (8003808 <run_fsm+0x240>)
 8003742:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003746:	4b32      	ldr	r3, [pc, #200]	; (8003810 <run_fsm+0x248>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	429a      	cmp	r2, r3
 800374c:	dd03      	ble.n	8003756 <run_fsm+0x18e>
				 zero_commands(&controller);
 800374e:	482e      	ldr	r0, [pc, #184]	; (8003808 <run_fsm+0x240>)
 8003750:	f7ff ff12 	bl	8003578 <zero_commands>
 8003754:	e006      	b.n	8003764 <run_fsm+0x19c>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003756:	482c      	ldr	r0, [pc, #176]	; (8003808 <run_fsm+0x240>)
 8003758:	f7ff feb4 	bl	80034c4 <torque_control>
				 //field_weaken(&controller); // TODO: add field-weakening back at some point
				 commutate(&controller, &comm_encoder);
 800375c:	492b      	ldr	r1, [pc, #172]	; (800380c <run_fsm+0x244>)
 800375e:	482a      	ldr	r0, [pc, #168]	; (8003808 <run_fsm+0x240>)
 8003760:	f7ff fc9c 	bl	800309c <commutate>
			 }
			 controller.timeout ++;
 8003764:	4b28      	ldr	r3, [pc, #160]	; (8003808 <run_fsm+0x240>)
 8003766:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800376a:	3301      	adds	r3, #1
 800376c:	4a26      	ldr	r2, [pc, #152]	; (8003808 <run_fsm+0x240>)
 800376e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 break;
 8003772:	e042      	b.n	80037fa <run_fsm+0x232>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 if (fsmstate->print_iter == 800){
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800377c:	d106      	bne.n	800378c <run_fsm+0x1c4>
				 ps_print(&comm_encoder);
 800377e:	4823      	ldr	r0, [pc, #140]	; (800380c <run_fsm+0x244>)
 8003780:	f002 fa96 	bl	8005cb0 <ps_print>
				 fsmstate->print_iter = 0;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
			 } else {
				 fsmstate->print_iter +=1;
			 }
			 break;
 800378a:	e036      	b.n	80037fa <run_fsm+0x232>
				 fsmstate->print_iter +=1;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	605a      	str	r2, [r3, #4]
			 break;
 8003796:	e030      	b.n	80037fa <run_fsm+0x232>
			 break;

		 case FAULT_MODE:
			 // depending on fault, display different LED blink patterns

			 if((controller.loop_count%5000)==0){
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <run_fsm+0x240>)
 800379a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <run_fsm+0x25c>)
 80037a0:	fb83 1302 	smull	r1, r3, r3, r2
 80037a4:	12d9      	asrs	r1, r3, #11
 80037a6:	17d3      	asrs	r3, r2, #31
 80037a8:	1acb      	subs	r3, r1, r3
 80037aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <run_fsm+0x1fc>
				 HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80037b8:	2201      	movs	r2, #1
 80037ba:	2120      	movs	r1, #32
 80037bc:	481a      	ldr	r0, [pc, #104]	; (8003828 <run_fsm+0x260>)
 80037be:	f004 ff05 	bl	80085cc <HAL_GPIO_WritePin>
			 } else if ((controller.loop_count%5000)==2500){
				 HAL_GPIO_WritePin(LED, GPIO_PIN_RESET);
			 }

			 break;
 80037c2:	e019      	b.n	80037f8 <run_fsm+0x230>
			 } else if ((controller.loop_count%5000)==2500){
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <run_fsm+0x240>)
 80037c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <run_fsm+0x25c>)
 80037cc:	fb83 1302 	smull	r1, r3, r3, r2
 80037d0:	12d9      	asrs	r1, r3, #11
 80037d2:	17d3      	asrs	r3, r2, #31
 80037d4:	1acb      	subs	r3, r1, r3
 80037d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d107      	bne.n	80037f8 <run_fsm+0x230>
				 HAL_GPIO_WritePin(LED, GPIO_PIN_RESET);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2120      	movs	r1, #32
 80037ec:	480e      	ldr	r0, [pc, #56]	; (8003828 <run_fsm+0x260>)
 80037ee:	f004 feed 	bl	80085cc <HAL_GPIO_WritePin>
			 break;
 80037f2:	e001      	b.n	80037f8 <run_fsm+0x230>
			 break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <run_fsm+0x232>
			 break;
 80037f8:	bf00      	nop
	 }

 }
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
 8003802:	bf00      	nop
 8003804:	20000ec0 	.word	0x20000ec0
 8003808:	20000850 	.word	0x20000850
 800380c:	20000b5c 	.word	0x20000b5c
 8003810:	2000043c 	.word	0x2000043c
 8003814:	49000000 	.word	0x49000000
 8003818:	40c90fdb 	.word	0x40c90fdb
 800381c:	080107b8 	.word	0x080107b8
 8003820:	2000083c 	.word	0x2000083c
 8003824:	68db8bad 	.word	0x68db8bad
 8003828:	40020800 	.word	0x40020800

0800382c <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b07      	cmp	r3, #7
 800383a:	d865      	bhi.n	8003908 <fsm_enter_state+0xdc>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <fsm_enter_state+0x18>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003865 	.word	0x08003865
 8003848:	080038af 	.word	0x080038af
 800384c:	08003881 	.word	0x08003881
 8003850:	08003909 	.word	0x08003909
 8003854:	0800386b 	.word	0x0800386b
 8003858:	08003871 	.word	0x08003871
 800385c:	08003909 	.word	0x08003909
 8003860:	08003901 	.word	0x08003901
			case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003864:	f000 f9c0 	bl	8003be8 <enter_menu_state>
				break;
 8003868:	e04e      	b.n	8003908 <fsm_enter_state+0xdc>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 800386a:	f000 f9f1 	bl	8003c50 <enter_setup_state>
				break;
 800386e:	e04b      	b.n	8003908 <fsm_enter_state+0xdc>
			case ENCODER_MODE:
				//printf("Entering Encoder Mode\r\n");
				fsmstate->print_iter = 0;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	605a      	str	r2, [r3, #4]
				comm_encoder.filt_enable = 0;
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <fsm_enter_state+0xe4>)
 8003878:	2200      	movs	r2, #0
 800387a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				break;
 800387e:	e043      	b.n	8003908 <fsm_enter_state+0xdc>
			case MOTOR_MODE:
				printf("\n\r\n\r Entering Motor Mode\r\n");
 8003880:	4824      	ldr	r0, [pc, #144]	; (8003914 <fsm_enter_state+0xe8>)
 8003882:	f008 fe9b 	bl	800c5bc <puts>
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003886:	2201      	movs	r2, #1
 8003888:	2120      	movs	r1, #32
 800388a:	4823      	ldr	r0, [pc, #140]	; (8003918 <fsm_enter_state+0xec>)
 800388c:	f004 fe9e 	bl	80085cc <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8003890:	4822      	ldr	r0, [pc, #136]	; (800391c <fsm_enter_state+0xf0>)
 8003892:	f7ff fb8f 	bl	8002fb4 <reset_foc>
				drv_enable_gd(drv);
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <fsm_enter_state+0xf4>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4611      	mov	r1, r2
 800389c:	889a      	ldrh	r2, [r3, #4]
 800389e:	2300      	movs	r3, #0
 80038a0:	f362 030f 	bfi	r3, r2, #0, #16
 80038a4:	4608      	mov	r0, r1
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7fe fdbd 	bl	8002426 <drv_enable_gd>
				break;
 80038ac:	e02c      	b.n	8003908 <fsm_enter_state+0xdc>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */
				comm_encoder_cal.done_cal = 0;
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <fsm_enter_state+0xf8>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <fsm_enter_state+0xf8>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.valid_cal = 0;
 80038be:	4b19      	ldr	r3, [pc, #100]	; (8003924 <fsm_enter_state+0xf8>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				comm_encoder_cal.started = 0;
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <fsm_enter_state+0xf8>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	741a      	strb	r2, [r3, #16]
				// reset electrical zero and encoder filter
				comm_encoder.e_zero = 0;
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <fsm_enter_state+0xe4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
				comm_encoder.filt_enable = 0;
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <fsm_enter_state+0xe4>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				// clear lookup table
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 80038dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e0:	2100      	movs	r1, #0
 80038e2:	4811      	ldr	r0, [pc, #68]	; (8003928 <fsm_enter_state+0xfc>)
 80038e4:	f008 f972 	bl	800bbcc <memset>
				drv_enable_gd(drv);
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <fsm_enter_state+0xf4>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4611      	mov	r1, r2
 80038ee:	889a      	ldrh	r2, [r3, #4]
 80038f0:	2300      	movs	r3, #0
 80038f2:	f362 030f 	bfi	r3, r2, #0, #16
 80038f6:	4608      	mov	r0, r1
 80038f8:	4619      	mov	r1, r3
 80038fa:	f7fe fd94 	bl	8002426 <drv_enable_gd>
				break;
 80038fe:	e003      	b.n	8003908 <fsm_enter_state+0xdc>
			case FAULT_MODE:
				printf("\n\r\n\r Entering Fault Mode\n\r");
 8003900:	480a      	ldr	r0, [pc, #40]	; (800392c <fsm_enter_state+0x100>)
 8003902:	f008 fdd5 	bl	800c4b0 <iprintf>
				break;
 8003906:	bf00      	nop

		}
 }
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000b5c 	.word	0x20000b5c
 8003914:	080107cc 	.word	0x080107cc
 8003918:	40020800 	.word	0x40020800
 800391c:	20000850 	.word	0x20000850
 8003920:	20000eb8 	.word	0x20000eb8
 8003924:	20000ec0 	.word	0x20000ec0
 8003928:	20000cb4 	.word	0x20000cb4
 800392c:	080107e8 	.word	0x080107e8

08003930 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b05      	cmp	r3, #5
 800393e:	d857      	bhi.n	80039f0 <fsm_exit_state+0xc0>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <fsm_exit_state+0x18>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003961 	.word	0x08003961
 800394c:	080039c3 	.word	0x080039c3
 8003950:	08003989 	.word	0x08003989
 8003954:	080039f1 	.word	0x080039f1
 8003958:	08003969 	.word	0x08003969
 800395c:	08003971 	.word	0x08003971
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	70da      	strb	r2, [r3, #3]
				break;
 8003966:	e043      	b.n	80039f0 <fsm_exit_state+0xc0>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	70da      	strb	r2, [r3, #3]
				break;
 800396e:	e03f      	b.n	80039f0 <fsm_exit_state+0xc0>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				if (EN_ENC_FILTER == 1){
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <fsm_exit_state+0xc8>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d103      	bne.n	8003980 <fsm_exit_state+0x50>
					comm_encoder.filt_enable = 1;
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <fsm_exit_state+0xcc>)
 800397a:	2201      	movs	r2, #1
 800397c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
				fsmstate->ready = 1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	70da      	strb	r2, [r3, #3]
				break;
 8003986:	e033      	b.n	80039f0 <fsm_exit_state+0xc0>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
				fsmstate->ready = 1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	70da      	strb	r2, [r3, #3]
				drv_disable_gd(drv);
 800398e:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <fsm_exit_state+0xd0>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4611      	mov	r1, r2
 8003994:	889a      	ldrh	r2, [r3, #4]
 8003996:	2300      	movs	r3, #0
 8003998:	f362 030f 	bfi	r3, r2, #0, #16
 800399c:	4608      	mov	r0, r1
 800399e:	4619      	mov	r1, r3
 80039a0:	f7fe fd5b 	bl	800245a <drv_disable_gd>
				reset_foc(&controller);
 80039a4:	4817      	ldr	r0, [pc, #92]	; (8003a04 <fsm_exit_state+0xd4>)
 80039a6:	f7ff fb05 	bl	8002fb4 <reset_foc>
				printf("\n\r Leaving Motor Mode\r\n");
 80039aa:	4817      	ldr	r0, [pc, #92]	; (8003a08 <fsm_exit_state+0xd8>)
 80039ac:	f008 fe06 	bl	800c5bc <puts>
				HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80039b0:	2200      	movs	r2, #0
 80039b2:	2120      	movs	r1, #32
 80039b4:	4815      	ldr	r0, [pc, #84]	; (8003a0c <fsm_exit_state+0xdc>)
 80039b6:	f004 fe09 	bl	80085cc <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 80039ba:	4812      	ldr	r0, [pc, #72]	; (8003a04 <fsm_exit_state+0xd4>)
 80039bc:	f7ff fddc 	bl	8003578 <zero_commands>
				break;
 80039c0:	e016      	b.n	80039f0 <fsm_exit_state+0xc0>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <fsm_exit_state+0xd0>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4611      	mov	r1, r2
 80039c8:	889a      	ldrh	r2, [r3, #4]
 80039ca:	2300      	movs	r3, #0
 80039cc:	f362 030f 	bfi	r3, r2, #0, #16
 80039d0:	4608      	mov	r0, r1
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fe fd41 	bl	800245a <drv_disable_gd>
				if (EN_ENC_FILTER == 1){
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <fsm_exit_state+0xc8>)
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d103      	bne.n	80039e8 <fsm_exit_state+0xb8>
					comm_encoder.filt_enable = 1;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <fsm_exit_state+0xcc>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	70da      	strb	r2, [r3, #3]
				break;
 80039ee:	bf00      	nop
		}

 }
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2000043c 	.word	0x2000043c
 80039fc:	20000b5c 	.word	0x20000b5c
 8003a00:	20000eb8 	.word	0x20000eb8
 8003a04:	20000850 	.word	0x20000850
 8003a08:	08010804 	.word	0x08010804
 8003a0c:	40020800 	.word	0x40020800

08003a10 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b1b      	cmp	r3, #27
 8003a20:	d10d      	bne.n	8003a3e <update_fsm+0x2e>
		fsmstate->next_state = MENU_MODE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	70da      	strb	r2, [r3, #3]
		if (fsmstate->state == MENU_MODE){
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 80c6 	bne.w	8003bc4 <update_fsm+0x1b4>
			enter_menu_state(); // re-print menu
 8003a38:	f000 f8d6 	bl	8003be8 <enter_menu_state>
		}
		return;
 8003a3c:	e0c2      	b.n	8003bc4 <update_fsm+0x1b4>
	}
	switch(fsmstate->state){
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	f200 80c1 	bhi.w	8003bca <update_fsm+0x1ba>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <update_fsm+0x40>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a69 	.word	0x08003a69
 8003a54:	08003bcb 	.word	0x08003bcb
 8003a58:	08003bcb 	.word	0x08003bcb
 8003a5c:	08003bcb 	.word	0x08003bcb
 8003a60:	08003b8b 	.word	0x08003b8b
 8003a64:	08003bcb 	.word	0x08003bcb
		case MENU_MODE:
			switch (fsm_input){
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	3b63      	subs	r3, #99	; 0x63
 8003a6c:	2b17      	cmp	r3, #23
 8003a6e:	f200 80ab 	bhi.w	8003bc8 <update_fsm+0x1b8>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <update_fsm+0x68>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003ad9 	.word	0x08003ad9
 8003a7c:	08003bc9 	.word	0x08003bc9
 8003a80:	08003af5 	.word	0x08003af5
 8003a84:	08003bc9 	.word	0x08003bc9
 8003a88:	08003bc9 	.word	0x08003bc9
 8003a8c:	08003bc9 	.word	0x08003bc9
 8003a90:	08003bc9 	.word	0x08003bc9
 8003a94:	08003bc9 	.word	0x08003bc9
 8003a98:	08003bc9 	.word	0x08003bc9
 8003a9c:	08003bc9 	.word	0x08003bc9
 8003aa0:	08003ae7 	.word	0x08003ae7
 8003aa4:	08003bc9 	.word	0x08003bc9
 8003aa8:	08003bc9 	.word	0x08003bc9
 8003aac:	08003b79 	.word	0x08003b79
 8003ab0:	08003bc9 	.word	0x08003bc9
 8003ab4:	08003bc9 	.word	0x08003bc9
 8003ab8:	08003b03 	.word	0x08003b03
 8003abc:	08003bc9 	.word	0x08003bc9
 8003ac0:	08003bc9 	.word	0x08003bc9
 8003ac4:	08003bc9 	.word	0x08003bc9
 8003ac8:	08003bc9 	.word	0x08003bc9
 8003acc:	08003bc9 	.word	0x08003bc9
 8003ad0:	08003bc9 	.word	0x08003bc9
 8003ad4:	08003b11 	.word	0x08003b11
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	70da      	strb	r2, [r3, #3]
					break;
 8003ae4:	e050      	b.n	8003b88 <update_fsm+0x178>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	70da      	strb	r2, [r3, #3]
					break;
 8003af2:	e049      	b.n	8003b88 <update_fsm+0x178>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2205      	movs	r2, #5
 8003af8:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	70da      	strb	r2, [r3, #3]
					break;
 8003b00:	e042      	b.n	8003b88 <update_fsm+0x178>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2204      	movs	r2, #4
 8003b06:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	70da      	strb	r2, [r3, #3]
					break;
 8003b0e:	e03b      	b.n	8003b88 <update_fsm+0x178>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 8003b10:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <update_fsm+0x1c0>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
					ps_sample(&comm_encoder, DT);
 8003b18:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003bd4 <update_fsm+0x1c4>
 8003b1c:	482c      	ldr	r0, [pc, #176]	; (8003bd0 <update_fsm+0x1c0>)
 8003b1e:	f001 fe97 	bl	8005850 <ps_sample>
					int zero_count = comm_encoder.count;
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <update_fsm+0x1c0>)
 8003b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b28:	60fb      	str	r3, [r7, #12]
					M_ZERO = zero_count;
 8003b2a:	4a2b      	ldr	r2, [pc, #172]	; (8003bd8 <update_fsm+0x1c8>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6193      	str	r3, [r2, #24]
					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003b30:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <update_fsm+0x1cc>)
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	9200      	str	r2, [sp, #0]
 8003b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b38:	f002 f943 	bl	8005dc2 <preference_writer_ready>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f083 0301 	eor.w	r3, r3, #1
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <update_fsm+0x13e>
 8003b48:	4824      	ldr	r0, [pc, #144]	; (8003bdc <update_fsm+0x1cc>)
 8003b4a:	f002 f92b 	bl	8005da4 <preference_writer_open>
					preference_writer_flush(&prefs);
 8003b4e:	4823      	ldr	r0, [pc, #140]	; (8003bdc <update_fsm+0x1cc>)
 8003b50:	f002 f944 	bl	8005ddc <preference_writer_flush>
					preference_writer_close(&prefs);
 8003b54:	4821      	ldr	r0, [pc, #132]	; (8003bdc <update_fsm+0x1cc>)
 8003b56:	f002 f9bf 	bl	8005ed8 <preference_writer_close>
					preference_writer_load(prefs);
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <update_fsm+0x1cc>)
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	9200      	str	r2, [sp, #0]
 8003b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b62:	f002 f977 	bl	8005e54 <preference_writer_load>
					printf("\n\r\n\r  Saved new zero position:  %d\n\r\n\r", M_ZERO);
 8003b66:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <update_fsm+0x1c8>)
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	481c      	ldr	r0, [pc, #112]	; (8003be0 <update_fsm+0x1d0>)
 8003b6e:	f008 fc9f 	bl	800c4b0 <iprintf>
					enter_menu_state(); // re-print menu
 8003b72:	f000 f839 	bl	8003be8 <enter_menu_state>
					break;
 8003b76:	e007      	b.n	8003b88 <update_fsm+0x178>
				case RESET_CMD:
					reset_flash_values();
 8003b78:	f000 fed6 	bl	8004928 <reset_flash_values>
					printf("\n\r\n\r Flash values have been reset. Power cycle to be safe! \n\r\n\r");
 8003b7c:	4819      	ldr	r0, [pc, #100]	; (8003be4 <update_fsm+0x1d4>)
 8003b7e:	f008 fc97 	bl	800c4b0 <iprintf>
					enter_menu_state(); // re-print menu
 8003b82:	f000 f831 	bl	8003be8 <enter_menu_state>
					break;
 8003b86:	bf00      	nop
				}
			break;
 8003b88:	e01e      	b.n	8003bc8 <update_fsm+0x1b8>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	2b0d      	cmp	r3, #13
 8003b8e:	d103      	bne.n	8003b98 <update_fsm+0x188>
				process_user_input(fsmstate);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fb13 	bl	80041bc <process_user_input>
				break;
 8003b96:	e018      	b.n	8003bca <update_fsm+0x1ba>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7c1b      	ldrb	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <update_fsm+0x198>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	745a      	strb	r2, [r3, #17]
 8003ba6:	e006      	b.n	8003bb6 <update_fsm+0x1a6>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7c1b      	ldrb	r3, [r3, #16]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	721a      	strb	r2, [r3, #8]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7c1b      	ldrb	r3, [r3, #16]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	741a      	strb	r2, [r3, #16]
			/* If enter is typed, process user input */

			break;
 8003bc2:	e002      	b.n	8003bca <update_fsm+0x1ba>
		return;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <update_fsm+0x1ba>
			break;
 8003bc8:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000b5c 	.word	0x20000b5c
 8003bd4:	3851b717 	.word	0x3851b717
 8003bd8:	2000043c 	.word	0x2000043c
 8003bdc:	2000083c 	.word	0x2000083c
 8003be0:	0801081c 	.word	0x0801081c
 8003be4:	08010844 	.word	0x08010844

08003be8 <enter_menu_state>:


 void enter_menu_state(void){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003bec:	480e      	ldr	r0, [pc, #56]	; (8003c28 <enter_menu_state+0x40>)
 8003bee:	f008 fc5f 	bl	800c4b0 <iprintf>
	    printf(" Commands:\n\r");
 8003bf2:	480e      	ldr	r0, [pc, #56]	; (8003c2c <enter_menu_state+0x44>)
 8003bf4:	f008 fc5c 	bl	800c4b0 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003bf8:	480d      	ldr	r0, [pc, #52]	; (8003c30 <enter_menu_state+0x48>)
 8003bfa:	f008 fc59 	bl	800c4b0 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003bfe:	480d      	ldr	r0, [pc, #52]	; (8003c34 <enter_menu_state+0x4c>)
 8003c00:	f008 fc56 	bl	800c4b0 <iprintf>
	    printf(" s - Setup\n\r");
 8003c04:	480c      	ldr	r0, [pc, #48]	; (8003c38 <enter_menu_state+0x50>)
 8003c06:	f008 fc53 	bl	800c4b0 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003c0a:	480c      	ldr	r0, [pc, #48]	; (8003c3c <enter_menu_state+0x54>)
 8003c0c:	f008 fc50 	bl	800c4b0 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003c10:	480b      	ldr	r0, [pc, #44]	; (8003c40 <enter_menu_state+0x58>)
 8003c12:	f008 fc4d 	bl	800c4b0 <iprintf>
	    printf(" p - !!! Reset Flash Memory Values !!!\n\r");
 8003c16:	480b      	ldr	r0, [pc, #44]	; (8003c44 <enter_menu_state+0x5c>)
 8003c18:	f008 fc4a 	bl	800c4b0 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003c1c:	480a      	ldr	r0, [pc, #40]	; (8003c48 <enter_menu_state+0x60>)
 8003c1e:	f008 fc47 	bl	800c4b0 <iprintf>

	    //gpio.led->write(0);
 }
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08010884 	.word	0x08010884
 8003c2c:	0801088c 	.word	0x0801088c
 8003c30:	0801089c 	.word	0x0801089c
 8003c34:	080108b0 	.word	0x080108b0
 8003c38:	080108cc 	.word	0x080108cc
 8003c3c:	080108dc 	.word	0x080108dc
 8003c40:	080108f4 	.word	0x080108f4
 8003c44:	08010910 	.word	0x08010910
 8003c48:	0801093c 	.word	0x0801093c
 8003c4c:	00000000 	.word	0x00000000

08003c50 <enter_setup_state>:

 void enter_setup_state(void){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003c56:	4898      	ldr	r0, [pc, #608]	; (8003eb8 <enter_setup_state+0x268>)
 8003c58:	f008 fc2a 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-29s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003c5c:	4b97      	ldr	r3, [pc, #604]	; (8003ebc <enter_setup_state+0x26c>)
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	4b97      	ldr	r3, [pc, #604]	; (8003ec0 <enter_setup_state+0x270>)
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4b97      	ldr	r3, [pc, #604]	; (8003ec4 <enter_setup_state+0x274>)
 8003c66:	4a98      	ldr	r2, [pc, #608]	; (8003ec8 <enter_setup_state+0x278>)
 8003c68:	4998      	ldr	r1, [pc, #608]	; (8003ecc <enter_setup_state+0x27c>)
 8003c6a:	4899      	ldr	r0, [pc, #612]	; (8003ed0 <enter_setup_state+0x280>)
 8003c6c:	f008 fc20 	bl	800c4b0 <iprintf>

	    printf("\r\n Motor:\r\n");
 8003c70:	4898      	ldr	r0, [pc, #608]	; (8003ed4 <enter_setup_state+0x284>)
 8003c72:	f008 fca3 	bl	800c5bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Encoder Mech Zero", "0", "524288", M_ZERO);
 8003c76:	4b98      	ldr	r3, [pc, #608]	; (8003ed8 <enter_setup_state+0x288>)
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	4b97      	ldr	r3, [pc, #604]	; (8003edc <enter_setup_state+0x28c>)
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	4b97      	ldr	r3, [pc, #604]	; (8003ee0 <enter_setup_state+0x290>)
 8003c82:	4a98      	ldr	r2, [pc, #608]	; (8003ee4 <enter_setup_state+0x294>)
 8003c84:	4998      	ldr	r1, [pc, #608]	; (8003ee8 <enter_setup_state+0x298>)
 8003c86:	4899      	ldr	r0, [pc, #612]	; (8003eec <enter_setup_state+0x29c>)
 8003c88:	f008 fc12 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Encoder Elec Zero", "0", "524288", E_ZERO);
 8003c8c:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <enter_setup_state+0x288>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	4b92      	ldr	r3, [pc, #584]	; (8003edc <enter_setup_state+0x28c>)
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4b92      	ldr	r3, [pc, #584]	; (8003ee0 <enter_setup_state+0x290>)
 8003c98:	4a95      	ldr	r2, [pc, #596]	; (8003ef0 <enter_setup_state+0x2a0>)
 8003c9a:	4993      	ldr	r1, [pc, #588]	; (8003ee8 <enter_setup_state+0x298>)
 8003c9c:	4893      	ldr	r0, [pc, #588]	; (8003eec <enter_setup_state+0x29c>)
 8003c9e:	f008 fc07 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003ca2:	4b94      	ldr	r3, [pc, #592]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc fc6e 	bl	8000588 <__aeabi_f2d>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cb4:	4b8c      	ldr	r3, [pc, #560]	; (8003ee8 <enter_setup_state+0x298>)
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	4b89      	ldr	r3, [pc, #548]	; (8003ee0 <enter_setup_state+0x290>)
 8003cba:	4a8f      	ldr	r2, [pc, #572]	; (8003ef8 <enter_setup_state+0x2a8>)
 8003cbc:	498f      	ldr	r1, [pc, #572]	; (8003efc <enter_setup_state+0x2ac>)
 8003cbe:	4890      	ldr	r0, [pc, #576]	; (8003f00 <enter_setup_state+0x2b0>)
 8003cc0:	f008 fbf6 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003cc4:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fc5d 	bl	8000588 <__aeabi_f2d>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cd6:	4b84      	ldr	r3, [pc, #528]	; (8003ee8 <enter_setup_state+0x298>)
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	4b81      	ldr	r3, [pc, #516]	; (8003ee0 <enter_setup_state+0x290>)
 8003cdc:	4a89      	ldr	r2, [pc, #548]	; (8003f04 <enter_setup_state+0x2b4>)
 8003cde:	498a      	ldr	r1, [pc, #552]	; (8003f08 <enter_setup_state+0x2b8>)
 8003ce0:	488a      	ldr	r0, [pc, #552]	; (8003f0c <enter_setup_state+0x2bc>)
 8003ce2:	f008 fbe5 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "o", "Motor Phase Resistance (ohms)", "0.0", "10.0", R_PHASE);
 8003ce6:	4b83      	ldr	r3, [pc, #524]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc4c 	bl	8000588 <__aeabi_f2d>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cf8:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <enter_setup_state+0x2c0>)
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4b85      	ldr	r3, [pc, #532]	; (8003f14 <enter_setup_state+0x2c4>)
 8003cfe:	4a86      	ldr	r2, [pc, #536]	; (8003f18 <enter_setup_state+0x2c8>)
 8003d00:	4986      	ldr	r1, [pc, #536]	; (8003f1c <enter_setup_state+0x2cc>)
 8003d02:	4887      	ldr	r0, [pc, #540]	; (8003f20 <enter_setup_state+0x2d0>)
 8003d04:	f008 fbd4 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "j", "D-axis inductance (H)", "0", "0.1", L_D);
 8003d08:	4b7a      	ldr	r3, [pc, #488]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fc3b 	bl	8000588 <__aeabi_f2d>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d1a:	4b82      	ldr	r3, [pc, #520]	; (8003f24 <enter_setup_state+0x2d4>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <enter_setup_state+0x290>)
 8003d20:	4a81      	ldr	r2, [pc, #516]	; (8003f28 <enter_setup_state+0x2d8>)
 8003d22:	4982      	ldr	r1, [pc, #520]	; (8003f2c <enter_setup_state+0x2dc>)
 8003d24:	487e      	ldr	r0, [pc, #504]	; (8003f20 <enter_setup_state+0x2d0>)
 8003d26:	f008 fbc3 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "e", "Q-axis inductance (H)", "0", "0.1", L_Q);
 8003d2a:	4b72      	ldr	r3, [pc, #456]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fc2a 	bl	8000588 <__aeabi_f2d>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d3c:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <enter_setup_state+0x2d4>)
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <enter_setup_state+0x290>)
 8003d42:	4a7b      	ldr	r2, [pc, #492]	; (8003f30 <enter_setup_state+0x2e0>)
 8003d44:	497b      	ldr	r1, [pc, #492]	; (8003f34 <enter_setup_state+0x2e4>)
 8003d46:	4876      	ldr	r0, [pc, #472]	; (8003f20 <enter_setup_state+0x2d0>)
 8003d48:	f008 fbb2 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "n", "Number of Pole Pairs (NPP)", "0", "40", PPAIRS);
 8003d4c:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc fc19 	bl	8000588 <__aeabi_f2d>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <enter_setup_state+0x2e8>)
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <enter_setup_state+0x290>)
 8003d64:	4a75      	ldr	r2, [pc, #468]	; (8003f3c <enter_setup_state+0x2ec>)
 8003d66:	4976      	ldr	r1, [pc, #472]	; (8003f40 <enter_setup_state+0x2f0>)
 8003d68:	486d      	ldr	r0, [pc, #436]	; (8003f20 <enter_setup_state+0x2d0>)
 8003d6a:	f008 fba1 	bl	800c4b0 <iprintf>

	    printf("\r\n Control:\r\n");
 8003d6e:	4875      	ldr	r0, [pc, #468]	; (8003f44 <enter_setup_state+0x2f4>)
 8003d70:	f008 fc24 	bl	800c5bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "y", "Encoder Linearization Enable", "0", "1", EN_ENC_LINEARIZE);
 8003d74:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <enter_setup_state+0x288>)
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	4b73      	ldr	r3, [pc, #460]	; (8003f48 <enter_setup_state+0x2f8>)
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <enter_setup_state+0x290>)
 8003d80:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <enter_setup_state+0x2fc>)
 8003d82:	4973      	ldr	r1, [pc, #460]	; (8003f50 <enter_setup_state+0x300>)
 8003d84:	4859      	ldr	r0, [pc, #356]	; (8003eec <enter_setup_state+0x29c>)
 8003d86:	f008 fb93 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "z", "Encoder Filter Enable", "0", "1", EN_ENC_FILTER);
 8003d8a:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <enter_setup_state+0x288>)
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <enter_setup_state+0x2f8>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4b52      	ldr	r3, [pc, #328]	; (8003ee0 <enter_setup_state+0x290>)
 8003d96:	4a6f      	ldr	r2, [pc, #444]	; (8003f54 <enter_setup_state+0x304>)
 8003d98:	496f      	ldr	r1, [pc, #444]	; (8003f58 <enter_setup_state+0x308>)
 8003d9a:	4854      	ldr	r0, [pc, #336]	; (8003eec <enter_setup_state+0x29c>)
 8003d9c:	f008 fb88 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %d\n\r", "-", "Phase Order", "0", "1", PHASE_ORDER);
 8003da0:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <enter_setup_state+0x288>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	4b68      	ldr	r3, [pc, #416]	; (8003f48 <enter_setup_state+0x2f8>)
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <enter_setup_state+0x290>)
 8003dac:	4a6b      	ldr	r2, [pc, #428]	; (8003f5c <enter_setup_state+0x30c>)
 8003dae:	494e      	ldr	r1, [pc, #312]	; (8003ee8 <enter_setup_state+0x298>)
 8003db0:	484e      	ldr	r0, [pc, #312]	; (8003eec <enter_setup_state+0x29c>)
 8003db2:	f008 fb7d 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller K_SCALE", "-", "-", K_SCALE); // TODO: decide if these should be in flash or not
 8003db6:	a33c      	add	r3, pc, #240	; (adr r3, 8003ea8 <enter_setup_state+0x258>)
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dc0:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <enter_setup_state+0x298>)
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <enter_setup_state+0x298>)
 8003dc6:	4a66      	ldr	r2, [pc, #408]	; (8003f60 <enter_setup_state+0x310>)
 8003dc8:	4947      	ldr	r1, [pc, #284]	; (8003ee8 <enter_setup_state+0x298>)
 8003dca:	4855      	ldr	r0, [pc, #340]	; (8003f20 <enter_setup_state+0x2d0>)
 8003dcc:	f008 fb70 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller KI_D", "-", "-", KI_D);
 8003dd0:	a337      	add	r3, pc, #220	; (adr r3, 8003eb0 <enter_setup_state+0x260>)
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dda:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <enter_setup_state+0x298>)
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <enter_setup_state+0x298>)
 8003de0:	4a60      	ldr	r2, [pc, #384]	; (8003f64 <enter_setup_state+0x314>)
 8003de2:	4941      	ldr	r1, [pc, #260]	; (8003ee8 <enter_setup_state+0x298>)
 8003de4:	484e      	ldr	r0, [pc, #312]	; (8003f20 <enter_setup_state+0x2d0>)
 8003de6:	f008 fb63 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Current Controller KI_Q", "-", "-", KI_Q);
 8003dea:	a331      	add	r3, pc, #196	; (adr r3, 8003eb0 <enter_setup_state+0x260>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <enter_setup_state+0x298>)
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <enter_setup_state+0x298>)
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <enter_setup_state+0x318>)
 8003dfc:	493a      	ldr	r1, [pc, #232]	; (8003ee8 <enter_setup_state+0x298>)
 8003dfe:	4848      	ldr	r0, [pc, #288]	; (8003f20 <enter_setup_state+0x2d0>)
 8003e00:	f008 fb56 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc fbbd 	bl	8000588 <__aeabi_f2d>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e16:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <enter_setup_state+0x31c>)
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4b55      	ldr	r3, [pc, #340]	; (8003f70 <enter_setup_state+0x320>)
 8003e1c:	4a55      	ldr	r2, [pc, #340]	; (8003f74 <enter_setup_state+0x324>)
 8003e1e:	4956      	ldr	r1, [pc, #344]	; (8003f78 <enter_setup_state+0x328>)
 8003e20:	4856      	ldr	r0, [pc, #344]	; (8003f7c <enter_setup_state+0x32c>)
 8003e22:	f008 fb45 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003e26:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc fbac 	bl	8000588 <__aeabi_f2d>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e38:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <enter_setup_state+0x330>)
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <enter_setup_state+0x2c4>)
 8003e3e:	4a51      	ldr	r2, [pc, #324]	; (8003f84 <enter_setup_state+0x334>)
 8003e40:	4951      	ldr	r1, [pc, #324]	; (8003f88 <enter_setup_state+0x338>)
 8003e42:	484e      	ldr	r0, [pc, #312]	; (8003f7c <enter_setup_state+0x32c>)
 8003e44:	f008 fb34 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003e48:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fb9b 	bl	8000588 <__aeabi_f2d>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e5a:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <enter_setup_state+0x33c>)
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <enter_setup_state+0x2c4>)
 8003e60:	4a4b      	ldr	r2, [pc, #300]	; (8003f90 <enter_setup_state+0x340>)
 8003e62:	494c      	ldr	r1, [pc, #304]	; (8003f94 <enter_setup_state+0x344>)
 8003e64:	4845      	ldr	r0, [pc, #276]	; (8003f7c <enter_setup_state+0x32c>)
 8003e66:	f008 fb23 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003e6a:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fb8a 	bl	8000588 <__aeabi_f2d>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e7c:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <enter_setup_state+0x348>)
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <enter_setup_state+0x2c4>)
 8003e82:	4a46      	ldr	r2, [pc, #280]	; (8003f9c <enter_setup_state+0x34c>)
 8003e84:	4946      	ldr	r1, [pc, #280]	; (8003fa0 <enter_setup_state+0x350>)
 8003e86:	483d      	ldr	r0, [pc, #244]	; (8003f7c <enter_setup_state+0x32c>)
 8003e88:	f008 fb12 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <enter_setup_state+0x2a4>)
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc fb79 	bl	8000588 <__aeabi_f2d>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <enter_setup_state+0x354>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <enter_setup_state+0x2c4>)
 8003ea4:	e080      	b.n	8003fa8 <enter_setup_state+0x358>
 8003ea6:	bf00      	nop
 8003ea8:	40000000 	.word	0x40000000
 8003eac:	3f216ebd 	.word	0x3f216ebd
 8003eb0:	60000000 	.word	0x60000000
 8003eb4:	3fa318fc 	.word	0x3fa318fc
 8003eb8:	08010954 	.word	0x08010954
 8003ebc:	080109a8 	.word	0x080109a8
 8003ec0:	080109b8 	.word	0x080109b8
 8003ec4:	08010970 	.word	0x08010970
 8003ec8:	08010974 	.word	0x08010974
 8003ecc:	08010980 	.word	0x08010980
 8003ed0:	08010988 	.word	0x08010988
 8003ed4:	080109bc 	.word	0x080109bc
 8003ed8:	2000043c 	.word	0x2000043c
 8003edc:	08010a00 	.word	0x08010a00
 8003ee0:	080109c8 	.word	0x080109c8
 8003ee4:	080109cc 	.word	0x080109cc
 8003ee8:	080109e0 	.word	0x080109e0
 8003eec:	080109e4 	.word	0x080109e4
 8003ef0:	08010a08 	.word	0x08010a08
 8003ef4:	2000033c 	.word	0x2000033c
 8003ef8:	08010a1c 	.word	0x08010a1c
 8003efc:	08010a28 	.word	0x08010a28
 8003f00:	08010a2c 	.word	0x08010a2c
 8003f04:	08010a4c 	.word	0x08010a4c
 8003f08:	08010a64 	.word	0x08010a64
 8003f0c:	08010a68 	.word	0x08010a68
 8003f10:	08010acc 	.word	0x08010acc
 8003f14:	08010a88 	.word	0x08010a88
 8003f18:	08010a8c 	.word	0x08010a8c
 8003f1c:	08010aac 	.word	0x08010aac
 8003f20:	08010ab0 	.word	0x08010ab0
 8003f24:	08010af0 	.word	0x08010af0
 8003f28:	08010ad4 	.word	0x08010ad4
 8003f2c:	08010aec 	.word	0x08010aec
 8003f30:	08010af4 	.word	0x08010af4
 8003f34:	08010b0c 	.word	0x08010b0c
 8003f38:	08010b30 	.word	0x08010b30
 8003f3c:	08010b10 	.word	0x08010b10
 8003f40:	08010b2c 	.word	0x08010b2c
 8003f44:	08010b34 	.word	0x08010b34
 8003f48:	08010b68 	.word	0x08010b68
 8003f4c:	08010b44 	.word	0x08010b44
 8003f50:	08010b64 	.word	0x08010b64
 8003f54:	08010b6c 	.word	0x08010b6c
 8003f58:	08010b84 	.word	0x08010b84
 8003f5c:	08010b88 	.word	0x08010b88
 8003f60:	08010b94 	.word	0x08010b94
 8003f64:	08010bb0 	.word	0x08010bb0
 8003f68:	08010bc8 	.word	0x08010bc8
 8003f6c:	08010c20 	.word	0x08010c20
 8003f70:	08010be0 	.word	0x08010be0
 8003f74:	08010be4 	.word	0x08010be4
 8003f78:	08010bfc 	.word	0x08010bfc
 8003f7c:	08010c00 	.word	0x08010c00
 8003f80:	08010c40 	.word	0x08010c40
 8003f84:	08010c28 	.word	0x08010c28
 8003f88:	08010c3c 	.word	0x08010c3c
 8003f8c:	08010c64 	.word	0x08010c64
 8003f90:	08010c48 	.word	0x08010c48
 8003f94:	08010c60 	.word	0x08010c60
 8003f98:	08010c88 	.word	0x08010c88
 8003f9c:	08010c6c 	.word	0x08010c6c
 8003fa0:	08010c84 	.word	0x08010c84
 8003fa4:	08010cac 	.word	0x08010cac
 8003fa8:	4a5e      	ldr	r2, [pc, #376]	; (8004124 <enter_setup_state+0x4d4>)
 8003faa:	495f      	ldr	r1, [pc, #380]	; (8004128 <enter_setup_state+0x4d8>)
 8003fac:	485f      	ldr	r0, [pc, #380]	; (800412c <enter_setup_state+0x4dc>)
 8003fae:	f008 fa7f 	bl	800c4b0 <iprintf>

	    printf("\r\n Thermal:\r\n");
 8003fb2:	485f      	ldr	r0, [pc, #380]	; (8004130 <enter_setup_state+0x4e0>)
 8003fb4:	f008 fb02 	bl	800c5bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0.0", "150.0", TEMP_MAX);
 8003fb8:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <enter_setup_state+0x4e4>)
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc fae3 	bl	8000588 <__aeabi_f2d>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fca:	4b5b      	ldr	r3, [pc, #364]	; (8004138 <enter_setup_state+0x4e8>)
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	4b5b      	ldr	r3, [pc, #364]	; (800413c <enter_setup_state+0x4ec>)
 8003fd0:	4a5b      	ldr	r2, [pc, #364]	; (8004140 <enter_setup_state+0x4f0>)
 8003fd2:	495c      	ldr	r1, [pc, #368]	; (8004144 <enter_setup_state+0x4f4>)
 8003fd4:	4855      	ldr	r0, [pc, #340]	; (800412c <enter_setup_state+0x4dc>)
 8003fd6:	f008 fa6b 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.2f\n\r", "-", "Thermal Resistance (K-W/J)", "-", "-", R_TH);
 8003fda:	4b56      	ldr	r3, [pc, #344]	; (8004134 <enter_setup_state+0x4e4>)
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc fad2 	bl	8000588 <__aeabi_f2d>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fec:	4b56      	ldr	r3, [pc, #344]	; (8004148 <enter_setup_state+0x4f8>)
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	4b55      	ldr	r3, [pc, #340]	; (8004148 <enter_setup_state+0x4f8>)
 8003ff2:	4a56      	ldr	r2, [pc, #344]	; (800414c <enter_setup_state+0x4fc>)
 8003ff4:	4954      	ldr	r1, [pc, #336]	; (8004148 <enter_setup_state+0x4f8>)
 8003ff6:	4856      	ldr	r0, [pc, #344]	; (8004150 <enter_setup_state+0x500>)
 8003ff8:	f008 fa5a 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %f\n\r", "-", "Observer M Matrix (K/J)", "-", "-", INV_M_TH);
 8003ffc:	4b4d      	ldr	r3, [pc, #308]	; (8004134 <enter_setup_state+0x4e4>)
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fac1 	bl	8000588 <__aeabi_f2d>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800400e:	4b4e      	ldr	r3, [pc, #312]	; (8004148 <enter_setup_state+0x4f8>)
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <enter_setup_state+0x4f8>)
 8004014:	4a4f      	ldr	r2, [pc, #316]	; (8004154 <enter_setup_state+0x504>)
 8004016:	494c      	ldr	r1, [pc, #304]	; (8004148 <enter_setup_state+0x4f8>)
 8004018:	484f      	ldr	r0, [pc, #316]	; (8004158 <enter_setup_state+0x508>)
 800401a:	f008 fa49 	bl	800c4b0 <iprintf>
		printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "-", "Ambient Temp @ Calibration (C)", "-", "-", T_AMBIENT);
 800401e:	4b45      	ldr	r3, [pc, #276]	; (8004134 <enter_setup_state+0x4e4>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fab0 	bl	8000588 <__aeabi_f2d>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004030:	4b45      	ldr	r3, [pc, #276]	; (8004148 <enter_setup_state+0x4f8>)
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4b44      	ldr	r3, [pc, #272]	; (8004148 <enter_setup_state+0x4f8>)
 8004036:	4a49      	ldr	r2, [pc, #292]	; (800415c <enter_setup_state+0x50c>)
 8004038:	4943      	ldr	r1, [pc, #268]	; (8004148 <enter_setup_state+0x4f8>)
 800403a:	483c      	ldr	r0, [pc, #240]	; (800412c <enter_setup_state+0x4dc>)
 800403c:	f008 fa38 	bl	800c4b0 <iprintf>

	    printf("\r\n CAN:\r\n");
 8004040:	4847      	ldr	r0, [pc, #284]	; (8004160 <enter_setup_state+0x510>)
 8004042:	f008 fabb 	bl	800c5bc <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8004046:	4b47      	ldr	r3, [pc, #284]	; (8004164 <enter_setup_state+0x514>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <enter_setup_state+0x518>)
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4b46      	ldr	r3, [pc, #280]	; (800416c <enter_setup_state+0x51c>)
 8004052:	4a47      	ldr	r2, [pc, #284]	; (8004170 <enter_setup_state+0x520>)
 8004054:	4947      	ldr	r1, [pc, #284]	; (8004174 <enter_setup_state+0x524>)
 8004056:	4848      	ldr	r0, [pc, #288]	; (8004178 <enter_setup_state+0x528>)
 8004058:	f008 fa2a 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 800405c:	4b41      	ldr	r3, [pc, #260]	; (8004164 <enter_setup_state+0x514>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <enter_setup_state+0x518>)
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <enter_setup_state+0x51c>)
 8004068:	4a44      	ldr	r2, [pc, #272]	; (800417c <enter_setup_state+0x52c>)
 800406a:	4945      	ldr	r1, [pc, #276]	; (8004180 <enter_setup_state+0x530>)
 800406c:	4842      	ldr	r0, [pc, #264]	; (8004178 <enter_setup_state+0x528>)
 800406e:	f008 fa1f 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8004072:	4b3c      	ldr	r3, [pc, #240]	; (8004164 <enter_setup_state+0x514>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	4b42      	ldr	r3, [pc, #264]	; (8004184 <enter_setup_state+0x534>)
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <enter_setup_state+0x51c>)
 800407e:	4a42      	ldr	r2, [pc, #264]	; (8004188 <enter_setup_state+0x538>)
 8004080:	4942      	ldr	r1, [pc, #264]	; (800418c <enter_setup_state+0x53c>)
 8004082:	4843      	ldr	r0, [pc, #268]	; (8004190 <enter_setup_state+0x540>)
 8004084:	f008 fa14 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8004088:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <enter_setup_state+0x4e4>)
 800408a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fa7b 	bl	8000588 <__aeabi_f2d>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800409a:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <enter_setup_state+0x4f8>)
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <enter_setup_state+0x4f8>)
 80040a0:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <enter_setup_state+0x544>)
 80040a2:	493d      	ldr	r1, [pc, #244]	; (8004198 <enter_setup_state+0x548>)
 80040a4:	4821      	ldr	r0, [pc, #132]	; (800412c <enter_setup_state+0x4dc>)
 80040a6:	f008 fa03 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <enter_setup_state+0x4e4>)
 80040ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa6a 	bl	8000588 <__aeabi_f2d>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040bc:	4b22      	ldr	r3, [pc, #136]	; (8004148 <enter_setup_state+0x4f8>)
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <enter_setup_state+0x4f8>)
 80040c2:	4a36      	ldr	r2, [pc, #216]	; (800419c <enter_setup_state+0x54c>)
 80040c4:	4936      	ldr	r1, [pc, #216]	; (80041a0 <enter_setup_state+0x550>)
 80040c6:	4819      	ldr	r0, [pc, #100]	; (800412c <enter_setup_state+0x4dc>)
 80040c8:	f008 f9f2 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "-", "-", KP_MAX);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <enter_setup_state+0x4e4>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fa59 	bl	8000588 <__aeabi_f2d>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <enter_setup_state+0x4f8>)
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	4b19      	ldr	r3, [pc, #100]	; (8004148 <enter_setup_state+0x4f8>)
 80040e4:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <enter_setup_state+0x554>)
 80040e6:	4930      	ldr	r1, [pc, #192]	; (80041a8 <enter_setup_state+0x558>)
 80040e8:	4810      	ldr	r0, [pc, #64]	; (800412c <enter_setup_state+0x4dc>)
 80040ea:	f008 f9e1 	bl	800c4b0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "-", "-", KD_MAX);
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <enter_setup_state+0x4e4>)
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc fa48 	bl	8000588 <__aeabi_f2d>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <enter_setup_state+0x4f8>)
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4b10      	ldr	r3, [pc, #64]	; (8004148 <enter_setup_state+0x4f8>)
 8004106:	4a29      	ldr	r2, [pc, #164]	; (80041ac <enter_setup_state+0x55c>)
 8004108:	4929      	ldr	r1, [pc, #164]	; (80041b0 <enter_setup_state+0x560>)
 800410a:	4808      	ldr	r0, [pc, #32]	; (800412c <enter_setup_state+0x4dc>)
 800410c:	f008 f9d0 	bl	800c4b0 <iprintf>

	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8004110:	4828      	ldr	r0, [pc, #160]	; (80041b4 <enter_setup_state+0x564>)
 8004112:	f008 f9cd 	bl	800c4b0 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8004116:	4828      	ldr	r0, [pc, #160]	; (80041b8 <enter_setup_state+0x568>)
 8004118:	f008 f9ca 	bl	800c4b0 <iprintf>
 }
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	08010c90 	.word	0x08010c90
 8004128:	08010ca8 	.word	0x08010ca8
 800412c:	08010c00 	.word	0x08010c00
 8004130:	08010cb4 	.word	0x08010cb4
 8004134:	2000033c 	.word	0x2000033c
 8004138:	08010ce4 	.word	0x08010ce4
 800413c:	08010a88 	.word	0x08010a88
 8004140:	08010cc4 	.word	0x08010cc4
 8004144:	08010ce0 	.word	0x08010ce0
 8004148:	080109e0 	.word	0x080109e0
 800414c:	08010cec 	.word	0x08010cec
 8004150:	08010d08 	.word	0x08010d08
 8004154:	08010d28 	.word	0x08010d28
 8004158:	08010ab0 	.word	0x08010ab0
 800415c:	08010d40 	.word	0x08010d40
 8004160:	08010d60 	.word	0x08010d60
 8004164:	2000043c 	.word	0x2000043c
 8004168:	08010d98 	.word	0x08010d98
 800416c:	080109c8 	.word	0x080109c8
 8004170:	08010d6c 	.word	0x08010d6c
 8004174:	08010d74 	.word	0x08010d74
 8004178:	08010d78 	.word	0x08010d78
 800417c:	08010d9c 	.word	0x08010d9c
 8004180:	08010da8 	.word	0x08010da8
 8004184:	08010dd0 	.word	0x08010dd0
 8004188:	08010dac 	.word	0x08010dac
 800418c:	08010dcc 	.word	0x08010dcc
 8004190:	080109e4 	.word	0x080109e4
 8004194:	08010dd8 	.word	0x08010dd8
 8004198:	08010df4 	.word	0x08010df4
 800419c:	08010df8 	.word	0x08010df8
 80041a0:	08010e18 	.word	0x08010e18
 80041a4:	08010e1c 	.word	0x08010e1c
 80041a8:	08010e38 	.word	0x08010e38
 80041ac:	08010e3c 	.word	0x08010e3c
 80041b0:	08010e5c 	.word	0x08010e5c
 80041b4:	08010e60 	.word	0x08010e60
 80041b8:	08010eac 	.word	0x08010eac

080041bc <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7c5b      	ldrb	r3, [r3, #17]
 80041c8:	3b61      	subs	r3, #97	; 0x61
 80041ca:	2b19      	cmp	r3, #25
 80041cc:	f200 8355 	bhi.w	800487a <process_user_input+0x6be>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <process_user_input+0x1c>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	080044eb 	.word	0x080044eb
 80041dc:	080042ed 	.word	0x080042ed
 80041e0:	08004497 	.word	0x08004497
 80041e4:	0800478f 	.word	0x0800478f
 80041e8:	08004675 	.word	0x08004675
 80041ec:	080043d1 	.word	0x080043d1
 80041f0:	08004599 	.word	0x08004599
 80041f4:	08004443 	.word	0x08004443
 80041f8:	08004341 	.word	0x08004341
 80041fc:	08004621 	.word	0x08004621
 8004200:	080045dd 	.word	0x080045dd
 8004204:	0800437d 	.word	0x0800437d
 8004208:	0800435f 	.word	0x0800435f
 800420c:	080046c9 	.word	0x080046c9
 8004210:	08004299 	.word	0x08004299
 8004214:	080047d3 	.word	0x080047d3
 8004218:	0800487b 	.word	0x0800487b
 800421c:	0800487b 	.word	0x0800487b
 8004220:	0800487b 	.word	0x0800487b
 8004224:	08004425 	.word	0x08004425
 8004228:	0800487b 	.word	0x0800487b
 800422c:	08004827 	.word	0x08004827
 8004230:	0800487b 	.word	0x0800487b
 8004234:	0800474b 	.word	0x0800474b
 8004238:	08004241 	.word	0x08004241
 800423c:	0800426d 	.word	0x0800426d
//		 case 'q':
//			 KI_Q = fmaxf(fminf(atof(fsmstate->cmd_buff), 1.0f), 0.0f);
//			 printf("KI_Q set to %f\r\n", KI_Q);
//			 break;
 		 case 'y':
 			 EN_ENC_LINEARIZE = atoi(fsmstate->cmd_buff);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3308      	adds	r3, #8
 8004244:	4618      	mov	r0, r3
 8004246:	f007 fc84 	bl	800bb52 <atoi>
 800424a:	4603      	mov	r3, r0
 800424c:	4abc      	ldr	r2, [pc, #752]	; (8004540 <process_user_input+0x384>)
 800424e:	6153      	str	r3, [r2, #20]
 			 if (EN_ENC_LINEARIZE!=0) { EN_ENC_LINEARIZE = 1; }
 8004250:	4bbb      	ldr	r3, [pc, #748]	; (8004540 <process_user_input+0x384>)
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <process_user_input+0xa2>
 8004258:	4bb9      	ldr	r3, [pc, #740]	; (8004540 <process_user_input+0x384>)
 800425a:	2201      	movs	r2, #1
 800425c:	615a      	str	r2, [r3, #20]
 			 printf("EN_ENC_LINEARIZE set to %d\r\n", EN_ENC_LINEARIZE);
 800425e:	4bb8      	ldr	r3, [pc, #736]	; (8004540 <process_user_input+0x384>)
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4619      	mov	r1, r3
 8004264:	48b7      	ldr	r0, [pc, #732]	; (8004544 <process_user_input+0x388>)
 8004266:	f008 f923 	bl	800c4b0 <iprintf>
 			 break;
 800426a:	e30d      	b.n	8004888 <process_user_input+0x6cc>
 		 case 'z':
 			 EN_ENC_FILTER = atoi(fsmstate->cmd_buff);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3308      	adds	r3, #8
 8004270:	4618      	mov	r0, r3
 8004272:	f007 fc6e 	bl	800bb52 <atoi>
 8004276:	4603      	mov	r3, r0
 8004278:	4ab1      	ldr	r2, [pc, #708]	; (8004540 <process_user_input+0x384>)
 800427a:	6113      	str	r3, [r2, #16]
 			 if (EN_ENC_FILTER!=0) { EN_ENC_FILTER = 1; }
 800427c:	4bb0      	ldr	r3, [pc, #704]	; (8004540 <process_user_input+0x384>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <process_user_input+0xce>
 8004284:	4bae      	ldr	r3, [pc, #696]	; (8004540 <process_user_input+0x384>)
 8004286:	2201      	movs	r2, #1
 8004288:	611a      	str	r2, [r3, #16]
			 printf("EN_ENC_FILTER set to %d\r\n", EN_ENC_FILTER);
 800428a:	4bad      	ldr	r3, [pc, #692]	; (8004540 <process_user_input+0x384>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	4619      	mov	r1, r3
 8004290:	48ad      	ldr	r0, [pc, #692]	; (8004548 <process_user_input+0x38c>)
 8004292:	f008 f90d 	bl	800c4b0 <iprintf>
			 break;
 8004296:	e2f7      	b.n	8004888 <process_user_input+0x6cc>
 		 case 'o':
			 R_PHASE = fmaxf(fminf(atof(fsmstate->cmd_buff), 10.0f), 0.0f);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3308      	adds	r3, #8
 800429c:	4618      	mov	r0, r3
 800429e:	f007 fc55 	bl	800bb4c <atof>
 80042a2:	ec53 2b10 	vmov	r2, r3, d0
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	f7fc fcbd 	bl	8000c28 <__aeabi_d2f>
 80042ae:	4603      	mov	r3, r0
 80042b0:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80042b4:	ee00 3a10 	vmov	s0, r3
 80042b8:	f00b fe0b 	bl	800fed2 <fminf>
 80042bc:	eef0 7a40 	vmov.f32	s15, s0
 80042c0:	eddf 0aa2 	vldr	s1, [pc, #648]	; 800454c <process_user_input+0x390>
 80042c4:	eeb0 0a67 	vmov.f32	s0, s15
 80042c8:	f00b fde8 	bl	800fe9c <fmaxf>
 80042cc:	eef0 7a40 	vmov.f32	s15, s0
 80042d0:	4b9f      	ldr	r3, [pc, #636]	; (8004550 <process_user_input+0x394>)
 80042d2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("R_PHASE set to %f\r\n", R_PHASE);
 80042d6:	4b9e      	ldr	r3, [pc, #632]	; (8004550 <process_user_input+0x394>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fc f954 	bl	8000588 <__aeabi_f2d>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	489b      	ldr	r0, [pc, #620]	; (8004554 <process_user_input+0x398>)
 80042e6:	f008 f8e3 	bl	800c4b0 <iprintf>
			 break;
 80042ea:	e2cd      	b.n	8004888 <process_user_input+0x6cc>
	 	 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3308      	adds	r3, #8
 80042f0:	4618      	mov	r0, r3
 80042f2:	f007 fc2b 	bl	800bb4c <atof>
 80042f6:	ec53 2b10 	vmov	r2, r3, d0
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fc fc93 	bl	8000c28 <__aeabi_d2f>
 8004302:	4603      	mov	r3, r0
 8004304:	eddf 0a94 	vldr	s1, [pc, #592]	; 8004558 <process_user_input+0x39c>
 8004308:	ee00 3a10 	vmov	s0, r3
 800430c:	f00b fde1 	bl	800fed2 <fminf>
 8004310:	eef0 7a40 	vmov.f32	s15, s0
 8004314:	eddf 0a91 	vldr	s1, [pc, #580]	; 800455c <process_user_input+0x3a0>
 8004318:	eeb0 0a67 	vmov.f32	s0, s15
 800431c:	f00b fdbe 	bl	800fe9c <fmaxf>
 8004320:	eef0 7a40 	vmov.f32	s15, s0
 8004324:	4b8a      	ldr	r3, [pc, #552]	; (8004550 <process_user_input+0x394>)
 8004326:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 800432a:	4b89      	ldr	r3, [pc, #548]	; (8004550 <process_user_input+0x394>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc f92a 	bl	8000588 <__aeabi_f2d>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4889      	ldr	r0, [pc, #548]	; (8004560 <process_user_input+0x3a4>)
 800433a:	f008 f8b9 	bl	800c4b0 <iprintf>
			 break;
 800433e:	e2a3      	b.n	8004888 <process_user_input+0x6cc>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3308      	adds	r3, #8
 8004344:	4618      	mov	r0, r3
 8004346:	f007 fc04 	bl	800bb52 <atoi>
 800434a:	4603      	mov	r3, r0
 800434c:	4a7c      	ldr	r2, [pc, #496]	; (8004540 <process_user_input+0x384>)
 800434e:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8004350:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <process_user_input+0x384>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4619      	mov	r1, r3
 8004356:	4883      	ldr	r0, [pc, #524]	; (8004564 <process_user_input+0x3a8>)
 8004358:	f008 f8aa 	bl	800c4b0 <iprintf>
			 break;
 800435c:	e294      	b.n	8004888 <process_user_input+0x6cc>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3308      	adds	r3, #8
 8004362:	4618      	mov	r0, r3
 8004364:	f007 fbf5 	bl	800bb52 <atoi>
 8004368:	4603      	mov	r3, r0
 800436a:	4a75      	ldr	r2, [pc, #468]	; (8004540 <process_user_input+0x384>)
 800436c:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 800436e:	4b74      	ldr	r3, [pc, #464]	; (8004540 <process_user_input+0x384>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	4619      	mov	r1, r3
 8004374:	487c      	ldr	r0, [pc, #496]	; (8004568 <process_user_input+0x3ac>)
 8004376:	f008 f89b 	bl	800c4b0 <iprintf>
			 break;
 800437a:	e285      	b.n	8004888 <process_user_input+0x6cc>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3308      	adds	r3, #8
 8004380:	4618      	mov	r0, r3
 8004382:	f007 fbe3 	bl	800bb4c <atof>
 8004386:	ec53 2b10 	vmov	r2, r3, d0
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	f7fc fc4b 	bl	8000c28 <__aeabi_d2f>
 8004392:	4603      	mov	r3, r0
 8004394:	eddf 0a75 	vldr	s1, [pc, #468]	; 800456c <process_user_input+0x3b0>
 8004398:	ee00 3a10 	vmov	s0, r3
 800439c:	f00b fd99 	bl	800fed2 <fminf>
 80043a0:	eef0 7a40 	vmov.f32	s15, s0
 80043a4:	eddf 0a69 	vldr	s1, [pc, #420]	; 800454c <process_user_input+0x390>
 80043a8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ac:	f00b fd76 	bl	800fe9c <fmaxf>
 80043b0:	eef0 7a40 	vmov.f32	s15, s0
 80043b4:	4b66      	ldr	r3, [pc, #408]	; (8004550 <process_user_input+0x394>)
 80043b6:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 80043ba:	4b65      	ldr	r3, [pc, #404]	; (8004550 <process_user_input+0x394>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc f8e2 	bl	8000588 <__aeabi_f2d>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4869      	ldr	r0, [pc, #420]	; (8004570 <process_user_input+0x3b4>)
 80043ca:	f008 f871 	bl	800c4b0 <iprintf>
			 break;
 80043ce:	e25b      	b.n	8004888 <process_user_input+0x6cc>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3308      	adds	r3, #8
 80043d4:	4618      	mov	r0, r3
 80043d6:	f007 fbb9 	bl	800bb4c <atof>
 80043da:	ec53 2b10 	vmov	r2, r3, d0
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fc fc21 	bl	8000c28 <__aeabi_d2f>
 80043e6:	4603      	mov	r3, r0
 80043e8:	eddf 0a62 	vldr	s1, [pc, #392]	; 8004574 <process_user_input+0x3b8>
 80043ec:	ee00 3a10 	vmov	s0, r3
 80043f0:	f00b fd6f 	bl	800fed2 <fminf>
 80043f4:	eef0 7a40 	vmov.f32	s15, s0
 80043f8:	eddf 0a54 	vldr	s1, [pc, #336]	; 800454c <process_user_input+0x390>
 80043fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004400:	f00b fd4c 	bl	800fe9c <fmaxf>
 8004404:	eef0 7a40 	vmov.f32	s15, s0
 8004408:	4b51      	ldr	r3, [pc, #324]	; (8004550 <process_user_input+0x394>)
 800440a:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800440e:	4b50      	ldr	r3, [pc, #320]	; (8004550 <process_user_input+0x394>)
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc f8b8 	bl	8000588 <__aeabi_f2d>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4856      	ldr	r0, [pc, #344]	; (8004578 <process_user_input+0x3bc>)
 800441e:	f008 f847 	bl	800c4b0 <iprintf>
			 break;
 8004422:	e231      	b.n	8004888 <process_user_input+0x6cc>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3308      	adds	r3, #8
 8004428:	4618      	mov	r0, r3
 800442a:	f007 fb92 	bl	800bb52 <atoi>
 800442e:	4603      	mov	r3, r0
 8004430:	4a43      	ldr	r2, [pc, #268]	; (8004540 <process_user_input+0x384>)
 8004432:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8004434:	4b42      	ldr	r3, [pc, #264]	; (8004540 <process_user_input+0x384>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4619      	mov	r1, r3
 800443a:	4850      	ldr	r0, [pc, #320]	; (800457c <process_user_input+0x3c0>)
 800443c:	f008 f838 	bl	800c4b0 <iprintf>
			 break;
 8004440:	e222      	b.n	8004888 <process_user_input+0x6cc>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3308      	adds	r3, #8
 8004446:	4618      	mov	r0, r3
 8004448:	f007 fb80 	bl	800bb4c <atof>
 800444c:	ec53 2b10 	vmov	r2, r3, d0
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	f7fc fbe8 	bl	8000c28 <__aeabi_d2f>
 8004458:	4603      	mov	r3, r0
 800445a:	eddf 0a49 	vldr	s1, [pc, #292]	; 8004580 <process_user_input+0x3c4>
 800445e:	ee00 3a10 	vmov	s0, r3
 8004462:	f00b fd36 	bl	800fed2 <fminf>
 8004466:	eef0 7a40 	vmov.f32	s15, s0
 800446a:	eddf 0a38 	vldr	s1, [pc, #224]	; 800454c <process_user_input+0x390>
 800446e:	eeb0 0a67 	vmov.f32	s0, s15
 8004472:	f00b fd13 	bl	800fe9c <fmaxf>
 8004476:	eef0 7a40 	vmov.f32	s15, s0
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <process_user_input+0x394>)
 800447c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8004480:	4b33      	ldr	r3, [pc, #204]	; (8004550 <process_user_input+0x394>)
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	4618      	mov	r0, r3
 8004486:	f7fc f87f 	bl	8000588 <__aeabi_f2d>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	483d      	ldr	r0, [pc, #244]	; (8004584 <process_user_input+0x3c8>)
 8004490:	f008 f80e 	bl	800c4b0 <iprintf>
			 break;
 8004494:	e1f8      	b.n	8004888 <process_user_input+0x6cc>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3308      	adds	r3, #8
 800449a:	4618      	mov	r0, r3
 800449c:	f007 fb56 	bl	800bb4c <atof>
 80044a0:	ec53 2b10 	vmov	r2, r3, d0
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7fc fbbe 	bl	8000c28 <__aeabi_d2f>
 80044ac:	4603      	mov	r3, r0
 80044ae:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004588 <process_user_input+0x3cc>
 80044b2:	ee00 3a10 	vmov	s0, r3
 80044b6:	f00b fd0c 	bl	800fed2 <fminf>
 80044ba:	eef0 7a40 	vmov.f32	s15, s0
 80044be:	eddf 0a23 	vldr	s1, [pc, #140]	; 800454c <process_user_input+0x390>
 80044c2:	eeb0 0a67 	vmov.f32	s0, s15
 80044c6:	f00b fce9 	bl	800fe9c <fmaxf>
 80044ca:	eef0 7a40 	vmov.f32	s15, s0
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <process_user_input+0x394>)
 80044d0:	edc3 7a04 	vstr	s15, [r3, #16]
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <process_user_input+0x394>)
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc f855 	bl	8000588 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	482a      	ldr	r0, [pc, #168]	; (800458c <process_user_input+0x3d0>)
 80044e4:	f007 ffe4 	bl	800c4b0 <iprintf>
			 break;
 80044e8:	e1ce      	b.n	8004888 <process_user_input+0x6cc>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3308      	adds	r3, #8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f007 fb2c 	bl	800bb4c <atof>
 80044f4:	ec53 2b10 	vmov	r2, r3, d0
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	f7fc fb94 	bl	8000c28 <__aeabi_d2f>
 8004500:	4603      	mov	r3, r0
 8004502:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004506:	ee00 3a10 	vmov	s0, r3
 800450a:	f00b fce2 	bl	800fed2 <fminf>
 800450e:	eef0 7a40 	vmov.f32	s15, s0
 8004512:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800454c <process_user_input+0x390>
 8004516:	eeb0 0a67 	vmov.f32	s0, s15
 800451a:	f00b fcbf 	bl	800fe9c <fmaxf>
 800451e:	eef0 7a40 	vmov.f32	s15, s0
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <process_user_input+0x394>)
 8004524:	edc3 7a05 	vstr	s15, [r3, #20]
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <process_user_input+0x394>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc f82b 	bl	8000588 <__aeabi_f2d>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4816      	ldr	r0, [pc, #88]	; (8004590 <process_user_input+0x3d4>)
 8004538:	f007 ffba 	bl	800c4b0 <iprintf>
			 break;
 800453c:	e1a4      	b.n	8004888 <process_user_input+0x6cc>
 800453e:	bf00      	nop
 8004540:	2000043c 	.word	0x2000043c
 8004544:	08010ed8 	.word	0x08010ed8
 8004548:	08010ef8 	.word	0x08010ef8
 800454c:	00000000 	.word	0x00000000
 8004550:	2000033c 	.word	0x2000033c
 8004554:	08010f14 	.word	0x08010f14
 8004558:	44fa0000 	.word	0x44fa0000
 800455c:	42c80000 	.word	0x42c80000
 8004560:	08010f28 	.word	0x08010f28
 8004564:	08010f3c 	.word	0x08010f3c
 8004568:	08010f50 	.word	0x08010f50
 800456c:	42700000 	.word	0x42700000
 8004570:	08010f68 	.word	0x08010f68
 8004574:	42040000 	.word	0x42040000
 8004578:	08010f7c 	.word	0x08010f7c
 800457c:	08010f94 	.word	0x08010f94
 8004580:	43160000 	.word	0x43160000
 8004584:	08010fac 	.word	0x08010fac
 8004588:	42200000 	.word	0x42200000
 800458c:	08010fc4 	.word	0x08010fc4
 8004590:	08010fdc 	.word	0x08010fdc
 8004594:	3a83126f 	.word	0x3a83126f
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3308      	adds	r3, #8
 800459c:	4618      	mov	r0, r3
 800459e:	f007 fad5 	bl	800bb4c <atof>
 80045a2:	ec53 2b10 	vmov	r2, r3, d0
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	f7fc fb3d 	bl	8000c28 <__aeabi_d2f>
 80045ae:	4603      	mov	r3, r0
 80045b0:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004594 <process_user_input+0x3d8>
 80045b4:	ee00 3a10 	vmov	s0, r3
 80045b8:	f00b fc70 	bl	800fe9c <fmaxf>
 80045bc:	eef0 7a40 	vmov.f32	s15, s0
 80045c0:	4bc8      	ldr	r3, [pc, #800]	; (80048e4 <process_user_input+0x728>)
 80045c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			 printf("GR set to %f\r\n", GR);
 80045c6:	4bc7      	ldr	r3, [pc, #796]	; (80048e4 <process_user_input+0x728>)
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fb ffdc 	bl	8000588 <__aeabi_f2d>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	48c4      	ldr	r0, [pc, #784]	; (80048e8 <process_user_input+0x72c>)
 80045d6:	f007 ff6b 	bl	800c4b0 <iprintf>
			 break;
 80045da:	e155      	b.n	8004888 <process_user_input+0x6cc>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3308      	adds	r3, #8
 80045e0:	4618      	mov	r0, r3
 80045e2:	f007 fab3 	bl	800bb4c <atof>
 80045e6:	ec53 2b10 	vmov	r2, r3, d0
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	f7fc fb1b 	bl	8000c28 <__aeabi_d2f>
 80045f2:	4603      	mov	r3, r0
 80045f4:	eddf 0abd 	vldr	s1, [pc, #756]	; 80048ec <process_user_input+0x730>
 80045f8:	ee00 3a10 	vmov	s0, r3
 80045fc:	f00b fc4e 	bl	800fe9c <fmaxf>
 8004600:	eef0 7a40 	vmov.f32	s15, s0
 8004604:	4bb7      	ldr	r3, [pc, #732]	; (80048e4 <process_user_input+0x728>)
 8004606:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 800460a:	4bb6      	ldr	r3, [pc, #728]	; (80048e4 <process_user_input+0x728>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	4618      	mov	r0, r3
 8004610:	f7fb ffba 	bl	8000588 <__aeabi_f2d>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	48b5      	ldr	r0, [pc, #724]	; (80048f0 <process_user_input+0x734>)
 800461a:	f007 ff49 	bl	800c4b0 <iprintf>
			 break;
 800461e:	e133      	b.n	8004888 <process_user_input+0x6cc>

		 case 'j':
			 L_D = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3308      	adds	r3, #8
 8004624:	4618      	mov	r0, r3
 8004626:	f007 fa91 	bl	800bb4c <atof>
 800462a:	ec53 2b10 	vmov	r2, r3, d0
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	f7fc faf9 	bl	8000c28 <__aeabi_d2f>
 8004636:	4603      	mov	r3, r0
 8004638:	eddf 0aae 	vldr	s1, [pc, #696]	; 80048f4 <process_user_input+0x738>
 800463c:	ee00 3a10 	vmov	s0, r3
 8004640:	f00b fc47 	bl	800fed2 <fminf>
 8004644:	eef0 7a40 	vmov.f32	s15, s0
 8004648:	eddf 0aab 	vldr	s1, [pc, #684]	; 80048f8 <process_user_input+0x73c>
 800464c:	eeb0 0a67 	vmov.f32	s0, s15
 8004650:	f00b fc24 	bl	800fe9c <fmaxf>
 8004654:	eef0 7a40 	vmov.f32	s15, s0
 8004658:	4ba2      	ldr	r3, [pc, #648]	; (80048e4 <process_user_input+0x728>)
 800465a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("L_D set to %f\r\n", L_D);
 800465e:	4ba1      	ldr	r3, [pc, #644]	; (80048e4 <process_user_input+0x728>)
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	4618      	mov	r0, r3
 8004664:	f7fb ff90 	bl	8000588 <__aeabi_f2d>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	48a3      	ldr	r0, [pc, #652]	; (80048fc <process_user_input+0x740>)
 800466e:	f007 ff1f 	bl	800c4b0 <iprintf>
			 break;
 8004672:	e109      	b.n	8004888 <process_user_input+0x6cc>
		 case 'e':
			 L_Q = fmaxf(fminf(atof(fsmstate->cmd_buff), 0.1f), 0.0f);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3308      	adds	r3, #8
 8004678:	4618      	mov	r0, r3
 800467a:	f007 fa67 	bl	800bb4c <atof>
 800467e:	ec53 2b10 	vmov	r2, r3, d0
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	f7fc facf 	bl	8000c28 <__aeabi_d2f>
 800468a:	4603      	mov	r3, r0
 800468c:	eddf 0a99 	vldr	s1, [pc, #612]	; 80048f4 <process_user_input+0x738>
 8004690:	ee00 3a10 	vmov	s0, r3
 8004694:	f00b fc1d 	bl	800fed2 <fminf>
 8004698:	eef0 7a40 	vmov.f32	s15, s0
 800469c:	eddf 0a96 	vldr	s1, [pc, #600]	; 80048f8 <process_user_input+0x73c>
 80046a0:	eeb0 0a67 	vmov.f32	s0, s15
 80046a4:	f00b fbfa 	bl	800fe9c <fmaxf>
 80046a8:	eef0 7a40 	vmov.f32	s15, s0
 80046ac:	4b8d      	ldr	r3, [pc, #564]	; (80048e4 <process_user_input+0x728>)
 80046ae:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("L_Q set to %f\r\n", L_Q);
 80046b2:	4b8c      	ldr	r3, [pc, #560]	; (80048e4 <process_user_input+0x728>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fb ff66 	bl	8000588 <__aeabi_f2d>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	488f      	ldr	r0, [pc, #572]	; (8004900 <process_user_input+0x744>)
 80046c2:	f007 fef5 	bl	800c4b0 <iprintf>
			 break;
 80046c6:	e0df      	b.n	8004888 <process_user_input+0x6cc>
		 case 'n':
			 PPAIRS = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3308      	adds	r3, #8
 80046cc:	4618      	mov	r0, r3
 80046ce:	f007 fa3d 	bl	800bb4c <atof>
 80046d2:	ec53 2b10 	vmov	r2, r3, d0
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fc faa5 	bl	8000c28 <__aeabi_d2f>
 80046de:	4603      	mov	r3, r0
 80046e0:	eddf 0a88 	vldr	s1, [pc, #544]	; 8004904 <process_user_input+0x748>
 80046e4:	ee00 3a10 	vmov	s0, r3
 80046e8:	f00b fbf3 	bl	800fed2 <fminf>
 80046ec:	eef0 7a40 	vmov.f32	s15, s0
 80046f0:	eddf 0a81 	vldr	s1, [pc, #516]	; 80048f8 <process_user_input+0x73c>
 80046f4:	eeb0 0a67 	vmov.f32	s0, s15
 80046f8:	f00b fbd0 	bl	800fe9c <fmaxf>
 80046fc:	eef0 7a40 	vmov.f32	s15, s0
 8004700:	4b78      	ldr	r3, [pc, #480]	; (80048e4 <process_user_input+0x728>)
 8004702:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 if (PPAIRS>40.0) {PPAIRS=40.0f;}
 8004706:	4b77      	ldr	r3, [pc, #476]	; (80048e4 <process_user_input+0x728>)
 8004708:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800470c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004904 <process_user_input+0x748>
 8004710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004718:	dd02      	ble.n	8004720 <process_user_input+0x564>
 800471a:	4b72      	ldr	r3, [pc, #456]	; (80048e4 <process_user_input+0x728>)
 800471c:	4a7a      	ldr	r2, [pc, #488]	; (8004908 <process_user_input+0x74c>)
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
			 PPAIRS = (float)( (int)PPAIRS ); // remove any decimal part
 8004720:	4b70      	ldr	r3, [pc, #448]	; (80048e4 <process_user_input+0x728>)
 8004722:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800472a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800472e:	4b6d      	ldr	r3, [pc, #436]	; (80048e4 <process_user_input+0x728>)
 8004730:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("PPAIRS set to %f\r\n", PPAIRS);
 8004734:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <process_user_input+0x728>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb ff25 	bl	8000588 <__aeabi_f2d>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4872      	ldr	r0, [pc, #456]	; (800490c <process_user_input+0x750>)
 8004744:	f007 feb4 	bl	800c4b0 <iprintf>
			 break;
 8004748:	e09e      	b.n	8004888 <process_user_input+0x6cc>

		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3308      	adds	r3, #8
 800474e:	4618      	mov	r0, r3
 8004750:	f007 f9fc 	bl	800bb4c <atof>
 8004754:	ec53 2b10 	vmov	r2, r3, d0
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f7fc fa64 	bl	8000c28 <__aeabi_d2f>
 8004760:	4603      	mov	r3, r0
 8004762:	eddf 0a65 	vldr	s1, [pc, #404]	; 80048f8 <process_user_input+0x73c>
 8004766:	ee00 3a10 	vmov	s0, r3
 800476a:	f00b fb97 	bl	800fe9c <fmaxf>
 800476e:	eef0 7a40 	vmov.f32	s15, s0
 8004772:	4b5c      	ldr	r3, [pc, #368]	; (80048e4 <process_user_input+0x728>)
 8004774:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8004778:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <process_user_input+0x728>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb ff03 	bl	8000588 <__aeabi_f2d>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4862      	ldr	r0, [pc, #392]	; (8004910 <process_user_input+0x754>)
 8004788:	f007 fe92 	bl	800c4b0 <iprintf>
			 break;
 800478c:	e07c      	b.n	8004888 <process_user_input+0x6cc>
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3308      	adds	r3, #8
 8004792:	4618      	mov	r0, r3
 8004794:	f007 f9da 	bl	800bb4c <atof>
 8004798:	ec53 2b10 	vmov	r2, r3, d0
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc fa42 	bl	8000c28 <__aeabi_d2f>
 80047a4:	4603      	mov	r3, r0
 80047a6:	eddf 0a54 	vldr	s1, [pc, #336]	; 80048f8 <process_user_input+0x73c>
 80047aa:	ee00 3a10 	vmov	s0, r3
 80047ae:	f00b fb75 	bl	800fe9c <fmaxf>
 80047b2:	eef0 7a40 	vmov.f32	s15, s0
 80047b6:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <process_user_input+0x728>)
 80047b8:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80047bc:	4b49      	ldr	r3, [pc, #292]	; (80048e4 <process_user_input+0x728>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fb fee1 	bl	8000588 <__aeabi_f2d>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4852      	ldr	r0, [pc, #328]	; (8004914 <process_user_input+0x758>)
 80047cc:	f007 fe70 	bl	800c4b0 <iprintf>
			 break;
 80047d0:	e05a      	b.n	8004888 <process_user_input+0x6cc>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3308      	adds	r3, #8
 80047d6:	4618      	mov	r0, r3
 80047d8:	f007 f9b8 	bl	800bb4c <atof>
 80047dc:	ec53 2b10 	vmov	r2, r3, d0
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	f7fc fa20 	bl	8000c28 <__aeabi_d2f>
 80047e8:	4603      	mov	r3, r0
 80047ea:	eddf 0a43 	vldr	s1, [pc, #268]	; 80048f8 <process_user_input+0x73c>
 80047ee:	ee00 3a10 	vmov	s0, r3
 80047f2:	f00b fb53 	bl	800fe9c <fmaxf>
 80047f6:	eef0 7a40 	vmov.f32	s15, s0
 80047fa:	4b3a      	ldr	r3, [pc, #232]	; (80048e4 <process_user_input+0x728>)
 80047fc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			 P_MIN = -P_MAX;
 8004800:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <process_user_input+0x728>)
 8004802:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004806:	eef1 7a67 	vneg.f32	s15, s15
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <process_user_input+0x728>)
 800480c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("P_MAX set to %f\r\n", P_MAX);
 8004810:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <process_user_input+0x728>)
 8004812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb feb7 	bl	8000588 <__aeabi_f2d>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	483e      	ldr	r0, [pc, #248]	; (8004918 <process_user_input+0x75c>)
 8004820:	f007 fe46 	bl	800c4b0 <iprintf>
			 break;
 8004824:	e030      	b.n	8004888 <process_user_input+0x6cc>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3308      	adds	r3, #8
 800482a:	4618      	mov	r0, r3
 800482c:	f007 f98e 	bl	800bb4c <atof>
 8004830:	ec53 2b10 	vmov	r2, r3, d0
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	f7fc f9f6 	bl	8000c28 <__aeabi_d2f>
 800483c:	4603      	mov	r3, r0
 800483e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80048f8 <process_user_input+0x73c>
 8004842:	ee00 3a10 	vmov	s0, r3
 8004846:	f00b fb29 	bl	800fe9c <fmaxf>
 800484a:	eef0 7a40 	vmov.f32	s15, s0
 800484e:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <process_user_input+0x728>)
 8004850:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			 V_MIN = -V_MAX;
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <process_user_input+0x728>)
 8004856:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800485a:	eef1 7a67 	vneg.f32	s15, s15
 800485e:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <process_user_input+0x728>)
 8004860:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			 printf("V_MAX set to %f\r\n", V_MAX);
 8004864:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <process_user_input+0x728>)
 8004866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004868:	4618      	mov	r0, r3
 800486a:	f7fb fe8d 	bl	8000588 <__aeabi_f2d>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	482a      	ldr	r0, [pc, #168]	; (800491c <process_user_input+0x760>)
 8004874:	f007 fe1c 	bl	800c4b0 <iprintf>
			 break;
 8004878:	e006      	b.n	8004888 <process_user_input+0x6cc>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", (char)fsmstate->cmd_buff[0]);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	7a1b      	ldrb	r3, [r3, #8]
 800487e:	4619      	mov	r1, r3
 8004880:	4827      	ldr	r0, [pc, #156]	; (8004920 <process_user_input+0x764>)
 8004882:	f007 fe15 	bl	800c4b0 <iprintf>
			 break;
 8004886:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8004888:	4b26      	ldr	r3, [pc, #152]	; (8004924 <process_user_input+0x768>)
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	9200      	str	r2, [sp, #0]
 800488e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004890:	f001 fa97 	bl	8005dc2 <preference_writer_ready>
 8004894:	4603      	mov	r3, r0
 8004896:	f083 0301 	eor.w	r3, r3, #1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <process_user_input+0x6ea>
 80048a0:	4820      	ldr	r0, [pc, #128]	; (8004924 <process_user_input+0x768>)
 80048a2:	f001 fa7f 	bl	8005da4 <preference_writer_open>
	 preference_writer_flush(&prefs);
 80048a6:	481f      	ldr	r0, [pc, #124]	; (8004924 <process_user_input+0x768>)
 80048a8:	f001 fa98 	bl	8005ddc <preference_writer_flush>
	 preference_writer_close(&prefs);
 80048ac:	481d      	ldr	r0, [pc, #116]	; (8004924 <process_user_input+0x768>)
 80048ae:	f001 fb13 	bl	8005ed8 <preference_writer_close>
	 preference_writer_load(prefs);
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <process_user_input+0x768>)
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	9200      	str	r2, [sp, #0]
 80048b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048ba:	f001 facb 	bl	8005e54 <preference_writer_load>

	 enter_setup_state();
 80048be:	f7ff f9c7 	bl	8003c50 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	741a      	strb	r2, [r3, #16]
	 fsmstate->cmd_id = 0;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	745a      	strb	r2, [r3, #17]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3308      	adds	r3, #8
 80048d2:	2208      	movs	r2, #8
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f007 f978 	bl	800bbcc <memset>
 }
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	2000033c 	.word	0x2000033c
 80048e8:	08010ff0 	.word	0x08010ff0
 80048ec:	38d1b717 	.word	0x38d1b717
 80048f0:	08011000 	.word	0x08011000
 80048f4:	3dcccccd 	.word	0x3dcccccd
 80048f8:	00000000 	.word	0x00000000
 80048fc:	08011010 	.word	0x08011010
 8004900:	08011020 	.word	0x08011020
 8004904:	42200000 	.word	0x42200000
 8004908:	42200000 	.word	0x42200000
 800490c:	08011030 	.word	0x08011030
 8004910:	08011044 	.word	0x08011044
 8004914:	08011058 	.word	0x08011058
 8004918:	0801106c 	.word	0x0801106c
 800491c:	08011080 	.word	0x08011080
 8004920:	08011094 	.word	0x08011094
 8004924:	2000083c 	.word	0x2000083c

08004928 <reset_flash_values>:


 void reset_flash_values(){
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af02      	add	r7, sp, #8

	PHASE_ORDER = 0;
 800492e:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <reset_flash_values+0x108>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
	CAN_ID = 1;
 8004934:	4b3e      	ldr	r3, [pc, #248]	; (8004a30 <reset_flash_values+0x108>)
 8004936:	2201      	movs	r2, #1
 8004938:	605a      	str	r2, [r3, #4]
	CAN_MASTER = 0;
 800493a:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <reset_flash_values+0x108>)
 800493c:	2200      	movs	r2, #0
 800493e:	609a      	str	r2, [r3, #8]
	CAN_TIMEOUT = 1000;
 8004940:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <reset_flash_values+0x108>)
 8004942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004946:	60da      	str	r2, [r3, #12]
	EN_ENC_FILTER = 0;
 8004948:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <reset_flash_values+0x108>)
 800494a:	2200      	movs	r2, #0
 800494c:	611a      	str	r2, [r3, #16]
	EN_ENC_LINEARIZE = 0;
 800494e:	4b38      	ldr	r3, [pc, #224]	; (8004a30 <reset_flash_values+0x108>)
 8004950:	2200      	movs	r2, #0
 8004952:	615a      	str	r2, [r3, #20]
	E_ZERO = 0;
 8004954:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <reset_flash_values+0x108>)
 8004956:	2200      	movs	r2, #0
 8004958:	61da      	str	r2, [r3, #28]
	M_ZERO = 0;
 800495a:	4b35      	ldr	r3, [pc, #212]	; (8004a30 <reset_flash_values+0x108>)
 800495c:	2200      	movs	r2, #0
 800495e:	619a      	str	r2, [r3, #24]

	I_BW = 1000;
 8004960:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <reset_flash_values+0x10c>)
 8004962:	4a35      	ldr	r2, [pc, #212]	; (8004a38 <reset_flash_values+0x110>)
 8004964:	609a      	str	r2, [r3, #8]
	I_MAX=40;
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <reset_flash_values+0x10c>)
 8004968:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <reset_flash_values+0x114>)
 800496a:	60da      	str	r2, [r3, #12]
	I_MAX_CONT = 14.0f;
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <reset_flash_values+0x10c>)
 800496e:	4a34      	ldr	r2, [pc, #208]	; (8004a40 <reset_flash_values+0x118>)
 8004970:	611a      	str	r2, [r3, #16]
	I_CAL = 5.0f;
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <reset_flash_values+0x10c>)
 8004974:	4a33      	ldr	r2, [pc, #204]	; (8004a44 <reset_flash_values+0x11c>)
 8004976:	615a      	str	r2, [r3, #20]
	I_FW_MAX=0;
 8004978:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <reset_flash_values+0x10c>)
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	619a      	str	r2, [r3, #24]

//	K_SCALE = 0.000133f;          // K_loop/Loop BW (Hz) 0.0042
//	KI_D = 0.0373f;                // PI zero, in radians per sample
//	KI_Q = 0.0373f;                // PI zero, in radians per sample

	PPAIRS = 21.0f;
 8004980:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <reset_flash_values+0x10c>)
 8004982:	4a31      	ldr	r2, [pc, #196]	; (8004a48 <reset_flash_values+0x120>)
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
	GR = 6.0f;
 8004986:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <reset_flash_values+0x10c>)
 8004988:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <reset_flash_values+0x124>)
 800498a:	635a      	str	r2, [r3, #52]	; 0x34
	KT = 1.0f;
 800498c:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <reset_flash_values+0x10c>)
 800498e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
	L_D = 0.000003f;
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <reset_flash_values+0x10c>)
 8004996:	4a2e      	ldr	r2, [pc, #184]	; (8004a50 <reset_flash_values+0x128>)
 8004998:	63da      	str	r2, [r3, #60]	; 0x3c
	L_Q = 0.000003f;
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <reset_flash_values+0x10c>)
 800499c:	4a2c      	ldr	r2, [pc, #176]	; (8004a50 <reset_flash_values+0x128>)
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
	R_PHASE = 0.433f;
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <reset_flash_values+0x10c>)
 80049a2:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <reset_flash_values+0x12c>)
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
	R_NOMINAL = 0.0f;
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <reset_flash_values+0x10c>)
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	649a      	str	r2, [r3, #72]	; 0x48

	R_TH = 1.25f;
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <reset_flash_values+0x10c>)
 80049b0:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <reset_flash_values+0x130>)
 80049b2:	64da      	str	r2, [r3, #76]	; 0x4c
	C_TH = 0.0f;
 80049b4:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <reset_flash_values+0x10c>)
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	651a      	str	r2, [r3, #80]	; 0x50
	INV_M_TH = 0.02825f;
 80049bc:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <reset_flash_values+0x10c>)
 80049be:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <reset_flash_values+0x134>)
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
	T_AMBIENT = 25.0f;
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <reset_flash_values+0x10c>)
 80049c4:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <reset_flash_values+0x138>)
 80049c6:	659a      	str	r2, [r3, #88]	; 0x58
	TEMP_MAX = 125.0f;
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <reset_flash_values+0x10c>)
 80049ca:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <reset_flash_values+0x13c>)
 80049cc:	65da      	str	r2, [r3, #92]	; 0x5c

	P_MIN = -12.5f;
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <reset_flash_values+0x10c>)
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <reset_flash_values+0x140>)
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60
	P_MAX = 12.5f;
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <reset_flash_values+0x10c>)
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <reset_flash_values+0x144>)
 80049d8:	665a      	str	r2, [r3, #100]	; 0x64
	V_MIN = -65.0f;
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <reset_flash_values+0x10c>)
 80049dc:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <reset_flash_values+0x148>)
 80049de:	669a      	str	r2, [r3, #104]	; 0x68
	V_MAX = 65.0f;
 80049e0:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <reset_flash_values+0x10c>)
 80049e2:	4a24      	ldr	r2, [pc, #144]	; (8004a74 <reset_flash_values+0x14c>)
 80049e4:	66da      	str	r2, [r3, #108]	; 0x6c
	KP_MAX = 500.0f;
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <reset_flash_values+0x10c>)
 80049e8:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <reset_flash_values+0x150>)
 80049ea:	671a      	str	r2, [r3, #112]	; 0x70
	KD_MAX = 10.0f;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <reset_flash_values+0x10c>)
 80049ee:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <reset_flash_values+0x154>)
 80049f0:	675a      	str	r2, [r3, #116]	; 0x74

	/* Write new settings to flash */
	if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80049f2:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <reset_flash_values+0x158>)
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	9200      	str	r2, [sp, #0]
 80049f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049fa:	f001 f9e2 	bl	8005dc2 <preference_writer_ready>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f083 0301 	eor.w	r3, r3, #1
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <reset_flash_values+0xe8>
 8004a0a:	481d      	ldr	r0, [pc, #116]	; (8004a80 <reset_flash_values+0x158>)
 8004a0c:	f001 f9ca 	bl	8005da4 <preference_writer_open>
	preference_writer_flush(&prefs);
 8004a10:	481b      	ldr	r0, [pc, #108]	; (8004a80 <reset_flash_values+0x158>)
 8004a12:	f001 f9e3 	bl	8005ddc <preference_writer_flush>
	preference_writer_close(&prefs);
 8004a16:	481a      	ldr	r0, [pc, #104]	; (8004a80 <reset_flash_values+0x158>)
 8004a18:	f001 fa5e 	bl	8005ed8 <preference_writer_close>
	preference_writer_load(prefs);
 8004a1c:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <reset_flash_values+0x158>)
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	9200      	str	r2, [sp, #0]
 8004a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a24:	f001 fa16 	bl	8005e54 <preference_writer_load>

 }
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	2000043c 	.word	0x2000043c
 8004a34:	2000033c 	.word	0x2000033c
 8004a38:	447a0000 	.word	0x447a0000
 8004a3c:	42200000 	.word	0x42200000
 8004a40:	41600000 	.word	0x41600000
 8004a44:	40a00000 	.word	0x40a00000
 8004a48:	41a80000 	.word	0x41a80000
 8004a4c:	40c00000 	.word	0x40c00000
 8004a50:	3649539c 	.word	0x3649539c
 8004a54:	3eddb22d 	.word	0x3eddb22d
 8004a58:	3fa00000 	.word	0x3fa00000
 8004a5c:	3ce76c8b 	.word	0x3ce76c8b
 8004a60:	41c80000 	.word	0x41c80000
 8004a64:	42fa0000 	.word	0x42fa0000
 8004a68:	c1480000 	.word	0xc1480000
 8004a6c:	41480000 	.word	0x41480000
 8004a70:	c2820000 	.word	0xc2820000
 8004a74:	42820000 	.word	0x42820000
 8004a78:	43fa0000 	.word	0x43fa0000
 8004a7c:	41200000 	.word	0x41200000
 8004a80:	2000083c 	.word	0x2000083c

08004a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	60da      	str	r2, [r3, #12]
 8004a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	4a37      	ldr	r2, [pc, #220]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004aa4:	f043 0304 	orr.w	r3, r3, #4
 8004aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aaa:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	4a30      	ldr	r2, [pc, #192]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac6:	4b2e      	ldr	r3, [pc, #184]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae2:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004af8:	f043 0302 	orr.w	r3, r3, #2
 8004afc:	6313      	str	r3, [r2, #48]	; 0x30
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <MX_GPIO_Init+0xfc>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin, GPIO_PIN_RESET);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f648 0110 	movw	r1, #34832	; 0x8810
 8004b10:	481c      	ldr	r0, [pc, #112]	; (8004b84 <MX_GPIO_Init+0x100>)
 8004b12:	f003 fd5b 	bl	80085cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8004b16:	2200      	movs	r2, #0
 8004b18:	2120      	movs	r1, #32
 8004b1a:	481b      	ldr	r0, [pc, #108]	; (8004b88 <MX_GPIO_Init+0x104>)
 8004b1c:	f003 fd56 	bl	80085cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	4619      	mov	r1, r3
 8004b36:	4814      	ldr	r0, [pc, #80]	; (8004b88 <MX_GPIO_Init+0x104>)
 8004b38:	f003 fbb4 	bl	80082a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_11|SPI3_CS_Pin;
 8004b3c:	f648 0310 	movw	r3, #34832	; 0x8810
 8004b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	4619      	mov	r1, r3
 8004b54:	480b      	ldr	r0, [pc, #44]	; (8004b84 <MX_GPIO_Init+0x100>)
 8004b56:	f003 fba5 	bl	80082a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b66:	2303      	movs	r3, #3
 8004b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4805      	ldr	r0, [pc, #20]	; (8004b88 <MX_GPIO_Init+0x104>)
 8004b72:	f003 fb97 	bl	80082a4 <HAL_GPIO_Init>

}
 8004b76:	bf00      	nop
 8004b78:	3728      	adds	r7, #40	; 0x28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	40020000 	.word	0x40020000
 8004b88:	40020800 	.word	0x40020800
 8004b8c:	00000000 	.word	0x00000000

08004b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b96:	f002 f91b 	bl	8006dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b9a:	f000 fbf9 	bl	8005390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b9e:	f7ff ff71 	bl	8004a84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004ba2:	f002 f84d 	bl	8006c40 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004ba6:	f001 fe53 	bl	8006850 <MX_TIM1_Init>
  MX_CAN1_Init();
 8004baa:	f7fd f90f 	bl	8001dcc <MX_CAN1_Init>
  MX_SPI1_Init();
 8004bae:	f001 f9a3 	bl	8005ef8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8004bb2:	f001 f9d9 	bl	8005f68 <MX_SPI3_Init>
  MX_ADC1_Init();
 8004bb6:	f7fc fa3f 	bl	8001038 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004bba:	f7fc faa7 	bl	800110c <MX_ADC2_Init>
  MX_ADC3_Init();
 8004bbe:	f7fc faef 	bl	80011a0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8004bc2:	f001 fefd 	bl	80069c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004bc6:	f001 ff47 	bl	8006a58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // enable this to use delay_us() function
 8004bca:	48ac      	ldr	r0, [pc, #688]	; (8004e7c <main+0x2ec>)
 8004bcc:	f004 fe96 	bl	80098fc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); // enable this to time functions in us
 8004bd0:	48ab      	ldr	r0, [pc, #684]	; (8004e80 <main+0x2f0>)
 8004bd2:	f004 fe93 	bl	80098fc <HAL_TIM_Base_Start>

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8004bd6:	2106      	movs	r1, #6
 8004bd8:	48aa      	ldr	r0, [pc, #680]	; (8004e84 <main+0x2f4>)
 8004bda:	f001 f8d2 	bl	8005d82 <preference_writer_init>
  preference_writer_load(prefs);
 8004bde:	4ba9      	ldr	r3, [pc, #676]	; (8004e84 <main+0x2f4>)
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	9200      	str	r2, [sp, #0]
 8004be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004be6:	f001 f935 	bl	8005e54 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(PHASE_ORDER==-1){PHASE_ORDER = 0;};
 8004bea:	4ba7      	ldr	r3, [pc, #668]	; (8004e88 <main+0x2f8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf2:	d102      	bne.n	8004bfa <main+0x6a>
 8004bf4:	4ba4      	ldr	r3, [pc, #656]	; (8004e88 <main+0x2f8>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004bfa:	4ba3      	ldr	r3, [pc, #652]	; (8004e88 <main+0x2f8>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c02:	d102      	bne.n	8004c0a <main+0x7a>
 8004c04:	4ba0      	ldr	r3, [pc, #640]	; (8004e88 <main+0x2f8>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004c0a:	4b9f      	ldr	r3, [pc, #636]	; (8004e88 <main+0x2f8>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c12:	d102      	bne.n	8004c1a <main+0x8a>
 8004c14:	4b9c      	ldr	r3, [pc, #624]	; (8004e88 <main+0x2f8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8004c1a:	4b9b      	ldr	r3, [pc, #620]	; (8004e88 <main+0x2f8>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c22:	d103      	bne.n	8004c2c <main+0x9c>
 8004c24:	4b98      	ldr	r3, [pc, #608]	; (8004e88 <main+0x2f8>)
 8004c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c2a:	60da      	str	r2, [r3, #12]
  if(EN_ENC_FILTER ==-1){EN_ENC_FILTER = 0;}
 8004c2c:	4b96      	ldr	r3, [pc, #600]	; (8004e88 <main+0x2f8>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c34:	d102      	bne.n	8004c3c <main+0xac>
 8004c36:	4b94      	ldr	r3, [pc, #592]	; (8004e88 <main+0x2f8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	611a      	str	r2, [r3, #16]
  if(EN_ENC_LINEARIZE ==-1){EN_ENC_LINEARIZE = 0;}
 8004c3c:	4b92      	ldr	r3, [pc, #584]	; (8004e88 <main+0x2f8>)
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c44:	d102      	bne.n	8004c4c <main+0xbc>
 8004c46:	4b90      	ldr	r3, [pc, #576]	; (8004e88 <main+0x2f8>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	615a      	str	r2, [r3, #20]
  if(E_ZERO==-1){E_ZERO = 0;}
 8004c4c:	4b8e      	ldr	r3, [pc, #568]	; (8004e88 <main+0x2f8>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c54:	d102      	bne.n	8004c5c <main+0xcc>
 8004c56:	4b8c      	ldr	r3, [pc, #560]	; (8004e88 <main+0x2f8>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	61da      	str	r2, [r3, #28]
  if(M_ZERO==-1){M_ZERO = 0;}
 8004c5c:	4b8a      	ldr	r3, [pc, #552]	; (8004e88 <main+0x2f8>)
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c64:	d102      	bne.n	8004c6c <main+0xdc>
 8004c66:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <main+0x2f8>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	619a      	str	r2, [r3, #24]

  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8004c6c:	4b87      	ldr	r3, [pc, #540]	; (8004e8c <main+0x2fc>)
 8004c6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c72:	eef4 7a67 	vcmp.f32	s15, s15
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	d609      	bvs.n	8004c90 <main+0x100>
 8004c7c:	4b83      	ldr	r3, [pc, #524]	; (8004e8c <main+0x2fc>)
 8004c7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c86:	eef4 7a47 	vcmp.f32	s15, s14
 8004c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8e:	d102      	bne.n	8004c96 <main+0x106>
 8004c90:	4b7e      	ldr	r3, [pc, #504]	; (8004e8c <main+0x2fc>)
 8004c92:	4a7f      	ldr	r2, [pc, #508]	; (8004e90 <main+0x300>)
 8004c94:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004c96:	4b7d      	ldr	r3, [pc, #500]	; (8004e8c <main+0x2fc>)
 8004c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c9c:	eef4 7a67 	vcmp.f32	s15, s15
 8004ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca4:	d609      	bvs.n	8004cba <main+0x12a>
 8004ca6:	4b79      	ldr	r3, [pc, #484]	; (8004e8c <main+0x2fc>)
 8004ca8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004cb0:	eef4 7a47 	vcmp.f32	s15, s14
 8004cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb8:	d102      	bne.n	8004cc0 <main+0x130>
 8004cba:	4b74      	ldr	r3, [pc, #464]	; (8004e8c <main+0x2fc>)
 8004cbc:	4a75      	ldr	r2, [pc, #468]	; (8004e94 <main+0x304>)
 8004cbe:	60da      	str	r2, [r3, #12]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004cc0:	4b72      	ldr	r3, [pc, #456]	; (8004e8c <main+0x2fc>)
 8004cc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cc6:	eef4 7a67 	vcmp.f32	s15, s15
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	d609      	bvs.n	8004ce4 <main+0x154>
 8004cd0:	4b6e      	ldr	r3, [pc, #440]	; (8004e8c <main+0x2fc>)
 8004cd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cd6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004cda:	eef4 7a47 	vcmp.f32	s15, s14
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	d102      	bne.n	8004cea <main+0x15a>
 8004ce4:	4b69      	ldr	r3, [pc, #420]	; (8004e8c <main+0x2fc>)
 8004ce6:	4a6c      	ldr	r2, [pc, #432]	; (8004e98 <main+0x308>)
 8004ce8:	611a      	str	r2, [r3, #16]
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004cea:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <main+0x2fc>)
 8004cec:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cf0:	eef4 7a67 	vcmp.f32	s15, s15
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	d609      	bvs.n	8004d0e <main+0x17e>
 8004cfa:	4b64      	ldr	r3, [pc, #400]	; (8004e8c <main+0x2fc>)
 8004cfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d04:	eef4 7a47 	vcmp.f32	s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d102      	bne.n	8004d14 <main+0x184>
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	; (8004e8c <main+0x2fc>)
 8004d10:	4a62      	ldr	r2, [pc, #392]	; (8004e9c <main+0x30c>)
 8004d12:	615a      	str	r2, [r3, #20]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004d14:	4b5d      	ldr	r3, [pc, #372]	; (8004e8c <main+0x2fc>)
 8004d16:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d1a:	eef4 7a67 	vcmp.f32	s15, s15
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	d609      	bvs.n	8004d38 <main+0x1a8>
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <main+0x2fc>)
 8004d26:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d2e:	eef4 7a47 	vcmp.f32	s15, s14
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	d103      	bne.n	8004d40 <main+0x1b0>
 8004d38:	4b54      	ldr	r3, [pc, #336]	; (8004e8c <main+0x2fc>)
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	619a      	str	r2, [r3, #24]

//  if(isnan(K_SCALE) || K_SCALE==-1){K_SCALE = 0.000133f;}
//  if(isnan(KI_D) || KI_D==-1){KI_D = 0.0373f;}
//  if(isnan(KI_Q) || KI_Q ==-1){KI_Q = 0.0373f;}

  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8004d40:	4b52      	ldr	r3, [pc, #328]	; (8004e8c <main+0x2fc>)
 8004d42:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004d46:	eef4 7a67 	vcmp.f32	s15, s15
 8004d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4e:	d609      	bvs.n	8004d64 <main+0x1d4>
 8004d50:	4b4e      	ldr	r3, [pc, #312]	; (8004e8c <main+0x2fc>)
 8004d52:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004d56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d5a:	eef4 7a47 	vcmp.f32	s15, s14
 8004d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d62:	d102      	bne.n	8004d6a <main+0x1da>
 8004d64:	4b49      	ldr	r3, [pc, #292]	; (8004e8c <main+0x2fc>)
 8004d66:	4a4e      	ldr	r2, [pc, #312]	; (8004ea0 <main+0x310>)
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(GR) || GR==-1){GR = 6.0f;}
 8004d6a:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <main+0x2fc>)
 8004d6c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d70:	eef4 7a67 	vcmp.f32	s15, s15
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	d609      	bvs.n	8004d8e <main+0x1fe>
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <main+0x2fc>)
 8004d7c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004d80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004d84:	eef4 7a47 	vcmp.f32	s15, s14
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	d102      	bne.n	8004d94 <main+0x204>
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <main+0x2fc>)
 8004d90:	4a44      	ldr	r2, [pc, #272]	; (8004ea4 <main+0x314>)
 8004d92:	635a      	str	r2, [r3, #52]	; 0x34
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004d94:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <main+0x2fc>)
 8004d96:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004d9a:	eef4 7a67 	vcmp.f32	s15, s15
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	d609      	bvs.n	8004db8 <main+0x228>
 8004da4:	4b39      	ldr	r3, [pc, #228]	; (8004e8c <main+0x2fc>)
 8004da6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004daa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004dae:	eef4 7a47 	vcmp.f32	s15, s14
 8004db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db6:	d103      	bne.n	8004dc0 <main+0x230>
 8004db8:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <main+0x2fc>)
 8004dba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(L_D) || L_D==-1){L_D = 0.000003f;}
 8004dc0:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <main+0x2fc>)
 8004dc2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004dc6:	eef4 7a67 	vcmp.f32	s15, s15
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d609      	bvs.n	8004de4 <main+0x254>
 8004dd0:	4b2e      	ldr	r3, [pc, #184]	; (8004e8c <main+0x2fc>)
 8004dd2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004dd6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004dda:	eef4 7a47 	vcmp.f32	s15, s14
 8004dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de2:	d102      	bne.n	8004dea <main+0x25a>
 8004de4:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <main+0x2fc>)
 8004de6:	4a30      	ldr	r2, [pc, #192]	; (8004ea8 <main+0x318>)
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c
  if(isnan(L_Q) || L_Q==-1){L_Q = 0.000003f;}
 8004dea:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <main+0x2fc>)
 8004dec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004df0:	eef4 7a67 	vcmp.f32	s15, s15
 8004df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df8:	d609      	bvs.n	8004e0e <main+0x27e>
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <main+0x2fc>)
 8004dfc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004e00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e04:	eef4 7a47 	vcmp.f32	s15, s14
 8004e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0c:	d102      	bne.n	8004e14 <main+0x284>
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <main+0x2fc>)
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <main+0x318>)
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
  if(isnan(R_PHASE) || R_PHASE==-1){R_PHASE = 0.433f;}
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <main+0x2fc>)
 8004e16:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004e1a:	eef4 7a67 	vcmp.f32	s15, s15
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	d609      	bvs.n	8004e38 <main+0x2a8>
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <main+0x2fc>)
 8004e26:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004e2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e2e:	eef4 7a47 	vcmp.f32	s15, s14
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	d102      	bne.n	8004e3e <main+0x2ae>
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <main+0x2fc>)
 8004e3a:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <main+0x31c>)
 8004e3c:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <main+0x2fc>)
 8004e40:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004e44:	eef4 7a67 	vcmp.f32	s15, s15
 8004e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4c:	d609      	bvs.n	8004e62 <main+0x2d2>
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <main+0x2fc>)
 8004e50:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004e54:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004e58:	eef4 7a47 	vcmp.f32	s15, s14
 8004e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e60:	d103      	bne.n	8004e6a <main+0x2da>
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <main+0x2fc>)
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	649a      	str	r2, [r3, #72]	; 0x48

  if(isnan(R_TH) || R_TH==-1){R_TH = 1.25f;}
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <main+0x2fc>)
 8004e6c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004e70:	eef4 7a67 	vcmp.f32	s15, s15
 8004e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e78:	e01a      	b.n	8004eb0 <main+0x320>
 8004e7a:	bf00      	nop
 8004e7c:	200095bc 	.word	0x200095bc
 8004e80:	20009604 	.word	0x20009604
 8004e84:	2000083c 	.word	0x2000083c
 8004e88:	2000043c 	.word	0x2000043c
 8004e8c:	2000033c 	.word	0x2000033c
 8004e90:	447a0000 	.word	0x447a0000
 8004e94:	42200000 	.word	0x42200000
 8004e98:	41600000 	.word	0x41600000
 8004e9c:	40a00000 	.word	0x40a00000
 8004ea0:	41a80000 	.word	0x41a80000
 8004ea4:	40c00000 	.word	0x40c00000
 8004ea8:	3649539c 	.word	0x3649539c
 8004eac:	3eddb22d 	.word	0x3eddb22d
 8004eb0:	d609      	bvs.n	8004ec6 <main+0x336>
 8004eb2:	4ba7      	ldr	r3, [pc, #668]	; (8005150 <main+0x5c0>)
 8004eb4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004eb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ebc:	eef4 7a47 	vcmp.f32	s15, s14
 8004ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec4:	d102      	bne.n	8004ecc <main+0x33c>
 8004ec6:	4ba2      	ldr	r3, [pc, #648]	; (8005150 <main+0x5c0>)
 8004ec8:	4aa2      	ldr	r2, [pc, #648]	; (8005154 <main+0x5c4>)
 8004eca:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(C_TH) || C_TH==-1){C_TH = 0.0f;}
 8004ecc:	4ba0      	ldr	r3, [pc, #640]	; (8005150 <main+0x5c0>)
 8004ece:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004ed2:	eef4 7a67 	vcmp.f32	s15, s15
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	d609      	bvs.n	8004ef0 <main+0x360>
 8004edc:	4b9c      	ldr	r3, [pc, #624]	; (8005150 <main+0x5c0>)
 8004ede:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004ee2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004ee6:	eef4 7a47 	vcmp.f32	s15, s14
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	d103      	bne.n	8004ef8 <main+0x368>
 8004ef0:	4b97      	ldr	r3, [pc, #604]	; (8005150 <main+0x5c0>)
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(INV_M_TH) || INV_M_TH==-1){INV_M_TH = 0.02825f;}
 8004ef8:	4b95      	ldr	r3, [pc, #596]	; (8005150 <main+0x5c0>)
 8004efa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004efe:	eef4 7a67 	vcmp.f32	s15, s15
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	d609      	bvs.n	8004f1c <main+0x38c>
 8004f08:	4b91      	ldr	r3, [pc, #580]	; (8005150 <main+0x5c0>)
 8004f0a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004f0e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f12:	eef4 7a47 	vcmp.f32	s15, s14
 8004f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1a:	d102      	bne.n	8004f22 <main+0x392>
 8004f1c:	4b8c      	ldr	r3, [pc, #560]	; (8005150 <main+0x5c0>)
 8004f1e:	4a8e      	ldr	r2, [pc, #568]	; (8005158 <main+0x5c8>)
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(T_AMBIENT) || T_AMBIENT==-1){T_AMBIENT = 25.0f;}
 8004f22:	4b8b      	ldr	r3, [pc, #556]	; (8005150 <main+0x5c0>)
 8004f24:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f28:	eef4 7a67 	vcmp.f32	s15, s15
 8004f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f30:	d609      	bvs.n	8004f46 <main+0x3b6>
 8004f32:	4b87      	ldr	r3, [pc, #540]	; (8005150 <main+0x5c0>)
 8004f34:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004f38:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f3c:	eef4 7a47 	vcmp.f32	s15, s14
 8004f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f44:	d102      	bne.n	8004f4c <main+0x3bc>
 8004f46:	4b82      	ldr	r3, [pc, #520]	; (8005150 <main+0x5c0>)
 8004f48:	4a84      	ldr	r2, [pc, #528]	; (800515c <main+0x5cc>)
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8004f4c:	4b80      	ldr	r3, [pc, #512]	; (8005150 <main+0x5c0>)
 8004f4e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f52:	eef4 7a67 	vcmp.f32	s15, s15
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	d609      	bvs.n	8004f70 <main+0x3e0>
 8004f5c:	4b7c      	ldr	r3, [pc, #496]	; (8005150 <main+0x5c0>)
 8004f5e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f66:	eef4 7a47 	vcmp.f32	s15, s14
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	d102      	bne.n	8004f76 <main+0x3e6>
 8004f70:	4b77      	ldr	r3, [pc, #476]	; (8005150 <main+0x5c0>)
 8004f72:	4a7b      	ldr	r2, [pc, #492]	; (8005160 <main+0x5d0>)
 8004f74:	65da      	str	r2, [r3, #92]	; 0x5c

  if(isnan(P_MIN) || P_MIN==-1){P_MIN = -12.5f;}
 8004f76:	4b76      	ldr	r3, [pc, #472]	; (8005150 <main+0x5c0>)
 8004f78:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f7c:	eef4 7a67 	vcmp.f32	s15, s15
 8004f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f84:	d609      	bvs.n	8004f9a <main+0x40a>
 8004f86:	4b72      	ldr	r3, [pc, #456]	; (8005150 <main+0x5c0>)
 8004f88:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f8c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f90:	eef4 7a47 	vcmp.f32	s15, s14
 8004f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f98:	d102      	bne.n	8004fa0 <main+0x410>
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <main+0x5c0>)
 8004f9c:	4a71      	ldr	r2, [pc, #452]	; (8005164 <main+0x5d4>)
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX) || P_MAX==-1){P_MAX = 12.5f;}
 8004fa0:	4b6b      	ldr	r3, [pc, #428]	; (8005150 <main+0x5c0>)
 8004fa2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004fa6:	eef4 7a67 	vcmp.f32	s15, s15
 8004faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fae:	d609      	bvs.n	8004fc4 <main+0x434>
 8004fb0:	4b67      	ldr	r3, [pc, #412]	; (8005150 <main+0x5c0>)
 8004fb2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004fb6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004fba:	eef4 7a47 	vcmp.f32	s15, s14
 8004fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc2:	d102      	bne.n	8004fca <main+0x43a>
 8004fc4:	4b62      	ldr	r3, [pc, #392]	; (8005150 <main+0x5c0>)
 8004fc6:	4a68      	ldr	r2, [pc, #416]	; (8005168 <main+0x5d8>)
 8004fc8:	665a      	str	r2, [r3, #100]	; 0x64
  if(isnan(V_MIN) || V_MIN==-1){V_MIN = -65.0f;}
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <main+0x5c0>)
 8004fcc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004fd0:	eef4 7a67 	vcmp.f32	s15, s15
 8004fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd8:	d609      	bvs.n	8004fee <main+0x45e>
 8004fda:	4b5d      	ldr	r3, [pc, #372]	; (8005150 <main+0x5c0>)
 8004fdc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004fe0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004fe4:	eef4 7a47 	vcmp.f32	s15, s14
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	d102      	bne.n	8004ff4 <main+0x464>
 8004fee:	4b58      	ldr	r3, [pc, #352]	; (8005150 <main+0x5c0>)
 8004ff0:	4a5e      	ldr	r2, [pc, #376]	; (800516c <main+0x5dc>)
 8004ff2:	669a      	str	r2, [r3, #104]	; 0x68
  if(isnan(V_MAX) || V_MAX==-1){V_MAX = 65.0f;}
 8004ff4:	4b56      	ldr	r3, [pc, #344]	; (8005150 <main+0x5c0>)
 8004ff6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004ffa:	eef4 7a67 	vcmp.f32	s15, s15
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	d609      	bvs.n	8005018 <main+0x488>
 8005004:	4b52      	ldr	r3, [pc, #328]	; (8005150 <main+0x5c0>)
 8005006:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800500a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800500e:	eef4 7a47 	vcmp.f32	s15, s14
 8005012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005016:	d102      	bne.n	800501e <main+0x48e>
 8005018:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <main+0x5c0>)
 800501a:	4a55      	ldr	r2, [pc, #340]	; (8005170 <main+0x5e0>)
 800501c:	66da      	str	r2, [r3, #108]	; 0x6c
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800501e:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <main+0x5c0>)
 8005020:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005024:	eef4 7a67 	vcmp.f32	s15, s15
 8005028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502c:	d609      	bvs.n	8005042 <main+0x4b2>
 800502e:	4b48      	ldr	r3, [pc, #288]	; (8005150 <main+0x5c0>)
 8005030:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005034:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005038:	eef4 7a47 	vcmp.f32	s15, s14
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	d102      	bne.n	8005048 <main+0x4b8>
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <main+0x5c0>)
 8005044:	4a4b      	ldr	r2, [pc, #300]	; (8005174 <main+0x5e4>)
 8005046:	671a      	str	r2, [r3, #112]	; 0x70
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 10.0f;}
 8005048:	4b41      	ldr	r3, [pc, #260]	; (8005150 <main+0x5c0>)
 800504a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800504e:	eef4 7a67 	vcmp.f32	s15, s15
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	d609      	bvs.n	800506c <main+0x4dc>
 8005058:	4b3d      	ldr	r3, [pc, #244]	; (8005150 <main+0x5c0>)
 800505a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800505e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005062:	eef4 7a47 	vcmp.f32	s15, s14
 8005066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506a:	d102      	bne.n	8005072 <main+0x4e2>
 800506c:	4b38      	ldr	r3, [pc, #224]	; (8005150 <main+0x5c0>)
 800506e:	4a42      	ldr	r2, [pc, #264]	; (8005178 <main+0x5e8>)
 8005070:	675a      	str	r2, [r3, #116]	; 0x74

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8005072:	a335      	add	r3, pc, #212	; (adr r3, 8005148 <main+0x5b8>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	4840      	ldr	r0, [pc, #256]	; (800517c <main+0x5ec>)
 800507a:	f007 fa19 	bl	800c4b0 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 800507e:	4840      	ldr	r0, [pc, #256]	; (8005180 <main+0x5f0>)
 8005080:	f7fd fee0 	bl	8002e44 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8005084:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8005088:	2100      	movs	r1, #0
 800508a:	483e      	ldr	r0, [pc, #248]	; (8005184 <main+0x5f4>)
 800508c:	f006 fd9e 	bl	800bbcc <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8005090:	4b3d      	ldr	r3, [pc, #244]	; (8005188 <main+0x5f8>)
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	4a3d      	ldr	r2, [pc, #244]	; (800518c <main+0x5fc>)
 8005096:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  comm_encoder.e_zero = E_ZERO;
 800509a:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <main+0x5f8>)
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	4a3b      	ldr	r2, [pc, #236]	; (800518c <main+0x5fc>)
 80050a0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  comm_encoder.ppairs = PPAIRS;
 80050a4:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <main+0x5c0>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	4a38      	ldr	r2, [pc, #224]	; (800518c <main+0x5fc>)
 80050aa:	6713      	str	r3, [r2, #112]	; 0x70
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 80050ac:	2164      	movs	r1, #100	; 0x64
 80050ae:	4837      	ldr	r0, [pc, #220]	; (800518c <main+0x5fc>)
 80050b0:	f000 fb88 	bl	80057c4 <ps_warmup>

  memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));	// Copy the linearization lookup table
 80050b4:	4b35      	ldr	r3, [pc, #212]	; (800518c <main+0x5fc>)
 80050b6:	4a34      	ldr	r2, [pc, #208]	; (8005188 <main+0x5f8>)
 80050b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80050bc:	f102 0120 	add.w	r1, r2, #32
 80050c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c4:	4618      	mov	r0, r3
 80050c6:	f006 fd73 	bl	800bbb0 <memcpy>
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 80050ca:	4831      	ldr	r0, [pc, #196]	; (8005190 <main+0x600>)
 80050cc:	f001 ff5a 	bl	8006f84 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80050d0:	4830      	ldr	r0, [pc, #192]	; (8005194 <main+0x604>)
 80050d2:	f001 ff57 	bl	8006f84 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80050d6:	4830      	ldr	r0, [pc, #192]	; (8005198 <main+0x608>)
 80050d8:	f001 ff54 	bl	8006f84 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80050dc:	2201      	movs	r2, #1
 80050de:	2110      	movs	r1, #16
 80050e0:	482e      	ldr	r0, [pc, #184]	; (800519c <main+0x60c>)
 80050e2:	f003 fa73 	bl	80085cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 80050e6:	2201      	movs	r2, #1
 80050e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050ec:	482b      	ldr	r0, [pc, #172]	; (800519c <main+0x60c>)
 80050ee:	f003 fa6d 	bl	80085cc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80050f2:	2001      	movs	r0, #1
 80050f4:	f001 fede 	bl	8006eb4 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 80050f8:	2001      	movs	r0, #1
 80050fa:	f001 fedb 	bl	8006eb4 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80050fe:	4928      	ldr	r1, [pc, #160]	; (80051a0 <main+0x610>)
 8005100:	2301      	movs	r3, #1
 8005102:	9306      	str	r3, [sp, #24]
 8005104:	2300      	movs	r3, #0
 8005106:	9305      	str	r3, [sp, #20]
 8005108:	2300      	movs	r3, #0
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	2300      	movs	r3, #0
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	2300      	movs	r3, #0
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	2301      	movs	r3, #1
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	2300      	movs	r3, #0
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	2200      	movs	r2, #0
 8005120:	c903      	ldmia	r1, {r0, r1}
 8005122:	f7fd f8ce 	bl	80022c2 <drv_write_DCR>
  HAL_Delay(1);
 8005126:	2001      	movs	r0, #1
 8005128:	f001 fec4 	bl	8006eb4 <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <main+0x5c0>)
 800512e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005132:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80051a4 <main+0x614>
 8005136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	d833      	bhi.n	80051a8 <main+0x618>
 8005140:	2303      	movs	r3, #3
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	e032      	b.n	80051ac <main+0x61c>
 8005146:	bf00      	nop
 8005148:	a0000000 	.word	0xa0000000
 800514c:	40019999 	.word	0x40019999
 8005150:	2000033c 	.word	0x2000033c
 8005154:	3fa00000 	.word	0x3fa00000
 8005158:	3ce76c8b 	.word	0x3ce76c8b
 800515c:	41c80000 	.word	0x41c80000
 8005160:	42fa0000 	.word	0x42fa0000
 8005164:	c1480000 	.word	0xc1480000
 8005168:	41480000 	.word	0x41480000
 800516c:	c2820000 	.word	0xc2820000
 8005170:	42820000 	.word	0x42820000
 8005174:	43fa0000 	.word	0x43fa0000
 8005178:	41200000 	.word	0x41200000
 800517c:	080110bc 	.word	0x080110bc
 8005180:	20000850 	.word	0x20000850
 8005184:	200090ec 	.word	0x200090ec
 8005188:	2000043c 	.word	0x2000043c
 800518c:	20000b5c 	.word	0x20000b5c
 8005190:	2000023c 	.word	0x2000023c
 8005194:	20000284 	.word	0x20000284
 8005198:	200002cc 	.word	0x200002cc
 800519c:	40020000 	.word	0x40020000
 80051a0:	20000eb8 	.word	0x20000eb8
 80051a4:	42200000 	.word	0x42200000
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 80051a8:	2302      	movs	r3, #2
 80051aa:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 80051ac:	4968      	ldr	r1, [pc, #416]	; (8005350 <main+0x7c0>)
 80051ae:	2300      	movs	r3, #0
 80051b0:	9306      	str	r3, [sp, #24]
 80051b2:	2301      	movs	r3, #1
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	2301      	movs	r3, #1
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	2301      	movs	r3, #1
 80051bc:	9303      	str	r3, [sp, #12]
 80051be:	2300      	movs	r3, #0
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	2303      	movs	r3, #3
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2301      	movs	r3, #1
 80051cc:	2200      	movs	r2, #0
 80051ce:	c903      	ldmia	r1, {r0, r1}
 80051d0:	f7fd f8e7 	bl	80023a2 <drv_write_CSACR>
  HAL_Delay(1);
 80051d4:	2001      	movs	r0, #1
 80051d6:	f001 fe6d 	bl	8006eb4 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 80051da:	495d      	ldr	r1, [pc, #372]	; (8005350 <main+0x7c0>)
 80051dc:	2300      	movs	r3, #0
 80051de:	9306      	str	r3, [sp, #24]
 80051e0:	2300      	movs	r3, #0
 80051e2:	9305      	str	r3, [sp, #20]
 80051e4:	2300      	movs	r3, #0
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	2300      	movs	r3, #0
 80051ea:	9303      	str	r3, [sp, #12]
 80051ec:	2301      	movs	r3, #1
 80051ee:	9302      	str	r3, [sp, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	2300      	movs	r3, #0
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2301      	movs	r3, #1
 80051fa:	2200      	movs	r2, #0
 80051fc:	c903      	ldmia	r1, {r0, r1}
 80051fe:	f7fd f8d0 	bl	80023a2 <drv_write_CSACR>
  HAL_Delay(1);
 8005202:	2001      	movs	r0, #1
 8005204:	f001 fe56 	bl	8006eb4 <HAL_Delay>
  zero_current(&controller);
 8005208:	4852      	ldr	r0, [pc, #328]	; (8005354 <main+0x7c4>)
 800520a:	f7fd fdd7 	bl	8002dbc <zero_current>
  HAL_Delay(1);
 800520e:	2001      	movs	r0, #1
 8005210:	f001 fe50 	bl	8006eb4 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_4US, VDS_LVL_0_45);
 8005214:	494e      	ldr	r1, [pc, #312]	; (8005350 <main+0x7c0>)
 8005216:	2305      	movs	r3, #5
 8005218:	9302      	str	r3, [sp, #8]
 800521a:	2301      	movs	r3, #1
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	2301      	movs	r3, #1
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2300      	movs	r3, #0
 8005224:	2201      	movs	r2, #1
 8005226:	c903      	ldmia	r1, {r0, r1}
 8005228:	f7fd f88d 	bl	8002346 <drv_write_OCPCR>
  HAL_Delay(1);
 800522c:	2001      	movs	r0, #1
 800522e:	f001 fe41 	bl	8006eb4 <HAL_Delay>
  drv_disable_gd(drv);
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <main+0x7c0>)
 8005234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005238:	f7fd f90f 	bl	800245a <drv_disable_gd>
  HAL_Delay(1);
 800523c:	2001      	movs	r0, #1
 800523e:	f001 fe39 	bl	8006eb4 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8005242:	4b44      	ldr	r3, [pc, #272]	; (8005354 <main+0x7c4>)
 8005244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005248:	4a42      	ldr	r2, [pc, #264]	; (8005354 <main+0x7c4>)
 800524a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800524e:	4619      	mov	r1, r3
 8005250:	4841      	ldr	r0, [pc, #260]	; (8005358 <main+0x7c8>)
 8005252:	f007 f92d 	bl	800c4b0 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005256:	2100      	movs	r1, #0
 8005258:	4840      	ldr	r0, [pc, #256]	; (800535c <main+0x7cc>)
 800525a:	f004 fc81 	bl	8009b60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800525e:	2104      	movs	r1, #4
 8005260:	483e      	ldr	r0, [pc, #248]	; (800535c <main+0x7cc>)
 8005262:	f004 fc7d 	bl	8009b60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005266:	2108      	movs	r1, #8
 8005268:	483c      	ldr	r0, [pc, #240]	; (800535c <main+0x7cc>)
 800526a:	f004 fc79 	bl	8009b60 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 800526e:	483c      	ldr	r0, [pc, #240]	; (8005360 <main+0x7d0>)
 8005270:	f7fc fe2c 	bl	8001ecc <can_rx_init>
  can_tx_init(&can_tx);
 8005274:	483b      	ldr	r0, [pc, #236]	; (8005364 <main+0x7d4>)
 8005276:	f7fc fe57 	bl	8001f28 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 800527a:	483b      	ldr	r0, [pc, #236]	; (8005368 <main+0x7d8>)
 800527c:	f002 fc3c 	bl	8007af8 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x01,0x01); // commutation > communication
 8005280:	2201      	movs	r2, #1
 8005282:	2101      	movs	r1, #1
 8005284:	2019      	movs	r0, #25
 8005286:	f002 ff44 	bl	8008112 <HAL_NVIC_SetPriority>
//  HAL_NVIC_SetPriority(CAN_ISR, 0x02, 0x02);

  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800528a:	2201      	movs	r2, #1
 800528c:	4937      	ldr	r1, [pc, #220]	; (800536c <main+0x7dc>)
 800528e:	4838      	ldr	r0, [pc, #224]	; (8005370 <main+0x7e0>)
 8005290:	f005 fcc3 	bl	800ac1a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1); // start main control interrupt
 8005294:	4831      	ldr	r0, [pc, #196]	; (800535c <main+0x7cc>)
 8005296:	f004 fb99 	bl	80099cc <HAL_TIM_Base_Start_IT>

  // Check encoder initialization here
  int new_offset = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	603b      	str	r3, [r7, #0]
  ps_sample(&comm_encoder, 0.001);
 800529e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8005374 <main+0x7e4>
 80052a2:	4835      	ldr	r0, [pc, #212]	; (8005378 <main+0x7e8>)
 80052a4:	f000 fad4 	bl	8005850 <ps_sample>
  HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80052a8:	2201      	movs	r2, #1
 80052aa:	2120      	movs	r1, #32
 80052ac:	4833      	ldr	r0, [pc, #204]	; (800537c <main+0x7ec>)
 80052ae:	f003 f98d 	bl	80085cc <HAL_GPIO_WritePin>
  drv_enable_gd(drv);
 80052b2:	4b27      	ldr	r3, [pc, #156]	; (8005350 <main+0x7c0>)
 80052b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052b8:	f7fd f8b5 	bl	8002426 <drv_enable_gd>
  new_offset = check_encoder_init(&comm_encoder, &controller, &comm_encoder_cal);             // status = 1 is good
 80052bc:	4a30      	ldr	r2, [pc, #192]	; (8005380 <main+0x7f0>)
 80052be:	4925      	ldr	r1, [pc, #148]	; (8005354 <main+0x7c4>)
 80052c0:	482d      	ldr	r0, [pc, #180]	; (8005378 <main+0x7e8>)
 80052c2:	f7fc fc3f 	bl	8001b44 <check_encoder_init>
 80052c6:	6038      	str	r0, [r7, #0]
  HAL_Delay(100);
 80052c8:	2064      	movs	r0, #100	; 0x64
 80052ca:	f001 fdf3 	bl	8006eb4 <HAL_Delay>
  drv_disable_gd(drv);
 80052ce:	4b20      	ldr	r3, [pc, #128]	; (8005350 <main+0x7c0>)
 80052d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052d4:	f7fd f8c1 	bl	800245a <drv_disable_gd>
  HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80052d8:	2200      	movs	r2, #0
 80052da:	2120      	movs	r1, #32
 80052dc:	4827      	ldr	r0, [pc, #156]	; (800537c <main+0x7ec>)
 80052de:	f003 f975 	bl	80085cc <HAL_GPIO_WritePin>

  E_ZERO = new_offset;
 80052e2:	4a28      	ldr	r2, [pc, #160]	; (8005384 <main+0x7f4>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	61d3      	str	r3, [r2, #28]
  comm_encoder.e_zero = E_ZERO;
 80052e8:	4b26      	ldr	r3, [pc, #152]	; (8005384 <main+0x7f4>)
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4a22      	ldr	r2, [pc, #136]	; (8005378 <main+0x7e8>)
 80052ee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  printf(" Position Sensor Electrical Offset: %d\n\r", E_ZERO);
 80052f2:	4b24      	ldr	r3, [pc, #144]	; (8005384 <main+0x7f4>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4619      	mov	r1, r3
 80052f8:	4823      	ldr	r0, [pc, #140]	; (8005388 <main+0x7f8>)
 80052fa:	f007 f8d9 	bl	800c4b0 <iprintf>

  // initialize filter here for position sensor
  HAL_Delay(100);
 80052fe:	2064      	movs	r0, #100	; 0x64
 8005300:	f001 fdd8 	bl	8006eb4 <HAL_Delay>
  ps_filter_init(&comm_encoder);
 8005304:	481c      	ldr	r0, [pc, #112]	; (8005378 <main+0x7e8>)
 8005306:	f000 fd29 	bl	8005d5c <ps_filter_init>
  if (EN_ENC_FILTER == 1){
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <main+0x7f4>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d103      	bne.n	800531a <main+0x78a>
	  comm_encoder.filt_enable = 1;
 8005312:	4b19      	ldr	r3, [pc, #100]	; (8005378 <main+0x7e8>)
 8005314:	2201      	movs	r2, #1
 8005316:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  }
  // reset encoder sample count
  comm_encoder.first_sample = 0;
 800531a:	4b17      	ldr	r3, [pc, #92]	; (8005378 <main+0x7e8>)
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

  /* Start the FSM */
  state.state = MENU_MODE;
 8005322:	4b1a      	ldr	r3, [pc, #104]	; (800538c <main+0x7fc>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <main+0x7fc>)
 800532a:	2200      	movs	r2, #0
 800532c:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <main+0x7fc>)
 8005330:	2201      	movs	r2, #1
 8005332:	70da      	strb	r2, [r3, #3]
  fsm_enter_state(&state);
 8005334:	4815      	ldr	r0, [pc, #84]	; (800538c <main+0x7fc>)
 8005336:	f7fe fa79 	bl	800382c <fsm_enter_state>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 800533a:	2064      	movs	r0, #100	; 0x64
 800533c:	f001 fdba 	bl	8006eb4 <HAL_Delay>
//	  printf("%d\n\r", loop_time);
	  drv_check_faults(drv, &state);
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <main+0x7c0>)
 8005342:	4a12      	ldr	r2, [pc, #72]	; (800538c <main+0x7fc>)
 8005344:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005348:	f7fd f8a2 	bl	8002490 <drv_check_faults>
	  HAL_Delay(100);
 800534c:	e7f5      	b.n	800533a <main+0x7aa>
 800534e:	bf00      	nop
 8005350:	20000eb8 	.word	0x20000eb8
 8005354:	20000850 	.word	0x20000850
 8005358:	080110e0 	.word	0x080110e0
 800535c:	20009574 	.word	0x20009574
 8005360:	20009468 	.word	0x20009468
 8005364:	20009448 	.word	0x20009448
 8005368:	20000314 	.word	0x20000314
 800536c:	200094b8 	.word	0x200094b8
 8005370:	2000964c 	.word	0x2000964c
 8005374:	3a83126f 	.word	0x3a83126f
 8005378:	20000b5c 	.word	0x20000b5c
 800537c:	40020800 	.word	0x40020800
 8005380:	20000ec0 	.word	0x20000ec0
 8005384:	2000043c 	.word	0x2000043c
 8005388:	08011108 	.word	0x08011108
 800538c:	20000b48 	.word	0x20000b48

08005390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b094      	sub	sp, #80	; 0x50
 8005394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005396:	f107 031c 	add.w	r3, r7, #28
 800539a:	2234      	movs	r2, #52	; 0x34
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f006 fc14 	bl	800bbcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053a4:	f107 0308 	add.w	r3, r7, #8
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	4b2c      	ldr	r3, [pc, #176]	; (800546c <SystemClock_Config+0xdc>)
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	4a2b      	ldr	r2, [pc, #172]	; (800546c <SystemClock_Config+0xdc>)
 80053be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c2:	6413      	str	r3, [r2, #64]	; 0x40
 80053c4:	4b29      	ldr	r3, [pc, #164]	; (800546c <SystemClock_Config+0xdc>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053d0:	2300      	movs	r3, #0
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4b26      	ldr	r3, [pc, #152]	; (8005470 <SystemClock_Config+0xe0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a25      	ldr	r2, [pc, #148]	; (8005470 <SystemClock_Config+0xe0>)
 80053da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4b23      	ldr	r3, [pc, #140]	; (8005470 <SystemClock_Config+0xe0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053f6:	2302      	movs	r3, #2
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005400:	2304      	movs	r3, #4
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005404:	23b4      	movs	r3, #180	; 0xb4
 8005406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005408:	2302      	movs	r3, #2
 800540a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800540c:	2302      	movs	r3, #2
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005410:	2302      	movs	r3, #2
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	4618      	mov	r0, r3
 800541a:	f003 fc8b 	bl	8008d34 <HAL_RCC_OscConfig>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005424:	f000 f826 	bl	8005474 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005428:	f003 f8ea 	bl	8008600 <HAL_PWREx_EnableOverDrive>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8005432:	f000 f81f 	bl	8005474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005436:	230f      	movs	r3, #15
 8005438:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800543a:	2302      	movs	r3, #2
 800543c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005442:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800544c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800544e:	f107 0308 	add.w	r3, r7, #8
 8005452:	2105      	movs	r1, #5
 8005454:	4618      	mov	r0, r3
 8005456:	f003 f923 	bl	80086a0 <HAL_RCC_ClockConfig>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005460:	f000 f808 	bl	8005474 <Error_Handler>
  }
}
 8005464:	bf00      	nop
 8005466:	3750      	adds	r7, #80	; 0x50
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	40007000 	.word	0x40007000

08005474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	ed87 0a01 	vstr	s0, [r7, #4]
 800548c:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8005490:	ed97 7a01 	vldr	s14, [r7, #4]
 8005494:	edd7 7a00 	vldr	s15, [r7]
 8005498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a0:	dd01      	ble.n	80054a6 <fast_fmaxf+0x24>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	e000      	b.n	80054a8 <fast_fmaxf+0x26>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	ee07 3a90 	vmov	s15, r3
    }
 80054ac:	eeb0 0a67 	vmov.f32	s0, s15
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <fast_fminf>:

float fast_fminf(float x, float y){
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	ed87 0a01 	vstr	s0, [r7, #4]
 80054c4:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80054c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80054cc:	edd7 7a00 	vldr	s15, [r7]
 80054d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d8:	d501      	bpl.n	80054de <fast_fminf+0x24>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	e000      	b.n	80054e0 <fast_fminf+0x26>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	ee07 3a90 	vmov	s15, r3
    }
 80054e4:	eeb0 0a67 	vmov.f32	s0, s15
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	ed87 0a03 	vstr	s0, [r7, #12]
 80054fc:	edc7 0a02 	vstr	s1, [r7, #8]
 8005500:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8005504:	ed97 7a03 	vldr	s14, [r7, #12]
 8005508:	edd7 7a02 	vldr	s15, [r7, #8]
 800550c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005514:	dd0c      	ble.n	8005530 <fmaxf3+0x3e>
 8005516:	ed97 7a03 	vldr	s14, [r7, #12]
 800551a:	edd7 7a01 	vldr	s15, [r7, #4]
 800551e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005526:	dd01      	ble.n	800552c <fmaxf3+0x3a>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	e00d      	b.n	8005548 <fmaxf3+0x56>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	e00b      	b.n	8005548 <fmaxf3+0x56>
 8005530:	ed97 7a02 	vldr	s14, [r7, #8]
 8005534:	edd7 7a01 	vldr	s15, [r7, #4]
 8005538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	dd01      	ble.n	8005546 <fmaxf3+0x54>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	e000      	b.n	8005548 <fmaxf3+0x56>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	ee07 3a90 	vmov	s15, r3
    }
 800554c:	eeb0 0a67 	vmov.f32	s0, s15
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <fminf3>:

float fminf3(float x, float y, float z){
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	ed87 0a03 	vstr	s0, [r7, #12]
 8005564:	edc7 0a02 	vstr	s1, [r7, #8]
 8005568:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 800556c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005570:	edd7 7a02 	vldr	s15, [r7, #8]
 8005574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557c:	d50c      	bpl.n	8005598 <fminf3+0x3e>
 800557e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005582:	edd7 7a01 	vldr	s15, [r7, #4]
 8005586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d501      	bpl.n	8005594 <fminf3+0x3a>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	e00d      	b.n	80055b0 <fminf3+0x56>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	e00b      	b.n	80055b0 <fminf3+0x56>
 8005598:	ed97 7a02 	vldr	s14, [r7, #8]
 800559c:	edd7 7a01 	vldr	s15, [r7, #4]
 80055a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a8:	d501      	bpl.n	80055ae <fminf3+0x54>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	e000      	b.n	80055b0 <fminf3+0x56>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	ee07 3a90 	vmov	s15, r3
    }
 80055b4:	eeb0 0a67 	vmov.f32	s0, s15
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	ed93 7a00 	vldr	s14, [r3]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	edd3 7a00 	vldr	s15, [r3]
 80055dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	edd3 6a00 	vldr	s13, [r3]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f4:	eeb0 0a67 	vmov.f32	s0, s15
 80055f8:	f00a fd0a 	bl	8010010 <sqrtf>
 80055fc:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8005600:	ed97 7a05 	vldr	s14, [r7, #20]
 8005604:	edd7 7a01 	vldr	s15, [r7, #4]
 8005608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005610:	dc00      	bgt.n	8005614 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8005612:	e01b      	b.n	800564c <limit_norm+0x8a>
        *x = *x * limit/norm;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	ed93 7a00 	vldr	s14, [r3]
 800561a:	edd7 7a01 	vldr	s15, [r7, #4]
 800561e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005622:	ed97 7a05 	vldr	s14, [r7, #20]
 8005626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	ed93 7a00 	vldr	s14, [r3]
 8005636:	edd7 7a01 	vldr	s15, [r7, #4]
 800563a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800563e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	edc3 7a00 	vstr	s15, [r3]
    }
 800564c:	bf00      	nop
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	ed87 0a03 	vstr	s0, [r7, #12]
 800565e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005662:	ed87 1a01 	vstr	s2, [r7, #4]
 8005666:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8005668:	ed97 7a01 	vldr	s14, [r7, #4]
 800566c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005674:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 800567c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005680:	edd7 7a04 	vldr	s15, [r7, #16]
 8005684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005688:	2201      	movs	r2, #1
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800569e:	ed97 7a05 	vldr	s14, [r7, #20]
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056aa:	ee17 3a90 	vmov	r3, s15
    }
 80056ae:	4618      	mov	r0, r3
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80056c6:	edc7 0a01 	vstr	s1, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 80056cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80056d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80056d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056d8:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80056ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056f2:	2201      	movs	r2, #1
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	ee07 3a90 	vmov	s15, r3
 8005700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005708:	edd7 7a04 	vldr	s15, [r7, #16]
 800570c:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8005710:	eeb0 0a67 	vmov.f32	s0, s15
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <sin_lut>:

float sin_lut(float theta){
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 800572a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005788 <sin_lut+0x68>
 800572e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005732:	f00a fc4d 	bl	800ffd0 <fmodf>
 8005736:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 800573a:	edd7 7a01 	vldr	s15, [r7, #4]
 800573e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005746:	d506      	bpl.n	8005756 <sin_lut+0x36>
 8005748:	edd7 7a01 	vldr	s15, [r7, #4]
 800574c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005788 <sin_lut+0x68>
 8005750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005754:	e001      	b.n	800575a <sin_lut+0x3a>
 8005756:	edd7 7a01 	vldr	s15, [r7, #4]
 800575a:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 800575e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005762:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800578c <sin_lut+0x6c>
 8005766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800576a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800576e:	ee17 3a90 	vmov	r3, s15
 8005772:	4a07      	ldr	r2, [pc, #28]	; (8005790 <sin_lut+0x70>)
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	ee07 3a90 	vmov	s15, r3
}
 800577e:	eeb0 0a67 	vmov.f32	s0, s15
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40c90fdb 	.word	0x40c90fdb
 800578c:	42a2f983 	.word	0x42a2f983
 8005790:	080111b4 	.word	0x080111b4

08005794 <cos_lut>:

float cos_lut(float theta){
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 800579e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80057c0 <cos_lut+0x2c>
 80057a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80057a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057aa:	eeb0 0a67 	vmov.f32	s0, s15
 80057ae:	f7ff ffb7 	bl	8005720 <sin_lut>
 80057b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80057b6:	eeb0 0a67 	vmov.f32	s0, s15
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	3fc90fdb 	.word	0x3fc90fdb

080057c4 <ps_warmup>:
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"


void ps_warmup(EncoderStruct * encoder, int n){
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
//	int raw;
	for(int i = 0; i<n; i++){
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e030      	b.n	8005836 <ps_warmup+0x72>
		encoder->spi_tx_buff[0] = 0xA6;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	22a6      	movs	r2, #166	; 0xa6
 80057d8:	701a      	strb	r2, [r3, #0]
		encoder->spi_tx_buff[1] = 0x00;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	705a      	strb	r2, [r3, #1]
		encoder->spi_tx_buff[2] = 0x00;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	709a      	strb	r2, [r3, #2]
		encoder->spi_tx_buff[3] = 0x00;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80057ec:	2200      	movs	r2, #0
 80057ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057f2:	4815      	ldr	r0, [pc, #84]	; (8005848 <ps_warmup+0x84>)
 80057f4:	f002 feea 	bl	80085cc <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1d1a      	adds	r2, r3, #4
 80057fe:	2364      	movs	r3, #100	; 0x64
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	2304      	movs	r3, #4
 8005804:	4811      	ldr	r0, [pc, #68]	; (800584c <ps_warmup+0x88>)
 8005806:	f003 fdbc 	bl	8009382 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800580a:	bf00      	nop
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <ps_warmup+0x88>)
 800580e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d0f9      	beq.n	800580c <ps_warmup+0x48>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8005818:	2201      	movs	r2, #1
 800581a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800581e:	480a      	ldr	r0, [pc, #40]	; (8005848 <ps_warmup+0x84>)
 8005820:	f002 fed4 	bl	80085cc <HAL_GPIO_WritePin>
		delay_us(100);
 8005824:	2064      	movs	r0, #100	; 0x64
 8005826:	f001 f9f1 	bl	8006c0c <delay_us>
//		raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
//		printf("%d\n\r", raw);
		delay_us(100);
 800582a:	2064      	movs	r0, #100	; 0x64
 800582c:	f001 f9ee 	bl	8006c0c <delay_us>
	for(int i = 0; i<n; i++){
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	dbca      	blt.n	80057d4 <ps_warmup+0x10>
	}
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40020000 	.word	0x40020000
 800584c:	20009518 	.word	0x20009518

08005850 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8005850:	b580      	push	{r7, lr}
 8005852:	b08c      	sub	sp, #48	; 0x30
 8005854:	af02      	add	r7, sp, #8
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	611a      	str	r2, [r3, #16]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8005864:	2313      	movs	r3, #19
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
 8005868:	e011      	b.n	800588e <ps_sample+0x3e>
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	3b01      	subs	r3, #1
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	3304      	adds	r3, #4
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	3304      	adds	r3, #4
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	3b01      	subs	r3, #1
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	dcea      	bgt.n	800586a <ps_sample+0x1a>
	//for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->count_buff[i] = encoder->count_buff[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_buff[0] = 0xA6;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	22a6      	movs	r2, #166	; 0xa6
 8005898:	701a      	strb	r2, [r3, #0]
	encoder->spi_tx_buff[1] = 0x00;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	705a      	strb	r2, [r3, #1]
	encoder->spi_tx_buff[2] = 0x00;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	709a      	strb	r2, [r3, #2]
	encoder->spi_tx_buff[3] = 0x00;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	70da      	strb	r2, [r3, #3]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058b2:	489d      	ldr	r0, [pc, #628]	; (8005b28 <ps_sample+0x2d8>)
 80058b4:	f002 fe8a 	bl	80085cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, encoder->spi_tx_buff, encoder->spi_rx_buff, 4, 100);
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	1d1a      	adds	r2, r3, #4
 80058be:	2364      	movs	r3, #100	; 0x64
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2304      	movs	r3, #4
 80058c4:	4899      	ldr	r0, [pc, #612]	; (8005b2c <ps_sample+0x2dc>)
 80058c6:	f003 fd5c 	bl	8009382 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80058ca:	bf00      	nop
 80058cc:	4b97      	ldr	r3, [pc, #604]	; (8005b2c <ps_sample+0x2dc>)
 80058ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d0f9      	beq.n	80058cc <ps_sample+0x7c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80058d8:	2201      	movs	r2, #1
 80058da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058de:	4892      	ldr	r0, [pc, #584]	; (8005b28 <ps_sample+0x2d8>)
 80058e0:	f002 fe74 	bl	80085cc <HAL_GPIO_WritePin>

	encoder->raw = ((encoder->spi_rx_buff[1]<<16)|(encoder->spi_rx_buff[2]<<8)|(encoder->spi_rx_buff[3]))>>5;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	795b      	ldrb	r3, [r3, #5]
 80058e8:	041a      	lsls	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	799b      	ldrb	r3, [r3, #6]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	4313      	orrs	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	79d2      	ldrb	r2, [r2, #7]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	115b      	asrs	r3, r3, #5
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	609a      	str	r2, [r3, #8]

	/* Linearization */
	encoder->offset_ind1 = (encoder->raw)>>LUT_SHIFT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	0b1b      	lsrs	r3, r3, #12
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	encoder->offset_ind2 = ((encoder->raw>>LUT_SHIFT)+1)%128;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0b1b      	lsrs	r3, r3, #12
 8005914:	3301      	adds	r3, #1
 8005916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	encoder->offset1 = encoder->offset_lut[(encoder->raw)>>LUT_SHIFT];				// lookup table lower entry
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	0b1a      	lsrs	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3256      	adds	r2, #86	; 0x56
 800592a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	encoder->offset2 = encoder->offset_lut[((encoder->raw>>LUT_SHIFT)+1)%128];		// lookup table higher entry
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	0b1b      	lsrs	r3, r3, #12
 800593a:	3301      	adds	r3, #1
 800593c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3256      	adds	r2, #86	; 0x56
 8005944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	int raw_mod = encoder->raw & LUT_MASK;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005956:	617b      	str	r3, [r7, #20]
	encoder->offset_interp = encoder->offset1 + ( (encoder->offset2-encoder->offset1) * raw_mod / (1<<LUT_SHIFT) );     // Interpolate between lookup table entries
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800596a:	1acb      	subs	r3, r1, r3
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	da01      	bge.n	800597a <ps_sample+0x12a>
 8005976:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800597a:	131b      	asrs	r3, r3, #12
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0


	if (EN_ENC_LINEARIZE == 1){
 8005984:	4b6a      	ldr	r3, [pc, #424]	; (8005b30 <ps_sample+0x2e0>)
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d10a      	bne.n	80059a2 <ps_sample+0x152>
		encoder->count = encoder->raw + encoder->offset_interp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8005996:	4413      	add	r3, r2
 8005998:	461a      	mov	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80059a0:	e005      	b.n	80059ae <ps_sample+0x15e>
	} else {
		encoder->count = encoder->raw;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	461a      	mov	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	}

	/* Real angles in radians */
	// MAPPED FROM -PI to PI, instead of 0 to 2*PI
	encoder->angle_singleturn = TWO_PI_F*((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80059b4:	4b5e      	ldr	r3, [pc, #376]	; (8005b30 <ps_sample+0x2e0>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059c2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005b40 <ps_sample+0x2f0>
 80059c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059ca:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8005b34 <ps_sample+0x2e4>
 80059ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	edc3 7a03 	vstr	s15, [r3, #12]
//	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
	encoder->angle_singleturn = encoder->angle_singleturn<-PI_F ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	edd3 7a03 	vldr	s15, [r3, #12]
 80059de:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005b38 <ps_sample+0x2e8>
 80059e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ea:	d507      	bpl.n	80059fc <ps_sample+0x1ac>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80059f2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005b40 <ps_sample+0x2f0>
 80059f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059fa:	e002      	b.n	8005a02 <ps_sample+0x1b2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	edc3 7a03 	vstr	s15, [r3, #12]
	encoder->angle_singleturn = encoder->angle_singleturn>PI_F  ? encoder->angle_singleturn - TWO_PI_F : encoder->angle_singleturn;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a0e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005b3c <ps_sample+0x2ec>
 8005a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1a:	dd07      	ble.n	8005a2c <ps_sample+0x1dc>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a22:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005b40 <ps_sample+0x2f0>
 8005a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a2a:	e002      	b.n	8005a32 <ps_sample+0x1e2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005a44:	4b3a      	ldr	r3, [pc, #232]	; (8005b30 <ps_sample+0x2e0>)
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a56:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005b34 <ps_sample+0x2e4>
 8005a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	int mod_angle = (int)encoder->elec_angle;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a6e:	ee17 3a90 	vmov	r3, s15
 8005a72:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)mod_angle);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a88:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005b40 <ps_sample+0x2f0>
 8005a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	d507      	bpl.n	8005ab6 <ps_sample+0x266>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005aac:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005b40 <ps_sample+0x2f0>
 8005ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ab4:	e002      	b.n	8005abc <ps_sample+0x26c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	/* Rollover */
	int rollover = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	ed93 7a03 	vldr	s14, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad6:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8005ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ade:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005b3c <ps_sample+0x2ec>
 8005ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aea:	dd03      	ble.n	8005af4 <ps_sample+0x2a4>
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	e00a      	b.n	8005b0a <ps_sample+0x2ba>
	else if(angle_diff < -PI_F){rollover = 1;}
 8005af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005af8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005b38 <ps_sample+0x2e8>
 8005afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	d501      	bpl.n	8005b0a <ps_sample+0x2ba>
 8005b06:	2301      	movs	r3, #1
 8005b08:	623b      	str	r3, [r7, #32]
	if(!encoder->first_sample){
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3358 	ldrb.w	r3, [r3, #856]	; 0x358
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d117      	bne.n	8005b44 <ps_sample+0x2f4>
		encoder->turns = 0;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		encoder->first_sample = 1;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8005b24:	e016      	b.n	8005b54 <ps_sample+0x304>
 8005b26:	bf00      	nop
 8005b28:	40020000 	.word	0x40020000
 8005b2c:	20009518 	.word	0x20009518
 8005b30:	2000043c 	.word	0x2000043c
 8005b34:	49000000 	.word	0x49000000
 8005b38:	c0490fdb 	.word	0xc0490fdb
 8005b3c:	40490fdb 	.word	0x40490fdb
 8005b40:	40c90fdb 	.word	0x40c90fdb
	} else {
		encoder->turns += rollover;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	441a      	add	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b68:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 8005b40 <ps_sample+0x2f0>
 8005b6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Velocity */

	// old velocity calculation modified to match MBed code calculation of velocity!
	//encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
	encoder->single_vel = (encoder->angle_multiturn[0] - encoder->angle_multiturn[1])/dt;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005b8a:	ed97 7a00 	vldr	s14, [r7]
 8005b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	// Filter out bad position samples
	if ( (encoder->filt_enable==1) && ((encoder->single_vel > (V_MAX*GR)) || (encoder->single_vel < (V_MIN*GR))) ) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d12e      	bne.n	8005c00 <ps_sample+0x3b0>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8005ba8:	4b40      	ldr	r3, [pc, #256]	; (8005cac <ps_sample+0x45c>)
 8005baa:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8005bae:	4b3f      	ldr	r3, [pc, #252]	; (8005cac <ps_sample+0x45c>)
 8005bb0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc0:	dc0f      	bgt.n	8005be2 <ps_sample+0x392>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8005bc8:	4b38      	ldr	r3, [pc, #224]	; (8005cac <ps_sample+0x45c>)
 8005bca:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <ps_sample+0x45c>)
 8005bd0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be0:	d50e      	bpl.n	8005c00 <ps_sample+0x3b0>
		encoder->angle_multiturn[0] = encoder->filt_prev_mech;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	615a      	str	r2, [r3, #20]
		encoder->elec_angle = encoder->filt_prev_elec;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	665a      	str	r2, [r3, #100]	; 0x64
		encoder->single_vel = 0.0;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005bfe:	e008      	b.n	8005c12 <ps_sample+0x3c2>
	}
	else {
		encoder->filt_prev_mech = encoder->angle_multiturn[0];
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	67da      	str	r2, [r3, #124]	; 0x7c
		encoder->filt_prev_elec = encoder->elec_angle;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	float sum = encoder->single_vel;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005c18:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i < N_POS_SAMPLES; i++){
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	e024      	b.n	8005c6a <ps_sample+0x41a>
		encoder->vel_vec[N_POS_SAMPLES - i] = encoder->vel_vec[N_POS_SAMPLES-i-1];
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f1c3 0213 	rsb	r2, r3, #19
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f1c3 0314 	rsb	r3, r3, #20
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	3220      	adds	r2, #32
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	440a      	add	r2, r1
 8005c34:	3204      	adds	r2, #4
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	3320      	adds	r3, #32
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	3304      	adds	r3, #4
 8005c42:	601a      	str	r2, [r3, #0]
		sum += encoder->vel_vec[N_POS_SAMPLES-i];
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f1c3 0314 	rsb	r3, r3, #20
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	3320      	adds	r3, #32
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	3304      	adds	r3, #4
 8005c54:	edd3 7a00 	vldr	s15, [r3]
 8005c58:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c60:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 1; i < N_POS_SAMPLES; i++){
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b13      	cmp	r3, #19
 8005c6e:	ddd7      	ble.n	8005c20 <ps_sample+0x3d0>
		}
	encoder->vel_vec[0] = encoder->single_vel;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	encoder->velocity =  sum/((float)N_POS_SAMPLES);
 8005c7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c80:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

}
 8005ca4:	bf00      	nop
 8005ca6:	3728      	adds	r7, #40	; 0x28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	2000033c 	.word	0x2000033c

08005cb0 <ps_print>:

void ps_print(EncoderStruct * encoder){
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
	printf("   Raw: %u", (unsigned int)encoder->raw);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4820      	ldr	r0, [pc, #128]	; (8005d40 <ps_print+0x90>)
 8005cc0:	f006 fbf6 	bl	800c4b0 <iprintf>
//	printf("   LUT ind 1: %d", encoder->offset_ind1);
//	printf("   LUT ind 2: %d", encoder->offset_ind2);
//	printf("   Offset 1: %d", encoder->offset1);
//	printf("   Offset 2: %d", encoder->offset2);
//	printf("   Offset Interp: %d", encoder->offset_interp);
	printf("   Linearized: %d", encoder->count);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	481d      	ldr	r0, [pc, #116]	; (8005d44 <ps_print+0x94>)
 8005cce:	f006 fbef 	bl	800c4b0 <iprintf>
	printf("   Single Turn: %.3f", encoder->angle_singleturn);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fc56 	bl	8000588 <__aeabi_f2d>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4819      	ldr	r0, [pc, #100]	; (8005d48 <ps_print+0x98>)
 8005ce2:	f006 fbe5 	bl	800c4b0 <iprintf>
	printf("   Multiturn: %.3f", encoder->angle_multiturn[0]);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fa fc4c 	bl	8000588 <__aeabi_f2d>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4815      	ldr	r0, [pc, #84]	; (8005d4c <ps_print+0x9c>)
 8005cf6:	f006 fbdb 	bl	800c4b0 <iprintf>
	printf("   Electrical: %.3f", encoder->elec_angle);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fa fc42 	bl	8000588 <__aeabi_f2d>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4811      	ldr	r0, [pc, #68]	; (8005d50 <ps_print+0xa0>)
 8005d0a:	f006 fbd1 	bl	800c4b0 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005d14:	4619      	mov	r1, r3
 8005d16:	480f      	ldr	r0, [pc, #60]	; (8005d54 <ps_print+0xa4>)
 8005d18:	f006 fbca 	bl	800c4b0 <iprintf>
	printf("   Vel: %.4f\n\r", encoder->velocity);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fa fc31 	bl	8000588 <__aeabi_f2d>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	480b      	ldr	r0, [pc, #44]	; (8005d58 <ps_print+0xa8>)
 8005d2c:	f006 fbc0 	bl	800c4b0 <iprintf>
	delay_us(10000);
 8005d30:	f242 7010 	movw	r0, #10000	; 0x2710
 8005d34:	f000 ff6a 	bl	8006c0c <delay_us>
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	08011134 	.word	0x08011134
 8005d44:	08011140 	.word	0x08011140
 8005d48:	08011154 	.word	0x08011154
 8005d4c:	0801116c 	.word	0x0801116c
 8005d50:	08011180 	.word	0x08011180
 8005d54:	08011194 	.word	0x08011194
 8005d58:	080111a4 	.word	0x080111a4

08005d5c <ps_filter_init>:

void WriteLUT(EncoderStruct * encoder,  int new_lut[N_LUT]){
	memcpy(encoder->offset_lut, new_lut, sizeof(encoder->offset_lut));
}

void ps_filter_init(EncoderStruct * encoder){
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	encoder->filt_prev_mech = encoder->angle_multiturn[0];
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	67da      	str	r2, [r3, #124]	; 0x7c
	encoder->filt_prev_elec = encoder->elec_angle;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fc fc7d 	bl	8002690 <flash_writer_init>
	pr->sector = sector;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	60da      	str	r2, [r3, #12]
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fc fc8c 	bl	80026cc <flash_writer_open>
    pr->ready = true;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	741a      	strb	r2, [r3, #16]
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	b490      	push	{r4, r7}
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	f107 0408 	add.w	r4, r7, #8
 8005dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8005dd0:	7e3b      	ldrb	r3, [r7, #24]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc90      	pop	{r4, r7}
 8005dd8:	b004      	add	sp, #16
 8005dda:	4770      	bx	lr

08005ddc <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e00d      	b.n	8005e06 <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <preference_writer_flush+0x70>)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005dfc:	f7fc fc82 	bl	8002704 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2bff      	cmp	r3, #255	; 0xff
 8005e0a:	ddee      	ble.n	8005dea <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8005e0c:	e012      	b.n	8005e34 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e16:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <preference_writer_flush+0x74>)
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	edd3 7a00 	vldr	s15, [r3]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	eeb0 0a67 	vmov.f32	s0, s15
 8005e26:	460b      	mov	r3, r1
 8005e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e2a:	f7fc fc81 	bl	8002730 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005e3a:	dbe8      	blt.n	8005e0e <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	741a      	strb	r2, [r3, #16]
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	2000043c 	.word	0x2000043c
 8005e50:	2000033c 	.word	0x2000033c

08005e54 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8005e54:	b084      	sub	sp, #16
 8005e56:	b590      	push	{r4, r7, lr}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	f107 0418 	add.w	r4, r7, #24
 8005e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8005e64:	2300      	movs	r3, #0
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	e00d      	b.n	8005e86 <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f107 0218 	add.w	r2, r7, #24
 8005e70:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e72:	f7fc fc83 	bl	800277c <flash_read_int>
 8005e76:	4602      	mov	r2, r0
 8005e78:	4915      	ldr	r1, [pc, #84]	; (8005ed0 <preference_writer_load+0x7c>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3301      	adds	r3, #1
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2bff      	cmp	r3, #255	; 0xff
 8005e8a:	ddee      	ble.n	8005e6a <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8005e8c:	e013      	b.n	8005eb6 <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8005e96:	4613      	mov	r3, r2
 8005e98:	f107 0218 	add.w	r2, r7, #24
 8005e9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e9e:	f7fc fc83 	bl	80027a8 <flash_read_float>
 8005ea2:	eef0 7a40 	vmov.f32	s15, s0
 8005ea6:	4a0b      	ldr	r2, [pc, #44]	; (8005ed4 <preference_writer_load+0x80>)
 8005ea8:	00a3      	lsls	r3, r4, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	607b      	str	r3, [r7, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ebc:	dbe7      	blt.n	8005e8e <preference_writer_load+0x3a>
    }
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005eca:	b004      	add	sp, #16
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	2000043c 	.word	0x2000043c
 8005ed4:	2000033c 	.word	0x2000033c

08005ed8 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fc fc3a 	bl	8002762 <flash_writer_close>
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005efc:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005efe:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <MX_SPI1_Init+0x6c>)
 8005f00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005f02:	4b17      	ldr	r3, [pc, #92]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005f0a:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005f10:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f18:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005f1e:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f2e:	2228      	movs	r2, #40	; 0x28
 8005f30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f38:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f3e:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f46:	220a      	movs	r2, #10
 8005f48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005f4a:	4805      	ldr	r0, [pc, #20]	; (8005f60 <MX_SPI1_Init+0x68>)
 8005f4c:	f003 f990 	bl	8009270 <HAL_SPI_Init>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8005f56:	f7ff fa8d 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005f5a:	bf00      	nop
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	200094c0 	.word	0x200094c0
 8005f64:	40013000 	.word	0x40013000

08005f68 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f6e:	4a18      	ldr	r2, [pc, #96]	; (8005fd0 <MX_SPI3_Init+0x68>)
 8005f70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005f7a:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f86:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005f92:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f98:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fac:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005fb4:	220a      	movs	r2, #10
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005fb8:	4804      	ldr	r0, [pc, #16]	; (8005fcc <MX_SPI3_Init+0x64>)
 8005fba:	f003 f959 	bl	8009270 <HAL_SPI_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005fc4:	f7ff fa56 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005fc8:	bf00      	nop
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20009518 	.word	0x20009518
 8005fd0:	40003c00 	.word	0x40003c00

08005fd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08c      	sub	sp, #48	; 0x30
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fdc:	f107 031c 	add.w	r3, r7, #28
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	605a      	str	r2, [r3, #4]
 8005fe6:	609a      	str	r2, [r3, #8]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a32      	ldr	r2, [pc, #200]	; (80060bc <HAL_SPI_MspInit+0xe8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d12c      	bne.n	8006050 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	4a30      	ldr	r2, [pc, #192]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006004:	6453      	str	r3, [r2, #68]	; 0x44
 8006006:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	6313      	str	r3, [r2, #48]	; 0x30
 8006022:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800602e:	23e0      	movs	r3, #224	; 0xe0
 8006030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006032:	2302      	movs	r3, #2
 8006034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006036:	2300      	movs	r3, #0
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800603a:	2303      	movs	r3, #3
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800603e:	2305      	movs	r3, #5
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006042:	f107 031c 	add.w	r3, r7, #28
 8006046:	4619      	mov	r1, r3
 8006048:	481e      	ldr	r0, [pc, #120]	; (80060c4 <HAL_SPI_MspInit+0xf0>)
 800604a:	f002 f92b 	bl	80082a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800604e:	e031      	b.n	80060b4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <HAL_SPI_MspInit+0xf4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d12c      	bne.n	80060b4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	4a17      	ldr	r2, [pc, #92]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006068:	6413      	str	r3, [r2, #64]	; 0x40
 800606a:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006080:	f043 0304 	orr.w	r3, r3, #4
 8006084:	6313      	str	r3, [r2, #48]	; 0x30
 8006086:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <HAL_SPI_MspInit+0xec>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006092:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006098:	2302      	movs	r3, #2
 800609a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609c:	2300      	movs	r3, #0
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a0:	2303      	movs	r3, #3
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80060a4:	2306      	movs	r3, #6
 80060a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a8:	f107 031c 	add.w	r3, r7, #28
 80060ac:	4619      	mov	r1, r3
 80060ae:	4807      	ldr	r0, [pc, #28]	; (80060cc <HAL_SPI_MspInit+0xf8>)
 80060b0:	f002 f8f8 	bl	80082a4 <HAL_GPIO_Init>
}
 80060b4:	bf00      	nop
 80060b6:	3730      	adds	r7, #48	; 0x30
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40013000 	.word	0x40013000
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40020000 	.word	0x40020000
 80060c8:	40003c00 	.word	0x40003c00
 80060cc:	40020800 	.word	0x40020800

080060d0 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <FLASH_Unlock+0x24>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da05      	bge.n	80060e8 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <FLASH_Unlock+0x24>)
 80060de:	4a06      	ldr	r2, [pc, #24]	; (80060f8 <FLASH_Unlock+0x28>)
 80060e0:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <FLASH_Unlock+0x24>)
 80060e4:	4a05      	ldr	r2, [pc, #20]	; (80060fc <FLASH_Unlock+0x2c>)
 80060e6:	605a      	str	r2, [r3, #4]
  }  
}
 80060e8:	bf00      	nop
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40023c00 	.word	0x40023c00
 80060f8:	45670123 	.word	0x45670123
 80060fc:	cdef89ab 	.word	0xcdef89ab

08006100 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <FLASH_Lock+0x1c>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	4a04      	ldr	r2, [pc, #16]	; (800611c <FLASH_Lock+0x1c>)
 800610a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800610e:	6113      	str	r3, [r2, #16]
}
 8006110:	bf00      	nop
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40023c00 	.word	0x40023c00

08006120 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8006130:	2309      	movs	r3, #9
 8006132:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d102      	bne.n	8006140 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e010      	b.n	8006162 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d103      	bne.n	800614e <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	e009      	b.n	8006162 <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d103      	bne.n	800615c <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	e002      	b.n	8006162 <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800615c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006160:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8006162:	f000 f8bf 	bl	80062e4 <FLASH_WaitForLastOperation2>
 8006166:	4603      	mov	r3, r0
 8006168:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 800616a:	7afb      	ldrb	r3, [r7, #11]
 800616c:	2b09      	cmp	r3, #9
 800616e:	d12f      	bne.n	80061d0 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8006170:	4b1a      	ldr	r3, [pc, #104]	; (80061dc <FLASH_EraseSector+0xbc>)
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	4a19      	ldr	r2, [pc, #100]	; (80061dc <FLASH_EraseSector+0xbc>)
 8006176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 800617c:	4b17      	ldr	r3, [pc, #92]	; (80061dc <FLASH_EraseSector+0xbc>)
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	4916      	ldr	r1, [pc, #88]	; (80061dc <FLASH_EraseSector+0xbc>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4313      	orrs	r3, r2
 8006186:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8006188:	4b14      	ldr	r3, [pc, #80]	; (80061dc <FLASH_EraseSector+0xbc>)
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	4a13      	ldr	r2, [pc, #76]	; (80061dc <FLASH_EraseSector+0xbc>)
 800618e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006192:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8006194:	4b11      	ldr	r3, [pc, #68]	; (80061dc <FLASH_EraseSector+0xbc>)
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	4a0f      	ldr	r2, [pc, #60]	; (80061dc <FLASH_EraseSector+0xbc>)
 800619e:	f043 0302 	orr.w	r3, r3, #2
 80061a2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <FLASH_EraseSector+0xbc>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <FLASH_EraseSector+0xbc>)
 80061aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ae:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 80061b0:	f000 f898 	bl	80062e4 <FLASH_WaitForLastOperation2>
 80061b4:	4603      	mov	r3, r0
 80061b6:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <FLASH_EraseSector+0xbc>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	4a07      	ldr	r2, [pc, #28]	; (80061dc <FLASH_EraseSector+0xbc>)
 80061be:	f023 0302 	bic.w	r3, r3, #2
 80061c2:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <FLASH_EraseSector+0xbc>)
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	4a04      	ldr	r2, [pc, #16]	; (80061dc <FLASH_EraseSector+0xbc>)
 80061ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061ce:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 80061d0:	7afb      	ldrb	r3, [r7, #11]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40023c00 	.word	0x40023c00

080061e0 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 80061ea:	2309      	movs	r3, #9
 80061ec:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 80061ee:	f000 f879 	bl	80062e4 <FLASH_WaitForLastOperation2>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	d11e      	bne.n	800623a <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80061fc:	4b11      	ldr	r3, [pc, #68]	; (8006244 <FLASH_ProgramWord+0x64>)
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	4a10      	ldr	r2, [pc, #64]	; (8006244 <FLASH_ProgramWord+0x64>)
 8006202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006206:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <FLASH_ProgramWord+0x64>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <FLASH_ProgramWord+0x64>)
 800620e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006212:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <FLASH_ProgramWord+0x64>)
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <FLASH_ProgramWord+0x64>)
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8006226:	f000 f85d 	bl	80062e4 <FLASH_WaitForLastOperation2>
 800622a:	4603      	mov	r3, r0
 800622c:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800622e:	4b05      	ldr	r3, [pc, #20]	; (8006244 <FLASH_ProgramWord+0x64>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	4a04      	ldr	r2, [pc, #16]	; (8006244 <FLASH_ProgramWord+0x64>)
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40023c00 	.word	0x40023c00

08006248 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <FLASH_ClearFlag+0x1c>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60d3      	str	r3, [r2, #12]
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40023c00 	.word	0x40023c00

08006268 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 800626e:	2309      	movs	r3, #9
 8006270:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006272:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <FLASH_GetStatus+0x78>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800627a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627e:	d102      	bne.n	8006286 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8006280:	2301      	movs	r3, #1
 8006282:	71fb      	strb	r3, [r7, #7]
 8006284:	e025      	b.n	80062d2 <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <FLASH_GetStatus+0x78>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 8006292:	2306      	movs	r3, #6
 8006294:	71fb      	strb	r3, [r7, #7]
 8006296:	e01c      	b.n	80062d2 <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <FLASH_GetStatus+0x78>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 80062a4:	2302      	movs	r3, #2
 80062a6:	71fb      	strb	r3, [r7, #7]
 80062a8:	e013      	b.n	80062d2 <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <FLASH_GetStatus+0x78>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 80062b6:	2307      	movs	r3, #7
 80062b8:	71fb      	strb	r3, [r7, #7]
 80062ba:	e00a      	b.n	80062d2 <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80062bc:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <FLASH_GetStatus+0x78>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 80062c8:	2308      	movs	r3, #8
 80062ca:	71fb      	strb	r3, [r7, #7]
 80062cc:	e001      	b.n	80062d2 <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 80062ce:	2309      	movs	r3, #9
 80062d0:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80062d2:	79fb      	ldrb	r3, [r7, #7]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40023c00 	.word	0x40023c00

080062e4 <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 80062ea:	2309      	movs	r3, #9
 80062ec:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80062ee:	f7ff ffbb 	bl	8006268 <FLASH_GetStatus>
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 80062f6:	e003      	b.n	8006300 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 80062f8:	f7ff ffb6 	bl	8006268 <FLASH_GetStatus>
 80062fc:	4603      	mov	r3, r0
 80062fe:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	d0f7      	beq.n	80062f8 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	b2db      	uxtb	r3, r3
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	4b10      	ldr	r3, [pc, #64]	; (8006360 <HAL_MspInit+0x4c>)
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <HAL_MspInit+0x4c>)
 8006324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006328:	6453      	str	r3, [r2, #68]	; 0x44
 800632a:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <HAL_MspInit+0x4c>)
 800632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	4b09      	ldr	r3, [pc, #36]	; (8006360 <HAL_MspInit+0x4c>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	4a08      	ldr	r2, [pc, #32]	; (8006360 <HAL_MspInit+0x4c>)
 8006340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006344:	6413      	str	r3, [r2, #64]	; 0x40
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_MspInit+0x4c>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006352:	2005      	movs	r0, #5
 8006354:	f001 fed2 	bl	80080fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40023800 	.word	0x40023800

08006364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006372:	b480      	push	{r7}
 8006374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006376:	e7fe      	b.n	8006376 <HardFault_Handler+0x4>

08006378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800637c:	e7fe      	b.n	800637c <MemManage_Handler+0x4>

0800637e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006382:	e7fe      	b.n	8006382 <BusFault_Handler+0x4>

08006384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006388:	e7fe      	b.n	8006388 <UsageFault_Handler+0x4>

0800638a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800638a:	b480      	push	{r7}
 800638c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800639c:	bf00      	nop
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063a6:	b480      	push	{r7}
 80063a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063aa:	bf00      	nop
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063b8:	f000 fd5c 	bl	8006e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}

080063c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	// grab timer value and reset
	loop_time = __HAL_TIM_GET_COUNTER(&htim3);
 80063c4:	4b11      	ldr	r3, [pc, #68]	; (800640c <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <TIM1_UP_TIM10_IRQHandler+0x50>)
 80063ce:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <TIM1_UP_TIM10_IRQHandler+0x4c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2200      	movs	r2, #0
 80063d6:	625a      	str	r2, [r3, #36]	; 0x24

	/* Sample ADCs */
	analog_sample(&controller);
 80063d8:	480e      	ldr	r0, [pc, #56]	; (8006414 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80063da:	f7fc faa3 	bl	8002924 <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80063de:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006418 <TIM1_UP_TIM10_IRQHandler+0x58>
 80063e2:	480e      	ldr	r0, [pc, #56]	; (800641c <TIM1_UP_TIM10_IRQHandler+0x5c>)
 80063e4:	f7ff fa34 	bl	8005850 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 80063e8:	480d      	ldr	r0, [pc, #52]	; (8006420 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80063ea:	f7fd f8ed 	bl	80035c8 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 80063ee:	f000 f837 	bl	8006460 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 80063f2:	4b08      	ldr	r3, [pc, #32]	; (8006414 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80063f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a06      	ldr	r2, [pc, #24]	; (8006414 <TIM1_UP_TIM10_IRQHandler+0x54>)
 80063fc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006400:	4808      	ldr	r0, [pc, #32]	; (8006424 <TIM1_UP_TIM10_IRQHandler+0x64>)
 8006402:	f003 fc75 	bl	8009cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */



  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20009604 	.word	0x20009604
 8006410:	200094bc 	.word	0x200094bc
 8006414:	20000850 	.word	0x20000850
 8006418:	3851b717 	.word	0x3851b717
 800641c:	20000b5c 	.word	0x20000b5c
 8006420:	20000b48 	.word	0x20000b48
 8006424:	20009574 	.word	0x20009574

08006428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800642e:	4809      	ldr	r0, [pc, #36]	; (8006454 <USART2_IRQHandler+0x2c>)
 8006430:	f004 fc24 	bl	800ac7c <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8006434:	4b08      	ldr	r3, [pc, #32]	; (8006458 <USART2_IRQHandler+0x30>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	4619      	mov	r1, r3
 800643e:	4807      	ldr	r0, [pc, #28]	; (800645c <USART2_IRQHandler+0x34>)
 8006440:	f7fd fae6 	bl	8003a10 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006444:	4803      	ldr	r0, [pc, #12]	; (8006454 <USART2_IRQHandler+0x2c>)
 8006446:	f004 fc19 	bl	800ac7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	2000964c 	.word	0x2000964c
 8006458:	200094b8 	.word	0x200094b8
 800645c:	20000b48 	.word	0x20000b48

08006460 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8006460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006462:	b095      	sub	sp, #84	; 0x54
 8006464:	af12      	add	r7, sp, #72	; 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8006466:	4b84      	ldr	r3, [pc, #528]	; (8006678 <can_tx_rx+0x218>)
 8006468:	4a84      	ldr	r2, [pc, #528]	; (800667c <can_tx_rx+0x21c>)
 800646a:	2100      	movs	r1, #0
 800646c:	4884      	ldr	r0, [pc, #528]	; (8006680 <can_tx_rx+0x220>)
 800646e:	f001 fc62 	bl	8007d36 <HAL_CAN_GetRxMessage>
 8006472:	4603      	mov	r3, r0
 8006474:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 80f9 	bne.w	8006670 <can_tx_rx+0x210>
//		printf("RX: %X, %X, %X, %X, %X, %X, %X, %X\n\r", can_rx.data[0], can_rx.data[1], can_rx.data[2], can_rx.data[3], can_rx.data[4], can_rx.data[5], can_rx.data[6], can_rx.data[7]);
//		HAL_GPIO_TogglePin(LED); //Toggle the state of led on can rx
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 800647e:	4b81      	ldr	r3, [pc, #516]	; (8006684 <can_tx_rx+0x224>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	4a80      	ldr	r2, [pc, #512]	; (8006688 <can_tx_rx+0x228>)
 8006486:	ed92 7a05 	vldr	s14, [r2, #20]
 800648a:	4a80      	ldr	r2, [pc, #512]	; (800668c <can_tx_rx+0x22c>)
 800648c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006490:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006494:	4a7c      	ldr	r2, [pc, #496]	; (8006688 <can_tx_rx+0x228>)
 8006496:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 800649a:	4a7c      	ldr	r2, [pc, #496]	; (800668c <can_tx_rx+0x22c>)
 800649c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80064a0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80064a4:	4a7a      	ldr	r2, [pc, #488]	; (8006690 <can_tx_rx+0x230>)
 80064a6:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 80064aa:	4a78      	ldr	r2, [pc, #480]	; (800668c <can_tx_rx+0x22c>)
 80064ac:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80064b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064b4:	4a75      	ldr	r2, [pc, #468]	; (800668c <can_tx_rx+0x22c>)
 80064b6:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80064ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064be:	eeb0 1a67 	vmov.f32	s2, s15
 80064c2:	eef0 0a46 	vmov.f32	s1, s12
 80064c6:	eeb0 0a66 	vmov.f32	s0, s13
 80064ca:	4619      	mov	r1, r3
 80064cc:	4871      	ldr	r0, [pc, #452]	; (8006694 <can_tx_rx+0x234>)
 80064ce:	f7fb fd45 	bl	8001f5c <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 80064d2:	463b      	mov	r3, r7
 80064d4:	4a70      	ldr	r2, [pc, #448]	; (8006698 <can_tx_rx+0x238>)
 80064d6:	4971      	ldr	r1, [pc, #452]	; (800669c <can_tx_rx+0x23c>)
 80064d8:	4869      	ldr	r0, [pc, #420]	; (8006680 <can_tx_rx+0x220>)
 80064da:	f001 fb51 	bl	8007b80 <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80064de:	4b70      	ldr	r3, [pc, #448]	; (80066a0 <can_tx_rx+0x240>)
 80064e0:	785a      	ldrb	r2, [r3, #1]
 80064e2:	4b6f      	ldr	r3, [pc, #444]	; (80066a0 <can_tx_rx+0x240>)
 80064e4:	789b      	ldrb	r3, [r3, #2]
 80064e6:	4013      	ands	r3, r2
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b6d      	ldr	r3, [pc, #436]	; (80066a0 <can_tx_rx+0x240>)
 80064ec:	78db      	ldrb	r3, [r3, #3]
 80064ee:	4013      	ands	r3, r2
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	4b6b      	ldr	r3, [pc, #428]	; (80066a0 <can_tx_rx+0x240>)
 80064f4:	791b      	ldrb	r3, [r3, #4]
 80064f6:	4013      	ands	r3, r2
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	4b69      	ldr	r3, [pc, #420]	; (80066a0 <can_tx_rx+0x240>)
 80064fc:	795b      	ldrb	r3, [r3, #5]
 80064fe:	4013      	ands	r3, r2
 8006500:	b2da      	uxtb	r2, r3
 8006502:	4b67      	ldr	r3, [pc, #412]	; (80066a0 <can_tx_rx+0x240>)
 8006504:	799b      	ldrb	r3, [r3, #6]
 8006506:	4013      	ands	r3, r2
 8006508:	b2da      	uxtb	r2, r3
 800650a:	4b65      	ldr	r3, [pc, #404]	; (80066a0 <can_tx_rx+0x240>)
 800650c:	79db      	ldrb	r3, [r3, #7]
 800650e:	4013      	ands	r3, r2
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2bff      	cmp	r3, #255	; 0xff
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2da      	uxtb	r2, r3
 800651c:	4b60      	ldr	r3, [pc, #384]	; (80066a0 <can_tx_rx+0x240>)
 800651e:	7a1b      	ldrb	r3, [r3, #8]
 8006520:	2bfc      	cmp	r3, #252	; 0xfc
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	4013      	ands	r3, r2
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <can_tx_rx+0xdc>
			  update_fsm(&state, MOTOR_CMD);
 8006532:	216d      	movs	r1, #109	; 0x6d
 8006534:	485b      	ldr	r0, [pc, #364]	; (80066a4 <can_tx_rx+0x244>)
 8006536:	f7fd fa6b 	bl	8003a10 <update_fsm>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
			  controller.timeout = 0;					// Reset timeout counter
		}
	}

}
 800653a:	e099      	b.n	8006670 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 800653c:	4b58      	ldr	r3, [pc, #352]	; (80066a0 <can_tx_rx+0x240>)
 800653e:	785a      	ldrb	r2, [r3, #1]
 8006540:	4b57      	ldr	r3, [pc, #348]	; (80066a0 <can_tx_rx+0x240>)
 8006542:	789b      	ldrb	r3, [r3, #2]
 8006544:	4013      	ands	r3, r2
 8006546:	b2da      	uxtb	r2, r3
 8006548:	4b55      	ldr	r3, [pc, #340]	; (80066a0 <can_tx_rx+0x240>)
 800654a:	78db      	ldrb	r3, [r3, #3]
 800654c:	4013      	ands	r3, r2
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2bff      	cmp	r3, #255	; 0xff
 8006552:	bf0c      	ite	eq
 8006554:	2301      	moveq	r3, #1
 8006556:	2300      	movne	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	461a      	mov	r2, r3
 800655c:	4b50      	ldr	r3, [pc, #320]	; (80066a0 <can_tx_rx+0x240>)
 800655e:	791b      	ldrb	r3, [r3, #4]
 8006560:	2bff      	cmp	r3, #255	; 0xff
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	4619      	mov	r1, r3
 800656c:	4b4c      	ldr	r3, [pc, #304]	; (80066a0 <can_tx_rx+0x240>)
 800656e:	795b      	ldrb	r3, [r3, #5]
 8006570:	2bff      	cmp	r3, #255	; 0xff
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4013      	ands	r3, r2
 8006580:	4a47      	ldr	r2, [pc, #284]	; (80066a0 <can_tx_rx+0x240>)
 8006582:	7992      	ldrb	r2, [r2, #6]
 8006584:	2aff      	cmp	r2, #255	; 0xff
 8006586:	bf0c      	ite	eq
 8006588:	2201      	moveq	r2, #1
 800658a:	2200      	movne	r2, #0
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	4013      	ands	r3, r2
 8006590:	4a43      	ldr	r2, [pc, #268]	; (80066a0 <can_tx_rx+0x240>)
 8006592:	79d2      	ldrb	r2, [r2, #7]
 8006594:	2aff      	cmp	r2, #255	; 0xff
 8006596:	bf0c      	ite	eq
 8006598:	2201      	moveq	r2, #1
 800659a:	2200      	movne	r2, #0
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	4013      	ands	r3, r2
 80065a0:	4a3f      	ldr	r2, [pc, #252]	; (80066a0 <can_tx_rx+0x240>)
 80065a2:	7a12      	ldrb	r2, [r2, #8]
 80065a4:	2afd      	cmp	r2, #253	; 0xfd
 80065a6:	bf0c      	ite	eq
 80065a8:	2201      	moveq	r2, #1
 80065aa:	2200      	movne	r2, #0
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <can_tx_rx+0x15e>
			update_fsm(&state, MENU_CMD);
 80065b4:	211b      	movs	r1, #27
 80065b6:	483b      	ldr	r0, [pc, #236]	; (80066a4 <can_tx_rx+0x244>)
 80065b8:	f7fd fa2a 	bl	8003a10 <update_fsm>
}
 80065bc:	e058      	b.n	8006670 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80065be:	4b38      	ldr	r3, [pc, #224]	; (80066a0 <can_tx_rx+0x240>)
 80065c0:	785a      	ldrb	r2, [r3, #1]
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <can_tx_rx+0x240>)
 80065c4:	789b      	ldrb	r3, [r3, #2]
 80065c6:	4013      	ands	r3, r2
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4b35      	ldr	r3, [pc, #212]	; (80066a0 <can_tx_rx+0x240>)
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	4013      	ands	r3, r2
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2bff      	cmp	r3, #255	; 0xff
 80065d4:	bf0c      	ite	eq
 80065d6:	2301      	moveq	r3, #1
 80065d8:	2300      	movne	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	4b30      	ldr	r3, [pc, #192]	; (80066a0 <can_tx_rx+0x240>)
 80065e0:	791b      	ldrb	r3, [r3, #4]
 80065e2:	2bff      	cmp	r3, #255	; 0xff
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <can_tx_rx+0x240>)
 80065f0:	795b      	ldrb	r3, [r3, #5]
 80065f2:	2bff      	cmp	r3, #255	; 0xff
 80065f4:	bf0c      	ite	eq
 80065f6:	2301      	moveq	r3, #1
 80065f8:	2300      	movne	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	4013      	ands	r3, r2
 8006602:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <can_tx_rx+0x240>)
 8006604:	7992      	ldrb	r2, [r2, #6]
 8006606:	2aff      	cmp	r2, #255	; 0xff
 8006608:	bf0c      	ite	eq
 800660a:	2201      	moveq	r2, #1
 800660c:	2200      	movne	r2, #0
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	4013      	ands	r3, r2
 8006612:	4a23      	ldr	r2, [pc, #140]	; (80066a0 <can_tx_rx+0x240>)
 8006614:	79d2      	ldrb	r2, [r2, #7]
 8006616:	2aff      	cmp	r2, #255	; 0xff
 8006618:	bf0c      	ite	eq
 800661a:	2201      	moveq	r2, #1
 800661c:	2200      	movne	r2, #0
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	4013      	ands	r3, r2
 8006622:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <can_tx_rx+0x240>)
 8006624:	7a12      	ldrb	r2, [r2, #8]
 8006626:	2afe      	cmp	r2, #254	; 0xfe
 8006628:	bf0c      	ite	eq
 800662a:	2201      	moveq	r2, #1
 800662c:	2200      	movne	r2, #0
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <can_tx_rx+0x1e0>
			  update_fsm(&state, ZERO_CMD);
 8006636:	217a      	movs	r1, #122	; 0x7a
 8006638:	481a      	ldr	r0, [pc, #104]	; (80066a4 <can_tx_rx+0x244>)
 800663a:	f7fd f9e9 	bl	8003a10 <update_fsm>
}
 800663e:	e017      	b.n	8006670 <can_tx_rx+0x210>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8006640:	4e17      	ldr	r6, [pc, #92]	; (80066a0 <can_tx_rx+0x240>)
 8006642:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <can_tx_rx+0x248>)
 8006644:	9310      	str	r3, [sp, #64]	; 0x40
 8006646:	466d      	mov	r5, sp
 8006648:	f106 0410 	add.w	r4, r6, #16
 800664c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800664e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006658:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800665c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006660:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006664:	f7fb fcf2 	bl	800204c <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <can_tx_rx+0x230>)
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006678:	20009469 	.word	0x20009469
 800667c:	20009474 	.word	0x20009474
 8006680:	20000314 	.word	0x20000314
 8006684:	2000043c 	.word	0x2000043c
 8006688:	20000b5c 	.word	0x20000b5c
 800668c:	2000033c 	.word	0x2000033c
 8006690:	20000850 	.word	0x20000850
 8006694:	20009448 	.word	0x20009448
 8006698:	20009449 	.word	0x20009449
 800669c:	20009450 	.word	0x20009450
 80066a0:	20009468 	.word	0x20009468
 80066a4:	20000b48 	.word	0x20000b48
 80066a8:	2000091c 	.word	0x2000091c

080066ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
	return 1;
 80066b0:	2301      	movs	r3, #1
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <_kill>:

int _kill(int pid, int sig)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80066c6:	f005 fa49 	bl	800bb5c <__errno>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2216      	movs	r2, #22
 80066ce:	601a      	str	r2, [r3, #0]
	return -1;
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_exit>:

void _exit (int status)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80066e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff ffe7 	bl	80066bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80066ee:	e7fe      	b.n	80066ee <_exit+0x12>

080066f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	e00a      	b.n	8006718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006702:	f3af 8000 	nop.w
 8006706:	4601      	mov	r1, r0
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	60ba      	str	r2, [r7, #8]
 800670e:	b2ca      	uxtb	r2, r1
 8006710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3301      	adds	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	dbf0      	blt.n	8006702 <_read+0x12>
	}

return len;
 8006720:	687b      	ldr	r3, [r7, #4]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	e009      	b.n	8006750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	60ba      	str	r2, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 faf5 	bl	8006d34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	3301      	adds	r3, #1
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	dbf1      	blt.n	800673c <_write+0x12>
	}
	return len;
 8006758:	687b      	ldr	r3, [r7, #4]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <_close>:

int _close(int file)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
	return -1;
 800676a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800678a:	605a      	str	r2, [r3, #4]
	return 0;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <_isatty>:

int _isatty(int file)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
	return 1;
 80067a2:	2301      	movs	r3, #1
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
	return 0;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80067d4:	4b11      	ldr	r3, [pc, #68]	; (800681c <_sbrk+0x50>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <_sbrk+0x16>
		heap_end = &end;
 80067dc:	4b0f      	ldr	r3, [pc, #60]	; (800681c <_sbrk+0x50>)
 80067de:	4a10      	ldr	r2, [pc, #64]	; (8006820 <_sbrk+0x54>)
 80067e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80067e2:	4b0e      	ldr	r3, [pc, #56]	; (800681c <_sbrk+0x50>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <_sbrk+0x50>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4413      	add	r3, r2
 80067f0:	466a      	mov	r2, sp
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d907      	bls.n	8006806 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80067f6:	f005 f9b1 	bl	800bb5c <__errno>
 80067fa:	4603      	mov	r3, r0
 80067fc:	220c      	movs	r2, #12
 80067fe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006804:	e006      	b.n	8006814 <_sbrk+0x48>
	}

	heap_end += incr;
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <_sbrk+0x50>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	4a03      	ldr	r2, [pc, #12]	; (800681c <_sbrk+0x50>)
 8006810:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20009570 	.word	0x20009570
 8006820:	200096a8 	.word	0x200096a8

08006824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <SystemInit+0x28>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	4a07      	ldr	r2, [pc, #28]	; (800684c <SystemInit+0x28>)
 8006830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <SystemInit+0x28>)
 800683a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800683e:	609a      	str	r2, [r3, #8]
#endif
}
 8006840:	bf00      	nop
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b096      	sub	sp, #88	; 0x58
 8006854:	af00      	add	r7, sp, #0
	// - 40kHz loop timing is 2250 timer period


  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006856:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	609a      	str	r2, [r3, #8]
 8006862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800686e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	611a      	str	r2, [r3, #16]
 800687e:	615a      	str	r2, [r3, #20]
 8006880:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006882:	1d3b      	adds	r3, r7, #4
 8006884:	2220      	movs	r2, #32
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f005 f99f 	bl	800bbcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800688e:	4b4a      	ldr	r3, [pc, #296]	; (80069b8 <MX_TIM1_Init+0x168>)
 8006890:	4a4a      	ldr	r2, [pc, #296]	; (80069bc <MX_TIM1_Init+0x16c>)
 8006892:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006894:	4b48      	ldr	r3, [pc, #288]	; (80069b8 <MX_TIM1_Init+0x168>)
 8006896:	2200      	movs	r2, #0
 8006898:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800689a:	4b47      	ldr	r3, [pc, #284]	; (80069b8 <MX_TIM1_Init+0x168>)
 800689c:	2220      	movs	r2, #32
 800689e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 80068a0:	4b45      	ldr	r3, [pc, #276]	; (80069b8 <MX_TIM1_Init+0x168>)
 80068a2:	f241 1294 	movw	r2, #4500	; 0x1194
 80068a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068a8:	4b43      	ldr	r3, [pc, #268]	; (80069b8 <MX_TIM1_Init+0x168>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80068ae:	4b42      	ldr	r3, [pc, #264]	; (80069b8 <MX_TIM1_Init+0x168>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80068b4:	4b40      	ldr	r3, [pc, #256]	; (80069b8 <MX_TIM1_Init+0x168>)
 80068b6:	2280      	movs	r2, #128	; 0x80
 80068b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80068ba:	483f      	ldr	r0, [pc, #252]	; (80069b8 <MX_TIM1_Init+0x168>)
 80068bc:	f002 ffce 	bl	800985c <HAL_TIM_Base_Init>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80068c6:	f7fe fdd5 	bl	8005474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80068d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80068d4:	4619      	mov	r1, r3
 80068d6:	4838      	ldr	r0, [pc, #224]	; (80069b8 <MX_TIM1_Init+0x168>)
 80068d8:	f003 fbd4 	bl	800a084 <HAL_TIM_ConfigClockSource>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80068e2:	f7fe fdc7 	bl	8005474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80068e6:	4834      	ldr	r0, [pc, #208]	; (80069b8 <MX_TIM1_Init+0x168>)
 80068e8:	f003 f8e0 	bl	8009aac <HAL_TIM_PWM_Init>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80068f2:	f7fe fdbf 	bl	8005474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068f6:	2300      	movs	r3, #0
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80068fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006902:	4619      	mov	r1, r3
 8006904:	482c      	ldr	r0, [pc, #176]	; (80069b8 <MX_TIM1_Init+0x168>)
 8006906:	f003 ffc7 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006910:	f7fe fdb0 	bl	8005474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006914:	2360      	movs	r3, #96	; 0x60
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800691c:	2302      	movs	r3, #2
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006920:	2300      	movs	r3, #0
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006924:	2304      	movs	r3, #4
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006928:	2300      	movs	r3, #0
 800692a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800692c:	2300      	movs	r3, #0
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006934:	2200      	movs	r2, #0
 8006936:	4619      	mov	r1, r3
 8006938:	481f      	ldr	r0, [pc, #124]	; (80069b8 <MX_TIM1_Init+0x168>)
 800693a:	f003 fae1 	bl	8009f00 <HAL_TIM_PWM_ConfigChannel>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006944:	f7fe fd96 	bl	8005474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800694c:	2204      	movs	r2, #4
 800694e:	4619      	mov	r1, r3
 8006950:	4819      	ldr	r0, [pc, #100]	; (80069b8 <MX_TIM1_Init+0x168>)
 8006952:	f003 fad5 	bl	8009f00 <HAL_TIM_PWM_ConfigChannel>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800695c:	f7fe fd8a 	bl	8005474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006964:	2208      	movs	r2, #8
 8006966:	4619      	mov	r1, r3
 8006968:	4813      	ldr	r0, [pc, #76]	; (80069b8 <MX_TIM1_Init+0x168>)
 800696a:	f003 fac9 	bl	8009f00 <HAL_TIM_PWM_ConfigChannel>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8006974:	f7fe fd7e 	bl	8005474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006978:	2300      	movs	r3, #0
 800697a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800697c:	2300      	movs	r3, #0
 800697e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800698c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006990:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006992:	2300      	movs	r3, #0
 8006994:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4807      	ldr	r0, [pc, #28]	; (80069b8 <MX_TIM1_Init+0x168>)
 800699c:	f003 fff8 	bl	800a990 <HAL_TIMEx_ConfigBreakDeadTime>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80069a6:	f7fe fd65 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80069aa:	4803      	ldr	r0, [pc, #12]	; (80069b8 <MX_TIM1_Init+0x168>)
 80069ac:	f000 f8f4 	bl	8006b98 <HAL_TIM_MspPostInit>

}
 80069b0:	bf00      	nop
 80069b2:	3758      	adds	r7, #88	; 0x58
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20009574 	.word	0x20009574
 80069bc:	40010000 	.word	0x40010000

080069c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	605a      	str	r2, [r3, #4]
 80069d0:	609a      	str	r2, [r3, #8]
 80069d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069d4:	463b      	mov	r3, r7
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <MX_TIM2_Init+0x94>)
 80069de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 80069e4:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <MX_TIM2_Init+0x94>)
 80069e6:	225a      	movs	r2, #90	; 0x5a
 80069e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <MX_TIM2_Init+0x94>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80069f0:	4b18      	ldr	r3, [pc, #96]	; (8006a54 <MX_TIM2_Init+0x94>)
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069f8:	4b16      	ldr	r3, [pc, #88]	; (8006a54 <MX_TIM2_Init+0x94>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069fe:	4b15      	ldr	r3, [pc, #84]	; (8006a54 <MX_TIM2_Init+0x94>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a04:	4813      	ldr	r0, [pc, #76]	; (8006a54 <MX_TIM2_Init+0x94>)
 8006a06:	f002 ff29 	bl	800985c <HAL_TIM_Base_Init>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006a10:	f7fe fd30 	bl	8005474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a1a:	f107 0308 	add.w	r3, r7, #8
 8006a1e:	4619      	mov	r1, r3
 8006a20:	480c      	ldr	r0, [pc, #48]	; (8006a54 <MX_TIM2_Init+0x94>)
 8006a22:	f003 fb2f 	bl	800a084 <HAL_TIM_ConfigClockSource>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006a2c:	f7fe fd22 	bl	8005474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a30:	2300      	movs	r3, #0
 8006a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a38:	463b      	mov	r3, r7
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4805      	ldr	r0, [pc, #20]	; (8006a54 <MX_TIM2_Init+0x94>)
 8006a3e:	f003 ff2b 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006a48:	f7fe fd14 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a4c:	bf00      	nop
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	200095bc 	.word	0x200095bc

08006a58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a5e:	f107 0308 	add.w	r3, r7, #8
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	609a      	str	r2, [r3, #8]
 8006a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a74:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <MX_TIM3_Init+0x94>)
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <MX_TIM3_Init+0x98>)
 8006a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90;
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	; (8006aec <MX_TIM3_Init+0x94>)
 8006a7c:	225a      	movs	r2, #90	; 0x5a
 8006a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a80:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <MX_TIM3_Init+0x94>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006a86:	4b19      	ldr	r3, [pc, #100]	; (8006aec <MX_TIM3_Init+0x94>)
 8006a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a8e:	4b17      	ldr	r3, [pc, #92]	; (8006aec <MX_TIM3_Init+0x94>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <MX_TIM3_Init+0x94>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006a9a:	4814      	ldr	r0, [pc, #80]	; (8006aec <MX_TIM3_Init+0x94>)
 8006a9c:	f002 fede 	bl	800985c <HAL_TIM_Base_Init>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006aa6:	f7fe fce5 	bl	8005474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006ab0:	f107 0308 	add.w	r3, r7, #8
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	480d      	ldr	r0, [pc, #52]	; (8006aec <MX_TIM3_Init+0x94>)
 8006ab8:	f003 fae4 	bl	800a084 <HAL_TIM_ConfigClockSource>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8006ac2:	f7fe fcd7 	bl	8005474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006ace:	463b      	mov	r3, r7
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4806      	ldr	r0, [pc, #24]	; (8006aec <MX_TIM3_Init+0x94>)
 8006ad4:	f003 fee0 	bl	800a898 <HAL_TIMEx_MasterConfigSynchronization>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8006ade:	f7fe fcc9 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006ae2:	bf00      	nop
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20009604 	.word	0x20009604
 8006af0:	40000400 	.word	0x40000400

08006af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <HAL_TIM_Base_MspInit+0x98>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d116      	bne.n	8006b34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	4b21      	ldr	r3, [pc, #132]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6453      	str	r3, [r2, #68]	; 0x44
 8006b16:	4b1e      	ldr	r3, [pc, #120]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8006b22:	2200      	movs	r2, #0
 8006b24:	2101      	movs	r1, #1
 8006b26:	2019      	movs	r0, #25
 8006b28:	f001 faf3 	bl	8008112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006b2c:	2019      	movs	r0, #25
 8006b2e:	f001 fb0c 	bl	800814a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006b32:	e026      	b.n	8006b82 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3c:	d10e      	bne.n	8006b5c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b4e:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	693b      	ldr	r3, [r7, #16]
}
 8006b5a:	e012      	b.n	8006b82 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <HAL_TIM_Base_MspInit+0xa0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d10d      	bne.n	8006b82 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	4a08      	ldr	r2, [pc, #32]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	6413      	str	r3, [r2, #64]	; 0x40
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_TIM_Base_MspInit+0x9c>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
}
 8006b82:	bf00      	nop
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40023800 	.word	0x40023800
 8006b94:	40000400 	.word	0x40000400

08006b98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	609a      	str	r2, [r3, #8]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a12      	ldr	r2, [pc, #72]	; (8006c00 <HAL_TIM_MspPostInit+0x68>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d11e      	bne.n	8006bf8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <HAL_TIM_MspPostInit+0x6c>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	4a10      	ldr	r2, [pc, #64]	; (8006c04 <HAL_TIM_MspPostInit+0x6c>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bca:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <HAL_TIM_MspPostInit+0x6c>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	60bb      	str	r3, [r7, #8]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006bd6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006bda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006be4:	2303      	movs	r3, #3
 8006be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006be8:	2301      	movs	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bec:	f107 030c 	add.w	r3, r7, #12
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4805      	ldr	r0, [pc, #20]	; (8006c08 <HAL_TIM_MspPostInit+0x70>)
 8006bf4:	f001 fb56 	bl	80082a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006bf8:	bf00      	nop
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40023800 	.word	0x40023800
 8006c08:	40020000 	.word	0x40020000

08006c0c <delay_us>:
}

/* USER CODE BEGIN 1 */

void delay_us (uint16_t us)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <delay_us+0x30>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8006c1e:	bf00      	nop
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <delay_us+0x30>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c26:	88fb      	ldrh	r3, [r7, #6]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d3f9      	bcc.n	8006c20 <delay_us+0x14>
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	200095bc 	.word	0x200095bc

08006c40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006c44:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c46:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <MX_USART2_UART_Init+0x50>)
 8006c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c4c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8006c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c52:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c64:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c66:	220c      	movs	r2, #12
 8006c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c6a:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006c76:	4805      	ldr	r0, [pc, #20]	; (8006c8c <MX_USART2_UART_Init+0x4c>)
 8006c78:	f003 fef0 	bl	800aa5c <HAL_UART_Init>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006c82:	f7fe fbf7 	bl	8005474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006c86:	bf00      	nop
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	2000964c 	.word	0x2000964c
 8006c90:	40004400 	.word	0x40004400

08006c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9c:	f107 0314 	add.w	r3, r7, #20
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	; (8006d28 <HAL_UART_MspInit+0x94>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d133      	bne.n	8006d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <HAL_UART_MspInit+0x98>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <HAL_UART_MspInit+0x98>)
 8006cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc6:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <HAL_UART_MspInit+0x98>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	4b15      	ldr	r3, [pc, #84]	; (8006d2c <HAL_UART_MspInit+0x98>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	4a14      	ldr	r2, [pc, #80]	; (8006d2c <HAL_UART_MspInit+0x98>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce2:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <HAL_UART_MspInit+0x98>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006cee:	230c      	movs	r3, #12
 8006cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006cfe:	2307      	movs	r3, #7
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d02:	f107 0314 	add.w	r3, r7, #20
 8006d06:	4619      	mov	r1, r3
 8006d08:	4809      	ldr	r0, [pc, #36]	; (8006d30 <HAL_UART_MspInit+0x9c>)
 8006d0a:	f001 facb 	bl	80082a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2102      	movs	r1, #2
 8006d12:	2026      	movs	r0, #38	; 0x26
 8006d14:	f001 f9fd 	bl	8008112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006d18:	2026      	movs	r0, #38	; 0x26
 8006d1a:	f001 fa16 	bl	800814a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006d1e:	bf00      	nop
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40004400 	.word	0x40004400
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	40020000 	.word	0x40020000

08006d34 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006d3c:	1d39      	adds	r1, r7, #4
 8006d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d42:	2201      	movs	r2, #1
 8006d44:	4803      	ldr	r0, [pc, #12]	; (8006d54 <__io_putchar+0x20>)
 8006d46:	f003 fed6 	bl	800aaf6 <HAL_UART_Transmit>
  return ch;
 8006d4a:	687b      	ldr	r3, [r7, #4]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	2000964c 	.word	0x2000964c

08006d58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8006d60:	2201      	movs	r2, #1
 8006d62:	4904      	ldr	r1, [pc, #16]	; (8006d74 <HAL_UART_RxCpltCallback+0x1c>)
 8006d64:	4804      	ldr	r0, [pc, #16]	; (8006d78 <HAL_UART_RxCpltCallback+0x20>)
 8006d66:	f003 ff58 	bl	800ac1a <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200094b8 	.word	0x200094b8
 8006d78:	2000964c 	.word	0x2000964c

08006d7c <Reset_Handler>:
 8006d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006db4 <LoopFillZerobss+0x12>
 8006d80:	480d      	ldr	r0, [pc, #52]	; (8006db8 <LoopFillZerobss+0x16>)
 8006d82:	490e      	ldr	r1, [pc, #56]	; (8006dbc <LoopFillZerobss+0x1a>)
 8006d84:	4a0e      	ldr	r2, [pc, #56]	; (8006dc0 <LoopFillZerobss+0x1e>)
 8006d86:	2300      	movs	r3, #0
 8006d88:	e002      	b.n	8006d90 <LoopCopyDataInit>

08006d8a <CopyDataInit>:
 8006d8a:	58d4      	ldr	r4, [r2, r3]
 8006d8c:	50c4      	str	r4, [r0, r3]
 8006d8e:	3304      	adds	r3, #4

08006d90 <LoopCopyDataInit>:
 8006d90:	18c4      	adds	r4, r0, r3
 8006d92:	428c      	cmp	r4, r1
 8006d94:	d3f9      	bcc.n	8006d8a <CopyDataInit>
 8006d96:	4a0b      	ldr	r2, [pc, #44]	; (8006dc4 <LoopFillZerobss+0x22>)
 8006d98:	4c0b      	ldr	r4, [pc, #44]	; (8006dc8 <LoopFillZerobss+0x26>)
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e001      	b.n	8006da2 <LoopFillZerobss>

08006d9e <FillZerobss>:
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	3204      	adds	r2, #4

08006da2 <LoopFillZerobss>:
 8006da2:	42a2      	cmp	r2, r4
 8006da4:	d3fb      	bcc.n	8006d9e <FillZerobss>
 8006da6:	f7ff fd3d 	bl	8006824 <SystemInit>
 8006daa:	f004 fedd 	bl	800bb68 <__libc_init_array>
 8006dae:	f7fd feef 	bl	8004b90 <main>
 8006db2:	4770      	bx	lr
 8006db4:	20020000 	.word	0x20020000
 8006db8:	20000000 	.word	0x20000000
 8006dbc:	20000220 	.word	0x20000220
 8006dc0:	08011ec0 	.word	0x08011ec0
 8006dc4:	20000220 	.word	0x20000220
 8006dc8:	200096a4 	.word	0x200096a4

08006dcc <ADC_IRQHandler>:
 8006dcc:	e7fe      	b.n	8006dcc <ADC_IRQHandler>
	...

08006dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <HAL_Init+0x40>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a0d      	ldr	r2, [pc, #52]	; (8006e10 <HAL_Init+0x40>)
 8006dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_Init+0x40>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <HAL_Init+0x40>)
 8006de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006dec:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <HAL_Init+0x40>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a07      	ldr	r2, [pc, #28]	; (8006e10 <HAL_Init+0x40>)
 8006df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006df8:	2003      	movs	r0, #3
 8006dfa:	f001 f97f 	bl	80080fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006dfe:	2000      	movs	r0, #0
 8006e00:	f000 f808 	bl	8006e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e04:	f7ff fa86 	bl	8006314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40023c00 	.word	0x40023c00

08006e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e1c:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <HAL_InitTick+0x54>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <HAL_InitTick+0x58>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 f997 	bl	8008166 <HAL_SYSTICK_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e00e      	b.n	8006e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b0f      	cmp	r3, #15
 8006e46:	d80a      	bhi.n	8006e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e48:	2200      	movs	r2, #0
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e50:	f001 f95f 	bl	8008112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e54:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <HAL_InitTick+0x5c>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e000      	b.n	8006e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000040 	.word	0x20000040
 8006e6c:	20000048 	.word	0x20000048
 8006e70:	20000044 	.word	0x20000044

08006e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <HAL_IncTick+0x20>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <HAL_IncTick+0x24>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4413      	add	r3, r2
 8006e84:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <HAL_IncTick+0x24>)
 8006e86:	6013      	str	r3, [r2, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20000048 	.word	0x20000048
 8006e98:	20009690 	.word	0x20009690

08006e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <HAL_GetTick+0x14>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20009690 	.word	0x20009690

08006eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ebc:	f7ff ffee 	bl	8006e9c <HAL_GetTick>
 8006ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ecc:	d005      	beq.n	8006eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <HAL_Delay+0x44>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006eda:	bf00      	nop
 8006edc:	f7ff ffde 	bl	8006e9c <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d8f7      	bhi.n	8006edc <HAL_Delay+0x28>
  {
  }
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000048 	.word	0x20000048

08006efc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e033      	b.n	8006f7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d109      	bne.n	8006f2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fa f98a 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d118      	bne.n	8006f6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f42:	f023 0302 	bic.w	r3, r3, #2
 8006f46:	f043 0202 	orr.w	r2, r3, #2
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fab4 	bl	80074bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	f043 0201 	orr.w	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	641a      	str	r2, [r3, #64]	; 0x40
 8006f6a:	e001      	b.n	8006f70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_ADC_Start+0x1a>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e0b2      	b.n	8007104 <HAL_ADC_Start+0x180>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d018      	beq.n	8006fe6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006fc4:	4b52      	ldr	r3, [pc, #328]	; (8007110 <HAL_ADC_Start+0x18c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a52      	ldr	r2, [pc, #328]	; (8007114 <HAL_ADC_Start+0x190>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	0c9a      	lsrs	r2, r3, #18
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006fd8:	e002      	b.n	8006fe0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f9      	bne.n	8006fda <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d17a      	bne.n	80070ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ffc:	f023 0301 	bic.w	r3, r3, #1
 8007000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800701e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800702e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007032:	d106      	bne.n	8007042 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	f023 0206 	bic.w	r2, r3, #6
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
 8007040:	e002      	b.n	8007048 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007050:	4b31      	ldr	r3, [pc, #196]	; (8007118 <HAL_ADC_Start+0x194>)
 8007052:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800705c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2b00      	cmp	r3, #0
 8007068:	d12a      	bne.n	80070c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2b      	ldr	r2, [pc, #172]	; (800711c <HAL_ADC_Start+0x198>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d015      	beq.n	80070a0 <HAL_ADC_Start+0x11c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a29      	ldr	r2, [pc, #164]	; (8007120 <HAL_ADC_Start+0x19c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d105      	bne.n	800708a <HAL_ADC_Start+0x106>
 800707e:	4b26      	ldr	r3, [pc, #152]	; (8007118 <HAL_ADC_Start+0x194>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a25      	ldr	r2, [pc, #148]	; (8007124 <HAL_ADC_Start+0x1a0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d136      	bne.n	8007102 <HAL_ADC_Start+0x17e>
 8007094:	4b20      	ldr	r3, [pc, #128]	; (8007118 <HAL_ADC_Start+0x194>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	d130      	bne.n	8007102 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d129      	bne.n	8007102 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80070bc:	609a      	str	r2, [r3, #8]
 80070be:	e020      	b.n	8007102 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a15      	ldr	r2, [pc, #84]	; (800711c <HAL_ADC_Start+0x198>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d11b      	bne.n	8007102 <HAL_ADC_Start+0x17e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d114      	bne.n	8007102 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e00b      	b.n	8007102 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f043 0210 	orr.w	r2, r3, #16
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fa:	f043 0201 	orr.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20000040 	.word	0x20000040
 8007114:	431bde83 	.word	0x431bde83
 8007118:	40012300 	.word	0x40012300
 800711c:	40012000 	.word	0x40012000
 8007120:	40012100 	.word	0x40012100
 8007124:	40012200 	.word	0x40012200

08007128 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007144:	d113      	bne.n	800716e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007154:	d10b      	bne.n	800716e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e063      	b.n	8007236 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800716e:	f7ff fe95 	bl	8006e9c <HAL_GetTick>
 8007172:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007174:	e021      	b.n	80071ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800717c:	d01d      	beq.n	80071ba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <HAL_ADC_PollForConversion+0x6c>
 8007184:	f7ff fe8a 	bl	8006e9c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d212      	bcs.n	80071ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d00b      	beq.n	80071ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f043 0204 	orr.w	r2, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e03d      	b.n	8007236 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d1d6      	bne.n	8007176 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0212 	mvn.w	r2, #18
 80071d0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d123      	bne.n	8007234 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11f      	bne.n	8007234 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d006      	beq.n	8007210 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800720c:	2b00      	cmp	r3, #0
 800720e:	d111      	bne.n	8007234 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	f043 0201 	orr.w	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_ADC_ConfigChannel+0x1c>
 8007270:	2302      	movs	r3, #2
 8007272:	e113      	b.n	800749c <HAL_ADC_ConfigChannel+0x244>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b09      	cmp	r3, #9
 8007282:	d925      	bls.n	80072d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68d9      	ldr	r1, [r3, #12]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	4613      	mov	r3, r2
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	4413      	add	r3, r2
 8007298:	3b1e      	subs	r3, #30
 800729a:	2207      	movs	r2, #7
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	43da      	mvns	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	400a      	ands	r2, r1
 80072a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68d9      	ldr	r1, [r3, #12]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4618      	mov	r0, r3
 80072bc:	4603      	mov	r3, r0
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	4403      	add	r3, r0
 80072c2:	3b1e      	subs	r3, #30
 80072c4:	409a      	lsls	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	60da      	str	r2, [r3, #12]
 80072ce:	e022      	b.n	8007316 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6919      	ldr	r1, [r3, #16]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	4613      	mov	r3, r2
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	4413      	add	r3, r2
 80072e4:	2207      	movs	r2, #7
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	43da      	mvns	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	400a      	ands	r2, r1
 80072f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6919      	ldr	r1, [r3, #16]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	4618      	mov	r0, r3
 8007306:	4603      	mov	r3, r0
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	4403      	add	r3, r0
 800730c:	409a      	lsls	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b06      	cmp	r3, #6
 800731c:	d824      	bhi.n	8007368 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	3b05      	subs	r3, #5
 8007330:	221f      	movs	r2, #31
 8007332:	fa02 f303 	lsl.w	r3, r2, r3
 8007336:	43da      	mvns	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	400a      	ands	r2, r1
 800733e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	4618      	mov	r0, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	3b05      	subs	r3, #5
 800735a:	fa00 f203 	lsl.w	r2, r0, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	635a      	str	r2, [r3, #52]	; 0x34
 8007366:	e04c      	b.n	8007402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b0c      	cmp	r3, #12
 800736e:	d824      	bhi.n	80073ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	3b23      	subs	r3, #35	; 0x23
 8007382:	221f      	movs	r2, #31
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	43da      	mvns	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	400a      	ands	r2, r1
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	4618      	mov	r0, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	3b23      	subs	r3, #35	; 0x23
 80073ac:	fa00 f203 	lsl.w	r2, r0, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	631a      	str	r2, [r3, #48]	; 0x30
 80073b8:	e023      	b.n	8007402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	3b41      	subs	r3, #65	; 0x41
 80073cc:	221f      	movs	r2, #31
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	43da      	mvns	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	400a      	ands	r2, r1
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4618      	mov	r0, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	3b41      	subs	r3, #65	; 0x41
 80073f6:	fa00 f203 	lsl.w	r2, r0, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007402:	4b29      	ldr	r3, [pc, #164]	; (80074a8 <HAL_ADC_ConfigChannel+0x250>)
 8007404:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a28      	ldr	r2, [pc, #160]	; (80074ac <HAL_ADC_ConfigChannel+0x254>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d10f      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x1d8>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b12      	cmp	r3, #18
 8007416:	d10b      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <HAL_ADC_ConfigChannel+0x254>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d12b      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x23a>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1c      	ldr	r2, [pc, #112]	; (80074b0 <HAL_ADC_ConfigChannel+0x258>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d003      	beq.n	800744c <HAL_ADC_ConfigChannel+0x1f4>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b11      	cmp	r3, #17
 800744a:	d122      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a11      	ldr	r2, [pc, #68]	; (80074b0 <HAL_ADC_ConfigChannel+0x258>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d111      	bne.n	8007492 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800746e:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <HAL_ADC_ConfigChannel+0x25c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a11      	ldr	r2, [pc, #68]	; (80074b8 <HAL_ADC_ConfigChannel+0x260>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	0c9a      	lsrs	r2, r3, #18
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007484:	e002      	b.n	800748c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f9      	bne.n	8007486 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40012300 	.word	0x40012300
 80074ac:	40012000 	.word	0x40012000
 80074b0:	10000012 	.word	0x10000012
 80074b4:	20000040 	.word	0x20000040
 80074b8:	431bde83 	.word	0x431bde83

080074bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074c4:	4b79      	ldr	r3, [pc, #484]	; (80076ac <ADC_Init+0x1f0>)
 80074c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	431a      	orrs	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6859      	ldr	r1, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	021a      	lsls	r2, r3, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6859      	ldr	r1, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6899      	ldr	r1, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	4a58      	ldr	r2, [pc, #352]	; (80076b0 <ADC_Init+0x1f4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007562:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6899      	ldr	r1, [r3, #8]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6899      	ldr	r1, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	e00f      	b.n	80075ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0202 	bic.w	r2, r2, #2
 80075c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6899      	ldr	r1, [r3, #8]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	7e1b      	ldrb	r3, [r3, #24]
 80075d4:	005a      	lsls	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01b      	beq.n	8007620 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007606:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6859      	ldr	r1, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	3b01      	subs	r3, #1
 8007614:	035a      	lsls	r2, r3, #13
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	e007      	b.n	8007630 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800762e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	3b01      	subs	r3, #1
 800764c:	051a      	lsls	r2, r3, #20
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6899      	ldr	r1, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007672:	025a      	lsls	r2, r3, #9
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800768a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6899      	ldr	r1, [r3, #8]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	029a      	lsls	r2, r3, #10
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40012300 	.word	0x40012300
 80076b0:	0f000001 	.word	0x0f000001

080076b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e031      	b.n	8007730 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076d4:	4b19      	ldr	r3, [pc, #100]	; (800773c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f023 021f 	bic.w	r2, r3, #31
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	431a      	orrs	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	431a      	orrs	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	40012300 	.word	0x40012300

08007740 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e0ed      	b.n	800792e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fa fb6c 	bl	8001e3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007774:	f7ff fb92 	bl	8006e9c <HAL_GetTick>
 8007778:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800777a:	e012      	b.n	80077a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800777c:	f7ff fb8e 	bl	8006e9c <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b0a      	cmp	r3, #10
 8007788:	d90b      	bls.n	80077a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2205      	movs	r2, #5
 800779a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e0c5      	b.n	800792e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0e5      	beq.n	800777c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0202 	bic.w	r2, r2, #2
 80077be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077c0:	f7ff fb6c 	bl	8006e9c <HAL_GetTick>
 80077c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80077c6:	e012      	b.n	80077ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80077c8:	f7ff fb68 	bl	8006e9c <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b0a      	cmp	r3, #10
 80077d4:	d90b      	bls.n	80077ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2205      	movs	r2, #5
 80077e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e09f      	b.n	800792e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e5      	bne.n	80077c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7e1b      	ldrb	r3, [r3, #24]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d108      	bne.n	8007816 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e007      	b.n	8007826 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7e5b      	ldrb	r3, [r3, #25]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d108      	bne.n	8007840 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e007      	b.n	8007850 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800784e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	7e9b      	ldrb	r3, [r3, #26]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d108      	bne.n	800786a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0220 	orr.w	r2, r2, #32
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e007      	b.n	800787a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0220 	bic.w	r2, r2, #32
 8007878:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7edb      	ldrb	r3, [r3, #27]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d108      	bne.n	8007894 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0210 	bic.w	r2, r2, #16
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e007      	b.n	80078a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0210 	orr.w	r2, r2, #16
 80078a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7f1b      	ldrb	r3, [r3, #28]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d108      	bne.n	80078be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0208 	orr.w	r2, r2, #8
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e007      	b.n	80078ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0208 	bic.w	r2, r2, #8
 80078cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7f5b      	ldrb	r3, [r3, #29]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d108      	bne.n	80078e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0204 	orr.w	r2, r2, #4
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e007      	b.n	80078f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0204 	bic.w	r2, r2, #4
 80078f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	431a      	orrs	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	ea42 0103 	orr.w	r1, r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800794e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007950:	7cfb      	ldrb	r3, [r7, #19]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d003      	beq.n	800795e <HAL_CAN_ConfigFilter+0x26>
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	2b02      	cmp	r3, #2
 800795a:	f040 80be 	bne.w	8007ada <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800795e:	4b65      	ldr	r3, [pc, #404]	; (8007af4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007960:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007968:	f043 0201 	orr.w	r2, r3, #1
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007978:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	431a      	orrs	r2, r3
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	f003 031f 	and.w	r3, r3, #31
 800799e:	2201      	movs	r2, #1
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	43db      	mvns	r3, r3
 80079b0:	401a      	ands	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d123      	bne.n	8007a08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	43db      	mvns	r3, r3
 80079ca:	401a      	ands	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80079e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3248      	adds	r2, #72	; 0x48
 80079e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80079fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	3348      	adds	r3, #72	; 0x48
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	440b      	add	r3, r1
 8007a06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d122      	bne.n	8007a56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007a30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	3248      	adds	r2, #72	; 0x48
 8007a36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007a4c:	6979      	ldr	r1, [r7, #20]
 8007a4e:	3348      	adds	r3, #72	; 0x48
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	440b      	add	r3, r1
 8007a54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d109      	bne.n	8007a72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	43db      	mvns	r3, r3
 8007a68:	401a      	ands	r2, r3
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007a70:	e007      	b.n	8007a82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	43db      	mvns	r3, r3
 8007a94:	401a      	ands	r2, r3
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007a9c:	e007      	b.n	8007aae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d107      	bne.n	8007ac6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007acc:	f023 0201 	bic.w	r2, r3, #1
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e006      	b.n	8007ae8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	40006400 	.word	0x40006400

08007af8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d12e      	bne.n	8007b6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b24:	f7ff f9ba 	bl	8006e9c <HAL_GetTick>
 8007b28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007b2a:	e012      	b.n	8007b52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b2c:	f7ff f9b6 	bl	8006e9c <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b0a      	cmp	r3, #10
 8007b38:	d90b      	bls.n	8007b52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e012      	b.n	8007b78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e006      	b.n	8007b78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
  }
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b089      	sub	sp, #36	; 0x24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d003      	beq.n	8007bac <HAL_CAN_AddTxMessage+0x2c>
 8007ba4:	7ffb      	ldrb	r3, [r7, #31]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	f040 80b8 	bne.w	8007d1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 80a0 	beq.w	8007d0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	0e1b      	lsrs	r3, r3, #24
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d907      	bls.n	8007bec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e09e      	b.n	8007d2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007bec:	2201      	movs	r2, #1
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	409a      	lsls	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10d      	bne.n	8007c1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007c08:	68f9      	ldr	r1, [r7, #12]
 8007c0a:	6809      	ldr	r1, [r1, #0]
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	3318      	adds	r3, #24
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	440b      	add	r3, r1
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	e00f      	b.n	8007c3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c2a:	68f9      	ldr	r1, [r7, #12]
 8007c2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007c2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	3318      	adds	r3, #24
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	440b      	add	r3, r1
 8007c38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6819      	ldr	r1, [r3, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691a      	ldr	r2, [r3, #16]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	3318      	adds	r3, #24
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	440b      	add	r3, r1
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	7d1b      	ldrb	r3, [r3, #20]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d111      	bne.n	8007c7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	3318      	adds	r3, #24
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	4413      	add	r3, r2
 8007c62:	3304      	adds	r3, #4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	6811      	ldr	r1, [r2, #0]
 8007c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	3318      	adds	r3, #24
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	440b      	add	r3, r1
 8007c76:	3304      	adds	r3, #4
 8007c78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3307      	adds	r3, #7
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	061a      	lsls	r2, r3, #24
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3306      	adds	r3, #6
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3305      	adds	r3, #5
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	4313      	orrs	r3, r2
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	3204      	adds	r2, #4
 8007c9a:	7812      	ldrb	r2, [r2, #0]
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	6811      	ldr	r1, [r2, #0]
 8007ca2:	ea43 0200 	orr.w	r2, r3, r0
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	440b      	add	r3, r1
 8007cac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007cb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3303      	adds	r3, #3
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	061a      	lsls	r2, r3, #24
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	7812      	ldrb	r2, [r2, #0]
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	6811      	ldr	r1, [r2, #0]
 8007cd8:	ea43 0200 	orr.w	r2, r3, r0
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	440b      	add	r3, r1
 8007ce2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007ce6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	3318      	adds	r3, #24
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	4413      	add	r3, r2
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	6811      	ldr	r1, [r2, #0]
 8007cfa:	f043 0201 	orr.w	r2, r3, #1
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	3318      	adds	r3, #24
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	440b      	add	r3, r1
 8007d06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e00e      	b.n	8007d2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e006      	b.n	8007d2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3724      	adds	r7, #36	; 0x24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007d36:	b480      	push	{r7}
 8007d38:	b087      	sub	sp, #28
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d003      	beq.n	8007d5a <HAL_CAN_GetRxMessage+0x24>
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	f040 80f3 	bne.w	8007f40 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10e      	bne.n	8007d7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d116      	bne.n	8007d9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e0e7      	b.n	8007f4e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d107      	bne.n	8007d9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0d8      	b.n	8007f4e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	331b      	adds	r3, #27
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	4413      	add	r3, r2
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0204 	and.w	r2, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10c      	bne.n	8007dd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	331b      	adds	r3, #27
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	4413      	add	r3, r2
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	0d5b      	lsrs	r3, r3, #21
 8007dca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e00b      	b.n	8007dec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	331b      	adds	r3, #27
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	08db      	lsrs	r3, r3, #3
 8007de4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	331b      	adds	r3, #27
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	4413      	add	r3, r2
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0202 	and.w	r2, r3, #2
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	331b      	adds	r3, #27
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	4413      	add	r3, r2
 8007e0e:	3304      	adds	r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 020f 	and.w	r2, r3, #15
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	331b      	adds	r3, #27
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	4413      	add	r3, r2
 8007e26:	3304      	adds	r3, #4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	0a1b      	lsrs	r3, r3, #8
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	331b      	adds	r3, #27
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3304      	adds	r3, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	0c1b      	lsrs	r3, r3, #16
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	0a1a      	lsrs	r2, r3, #8
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	0c1a      	lsrs	r2, r3, #16
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	3302      	adds	r3, #2
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	0e1a      	lsrs	r2, r3, #24
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	3303      	adds	r3, #3
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	0a1a      	lsrs	r2, r3, #8
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	3305      	adds	r3, #5
 8007edc:	b2d2      	uxtb	r2, r2
 8007ede:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	0c1a      	lsrs	r2, r3, #16
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	3306      	adds	r3, #6
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	0e1a      	lsrs	r2, r3, #24
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	3307      	adds	r3, #7
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d108      	bne.n	8007f2c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0220 	orr.w	r2, r2, #32
 8007f28:	60da      	str	r2, [r3, #12]
 8007f2a:	e007      	b.n	8007f3c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691a      	ldr	r2, [r3, #16]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0220 	orr.w	r2, r2, #32
 8007f3a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e006      	b.n	8007f4e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
  }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
	...

08007f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f78:	4013      	ands	r3, r2
 8007f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f8e:	4a04      	ldr	r2, [pc, #16]	; (8007fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	60d3      	str	r3, [r2, #12]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	e000ed00 	.word	0xe000ed00

08007fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <__NVIC_GetPriorityGrouping+0x18>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	0a1b      	lsrs	r3, r3, #8
 8007fae:	f003 0307 	and.w	r3, r3, #7
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	e000ed00 	.word	0xe000ed00

08007fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	db0b      	blt.n	8007fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	f003 021f 	and.w	r2, r3, #31
 8007fd8:	4907      	ldr	r1, [pc, #28]	; (8007ff8 <__NVIC_EnableIRQ+0x38>)
 8007fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8007fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	e000e100 	.word	0xe000e100

08007ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800c:	2b00      	cmp	r3, #0
 800800e:	db0a      	blt.n	8008026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	b2da      	uxtb	r2, r3
 8008014:	490c      	ldr	r1, [pc, #48]	; (8008048 <__NVIC_SetPriority+0x4c>)
 8008016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801a:	0112      	lsls	r2, r2, #4
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	440b      	add	r3, r1
 8008020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008024:	e00a      	b.n	800803c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	b2da      	uxtb	r2, r3
 800802a:	4908      	ldr	r1, [pc, #32]	; (800804c <__NVIC_SetPriority+0x50>)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	3b04      	subs	r3, #4
 8008034:	0112      	lsls	r2, r2, #4
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	440b      	add	r3, r1
 800803a:	761a      	strb	r2, [r3, #24]
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	e000e100 	.word	0xe000e100
 800804c:	e000ed00 	.word	0xe000ed00

08008050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008050:	b480      	push	{r7}
 8008052:	b089      	sub	sp, #36	; 0x24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f1c3 0307 	rsb	r3, r3, #7
 800806a:	2b04      	cmp	r3, #4
 800806c:	bf28      	it	cs
 800806e:	2304      	movcs	r3, #4
 8008070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3304      	adds	r3, #4
 8008076:	2b06      	cmp	r3, #6
 8008078:	d902      	bls.n	8008080 <NVIC_EncodePriority+0x30>
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	3b03      	subs	r3, #3
 800807e:	e000      	b.n	8008082 <NVIC_EncodePriority+0x32>
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	43da      	mvns	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	401a      	ands	r2, r3
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	fa01 f303 	lsl.w	r3, r1, r3
 80080a2:	43d9      	mvns	r1, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080a8:	4313      	orrs	r3, r2
         );
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3724      	adds	r7, #36	; 0x24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080c8:	d301      	bcc.n	80080ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080ca:	2301      	movs	r3, #1
 80080cc:	e00f      	b.n	80080ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080ce:	4a0a      	ldr	r2, [pc, #40]	; (80080f8 <SysTick_Config+0x40>)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080d6:	210f      	movs	r1, #15
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080dc:	f7ff ff8e 	bl	8007ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <SysTick_Config+0x40>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080e6:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <SysTick_Config+0x40>)
 80080e8:	2207      	movs	r2, #7
 80080ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	e000e010 	.word	0xe000e010

080080fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff ff29 	bl	8007f5c <__NVIC_SetPriorityGrouping>
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	4603      	mov	r3, r0
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
 800811e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008120:	2300      	movs	r3, #0
 8008122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008124:	f7ff ff3e 	bl	8007fa4 <__NVIC_GetPriorityGrouping>
 8008128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	6978      	ldr	r0, [r7, #20]
 8008130:	f7ff ff8e 	bl	8008050 <NVIC_EncodePriority>
 8008134:	4602      	mov	r2, r0
 8008136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff ff5d 	bl	8007ffc <__NVIC_SetPriority>
}
 8008142:	bf00      	nop
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	4603      	mov	r3, r0
 8008152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff ff31 	bl	8007fc0 <__NVIC_EnableIRQ>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff ffa2 	bl	80080b8 <SysTick_Config>
 8008174:	4603      	mov	r3, r0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800818c:	f7fe fe86 	bl	8006e9c <HAL_GetTick>
 8008190:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d008      	beq.n	80081b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2280      	movs	r2, #128	; 0x80
 80081a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e052      	b.n	8008256 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0216 	bic.w	r2, r2, #22
 80081be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d103      	bne.n	80081e0 <HAL_DMA_Abort+0x62>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d007      	beq.n	80081f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0208 	bic.w	r2, r2, #8
 80081ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008200:	e013      	b.n	800822a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008202:	f7fe fe4b 	bl	8006e9c <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b05      	cmp	r3, #5
 800820e:	d90c      	bls.n	800822a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2203      	movs	r2, #3
 800821a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e015      	b.n	8008256 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e4      	bne.n	8008202 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823c:	223f      	movs	r2, #63	; 0x3f
 800823e:	409a      	lsls	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d004      	beq.n	800827c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2280      	movs	r2, #128	; 0x80
 8008276:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e00c      	b.n	8008296 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2205      	movs	r2, #5
 8008280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0201 	bic.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b089      	sub	sp, #36	; 0x24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	e165      	b.n	800858c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80082c0:	2201      	movs	r2, #1
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4013      	ands	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	429a      	cmp	r2, r3
 80082da:	f040 8154 	bne.w	8008586 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d005      	beq.n	80082f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d130      	bne.n	8008358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	2203      	movs	r2, #3
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	43db      	mvns	r3, r3
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	4013      	ands	r3, r2
 800830c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	fa02 f303 	lsl.w	r3, r2, r3
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	4313      	orrs	r3, r2
 800831e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800832c:	2201      	movs	r2, #1
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4013      	ands	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	f003 0201 	and.w	r2, r3, #1
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	fa02 f303 	lsl.w	r3, r2, r3
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	4313      	orrs	r3, r2
 8008350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	2b03      	cmp	r3, #3
 8008362:	d017      	beq.n	8008394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	2203      	movs	r2, #3
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	43db      	mvns	r3, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4013      	ands	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	4313      	orrs	r3, r2
 800838c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d123      	bne.n	80083e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	08da      	lsrs	r2, r3, #3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3208      	adds	r2, #8
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f003 0307 	and.w	r3, r3, #7
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	220f      	movs	r2, #15
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	43db      	mvns	r3, r3
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	4013      	ands	r3, r2
 80083c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	fa02 f303 	lsl.w	r3, r2, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	08da      	lsrs	r2, r3, #3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3208      	adds	r2, #8
 80083e2:	69b9      	ldr	r1, [r7, #24]
 80083e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	2203      	movs	r2, #3
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	43db      	mvns	r3, r3
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4013      	ands	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f003 0203 	and.w	r2, r3, #3
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	4313      	orrs	r3, r2
 8008414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80ae 	beq.w	8008586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	4b5d      	ldr	r3, [pc, #372]	; (80085a4 <HAL_GPIO_Init+0x300>)
 8008430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008432:	4a5c      	ldr	r2, [pc, #368]	; (80085a4 <HAL_GPIO_Init+0x300>)
 8008434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008438:	6453      	str	r3, [r2, #68]	; 0x44
 800843a:	4b5a      	ldr	r3, [pc, #360]	; (80085a4 <HAL_GPIO_Init+0x300>)
 800843c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008446:	4a58      	ldr	r2, [pc, #352]	; (80085a8 <HAL_GPIO_Init+0x304>)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	089b      	lsrs	r3, r3, #2
 800844c:	3302      	adds	r3, #2
 800844e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	220f      	movs	r2, #15
 800845e:	fa02 f303 	lsl.w	r3, r2, r3
 8008462:	43db      	mvns	r3, r3
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	4013      	ands	r3, r2
 8008468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a4f      	ldr	r2, [pc, #316]	; (80085ac <HAL_GPIO_Init+0x308>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d025      	beq.n	80084be <HAL_GPIO_Init+0x21a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a4e      	ldr	r2, [pc, #312]	; (80085b0 <HAL_GPIO_Init+0x30c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d01f      	beq.n	80084ba <HAL_GPIO_Init+0x216>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a4d      	ldr	r2, [pc, #308]	; (80085b4 <HAL_GPIO_Init+0x310>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d019      	beq.n	80084b6 <HAL_GPIO_Init+0x212>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a4c      	ldr	r2, [pc, #304]	; (80085b8 <HAL_GPIO_Init+0x314>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d013      	beq.n	80084b2 <HAL_GPIO_Init+0x20e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a4b      	ldr	r2, [pc, #300]	; (80085bc <HAL_GPIO_Init+0x318>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00d      	beq.n	80084ae <HAL_GPIO_Init+0x20a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a4a      	ldr	r2, [pc, #296]	; (80085c0 <HAL_GPIO_Init+0x31c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d007      	beq.n	80084aa <HAL_GPIO_Init+0x206>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a49      	ldr	r2, [pc, #292]	; (80085c4 <HAL_GPIO_Init+0x320>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d101      	bne.n	80084a6 <HAL_GPIO_Init+0x202>
 80084a2:	2306      	movs	r3, #6
 80084a4:	e00c      	b.n	80084c0 <HAL_GPIO_Init+0x21c>
 80084a6:	2307      	movs	r3, #7
 80084a8:	e00a      	b.n	80084c0 <HAL_GPIO_Init+0x21c>
 80084aa:	2305      	movs	r3, #5
 80084ac:	e008      	b.n	80084c0 <HAL_GPIO_Init+0x21c>
 80084ae:	2304      	movs	r3, #4
 80084b0:	e006      	b.n	80084c0 <HAL_GPIO_Init+0x21c>
 80084b2:	2303      	movs	r3, #3
 80084b4:	e004      	b.n	80084c0 <HAL_GPIO_Init+0x21c>
 80084b6:	2302      	movs	r3, #2
 80084b8:	e002      	b.n	80084c0 <HAL_GPIO_Init+0x21c>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <HAL_GPIO_Init+0x21c>
 80084be:	2300      	movs	r3, #0
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	f002 0203 	and.w	r2, r2, #3
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	4093      	lsls	r3, r2
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084d0:	4935      	ldr	r1, [pc, #212]	; (80085a8 <HAL_GPIO_Init+0x304>)
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	089b      	lsrs	r3, r3, #2
 80084d6:	3302      	adds	r3, #2
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084de:	4b3a      	ldr	r3, [pc, #232]	; (80085c8 <HAL_GPIO_Init+0x324>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	43db      	mvns	r3, r3
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	4013      	ands	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008502:	4a31      	ldr	r2, [pc, #196]	; (80085c8 <HAL_GPIO_Init+0x324>)
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008508:	4b2f      	ldr	r3, [pc, #188]	; (80085c8 <HAL_GPIO_Init+0x324>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	43db      	mvns	r3, r3
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4013      	ands	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800852c:	4a26      	ldr	r2, [pc, #152]	; (80085c8 <HAL_GPIO_Init+0x324>)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008532:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <HAL_GPIO_Init+0x324>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	43db      	mvns	r3, r3
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	4013      	ands	r3, r2
 8008540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008556:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_GPIO_Init+0x324>)
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800855c:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <HAL_GPIO_Init+0x324>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	43db      	mvns	r3, r3
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	4013      	ands	r3, r2
 800856a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008580:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <HAL_GPIO_Init+0x324>)
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	3301      	adds	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	2b0f      	cmp	r3, #15
 8008590:	f67f ae96 	bls.w	80082c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	3724      	adds	r7, #36	; 0x24
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40023800 	.word	0x40023800
 80085a8:	40013800 	.word	0x40013800
 80085ac:	40020000 	.word	0x40020000
 80085b0:	40020400 	.word	0x40020400
 80085b4:	40020800 	.word	0x40020800
 80085b8:	40020c00 	.word	0x40020c00
 80085bc:	40021000 	.word	0x40021000
 80085c0:	40021400 	.word	0x40021400
 80085c4:	40021800 	.word	0x40021800
 80085c8:	40013c00 	.word	0x40013c00

080085cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	807b      	strh	r3, [r7, #2]
 80085d8:	4613      	mov	r3, r2
 80085da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085dc:	787b      	ldrb	r3, [r7, #1]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085e2:	887a      	ldrh	r2, [r7, #2]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085e8:	e003      	b.n	80085f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085ea:	887b      	ldrh	r3, [r7, #2]
 80085ec:	041a      	lsls	r2, r3, #16
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	619a      	str	r2, [r3, #24]
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800860a:	2300      	movs	r3, #0
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <HAL_PWREx_EnableOverDrive+0x90>)
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <HAL_PWREx_EnableOverDrive+0x90>)
 8008614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008618:	6413      	str	r3, [r2, #64]	; 0x40
 800861a:	4b1d      	ldr	r3, [pc, #116]	; (8008690 <HAL_PWREx_EnableOverDrive+0x90>)
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008626:	4b1b      	ldr	r3, [pc, #108]	; (8008694 <HAL_PWREx_EnableOverDrive+0x94>)
 8008628:	2201      	movs	r2, #1
 800862a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800862c:	f7fe fc36 	bl	8006e9c <HAL_GetTick>
 8008630:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008632:	e009      	b.n	8008648 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008634:	f7fe fc32 	bl	8006e9c <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008642:	d901      	bls.n	8008648 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e01f      	b.n	8008688 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008648:	4b13      	ldr	r3, [pc, #76]	; (8008698 <HAL_PWREx_EnableOverDrive+0x98>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008654:	d1ee      	bne.n	8008634 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008656:	4b11      	ldr	r3, [pc, #68]	; (800869c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008658:	2201      	movs	r2, #1
 800865a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800865c:	f7fe fc1e 	bl	8006e9c <HAL_GetTick>
 8008660:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008662:	e009      	b.n	8008678 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008664:	f7fe fc1a 	bl	8006e9c <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008672:	d901      	bls.n	8008678 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e007      	b.n	8008688 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <HAL_PWREx_EnableOverDrive+0x98>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008684:	d1ee      	bne.n	8008664 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40023800 	.word	0x40023800
 8008694:	420e0040 	.word	0x420e0040
 8008698:	40007000 	.word	0x40007000
 800869c:	420e0044 	.word	0x420e0044

080086a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0cc      	b.n	800884e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086b4:	4b68      	ldr	r3, [pc, #416]	; (8008858 <HAL_RCC_ClockConfig+0x1b8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d90c      	bls.n	80086dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086c2:	4b65      	ldr	r3, [pc, #404]	; (8008858 <HAL_RCC_ClockConfig+0x1b8>)
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	b2d2      	uxtb	r2, r2
 80086c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ca:	4b63      	ldr	r3, [pc, #396]	; (8008858 <HAL_RCC_ClockConfig+0x1b8>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 030f 	and.w	r3, r3, #15
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d001      	beq.n	80086dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e0b8      	b.n	800884e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d020      	beq.n	800872a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086f4:	4b59      	ldr	r3, [pc, #356]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	4a58      	ldr	r2, [pc, #352]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80086fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0308 	and.w	r3, r3, #8
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800870c:	4b53      	ldr	r3, [pc, #332]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	4a52      	ldr	r2, [pc, #328]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008718:	4b50      	ldr	r3, [pc, #320]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	494d      	ldr	r1, [pc, #308]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008726:	4313      	orrs	r3, r2
 8008728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d044      	beq.n	80087c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d107      	bne.n	800874e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800873e:	4b47      	ldr	r3, [pc, #284]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d119      	bne.n	800877e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e07f      	b.n	800884e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d003      	beq.n	800875e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800875a:	2b03      	cmp	r3, #3
 800875c:	d107      	bne.n	800876e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800875e:	4b3f      	ldr	r3, [pc, #252]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e06f      	b.n	800884e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800876e:	4b3b      	ldr	r3, [pc, #236]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e067      	b.n	800884e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800877e:	4b37      	ldr	r3, [pc, #220]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f023 0203 	bic.w	r2, r3, #3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	4934      	ldr	r1, [pc, #208]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 800878c:	4313      	orrs	r3, r2
 800878e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008790:	f7fe fb84 	bl	8006e9c <HAL_GetTick>
 8008794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008796:	e00a      	b.n	80087ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008798:	f7fe fb80 	bl	8006e9c <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e04f      	b.n	800884e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ae:	4b2b      	ldr	r3, [pc, #172]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 020c 	and.w	r2, r3, #12
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	429a      	cmp	r2, r3
 80087be:	d1eb      	bne.n	8008798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087c0:	4b25      	ldr	r3, [pc, #148]	; (8008858 <HAL_RCC_ClockConfig+0x1b8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d20c      	bcs.n	80087e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ce:	4b22      	ldr	r3, [pc, #136]	; (8008858 <HAL_RCC_ClockConfig+0x1b8>)
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d6:	4b20      	ldr	r3, [pc, #128]	; (8008858 <HAL_RCC_ClockConfig+0x1b8>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d001      	beq.n	80087e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e032      	b.n	800884e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087f4:	4b19      	ldr	r3, [pc, #100]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	4916      	ldr	r1, [pc, #88]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008802:	4313      	orrs	r3, r2
 8008804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d009      	beq.n	8008826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008812:	4b12      	ldr	r3, [pc, #72]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	490e      	ldr	r1, [pc, #56]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 8008822:	4313      	orrs	r3, r2
 8008824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008826:	f000 f855 	bl	80088d4 <HAL_RCC_GetSysClockFreq>
 800882a:	4602      	mov	r2, r0
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <HAL_RCC_ClockConfig+0x1bc>)
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	091b      	lsrs	r3, r3, #4
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	490a      	ldr	r1, [pc, #40]	; (8008860 <HAL_RCC_ClockConfig+0x1c0>)
 8008838:	5ccb      	ldrb	r3, [r1, r3]
 800883a:	fa22 f303 	lsr.w	r3, r2, r3
 800883e:	4a09      	ldr	r2, [pc, #36]	; (8008864 <HAL_RCC_ClockConfig+0x1c4>)
 8008840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008842:	4b09      	ldr	r3, [pc, #36]	; (8008868 <HAL_RCC_ClockConfig+0x1c8>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fae4 	bl	8006e14 <HAL_InitTick>

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40023c00 	.word	0x40023c00
 800885c:	40023800 	.word	0x40023800
 8008860:	080119b4 	.word	0x080119b4
 8008864:	20000040 	.word	0x20000040
 8008868:	20000044 	.word	0x20000044

0800886c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008870:	4b03      	ldr	r3, [pc, #12]	; (8008880 <HAL_RCC_GetHCLKFreq+0x14>)
 8008872:	681b      	ldr	r3, [r3, #0]
}
 8008874:	4618      	mov	r0, r3
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20000040 	.word	0x20000040

08008884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008888:	f7ff fff0 	bl	800886c <HAL_RCC_GetHCLKFreq>
 800888c:	4602      	mov	r2, r0
 800888e:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	0a9b      	lsrs	r3, r3, #10
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	4903      	ldr	r1, [pc, #12]	; (80088a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800889a:	5ccb      	ldrb	r3, [r1, r3]
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40023800 	.word	0x40023800
 80088a8:	080119c4 	.word	0x080119c4

080088ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088b0:	f7ff ffdc 	bl	800886c <HAL_RCC_GetHCLKFreq>
 80088b4:	4602      	mov	r2, r0
 80088b6:	4b05      	ldr	r3, [pc, #20]	; (80088cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	0b5b      	lsrs	r3, r3, #13
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	4903      	ldr	r1, [pc, #12]	; (80088d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088c2:	5ccb      	ldrb	r3, [r1, r3]
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40023800 	.word	0x40023800
 80088d0:	080119c4 	.word	0x080119c4

080088d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088d8:	b0ae      	sub	sp, #184	; 0xb8
 80088da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088fa:	4bcb      	ldr	r3, [pc, #812]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f003 030c 	and.w	r3, r3, #12
 8008902:	2b0c      	cmp	r3, #12
 8008904:	f200 8206 	bhi.w	8008d14 <HAL_RCC_GetSysClockFreq+0x440>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <HAL_RCC_GetSysClockFreq+0x3c>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008945 	.word	0x08008945
 8008914:	08008d15 	.word	0x08008d15
 8008918:	08008d15 	.word	0x08008d15
 800891c:	08008d15 	.word	0x08008d15
 8008920:	0800894d 	.word	0x0800894d
 8008924:	08008d15 	.word	0x08008d15
 8008928:	08008d15 	.word	0x08008d15
 800892c:	08008d15 	.word	0x08008d15
 8008930:	08008955 	.word	0x08008955
 8008934:	08008d15 	.word	0x08008d15
 8008938:	08008d15 	.word	0x08008d15
 800893c:	08008d15 	.word	0x08008d15
 8008940:	08008b45 	.word	0x08008b45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008944:	4bb9      	ldr	r3, [pc, #740]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x358>)
 8008946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800894a:	e1e7      	b.n	8008d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800894c:	4bb8      	ldr	r3, [pc, #736]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800894e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008952:	e1e3      	b.n	8008d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008954:	4bb4      	ldr	r3, [pc, #720]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800895c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008960:	4bb1      	ldr	r3, [pc, #708]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d071      	beq.n	8008a50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800896c:	4bae      	ldr	r3, [pc, #696]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	099b      	lsrs	r3, r3, #6
 8008972:	2200      	movs	r2, #0
 8008974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008978:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800897c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008988:	2300      	movs	r3, #0
 800898a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800898e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008992:	4622      	mov	r2, r4
 8008994:	462b      	mov	r3, r5
 8008996:	f04f 0000 	mov.w	r0, #0
 800899a:	f04f 0100 	mov.w	r1, #0
 800899e:	0159      	lsls	r1, r3, #5
 80089a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089a4:	0150      	lsls	r0, r2, #5
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4621      	mov	r1, r4
 80089ac:	1a51      	subs	r1, r2, r1
 80089ae:	6439      	str	r1, [r7, #64]	; 0x40
 80089b0:	4629      	mov	r1, r5
 80089b2:	eb63 0301 	sbc.w	r3, r3, r1
 80089b6:	647b      	str	r3, [r7, #68]	; 0x44
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80089c4:	4649      	mov	r1, r9
 80089c6:	018b      	lsls	r3, r1, #6
 80089c8:	4641      	mov	r1, r8
 80089ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089ce:	4641      	mov	r1, r8
 80089d0:	018a      	lsls	r2, r1, #6
 80089d2:	4641      	mov	r1, r8
 80089d4:	1a51      	subs	r1, r2, r1
 80089d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80089d8:	4649      	mov	r1, r9
 80089da:	eb63 0301 	sbc.w	r3, r3, r1
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e0:	f04f 0200 	mov.w	r2, #0
 80089e4:	f04f 0300 	mov.w	r3, #0
 80089e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80089ec:	4649      	mov	r1, r9
 80089ee:	00cb      	lsls	r3, r1, #3
 80089f0:	4641      	mov	r1, r8
 80089f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089f6:	4641      	mov	r1, r8
 80089f8:	00ca      	lsls	r2, r1, #3
 80089fa:	4610      	mov	r0, r2
 80089fc:	4619      	mov	r1, r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	4622      	mov	r2, r4
 8008a02:	189b      	adds	r3, r3, r2
 8008a04:	633b      	str	r3, [r7, #48]	; 0x30
 8008a06:	462b      	mov	r3, r5
 8008a08:	460a      	mov	r2, r1
 8008a0a:	eb42 0303 	adc.w	r3, r2, r3
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a10:	f04f 0200 	mov.w	r2, #0
 8008a14:	f04f 0300 	mov.w	r3, #0
 8008a18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	024b      	lsls	r3, r1, #9
 8008a20:	4621      	mov	r1, r4
 8008a22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008a26:	4621      	mov	r1, r4
 8008a28:	024a      	lsls	r2, r1, #9
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008a40:	f7f8 f942 	bl	8000cc8 <__aeabi_uldivmod>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4613      	mov	r3, r2
 8008a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a4e:	e067      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a50:	4b75      	ldr	r3, [pc, #468]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	099b      	lsrs	r3, r3, #6
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008a72:	4622      	mov	r2, r4
 8008a74:	462b      	mov	r3, r5
 8008a76:	f04f 0000 	mov.w	r0, #0
 8008a7a:	f04f 0100 	mov.w	r1, #0
 8008a7e:	0159      	lsls	r1, r3, #5
 8008a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a84:	0150      	lsls	r0, r2, #5
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	1a51      	subs	r1, r2, r1
 8008a8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a90:	4629      	mov	r1, r5
 8008a92:	eb63 0301 	sbc.w	r3, r3, r1
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	f04f 0300 	mov.w	r3, #0
 8008aa0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	018b      	lsls	r3, r1, #6
 8008aa8:	4641      	mov	r1, r8
 8008aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008aae:	4641      	mov	r1, r8
 8008ab0:	018a      	lsls	r2, r1, #6
 8008ab2:	4641      	mov	r1, r8
 8008ab4:	ebb2 0a01 	subs.w	sl, r2, r1
 8008ab8:	4649      	mov	r1, r9
 8008aba:	eb63 0b01 	sbc.w	fp, r3, r1
 8008abe:	f04f 0200 	mov.w	r2, #0
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008aca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ad2:	4692      	mov	sl, r2
 8008ad4:	469b      	mov	fp, r3
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	eb1a 0303 	adds.w	r3, sl, r3
 8008adc:	623b      	str	r3, [r7, #32]
 8008ade:	462b      	mov	r3, r5
 8008ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008af2:	4629      	mov	r1, r5
 8008af4:	028b      	lsls	r3, r1, #10
 8008af6:	4621      	mov	r1, r4
 8008af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008afc:	4621      	mov	r1, r4
 8008afe:	028a      	lsls	r2, r1, #10
 8008b00:	4610      	mov	r0, r2
 8008b02:	4619      	mov	r1, r3
 8008b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b08:	2200      	movs	r2, #0
 8008b0a:	673b      	str	r3, [r7, #112]	; 0x70
 8008b0c:	677a      	str	r2, [r7, #116]	; 0x74
 8008b0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008b12:	f7f8 f8d9 	bl	8000cc8 <__aeabi_uldivmod>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b20:	4b41      	ldr	r3, [pc, #260]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	0c1b      	lsrs	r3, r3, #16
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008b42:	e0eb      	b.n	8008d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b44:	4b38      	ldr	r3, [pc, #224]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b50:	4b35      	ldr	r3, [pc, #212]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d06b      	beq.n	8008c34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b5c:	4b32      	ldr	r3, [pc, #200]	; (8008c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	099b      	lsrs	r3, r3, #6
 8008b62:	2200      	movs	r2, #0
 8008b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b70:	2300      	movs	r3, #0
 8008b72:	667b      	str	r3, [r7, #100]	; 0x64
 8008b74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008b78:	4622      	mov	r2, r4
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	f04f 0000 	mov.w	r0, #0
 8008b80:	f04f 0100 	mov.w	r1, #0
 8008b84:	0159      	lsls	r1, r3, #5
 8008b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b8a:	0150      	lsls	r0, r2, #5
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4621      	mov	r1, r4
 8008b92:	1a51      	subs	r1, r2, r1
 8008b94:	61b9      	str	r1, [r7, #24]
 8008b96:	4629      	mov	r1, r5
 8008b98:	eb63 0301 	sbc.w	r3, r3, r1
 8008b9c:	61fb      	str	r3, [r7, #28]
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008baa:	4659      	mov	r1, fp
 8008bac:	018b      	lsls	r3, r1, #6
 8008bae:	4651      	mov	r1, sl
 8008bb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bb4:	4651      	mov	r1, sl
 8008bb6:	018a      	lsls	r2, r1, #6
 8008bb8:	4651      	mov	r1, sl
 8008bba:	ebb2 0801 	subs.w	r8, r2, r1
 8008bbe:	4659      	mov	r1, fp
 8008bc0:	eb63 0901 	sbc.w	r9, r3, r1
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bd8:	4690      	mov	r8, r2
 8008bda:	4699      	mov	r9, r3
 8008bdc:	4623      	mov	r3, r4
 8008bde:	eb18 0303 	adds.w	r3, r8, r3
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	462b      	mov	r3, r5
 8008be6:	eb49 0303 	adc.w	r3, r9, r3
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	024b      	lsls	r3, r1, #9
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c02:	4621      	mov	r1, r4
 8008c04:	024a      	lsls	r2, r1, #9
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c0e:	2200      	movs	r2, #0
 8008c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008c14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c18:	f7f8 f856 	bl	8000cc8 <__aeabi_uldivmod>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4613      	mov	r3, r2
 8008c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c26:	e065      	b.n	8008cf4 <HAL_RCC_GetSysClockFreq+0x420>
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	00f42400 	.word	0x00f42400
 8008c30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c34:	4b3d      	ldr	r3, [pc, #244]	; (8008d2c <HAL_RCC_GetSysClockFreq+0x458>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	099b      	lsrs	r3, r3, #6
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	4611      	mov	r1, r2
 8008c40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c44:	653b      	str	r3, [r7, #80]	; 0x50
 8008c46:	2300      	movs	r3, #0
 8008c48:	657b      	str	r3, [r7, #84]	; 0x54
 8008c4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008c4e:	4642      	mov	r2, r8
 8008c50:	464b      	mov	r3, r9
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f04f 0100 	mov.w	r1, #0
 8008c5a:	0159      	lsls	r1, r3, #5
 8008c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c60:	0150      	lsls	r0, r2, #5
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4641      	mov	r1, r8
 8008c68:	1a51      	subs	r1, r2, r1
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	f04f 0200 	mov.w	r2, #0
 8008c78:	f04f 0300 	mov.w	r3, #0
 8008c7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008c80:	4659      	mov	r1, fp
 8008c82:	018b      	lsls	r3, r1, #6
 8008c84:	4651      	mov	r1, sl
 8008c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c8a:	4651      	mov	r1, sl
 8008c8c:	018a      	lsls	r2, r1, #6
 8008c8e:	4651      	mov	r1, sl
 8008c90:	1a54      	subs	r4, r2, r1
 8008c92:	4659      	mov	r1, fp
 8008c94:	eb63 0501 	sbc.w	r5, r3, r1
 8008c98:	f04f 0200 	mov.w	r2, #0
 8008c9c:	f04f 0300 	mov.w	r3, #0
 8008ca0:	00eb      	lsls	r3, r5, #3
 8008ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ca6:	00e2      	lsls	r2, r4, #3
 8008ca8:	4614      	mov	r4, r2
 8008caa:	461d      	mov	r5, r3
 8008cac:	4643      	mov	r3, r8
 8008cae:	18e3      	adds	r3, r4, r3
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	464b      	mov	r3, r9
 8008cb4:	eb45 0303 	adc.w	r3, r5, r3
 8008cb8:	607b      	str	r3, [r7, #4]
 8008cba:	f04f 0200 	mov.w	r2, #0
 8008cbe:	f04f 0300 	mov.w	r3, #0
 8008cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	028b      	lsls	r3, r1, #10
 8008cca:	4621      	mov	r1, r4
 8008ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	028a      	lsls	r2, r1, #10
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cdc:	2200      	movs	r2, #0
 8008cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ce2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ce6:	f7f7 ffef 	bl	8000cc8 <__aeabi_uldivmod>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4613      	mov	r3, r2
 8008cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <HAL_RCC_GetSysClockFreq+0x458>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	0f1b      	lsrs	r3, r3, #28
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d12:	e003      	b.n	8008d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	37b8      	adds	r7, #184	; 0xb8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	00f42400 	.word	0x00f42400

08008d34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e28d      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 8083 	beq.w	8008e5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008d54:	4b94      	ldr	r3, [pc, #592]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f003 030c 	and.w	r3, r3, #12
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d019      	beq.n	8008d94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d60:	4b91      	ldr	r3, [pc, #580]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d106      	bne.n	8008d7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d6c:	4b8e      	ldr	r3, [pc, #568]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d78:	d00c      	beq.n	8008d94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d7a:	4b8b      	ldr	r3, [pc, #556]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008d82:	2b0c      	cmp	r3, #12
 8008d84:	d112      	bne.n	8008dac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d86:	4b88      	ldr	r3, [pc, #544]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d92:	d10b      	bne.n	8008dac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d94:	4b84      	ldr	r3, [pc, #528]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d05b      	beq.n	8008e58 <HAL_RCC_OscConfig+0x124>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d157      	bne.n	8008e58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e25a      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db4:	d106      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x90>
 8008db6:	4b7c      	ldr	r3, [pc, #496]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a7b      	ldr	r2, [pc, #492]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	e01d      	b.n	8008e00 <HAL_RCC_OscConfig+0xcc>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dcc:	d10c      	bne.n	8008de8 <HAL_RCC_OscConfig+0xb4>
 8008dce:	4b76      	ldr	r3, [pc, #472]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a75      	ldr	r2, [pc, #468]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	4b73      	ldr	r3, [pc, #460]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a72      	ldr	r2, [pc, #456]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	e00b      	b.n	8008e00 <HAL_RCC_OscConfig+0xcc>
 8008de8:	4b6f      	ldr	r3, [pc, #444]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a6e      	ldr	r2, [pc, #440]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	4b6c      	ldr	r3, [pc, #432]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a6b      	ldr	r2, [pc, #428]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d013      	beq.n	8008e30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e08:	f7fe f848 	bl	8006e9c <HAL_GetTick>
 8008e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e0e:	e008      	b.n	8008e22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e10:	f7fe f844 	bl	8006e9c <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b64      	cmp	r3, #100	; 0x64
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e21f      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e22:	4b61      	ldr	r3, [pc, #388]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f0      	beq.n	8008e10 <HAL_RCC_OscConfig+0xdc>
 8008e2e:	e014      	b.n	8008e5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7fe f834 	bl	8006e9c <HAL_GetTick>
 8008e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e38:	f7fe f830 	bl	8006e9c <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b64      	cmp	r3, #100	; 0x64
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e20b      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e4a:	4b57      	ldr	r3, [pc, #348]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f0      	bne.n	8008e38 <HAL_RCC_OscConfig+0x104>
 8008e56:	e000      	b.n	8008e5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d06f      	beq.n	8008f46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008e66:	4b50      	ldr	r3, [pc, #320]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 030c 	and.w	r3, r3, #12
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d017      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e72:	4b4d      	ldr	r3, [pc, #308]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008e7a:	2b08      	cmp	r3, #8
 8008e7c:	d105      	bne.n	8008e8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e7e:	4b4a      	ldr	r3, [pc, #296]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00b      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e8a:	4b47      	ldr	r3, [pc, #284]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008e92:	2b0c      	cmp	r3, #12
 8008e94:	d11c      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e96:	4b44      	ldr	r3, [pc, #272]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d116      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ea2:	4b41      	ldr	r3, [pc, #260]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d005      	beq.n	8008eba <HAL_RCC_OscConfig+0x186>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d001      	beq.n	8008eba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e1d3      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eba:	4b3b      	ldr	r3, [pc, #236]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	4937      	ldr	r1, [pc, #220]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ece:	e03a      	b.n	8008f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d020      	beq.n	8008f1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ed8:	4b34      	ldr	r3, [pc, #208]	; (8008fac <HAL_RCC_OscConfig+0x278>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ede:	f7fd ffdd 	bl	8006e9c <HAL_GetTick>
 8008ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ee4:	e008      	b.n	8008ef8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ee6:	f7fd ffd9 	bl	8006e9c <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d901      	bls.n	8008ef8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e1b4      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ef8:	4b2b      	ldr	r3, [pc, #172]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d0f0      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f04:	4b28      	ldr	r3, [pc, #160]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	4925      	ldr	r1, [pc, #148]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	600b      	str	r3, [r1, #0]
 8008f18:	e015      	b.n	8008f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f1a:	4b24      	ldr	r3, [pc, #144]	; (8008fac <HAL_RCC_OscConfig+0x278>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f20:	f7fd ffbc 	bl	8006e9c <HAL_GetTick>
 8008f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f28:	f7fd ffb8 	bl	8006e9c <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e193      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f3a:	4b1b      	ldr	r3, [pc, #108]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f0      	bne.n	8008f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d036      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d016      	beq.n	8008f88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <HAL_RCC_OscConfig+0x27c>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f60:	f7fd ff9c 	bl	8006e9c <HAL_GetTick>
 8008f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f66:	e008      	b.n	8008f7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f68:	f7fd ff98 	bl	8006e9c <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e173      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <HAL_RCC_OscConfig+0x274>)
 8008f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0f0      	beq.n	8008f68 <HAL_RCC_OscConfig+0x234>
 8008f86:	e01b      	b.n	8008fc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f88:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <HAL_RCC_OscConfig+0x27c>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f8e:	f7fd ff85 	bl	8006e9c <HAL_GetTick>
 8008f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f94:	e00e      	b.n	8008fb4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f96:	f7fd ff81 	bl	8006e9c <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d907      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e15c      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	42470000 	.word	0x42470000
 8008fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fb4:	4b8a      	ldr	r3, [pc, #552]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8008fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1ea      	bne.n	8008f96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8097 	beq.w	80090fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fd2:	4b83      	ldr	r3, [pc, #524]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10f      	bne.n	8008ffe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	4b7f      	ldr	r3, [pc, #508]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	4a7e      	ldr	r2, [pc, #504]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8008fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fec:	6413      	str	r3, [r2, #64]	; 0x40
 8008fee:	4b7c      	ldr	r3, [pc, #496]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ff6:	60bb      	str	r3, [r7, #8]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ffe:	4b79      	ldr	r3, [pc, #484]	; (80091e4 <HAL_RCC_OscConfig+0x4b0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009006:	2b00      	cmp	r3, #0
 8009008:	d118      	bne.n	800903c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800900a:	4b76      	ldr	r3, [pc, #472]	; (80091e4 <HAL_RCC_OscConfig+0x4b0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a75      	ldr	r2, [pc, #468]	; (80091e4 <HAL_RCC_OscConfig+0x4b0>)
 8009010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009016:	f7fd ff41 	bl	8006e9c <HAL_GetTick>
 800901a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800901c:	e008      	b.n	8009030 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800901e:	f7fd ff3d 	bl	8006e9c <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e118      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009030:	4b6c      	ldr	r3, [pc, #432]	; (80091e4 <HAL_RCC_OscConfig+0x4b0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009038:	2b00      	cmp	r3, #0
 800903a:	d0f0      	beq.n	800901e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d106      	bne.n	8009052 <HAL_RCC_OscConfig+0x31e>
 8009044:	4b66      	ldr	r3, [pc, #408]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009048:	4a65      	ldr	r2, [pc, #404]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 800904a:	f043 0301 	orr.w	r3, r3, #1
 800904e:	6713      	str	r3, [r2, #112]	; 0x70
 8009050:	e01c      	b.n	800908c <HAL_RCC_OscConfig+0x358>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	2b05      	cmp	r3, #5
 8009058:	d10c      	bne.n	8009074 <HAL_RCC_OscConfig+0x340>
 800905a:	4b61      	ldr	r3, [pc, #388]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 800905c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905e:	4a60      	ldr	r2, [pc, #384]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009060:	f043 0304 	orr.w	r3, r3, #4
 8009064:	6713      	str	r3, [r2, #112]	; 0x70
 8009066:	4b5e      	ldr	r3, [pc, #376]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906a:	4a5d      	ldr	r2, [pc, #372]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	6713      	str	r3, [r2, #112]	; 0x70
 8009072:	e00b      	b.n	800908c <HAL_RCC_OscConfig+0x358>
 8009074:	4b5a      	ldr	r3, [pc, #360]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009078:	4a59      	ldr	r2, [pc, #356]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 800907a:	f023 0301 	bic.w	r3, r3, #1
 800907e:	6713      	str	r3, [r2, #112]	; 0x70
 8009080:	4b57      	ldr	r3, [pc, #348]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009084:	4a56      	ldr	r2, [pc, #344]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009086:	f023 0304 	bic.w	r3, r3, #4
 800908a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d015      	beq.n	80090c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009094:	f7fd ff02 	bl	8006e9c <HAL_GetTick>
 8009098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800909a:	e00a      	b.n	80090b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800909c:	f7fd fefe 	bl	8006e9c <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e0d7      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090b2:	4b4b      	ldr	r3, [pc, #300]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 80090b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0ee      	beq.n	800909c <HAL_RCC_OscConfig+0x368>
 80090be:	e014      	b.n	80090ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c0:	f7fd feec 	bl	8006e9c <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090c6:	e00a      	b.n	80090de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090c8:	f7fd fee8 	bl	8006e9c <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e0c1      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090de:	4b40      	ldr	r3, [pc, #256]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 80090e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1ee      	bne.n	80090c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d105      	bne.n	80090fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090f0:	4b3b      	ldr	r3, [pc, #236]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 80090f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f4:	4a3a      	ldr	r2, [pc, #232]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 80090f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 80ad 	beq.w	8009260 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009106:	4b36      	ldr	r3, [pc, #216]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 030c 	and.w	r3, r3, #12
 800910e:	2b08      	cmp	r3, #8
 8009110:	d060      	beq.n	80091d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d145      	bne.n	80091a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800911a:	4b33      	ldr	r3, [pc, #204]	; (80091e8 <HAL_RCC_OscConfig+0x4b4>)
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009120:	f7fd febc 	bl	8006e9c <HAL_GetTick>
 8009124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009128:	f7fd feb8 	bl	8006e9c <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e093      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800913a:	4b29      	ldr	r3, [pc, #164]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f0      	bne.n	8009128 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69da      	ldr	r2, [r3, #28]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	019b      	lsls	r3, r3, #6
 8009156:	431a      	orrs	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	3b01      	subs	r3, #1
 8009160:	041b      	lsls	r3, r3, #16
 8009162:	431a      	orrs	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	061b      	lsls	r3, r3, #24
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	071b      	lsls	r3, r3, #28
 8009172:	491b      	ldr	r1, [pc, #108]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 8009174:	4313      	orrs	r3, r2
 8009176:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009178:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <HAL_RCC_OscConfig+0x4b4>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800917e:	f7fd fe8d 	bl	8006e9c <HAL_GetTick>
 8009182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009184:	e008      	b.n	8009198 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009186:	f7fd fe89 	bl	8006e9c <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	2b02      	cmp	r3, #2
 8009192:	d901      	bls.n	8009198 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e064      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009198:	4b11      	ldr	r3, [pc, #68]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0f0      	beq.n	8009186 <HAL_RCC_OscConfig+0x452>
 80091a4:	e05c      	b.n	8009260 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091a6:	4b10      	ldr	r3, [pc, #64]	; (80091e8 <HAL_RCC_OscConfig+0x4b4>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ac:	f7fd fe76 	bl	8006e9c <HAL_GetTick>
 80091b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091b2:	e008      	b.n	80091c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091b4:	f7fd fe72 	bl	8006e9c <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d901      	bls.n	80091c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e04d      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <HAL_RCC_OscConfig+0x4ac>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1f0      	bne.n	80091b4 <HAL_RCC_OscConfig+0x480>
 80091d2:	e045      	b.n	8009260 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d107      	bne.n	80091ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e040      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
 80091e0:	40023800 	.word	0x40023800
 80091e4:	40007000 	.word	0x40007000
 80091e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80091ec:	4b1f      	ldr	r3, [pc, #124]	; (800926c <HAL_RCC_OscConfig+0x538>)
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d030      	beq.n	800925c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009204:	429a      	cmp	r2, r3
 8009206:	d129      	bne.n	800925c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009212:	429a      	cmp	r2, r3
 8009214:	d122      	bne.n	800925c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800921c:	4013      	ands	r3, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009224:	4293      	cmp	r3, r2
 8009226:	d119      	bne.n	800925c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	3b01      	subs	r3, #1
 8009236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009238:	429a      	cmp	r2, r3
 800923a:	d10f      	bne.n	800925c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009248:	429a      	cmp	r2, r3
 800924a:	d107      	bne.n	800925c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009258:	429a      	cmp	r2, r3
 800925a:	d001      	beq.n	8009260 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	40023800 	.word	0x40023800

08009270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e07b      	b.n	800937a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	d108      	bne.n	800929c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009292:	d009      	beq.n	80092a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	61da      	str	r2, [r3, #28]
 800929a:	e005      	b.n	80092a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fc fe86 	bl	8005fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092f0:	431a      	orrs	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092fa:	431a      	orrs	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	431a      	orrs	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009318:	431a      	orrs	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009322:	431a      	orrs	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932c:	ea42 0103 	orr.w	r1, r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	f003 0104 	and.w	r1, r3, #4
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	f003 0210 	and.w	r2, r3, #16
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b08c      	sub	sp, #48	; 0x30
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009390:	2301      	movs	r3, #1
 8009392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d101      	bne.n	80093a8 <HAL_SPI_TransmitReceive+0x26>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e18a      	b.n	80096be <HAL_SPI_TransmitReceive+0x33c>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093b0:	f7fd fd74 	bl	8006e9c <HAL_GetTick>
 80093b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80093c6:	887b      	ldrh	r3, [r7, #2]
 80093c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d00f      	beq.n	80093f2 <HAL_SPI_TransmitReceive+0x70>
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093d8:	d107      	bne.n	80093ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d103      	bne.n	80093ea <HAL_SPI_TransmitReceive+0x68>
 80093e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	d003      	beq.n	80093f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80093ea:	2302      	movs	r3, #2
 80093ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80093f0:	e15b      	b.n	80096aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <HAL_SPI_TransmitReceive+0x82>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <HAL_SPI_TransmitReceive+0x82>
 80093fe:	887b      	ldrh	r3, [r7, #2]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d103      	bne.n	800940c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800940a:	e14e      	b.n	80096aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b04      	cmp	r3, #4
 8009416:	d003      	beq.n	8009420 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2205      	movs	r2, #5
 800941c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	887a      	ldrh	r2, [r7, #2]
 8009430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	887a      	ldrh	r2, [r7, #2]
 8009436:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	887a      	ldrh	r2, [r7, #2]
 8009442:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	887a      	ldrh	r2, [r7, #2]
 8009448:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d007      	beq.n	8009474 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800947c:	d178      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <HAL_SPI_TransmitReceive+0x10a>
 8009486:	8b7b      	ldrh	r3, [r7, #26]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d166      	bne.n	800955a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009490:	881a      	ldrh	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	1c9a      	adds	r2, r3, #2
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	3b01      	subs	r3, #1
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094b0:	e053      	b.n	800955a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d11b      	bne.n	80094f8 <HAL_SPI_TransmitReceive+0x176>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d016      	beq.n	80094f8 <HAL_SPI_TransmitReceive+0x176>
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d113      	bne.n	80094f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d4:	881a      	ldrh	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e0:	1c9a      	adds	r2, r3, #2
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	3b01      	subs	r3, #1
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b01      	cmp	r3, #1
 8009504:	d119      	bne.n	800953a <HAL_SPI_TransmitReceive+0x1b8>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d014      	beq.n	800953a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	b292      	uxth	r2, r2
 800951c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	1c9a      	adds	r2, r3, #2
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952c:	b29b      	uxth	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009536:	2301      	movs	r3, #1
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800953a:	f7fd fcaf 	bl	8006e9c <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009546:	429a      	cmp	r2, r3
 8009548:	d807      	bhi.n	800955a <HAL_SPI_TransmitReceive+0x1d8>
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009550:	d003      	beq.n	800955a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009558:	e0a7      	b.n	80096aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800955e:	b29b      	uxth	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1a6      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x130>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1a1      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x130>
 800956e:	e07c      	b.n	800966a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <HAL_SPI_TransmitReceive+0x1fc>
 8009578:	8b7b      	ldrh	r3, [r7, #26]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d16b      	bne.n	8009656 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	330c      	adds	r3, #12
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095a4:	e057      	b.n	8009656 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d11c      	bne.n	80095ee <HAL_SPI_TransmitReceive+0x26c>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d017      	beq.n	80095ee <HAL_SPI_TransmitReceive+0x26c>
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d114      	bne.n	80095ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	330c      	adds	r3, #12
 80095ce:	7812      	ldrb	r2, [r2, #0]
 80095d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d119      	bne.n	8009630 <HAL_SPI_TransmitReceive+0x2ae>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009600:	b29b      	uxth	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d014      	beq.n	8009630 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	b2d2      	uxtb	r2, r2
 8009612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009622:	b29b      	uxth	r3, r3
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800962c:	2301      	movs	r3, #1
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009630:	f7fd fc34 	bl	8006e9c <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800963c:	429a      	cmp	r2, r3
 800963e:	d803      	bhi.n	8009648 <HAL_SPI_TransmitReceive+0x2c6>
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009646:	d102      	bne.n	800964e <HAL_SPI_TransmitReceive+0x2cc>
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	2b00      	cmp	r3, #0
 800964c:	d103      	bne.n	8009656 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009654:	e029      	b.n	80096aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800965a:	b29b      	uxth	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1a2      	bne.n	80095a6 <HAL_SPI_TransmitReceive+0x224>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d19d      	bne.n	80095a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800966a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800966c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f8b2 	bl	80097d8 <SPI_EndRxTxTransaction>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2220      	movs	r2, #32
 8009684:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009686:	e010      	b.n	80096aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10b      	bne.n	80096a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	e000      	b.n	80096aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80096a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3730      	adds	r7, #48	; 0x30
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	4613      	mov	r3, r2
 80096d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096d8:	f7fd fbe0 	bl	8006e9c <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	1a9b      	subs	r3, r3, r2
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	4413      	add	r3, r2
 80096e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096e8:	f7fd fbd8 	bl	8006e9c <HAL_GetTick>
 80096ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096ee:	4b39      	ldr	r3, [pc, #228]	; (80097d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	015b      	lsls	r3, r3, #5
 80096f4:	0d1b      	lsrs	r3, r3, #20
 80096f6:	69fa      	ldr	r2, [r7, #28]
 80096f8:	fb02 f303 	mul.w	r3, r2, r3
 80096fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096fe:	e054      	b.n	80097aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009706:	d050      	beq.n	80097aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009708:	f7fd fbc8 	bl	8006e9c <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	429a      	cmp	r2, r3
 8009716:	d902      	bls.n	800971e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d13d      	bne.n	800979a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800972c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009736:	d111      	bne.n	800975c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009740:	d004      	beq.n	800974c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800974a:	d107      	bne.n	800975c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800975a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009764:	d10f      	bne.n	8009786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e017      	b.n	80097ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	3b01      	subs	r3, #1
 80097a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4013      	ands	r3, r2
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	bf0c      	ite	eq
 80097ba:	2301      	moveq	r3, #1
 80097bc:	2300      	movne	r3, #0
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d19b      	bne.n	8009700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3720      	adds	r7, #32
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000040 	.word	0x20000040

080097d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af02      	add	r7, sp, #8
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80097e4:	4b1b      	ldr	r3, [pc, #108]	; (8009854 <SPI_EndRxTxTransaction+0x7c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a1b      	ldr	r2, [pc, #108]	; (8009858 <SPI_EndRxTxTransaction+0x80>)
 80097ea:	fba2 2303 	umull	r2, r3, r2, r3
 80097ee:	0d5b      	lsrs	r3, r3, #21
 80097f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097f4:	fb02 f303 	mul.w	r3, r2, r3
 80097f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009802:	d112      	bne.n	800982a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2200      	movs	r2, #0
 800980c:	2180      	movs	r1, #128	; 0x80
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7ff ff5a 	bl	80096c8 <SPI_WaitFlagStateUntilTimeout>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d016      	beq.n	8009848 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981e:	f043 0220 	orr.w	r2, r3, #32
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e00f      	b.n	800984a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00a      	beq.n	8009846 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	3b01      	subs	r3, #1
 8009834:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009840:	2b80      	cmp	r3, #128	; 0x80
 8009842:	d0f2      	beq.n	800982a <SPI_EndRxTxTransaction+0x52>
 8009844:	e000      	b.n	8009848 <SPI_EndRxTxTransaction+0x70>
        break;
 8009846:	bf00      	nop
  }

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20000040 	.word	0x20000040
 8009858:	165e9f81 	.word	0x165e9f81

0800985c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e041      	b.n	80098f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fd f936 	bl	8006af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3304      	adds	r3, #4
 8009898:	4619      	mov	r1, r3
 800989a:	4610      	mov	r0, r2
 800989c:	f000 fcec 	bl	800a278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	d001      	beq.n	8009914 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e046      	b.n	80099a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a23      	ldr	r2, [pc, #140]	; (80099b0 <HAL_TIM_Base_Start+0xb4>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d022      	beq.n	800996c <HAL_TIM_Base_Start+0x70>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992e:	d01d      	beq.n	800996c <HAL_TIM_Base_Start+0x70>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a1f      	ldr	r2, [pc, #124]	; (80099b4 <HAL_TIM_Base_Start+0xb8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d018      	beq.n	800996c <HAL_TIM_Base_Start+0x70>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1e      	ldr	r2, [pc, #120]	; (80099b8 <HAL_TIM_Base_Start+0xbc>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d013      	beq.n	800996c <HAL_TIM_Base_Start+0x70>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a1c      	ldr	r2, [pc, #112]	; (80099bc <HAL_TIM_Base_Start+0xc0>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d00e      	beq.n	800996c <HAL_TIM_Base_Start+0x70>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a1b      	ldr	r2, [pc, #108]	; (80099c0 <HAL_TIM_Base_Start+0xc4>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d009      	beq.n	800996c <HAL_TIM_Base_Start+0x70>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a19      	ldr	r2, [pc, #100]	; (80099c4 <HAL_TIM_Base_Start+0xc8>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d004      	beq.n	800996c <HAL_TIM_Base_Start+0x70>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a18      	ldr	r2, [pc, #96]	; (80099c8 <HAL_TIM_Base_Start+0xcc>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d111      	bne.n	8009990 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b06      	cmp	r3, #6
 800997c:	d010      	beq.n	80099a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0201 	orr.w	r2, r2, #1
 800998c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800998e:	e007      	b.n	80099a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0201 	orr.w	r2, r2, #1
 800999e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	40010000 	.word	0x40010000
 80099b4:	40000400 	.word	0x40000400
 80099b8:	40000800 	.word	0x40000800
 80099bc:	40000c00 	.word	0x40000c00
 80099c0:	40010400 	.word	0x40010400
 80099c4:	40014000 	.word	0x40014000
 80099c8:	40001800 	.word	0x40001800

080099cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d001      	beq.n	80099e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e04e      	b.n	8009a82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0201 	orr.w	r2, r2, #1
 80099fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d022      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0e:	d01d      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d018      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a1e      	ldr	r2, [pc, #120]	; (8009a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d013      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d00e      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a1b      	ldr	r2, [pc, #108]	; (8009aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d009      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a19      	ldr	r2, [pc, #100]	; (8009aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d004      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d111      	bne.n	8009a70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 0307 	and.w	r3, r3, #7
 8009a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2b06      	cmp	r3, #6
 8009a5c:	d010      	beq.n	8009a80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	e007      	b.n	8009a80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	40010000 	.word	0x40010000
 8009a94:	40000400 	.word	0x40000400
 8009a98:	40000800 	.word	0x40000800
 8009a9c:	40000c00 	.word	0x40000c00
 8009aa0:	40010400 	.word	0x40010400
 8009aa4:	40014000 	.word	0x40014000
 8009aa8:	40001800 	.word	0x40001800

08009aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e041      	b.n	8009b42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f839 	bl	8009b4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f000 fbc4 	bl	800a278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
	...

08009b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <HAL_TIM_PWM_Start+0x24>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e022      	b.n	8009bca <HAL_TIM_PWM_Start+0x6a>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d109      	bne.n	8009b9e <HAL_TIM_PWM_Start+0x3e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	bf14      	ite	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	2300      	moveq	r3, #0
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	e015      	b.n	8009bca <HAL_TIM_PWM_Start+0x6a>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d109      	bne.n	8009bb8 <HAL_TIM_PWM_Start+0x58>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	bf14      	ite	ne
 8009bb0:	2301      	movne	r3, #1
 8009bb2:	2300      	moveq	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	e008      	b.n	8009bca <HAL_TIM_PWM_Start+0x6a>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	bf14      	ite	ne
 8009bc4:	2301      	movne	r3, #1
 8009bc6:	2300      	moveq	r3, #0
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e07c      	b.n	8009ccc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIM_PWM_Start+0x82>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009be0:	e013      	b.n	8009c0a <HAL_TIM_PWM_Start+0xaa>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d104      	bne.n	8009bf2 <HAL_TIM_PWM_Start+0x92>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bf0:	e00b      	b.n	8009c0a <HAL_TIM_PWM_Start+0xaa>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d104      	bne.n	8009c02 <HAL_TIM_PWM_Start+0xa2>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c00:	e003      	b.n	8009c0a <HAL_TIM_PWM_Start+0xaa>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2202      	movs	r2, #2
 8009c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fe1a 	bl	800a84c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a2d      	ldr	r2, [pc, #180]	; (8009cd4 <HAL_TIM_PWM_Start+0x174>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d004      	beq.n	8009c2c <HAL_TIM_PWM_Start+0xcc>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a2c      	ldr	r2, [pc, #176]	; (8009cd8 <HAL_TIM_PWM_Start+0x178>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d101      	bne.n	8009c30 <HAL_TIM_PWM_Start+0xd0>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e000      	b.n	8009c32 <HAL_TIM_PWM_Start+0xd2>
 8009c30:	2300      	movs	r3, #0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d007      	beq.n	8009c46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a22      	ldr	r2, [pc, #136]	; (8009cd4 <HAL_TIM_PWM_Start+0x174>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d022      	beq.n	8009c96 <HAL_TIM_PWM_Start+0x136>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c58:	d01d      	beq.n	8009c96 <HAL_TIM_PWM_Start+0x136>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a1f      	ldr	r2, [pc, #124]	; (8009cdc <HAL_TIM_PWM_Start+0x17c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d018      	beq.n	8009c96 <HAL_TIM_PWM_Start+0x136>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1d      	ldr	r2, [pc, #116]	; (8009ce0 <HAL_TIM_PWM_Start+0x180>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d013      	beq.n	8009c96 <HAL_TIM_PWM_Start+0x136>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a1c      	ldr	r2, [pc, #112]	; (8009ce4 <HAL_TIM_PWM_Start+0x184>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d00e      	beq.n	8009c96 <HAL_TIM_PWM_Start+0x136>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a16      	ldr	r2, [pc, #88]	; (8009cd8 <HAL_TIM_PWM_Start+0x178>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d009      	beq.n	8009c96 <HAL_TIM_PWM_Start+0x136>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a18      	ldr	r2, [pc, #96]	; (8009ce8 <HAL_TIM_PWM_Start+0x188>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d004      	beq.n	8009c96 <HAL_TIM_PWM_Start+0x136>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a16      	ldr	r2, [pc, #88]	; (8009cec <HAL_TIM_PWM_Start+0x18c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d111      	bne.n	8009cba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f003 0307 	and.w	r3, r3, #7
 8009ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b06      	cmp	r3, #6
 8009ca6:	d010      	beq.n	8009cca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f042 0201 	orr.w	r2, r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb8:	e007      	b.n	8009cca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f042 0201 	orr.w	r2, r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	40010000 	.word	0x40010000
 8009cd8:	40010400 	.word	0x40010400
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40000c00 	.word	0x40000c00
 8009ce8:	40014000 	.word	0x40014000
 8009cec:	40001800 	.word	0x40001800

08009cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0302 	and.w	r3, r3, #2
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d122      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d11b      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f06f 0202 	mvn.w	r2, #2
 8009d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa81 	bl	800a23a <HAL_TIM_IC_CaptureCallback>
 8009d38:	e005      	b.n	8009d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa73 	bl	800a226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fa84 	bl	800a24e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d122      	bne.n	8009da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d11b      	bne.n	8009da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0204 	mvn.w	r2, #4
 8009d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa57 	bl	800a23a <HAL_TIM_IC_CaptureCallback>
 8009d8c:	e005      	b.n	8009d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa49 	bl	800a226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fa5a 	bl	800a24e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f003 0308 	and.w	r3, r3, #8
 8009daa:	2b08      	cmp	r3, #8
 8009dac:	d122      	bne.n	8009df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f003 0308 	and.w	r3, r3, #8
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d11b      	bne.n	8009df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f06f 0208 	mvn.w	r2, #8
 8009dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2204      	movs	r2, #4
 8009dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa2d 	bl	800a23a <HAL_TIM_IC_CaptureCallback>
 8009de0:	e005      	b.n	8009dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fa1f 	bl	800a226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fa30 	bl	800a24e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0310 	and.w	r3, r3, #16
 8009dfe:	2b10      	cmp	r3, #16
 8009e00:	d122      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	d11b      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f06f 0210 	mvn.w	r2, #16
 8009e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2208      	movs	r2, #8
 8009e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa03 	bl	800a23a <HAL_TIM_IC_CaptureCallback>
 8009e34:	e005      	b.n	8009e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f9f5 	bl	800a226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fa06 	bl	800a24e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d10e      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d107      	bne.n	8009e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f06f 0201 	mvn.w	r2, #1
 8009e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f9cf 	bl	800a212 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e7e:	2b80      	cmp	r3, #128	; 0x80
 8009e80:	d10e      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8c:	2b80      	cmp	r3, #128	; 0x80
 8009e8e:	d107      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fdd4 	bl	800aa48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b40      	cmp	r3, #64	; 0x40
 8009eac:	d10e      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b40      	cmp	r3, #64	; 0x40
 8009eba:	d107      	bne.n	8009ecc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f9cb 	bl	800a262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	d10e      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	f003 0320 	and.w	r3, r3, #32
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d107      	bne.n	8009ef8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f06f 0220 	mvn.w	r2, #32
 8009ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fd9e 	bl	800aa34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e0ae      	b.n	800a07c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b0c      	cmp	r3, #12
 8009f2a:	f200 809f 	bhi.w	800a06c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f2e:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009f69 	.word	0x08009f69
 8009f38:	0800a06d 	.word	0x0800a06d
 8009f3c:	0800a06d 	.word	0x0800a06d
 8009f40:	0800a06d 	.word	0x0800a06d
 8009f44:	08009fa9 	.word	0x08009fa9
 8009f48:	0800a06d 	.word	0x0800a06d
 8009f4c:	0800a06d 	.word	0x0800a06d
 8009f50:	0800a06d 	.word	0x0800a06d
 8009f54:	08009feb 	.word	0x08009feb
 8009f58:	0800a06d 	.word	0x0800a06d
 8009f5c:	0800a06d 	.word	0x0800a06d
 8009f60:	0800a06d 	.word	0x0800a06d
 8009f64:	0800a02b 	.word	0x0800a02b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fa22 	bl	800a3b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0208 	orr.w	r2, r2, #8
 8009f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699a      	ldr	r2, [r3, #24]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0204 	bic.w	r2, r2, #4
 8009f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6999      	ldr	r1, [r3, #24]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	619a      	str	r2, [r3, #24]
      break;
 8009fa6:	e064      	b.n	800a072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fa72 	bl	800a498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	699a      	ldr	r2, [r3, #24]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6999      	ldr	r1, [r3, #24]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	021a      	lsls	r2, r3, #8
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	619a      	str	r2, [r3, #24]
      break;
 8009fe8:	e043      	b.n	800a072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 fac7 	bl	800a584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69da      	ldr	r2, [r3, #28]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f042 0208 	orr.w	r2, r2, #8
 800a004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69da      	ldr	r2, [r3, #28]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0204 	bic.w	r2, r2, #4
 800a014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69d9      	ldr	r1, [r3, #28]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	691a      	ldr	r2, [r3, #16]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	61da      	str	r2, [r3, #28]
      break;
 800a028:	e023      	b.n	800a072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fb1b 	bl	800a66c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	69da      	ldr	r2, [r3, #28]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69d9      	ldr	r1, [r3, #28]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	021a      	lsls	r2, r3, #8
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	61da      	str	r2, [r3, #28]
      break;
 800a06a:	e002      	b.n	800a072 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	75fb      	strb	r3, [r7, #23]
      break;
 800a070:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d101      	bne.n	800a0a0 <HAL_TIM_ConfigClockSource+0x1c>
 800a09c:	2302      	movs	r3, #2
 800a09e:	e0b4      	b.n	800a20a <HAL_TIM_ConfigClockSource+0x186>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d8:	d03e      	beq.n	800a158 <HAL_TIM_ConfigClockSource+0xd4>
 800a0da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0de:	f200 8087 	bhi.w	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e6:	f000 8086 	beq.w	800a1f6 <HAL_TIM_ConfigClockSource+0x172>
 800a0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ee:	d87f      	bhi.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f0:	2b70      	cmp	r3, #112	; 0x70
 800a0f2:	d01a      	beq.n	800a12a <HAL_TIM_ConfigClockSource+0xa6>
 800a0f4:	2b70      	cmp	r3, #112	; 0x70
 800a0f6:	d87b      	bhi.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f8:	2b60      	cmp	r3, #96	; 0x60
 800a0fa:	d050      	beq.n	800a19e <HAL_TIM_ConfigClockSource+0x11a>
 800a0fc:	2b60      	cmp	r3, #96	; 0x60
 800a0fe:	d877      	bhi.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a100:	2b50      	cmp	r3, #80	; 0x50
 800a102:	d03c      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0xfa>
 800a104:	2b50      	cmp	r3, #80	; 0x50
 800a106:	d873      	bhi.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a108:	2b40      	cmp	r3, #64	; 0x40
 800a10a:	d058      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x13a>
 800a10c:	2b40      	cmp	r3, #64	; 0x40
 800a10e:	d86f      	bhi.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a110:	2b30      	cmp	r3, #48	; 0x30
 800a112:	d064      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x15a>
 800a114:	2b30      	cmp	r3, #48	; 0x30
 800a116:	d86b      	bhi.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a118:	2b20      	cmp	r3, #32
 800a11a:	d060      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x15a>
 800a11c:	2b20      	cmp	r3, #32
 800a11e:	d867      	bhi.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d05c      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x15a>
 800a124:	2b10      	cmp	r3, #16
 800a126:	d05a      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x15a>
 800a128:	e062      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	6899      	ldr	r1, [r3, #8]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	f000 fb67 	bl	800a80c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a14c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	609a      	str	r2, [r3, #8]
      break;
 800a156:	e04f      	b.n	800a1f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	6899      	ldr	r1, [r3, #8]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f000 fb50 	bl	800a80c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a17a:	609a      	str	r2, [r3, #8]
      break;
 800a17c:	e03c      	b.n	800a1f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6818      	ldr	r0, [r3, #0]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	6859      	ldr	r1, [r3, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f000 fac4 	bl	800a718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2150      	movs	r1, #80	; 0x50
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fb1d 	bl	800a7d6 <TIM_ITRx_SetConfig>
      break;
 800a19c:	e02c      	b.n	800a1f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	6859      	ldr	r1, [r3, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f000 fae3 	bl	800a776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2160      	movs	r1, #96	; 0x60
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fb0d 	bl	800a7d6 <TIM_ITRx_SetConfig>
      break;
 800a1bc:	e01c      	b.n	800a1f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	6859      	ldr	r1, [r3, #4]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f000 faa4 	bl	800a718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2140      	movs	r1, #64	; 0x40
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fafd 	bl	800a7d6 <TIM_ITRx_SetConfig>
      break;
 800a1dc:	e00c      	b.n	800a1f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	f000 faf4 	bl	800a7d6 <TIM_ITRx_SetConfig>
      break;
 800a1ee:	e003      	b.n	800a1f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f4:	e000      	b.n	800a1f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a1f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a208:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a22e:	bf00      	nop
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b083      	sub	sp, #12
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a242:	bf00      	nop
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a26a:	bf00      	nop
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
	...

0800a278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a40      	ldr	r2, [pc, #256]	; (800a38c <TIM_Base_SetConfig+0x114>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d013      	beq.n	800a2b8 <TIM_Base_SetConfig+0x40>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a296:	d00f      	beq.n	800a2b8 <TIM_Base_SetConfig+0x40>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a3d      	ldr	r2, [pc, #244]	; (800a390 <TIM_Base_SetConfig+0x118>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d00b      	beq.n	800a2b8 <TIM_Base_SetConfig+0x40>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a3c      	ldr	r2, [pc, #240]	; (800a394 <TIM_Base_SetConfig+0x11c>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d007      	beq.n	800a2b8 <TIM_Base_SetConfig+0x40>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a3b      	ldr	r2, [pc, #236]	; (800a398 <TIM_Base_SetConfig+0x120>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d003      	beq.n	800a2b8 <TIM_Base_SetConfig+0x40>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a3a      	ldr	r2, [pc, #232]	; (800a39c <TIM_Base_SetConfig+0x124>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d108      	bne.n	800a2ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a2f      	ldr	r2, [pc, #188]	; (800a38c <TIM_Base_SetConfig+0x114>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d02b      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d8:	d027      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a2c      	ldr	r2, [pc, #176]	; (800a390 <TIM_Base_SetConfig+0x118>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d023      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a2b      	ldr	r2, [pc, #172]	; (800a394 <TIM_Base_SetConfig+0x11c>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01f      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a2a      	ldr	r2, [pc, #168]	; (800a398 <TIM_Base_SetConfig+0x120>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d01b      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a29      	ldr	r2, [pc, #164]	; (800a39c <TIM_Base_SetConfig+0x124>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d017      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a28      	ldr	r2, [pc, #160]	; (800a3a0 <TIM_Base_SetConfig+0x128>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d013      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a27      	ldr	r2, [pc, #156]	; (800a3a4 <TIM_Base_SetConfig+0x12c>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00f      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a26      	ldr	r2, [pc, #152]	; (800a3a8 <TIM_Base_SetConfig+0x130>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d00b      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a25      	ldr	r2, [pc, #148]	; (800a3ac <TIM_Base_SetConfig+0x134>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d007      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a24      	ldr	r2, [pc, #144]	; (800a3b0 <TIM_Base_SetConfig+0x138>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d003      	beq.n	800a32a <TIM_Base_SetConfig+0xb2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a23      	ldr	r2, [pc, #140]	; (800a3b4 <TIM_Base_SetConfig+0x13c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d108      	bne.n	800a33c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a0a      	ldr	r2, [pc, #40]	; (800a38c <TIM_Base_SetConfig+0x114>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d003      	beq.n	800a370 <TIM_Base_SetConfig+0xf8>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a0c      	ldr	r2, [pc, #48]	; (800a39c <TIM_Base_SetConfig+0x124>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d103      	bne.n	800a378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	691a      	ldr	r2, [r3, #16]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	615a      	str	r2, [r3, #20]
}
 800a37e:	bf00      	nop
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	40010000 	.word	0x40010000
 800a390:	40000400 	.word	0x40000400
 800a394:	40000800 	.word	0x40000800
 800a398:	40000c00 	.word	0x40000c00
 800a39c:	40010400 	.word	0x40010400
 800a3a0:	40014000 	.word	0x40014000
 800a3a4:	40014400 	.word	0x40014400
 800a3a8:	40014800 	.word	0x40014800
 800a3ac:	40001800 	.word	0x40001800
 800a3b0:	40001c00 	.word	0x40001c00
 800a3b4:	40002000 	.word	0x40002000

0800a3b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	f023 0201 	bic.w	r2, r3, #1
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f023 0303 	bic.w	r3, r3, #3
 800a3ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f023 0302 	bic.w	r3, r3, #2
 800a400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	4313      	orrs	r3, r2
 800a40a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a20      	ldr	r2, [pc, #128]	; (800a490 <TIM_OC1_SetConfig+0xd8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d003      	beq.n	800a41c <TIM_OC1_SetConfig+0x64>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a1f      	ldr	r2, [pc, #124]	; (800a494 <TIM_OC1_SetConfig+0xdc>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d10c      	bne.n	800a436 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f023 0308 	bic.w	r3, r3, #8
 800a422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f023 0304 	bic.w	r3, r3, #4
 800a434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a15      	ldr	r2, [pc, #84]	; (800a490 <TIM_OC1_SetConfig+0xd8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d003      	beq.n	800a446 <TIM_OC1_SetConfig+0x8e>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a14      	ldr	r2, [pc, #80]	; (800a494 <TIM_OC1_SetConfig+0xdc>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d111      	bne.n	800a46a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a44c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	4313      	orrs	r3, r2
 800a468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	621a      	str	r2, [r3, #32]
}
 800a484:	bf00      	nop
 800a486:	371c      	adds	r7, #28
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	40010000 	.word	0x40010000
 800a494:	40010400 	.word	0x40010400

0800a498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	f023 0210 	bic.w	r2, r3, #16
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f023 0320 	bic.w	r3, r3, #32
 800a4e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a22      	ldr	r2, [pc, #136]	; (800a57c <TIM_OC2_SetConfig+0xe4>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d003      	beq.n	800a500 <TIM_OC2_SetConfig+0x68>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a21      	ldr	r2, [pc, #132]	; (800a580 <TIM_OC2_SetConfig+0xe8>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d10d      	bne.n	800a51c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	4313      	orrs	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a51a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a17      	ldr	r2, [pc, #92]	; (800a57c <TIM_OC2_SetConfig+0xe4>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d003      	beq.n	800a52c <TIM_OC2_SetConfig+0x94>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a16      	ldr	r2, [pc, #88]	; (800a580 <TIM_OC2_SetConfig+0xe8>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d113      	bne.n	800a554 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a53a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	4313      	orrs	r3, r2
 800a546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	621a      	str	r2, [r3, #32]
}
 800a56e:	bf00      	nop
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	40010000 	.word	0x40010000
 800a580:	40010400 	.word	0x40010400

0800a584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f023 0303 	bic.w	r3, r3, #3
 800a5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a21      	ldr	r2, [pc, #132]	; (800a664 <TIM_OC3_SetConfig+0xe0>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d003      	beq.n	800a5ea <TIM_OC3_SetConfig+0x66>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a20      	ldr	r2, [pc, #128]	; (800a668 <TIM_OC3_SetConfig+0xe4>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d10d      	bne.n	800a606 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	021b      	lsls	r3, r3, #8
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a16      	ldr	r2, [pc, #88]	; (800a664 <TIM_OC3_SetConfig+0xe0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d003      	beq.n	800a616 <TIM_OC3_SetConfig+0x92>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a15      	ldr	r2, [pc, #84]	; (800a668 <TIM_OC3_SetConfig+0xe4>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d113      	bne.n	800a63e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a61c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	011b      	lsls	r3, r3, #4
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	4313      	orrs	r3, r2
 800a630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	011b      	lsls	r3, r3, #4
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	621a      	str	r2, [r3, #32]
}
 800a658:	bf00      	nop
 800a65a:	371c      	adds	r7, #28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	40010000 	.word	0x40010000
 800a668:	40010400 	.word	0x40010400

0800a66c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	021b      	lsls	r3, r3, #8
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	031b      	lsls	r3, r3, #12
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a12      	ldr	r2, [pc, #72]	; (800a710 <TIM_OC4_SetConfig+0xa4>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d003      	beq.n	800a6d4 <TIM_OC4_SetConfig+0x68>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a11      	ldr	r2, [pc, #68]	; (800a714 <TIM_OC4_SetConfig+0xa8>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d109      	bne.n	800a6e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	695b      	ldr	r3, [r3, #20]
 800a6e0:	019b      	lsls	r3, r3, #6
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	621a      	str	r2, [r3, #32]
}
 800a702:	bf00      	nop
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400

0800a718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	f023 0201 	bic.w	r2, r3, #1
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	011b      	lsls	r3, r3, #4
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f023 030a 	bic.w	r3, r3, #10
 800a754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	621a      	str	r2, [r3, #32]
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a776:	b480      	push	{r7}
 800a778:	b087      	sub	sp, #28
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f023 0210 	bic.w	r2, r3, #16
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	031b      	lsls	r3, r3, #12
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	011b      	lsls	r3, r3, #4
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	621a      	str	r2, [r3, #32]
}
 800a7ca:	bf00      	nop
 800a7cc:	371c      	adds	r7, #28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b085      	sub	sp, #20
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	f043 0307 	orr.w	r3, r3, #7
 800a7f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	609a      	str	r2, [r3, #8]
}
 800a800:	bf00      	nop
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	021a      	lsls	r2, r3, #8
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	431a      	orrs	r2, r3
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	4313      	orrs	r3, r2
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	609a      	str	r2, [r3, #8]
}
 800a840:	bf00      	nop
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f003 031f 	and.w	r3, r3, #31
 800a85e:	2201      	movs	r2, #1
 800a860:	fa02 f303 	lsl.w	r3, r2, r3
 800a864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6a1a      	ldr	r2, [r3, #32]
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	43db      	mvns	r3, r3
 800a86e:	401a      	ands	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6a1a      	ldr	r2, [r3, #32]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f003 031f 	and.w	r3, r3, #31
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	fa01 f303 	lsl.w	r3, r1, r3
 800a884:	431a      	orrs	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	621a      	str	r2, [r3, #32]
}
 800a88a:	bf00      	nop
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
	...

0800a898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e05a      	b.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a21      	ldr	r2, [pc, #132]	; (800a974 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d022      	beq.n	800a93a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fc:	d01d      	beq.n	800a93a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a1d      	ldr	r2, [pc, #116]	; (800a978 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d018      	beq.n	800a93a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1b      	ldr	r2, [pc, #108]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d013      	beq.n	800a93a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a1a      	ldr	r2, [pc, #104]	; (800a980 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d00e      	beq.n	800a93a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a18      	ldr	r2, [pc, #96]	; (800a984 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d009      	beq.n	800a93a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d004      	beq.n	800a93a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a15      	ldr	r2, [pc, #84]	; (800a98c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d10c      	bne.n	800a954 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	4313      	orrs	r3, r2
 800a94a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	40010000 	.word	0x40010000
 800a978:	40000400 	.word	0x40000400
 800a97c:	40000800 	.word	0x40000800
 800a980:	40000c00 	.word	0x40000c00
 800a984:	40010400 	.word	0x40010400
 800a988:	40014000 	.word	0x40014000
 800a98c:	40001800 	.word	0x40001800

0800a990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d101      	bne.n	800a9ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	e03d      	b.n	800aa28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e03f      	b.n	800aaee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d106      	bne.n	800aa88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7fc f906 	bl	8006c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2224      	movs	r2, #36	; 0x24
 800aa8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68da      	ldr	r2, [r3, #12]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 fddf 	bl	800b664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	691a      	ldr	r2, [r3, #16]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	695a      	ldr	r2, [r3, #20]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68da      	ldr	r2, [r3, #12]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b08a      	sub	sp, #40	; 0x28
 800aafa:	af02      	add	r7, sp, #8
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	603b      	str	r3, [r7, #0]
 800ab02:	4613      	mov	r3, r2
 800ab04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d17c      	bne.n	800ac10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <HAL_UART_Transmit+0x2c>
 800ab1c:	88fb      	ldrh	r3, [r7, #6]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e075      	b.n	800ac12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <HAL_UART_Transmit+0x3e>
 800ab30:	2302      	movs	r3, #2
 800ab32:	e06e      	b.n	800ac12 <HAL_UART_Transmit+0x11c>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2221      	movs	r2, #33	; 0x21
 800ab46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab4a:	f7fc f9a7 	bl	8006e9c <HAL_GetTick>
 800ab4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	88fa      	ldrh	r2, [r7, #6]
 800ab54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	88fa      	ldrh	r2, [r7, #6]
 800ab5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab64:	d108      	bne.n	800ab78 <HAL_UART_Transmit+0x82>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d104      	bne.n	800ab78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	61bb      	str	r3, [r7, #24]
 800ab76:	e003      	b.n	800ab80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ab88:	e02a      	b.n	800abe0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2200      	movs	r2, #0
 800ab92:	2180      	movs	r1, #128	; 0x80
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 fb1f 	bl	800b1d8 <UART_WaitOnFlagUntilTimeout>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e036      	b.n	800ac12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10b      	bne.n	800abc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	3302      	adds	r3, #2
 800abbe:	61bb      	str	r3, [r7, #24]
 800abc0:	e007      	b.n	800abd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	781a      	ldrb	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	3301      	adds	r3, #1
 800abd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	3b01      	subs	r3, #1
 800abda:	b29a      	uxth	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1cf      	bne.n	800ab8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2200      	movs	r2, #0
 800abf2:	2140      	movs	r1, #64	; 0x40
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 faef 	bl	800b1d8 <UART_WaitOnFlagUntilTimeout>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e006      	b.n	800ac12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2220      	movs	r2, #32
 800ac08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e000      	b.n	800ac12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ac10:	2302      	movs	r3, #2
  }
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	4613      	mov	r3, r2
 800ac26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b20      	cmp	r3, #32
 800ac32:	d11d      	bne.n	800ac70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <HAL_UART_Receive_IT+0x26>
 800ac3a:	88fb      	ldrh	r3, [r7, #6]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e016      	b.n	800ac72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <HAL_UART_Receive_IT+0x38>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e00f      	b.n	800ac72 <HAL_UART_Receive_IT+0x58>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	461a      	mov	r2, r3
 800ac64:	68b9      	ldr	r1, [r7, #8]
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 fb24 	bl	800b2b4 <UART_Start_Receive_IT>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	e000      	b.n	800ac72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ac70:	2302      	movs	r3, #2
  }
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b0ba      	sub	sp, #232	; 0xe8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acb2:	f003 030f 	and.w	r3, r3, #15
 800acb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800acba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10f      	bne.n	800ace2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc6:	f003 0320 	and.w	r3, r3, #32
 800acca:	2b00      	cmp	r3, #0
 800accc:	d009      	beq.n	800ace2 <HAL_UART_IRQHandler+0x66>
 800acce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acd2:	f003 0320 	and.w	r3, r3, #32
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fc07 	bl	800b4ee <UART_Receive_IT>
      return;
 800ace0:	e256      	b.n	800b190 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ace2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 80de 	beq.w	800aea8 <HAL_UART_IRQHandler+0x22c>
 800acec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d106      	bne.n	800ad06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800acf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 80d1 	beq.w	800aea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00b      	beq.n	800ad2a <HAL_UART_IRQHandler+0xae>
 800ad12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d005      	beq.n	800ad2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	f043 0201 	orr.w	r2, r3, #1
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad2e:	f003 0304 	and.w	r3, r3, #4
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00b      	beq.n	800ad4e <HAL_UART_IRQHandler+0xd2>
 800ad36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d005      	beq.n	800ad4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	f043 0202 	orr.w	r2, r3, #2
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad52:	f003 0302 	and.w	r3, r3, #2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00b      	beq.n	800ad72 <HAL_UART_IRQHandler+0xf6>
 800ad5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d005      	beq.n	800ad72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6a:	f043 0204 	orr.w	r2, r3, #4
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad76:	f003 0308 	and.w	r3, r3, #8
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d011      	beq.n	800ada2 <HAL_UART_IRQHandler+0x126>
 800ad7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad82:	f003 0320 	and.w	r3, r3, #32
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d105      	bne.n	800ad96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d005      	beq.n	800ada2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	f043 0208 	orr.w	r2, r3, #8
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 81ed 	beq.w	800b186 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d008      	beq.n	800adca <HAL_UART_IRQHandler+0x14e>
 800adb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fb92 	bl	800b4ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add4:	2b40      	cmp	r3, #64	; 0x40
 800add6:	bf0c      	ite	eq
 800add8:	2301      	moveq	r3, #1
 800adda:	2300      	movne	r3, #0
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	f003 0308 	and.w	r3, r3, #8
 800adea:	2b00      	cmp	r3, #0
 800adec:	d103      	bne.n	800adf6 <HAL_UART_IRQHandler+0x17a>
 800adee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d04f      	beq.n	800ae96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fa9a 	bl	800b330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae06:	2b40      	cmp	r3, #64	; 0x40
 800ae08:	d141      	bne.n	800ae8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3314      	adds	r3, #20
 800ae10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae18:	e853 3f00 	ldrex	r3, [r3]
 800ae1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	3314      	adds	r3, #20
 800ae32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae46:	e841 2300 	strex	r3, r2, [r1]
 800ae4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1d9      	bne.n	800ae0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d013      	beq.n	800ae86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	4a7d      	ldr	r2, [pc, #500]	; (800b058 <HAL_UART_IRQHandler+0x3dc>)
 800ae64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd f9f7 	bl	800825e <HAL_DMA_Abort_IT>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d016      	beq.n	800aea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae84:	e00e      	b.n	800aea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f990 	bl	800b1ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae8c:	e00a      	b.n	800aea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f98c 	bl	800b1ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae94:	e006      	b.n	800aea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f988 	bl	800b1ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aea2:	e170      	b.n	800b186 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea4:	bf00      	nop
    return;
 800aea6:	e16e      	b.n	800b186 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	f040 814a 	bne.w	800b146 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aeb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb6:	f003 0310 	and.w	r3, r3, #16
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 8143 	beq.w	800b146 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aec4:	f003 0310 	and.w	r3, r3, #16
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 813c 	beq.w	800b146 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aece:	2300      	movs	r3, #0
 800aed0:	60bb      	str	r3, [r7, #8]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	60bb      	str	r3, [r7, #8]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	60bb      	str	r3, [r7, #8]
 800aee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeee:	2b40      	cmp	r3, #64	; 0x40
 800aef0:	f040 80b4 	bne.w	800b05c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 8140 	beq.w	800b18a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af12:	429a      	cmp	r2, r3
 800af14:	f080 8139 	bcs.w	800b18a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af2a:	f000 8088 	beq.w	800b03e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	330c      	adds	r3, #12
 800af34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af3c:	e853 3f00 	ldrex	r3, [r3]
 800af40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	330c      	adds	r3, #12
 800af56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af6a:	e841 2300 	strex	r3, r2, [r1]
 800af6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1d9      	bne.n	800af2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3314      	adds	r3, #20
 800af80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af84:	e853 3f00 	ldrex	r3, [r3]
 800af88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af8c:	f023 0301 	bic.w	r3, r3, #1
 800af90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3314      	adds	r3, #20
 800af9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800afa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800afa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afaa:	e841 2300 	strex	r3, r2, [r1]
 800afae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800afb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1e1      	bne.n	800af7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3314      	adds	r3, #20
 800afbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3314      	adds	r3, #20
 800afd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afda:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e3      	bne.n	800afb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	330c      	adds	r3, #12
 800b002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b006:	e853 3f00 	ldrex	r3, [r3]
 800b00a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b00e:	f023 0310 	bic.w	r3, r3, #16
 800b012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	330c      	adds	r3, #12
 800b01c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b020:	65ba      	str	r2, [r7, #88]	; 0x58
 800b022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b028:	e841 2300 	strex	r3, r2, [r1]
 800b02c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1e3      	bne.n	800affc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fd f8a0 	bl	800817e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b046:	b29b      	uxth	r3, r3
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f8b6 	bl	800b1c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b054:	e099      	b.n	800b18a <HAL_UART_IRQHandler+0x50e>
 800b056:	bf00      	nop
 800b058:	0800b3f7 	.word	0x0800b3f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b064:	b29b      	uxth	r3, r3
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b070:	b29b      	uxth	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 808b 	beq.w	800b18e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8086 	beq.w	800b18e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	330c      	adds	r3, #12
 800b088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e3      	bne.n	800b082 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3314      	adds	r3, #20
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	f023 0301 	bic.w	r3, r3, #1
 800b0d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3314      	adds	r3, #20
 800b0da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0de:	633a      	str	r2, [r7, #48]	; 0x30
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e3      	bne.n	800b0ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	e853 3f00 	ldrex	r3, [r3]
 800b10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f023 0310 	bic.w	r3, r3, #16
 800b116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	330c      	adds	r3, #12
 800b120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b124:	61fa      	str	r2, [r7, #28]
 800b126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	69b9      	ldr	r1, [r7, #24]
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	617b      	str	r3, [r7, #20]
   return(result);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e3      	bne.n	800b100 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f83e 	bl	800b1c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b144:	e023      	b.n	800b18e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d009      	beq.n	800b166 <HAL_UART_IRQHandler+0x4ea>
 800b152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f95d 	bl	800b41e <UART_Transmit_IT>
    return;
 800b164:	e014      	b.n	800b190 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00e      	beq.n	800b190 <HAL_UART_IRQHandler+0x514>
 800b172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d008      	beq.n	800b190 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f99d 	bl	800b4be <UART_EndTransmit_IT>
    return;
 800b184:	e004      	b.n	800b190 <HAL_UART_IRQHandler+0x514>
    return;
 800b186:	bf00      	nop
 800b188:	e002      	b.n	800b190 <HAL_UART_IRQHandler+0x514>
      return;
 800b18a:	bf00      	nop
 800b18c:	e000      	b.n	800b190 <HAL_UART_IRQHandler+0x514>
      return;
 800b18e:	bf00      	nop
  }
}
 800b190:	37e8      	adds	r7, #232	; 0xe8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop

0800b198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b090      	sub	sp, #64	; 0x40
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	603b      	str	r3, [r7, #0]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e8:	e050      	b.n	800b28c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1f0:	d04c      	beq.n	800b28c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d007      	beq.n	800b208 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1f8:	f7fb fe50 	bl	8006e9c <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b204:	429a      	cmp	r2, r3
 800b206:	d241      	bcs.n	800b28c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	330c      	adds	r3, #12
 800b20e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	e853 3f00 	ldrex	r3, [r3]
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	330c      	adds	r3, #12
 800b226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b228:	637a      	str	r2, [r7, #52]	; 0x34
 800b22a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b22e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b230:	e841 2300 	strex	r3, r2, [r1]
 800b234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e5      	bne.n	800b208 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3314      	adds	r3, #20
 800b242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	e853 3f00 	ldrex	r3, [r3]
 800b24a:	613b      	str	r3, [r7, #16]
   return(result);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f023 0301 	bic.w	r3, r3, #1
 800b252:	63bb      	str	r3, [r7, #56]	; 0x38
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3314      	adds	r3, #20
 800b25a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b25c:	623a      	str	r2, [r7, #32]
 800b25e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b260:	69f9      	ldr	r1, [r7, #28]
 800b262:	6a3a      	ldr	r2, [r7, #32]
 800b264:	e841 2300 	strex	r3, r2, [r1]
 800b268:	61bb      	str	r3, [r7, #24]
   return(result);
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e5      	bne.n	800b23c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2220      	movs	r2, #32
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2220      	movs	r2, #32
 800b27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e00f      	b.n	800b2ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	4013      	ands	r3, r2
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	429a      	cmp	r2, r3
 800b29a:	bf0c      	ite	eq
 800b29c:	2301      	moveq	r3, #1
 800b29e:	2300      	movne	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	79fb      	ldrb	r3, [r7, #7]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d09f      	beq.n	800b1ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3740      	adds	r7, #64	; 0x40
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	88fa      	ldrh	r2, [r7, #6]
 800b2cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	88fa      	ldrh	r2, [r7, #6]
 800b2d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2222      	movs	r2, #34	; 0x22
 800b2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d007      	beq.n	800b302 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b300:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	695a      	ldr	r2, [r3, #20]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f042 0201 	orr.w	r2, r2, #1
 800b310:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f042 0220 	orr.w	r2, r2, #32
 800b320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b330:	b480      	push	{r7}
 800b332:	b095      	sub	sp, #84	; 0x54
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	330c      	adds	r3, #12
 800b33e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b342:	e853 3f00 	ldrex	r3, [r3]
 800b346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b34e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	330c      	adds	r3, #12
 800b356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b358:	643a      	str	r2, [r7, #64]	; 0x40
 800b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b35e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b360:	e841 2300 	strex	r3, r2, [r1]
 800b364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1e5      	bne.n	800b338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3314      	adds	r3, #20
 800b372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f023 0301 	bic.w	r3, r3, #1
 800b382:	64bb      	str	r3, [r7, #72]	; 0x48
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3314      	adds	r3, #20
 800b38a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b38c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b38e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e5      	bne.n	800b36c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d119      	bne.n	800b3dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	330c      	adds	r3, #12
 800b3ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	e853 3f00 	ldrex	r3, [r3]
 800b3b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f023 0310 	bic.w	r3, r3, #16
 800b3be:	647b      	str	r3, [r7, #68]	; 0x44
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	330c      	adds	r3, #12
 800b3c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3c8:	61ba      	str	r2, [r7, #24]
 800b3ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3cc:	6979      	ldr	r1, [r7, #20]
 800b3ce:	69ba      	ldr	r2, [r7, #24]
 800b3d0:	e841 2300 	strex	r3, r2, [r1]
 800b3d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e5      	bne.n	800b3a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3ea:	bf00      	nop
 800b3ec:	3754      	adds	r7, #84	; 0x54
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f7ff fecb 	bl	800b1ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b416:	bf00      	nop
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b41e:	b480      	push	{r7}
 800b420:	b085      	sub	sp, #20
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b21      	cmp	r3, #33	; 0x21
 800b430:	d13e      	bne.n	800b4b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43a:	d114      	bne.n	800b466 <UART_Transmit_IT+0x48>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d110      	bne.n	800b466 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	1c9a      	adds	r2, r3, #2
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	621a      	str	r2, [r3, #32]
 800b464:	e008      	b.n	800b478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6211      	str	r1, [r2, #32]
 800b470:	781a      	ldrb	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29b      	uxth	r3, r3
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	4619      	mov	r1, r3
 800b486:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10f      	bne.n	800b4ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68da      	ldr	r2, [r3, #12]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b49a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	e000      	b.n	800b4b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4b0:	2302      	movs	r3, #2
  }
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2220      	movs	r2, #32
 800b4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff fe5a 	bl	800b198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b08c      	sub	sp, #48	; 0x30
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b22      	cmp	r3, #34	; 0x22
 800b500:	f040 80ab 	bne.w	800b65a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b50c:	d117      	bne.n	800b53e <UART_Receive_IT+0x50>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d113      	bne.n	800b53e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b516:	2300      	movs	r3, #0
 800b518:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	b29b      	uxth	r3, r3
 800b528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b536:	1c9a      	adds	r2, r3, #2
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	629a      	str	r2, [r3, #40]	; 0x28
 800b53c:	e026      	b.n	800b58c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b542:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b544:	2300      	movs	r3, #0
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b550:	d007      	beq.n	800b562 <UART_Receive_IT+0x74>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <UART_Receive_IT+0x82>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d106      	bne.n	800b570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	e008      	b.n	800b582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b590:	b29b      	uxth	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	b29b      	uxth	r3, r3
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	4619      	mov	r1, r3
 800b59a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d15a      	bne.n	800b656 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68da      	ldr	r2, [r3, #12]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f022 0220 	bic.w	r2, r2, #32
 800b5ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68da      	ldr	r2, [r3, #12]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	695a      	ldr	r2, [r3, #20]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f022 0201 	bic.w	r2, r2, #1
 800b5ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2220      	movs	r2, #32
 800b5d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d135      	bne.n	800b64c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	330c      	adds	r3, #12
 800b5ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f023 0310 	bic.w	r3, r3, #16
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	330c      	adds	r3, #12
 800b604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b606:	623a      	str	r2, [r7, #32]
 800b608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	69f9      	ldr	r1, [r7, #28]
 800b60c:	6a3a      	ldr	r2, [r7, #32]
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	61bb      	str	r3, [r7, #24]
   return(result);
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e5      	bne.n	800b5e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 0310 	and.w	r3, r3, #16
 800b624:	2b10      	cmp	r3, #16
 800b626:	d10a      	bne.n	800b63e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b628:	2300      	movs	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff fdbb 	bl	800b1c0 <HAL_UARTEx_RxEventCallback>
 800b64a:	e002      	b.n	800b652 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7fb fb83 	bl	8006d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	e002      	b.n	800b65c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	e000      	b.n	800b65c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b65a:	2302      	movs	r3, #2
  }
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3730      	adds	r7, #48	; 0x30
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b668:	b0c0      	sub	sp, #256	; 0x100
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b680:	68d9      	ldr	r1, [r3, #12]
 800b682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	ea40 0301 	orr.w	r3, r0, r1
 800b68c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b692:	689a      	ldr	r2, [r3, #8]
 800b694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6bc:	f021 010c 	bic.w	r1, r1, #12
 800b6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6de:	6999      	ldr	r1, [r3, #24]
 800b6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	ea40 0301 	orr.w	r3, r0, r1
 800b6ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	4b8f      	ldr	r3, [pc, #572]	; (800b930 <UART_SetConfig+0x2cc>)
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d005      	beq.n	800b704 <UART_SetConfig+0xa0>
 800b6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	4b8d      	ldr	r3, [pc, #564]	; (800b934 <UART_SetConfig+0x2d0>)
 800b700:	429a      	cmp	r2, r3
 800b702:	d104      	bne.n	800b70e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b704:	f7fd f8d2 	bl	80088ac <HAL_RCC_GetPCLK2Freq>
 800b708:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b70c:	e003      	b.n	800b716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b70e:	f7fd f8b9 	bl	8008884 <HAL_RCC_GetPCLK1Freq>
 800b712:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b720:	f040 810c 	bne.w	800b93c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b728:	2200      	movs	r2, #0
 800b72a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b72e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b736:	4622      	mov	r2, r4
 800b738:	462b      	mov	r3, r5
 800b73a:	1891      	adds	r1, r2, r2
 800b73c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b73e:	415b      	adcs	r3, r3
 800b740:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b746:	4621      	mov	r1, r4
 800b748:	eb12 0801 	adds.w	r8, r2, r1
 800b74c:	4629      	mov	r1, r5
 800b74e:	eb43 0901 	adc.w	r9, r3, r1
 800b752:	f04f 0200 	mov.w	r2, #0
 800b756:	f04f 0300 	mov.w	r3, #0
 800b75a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b75e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b766:	4690      	mov	r8, r2
 800b768:	4699      	mov	r9, r3
 800b76a:	4623      	mov	r3, r4
 800b76c:	eb18 0303 	adds.w	r3, r8, r3
 800b770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b774:	462b      	mov	r3, r5
 800b776:	eb49 0303 	adc.w	r3, r9, r3
 800b77a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b78a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b78e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b792:	460b      	mov	r3, r1
 800b794:	18db      	adds	r3, r3, r3
 800b796:	653b      	str	r3, [r7, #80]	; 0x50
 800b798:	4613      	mov	r3, r2
 800b79a:	eb42 0303 	adc.w	r3, r2, r3
 800b79e:	657b      	str	r3, [r7, #84]	; 0x54
 800b7a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b7a8:	f7f5 fa8e 	bl	8000cc8 <__aeabi_uldivmod>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4b61      	ldr	r3, [pc, #388]	; (800b938 <UART_SetConfig+0x2d4>)
 800b7b2:	fba3 2302 	umull	r2, r3, r3, r2
 800b7b6:	095b      	lsrs	r3, r3, #5
 800b7b8:	011c      	lsls	r4, r3, #4
 800b7ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b7c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b7cc:	4642      	mov	r2, r8
 800b7ce:	464b      	mov	r3, r9
 800b7d0:	1891      	adds	r1, r2, r2
 800b7d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7d4:	415b      	adcs	r3, r3
 800b7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b7dc:	4641      	mov	r1, r8
 800b7de:	eb12 0a01 	adds.w	sl, r2, r1
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	eb43 0b01 	adc.w	fp, r3, r1
 800b7e8:	f04f 0200 	mov.w	r2, #0
 800b7ec:	f04f 0300 	mov.w	r3, #0
 800b7f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7fc:	4692      	mov	sl, r2
 800b7fe:	469b      	mov	fp, r3
 800b800:	4643      	mov	r3, r8
 800b802:	eb1a 0303 	adds.w	r3, sl, r3
 800b806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b80a:	464b      	mov	r3, r9
 800b80c:	eb4b 0303 	adc.w	r3, fp, r3
 800b810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b820:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b828:	460b      	mov	r3, r1
 800b82a:	18db      	adds	r3, r3, r3
 800b82c:	643b      	str	r3, [r7, #64]	; 0x40
 800b82e:	4613      	mov	r3, r2
 800b830:	eb42 0303 	adc.w	r3, r2, r3
 800b834:	647b      	str	r3, [r7, #68]	; 0x44
 800b836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b83a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b83e:	f7f5 fa43 	bl	8000cc8 <__aeabi_uldivmod>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4611      	mov	r1, r2
 800b848:	4b3b      	ldr	r3, [pc, #236]	; (800b938 <UART_SetConfig+0x2d4>)
 800b84a:	fba3 2301 	umull	r2, r3, r3, r1
 800b84e:	095b      	lsrs	r3, r3, #5
 800b850:	2264      	movs	r2, #100	; 0x64
 800b852:	fb02 f303 	mul.w	r3, r2, r3
 800b856:	1acb      	subs	r3, r1, r3
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b85e:	4b36      	ldr	r3, [pc, #216]	; (800b938 <UART_SetConfig+0x2d4>)
 800b860:	fba3 2302 	umull	r2, r3, r3, r2
 800b864:	095b      	lsrs	r3, r3, #5
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b86c:	441c      	add	r4, r3
 800b86e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b872:	2200      	movs	r2, #0
 800b874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b878:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b87c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b880:	4642      	mov	r2, r8
 800b882:	464b      	mov	r3, r9
 800b884:	1891      	adds	r1, r2, r2
 800b886:	63b9      	str	r1, [r7, #56]	; 0x38
 800b888:	415b      	adcs	r3, r3
 800b88a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b88c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b890:	4641      	mov	r1, r8
 800b892:	1851      	adds	r1, r2, r1
 800b894:	6339      	str	r1, [r7, #48]	; 0x30
 800b896:	4649      	mov	r1, r9
 800b898:	414b      	adcs	r3, r1
 800b89a:	637b      	str	r3, [r7, #52]	; 0x34
 800b89c:	f04f 0200 	mov.w	r2, #0
 800b8a0:	f04f 0300 	mov.w	r3, #0
 800b8a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b8a8:	4659      	mov	r1, fp
 800b8aa:	00cb      	lsls	r3, r1, #3
 800b8ac:	4651      	mov	r1, sl
 800b8ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8b2:	4651      	mov	r1, sl
 800b8b4:	00ca      	lsls	r2, r1, #3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	4642      	mov	r2, r8
 800b8be:	189b      	adds	r3, r3, r2
 800b8c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8c4:	464b      	mov	r3, r9
 800b8c6:	460a      	mov	r2, r1
 800b8c8:	eb42 0303 	adc.w	r3, r2, r3
 800b8cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b8e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	18db      	adds	r3, r3, r3
 800b8e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	eb42 0303 	adc.w	r3, r2, r3
 800b8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8fa:	f7f5 f9e5 	bl	8000cc8 <__aeabi_uldivmod>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4b0d      	ldr	r3, [pc, #52]	; (800b938 <UART_SetConfig+0x2d4>)
 800b904:	fba3 1302 	umull	r1, r3, r3, r2
 800b908:	095b      	lsrs	r3, r3, #5
 800b90a:	2164      	movs	r1, #100	; 0x64
 800b90c:	fb01 f303 	mul.w	r3, r1, r3
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	3332      	adds	r3, #50	; 0x32
 800b916:	4a08      	ldr	r2, [pc, #32]	; (800b938 <UART_SetConfig+0x2d4>)
 800b918:	fba2 2303 	umull	r2, r3, r2, r3
 800b91c:	095b      	lsrs	r3, r3, #5
 800b91e:	f003 0207 	and.w	r2, r3, #7
 800b922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4422      	add	r2, r4
 800b92a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b92c:	e105      	b.n	800bb3a <UART_SetConfig+0x4d6>
 800b92e:	bf00      	nop
 800b930:	40011000 	.word	0x40011000
 800b934:	40011400 	.word	0x40011400
 800b938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b940:	2200      	movs	r2, #0
 800b942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b946:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b94a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b94e:	4642      	mov	r2, r8
 800b950:	464b      	mov	r3, r9
 800b952:	1891      	adds	r1, r2, r2
 800b954:	6239      	str	r1, [r7, #32]
 800b956:	415b      	adcs	r3, r3
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
 800b95a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b95e:	4641      	mov	r1, r8
 800b960:	1854      	adds	r4, r2, r1
 800b962:	4649      	mov	r1, r9
 800b964:	eb43 0501 	adc.w	r5, r3, r1
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	00eb      	lsls	r3, r5, #3
 800b972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b976:	00e2      	lsls	r2, r4, #3
 800b978:	4614      	mov	r4, r2
 800b97a:	461d      	mov	r5, r3
 800b97c:	4643      	mov	r3, r8
 800b97e:	18e3      	adds	r3, r4, r3
 800b980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b984:	464b      	mov	r3, r9
 800b986:	eb45 0303 	adc.w	r3, r5, r3
 800b98a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b98e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b99a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b99e:	f04f 0200 	mov.w	r2, #0
 800b9a2:	f04f 0300 	mov.w	r3, #0
 800b9a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	008b      	lsls	r3, r1, #2
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	008a      	lsls	r2, r1, #2
 800b9b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9bc:	f7f5 f984 	bl	8000cc8 <__aeabi_uldivmod>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4b60      	ldr	r3, [pc, #384]	; (800bb48 <UART_SetConfig+0x4e4>)
 800b9c6:	fba3 2302 	umull	r2, r3, r3, r2
 800b9ca:	095b      	lsrs	r3, r3, #5
 800b9cc:	011c      	lsls	r4, r3, #4
 800b9ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b9dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	1891      	adds	r1, r2, r2
 800b9e6:	61b9      	str	r1, [r7, #24]
 800b9e8:	415b      	adcs	r3, r3
 800b9ea:	61fb      	str	r3, [r7, #28]
 800b9ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9f0:	4641      	mov	r1, r8
 800b9f2:	1851      	adds	r1, r2, r1
 800b9f4:	6139      	str	r1, [r7, #16]
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	414b      	adcs	r3, r1
 800b9fa:	617b      	str	r3, [r7, #20]
 800b9fc:	f04f 0200 	mov.w	r2, #0
 800ba00:	f04f 0300 	mov.w	r3, #0
 800ba04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba08:	4659      	mov	r1, fp
 800ba0a:	00cb      	lsls	r3, r1, #3
 800ba0c:	4651      	mov	r1, sl
 800ba0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba12:	4651      	mov	r1, sl
 800ba14:	00ca      	lsls	r2, r1, #3
 800ba16:	4610      	mov	r0, r2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	189b      	adds	r3, r3, r2
 800ba20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba24:	464b      	mov	r3, r9
 800ba26:	460a      	mov	r2, r1
 800ba28:	eb42 0303 	adc.w	r3, r2, r3
 800ba2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba3c:	f04f 0200 	mov.w	r2, #0
 800ba40:	f04f 0300 	mov.w	r3, #0
 800ba44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba48:	4649      	mov	r1, r9
 800ba4a:	008b      	lsls	r3, r1, #2
 800ba4c:	4641      	mov	r1, r8
 800ba4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba52:	4641      	mov	r1, r8
 800ba54:	008a      	lsls	r2, r1, #2
 800ba56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba5a:	f7f5 f935 	bl	8000cc8 <__aeabi_uldivmod>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	4b39      	ldr	r3, [pc, #228]	; (800bb48 <UART_SetConfig+0x4e4>)
 800ba64:	fba3 1302 	umull	r1, r3, r3, r2
 800ba68:	095b      	lsrs	r3, r3, #5
 800ba6a:	2164      	movs	r1, #100	; 0x64
 800ba6c:	fb01 f303 	mul.w	r3, r1, r3
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	3332      	adds	r3, #50	; 0x32
 800ba76:	4a34      	ldr	r2, [pc, #208]	; (800bb48 <UART_SetConfig+0x4e4>)
 800ba78:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7c:	095b      	lsrs	r3, r3, #5
 800ba7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba82:	441c      	add	r4, r3
 800ba84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba88:	2200      	movs	r2, #0
 800ba8a:	673b      	str	r3, [r7, #112]	; 0x70
 800ba8c:	677a      	str	r2, [r7, #116]	; 0x74
 800ba8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba92:	4642      	mov	r2, r8
 800ba94:	464b      	mov	r3, r9
 800ba96:	1891      	adds	r1, r2, r2
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	415b      	adcs	r3, r3
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800baa2:	4641      	mov	r1, r8
 800baa4:	1851      	adds	r1, r2, r1
 800baa6:	6039      	str	r1, [r7, #0]
 800baa8:	4649      	mov	r1, r9
 800baaa:	414b      	adcs	r3, r1
 800baac:	607b      	str	r3, [r7, #4]
 800baae:	f04f 0200 	mov.w	r2, #0
 800bab2:	f04f 0300 	mov.w	r3, #0
 800bab6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800baba:	4659      	mov	r1, fp
 800babc:	00cb      	lsls	r3, r1, #3
 800babe:	4651      	mov	r1, sl
 800bac0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bac4:	4651      	mov	r1, sl
 800bac6:	00ca      	lsls	r2, r1, #3
 800bac8:	4610      	mov	r0, r2
 800baca:	4619      	mov	r1, r3
 800bacc:	4603      	mov	r3, r0
 800bace:	4642      	mov	r2, r8
 800bad0:	189b      	adds	r3, r3, r2
 800bad2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bad4:	464b      	mov	r3, r9
 800bad6:	460a      	mov	r2, r1
 800bad8:	eb42 0303 	adc.w	r3, r2, r3
 800badc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	663b      	str	r3, [r7, #96]	; 0x60
 800bae8:	667a      	str	r2, [r7, #100]	; 0x64
 800baea:	f04f 0200 	mov.w	r2, #0
 800baee:	f04f 0300 	mov.w	r3, #0
 800baf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800baf6:	4649      	mov	r1, r9
 800baf8:	008b      	lsls	r3, r1, #2
 800bafa:	4641      	mov	r1, r8
 800bafc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb00:	4641      	mov	r1, r8
 800bb02:	008a      	lsls	r2, r1, #2
 800bb04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb08:	f7f5 f8de 	bl	8000cc8 <__aeabi_uldivmod>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <UART_SetConfig+0x4e4>)
 800bb12:	fba3 1302 	umull	r1, r3, r3, r2
 800bb16:	095b      	lsrs	r3, r3, #5
 800bb18:	2164      	movs	r1, #100	; 0x64
 800bb1a:	fb01 f303 	mul.w	r3, r1, r3
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	011b      	lsls	r3, r3, #4
 800bb22:	3332      	adds	r3, #50	; 0x32
 800bb24:	4a08      	ldr	r2, [pc, #32]	; (800bb48 <UART_SetConfig+0x4e4>)
 800bb26:	fba2 2303 	umull	r2, r3, r2, r3
 800bb2a:	095b      	lsrs	r3, r3, #5
 800bb2c:	f003 020f 	and.w	r2, r3, #15
 800bb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4422      	add	r2, r4
 800bb38:	609a      	str	r2, [r3, #8]
}
 800bb3a:	bf00      	nop
 800bb3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb40:	46bd      	mov	sp, r7
 800bb42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb46:	bf00      	nop
 800bb48:	51eb851f 	.word	0x51eb851f

0800bb4c <atof>:
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	f001 bb61 	b.w	800d214 <strtod>

0800bb52 <atoi>:
 800bb52:	220a      	movs	r2, #10
 800bb54:	2100      	movs	r1, #0
 800bb56:	f001 bbeb 	b.w	800d330 <strtol>
	...

0800bb5c <__errno>:
 800bb5c:	4b01      	ldr	r3, [pc, #4]	; (800bb64 <__errno+0x8>)
 800bb5e:	6818      	ldr	r0, [r3, #0]
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	2000004c 	.word	0x2000004c

0800bb68 <__libc_init_array>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	4d0d      	ldr	r5, [pc, #52]	; (800bba0 <__libc_init_array+0x38>)
 800bb6c:	4c0d      	ldr	r4, [pc, #52]	; (800bba4 <__libc_init_array+0x3c>)
 800bb6e:	1b64      	subs	r4, r4, r5
 800bb70:	10a4      	asrs	r4, r4, #2
 800bb72:	2600      	movs	r6, #0
 800bb74:	42a6      	cmp	r6, r4
 800bb76:	d109      	bne.n	800bb8c <__libc_init_array+0x24>
 800bb78:	4d0b      	ldr	r5, [pc, #44]	; (800bba8 <__libc_init_array+0x40>)
 800bb7a:	4c0c      	ldr	r4, [pc, #48]	; (800bbac <__libc_init_array+0x44>)
 800bb7c:	f004 fcaa 	bl	80104d4 <_init>
 800bb80:	1b64      	subs	r4, r4, r5
 800bb82:	10a4      	asrs	r4, r4, #2
 800bb84:	2600      	movs	r6, #0
 800bb86:	42a6      	cmp	r6, r4
 800bb88:	d105      	bne.n	800bb96 <__libc_init_array+0x2e>
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
 800bb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb90:	4798      	blx	r3
 800bb92:	3601      	adds	r6, #1
 800bb94:	e7ee      	b.n	800bb74 <__libc_init_array+0xc>
 800bb96:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9a:	4798      	blx	r3
 800bb9c:	3601      	adds	r6, #1
 800bb9e:	e7f2      	b.n	800bb86 <__libc_init_array+0x1e>
 800bba0:	08011eb8 	.word	0x08011eb8
 800bba4:	08011eb8 	.word	0x08011eb8
 800bba8:	08011eb8 	.word	0x08011eb8
 800bbac:	08011ebc 	.word	0x08011ebc

0800bbb0 <memcpy>:
 800bbb0:	440a      	add	r2, r1
 800bbb2:	4291      	cmp	r1, r2
 800bbb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bbb8:	d100      	bne.n	800bbbc <memcpy+0xc>
 800bbba:	4770      	bx	lr
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbc6:	4291      	cmp	r1, r2
 800bbc8:	d1f9      	bne.n	800bbbe <memcpy+0xe>
 800bbca:	bd10      	pop	{r4, pc}

0800bbcc <memset>:
 800bbcc:	4402      	add	r2, r0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d100      	bne.n	800bbd6 <memset+0xa>
 800bbd4:	4770      	bx	lr
 800bbd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbda:	e7f9      	b.n	800bbd0 <memset+0x4>

0800bbdc <__cvt>:
 800bbdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe0:	ec55 4b10 	vmov	r4, r5, d0
 800bbe4:	2d00      	cmp	r5, #0
 800bbe6:	460e      	mov	r6, r1
 800bbe8:	4619      	mov	r1, r3
 800bbea:	462b      	mov	r3, r5
 800bbec:	bfbb      	ittet	lt
 800bbee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bbf2:	461d      	movlt	r5, r3
 800bbf4:	2300      	movge	r3, #0
 800bbf6:	232d      	movlt	r3, #45	; 0x2d
 800bbf8:	700b      	strb	r3, [r1, #0]
 800bbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc00:	4691      	mov	r9, r2
 800bc02:	f023 0820 	bic.w	r8, r3, #32
 800bc06:	bfbc      	itt	lt
 800bc08:	4622      	movlt	r2, r4
 800bc0a:	4614      	movlt	r4, r2
 800bc0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc10:	d005      	beq.n	800bc1e <__cvt+0x42>
 800bc12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc16:	d100      	bne.n	800bc1a <__cvt+0x3e>
 800bc18:	3601      	adds	r6, #1
 800bc1a:	2102      	movs	r1, #2
 800bc1c:	e000      	b.n	800bc20 <__cvt+0x44>
 800bc1e:	2103      	movs	r1, #3
 800bc20:	ab03      	add	r3, sp, #12
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	ab02      	add	r3, sp, #8
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	ec45 4b10 	vmov	d0, r4, r5
 800bc2c:	4653      	mov	r3, sl
 800bc2e:	4632      	mov	r2, r6
 800bc30:	f001 fcd6 	bl	800d5e0 <_dtoa_r>
 800bc34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc38:	4607      	mov	r7, r0
 800bc3a:	d102      	bne.n	800bc42 <__cvt+0x66>
 800bc3c:	f019 0f01 	tst.w	r9, #1
 800bc40:	d022      	beq.n	800bc88 <__cvt+0xac>
 800bc42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc46:	eb07 0906 	add.w	r9, r7, r6
 800bc4a:	d110      	bne.n	800bc6e <__cvt+0x92>
 800bc4c:	783b      	ldrb	r3, [r7, #0]
 800bc4e:	2b30      	cmp	r3, #48	; 0x30
 800bc50:	d10a      	bne.n	800bc68 <__cvt+0x8c>
 800bc52:	2200      	movs	r2, #0
 800bc54:	2300      	movs	r3, #0
 800bc56:	4620      	mov	r0, r4
 800bc58:	4629      	mov	r1, r5
 800bc5a:	f7f4 ff55 	bl	8000b08 <__aeabi_dcmpeq>
 800bc5e:	b918      	cbnz	r0, 800bc68 <__cvt+0x8c>
 800bc60:	f1c6 0601 	rsb	r6, r6, #1
 800bc64:	f8ca 6000 	str.w	r6, [sl]
 800bc68:	f8da 3000 	ldr.w	r3, [sl]
 800bc6c:	4499      	add	r9, r3
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2300      	movs	r3, #0
 800bc72:	4620      	mov	r0, r4
 800bc74:	4629      	mov	r1, r5
 800bc76:	f7f4 ff47 	bl	8000b08 <__aeabi_dcmpeq>
 800bc7a:	b108      	cbz	r0, 800bc80 <__cvt+0xa4>
 800bc7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc80:	2230      	movs	r2, #48	; 0x30
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	454b      	cmp	r3, r9
 800bc86:	d307      	bcc.n	800bc98 <__cvt+0xbc>
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc8c:	1bdb      	subs	r3, r3, r7
 800bc8e:	4638      	mov	r0, r7
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	b004      	add	sp, #16
 800bc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc98:	1c59      	adds	r1, r3, #1
 800bc9a:	9103      	str	r1, [sp, #12]
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	e7f0      	b.n	800bc82 <__cvt+0xa6>

0800bca0 <__exponent>:
 800bca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bca2:	4603      	mov	r3, r0
 800bca4:	2900      	cmp	r1, #0
 800bca6:	bfb8      	it	lt
 800bca8:	4249      	neglt	r1, r1
 800bcaa:	f803 2b02 	strb.w	r2, [r3], #2
 800bcae:	bfb4      	ite	lt
 800bcb0:	222d      	movlt	r2, #45	; 0x2d
 800bcb2:	222b      	movge	r2, #43	; 0x2b
 800bcb4:	2909      	cmp	r1, #9
 800bcb6:	7042      	strb	r2, [r0, #1]
 800bcb8:	dd2a      	ble.n	800bd10 <__exponent+0x70>
 800bcba:	f10d 0407 	add.w	r4, sp, #7
 800bcbe:	46a4      	mov	ip, r4
 800bcc0:	270a      	movs	r7, #10
 800bcc2:	46a6      	mov	lr, r4
 800bcc4:	460a      	mov	r2, r1
 800bcc6:	fb91 f6f7 	sdiv	r6, r1, r7
 800bcca:	fb07 1516 	mls	r5, r7, r6, r1
 800bcce:	3530      	adds	r5, #48	; 0x30
 800bcd0:	2a63      	cmp	r2, #99	; 0x63
 800bcd2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bcd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bcda:	4631      	mov	r1, r6
 800bcdc:	dcf1      	bgt.n	800bcc2 <__exponent+0x22>
 800bcde:	3130      	adds	r1, #48	; 0x30
 800bce0:	f1ae 0502 	sub.w	r5, lr, #2
 800bce4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bce8:	1c44      	adds	r4, r0, #1
 800bcea:	4629      	mov	r1, r5
 800bcec:	4561      	cmp	r1, ip
 800bcee:	d30a      	bcc.n	800bd06 <__exponent+0x66>
 800bcf0:	f10d 0209 	add.w	r2, sp, #9
 800bcf4:	eba2 020e 	sub.w	r2, r2, lr
 800bcf8:	4565      	cmp	r5, ip
 800bcfa:	bf88      	it	hi
 800bcfc:	2200      	movhi	r2, #0
 800bcfe:	4413      	add	r3, r2
 800bd00:	1a18      	subs	r0, r3, r0
 800bd02:	b003      	add	sp, #12
 800bd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bd0e:	e7ed      	b.n	800bcec <__exponent+0x4c>
 800bd10:	2330      	movs	r3, #48	; 0x30
 800bd12:	3130      	adds	r1, #48	; 0x30
 800bd14:	7083      	strb	r3, [r0, #2]
 800bd16:	70c1      	strb	r1, [r0, #3]
 800bd18:	1d03      	adds	r3, r0, #4
 800bd1a:	e7f1      	b.n	800bd00 <__exponent+0x60>

0800bd1c <_printf_float>:
 800bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd20:	ed2d 8b02 	vpush	{d8}
 800bd24:	b08d      	sub	sp, #52	; 0x34
 800bd26:	460c      	mov	r4, r1
 800bd28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd2c:	4616      	mov	r6, r2
 800bd2e:	461f      	mov	r7, r3
 800bd30:	4605      	mov	r5, r0
 800bd32:	f002 ff69 	bl	800ec08 <_localeconv_r>
 800bd36:	f8d0 a000 	ldr.w	sl, [r0]
 800bd3a:	4650      	mov	r0, sl
 800bd3c:	f7f4 fa68 	bl	8000210 <strlen>
 800bd40:	2300      	movs	r3, #0
 800bd42:	930a      	str	r3, [sp, #40]	; 0x28
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	f8d8 3000 	ldr.w	r3, [r8]
 800bd4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bd50:	3307      	adds	r3, #7
 800bd52:	f023 0307 	bic.w	r3, r3, #7
 800bd56:	f103 0208 	add.w	r2, r3, #8
 800bd5a:	f8c8 2000 	str.w	r2, [r8]
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd6e:	9307      	str	r3, [sp, #28]
 800bd70:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd74:	ee08 0a10 	vmov	s16, r0
 800bd78:	4b9f      	ldr	r3, [pc, #636]	; (800bff8 <_printf_float+0x2dc>)
 800bd7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd82:	f7f4 fef3 	bl	8000b6c <__aeabi_dcmpun>
 800bd86:	bb88      	cbnz	r0, 800bdec <_printf_float+0xd0>
 800bd88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd8c:	4b9a      	ldr	r3, [pc, #616]	; (800bff8 <_printf_float+0x2dc>)
 800bd8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd92:	f7f4 fecd 	bl	8000b30 <__aeabi_dcmple>
 800bd96:	bb48      	cbnz	r0, 800bdec <_printf_float+0xd0>
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4640      	mov	r0, r8
 800bd9e:	4649      	mov	r1, r9
 800bda0:	f7f4 febc 	bl	8000b1c <__aeabi_dcmplt>
 800bda4:	b110      	cbz	r0, 800bdac <_printf_float+0x90>
 800bda6:	232d      	movs	r3, #45	; 0x2d
 800bda8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdac:	4b93      	ldr	r3, [pc, #588]	; (800bffc <_printf_float+0x2e0>)
 800bdae:	4894      	ldr	r0, [pc, #592]	; (800c000 <_printf_float+0x2e4>)
 800bdb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bdb4:	bf94      	ite	ls
 800bdb6:	4698      	movls	r8, r3
 800bdb8:	4680      	movhi	r8, r0
 800bdba:	2303      	movs	r3, #3
 800bdbc:	6123      	str	r3, [r4, #16]
 800bdbe:	9b05      	ldr	r3, [sp, #20]
 800bdc0:	f023 0204 	bic.w	r2, r3, #4
 800bdc4:	6022      	str	r2, [r4, #0]
 800bdc6:	f04f 0900 	mov.w	r9, #0
 800bdca:	9700      	str	r7, [sp, #0]
 800bdcc:	4633      	mov	r3, r6
 800bdce:	aa0b      	add	r2, sp, #44	; 0x2c
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 f9d8 	bl	800c188 <_printf_common>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f040 8090 	bne.w	800befe <_printf_float+0x1e2>
 800bdde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bde2:	b00d      	add	sp, #52	; 0x34
 800bde4:	ecbd 8b02 	vpop	{d8}
 800bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdec:	4642      	mov	r2, r8
 800bdee:	464b      	mov	r3, r9
 800bdf0:	4640      	mov	r0, r8
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	f7f4 feba 	bl	8000b6c <__aeabi_dcmpun>
 800bdf8:	b140      	cbz	r0, 800be0c <_printf_float+0xf0>
 800bdfa:	464b      	mov	r3, r9
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bfbc      	itt	lt
 800be00:	232d      	movlt	r3, #45	; 0x2d
 800be02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800be06:	487f      	ldr	r0, [pc, #508]	; (800c004 <_printf_float+0x2e8>)
 800be08:	4b7f      	ldr	r3, [pc, #508]	; (800c008 <_printf_float+0x2ec>)
 800be0a:	e7d1      	b.n	800bdb0 <_printf_float+0x94>
 800be0c:	6863      	ldr	r3, [r4, #4]
 800be0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800be12:	9206      	str	r2, [sp, #24]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	d13f      	bne.n	800be98 <_printf_float+0x17c>
 800be18:	2306      	movs	r3, #6
 800be1a:	6063      	str	r3, [r4, #4]
 800be1c:	9b05      	ldr	r3, [sp, #20]
 800be1e:	6861      	ldr	r1, [r4, #4]
 800be20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be24:	2300      	movs	r3, #0
 800be26:	9303      	str	r3, [sp, #12]
 800be28:	ab0a      	add	r3, sp, #40	; 0x28
 800be2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be2e:	ab09      	add	r3, sp, #36	; 0x24
 800be30:	ec49 8b10 	vmov	d0, r8, r9
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	6022      	str	r2, [r4, #0]
 800be38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be3c:	4628      	mov	r0, r5
 800be3e:	f7ff fecd 	bl	800bbdc <__cvt>
 800be42:	9b06      	ldr	r3, [sp, #24]
 800be44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be46:	2b47      	cmp	r3, #71	; 0x47
 800be48:	4680      	mov	r8, r0
 800be4a:	d108      	bne.n	800be5e <_printf_float+0x142>
 800be4c:	1cc8      	adds	r0, r1, #3
 800be4e:	db02      	blt.n	800be56 <_printf_float+0x13a>
 800be50:	6863      	ldr	r3, [r4, #4]
 800be52:	4299      	cmp	r1, r3
 800be54:	dd41      	ble.n	800beda <_printf_float+0x1be>
 800be56:	f1ab 0b02 	sub.w	fp, fp, #2
 800be5a:	fa5f fb8b 	uxtb.w	fp, fp
 800be5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be62:	d820      	bhi.n	800bea6 <_printf_float+0x18a>
 800be64:	3901      	subs	r1, #1
 800be66:	465a      	mov	r2, fp
 800be68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be6c:	9109      	str	r1, [sp, #36]	; 0x24
 800be6e:	f7ff ff17 	bl	800bca0 <__exponent>
 800be72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be74:	1813      	adds	r3, r2, r0
 800be76:	2a01      	cmp	r2, #1
 800be78:	4681      	mov	r9, r0
 800be7a:	6123      	str	r3, [r4, #16]
 800be7c:	dc02      	bgt.n	800be84 <_printf_float+0x168>
 800be7e:	6822      	ldr	r2, [r4, #0]
 800be80:	07d2      	lsls	r2, r2, #31
 800be82:	d501      	bpl.n	800be88 <_printf_float+0x16c>
 800be84:	3301      	adds	r3, #1
 800be86:	6123      	str	r3, [r4, #16]
 800be88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d09c      	beq.n	800bdca <_printf_float+0xae>
 800be90:	232d      	movs	r3, #45	; 0x2d
 800be92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be96:	e798      	b.n	800bdca <_printf_float+0xae>
 800be98:	9a06      	ldr	r2, [sp, #24]
 800be9a:	2a47      	cmp	r2, #71	; 0x47
 800be9c:	d1be      	bne.n	800be1c <_printf_float+0x100>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1bc      	bne.n	800be1c <_printf_float+0x100>
 800bea2:	2301      	movs	r3, #1
 800bea4:	e7b9      	b.n	800be1a <_printf_float+0xfe>
 800bea6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800beaa:	d118      	bne.n	800bede <_printf_float+0x1c2>
 800beac:	2900      	cmp	r1, #0
 800beae:	6863      	ldr	r3, [r4, #4]
 800beb0:	dd0b      	ble.n	800beca <_printf_float+0x1ae>
 800beb2:	6121      	str	r1, [r4, #16]
 800beb4:	b913      	cbnz	r3, 800bebc <_printf_float+0x1a0>
 800beb6:	6822      	ldr	r2, [r4, #0]
 800beb8:	07d0      	lsls	r0, r2, #31
 800beba:	d502      	bpl.n	800bec2 <_printf_float+0x1a6>
 800bebc:	3301      	adds	r3, #1
 800bebe:	440b      	add	r3, r1
 800bec0:	6123      	str	r3, [r4, #16]
 800bec2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bec4:	f04f 0900 	mov.w	r9, #0
 800bec8:	e7de      	b.n	800be88 <_printf_float+0x16c>
 800beca:	b913      	cbnz	r3, 800bed2 <_printf_float+0x1b6>
 800becc:	6822      	ldr	r2, [r4, #0]
 800bece:	07d2      	lsls	r2, r2, #31
 800bed0:	d501      	bpl.n	800bed6 <_printf_float+0x1ba>
 800bed2:	3302      	adds	r3, #2
 800bed4:	e7f4      	b.n	800bec0 <_printf_float+0x1a4>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e7f2      	b.n	800bec0 <_printf_float+0x1a4>
 800beda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee0:	4299      	cmp	r1, r3
 800bee2:	db05      	blt.n	800bef0 <_printf_float+0x1d4>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	6121      	str	r1, [r4, #16]
 800bee8:	07d8      	lsls	r0, r3, #31
 800beea:	d5ea      	bpl.n	800bec2 <_printf_float+0x1a6>
 800beec:	1c4b      	adds	r3, r1, #1
 800beee:	e7e7      	b.n	800bec0 <_printf_float+0x1a4>
 800bef0:	2900      	cmp	r1, #0
 800bef2:	bfd4      	ite	le
 800bef4:	f1c1 0202 	rsble	r2, r1, #2
 800bef8:	2201      	movgt	r2, #1
 800befa:	4413      	add	r3, r2
 800befc:	e7e0      	b.n	800bec0 <_printf_float+0x1a4>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	055a      	lsls	r2, r3, #21
 800bf02:	d407      	bmi.n	800bf14 <_printf_float+0x1f8>
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	4642      	mov	r2, r8
 800bf08:	4631      	mov	r1, r6
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	47b8      	blx	r7
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d12c      	bne.n	800bf6c <_printf_float+0x250>
 800bf12:	e764      	b.n	800bdde <_printf_float+0xc2>
 800bf14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf18:	f240 80e0 	bls.w	800c0dc <_printf_float+0x3c0>
 800bf1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf20:	2200      	movs	r2, #0
 800bf22:	2300      	movs	r3, #0
 800bf24:	f7f4 fdf0 	bl	8000b08 <__aeabi_dcmpeq>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d034      	beq.n	800bf96 <_printf_float+0x27a>
 800bf2c:	4a37      	ldr	r2, [pc, #220]	; (800c00c <_printf_float+0x2f0>)
 800bf2e:	2301      	movs	r3, #1
 800bf30:	4631      	mov	r1, r6
 800bf32:	4628      	mov	r0, r5
 800bf34:	47b8      	blx	r7
 800bf36:	3001      	adds	r0, #1
 800bf38:	f43f af51 	beq.w	800bdde <_printf_float+0xc2>
 800bf3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf40:	429a      	cmp	r2, r3
 800bf42:	db02      	blt.n	800bf4a <_printf_float+0x22e>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	07d8      	lsls	r0, r3, #31
 800bf48:	d510      	bpl.n	800bf6c <_printf_float+0x250>
 800bf4a:	ee18 3a10 	vmov	r3, s16
 800bf4e:	4652      	mov	r2, sl
 800bf50:	4631      	mov	r1, r6
 800bf52:	4628      	mov	r0, r5
 800bf54:	47b8      	blx	r7
 800bf56:	3001      	adds	r0, #1
 800bf58:	f43f af41 	beq.w	800bdde <_printf_float+0xc2>
 800bf5c:	f04f 0800 	mov.w	r8, #0
 800bf60:	f104 091a 	add.w	r9, r4, #26
 800bf64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf66:	3b01      	subs	r3, #1
 800bf68:	4543      	cmp	r3, r8
 800bf6a:	dc09      	bgt.n	800bf80 <_printf_float+0x264>
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	079b      	lsls	r3, r3, #30
 800bf70:	f100 8105 	bmi.w	800c17e <_printf_float+0x462>
 800bf74:	68e0      	ldr	r0, [r4, #12]
 800bf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf78:	4298      	cmp	r0, r3
 800bf7a:	bfb8      	it	lt
 800bf7c:	4618      	movlt	r0, r3
 800bf7e:	e730      	b.n	800bde2 <_printf_float+0xc6>
 800bf80:	2301      	movs	r3, #1
 800bf82:	464a      	mov	r2, r9
 800bf84:	4631      	mov	r1, r6
 800bf86:	4628      	mov	r0, r5
 800bf88:	47b8      	blx	r7
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	f43f af27 	beq.w	800bdde <_printf_float+0xc2>
 800bf90:	f108 0801 	add.w	r8, r8, #1
 800bf94:	e7e6      	b.n	800bf64 <_printf_float+0x248>
 800bf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	dc39      	bgt.n	800c010 <_printf_float+0x2f4>
 800bf9c:	4a1b      	ldr	r2, [pc, #108]	; (800c00c <_printf_float+0x2f0>)
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	4631      	mov	r1, r6
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	47b8      	blx	r7
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	f43f af19 	beq.w	800bdde <_printf_float+0xc2>
 800bfac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	d102      	bne.n	800bfba <_printf_float+0x29e>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	07d9      	lsls	r1, r3, #31
 800bfb8:	d5d8      	bpl.n	800bf6c <_printf_float+0x250>
 800bfba:	ee18 3a10 	vmov	r3, s16
 800bfbe:	4652      	mov	r2, sl
 800bfc0:	4631      	mov	r1, r6
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	47b8      	blx	r7
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	f43f af09 	beq.w	800bdde <_printf_float+0xc2>
 800bfcc:	f04f 0900 	mov.w	r9, #0
 800bfd0:	f104 0a1a 	add.w	sl, r4, #26
 800bfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd6:	425b      	negs	r3, r3
 800bfd8:	454b      	cmp	r3, r9
 800bfda:	dc01      	bgt.n	800bfe0 <_printf_float+0x2c4>
 800bfdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfde:	e792      	b.n	800bf06 <_printf_float+0x1ea>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	4652      	mov	r2, sl
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	47b8      	blx	r7
 800bfea:	3001      	adds	r0, #1
 800bfec:	f43f aef7 	beq.w	800bdde <_printf_float+0xc2>
 800bff0:	f109 0901 	add.w	r9, r9, #1
 800bff4:	e7ee      	b.n	800bfd4 <_printf_float+0x2b8>
 800bff6:	bf00      	nop
 800bff8:	7fefffff 	.word	0x7fefffff
 800bffc:	080119d0 	.word	0x080119d0
 800c000:	080119d4 	.word	0x080119d4
 800c004:	080119dc 	.word	0x080119dc
 800c008:	080119d8 	.word	0x080119d8
 800c00c:	080119e0 	.word	0x080119e0
 800c010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c012:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c014:	429a      	cmp	r2, r3
 800c016:	bfa8      	it	ge
 800c018:	461a      	movge	r2, r3
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	4691      	mov	r9, r2
 800c01e:	dc37      	bgt.n	800c090 <_printf_float+0x374>
 800c020:	f04f 0b00 	mov.w	fp, #0
 800c024:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c028:	f104 021a 	add.w	r2, r4, #26
 800c02c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c02e:	9305      	str	r3, [sp, #20]
 800c030:	eba3 0309 	sub.w	r3, r3, r9
 800c034:	455b      	cmp	r3, fp
 800c036:	dc33      	bgt.n	800c0a0 <_printf_float+0x384>
 800c038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c03c:	429a      	cmp	r2, r3
 800c03e:	db3b      	blt.n	800c0b8 <_printf_float+0x39c>
 800c040:	6823      	ldr	r3, [r4, #0]
 800c042:	07da      	lsls	r2, r3, #31
 800c044:	d438      	bmi.n	800c0b8 <_printf_float+0x39c>
 800c046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c048:	9a05      	ldr	r2, [sp, #20]
 800c04a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c04c:	1a9a      	subs	r2, r3, r2
 800c04e:	eba3 0901 	sub.w	r9, r3, r1
 800c052:	4591      	cmp	r9, r2
 800c054:	bfa8      	it	ge
 800c056:	4691      	movge	r9, r2
 800c058:	f1b9 0f00 	cmp.w	r9, #0
 800c05c:	dc35      	bgt.n	800c0ca <_printf_float+0x3ae>
 800c05e:	f04f 0800 	mov.w	r8, #0
 800c062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c066:	f104 0a1a 	add.w	sl, r4, #26
 800c06a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c06e:	1a9b      	subs	r3, r3, r2
 800c070:	eba3 0309 	sub.w	r3, r3, r9
 800c074:	4543      	cmp	r3, r8
 800c076:	f77f af79 	ble.w	800bf6c <_printf_float+0x250>
 800c07a:	2301      	movs	r3, #1
 800c07c:	4652      	mov	r2, sl
 800c07e:	4631      	mov	r1, r6
 800c080:	4628      	mov	r0, r5
 800c082:	47b8      	blx	r7
 800c084:	3001      	adds	r0, #1
 800c086:	f43f aeaa 	beq.w	800bdde <_printf_float+0xc2>
 800c08a:	f108 0801 	add.w	r8, r8, #1
 800c08e:	e7ec      	b.n	800c06a <_printf_float+0x34e>
 800c090:	4613      	mov	r3, r2
 800c092:	4631      	mov	r1, r6
 800c094:	4642      	mov	r2, r8
 800c096:	4628      	mov	r0, r5
 800c098:	47b8      	blx	r7
 800c09a:	3001      	adds	r0, #1
 800c09c:	d1c0      	bne.n	800c020 <_printf_float+0x304>
 800c09e:	e69e      	b.n	800bdde <_printf_float+0xc2>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	9205      	str	r2, [sp, #20]
 800c0a8:	47b8      	blx	r7
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	f43f ae97 	beq.w	800bdde <_printf_float+0xc2>
 800c0b0:	9a05      	ldr	r2, [sp, #20]
 800c0b2:	f10b 0b01 	add.w	fp, fp, #1
 800c0b6:	e7b9      	b.n	800c02c <_printf_float+0x310>
 800c0b8:	ee18 3a10 	vmov	r3, s16
 800c0bc:	4652      	mov	r2, sl
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	47b8      	blx	r7
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	d1be      	bne.n	800c046 <_printf_float+0x32a>
 800c0c8:	e689      	b.n	800bdde <_printf_float+0xc2>
 800c0ca:	9a05      	ldr	r2, [sp, #20]
 800c0cc:	464b      	mov	r3, r9
 800c0ce:	4442      	add	r2, r8
 800c0d0:	4631      	mov	r1, r6
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	47b8      	blx	r7
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	d1c1      	bne.n	800c05e <_printf_float+0x342>
 800c0da:	e680      	b.n	800bdde <_printf_float+0xc2>
 800c0dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0de:	2a01      	cmp	r2, #1
 800c0e0:	dc01      	bgt.n	800c0e6 <_printf_float+0x3ca>
 800c0e2:	07db      	lsls	r3, r3, #31
 800c0e4:	d538      	bpl.n	800c158 <_printf_float+0x43c>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4642      	mov	r2, r8
 800c0ea:	4631      	mov	r1, r6
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	47b8      	blx	r7
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	f43f ae74 	beq.w	800bdde <_printf_float+0xc2>
 800c0f6:	ee18 3a10 	vmov	r3, s16
 800c0fa:	4652      	mov	r2, sl
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4628      	mov	r0, r5
 800c100:	47b8      	blx	r7
 800c102:	3001      	adds	r0, #1
 800c104:	f43f ae6b 	beq.w	800bdde <_printf_float+0xc2>
 800c108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c10c:	2200      	movs	r2, #0
 800c10e:	2300      	movs	r3, #0
 800c110:	f7f4 fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 800c114:	b9d8      	cbnz	r0, 800c14e <_printf_float+0x432>
 800c116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c118:	f108 0201 	add.w	r2, r8, #1
 800c11c:	3b01      	subs	r3, #1
 800c11e:	4631      	mov	r1, r6
 800c120:	4628      	mov	r0, r5
 800c122:	47b8      	blx	r7
 800c124:	3001      	adds	r0, #1
 800c126:	d10e      	bne.n	800c146 <_printf_float+0x42a>
 800c128:	e659      	b.n	800bdde <_printf_float+0xc2>
 800c12a:	2301      	movs	r3, #1
 800c12c:	4652      	mov	r2, sl
 800c12e:	4631      	mov	r1, r6
 800c130:	4628      	mov	r0, r5
 800c132:	47b8      	blx	r7
 800c134:	3001      	adds	r0, #1
 800c136:	f43f ae52 	beq.w	800bdde <_printf_float+0xc2>
 800c13a:	f108 0801 	add.w	r8, r8, #1
 800c13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c140:	3b01      	subs	r3, #1
 800c142:	4543      	cmp	r3, r8
 800c144:	dcf1      	bgt.n	800c12a <_printf_float+0x40e>
 800c146:	464b      	mov	r3, r9
 800c148:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c14c:	e6dc      	b.n	800bf08 <_printf_float+0x1ec>
 800c14e:	f04f 0800 	mov.w	r8, #0
 800c152:	f104 0a1a 	add.w	sl, r4, #26
 800c156:	e7f2      	b.n	800c13e <_printf_float+0x422>
 800c158:	2301      	movs	r3, #1
 800c15a:	4642      	mov	r2, r8
 800c15c:	e7df      	b.n	800c11e <_printf_float+0x402>
 800c15e:	2301      	movs	r3, #1
 800c160:	464a      	mov	r2, r9
 800c162:	4631      	mov	r1, r6
 800c164:	4628      	mov	r0, r5
 800c166:	47b8      	blx	r7
 800c168:	3001      	adds	r0, #1
 800c16a:	f43f ae38 	beq.w	800bdde <_printf_float+0xc2>
 800c16e:	f108 0801 	add.w	r8, r8, #1
 800c172:	68e3      	ldr	r3, [r4, #12]
 800c174:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c176:	1a5b      	subs	r3, r3, r1
 800c178:	4543      	cmp	r3, r8
 800c17a:	dcf0      	bgt.n	800c15e <_printf_float+0x442>
 800c17c:	e6fa      	b.n	800bf74 <_printf_float+0x258>
 800c17e:	f04f 0800 	mov.w	r8, #0
 800c182:	f104 0919 	add.w	r9, r4, #25
 800c186:	e7f4      	b.n	800c172 <_printf_float+0x456>

0800c188 <_printf_common>:
 800c188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c18c:	4616      	mov	r6, r2
 800c18e:	4699      	mov	r9, r3
 800c190:	688a      	ldr	r2, [r1, #8]
 800c192:	690b      	ldr	r3, [r1, #16]
 800c194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c198:	4293      	cmp	r3, r2
 800c19a:	bfb8      	it	lt
 800c19c:	4613      	movlt	r3, r2
 800c19e:	6033      	str	r3, [r6, #0]
 800c1a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	b10a      	cbz	r2, 800c1ae <_printf_common+0x26>
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	6033      	str	r3, [r6, #0]
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	0699      	lsls	r1, r3, #26
 800c1b2:	bf42      	ittt	mi
 800c1b4:	6833      	ldrmi	r3, [r6, #0]
 800c1b6:	3302      	addmi	r3, #2
 800c1b8:	6033      	strmi	r3, [r6, #0]
 800c1ba:	6825      	ldr	r5, [r4, #0]
 800c1bc:	f015 0506 	ands.w	r5, r5, #6
 800c1c0:	d106      	bne.n	800c1d0 <_printf_common+0x48>
 800c1c2:	f104 0a19 	add.w	sl, r4, #25
 800c1c6:	68e3      	ldr	r3, [r4, #12]
 800c1c8:	6832      	ldr	r2, [r6, #0]
 800c1ca:	1a9b      	subs	r3, r3, r2
 800c1cc:	42ab      	cmp	r3, r5
 800c1ce:	dc26      	bgt.n	800c21e <_printf_common+0x96>
 800c1d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1d4:	1e13      	subs	r3, r2, #0
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	bf18      	it	ne
 800c1da:	2301      	movne	r3, #1
 800c1dc:	0692      	lsls	r2, r2, #26
 800c1de:	d42b      	bmi.n	800c238 <_printf_common+0xb0>
 800c1e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1e4:	4649      	mov	r1, r9
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	47c0      	blx	r8
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	d01e      	beq.n	800c22c <_printf_common+0xa4>
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	68e5      	ldr	r5, [r4, #12]
 800c1f2:	6832      	ldr	r2, [r6, #0]
 800c1f4:	f003 0306 	and.w	r3, r3, #6
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	bf08      	it	eq
 800c1fc:	1aad      	subeq	r5, r5, r2
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	6922      	ldr	r2, [r4, #16]
 800c202:	bf0c      	ite	eq
 800c204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c208:	2500      	movne	r5, #0
 800c20a:	4293      	cmp	r3, r2
 800c20c:	bfc4      	itt	gt
 800c20e:	1a9b      	subgt	r3, r3, r2
 800c210:	18ed      	addgt	r5, r5, r3
 800c212:	2600      	movs	r6, #0
 800c214:	341a      	adds	r4, #26
 800c216:	42b5      	cmp	r5, r6
 800c218:	d11a      	bne.n	800c250 <_printf_common+0xc8>
 800c21a:	2000      	movs	r0, #0
 800c21c:	e008      	b.n	800c230 <_printf_common+0xa8>
 800c21e:	2301      	movs	r3, #1
 800c220:	4652      	mov	r2, sl
 800c222:	4649      	mov	r1, r9
 800c224:	4638      	mov	r0, r7
 800c226:	47c0      	blx	r8
 800c228:	3001      	adds	r0, #1
 800c22a:	d103      	bne.n	800c234 <_printf_common+0xac>
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c234:	3501      	adds	r5, #1
 800c236:	e7c6      	b.n	800c1c6 <_printf_common+0x3e>
 800c238:	18e1      	adds	r1, r4, r3
 800c23a:	1c5a      	adds	r2, r3, #1
 800c23c:	2030      	movs	r0, #48	; 0x30
 800c23e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c242:	4422      	add	r2, r4
 800c244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c24c:	3302      	adds	r3, #2
 800c24e:	e7c7      	b.n	800c1e0 <_printf_common+0x58>
 800c250:	2301      	movs	r3, #1
 800c252:	4622      	mov	r2, r4
 800c254:	4649      	mov	r1, r9
 800c256:	4638      	mov	r0, r7
 800c258:	47c0      	blx	r8
 800c25a:	3001      	adds	r0, #1
 800c25c:	d0e6      	beq.n	800c22c <_printf_common+0xa4>
 800c25e:	3601      	adds	r6, #1
 800c260:	e7d9      	b.n	800c216 <_printf_common+0x8e>
	...

0800c264 <_printf_i>:
 800c264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	7e0f      	ldrb	r7, [r1, #24]
 800c26a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c26c:	2f78      	cmp	r7, #120	; 0x78
 800c26e:	4691      	mov	r9, r2
 800c270:	4680      	mov	r8, r0
 800c272:	460c      	mov	r4, r1
 800c274:	469a      	mov	sl, r3
 800c276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c27a:	d807      	bhi.n	800c28c <_printf_i+0x28>
 800c27c:	2f62      	cmp	r7, #98	; 0x62
 800c27e:	d80a      	bhi.n	800c296 <_printf_i+0x32>
 800c280:	2f00      	cmp	r7, #0
 800c282:	f000 80d8 	beq.w	800c436 <_printf_i+0x1d2>
 800c286:	2f58      	cmp	r7, #88	; 0x58
 800c288:	f000 80a3 	beq.w	800c3d2 <_printf_i+0x16e>
 800c28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c294:	e03a      	b.n	800c30c <_printf_i+0xa8>
 800c296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c29a:	2b15      	cmp	r3, #21
 800c29c:	d8f6      	bhi.n	800c28c <_printf_i+0x28>
 800c29e:	a101      	add	r1, pc, #4	; (adr r1, 800c2a4 <_printf_i+0x40>)
 800c2a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2a4:	0800c2fd 	.word	0x0800c2fd
 800c2a8:	0800c311 	.word	0x0800c311
 800c2ac:	0800c28d 	.word	0x0800c28d
 800c2b0:	0800c28d 	.word	0x0800c28d
 800c2b4:	0800c28d 	.word	0x0800c28d
 800c2b8:	0800c28d 	.word	0x0800c28d
 800c2bc:	0800c311 	.word	0x0800c311
 800c2c0:	0800c28d 	.word	0x0800c28d
 800c2c4:	0800c28d 	.word	0x0800c28d
 800c2c8:	0800c28d 	.word	0x0800c28d
 800c2cc:	0800c28d 	.word	0x0800c28d
 800c2d0:	0800c41d 	.word	0x0800c41d
 800c2d4:	0800c341 	.word	0x0800c341
 800c2d8:	0800c3ff 	.word	0x0800c3ff
 800c2dc:	0800c28d 	.word	0x0800c28d
 800c2e0:	0800c28d 	.word	0x0800c28d
 800c2e4:	0800c43f 	.word	0x0800c43f
 800c2e8:	0800c28d 	.word	0x0800c28d
 800c2ec:	0800c341 	.word	0x0800c341
 800c2f0:	0800c28d 	.word	0x0800c28d
 800c2f4:	0800c28d 	.word	0x0800c28d
 800c2f8:	0800c407 	.word	0x0800c407
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	1d1a      	adds	r2, r3, #4
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	602a      	str	r2, [r5, #0]
 800c304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c30c:	2301      	movs	r3, #1
 800c30e:	e0a3      	b.n	800c458 <_printf_i+0x1f4>
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	6829      	ldr	r1, [r5, #0]
 800c314:	0606      	lsls	r6, r0, #24
 800c316:	f101 0304 	add.w	r3, r1, #4
 800c31a:	d50a      	bpl.n	800c332 <_printf_i+0xce>
 800c31c:	680e      	ldr	r6, [r1, #0]
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	2e00      	cmp	r6, #0
 800c322:	da03      	bge.n	800c32c <_printf_i+0xc8>
 800c324:	232d      	movs	r3, #45	; 0x2d
 800c326:	4276      	negs	r6, r6
 800c328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c32c:	485e      	ldr	r0, [pc, #376]	; (800c4a8 <_printf_i+0x244>)
 800c32e:	230a      	movs	r3, #10
 800c330:	e019      	b.n	800c366 <_printf_i+0x102>
 800c332:	680e      	ldr	r6, [r1, #0]
 800c334:	602b      	str	r3, [r5, #0]
 800c336:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c33a:	bf18      	it	ne
 800c33c:	b236      	sxthne	r6, r6
 800c33e:	e7ef      	b.n	800c320 <_printf_i+0xbc>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	6820      	ldr	r0, [r4, #0]
 800c344:	1d19      	adds	r1, r3, #4
 800c346:	6029      	str	r1, [r5, #0]
 800c348:	0601      	lsls	r1, r0, #24
 800c34a:	d501      	bpl.n	800c350 <_printf_i+0xec>
 800c34c:	681e      	ldr	r6, [r3, #0]
 800c34e:	e002      	b.n	800c356 <_printf_i+0xf2>
 800c350:	0646      	lsls	r6, r0, #25
 800c352:	d5fb      	bpl.n	800c34c <_printf_i+0xe8>
 800c354:	881e      	ldrh	r6, [r3, #0]
 800c356:	4854      	ldr	r0, [pc, #336]	; (800c4a8 <_printf_i+0x244>)
 800c358:	2f6f      	cmp	r7, #111	; 0x6f
 800c35a:	bf0c      	ite	eq
 800c35c:	2308      	moveq	r3, #8
 800c35e:	230a      	movne	r3, #10
 800c360:	2100      	movs	r1, #0
 800c362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c366:	6865      	ldr	r5, [r4, #4]
 800c368:	60a5      	str	r5, [r4, #8]
 800c36a:	2d00      	cmp	r5, #0
 800c36c:	bfa2      	ittt	ge
 800c36e:	6821      	ldrge	r1, [r4, #0]
 800c370:	f021 0104 	bicge.w	r1, r1, #4
 800c374:	6021      	strge	r1, [r4, #0]
 800c376:	b90e      	cbnz	r6, 800c37c <_printf_i+0x118>
 800c378:	2d00      	cmp	r5, #0
 800c37a:	d04d      	beq.n	800c418 <_printf_i+0x1b4>
 800c37c:	4615      	mov	r5, r2
 800c37e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c382:	fb03 6711 	mls	r7, r3, r1, r6
 800c386:	5dc7      	ldrb	r7, [r0, r7]
 800c388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c38c:	4637      	mov	r7, r6
 800c38e:	42bb      	cmp	r3, r7
 800c390:	460e      	mov	r6, r1
 800c392:	d9f4      	bls.n	800c37e <_printf_i+0x11a>
 800c394:	2b08      	cmp	r3, #8
 800c396:	d10b      	bne.n	800c3b0 <_printf_i+0x14c>
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	07de      	lsls	r6, r3, #31
 800c39c:	d508      	bpl.n	800c3b0 <_printf_i+0x14c>
 800c39e:	6923      	ldr	r3, [r4, #16]
 800c3a0:	6861      	ldr	r1, [r4, #4]
 800c3a2:	4299      	cmp	r1, r3
 800c3a4:	bfde      	ittt	le
 800c3a6:	2330      	movle	r3, #48	; 0x30
 800c3a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c3b0:	1b52      	subs	r2, r2, r5
 800c3b2:	6122      	str	r2, [r4, #16]
 800c3b4:	f8cd a000 	str.w	sl, [sp]
 800c3b8:	464b      	mov	r3, r9
 800c3ba:	aa03      	add	r2, sp, #12
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4640      	mov	r0, r8
 800c3c0:	f7ff fee2 	bl	800c188 <_printf_common>
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d14c      	bne.n	800c462 <_printf_i+0x1fe>
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3cc:	b004      	add	sp, #16
 800c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d2:	4835      	ldr	r0, [pc, #212]	; (800c4a8 <_printf_i+0x244>)
 800c3d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c3d8:	6829      	ldr	r1, [r5, #0]
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3e0:	6029      	str	r1, [r5, #0]
 800c3e2:	061d      	lsls	r5, r3, #24
 800c3e4:	d514      	bpl.n	800c410 <_printf_i+0x1ac>
 800c3e6:	07df      	lsls	r7, r3, #31
 800c3e8:	bf44      	itt	mi
 800c3ea:	f043 0320 	orrmi.w	r3, r3, #32
 800c3ee:	6023      	strmi	r3, [r4, #0]
 800c3f0:	b91e      	cbnz	r6, 800c3fa <_printf_i+0x196>
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	f023 0320 	bic.w	r3, r3, #32
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	2310      	movs	r3, #16
 800c3fc:	e7b0      	b.n	800c360 <_printf_i+0xfc>
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	f043 0320 	orr.w	r3, r3, #32
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	2378      	movs	r3, #120	; 0x78
 800c408:	4828      	ldr	r0, [pc, #160]	; (800c4ac <_printf_i+0x248>)
 800c40a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c40e:	e7e3      	b.n	800c3d8 <_printf_i+0x174>
 800c410:	0659      	lsls	r1, r3, #25
 800c412:	bf48      	it	mi
 800c414:	b2b6      	uxthmi	r6, r6
 800c416:	e7e6      	b.n	800c3e6 <_printf_i+0x182>
 800c418:	4615      	mov	r5, r2
 800c41a:	e7bb      	b.n	800c394 <_printf_i+0x130>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	6826      	ldr	r6, [r4, #0]
 800c420:	6961      	ldr	r1, [r4, #20]
 800c422:	1d18      	adds	r0, r3, #4
 800c424:	6028      	str	r0, [r5, #0]
 800c426:	0635      	lsls	r5, r6, #24
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	d501      	bpl.n	800c430 <_printf_i+0x1cc>
 800c42c:	6019      	str	r1, [r3, #0]
 800c42e:	e002      	b.n	800c436 <_printf_i+0x1d2>
 800c430:	0670      	lsls	r0, r6, #25
 800c432:	d5fb      	bpl.n	800c42c <_printf_i+0x1c8>
 800c434:	8019      	strh	r1, [r3, #0]
 800c436:	2300      	movs	r3, #0
 800c438:	6123      	str	r3, [r4, #16]
 800c43a:	4615      	mov	r5, r2
 800c43c:	e7ba      	b.n	800c3b4 <_printf_i+0x150>
 800c43e:	682b      	ldr	r3, [r5, #0]
 800c440:	1d1a      	adds	r2, r3, #4
 800c442:	602a      	str	r2, [r5, #0]
 800c444:	681d      	ldr	r5, [r3, #0]
 800c446:	6862      	ldr	r2, [r4, #4]
 800c448:	2100      	movs	r1, #0
 800c44a:	4628      	mov	r0, r5
 800c44c:	f7f3 fee8 	bl	8000220 <memchr>
 800c450:	b108      	cbz	r0, 800c456 <_printf_i+0x1f2>
 800c452:	1b40      	subs	r0, r0, r5
 800c454:	6060      	str	r0, [r4, #4]
 800c456:	6863      	ldr	r3, [r4, #4]
 800c458:	6123      	str	r3, [r4, #16]
 800c45a:	2300      	movs	r3, #0
 800c45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c460:	e7a8      	b.n	800c3b4 <_printf_i+0x150>
 800c462:	6923      	ldr	r3, [r4, #16]
 800c464:	462a      	mov	r2, r5
 800c466:	4649      	mov	r1, r9
 800c468:	4640      	mov	r0, r8
 800c46a:	47d0      	blx	sl
 800c46c:	3001      	adds	r0, #1
 800c46e:	d0ab      	beq.n	800c3c8 <_printf_i+0x164>
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	079b      	lsls	r3, r3, #30
 800c474:	d413      	bmi.n	800c49e <_printf_i+0x23a>
 800c476:	68e0      	ldr	r0, [r4, #12]
 800c478:	9b03      	ldr	r3, [sp, #12]
 800c47a:	4298      	cmp	r0, r3
 800c47c:	bfb8      	it	lt
 800c47e:	4618      	movlt	r0, r3
 800c480:	e7a4      	b.n	800c3cc <_printf_i+0x168>
 800c482:	2301      	movs	r3, #1
 800c484:	4632      	mov	r2, r6
 800c486:	4649      	mov	r1, r9
 800c488:	4640      	mov	r0, r8
 800c48a:	47d0      	blx	sl
 800c48c:	3001      	adds	r0, #1
 800c48e:	d09b      	beq.n	800c3c8 <_printf_i+0x164>
 800c490:	3501      	adds	r5, #1
 800c492:	68e3      	ldr	r3, [r4, #12]
 800c494:	9903      	ldr	r1, [sp, #12]
 800c496:	1a5b      	subs	r3, r3, r1
 800c498:	42ab      	cmp	r3, r5
 800c49a:	dcf2      	bgt.n	800c482 <_printf_i+0x21e>
 800c49c:	e7eb      	b.n	800c476 <_printf_i+0x212>
 800c49e:	2500      	movs	r5, #0
 800c4a0:	f104 0619 	add.w	r6, r4, #25
 800c4a4:	e7f5      	b.n	800c492 <_printf_i+0x22e>
 800c4a6:	bf00      	nop
 800c4a8:	080119e2 	.word	0x080119e2
 800c4ac:	080119f3 	.word	0x080119f3

0800c4b0 <iprintf>:
 800c4b0:	b40f      	push	{r0, r1, r2, r3}
 800c4b2:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <iprintf+0x2c>)
 800c4b4:	b513      	push	{r0, r1, r4, lr}
 800c4b6:	681c      	ldr	r4, [r3, #0]
 800c4b8:	b124      	cbz	r4, 800c4c4 <iprintf+0x14>
 800c4ba:	69a3      	ldr	r3, [r4, #24]
 800c4bc:	b913      	cbnz	r3, 800c4c4 <iprintf+0x14>
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f001 ff96 	bl	800e3f0 <__sinit>
 800c4c4:	ab05      	add	r3, sp, #20
 800c4c6:	9a04      	ldr	r2, [sp, #16]
 800c4c8:	68a1      	ldr	r1, [r4, #8]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f003 fa03 	bl	800f8d8 <_vfiprintf_r>
 800c4d2:	b002      	add	sp, #8
 800c4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d8:	b004      	add	sp, #16
 800c4da:	4770      	bx	lr
 800c4dc:	2000004c 	.word	0x2000004c

0800c4e0 <_puts_r>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	460e      	mov	r6, r1
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	b118      	cbz	r0, 800c4f0 <_puts_r+0x10>
 800c4e8:	6983      	ldr	r3, [r0, #24]
 800c4ea:	b90b      	cbnz	r3, 800c4f0 <_puts_r+0x10>
 800c4ec:	f001 ff80 	bl	800e3f0 <__sinit>
 800c4f0:	69ab      	ldr	r3, [r5, #24]
 800c4f2:	68ac      	ldr	r4, [r5, #8]
 800c4f4:	b913      	cbnz	r3, 800c4fc <_puts_r+0x1c>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f001 ff7a 	bl	800e3f0 <__sinit>
 800c4fc:	4b2c      	ldr	r3, [pc, #176]	; (800c5b0 <_puts_r+0xd0>)
 800c4fe:	429c      	cmp	r4, r3
 800c500:	d120      	bne.n	800c544 <_puts_r+0x64>
 800c502:	686c      	ldr	r4, [r5, #4]
 800c504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c506:	07db      	lsls	r3, r3, #31
 800c508:	d405      	bmi.n	800c516 <_puts_r+0x36>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	0598      	lsls	r0, r3, #22
 800c50e:	d402      	bmi.n	800c516 <_puts_r+0x36>
 800c510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c512:	f002 fb7e 	bl	800ec12 <__retarget_lock_acquire_recursive>
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	0719      	lsls	r1, r3, #28
 800c51a:	d51d      	bpl.n	800c558 <_puts_r+0x78>
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	b1db      	cbz	r3, 800c558 <_puts_r+0x78>
 800c520:	3e01      	subs	r6, #1
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c528:	3b01      	subs	r3, #1
 800c52a:	60a3      	str	r3, [r4, #8]
 800c52c:	bb39      	cbnz	r1, 800c57e <_puts_r+0x9e>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	da38      	bge.n	800c5a4 <_puts_r+0xc4>
 800c532:	4622      	mov	r2, r4
 800c534:	210a      	movs	r1, #10
 800c536:	4628      	mov	r0, r5
 800c538:	f000 ff04 	bl	800d344 <__swbuf_r>
 800c53c:	3001      	adds	r0, #1
 800c53e:	d011      	beq.n	800c564 <_puts_r+0x84>
 800c540:	250a      	movs	r5, #10
 800c542:	e011      	b.n	800c568 <_puts_r+0x88>
 800c544:	4b1b      	ldr	r3, [pc, #108]	; (800c5b4 <_puts_r+0xd4>)
 800c546:	429c      	cmp	r4, r3
 800c548:	d101      	bne.n	800c54e <_puts_r+0x6e>
 800c54a:	68ac      	ldr	r4, [r5, #8]
 800c54c:	e7da      	b.n	800c504 <_puts_r+0x24>
 800c54e:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <_puts_r+0xd8>)
 800c550:	429c      	cmp	r4, r3
 800c552:	bf08      	it	eq
 800c554:	68ec      	ldreq	r4, [r5, #12]
 800c556:	e7d5      	b.n	800c504 <_puts_r+0x24>
 800c558:	4621      	mov	r1, r4
 800c55a:	4628      	mov	r0, r5
 800c55c:	f000 ff44 	bl	800d3e8 <__swsetup_r>
 800c560:	2800      	cmp	r0, #0
 800c562:	d0dd      	beq.n	800c520 <_puts_r+0x40>
 800c564:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c568:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c56a:	07da      	lsls	r2, r3, #31
 800c56c:	d405      	bmi.n	800c57a <_puts_r+0x9a>
 800c56e:	89a3      	ldrh	r3, [r4, #12]
 800c570:	059b      	lsls	r3, r3, #22
 800c572:	d402      	bmi.n	800c57a <_puts_r+0x9a>
 800c574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c576:	f002 fb4d 	bl	800ec14 <__retarget_lock_release_recursive>
 800c57a:	4628      	mov	r0, r5
 800c57c:	bd70      	pop	{r4, r5, r6, pc}
 800c57e:	2b00      	cmp	r3, #0
 800c580:	da04      	bge.n	800c58c <_puts_r+0xac>
 800c582:	69a2      	ldr	r2, [r4, #24]
 800c584:	429a      	cmp	r2, r3
 800c586:	dc06      	bgt.n	800c596 <_puts_r+0xb6>
 800c588:	290a      	cmp	r1, #10
 800c58a:	d004      	beq.n	800c596 <_puts_r+0xb6>
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	6022      	str	r2, [r4, #0]
 800c592:	7019      	strb	r1, [r3, #0]
 800c594:	e7c5      	b.n	800c522 <_puts_r+0x42>
 800c596:	4622      	mov	r2, r4
 800c598:	4628      	mov	r0, r5
 800c59a:	f000 fed3 	bl	800d344 <__swbuf_r>
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d1bf      	bne.n	800c522 <_puts_r+0x42>
 800c5a2:	e7df      	b.n	800c564 <_puts_r+0x84>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	250a      	movs	r5, #10
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	6022      	str	r2, [r4, #0]
 800c5ac:	701d      	strb	r5, [r3, #0]
 800c5ae:	e7db      	b.n	800c568 <_puts_r+0x88>
 800c5b0:	08011c0c 	.word	0x08011c0c
 800c5b4:	08011c2c 	.word	0x08011c2c
 800c5b8:	08011bec 	.word	0x08011bec

0800c5bc <puts>:
 800c5bc:	4b02      	ldr	r3, [pc, #8]	; (800c5c8 <puts+0xc>)
 800c5be:	4601      	mov	r1, r0
 800c5c0:	6818      	ldr	r0, [r3, #0]
 800c5c2:	f7ff bf8d 	b.w	800c4e0 <_puts_r>
 800c5c6:	bf00      	nop
 800c5c8:	2000004c 	.word	0x2000004c

0800c5cc <sulp>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	460d      	mov	r5, r1
 800c5d2:	ec45 4b10 	vmov	d0, r4, r5
 800c5d6:	4616      	mov	r6, r2
 800c5d8:	f002 ff0e 	bl	800f3f8 <__ulp>
 800c5dc:	ec51 0b10 	vmov	r0, r1, d0
 800c5e0:	b17e      	cbz	r6, 800c602 <sulp+0x36>
 800c5e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c5e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dd09      	ble.n	800c602 <sulp+0x36>
 800c5ee:	051b      	lsls	r3, r3, #20
 800c5f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c5f4:	2400      	movs	r4, #0
 800c5f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	f7f4 f81b 	bl	8000638 <__aeabi_dmul>
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	0000      	movs	r0, r0
	...

0800c608 <_strtod_l>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	ed2d 8b02 	vpush	{d8}
 800c610:	b09d      	sub	sp, #116	; 0x74
 800c612:	461f      	mov	r7, r3
 800c614:	2300      	movs	r3, #0
 800c616:	9318      	str	r3, [sp, #96]	; 0x60
 800c618:	4ba2      	ldr	r3, [pc, #648]	; (800c8a4 <_strtod_l+0x29c>)
 800c61a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	9305      	str	r3, [sp, #20]
 800c620:	4604      	mov	r4, r0
 800c622:	4618      	mov	r0, r3
 800c624:	4688      	mov	r8, r1
 800c626:	f7f3 fdf3 	bl	8000210 <strlen>
 800c62a:	f04f 0a00 	mov.w	sl, #0
 800c62e:	4605      	mov	r5, r0
 800c630:	f04f 0b00 	mov.w	fp, #0
 800c634:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c63a:	781a      	ldrb	r2, [r3, #0]
 800c63c:	2a2b      	cmp	r2, #43	; 0x2b
 800c63e:	d04e      	beq.n	800c6de <_strtod_l+0xd6>
 800c640:	d83b      	bhi.n	800c6ba <_strtod_l+0xb2>
 800c642:	2a0d      	cmp	r2, #13
 800c644:	d834      	bhi.n	800c6b0 <_strtod_l+0xa8>
 800c646:	2a08      	cmp	r2, #8
 800c648:	d834      	bhi.n	800c6b4 <_strtod_l+0xac>
 800c64a:	2a00      	cmp	r2, #0
 800c64c:	d03e      	beq.n	800c6cc <_strtod_l+0xc4>
 800c64e:	2300      	movs	r3, #0
 800c650:	930a      	str	r3, [sp, #40]	; 0x28
 800c652:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c654:	7833      	ldrb	r3, [r6, #0]
 800c656:	2b30      	cmp	r3, #48	; 0x30
 800c658:	f040 80b0 	bne.w	800c7bc <_strtod_l+0x1b4>
 800c65c:	7873      	ldrb	r3, [r6, #1]
 800c65e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c662:	2b58      	cmp	r3, #88	; 0x58
 800c664:	d168      	bne.n	800c738 <_strtod_l+0x130>
 800c666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	ab18      	add	r3, sp, #96	; 0x60
 800c66c:	9702      	str	r7, [sp, #8]
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	4a8d      	ldr	r2, [pc, #564]	; (800c8a8 <_strtod_l+0x2a0>)
 800c672:	ab19      	add	r3, sp, #100	; 0x64
 800c674:	a917      	add	r1, sp, #92	; 0x5c
 800c676:	4620      	mov	r0, r4
 800c678:	f001 ffbe 	bl	800e5f8 <__gethex>
 800c67c:	f010 0707 	ands.w	r7, r0, #7
 800c680:	4605      	mov	r5, r0
 800c682:	d005      	beq.n	800c690 <_strtod_l+0x88>
 800c684:	2f06      	cmp	r7, #6
 800c686:	d12c      	bne.n	800c6e2 <_strtod_l+0xda>
 800c688:	3601      	adds	r6, #1
 800c68a:	2300      	movs	r3, #0
 800c68c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c68e:	930a      	str	r3, [sp, #40]	; 0x28
 800c690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c692:	2b00      	cmp	r3, #0
 800c694:	f040 8590 	bne.w	800d1b8 <_strtod_l+0xbb0>
 800c698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c69a:	b1eb      	cbz	r3, 800c6d8 <_strtod_l+0xd0>
 800c69c:	4652      	mov	r2, sl
 800c69e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c6a2:	ec43 2b10 	vmov	d0, r2, r3
 800c6a6:	b01d      	add	sp, #116	; 0x74
 800c6a8:	ecbd 8b02 	vpop	{d8}
 800c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b0:	2a20      	cmp	r2, #32
 800c6b2:	d1cc      	bne.n	800c64e <_strtod_l+0x46>
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6b8:	e7be      	b.n	800c638 <_strtod_l+0x30>
 800c6ba:	2a2d      	cmp	r2, #45	; 0x2d
 800c6bc:	d1c7      	bne.n	800c64e <_strtod_l+0x46>
 800c6be:	2201      	movs	r2, #1
 800c6c0:	920a      	str	r2, [sp, #40]	; 0x28
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6c6:	785b      	ldrb	r3, [r3, #1]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1c2      	bne.n	800c652 <_strtod_l+0x4a>
 800c6cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f040 856e 	bne.w	800d1b4 <_strtod_l+0xbac>
 800c6d8:	4652      	mov	r2, sl
 800c6da:	465b      	mov	r3, fp
 800c6dc:	e7e1      	b.n	800c6a2 <_strtod_l+0x9a>
 800c6de:	2200      	movs	r2, #0
 800c6e0:	e7ee      	b.n	800c6c0 <_strtod_l+0xb8>
 800c6e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6e4:	b13a      	cbz	r2, 800c6f6 <_strtod_l+0xee>
 800c6e6:	2135      	movs	r1, #53	; 0x35
 800c6e8:	a81a      	add	r0, sp, #104	; 0x68
 800c6ea:	f002 ff90 	bl	800f60e <__copybits>
 800c6ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f002 fb4f 	bl	800ed94 <_Bfree>
 800c6f6:	3f01      	subs	r7, #1
 800c6f8:	2f04      	cmp	r7, #4
 800c6fa:	d806      	bhi.n	800c70a <_strtod_l+0x102>
 800c6fc:	e8df f007 	tbb	[pc, r7]
 800c700:	1714030a 	.word	0x1714030a
 800c704:	0a          	.byte	0x0a
 800c705:	00          	.byte	0x00
 800c706:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c70a:	0728      	lsls	r0, r5, #28
 800c70c:	d5c0      	bpl.n	800c690 <_strtod_l+0x88>
 800c70e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c712:	e7bd      	b.n	800c690 <_strtod_l+0x88>
 800c714:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c718:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c71a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c71e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c722:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c726:	e7f0      	b.n	800c70a <_strtod_l+0x102>
 800c728:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c8ac <_strtod_l+0x2a4>
 800c72c:	e7ed      	b.n	800c70a <_strtod_l+0x102>
 800c72e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c732:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c736:	e7e8      	b.n	800c70a <_strtod_l+0x102>
 800c738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c73e:	785b      	ldrb	r3, [r3, #1]
 800c740:	2b30      	cmp	r3, #48	; 0x30
 800c742:	d0f9      	beq.n	800c738 <_strtod_l+0x130>
 800c744:	2b00      	cmp	r3, #0
 800c746:	d0a3      	beq.n	800c690 <_strtod_l+0x88>
 800c748:	2301      	movs	r3, #1
 800c74a:	f04f 0900 	mov.w	r9, #0
 800c74e:	9304      	str	r3, [sp, #16]
 800c750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c752:	9308      	str	r3, [sp, #32]
 800c754:	f8cd 901c 	str.w	r9, [sp, #28]
 800c758:	464f      	mov	r7, r9
 800c75a:	220a      	movs	r2, #10
 800c75c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c75e:	7806      	ldrb	r6, [r0, #0]
 800c760:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c764:	b2d9      	uxtb	r1, r3
 800c766:	2909      	cmp	r1, #9
 800c768:	d92a      	bls.n	800c7c0 <_strtod_l+0x1b8>
 800c76a:	9905      	ldr	r1, [sp, #20]
 800c76c:	462a      	mov	r2, r5
 800c76e:	f003 fa3e 	bl	800fbee <strncmp>
 800c772:	b398      	cbz	r0, 800c7dc <_strtod_l+0x1d4>
 800c774:	2000      	movs	r0, #0
 800c776:	4632      	mov	r2, r6
 800c778:	463d      	mov	r5, r7
 800c77a:	9005      	str	r0, [sp, #20]
 800c77c:	4603      	mov	r3, r0
 800c77e:	2a65      	cmp	r2, #101	; 0x65
 800c780:	d001      	beq.n	800c786 <_strtod_l+0x17e>
 800c782:	2a45      	cmp	r2, #69	; 0x45
 800c784:	d118      	bne.n	800c7b8 <_strtod_l+0x1b0>
 800c786:	b91d      	cbnz	r5, 800c790 <_strtod_l+0x188>
 800c788:	9a04      	ldr	r2, [sp, #16]
 800c78a:	4302      	orrs	r2, r0
 800c78c:	d09e      	beq.n	800c6cc <_strtod_l+0xc4>
 800c78e:	2500      	movs	r5, #0
 800c790:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c794:	f108 0201 	add.w	r2, r8, #1
 800c798:	9217      	str	r2, [sp, #92]	; 0x5c
 800c79a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c79e:	2a2b      	cmp	r2, #43	; 0x2b
 800c7a0:	d075      	beq.n	800c88e <_strtod_l+0x286>
 800c7a2:	2a2d      	cmp	r2, #45	; 0x2d
 800c7a4:	d07b      	beq.n	800c89e <_strtod_l+0x296>
 800c7a6:	f04f 0c00 	mov.w	ip, #0
 800c7aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c7ae:	2909      	cmp	r1, #9
 800c7b0:	f240 8082 	bls.w	800c8b8 <_strtod_l+0x2b0>
 800c7b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7b8:	2600      	movs	r6, #0
 800c7ba:	e09d      	b.n	800c8f8 <_strtod_l+0x2f0>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	e7c4      	b.n	800c74a <_strtod_l+0x142>
 800c7c0:	2f08      	cmp	r7, #8
 800c7c2:	bfd8      	it	le
 800c7c4:	9907      	ldrle	r1, [sp, #28]
 800c7c6:	f100 0001 	add.w	r0, r0, #1
 800c7ca:	bfda      	itte	le
 800c7cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7d0:	9307      	strle	r3, [sp, #28]
 800c7d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c7d6:	3701      	adds	r7, #1
 800c7d8:	9017      	str	r0, [sp, #92]	; 0x5c
 800c7da:	e7bf      	b.n	800c75c <_strtod_l+0x154>
 800c7dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7de:	195a      	adds	r2, r3, r5
 800c7e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7e2:	5d5a      	ldrb	r2, [r3, r5]
 800c7e4:	2f00      	cmp	r7, #0
 800c7e6:	d037      	beq.n	800c858 <_strtod_l+0x250>
 800c7e8:	9005      	str	r0, [sp, #20]
 800c7ea:	463d      	mov	r5, r7
 800c7ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c7f0:	2b09      	cmp	r3, #9
 800c7f2:	d912      	bls.n	800c81a <_strtod_l+0x212>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e7c2      	b.n	800c77e <_strtod_l+0x176>
 800c7f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7fa:	1c5a      	adds	r2, r3, #1
 800c7fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7fe:	785a      	ldrb	r2, [r3, #1]
 800c800:	3001      	adds	r0, #1
 800c802:	2a30      	cmp	r2, #48	; 0x30
 800c804:	d0f8      	beq.n	800c7f8 <_strtod_l+0x1f0>
 800c806:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c80a:	2b08      	cmp	r3, #8
 800c80c:	f200 84d9 	bhi.w	800d1c2 <_strtod_l+0xbba>
 800c810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c812:	9005      	str	r0, [sp, #20]
 800c814:	2000      	movs	r0, #0
 800c816:	9308      	str	r3, [sp, #32]
 800c818:	4605      	mov	r5, r0
 800c81a:	3a30      	subs	r2, #48	; 0x30
 800c81c:	f100 0301 	add.w	r3, r0, #1
 800c820:	d014      	beq.n	800c84c <_strtod_l+0x244>
 800c822:	9905      	ldr	r1, [sp, #20]
 800c824:	4419      	add	r1, r3
 800c826:	9105      	str	r1, [sp, #20]
 800c828:	462b      	mov	r3, r5
 800c82a:	eb00 0e05 	add.w	lr, r0, r5
 800c82e:	210a      	movs	r1, #10
 800c830:	4573      	cmp	r3, lr
 800c832:	d113      	bne.n	800c85c <_strtod_l+0x254>
 800c834:	182b      	adds	r3, r5, r0
 800c836:	2b08      	cmp	r3, #8
 800c838:	f105 0501 	add.w	r5, r5, #1
 800c83c:	4405      	add	r5, r0
 800c83e:	dc1c      	bgt.n	800c87a <_strtod_l+0x272>
 800c840:	9907      	ldr	r1, [sp, #28]
 800c842:	230a      	movs	r3, #10
 800c844:	fb03 2301 	mla	r3, r3, r1, r2
 800c848:	9307      	str	r3, [sp, #28]
 800c84a:	2300      	movs	r3, #0
 800c84c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c84e:	1c51      	adds	r1, r2, #1
 800c850:	9117      	str	r1, [sp, #92]	; 0x5c
 800c852:	7852      	ldrb	r2, [r2, #1]
 800c854:	4618      	mov	r0, r3
 800c856:	e7c9      	b.n	800c7ec <_strtod_l+0x1e4>
 800c858:	4638      	mov	r0, r7
 800c85a:	e7d2      	b.n	800c802 <_strtod_l+0x1fa>
 800c85c:	2b08      	cmp	r3, #8
 800c85e:	dc04      	bgt.n	800c86a <_strtod_l+0x262>
 800c860:	9e07      	ldr	r6, [sp, #28]
 800c862:	434e      	muls	r6, r1
 800c864:	9607      	str	r6, [sp, #28]
 800c866:	3301      	adds	r3, #1
 800c868:	e7e2      	b.n	800c830 <_strtod_l+0x228>
 800c86a:	f103 0c01 	add.w	ip, r3, #1
 800c86e:	f1bc 0f10 	cmp.w	ip, #16
 800c872:	bfd8      	it	le
 800c874:	fb01 f909 	mulle.w	r9, r1, r9
 800c878:	e7f5      	b.n	800c866 <_strtod_l+0x25e>
 800c87a:	2d10      	cmp	r5, #16
 800c87c:	bfdc      	itt	le
 800c87e:	230a      	movle	r3, #10
 800c880:	fb03 2909 	mlale	r9, r3, r9, r2
 800c884:	e7e1      	b.n	800c84a <_strtod_l+0x242>
 800c886:	2300      	movs	r3, #0
 800c888:	9305      	str	r3, [sp, #20]
 800c88a:	2301      	movs	r3, #1
 800c88c:	e77c      	b.n	800c788 <_strtod_l+0x180>
 800c88e:	f04f 0c00 	mov.w	ip, #0
 800c892:	f108 0202 	add.w	r2, r8, #2
 800c896:	9217      	str	r2, [sp, #92]	; 0x5c
 800c898:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c89c:	e785      	b.n	800c7aa <_strtod_l+0x1a2>
 800c89e:	f04f 0c01 	mov.w	ip, #1
 800c8a2:	e7f6      	b.n	800c892 <_strtod_l+0x28a>
 800c8a4:	08011cb4 	.word	0x08011cb4
 800c8a8:	08011a04 	.word	0x08011a04
 800c8ac:	7ff00000 	.word	0x7ff00000
 800c8b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8b2:	1c51      	adds	r1, r2, #1
 800c8b4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8b6:	7852      	ldrb	r2, [r2, #1]
 800c8b8:	2a30      	cmp	r2, #48	; 0x30
 800c8ba:	d0f9      	beq.n	800c8b0 <_strtod_l+0x2a8>
 800c8bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c8c0:	2908      	cmp	r1, #8
 800c8c2:	f63f af79 	bhi.w	800c7b8 <_strtod_l+0x1b0>
 800c8c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c8ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8cc:	9206      	str	r2, [sp, #24]
 800c8ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8d0:	1c51      	adds	r1, r2, #1
 800c8d2:	9117      	str	r1, [sp, #92]	; 0x5c
 800c8d4:	7852      	ldrb	r2, [r2, #1]
 800c8d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c8da:	2e09      	cmp	r6, #9
 800c8dc:	d937      	bls.n	800c94e <_strtod_l+0x346>
 800c8de:	9e06      	ldr	r6, [sp, #24]
 800c8e0:	1b89      	subs	r1, r1, r6
 800c8e2:	2908      	cmp	r1, #8
 800c8e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c8e8:	dc02      	bgt.n	800c8f0 <_strtod_l+0x2e8>
 800c8ea:	4576      	cmp	r6, lr
 800c8ec:	bfa8      	it	ge
 800c8ee:	4676      	movge	r6, lr
 800c8f0:	f1bc 0f00 	cmp.w	ip, #0
 800c8f4:	d000      	beq.n	800c8f8 <_strtod_l+0x2f0>
 800c8f6:	4276      	negs	r6, r6
 800c8f8:	2d00      	cmp	r5, #0
 800c8fa:	d14d      	bne.n	800c998 <_strtod_l+0x390>
 800c8fc:	9904      	ldr	r1, [sp, #16]
 800c8fe:	4301      	orrs	r1, r0
 800c900:	f47f aec6 	bne.w	800c690 <_strtod_l+0x88>
 800c904:	2b00      	cmp	r3, #0
 800c906:	f47f aee1 	bne.w	800c6cc <_strtod_l+0xc4>
 800c90a:	2a69      	cmp	r2, #105	; 0x69
 800c90c:	d027      	beq.n	800c95e <_strtod_l+0x356>
 800c90e:	dc24      	bgt.n	800c95a <_strtod_l+0x352>
 800c910:	2a49      	cmp	r2, #73	; 0x49
 800c912:	d024      	beq.n	800c95e <_strtod_l+0x356>
 800c914:	2a4e      	cmp	r2, #78	; 0x4e
 800c916:	f47f aed9 	bne.w	800c6cc <_strtod_l+0xc4>
 800c91a:	499f      	ldr	r1, [pc, #636]	; (800cb98 <_strtod_l+0x590>)
 800c91c:	a817      	add	r0, sp, #92	; 0x5c
 800c91e:	f002 f8c3 	bl	800eaa8 <__match>
 800c922:	2800      	cmp	r0, #0
 800c924:	f43f aed2 	beq.w	800c6cc <_strtod_l+0xc4>
 800c928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	2b28      	cmp	r3, #40	; 0x28
 800c92e:	d12d      	bne.n	800c98c <_strtod_l+0x384>
 800c930:	499a      	ldr	r1, [pc, #616]	; (800cb9c <_strtod_l+0x594>)
 800c932:	aa1a      	add	r2, sp, #104	; 0x68
 800c934:	a817      	add	r0, sp, #92	; 0x5c
 800c936:	f002 f8cb 	bl	800ead0 <__hexnan>
 800c93a:	2805      	cmp	r0, #5
 800c93c:	d126      	bne.n	800c98c <_strtod_l+0x384>
 800c93e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c940:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c944:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c948:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c94c:	e6a0      	b.n	800c690 <_strtod_l+0x88>
 800c94e:	210a      	movs	r1, #10
 800c950:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c954:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c958:	e7b9      	b.n	800c8ce <_strtod_l+0x2c6>
 800c95a:	2a6e      	cmp	r2, #110	; 0x6e
 800c95c:	e7db      	b.n	800c916 <_strtod_l+0x30e>
 800c95e:	4990      	ldr	r1, [pc, #576]	; (800cba0 <_strtod_l+0x598>)
 800c960:	a817      	add	r0, sp, #92	; 0x5c
 800c962:	f002 f8a1 	bl	800eaa8 <__match>
 800c966:	2800      	cmp	r0, #0
 800c968:	f43f aeb0 	beq.w	800c6cc <_strtod_l+0xc4>
 800c96c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c96e:	498d      	ldr	r1, [pc, #564]	; (800cba4 <_strtod_l+0x59c>)
 800c970:	3b01      	subs	r3, #1
 800c972:	a817      	add	r0, sp, #92	; 0x5c
 800c974:	9317      	str	r3, [sp, #92]	; 0x5c
 800c976:	f002 f897 	bl	800eaa8 <__match>
 800c97a:	b910      	cbnz	r0, 800c982 <_strtod_l+0x37a>
 800c97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c97e:	3301      	adds	r3, #1
 800c980:	9317      	str	r3, [sp, #92]	; 0x5c
 800c982:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cbb4 <_strtod_l+0x5ac>
 800c986:	f04f 0a00 	mov.w	sl, #0
 800c98a:	e681      	b.n	800c690 <_strtod_l+0x88>
 800c98c:	4886      	ldr	r0, [pc, #536]	; (800cba8 <_strtod_l+0x5a0>)
 800c98e:	f003 f8d3 	bl	800fb38 <nan>
 800c992:	ec5b ab10 	vmov	sl, fp, d0
 800c996:	e67b      	b.n	800c690 <_strtod_l+0x88>
 800c998:	9b05      	ldr	r3, [sp, #20]
 800c99a:	9807      	ldr	r0, [sp, #28]
 800c99c:	1af3      	subs	r3, r6, r3
 800c99e:	2f00      	cmp	r7, #0
 800c9a0:	bf08      	it	eq
 800c9a2:	462f      	moveq	r7, r5
 800c9a4:	2d10      	cmp	r5, #16
 800c9a6:	9306      	str	r3, [sp, #24]
 800c9a8:	46a8      	mov	r8, r5
 800c9aa:	bfa8      	it	ge
 800c9ac:	f04f 0810 	movge.w	r8, #16
 800c9b0:	f7f3 fdc8 	bl	8000544 <__aeabi_ui2d>
 800c9b4:	2d09      	cmp	r5, #9
 800c9b6:	4682      	mov	sl, r0
 800c9b8:	468b      	mov	fp, r1
 800c9ba:	dd13      	ble.n	800c9e4 <_strtod_l+0x3dc>
 800c9bc:	4b7b      	ldr	r3, [pc, #492]	; (800cbac <_strtod_l+0x5a4>)
 800c9be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c9c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c9c6:	f7f3 fe37 	bl	8000638 <__aeabi_dmul>
 800c9ca:	4682      	mov	sl, r0
 800c9cc:	4648      	mov	r0, r9
 800c9ce:	468b      	mov	fp, r1
 800c9d0:	f7f3 fdb8 	bl	8000544 <__aeabi_ui2d>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4650      	mov	r0, sl
 800c9da:	4659      	mov	r1, fp
 800c9dc:	f7f3 fc76 	bl	80002cc <__adddf3>
 800c9e0:	4682      	mov	sl, r0
 800c9e2:	468b      	mov	fp, r1
 800c9e4:	2d0f      	cmp	r5, #15
 800c9e6:	dc38      	bgt.n	800ca5a <_strtod_l+0x452>
 800c9e8:	9b06      	ldr	r3, [sp, #24]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f43f ae50 	beq.w	800c690 <_strtod_l+0x88>
 800c9f0:	dd24      	ble.n	800ca3c <_strtod_l+0x434>
 800c9f2:	2b16      	cmp	r3, #22
 800c9f4:	dc0b      	bgt.n	800ca0e <_strtod_l+0x406>
 800c9f6:	496d      	ldr	r1, [pc, #436]	; (800cbac <_strtod_l+0x5a4>)
 800c9f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca00:	4652      	mov	r2, sl
 800ca02:	465b      	mov	r3, fp
 800ca04:	f7f3 fe18 	bl	8000638 <__aeabi_dmul>
 800ca08:	4682      	mov	sl, r0
 800ca0a:	468b      	mov	fp, r1
 800ca0c:	e640      	b.n	800c690 <_strtod_l+0x88>
 800ca0e:	9a06      	ldr	r2, [sp, #24]
 800ca10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ca14:	4293      	cmp	r3, r2
 800ca16:	db20      	blt.n	800ca5a <_strtod_l+0x452>
 800ca18:	4c64      	ldr	r4, [pc, #400]	; (800cbac <_strtod_l+0x5a4>)
 800ca1a:	f1c5 050f 	rsb	r5, r5, #15
 800ca1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ca22:	4652      	mov	r2, sl
 800ca24:	465b      	mov	r3, fp
 800ca26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca2a:	f7f3 fe05 	bl	8000638 <__aeabi_dmul>
 800ca2e:	9b06      	ldr	r3, [sp, #24]
 800ca30:	1b5d      	subs	r5, r3, r5
 800ca32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ca36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ca3a:	e7e3      	b.n	800ca04 <_strtod_l+0x3fc>
 800ca3c:	9b06      	ldr	r3, [sp, #24]
 800ca3e:	3316      	adds	r3, #22
 800ca40:	db0b      	blt.n	800ca5a <_strtod_l+0x452>
 800ca42:	9b05      	ldr	r3, [sp, #20]
 800ca44:	1b9e      	subs	r6, r3, r6
 800ca46:	4b59      	ldr	r3, [pc, #356]	; (800cbac <_strtod_l+0x5a4>)
 800ca48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ca4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca50:	4650      	mov	r0, sl
 800ca52:	4659      	mov	r1, fp
 800ca54:	f7f3 ff1a 	bl	800088c <__aeabi_ddiv>
 800ca58:	e7d6      	b.n	800ca08 <_strtod_l+0x400>
 800ca5a:	9b06      	ldr	r3, [sp, #24]
 800ca5c:	eba5 0808 	sub.w	r8, r5, r8
 800ca60:	4498      	add	r8, r3
 800ca62:	f1b8 0f00 	cmp.w	r8, #0
 800ca66:	dd74      	ble.n	800cb52 <_strtod_l+0x54a>
 800ca68:	f018 030f 	ands.w	r3, r8, #15
 800ca6c:	d00a      	beq.n	800ca84 <_strtod_l+0x47c>
 800ca6e:	494f      	ldr	r1, [pc, #316]	; (800cbac <_strtod_l+0x5a4>)
 800ca70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca74:	4652      	mov	r2, sl
 800ca76:	465b      	mov	r3, fp
 800ca78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca7c:	f7f3 fddc 	bl	8000638 <__aeabi_dmul>
 800ca80:	4682      	mov	sl, r0
 800ca82:	468b      	mov	fp, r1
 800ca84:	f038 080f 	bics.w	r8, r8, #15
 800ca88:	d04f      	beq.n	800cb2a <_strtod_l+0x522>
 800ca8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ca8e:	dd22      	ble.n	800cad6 <_strtod_l+0x4ce>
 800ca90:	2500      	movs	r5, #0
 800ca92:	462e      	mov	r6, r5
 800ca94:	9507      	str	r5, [sp, #28]
 800ca96:	9505      	str	r5, [sp, #20]
 800ca98:	2322      	movs	r3, #34	; 0x22
 800ca9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cbb4 <_strtod_l+0x5ac>
 800ca9e:	6023      	str	r3, [r4, #0]
 800caa0:	f04f 0a00 	mov.w	sl, #0
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	f43f adf2 	beq.w	800c690 <_strtod_l+0x88>
 800caac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800caae:	4620      	mov	r0, r4
 800cab0:	f002 f970 	bl	800ed94 <_Bfree>
 800cab4:	9905      	ldr	r1, [sp, #20]
 800cab6:	4620      	mov	r0, r4
 800cab8:	f002 f96c 	bl	800ed94 <_Bfree>
 800cabc:	4631      	mov	r1, r6
 800cabe:	4620      	mov	r0, r4
 800cac0:	f002 f968 	bl	800ed94 <_Bfree>
 800cac4:	9907      	ldr	r1, [sp, #28]
 800cac6:	4620      	mov	r0, r4
 800cac8:	f002 f964 	bl	800ed94 <_Bfree>
 800cacc:	4629      	mov	r1, r5
 800cace:	4620      	mov	r0, r4
 800cad0:	f002 f960 	bl	800ed94 <_Bfree>
 800cad4:	e5dc      	b.n	800c690 <_strtod_l+0x88>
 800cad6:	4b36      	ldr	r3, [pc, #216]	; (800cbb0 <_strtod_l+0x5a8>)
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	2300      	movs	r3, #0
 800cadc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cae0:	4650      	mov	r0, sl
 800cae2:	4659      	mov	r1, fp
 800cae4:	4699      	mov	r9, r3
 800cae6:	f1b8 0f01 	cmp.w	r8, #1
 800caea:	dc21      	bgt.n	800cb30 <_strtod_l+0x528>
 800caec:	b10b      	cbz	r3, 800caf2 <_strtod_l+0x4ea>
 800caee:	4682      	mov	sl, r0
 800caf0:	468b      	mov	fp, r1
 800caf2:	4b2f      	ldr	r3, [pc, #188]	; (800cbb0 <_strtod_l+0x5a8>)
 800caf4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800caf8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cafc:	4652      	mov	r2, sl
 800cafe:	465b      	mov	r3, fp
 800cb00:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cb04:	f7f3 fd98 	bl	8000638 <__aeabi_dmul>
 800cb08:	4b2a      	ldr	r3, [pc, #168]	; (800cbb4 <_strtod_l+0x5ac>)
 800cb0a:	460a      	mov	r2, r1
 800cb0c:	400b      	ands	r3, r1
 800cb0e:	492a      	ldr	r1, [pc, #168]	; (800cbb8 <_strtod_l+0x5b0>)
 800cb10:	428b      	cmp	r3, r1
 800cb12:	4682      	mov	sl, r0
 800cb14:	d8bc      	bhi.n	800ca90 <_strtod_l+0x488>
 800cb16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cb1a:	428b      	cmp	r3, r1
 800cb1c:	bf86      	itte	hi
 800cb1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cbbc <_strtod_l+0x5b4>
 800cb22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800cb26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	9304      	str	r3, [sp, #16]
 800cb2e:	e084      	b.n	800cc3a <_strtod_l+0x632>
 800cb30:	f018 0f01 	tst.w	r8, #1
 800cb34:	d005      	beq.n	800cb42 <_strtod_l+0x53a>
 800cb36:	9b04      	ldr	r3, [sp, #16]
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	f7f3 fd7c 	bl	8000638 <__aeabi_dmul>
 800cb40:	2301      	movs	r3, #1
 800cb42:	9a04      	ldr	r2, [sp, #16]
 800cb44:	3208      	adds	r2, #8
 800cb46:	f109 0901 	add.w	r9, r9, #1
 800cb4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb4e:	9204      	str	r2, [sp, #16]
 800cb50:	e7c9      	b.n	800cae6 <_strtod_l+0x4de>
 800cb52:	d0ea      	beq.n	800cb2a <_strtod_l+0x522>
 800cb54:	f1c8 0800 	rsb	r8, r8, #0
 800cb58:	f018 020f 	ands.w	r2, r8, #15
 800cb5c:	d00a      	beq.n	800cb74 <_strtod_l+0x56c>
 800cb5e:	4b13      	ldr	r3, [pc, #76]	; (800cbac <_strtod_l+0x5a4>)
 800cb60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb64:	4650      	mov	r0, sl
 800cb66:	4659      	mov	r1, fp
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	f7f3 fe8e 	bl	800088c <__aeabi_ddiv>
 800cb70:	4682      	mov	sl, r0
 800cb72:	468b      	mov	fp, r1
 800cb74:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cb78:	d0d7      	beq.n	800cb2a <_strtod_l+0x522>
 800cb7a:	f1b8 0f1f 	cmp.w	r8, #31
 800cb7e:	dd1f      	ble.n	800cbc0 <_strtod_l+0x5b8>
 800cb80:	2500      	movs	r5, #0
 800cb82:	462e      	mov	r6, r5
 800cb84:	9507      	str	r5, [sp, #28]
 800cb86:	9505      	str	r5, [sp, #20]
 800cb88:	2322      	movs	r3, #34	; 0x22
 800cb8a:	f04f 0a00 	mov.w	sl, #0
 800cb8e:	f04f 0b00 	mov.w	fp, #0
 800cb92:	6023      	str	r3, [r4, #0]
 800cb94:	e786      	b.n	800caa4 <_strtod_l+0x49c>
 800cb96:	bf00      	nop
 800cb98:	080119dd 	.word	0x080119dd
 800cb9c:	08011a18 	.word	0x08011a18
 800cba0:	080119d5 	.word	0x080119d5
 800cba4:	08011b5c 	.word	0x08011b5c
 800cba8:	08011e70 	.word	0x08011e70
 800cbac:	08011d50 	.word	0x08011d50
 800cbb0:	08011d28 	.word	0x08011d28
 800cbb4:	7ff00000 	.word	0x7ff00000
 800cbb8:	7ca00000 	.word	0x7ca00000
 800cbbc:	7fefffff 	.word	0x7fefffff
 800cbc0:	f018 0310 	ands.w	r3, r8, #16
 800cbc4:	bf18      	it	ne
 800cbc6:	236a      	movne	r3, #106	; 0x6a
 800cbc8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cf78 <_strtod_l+0x970>
 800cbcc:	9304      	str	r3, [sp, #16]
 800cbce:	4650      	mov	r0, sl
 800cbd0:	4659      	mov	r1, fp
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f018 0f01 	tst.w	r8, #1
 800cbd8:	d004      	beq.n	800cbe4 <_strtod_l+0x5dc>
 800cbda:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cbde:	f7f3 fd2b 	bl	8000638 <__aeabi_dmul>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cbe8:	f109 0908 	add.w	r9, r9, #8
 800cbec:	d1f2      	bne.n	800cbd4 <_strtod_l+0x5cc>
 800cbee:	b10b      	cbz	r3, 800cbf4 <_strtod_l+0x5ec>
 800cbf0:	4682      	mov	sl, r0
 800cbf2:	468b      	mov	fp, r1
 800cbf4:	9b04      	ldr	r3, [sp, #16]
 800cbf6:	b1c3      	cbz	r3, 800cc2a <_strtod_l+0x622>
 800cbf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cbfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	4659      	mov	r1, fp
 800cc04:	dd11      	ble.n	800cc2a <_strtod_l+0x622>
 800cc06:	2b1f      	cmp	r3, #31
 800cc08:	f340 8124 	ble.w	800ce54 <_strtod_l+0x84c>
 800cc0c:	2b34      	cmp	r3, #52	; 0x34
 800cc0e:	bfde      	ittt	le
 800cc10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800cc18:	fa03 f202 	lslle.w	r2, r3, r2
 800cc1c:	f04f 0a00 	mov.w	sl, #0
 800cc20:	bfcc      	ite	gt
 800cc22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cc26:	ea02 0b01 	andle.w	fp, r2, r1
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4650      	mov	r0, sl
 800cc30:	4659      	mov	r1, fp
 800cc32:	f7f3 ff69 	bl	8000b08 <__aeabi_dcmpeq>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d1a2      	bne.n	800cb80 <_strtod_l+0x578>
 800cc3a:	9b07      	ldr	r3, [sp, #28]
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	9908      	ldr	r1, [sp, #32]
 800cc40:	462b      	mov	r3, r5
 800cc42:	463a      	mov	r2, r7
 800cc44:	4620      	mov	r0, r4
 800cc46:	f002 f90d 	bl	800ee64 <__s2b>
 800cc4a:	9007      	str	r0, [sp, #28]
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f43f af1f 	beq.w	800ca90 <_strtod_l+0x488>
 800cc52:	9b05      	ldr	r3, [sp, #20]
 800cc54:	1b9e      	subs	r6, r3, r6
 800cc56:	9b06      	ldr	r3, [sp, #24]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	bfb4      	ite	lt
 800cc5c:	4633      	movlt	r3, r6
 800cc5e:	2300      	movge	r3, #0
 800cc60:	930c      	str	r3, [sp, #48]	; 0x30
 800cc62:	9b06      	ldr	r3, [sp, #24]
 800cc64:	2500      	movs	r5, #0
 800cc66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc6a:	9312      	str	r3, [sp, #72]	; 0x48
 800cc6c:	462e      	mov	r6, r5
 800cc6e:	9b07      	ldr	r3, [sp, #28]
 800cc70:	4620      	mov	r0, r4
 800cc72:	6859      	ldr	r1, [r3, #4]
 800cc74:	f002 f84e 	bl	800ed14 <_Balloc>
 800cc78:	9005      	str	r0, [sp, #20]
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f43f af0c 	beq.w	800ca98 <_strtod_l+0x490>
 800cc80:	9b07      	ldr	r3, [sp, #28]
 800cc82:	691a      	ldr	r2, [r3, #16]
 800cc84:	3202      	adds	r2, #2
 800cc86:	f103 010c 	add.w	r1, r3, #12
 800cc8a:	0092      	lsls	r2, r2, #2
 800cc8c:	300c      	adds	r0, #12
 800cc8e:	f7fe ff8f 	bl	800bbb0 <memcpy>
 800cc92:	ec4b ab10 	vmov	d0, sl, fp
 800cc96:	aa1a      	add	r2, sp, #104	; 0x68
 800cc98:	a919      	add	r1, sp, #100	; 0x64
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f002 fc28 	bl	800f4f0 <__d2b>
 800cca0:	ec4b ab18 	vmov	d8, sl, fp
 800cca4:	9018      	str	r0, [sp, #96]	; 0x60
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f43f aef6 	beq.w	800ca98 <_strtod_l+0x490>
 800ccac:	2101      	movs	r1, #1
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f002 f972 	bl	800ef98 <__i2b>
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f aeee 	beq.w	800ca98 <_strtod_l+0x490>
 800ccbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccbe:	9904      	ldr	r1, [sp, #16]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	bfab      	itete	ge
 800ccc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ccc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ccc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ccca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ccce:	bfac      	ite	ge
 800ccd0:	eb03 0902 	addge.w	r9, r3, r2
 800ccd4:	1ad7      	sublt	r7, r2, r3
 800ccd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ccd8:	eba3 0801 	sub.w	r8, r3, r1
 800ccdc:	4490      	add	r8, r2
 800ccde:	4ba1      	ldr	r3, [pc, #644]	; (800cf64 <_strtod_l+0x95c>)
 800cce0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cce4:	4598      	cmp	r8, r3
 800cce6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ccea:	f280 80c7 	bge.w	800ce7c <_strtod_l+0x874>
 800ccee:	eba3 0308 	sub.w	r3, r3, r8
 800ccf2:	2b1f      	cmp	r3, #31
 800ccf4:	eba2 0203 	sub.w	r2, r2, r3
 800ccf8:	f04f 0101 	mov.w	r1, #1
 800ccfc:	f300 80b1 	bgt.w	800ce62 <_strtod_l+0x85a>
 800cd00:	fa01 f303 	lsl.w	r3, r1, r3
 800cd04:	930d      	str	r3, [sp, #52]	; 0x34
 800cd06:	2300      	movs	r3, #0
 800cd08:	9308      	str	r3, [sp, #32]
 800cd0a:	eb09 0802 	add.w	r8, r9, r2
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	45c1      	cmp	r9, r8
 800cd12:	4417      	add	r7, r2
 800cd14:	441f      	add	r7, r3
 800cd16:	464b      	mov	r3, r9
 800cd18:	bfa8      	it	ge
 800cd1a:	4643      	movge	r3, r8
 800cd1c:	42bb      	cmp	r3, r7
 800cd1e:	bfa8      	it	ge
 800cd20:	463b      	movge	r3, r7
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	bfc2      	ittt	gt
 800cd26:	eba8 0803 	subgt.w	r8, r8, r3
 800cd2a:	1aff      	subgt	r7, r7, r3
 800cd2c:	eba9 0903 	subgt.w	r9, r9, r3
 800cd30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	dd17      	ble.n	800cd66 <_strtod_l+0x75e>
 800cd36:	4631      	mov	r1, r6
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f002 f9ec 	bl	800f118 <__pow5mult>
 800cd40:	4606      	mov	r6, r0
 800cd42:	2800      	cmp	r0, #0
 800cd44:	f43f aea8 	beq.w	800ca98 <_strtod_l+0x490>
 800cd48:	4601      	mov	r1, r0
 800cd4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f002 f939 	bl	800efc4 <__multiply>
 800cd52:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd54:	2800      	cmp	r0, #0
 800cd56:	f43f ae9f 	beq.w	800ca98 <_strtod_l+0x490>
 800cd5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f002 f819 	bl	800ed94 <_Bfree>
 800cd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd64:	9318      	str	r3, [sp, #96]	; 0x60
 800cd66:	f1b8 0f00 	cmp.w	r8, #0
 800cd6a:	f300 808c 	bgt.w	800ce86 <_strtod_l+0x87e>
 800cd6e:	9b06      	ldr	r3, [sp, #24]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	dd08      	ble.n	800cd86 <_strtod_l+0x77e>
 800cd74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd76:	9905      	ldr	r1, [sp, #20]
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f002 f9cd 	bl	800f118 <__pow5mult>
 800cd7e:	9005      	str	r0, [sp, #20]
 800cd80:	2800      	cmp	r0, #0
 800cd82:	f43f ae89 	beq.w	800ca98 <_strtod_l+0x490>
 800cd86:	2f00      	cmp	r7, #0
 800cd88:	dd08      	ble.n	800cd9c <_strtod_l+0x794>
 800cd8a:	9905      	ldr	r1, [sp, #20]
 800cd8c:	463a      	mov	r2, r7
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f002 fa1c 	bl	800f1cc <__lshift>
 800cd94:	9005      	str	r0, [sp, #20]
 800cd96:	2800      	cmp	r0, #0
 800cd98:	f43f ae7e 	beq.w	800ca98 <_strtod_l+0x490>
 800cd9c:	f1b9 0f00 	cmp.w	r9, #0
 800cda0:	dd08      	ble.n	800cdb4 <_strtod_l+0x7ac>
 800cda2:	4631      	mov	r1, r6
 800cda4:	464a      	mov	r2, r9
 800cda6:	4620      	mov	r0, r4
 800cda8:	f002 fa10 	bl	800f1cc <__lshift>
 800cdac:	4606      	mov	r6, r0
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f43f ae72 	beq.w	800ca98 <_strtod_l+0x490>
 800cdb4:	9a05      	ldr	r2, [sp, #20]
 800cdb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f002 fa93 	bl	800f2e4 <__mdiff>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	f43f ae69 	beq.w	800ca98 <_strtod_l+0x490>
 800cdc6:	68c3      	ldr	r3, [r0, #12]
 800cdc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60c3      	str	r3, [r0, #12]
 800cdce:	4631      	mov	r1, r6
 800cdd0:	f002 fa6c 	bl	800f2ac <__mcmp>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	da60      	bge.n	800ce9a <_strtod_l+0x892>
 800cdd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdda:	ea53 030a 	orrs.w	r3, r3, sl
 800cdde:	f040 8082 	bne.w	800cee6 <_strtod_l+0x8de>
 800cde2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d17d      	bne.n	800cee6 <_strtod_l+0x8de>
 800cdea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdee:	0d1b      	lsrs	r3, r3, #20
 800cdf0:	051b      	lsls	r3, r3, #20
 800cdf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cdf6:	d976      	bls.n	800cee6 <_strtod_l+0x8de>
 800cdf8:	696b      	ldr	r3, [r5, #20]
 800cdfa:	b913      	cbnz	r3, 800ce02 <_strtod_l+0x7fa>
 800cdfc:	692b      	ldr	r3, [r5, #16]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	dd71      	ble.n	800cee6 <_strtod_l+0x8de>
 800ce02:	4629      	mov	r1, r5
 800ce04:	2201      	movs	r2, #1
 800ce06:	4620      	mov	r0, r4
 800ce08:	f002 f9e0 	bl	800f1cc <__lshift>
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4605      	mov	r5, r0
 800ce10:	f002 fa4c 	bl	800f2ac <__mcmp>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	dd66      	ble.n	800cee6 <_strtod_l+0x8de>
 800ce18:	9904      	ldr	r1, [sp, #16]
 800ce1a:	4a53      	ldr	r2, [pc, #332]	; (800cf68 <_strtod_l+0x960>)
 800ce1c:	465b      	mov	r3, fp
 800ce1e:	2900      	cmp	r1, #0
 800ce20:	f000 8081 	beq.w	800cf26 <_strtod_l+0x91e>
 800ce24:	ea02 010b 	and.w	r1, r2, fp
 800ce28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce2c:	dc7b      	bgt.n	800cf26 <_strtod_l+0x91e>
 800ce2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce32:	f77f aea9 	ble.w	800cb88 <_strtod_l+0x580>
 800ce36:	4b4d      	ldr	r3, [pc, #308]	; (800cf6c <_strtod_l+0x964>)
 800ce38:	4650      	mov	r0, sl
 800ce3a:	4659      	mov	r1, fp
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f7f3 fbfb 	bl	8000638 <__aeabi_dmul>
 800ce42:	460b      	mov	r3, r1
 800ce44:	4303      	orrs	r3, r0
 800ce46:	bf08      	it	eq
 800ce48:	2322      	moveq	r3, #34	; 0x22
 800ce4a:	4682      	mov	sl, r0
 800ce4c:	468b      	mov	fp, r1
 800ce4e:	bf08      	it	eq
 800ce50:	6023      	streq	r3, [r4, #0]
 800ce52:	e62b      	b.n	800caac <_strtod_l+0x4a4>
 800ce54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce58:	fa02 f303 	lsl.w	r3, r2, r3
 800ce5c:	ea03 0a0a 	and.w	sl, r3, sl
 800ce60:	e6e3      	b.n	800cc2a <_strtod_l+0x622>
 800ce62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ce66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ce6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ce6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ce72:	fa01 f308 	lsl.w	r3, r1, r8
 800ce76:	9308      	str	r3, [sp, #32]
 800ce78:	910d      	str	r1, [sp, #52]	; 0x34
 800ce7a:	e746      	b.n	800cd0a <_strtod_l+0x702>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	9308      	str	r3, [sp, #32]
 800ce80:	2301      	movs	r3, #1
 800ce82:	930d      	str	r3, [sp, #52]	; 0x34
 800ce84:	e741      	b.n	800cd0a <_strtod_l+0x702>
 800ce86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce88:	4642      	mov	r2, r8
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f002 f99e 	bl	800f1cc <__lshift>
 800ce90:	9018      	str	r0, [sp, #96]	; 0x60
 800ce92:	2800      	cmp	r0, #0
 800ce94:	f47f af6b 	bne.w	800cd6e <_strtod_l+0x766>
 800ce98:	e5fe      	b.n	800ca98 <_strtod_l+0x490>
 800ce9a:	465f      	mov	r7, fp
 800ce9c:	d16e      	bne.n	800cf7c <_strtod_l+0x974>
 800ce9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cea4:	b342      	cbz	r2, 800cef8 <_strtod_l+0x8f0>
 800cea6:	4a32      	ldr	r2, [pc, #200]	; (800cf70 <_strtod_l+0x968>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d128      	bne.n	800cefe <_strtod_l+0x8f6>
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	4651      	mov	r1, sl
 800ceb0:	b1eb      	cbz	r3, 800ceee <_strtod_l+0x8e6>
 800ceb2:	4b2d      	ldr	r3, [pc, #180]	; (800cf68 <_strtod_l+0x960>)
 800ceb4:	403b      	ands	r3, r7
 800ceb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ceba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cebe:	d819      	bhi.n	800cef4 <_strtod_l+0x8ec>
 800cec0:	0d1b      	lsrs	r3, r3, #20
 800cec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cec6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceca:	4299      	cmp	r1, r3
 800cecc:	d117      	bne.n	800cefe <_strtod_l+0x8f6>
 800cece:	4b29      	ldr	r3, [pc, #164]	; (800cf74 <_strtod_l+0x96c>)
 800ced0:	429f      	cmp	r7, r3
 800ced2:	d102      	bne.n	800ceda <_strtod_l+0x8d2>
 800ced4:	3101      	adds	r1, #1
 800ced6:	f43f addf 	beq.w	800ca98 <_strtod_l+0x490>
 800ceda:	4b23      	ldr	r3, [pc, #140]	; (800cf68 <_strtod_l+0x960>)
 800cedc:	403b      	ands	r3, r7
 800cede:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cee2:	f04f 0a00 	mov.w	sl, #0
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1a4      	bne.n	800ce36 <_strtod_l+0x82e>
 800ceec:	e5de      	b.n	800caac <_strtod_l+0x4a4>
 800ceee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cef2:	e7ea      	b.n	800ceca <_strtod_l+0x8c2>
 800cef4:	4613      	mov	r3, r2
 800cef6:	e7e8      	b.n	800ceca <_strtod_l+0x8c2>
 800cef8:	ea53 030a 	orrs.w	r3, r3, sl
 800cefc:	d08c      	beq.n	800ce18 <_strtod_l+0x810>
 800cefe:	9b08      	ldr	r3, [sp, #32]
 800cf00:	b1db      	cbz	r3, 800cf3a <_strtod_l+0x932>
 800cf02:	423b      	tst	r3, r7
 800cf04:	d0ef      	beq.n	800cee6 <_strtod_l+0x8de>
 800cf06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf08:	9a04      	ldr	r2, [sp, #16]
 800cf0a:	4650      	mov	r0, sl
 800cf0c:	4659      	mov	r1, fp
 800cf0e:	b1c3      	cbz	r3, 800cf42 <_strtod_l+0x93a>
 800cf10:	f7ff fb5c 	bl	800c5cc <sulp>
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	ec51 0b18 	vmov	r0, r1, d8
 800cf1c:	f7f3 f9d6 	bl	80002cc <__adddf3>
 800cf20:	4682      	mov	sl, r0
 800cf22:	468b      	mov	fp, r1
 800cf24:	e7df      	b.n	800cee6 <_strtod_l+0x8de>
 800cf26:	4013      	ands	r3, r2
 800cf28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cf38:	e7d5      	b.n	800cee6 <_strtod_l+0x8de>
 800cf3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf3c:	ea13 0f0a 	tst.w	r3, sl
 800cf40:	e7e0      	b.n	800cf04 <_strtod_l+0x8fc>
 800cf42:	f7ff fb43 	bl	800c5cc <sulp>
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	ec51 0b18 	vmov	r0, r1, d8
 800cf4e:	f7f3 f9bb 	bl	80002c8 <__aeabi_dsub>
 800cf52:	2200      	movs	r2, #0
 800cf54:	2300      	movs	r3, #0
 800cf56:	4682      	mov	sl, r0
 800cf58:	468b      	mov	fp, r1
 800cf5a:	f7f3 fdd5 	bl	8000b08 <__aeabi_dcmpeq>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	d0c1      	beq.n	800cee6 <_strtod_l+0x8de>
 800cf62:	e611      	b.n	800cb88 <_strtod_l+0x580>
 800cf64:	fffffc02 	.word	0xfffffc02
 800cf68:	7ff00000 	.word	0x7ff00000
 800cf6c:	39500000 	.word	0x39500000
 800cf70:	000fffff 	.word	0x000fffff
 800cf74:	7fefffff 	.word	0x7fefffff
 800cf78:	08011a30 	.word	0x08011a30
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f002 fb12 	bl	800f5a8 <__ratio>
 800cf84:	ec59 8b10 	vmov	r8, r9, d0
 800cf88:	ee10 0a10 	vmov	r0, s0
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf92:	4649      	mov	r1, r9
 800cf94:	f7f3 fdcc 	bl	8000b30 <__aeabi_dcmple>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d07a      	beq.n	800d092 <_strtod_l+0xa8a>
 800cf9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d04a      	beq.n	800d038 <_strtod_l+0xa30>
 800cfa2:	4b95      	ldr	r3, [pc, #596]	; (800d1f8 <_strtod_l+0xbf0>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d1f8 <_strtod_l+0xbf0>
 800cfae:	f04f 0800 	mov.w	r8, #0
 800cfb2:	4b92      	ldr	r3, [pc, #584]	; (800d1fc <_strtod_l+0xbf4>)
 800cfb4:	403b      	ands	r3, r7
 800cfb6:	930d      	str	r3, [sp, #52]	; 0x34
 800cfb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cfba:	4b91      	ldr	r3, [pc, #580]	; (800d200 <_strtod_l+0xbf8>)
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	f040 80b0 	bne.w	800d122 <_strtod_l+0xb1a>
 800cfc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfc6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cfca:	ec4b ab10 	vmov	d0, sl, fp
 800cfce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfd2:	f002 fa11 	bl	800f3f8 <__ulp>
 800cfd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfda:	ec53 2b10 	vmov	r2, r3, d0
 800cfde:	f7f3 fb2b 	bl	8000638 <__aeabi_dmul>
 800cfe2:	4652      	mov	r2, sl
 800cfe4:	465b      	mov	r3, fp
 800cfe6:	f7f3 f971 	bl	80002cc <__adddf3>
 800cfea:	460b      	mov	r3, r1
 800cfec:	4983      	ldr	r1, [pc, #524]	; (800d1fc <_strtod_l+0xbf4>)
 800cfee:	4a85      	ldr	r2, [pc, #532]	; (800d204 <_strtod_l+0xbfc>)
 800cff0:	4019      	ands	r1, r3
 800cff2:	4291      	cmp	r1, r2
 800cff4:	4682      	mov	sl, r0
 800cff6:	d960      	bls.n	800d0ba <_strtod_l+0xab2>
 800cff8:	ee18 3a90 	vmov	r3, s17
 800cffc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d000:	4293      	cmp	r3, r2
 800d002:	d104      	bne.n	800d00e <_strtod_l+0xa06>
 800d004:	ee18 3a10 	vmov	r3, s16
 800d008:	3301      	adds	r3, #1
 800d00a:	f43f ad45 	beq.w	800ca98 <_strtod_l+0x490>
 800d00e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d210 <_strtod_l+0xc08>
 800d012:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d016:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d018:	4620      	mov	r0, r4
 800d01a:	f001 febb 	bl	800ed94 <_Bfree>
 800d01e:	9905      	ldr	r1, [sp, #20]
 800d020:	4620      	mov	r0, r4
 800d022:	f001 feb7 	bl	800ed94 <_Bfree>
 800d026:	4631      	mov	r1, r6
 800d028:	4620      	mov	r0, r4
 800d02a:	f001 feb3 	bl	800ed94 <_Bfree>
 800d02e:	4629      	mov	r1, r5
 800d030:	4620      	mov	r0, r4
 800d032:	f001 feaf 	bl	800ed94 <_Bfree>
 800d036:	e61a      	b.n	800cc6e <_strtod_l+0x666>
 800d038:	f1ba 0f00 	cmp.w	sl, #0
 800d03c:	d11b      	bne.n	800d076 <_strtod_l+0xa6e>
 800d03e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d042:	b9f3      	cbnz	r3, 800d082 <_strtod_l+0xa7a>
 800d044:	4b6c      	ldr	r3, [pc, #432]	; (800d1f8 <_strtod_l+0xbf0>)
 800d046:	2200      	movs	r2, #0
 800d048:	4640      	mov	r0, r8
 800d04a:	4649      	mov	r1, r9
 800d04c:	f7f3 fd66 	bl	8000b1c <__aeabi_dcmplt>
 800d050:	b9d0      	cbnz	r0, 800d088 <_strtod_l+0xa80>
 800d052:	4640      	mov	r0, r8
 800d054:	4649      	mov	r1, r9
 800d056:	4b6c      	ldr	r3, [pc, #432]	; (800d208 <_strtod_l+0xc00>)
 800d058:	2200      	movs	r2, #0
 800d05a:	f7f3 faed 	bl	8000638 <__aeabi_dmul>
 800d05e:	4680      	mov	r8, r0
 800d060:	4689      	mov	r9, r1
 800d062:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d066:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d06a:	9315      	str	r3, [sp, #84]	; 0x54
 800d06c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d070:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d074:	e79d      	b.n	800cfb2 <_strtod_l+0x9aa>
 800d076:	f1ba 0f01 	cmp.w	sl, #1
 800d07a:	d102      	bne.n	800d082 <_strtod_l+0xa7a>
 800d07c:	2f00      	cmp	r7, #0
 800d07e:	f43f ad83 	beq.w	800cb88 <_strtod_l+0x580>
 800d082:	4b62      	ldr	r3, [pc, #392]	; (800d20c <_strtod_l+0xc04>)
 800d084:	2200      	movs	r2, #0
 800d086:	e78e      	b.n	800cfa6 <_strtod_l+0x99e>
 800d088:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d208 <_strtod_l+0xc00>
 800d08c:	f04f 0800 	mov.w	r8, #0
 800d090:	e7e7      	b.n	800d062 <_strtod_l+0xa5a>
 800d092:	4b5d      	ldr	r3, [pc, #372]	; (800d208 <_strtod_l+0xc00>)
 800d094:	4640      	mov	r0, r8
 800d096:	4649      	mov	r1, r9
 800d098:	2200      	movs	r2, #0
 800d09a:	f7f3 facd 	bl	8000638 <__aeabi_dmul>
 800d09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0a0:	4680      	mov	r8, r0
 800d0a2:	4689      	mov	r9, r1
 800d0a4:	b933      	cbnz	r3, 800d0b4 <_strtod_l+0xaac>
 800d0a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0aa:	900e      	str	r0, [sp, #56]	; 0x38
 800d0ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0b2:	e7dd      	b.n	800d070 <_strtod_l+0xa68>
 800d0b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d0b8:	e7f9      	b.n	800d0ae <_strtod_l+0xaa6>
 800d0ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d0be:	9b04      	ldr	r3, [sp, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1a8      	bne.n	800d016 <_strtod_l+0xa0e>
 800d0c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d0c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0ca:	0d1b      	lsrs	r3, r3, #20
 800d0cc:	051b      	lsls	r3, r3, #20
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d1a1      	bne.n	800d016 <_strtod_l+0xa0e>
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	f7f3 fe0f 	bl	8000cf8 <__aeabi_d2lz>
 800d0da:	f7f3 fa7f 	bl	80005dc <__aeabi_l2d>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	f7f3 f8ef 	bl	80002c8 <__aeabi_dsub>
 800d0ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0f0:	ea43 030a 	orr.w	r3, r3, sl
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	4680      	mov	r8, r0
 800d0f8:	4689      	mov	r9, r1
 800d0fa:	d055      	beq.n	800d1a8 <_strtod_l+0xba0>
 800d0fc:	a336      	add	r3, pc, #216	; (adr r3, 800d1d8 <_strtod_l+0xbd0>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 fd0b 	bl	8000b1c <__aeabi_dcmplt>
 800d106:	2800      	cmp	r0, #0
 800d108:	f47f acd0 	bne.w	800caac <_strtod_l+0x4a4>
 800d10c:	a334      	add	r3, pc, #208	; (adr r3, 800d1e0 <_strtod_l+0xbd8>)
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	4640      	mov	r0, r8
 800d114:	4649      	mov	r1, r9
 800d116:	f7f3 fd1f 	bl	8000b58 <__aeabi_dcmpgt>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	f43f af7b 	beq.w	800d016 <_strtod_l+0xa0e>
 800d120:	e4c4      	b.n	800caac <_strtod_l+0x4a4>
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	b333      	cbz	r3, 800d174 <_strtod_l+0xb6c>
 800d126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d128:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d12c:	d822      	bhi.n	800d174 <_strtod_l+0xb6c>
 800d12e:	a32e      	add	r3, pc, #184	; (adr r3, 800d1e8 <_strtod_l+0xbe0>)
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	4640      	mov	r0, r8
 800d136:	4649      	mov	r1, r9
 800d138:	f7f3 fcfa 	bl	8000b30 <__aeabi_dcmple>
 800d13c:	b1a0      	cbz	r0, 800d168 <_strtod_l+0xb60>
 800d13e:	4649      	mov	r1, r9
 800d140:	4640      	mov	r0, r8
 800d142:	f7f3 fd51 	bl	8000be8 <__aeabi_d2uiz>
 800d146:	2801      	cmp	r0, #1
 800d148:	bf38      	it	cc
 800d14a:	2001      	movcc	r0, #1
 800d14c:	f7f3 f9fa 	bl	8000544 <__aeabi_ui2d>
 800d150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d152:	4680      	mov	r8, r0
 800d154:	4689      	mov	r9, r1
 800d156:	bb23      	cbnz	r3, 800d1a2 <_strtod_l+0xb9a>
 800d158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d15c:	9010      	str	r0, [sp, #64]	; 0x40
 800d15e:	9311      	str	r3, [sp, #68]	; 0x44
 800d160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d164:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d16c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d170:	1a9b      	subs	r3, r3, r2
 800d172:	9309      	str	r3, [sp, #36]	; 0x24
 800d174:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d178:	eeb0 0a48 	vmov.f32	s0, s16
 800d17c:	eef0 0a68 	vmov.f32	s1, s17
 800d180:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d184:	f002 f938 	bl	800f3f8 <__ulp>
 800d188:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d18c:	ec53 2b10 	vmov	r2, r3, d0
 800d190:	f7f3 fa52 	bl	8000638 <__aeabi_dmul>
 800d194:	ec53 2b18 	vmov	r2, r3, d8
 800d198:	f7f3 f898 	bl	80002cc <__adddf3>
 800d19c:	4682      	mov	sl, r0
 800d19e:	468b      	mov	fp, r1
 800d1a0:	e78d      	b.n	800d0be <_strtod_l+0xab6>
 800d1a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d1a6:	e7db      	b.n	800d160 <_strtod_l+0xb58>
 800d1a8:	a311      	add	r3, pc, #68	; (adr r3, 800d1f0 <_strtod_l+0xbe8>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	f7f3 fcb5 	bl	8000b1c <__aeabi_dcmplt>
 800d1b2:	e7b2      	b.n	800d11a <_strtod_l+0xb12>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d1b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1bc:	6013      	str	r3, [r2, #0]
 800d1be:	f7ff ba6b 	b.w	800c698 <_strtod_l+0x90>
 800d1c2:	2a65      	cmp	r2, #101	; 0x65
 800d1c4:	f43f ab5f 	beq.w	800c886 <_strtod_l+0x27e>
 800d1c8:	2a45      	cmp	r2, #69	; 0x45
 800d1ca:	f43f ab5c 	beq.w	800c886 <_strtod_l+0x27e>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	f7ff bb94 	b.w	800c8fc <_strtod_l+0x2f4>
 800d1d4:	f3af 8000 	nop.w
 800d1d8:	94a03595 	.word	0x94a03595
 800d1dc:	3fdfffff 	.word	0x3fdfffff
 800d1e0:	35afe535 	.word	0x35afe535
 800d1e4:	3fe00000 	.word	0x3fe00000
 800d1e8:	ffc00000 	.word	0xffc00000
 800d1ec:	41dfffff 	.word	0x41dfffff
 800d1f0:	94a03595 	.word	0x94a03595
 800d1f4:	3fcfffff 	.word	0x3fcfffff
 800d1f8:	3ff00000 	.word	0x3ff00000
 800d1fc:	7ff00000 	.word	0x7ff00000
 800d200:	7fe00000 	.word	0x7fe00000
 800d204:	7c9fffff 	.word	0x7c9fffff
 800d208:	3fe00000 	.word	0x3fe00000
 800d20c:	bff00000 	.word	0xbff00000
 800d210:	7fefffff 	.word	0x7fefffff

0800d214 <strtod>:
 800d214:	460a      	mov	r2, r1
 800d216:	4601      	mov	r1, r0
 800d218:	4802      	ldr	r0, [pc, #8]	; (800d224 <strtod+0x10>)
 800d21a:	4b03      	ldr	r3, [pc, #12]	; (800d228 <strtod+0x14>)
 800d21c:	6800      	ldr	r0, [r0, #0]
 800d21e:	f7ff b9f3 	b.w	800c608 <_strtod_l>
 800d222:	bf00      	nop
 800d224:	2000004c 	.word	0x2000004c
 800d228:	200000b4 	.word	0x200000b4

0800d22c <_strtol_l.constprop.0>:
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d232:	d001      	beq.n	800d238 <_strtol_l.constprop.0+0xc>
 800d234:	2b24      	cmp	r3, #36	; 0x24
 800d236:	d906      	bls.n	800d246 <_strtol_l.constprop.0+0x1a>
 800d238:	f7fe fc90 	bl	800bb5c <__errno>
 800d23c:	2316      	movs	r3, #22
 800d23e:	6003      	str	r3, [r0, #0]
 800d240:	2000      	movs	r0, #0
 800d242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d246:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d32c <_strtol_l.constprop.0+0x100>
 800d24a:	460d      	mov	r5, r1
 800d24c:	462e      	mov	r6, r5
 800d24e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d252:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d256:	f017 0708 	ands.w	r7, r7, #8
 800d25a:	d1f7      	bne.n	800d24c <_strtol_l.constprop.0+0x20>
 800d25c:	2c2d      	cmp	r4, #45	; 0x2d
 800d25e:	d132      	bne.n	800d2c6 <_strtol_l.constprop.0+0x9a>
 800d260:	782c      	ldrb	r4, [r5, #0]
 800d262:	2701      	movs	r7, #1
 800d264:	1cb5      	adds	r5, r6, #2
 800d266:	2b00      	cmp	r3, #0
 800d268:	d05b      	beq.n	800d322 <_strtol_l.constprop.0+0xf6>
 800d26a:	2b10      	cmp	r3, #16
 800d26c:	d109      	bne.n	800d282 <_strtol_l.constprop.0+0x56>
 800d26e:	2c30      	cmp	r4, #48	; 0x30
 800d270:	d107      	bne.n	800d282 <_strtol_l.constprop.0+0x56>
 800d272:	782c      	ldrb	r4, [r5, #0]
 800d274:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d278:	2c58      	cmp	r4, #88	; 0x58
 800d27a:	d14d      	bne.n	800d318 <_strtol_l.constprop.0+0xec>
 800d27c:	786c      	ldrb	r4, [r5, #1]
 800d27e:	2310      	movs	r3, #16
 800d280:	3502      	adds	r5, #2
 800d282:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d286:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d28a:	f04f 0c00 	mov.w	ip, #0
 800d28e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d292:	4666      	mov	r6, ip
 800d294:	fb03 8a19 	mls	sl, r3, r9, r8
 800d298:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d29c:	f1be 0f09 	cmp.w	lr, #9
 800d2a0:	d816      	bhi.n	800d2d0 <_strtol_l.constprop.0+0xa4>
 800d2a2:	4674      	mov	r4, lr
 800d2a4:	42a3      	cmp	r3, r4
 800d2a6:	dd24      	ble.n	800d2f2 <_strtol_l.constprop.0+0xc6>
 800d2a8:	f1bc 0f00 	cmp.w	ip, #0
 800d2ac:	db1e      	blt.n	800d2ec <_strtol_l.constprop.0+0xc0>
 800d2ae:	45b1      	cmp	r9, r6
 800d2b0:	d31c      	bcc.n	800d2ec <_strtol_l.constprop.0+0xc0>
 800d2b2:	d101      	bne.n	800d2b8 <_strtol_l.constprop.0+0x8c>
 800d2b4:	45a2      	cmp	sl, r4
 800d2b6:	db19      	blt.n	800d2ec <_strtol_l.constprop.0+0xc0>
 800d2b8:	fb06 4603 	mla	r6, r6, r3, r4
 800d2bc:	f04f 0c01 	mov.w	ip, #1
 800d2c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2c4:	e7e8      	b.n	800d298 <_strtol_l.constprop.0+0x6c>
 800d2c6:	2c2b      	cmp	r4, #43	; 0x2b
 800d2c8:	bf04      	itt	eq
 800d2ca:	782c      	ldrbeq	r4, [r5, #0]
 800d2cc:	1cb5      	addeq	r5, r6, #2
 800d2ce:	e7ca      	b.n	800d266 <_strtol_l.constprop.0+0x3a>
 800d2d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d2d4:	f1be 0f19 	cmp.w	lr, #25
 800d2d8:	d801      	bhi.n	800d2de <_strtol_l.constprop.0+0xb2>
 800d2da:	3c37      	subs	r4, #55	; 0x37
 800d2dc:	e7e2      	b.n	800d2a4 <_strtol_l.constprop.0+0x78>
 800d2de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d2e2:	f1be 0f19 	cmp.w	lr, #25
 800d2e6:	d804      	bhi.n	800d2f2 <_strtol_l.constprop.0+0xc6>
 800d2e8:	3c57      	subs	r4, #87	; 0x57
 800d2ea:	e7db      	b.n	800d2a4 <_strtol_l.constprop.0+0x78>
 800d2ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d2f0:	e7e6      	b.n	800d2c0 <_strtol_l.constprop.0+0x94>
 800d2f2:	f1bc 0f00 	cmp.w	ip, #0
 800d2f6:	da05      	bge.n	800d304 <_strtol_l.constprop.0+0xd8>
 800d2f8:	2322      	movs	r3, #34	; 0x22
 800d2fa:	6003      	str	r3, [r0, #0]
 800d2fc:	4646      	mov	r6, r8
 800d2fe:	b942      	cbnz	r2, 800d312 <_strtol_l.constprop.0+0xe6>
 800d300:	4630      	mov	r0, r6
 800d302:	e79e      	b.n	800d242 <_strtol_l.constprop.0+0x16>
 800d304:	b107      	cbz	r7, 800d308 <_strtol_l.constprop.0+0xdc>
 800d306:	4276      	negs	r6, r6
 800d308:	2a00      	cmp	r2, #0
 800d30a:	d0f9      	beq.n	800d300 <_strtol_l.constprop.0+0xd4>
 800d30c:	f1bc 0f00 	cmp.w	ip, #0
 800d310:	d000      	beq.n	800d314 <_strtol_l.constprop.0+0xe8>
 800d312:	1e69      	subs	r1, r5, #1
 800d314:	6011      	str	r1, [r2, #0]
 800d316:	e7f3      	b.n	800d300 <_strtol_l.constprop.0+0xd4>
 800d318:	2430      	movs	r4, #48	; 0x30
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1b1      	bne.n	800d282 <_strtol_l.constprop.0+0x56>
 800d31e:	2308      	movs	r3, #8
 800d320:	e7af      	b.n	800d282 <_strtol_l.constprop.0+0x56>
 800d322:	2c30      	cmp	r4, #48	; 0x30
 800d324:	d0a5      	beq.n	800d272 <_strtol_l.constprop.0+0x46>
 800d326:	230a      	movs	r3, #10
 800d328:	e7ab      	b.n	800d282 <_strtol_l.constprop.0+0x56>
 800d32a:	bf00      	nop
 800d32c:	08011a59 	.word	0x08011a59

0800d330 <strtol>:
 800d330:	4613      	mov	r3, r2
 800d332:	460a      	mov	r2, r1
 800d334:	4601      	mov	r1, r0
 800d336:	4802      	ldr	r0, [pc, #8]	; (800d340 <strtol+0x10>)
 800d338:	6800      	ldr	r0, [r0, #0]
 800d33a:	f7ff bf77 	b.w	800d22c <_strtol_l.constprop.0>
 800d33e:	bf00      	nop
 800d340:	2000004c 	.word	0x2000004c

0800d344 <__swbuf_r>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	460e      	mov	r6, r1
 800d348:	4614      	mov	r4, r2
 800d34a:	4605      	mov	r5, r0
 800d34c:	b118      	cbz	r0, 800d356 <__swbuf_r+0x12>
 800d34e:	6983      	ldr	r3, [r0, #24]
 800d350:	b90b      	cbnz	r3, 800d356 <__swbuf_r+0x12>
 800d352:	f001 f84d 	bl	800e3f0 <__sinit>
 800d356:	4b21      	ldr	r3, [pc, #132]	; (800d3dc <__swbuf_r+0x98>)
 800d358:	429c      	cmp	r4, r3
 800d35a:	d12b      	bne.n	800d3b4 <__swbuf_r+0x70>
 800d35c:	686c      	ldr	r4, [r5, #4]
 800d35e:	69a3      	ldr	r3, [r4, #24]
 800d360:	60a3      	str	r3, [r4, #8]
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	071a      	lsls	r2, r3, #28
 800d366:	d52f      	bpl.n	800d3c8 <__swbuf_r+0x84>
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	b36b      	cbz	r3, 800d3c8 <__swbuf_r+0x84>
 800d36c:	6923      	ldr	r3, [r4, #16]
 800d36e:	6820      	ldr	r0, [r4, #0]
 800d370:	1ac0      	subs	r0, r0, r3
 800d372:	6963      	ldr	r3, [r4, #20]
 800d374:	b2f6      	uxtb	r6, r6
 800d376:	4283      	cmp	r3, r0
 800d378:	4637      	mov	r7, r6
 800d37a:	dc04      	bgt.n	800d386 <__swbuf_r+0x42>
 800d37c:	4621      	mov	r1, r4
 800d37e:	4628      	mov	r0, r5
 800d380:	f000 ffa2 	bl	800e2c8 <_fflush_r>
 800d384:	bb30      	cbnz	r0, 800d3d4 <__swbuf_r+0x90>
 800d386:	68a3      	ldr	r3, [r4, #8]
 800d388:	3b01      	subs	r3, #1
 800d38a:	60a3      	str	r3, [r4, #8]
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	6022      	str	r2, [r4, #0]
 800d392:	701e      	strb	r6, [r3, #0]
 800d394:	6963      	ldr	r3, [r4, #20]
 800d396:	3001      	adds	r0, #1
 800d398:	4283      	cmp	r3, r0
 800d39a:	d004      	beq.n	800d3a6 <__swbuf_r+0x62>
 800d39c:	89a3      	ldrh	r3, [r4, #12]
 800d39e:	07db      	lsls	r3, r3, #31
 800d3a0:	d506      	bpl.n	800d3b0 <__swbuf_r+0x6c>
 800d3a2:	2e0a      	cmp	r6, #10
 800d3a4:	d104      	bne.n	800d3b0 <__swbuf_r+0x6c>
 800d3a6:	4621      	mov	r1, r4
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	f000 ff8d 	bl	800e2c8 <_fflush_r>
 800d3ae:	b988      	cbnz	r0, 800d3d4 <__swbuf_r+0x90>
 800d3b0:	4638      	mov	r0, r7
 800d3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3b4:	4b0a      	ldr	r3, [pc, #40]	; (800d3e0 <__swbuf_r+0x9c>)
 800d3b6:	429c      	cmp	r4, r3
 800d3b8:	d101      	bne.n	800d3be <__swbuf_r+0x7a>
 800d3ba:	68ac      	ldr	r4, [r5, #8]
 800d3bc:	e7cf      	b.n	800d35e <__swbuf_r+0x1a>
 800d3be:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <__swbuf_r+0xa0>)
 800d3c0:	429c      	cmp	r4, r3
 800d3c2:	bf08      	it	eq
 800d3c4:	68ec      	ldreq	r4, [r5, #12]
 800d3c6:	e7ca      	b.n	800d35e <__swbuf_r+0x1a>
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f000 f80c 	bl	800d3e8 <__swsetup_r>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d0cb      	beq.n	800d36c <__swbuf_r+0x28>
 800d3d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d3d8:	e7ea      	b.n	800d3b0 <__swbuf_r+0x6c>
 800d3da:	bf00      	nop
 800d3dc:	08011c0c 	.word	0x08011c0c
 800d3e0:	08011c2c 	.word	0x08011c2c
 800d3e4:	08011bec 	.word	0x08011bec

0800d3e8 <__swsetup_r>:
 800d3e8:	4b32      	ldr	r3, [pc, #200]	; (800d4b4 <__swsetup_r+0xcc>)
 800d3ea:	b570      	push	{r4, r5, r6, lr}
 800d3ec:	681d      	ldr	r5, [r3, #0]
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	b125      	cbz	r5, 800d3fe <__swsetup_r+0x16>
 800d3f4:	69ab      	ldr	r3, [r5, #24]
 800d3f6:	b913      	cbnz	r3, 800d3fe <__swsetup_r+0x16>
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f000 fff9 	bl	800e3f0 <__sinit>
 800d3fe:	4b2e      	ldr	r3, [pc, #184]	; (800d4b8 <__swsetup_r+0xd0>)
 800d400:	429c      	cmp	r4, r3
 800d402:	d10f      	bne.n	800d424 <__swsetup_r+0x3c>
 800d404:	686c      	ldr	r4, [r5, #4]
 800d406:	89a3      	ldrh	r3, [r4, #12]
 800d408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d40c:	0719      	lsls	r1, r3, #28
 800d40e:	d42c      	bmi.n	800d46a <__swsetup_r+0x82>
 800d410:	06dd      	lsls	r5, r3, #27
 800d412:	d411      	bmi.n	800d438 <__swsetup_r+0x50>
 800d414:	2309      	movs	r3, #9
 800d416:	6033      	str	r3, [r6, #0]
 800d418:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d41c:	81a3      	strh	r3, [r4, #12]
 800d41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d422:	e03e      	b.n	800d4a2 <__swsetup_r+0xba>
 800d424:	4b25      	ldr	r3, [pc, #148]	; (800d4bc <__swsetup_r+0xd4>)
 800d426:	429c      	cmp	r4, r3
 800d428:	d101      	bne.n	800d42e <__swsetup_r+0x46>
 800d42a:	68ac      	ldr	r4, [r5, #8]
 800d42c:	e7eb      	b.n	800d406 <__swsetup_r+0x1e>
 800d42e:	4b24      	ldr	r3, [pc, #144]	; (800d4c0 <__swsetup_r+0xd8>)
 800d430:	429c      	cmp	r4, r3
 800d432:	bf08      	it	eq
 800d434:	68ec      	ldreq	r4, [r5, #12]
 800d436:	e7e6      	b.n	800d406 <__swsetup_r+0x1e>
 800d438:	0758      	lsls	r0, r3, #29
 800d43a:	d512      	bpl.n	800d462 <__swsetup_r+0x7a>
 800d43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d43e:	b141      	cbz	r1, 800d452 <__swsetup_r+0x6a>
 800d440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d444:	4299      	cmp	r1, r3
 800d446:	d002      	beq.n	800d44e <__swsetup_r+0x66>
 800d448:	4630      	mov	r0, r6
 800d44a:	f002 f93b 	bl	800f6c4 <_free_r>
 800d44e:	2300      	movs	r3, #0
 800d450:	6363      	str	r3, [r4, #52]	; 0x34
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d458:	81a3      	strh	r3, [r4, #12]
 800d45a:	2300      	movs	r3, #0
 800d45c:	6063      	str	r3, [r4, #4]
 800d45e:	6923      	ldr	r3, [r4, #16]
 800d460:	6023      	str	r3, [r4, #0]
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	f043 0308 	orr.w	r3, r3, #8
 800d468:	81a3      	strh	r3, [r4, #12]
 800d46a:	6923      	ldr	r3, [r4, #16]
 800d46c:	b94b      	cbnz	r3, 800d482 <__swsetup_r+0x9a>
 800d46e:	89a3      	ldrh	r3, [r4, #12]
 800d470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d478:	d003      	beq.n	800d482 <__swsetup_r+0x9a>
 800d47a:	4621      	mov	r1, r4
 800d47c:	4630      	mov	r0, r6
 800d47e:	f001 fbef 	bl	800ec60 <__smakebuf_r>
 800d482:	89a0      	ldrh	r0, [r4, #12]
 800d484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d488:	f010 0301 	ands.w	r3, r0, #1
 800d48c:	d00a      	beq.n	800d4a4 <__swsetup_r+0xbc>
 800d48e:	2300      	movs	r3, #0
 800d490:	60a3      	str	r3, [r4, #8]
 800d492:	6963      	ldr	r3, [r4, #20]
 800d494:	425b      	negs	r3, r3
 800d496:	61a3      	str	r3, [r4, #24]
 800d498:	6923      	ldr	r3, [r4, #16]
 800d49a:	b943      	cbnz	r3, 800d4ae <__swsetup_r+0xc6>
 800d49c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4a0:	d1ba      	bne.n	800d418 <__swsetup_r+0x30>
 800d4a2:	bd70      	pop	{r4, r5, r6, pc}
 800d4a4:	0781      	lsls	r1, r0, #30
 800d4a6:	bf58      	it	pl
 800d4a8:	6963      	ldrpl	r3, [r4, #20]
 800d4aa:	60a3      	str	r3, [r4, #8]
 800d4ac:	e7f4      	b.n	800d498 <__swsetup_r+0xb0>
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	e7f7      	b.n	800d4a2 <__swsetup_r+0xba>
 800d4b2:	bf00      	nop
 800d4b4:	2000004c 	.word	0x2000004c
 800d4b8:	08011c0c 	.word	0x08011c0c
 800d4bc:	08011c2c 	.word	0x08011c2c
 800d4c0:	08011bec 	.word	0x08011bec

0800d4c4 <quorem>:
 800d4c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	6903      	ldr	r3, [r0, #16]
 800d4ca:	690c      	ldr	r4, [r1, #16]
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	f2c0 8081 	blt.w	800d5d6 <quorem+0x112>
 800d4d4:	3c01      	subs	r4, #1
 800d4d6:	f101 0814 	add.w	r8, r1, #20
 800d4da:	f100 0514 	add.w	r5, r0, #20
 800d4de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4e2:	9301      	str	r3, [sp, #4]
 800d4e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4fc:	d331      	bcc.n	800d562 <quorem+0x9e>
 800d4fe:	f04f 0e00 	mov.w	lr, #0
 800d502:	4640      	mov	r0, r8
 800d504:	46ac      	mov	ip, r5
 800d506:	46f2      	mov	sl, lr
 800d508:	f850 2b04 	ldr.w	r2, [r0], #4
 800d50c:	b293      	uxth	r3, r2
 800d50e:	fb06 e303 	mla	r3, r6, r3, lr
 800d512:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d516:	b29b      	uxth	r3, r3
 800d518:	ebaa 0303 	sub.w	r3, sl, r3
 800d51c:	f8dc a000 	ldr.w	sl, [ip]
 800d520:	0c12      	lsrs	r2, r2, #16
 800d522:	fa13 f38a 	uxtah	r3, r3, sl
 800d526:	fb06 e202 	mla	r2, r6, r2, lr
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	9b00      	ldr	r3, [sp, #0]
 800d52e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d532:	b292      	uxth	r2, r2
 800d534:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d53c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d540:	4581      	cmp	r9, r0
 800d542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d546:	f84c 3b04 	str.w	r3, [ip], #4
 800d54a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d54e:	d2db      	bcs.n	800d508 <quorem+0x44>
 800d550:	f855 300b 	ldr.w	r3, [r5, fp]
 800d554:	b92b      	cbnz	r3, 800d562 <quorem+0x9e>
 800d556:	9b01      	ldr	r3, [sp, #4]
 800d558:	3b04      	subs	r3, #4
 800d55a:	429d      	cmp	r5, r3
 800d55c:	461a      	mov	r2, r3
 800d55e:	d32e      	bcc.n	800d5be <quorem+0xfa>
 800d560:	613c      	str	r4, [r7, #16]
 800d562:	4638      	mov	r0, r7
 800d564:	f001 fea2 	bl	800f2ac <__mcmp>
 800d568:	2800      	cmp	r0, #0
 800d56a:	db24      	blt.n	800d5b6 <quorem+0xf2>
 800d56c:	3601      	adds	r6, #1
 800d56e:	4628      	mov	r0, r5
 800d570:	f04f 0c00 	mov.w	ip, #0
 800d574:	f858 2b04 	ldr.w	r2, [r8], #4
 800d578:	f8d0 e000 	ldr.w	lr, [r0]
 800d57c:	b293      	uxth	r3, r2
 800d57e:	ebac 0303 	sub.w	r3, ip, r3
 800d582:	0c12      	lsrs	r2, r2, #16
 800d584:	fa13 f38e 	uxtah	r3, r3, lr
 800d588:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d58c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d590:	b29b      	uxth	r3, r3
 800d592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d596:	45c1      	cmp	r9, r8
 800d598:	f840 3b04 	str.w	r3, [r0], #4
 800d59c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5a0:	d2e8      	bcs.n	800d574 <quorem+0xb0>
 800d5a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5aa:	b922      	cbnz	r2, 800d5b6 <quorem+0xf2>
 800d5ac:	3b04      	subs	r3, #4
 800d5ae:	429d      	cmp	r5, r3
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	d30a      	bcc.n	800d5ca <quorem+0x106>
 800d5b4:	613c      	str	r4, [r7, #16]
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	b003      	add	sp, #12
 800d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5be:	6812      	ldr	r2, [r2, #0]
 800d5c0:	3b04      	subs	r3, #4
 800d5c2:	2a00      	cmp	r2, #0
 800d5c4:	d1cc      	bne.n	800d560 <quorem+0x9c>
 800d5c6:	3c01      	subs	r4, #1
 800d5c8:	e7c7      	b.n	800d55a <quorem+0x96>
 800d5ca:	6812      	ldr	r2, [r2, #0]
 800d5cc:	3b04      	subs	r3, #4
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	d1f0      	bne.n	800d5b4 <quorem+0xf0>
 800d5d2:	3c01      	subs	r4, #1
 800d5d4:	e7eb      	b.n	800d5ae <quorem+0xea>
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	e7ee      	b.n	800d5b8 <quorem+0xf4>
 800d5da:	0000      	movs	r0, r0
 800d5dc:	0000      	movs	r0, r0
	...

0800d5e0 <_dtoa_r>:
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	ed2d 8b04 	vpush	{d8-d9}
 800d5e8:	ec57 6b10 	vmov	r6, r7, d0
 800d5ec:	b093      	sub	sp, #76	; 0x4c
 800d5ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5f4:	9106      	str	r1, [sp, #24]
 800d5f6:	ee10 aa10 	vmov	sl, s0
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d5fe:	930c      	str	r3, [sp, #48]	; 0x30
 800d600:	46bb      	mov	fp, r7
 800d602:	b975      	cbnz	r5, 800d622 <_dtoa_r+0x42>
 800d604:	2010      	movs	r0, #16
 800d606:	f001 fb6b 	bl	800ece0 <malloc>
 800d60a:	4602      	mov	r2, r0
 800d60c:	6260      	str	r0, [r4, #36]	; 0x24
 800d60e:	b920      	cbnz	r0, 800d61a <_dtoa_r+0x3a>
 800d610:	4ba7      	ldr	r3, [pc, #668]	; (800d8b0 <_dtoa_r+0x2d0>)
 800d612:	21ea      	movs	r1, #234	; 0xea
 800d614:	48a7      	ldr	r0, [pc, #668]	; (800d8b4 <_dtoa_r+0x2d4>)
 800d616:	f002 fb1d 	bl	800fc54 <__assert_func>
 800d61a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d61e:	6005      	str	r5, [r0, #0]
 800d620:	60c5      	str	r5, [r0, #12]
 800d622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d624:	6819      	ldr	r1, [r3, #0]
 800d626:	b151      	cbz	r1, 800d63e <_dtoa_r+0x5e>
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	604a      	str	r2, [r1, #4]
 800d62c:	2301      	movs	r3, #1
 800d62e:	4093      	lsls	r3, r2
 800d630:	608b      	str	r3, [r1, #8]
 800d632:	4620      	mov	r0, r4
 800d634:	f001 fbae 	bl	800ed94 <_Bfree>
 800d638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d63a:	2200      	movs	r2, #0
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	1e3b      	subs	r3, r7, #0
 800d640:	bfaa      	itet	ge
 800d642:	2300      	movge	r3, #0
 800d644:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d648:	f8c8 3000 	strge.w	r3, [r8]
 800d64c:	4b9a      	ldr	r3, [pc, #616]	; (800d8b8 <_dtoa_r+0x2d8>)
 800d64e:	bfbc      	itt	lt
 800d650:	2201      	movlt	r2, #1
 800d652:	f8c8 2000 	strlt.w	r2, [r8]
 800d656:	ea33 030b 	bics.w	r3, r3, fp
 800d65a:	d11b      	bne.n	800d694 <_dtoa_r+0xb4>
 800d65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d65e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d662:	6013      	str	r3, [r2, #0]
 800d664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d668:	4333      	orrs	r3, r6
 800d66a:	f000 8592 	beq.w	800e192 <_dtoa_r+0xbb2>
 800d66e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d670:	b963      	cbnz	r3, 800d68c <_dtoa_r+0xac>
 800d672:	4b92      	ldr	r3, [pc, #584]	; (800d8bc <_dtoa_r+0x2dc>)
 800d674:	e022      	b.n	800d6bc <_dtoa_r+0xdc>
 800d676:	4b92      	ldr	r3, [pc, #584]	; (800d8c0 <_dtoa_r+0x2e0>)
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	3308      	adds	r3, #8
 800d67c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d67e:	6013      	str	r3, [r2, #0]
 800d680:	9801      	ldr	r0, [sp, #4]
 800d682:	b013      	add	sp, #76	; 0x4c
 800d684:	ecbd 8b04 	vpop	{d8-d9}
 800d688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68c:	4b8b      	ldr	r3, [pc, #556]	; (800d8bc <_dtoa_r+0x2dc>)
 800d68e:	9301      	str	r3, [sp, #4]
 800d690:	3303      	adds	r3, #3
 800d692:	e7f3      	b.n	800d67c <_dtoa_r+0x9c>
 800d694:	2200      	movs	r2, #0
 800d696:	2300      	movs	r3, #0
 800d698:	4650      	mov	r0, sl
 800d69a:	4659      	mov	r1, fp
 800d69c:	f7f3 fa34 	bl	8000b08 <__aeabi_dcmpeq>
 800d6a0:	ec4b ab19 	vmov	d9, sl, fp
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	b158      	cbz	r0, 800d6c0 <_dtoa_r+0xe0>
 800d6a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	6013      	str	r3, [r2, #0]
 800d6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 856b 	beq.w	800e18c <_dtoa_r+0xbac>
 800d6b6:	4883      	ldr	r0, [pc, #524]	; (800d8c4 <_dtoa_r+0x2e4>)
 800d6b8:	6018      	str	r0, [r3, #0]
 800d6ba:	1e43      	subs	r3, r0, #1
 800d6bc:	9301      	str	r3, [sp, #4]
 800d6be:	e7df      	b.n	800d680 <_dtoa_r+0xa0>
 800d6c0:	ec4b ab10 	vmov	d0, sl, fp
 800d6c4:	aa10      	add	r2, sp, #64	; 0x40
 800d6c6:	a911      	add	r1, sp, #68	; 0x44
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f001 ff11 	bl	800f4f0 <__d2b>
 800d6ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d6d2:	ee08 0a10 	vmov	s16, r0
 800d6d6:	2d00      	cmp	r5, #0
 800d6d8:	f000 8084 	beq.w	800d7e4 <_dtoa_r+0x204>
 800d6dc:	ee19 3a90 	vmov	r3, s19
 800d6e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d6e8:	4656      	mov	r6, sl
 800d6ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d6ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d6f6:	4b74      	ldr	r3, [pc, #464]	; (800d8c8 <_dtoa_r+0x2e8>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	4639      	mov	r1, r7
 800d6fe:	f7f2 fde3 	bl	80002c8 <__aeabi_dsub>
 800d702:	a365      	add	r3, pc, #404	; (adr r3, 800d898 <_dtoa_r+0x2b8>)
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	f7f2 ff96 	bl	8000638 <__aeabi_dmul>
 800d70c:	a364      	add	r3, pc, #400	; (adr r3, 800d8a0 <_dtoa_r+0x2c0>)
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f7f2 fddb 	bl	80002cc <__adddf3>
 800d716:	4606      	mov	r6, r0
 800d718:	4628      	mov	r0, r5
 800d71a:	460f      	mov	r7, r1
 800d71c:	f7f2 ff22 	bl	8000564 <__aeabi_i2d>
 800d720:	a361      	add	r3, pc, #388	; (adr r3, 800d8a8 <_dtoa_r+0x2c8>)
 800d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d726:	f7f2 ff87 	bl	8000638 <__aeabi_dmul>
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	4630      	mov	r0, r6
 800d730:	4639      	mov	r1, r7
 800d732:	f7f2 fdcb 	bl	80002cc <__adddf3>
 800d736:	4606      	mov	r6, r0
 800d738:	460f      	mov	r7, r1
 800d73a:	f7f3 fa2d 	bl	8000b98 <__aeabi_d2iz>
 800d73e:	2200      	movs	r2, #0
 800d740:	9000      	str	r0, [sp, #0]
 800d742:	2300      	movs	r3, #0
 800d744:	4630      	mov	r0, r6
 800d746:	4639      	mov	r1, r7
 800d748:	f7f3 f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800d74c:	b150      	cbz	r0, 800d764 <_dtoa_r+0x184>
 800d74e:	9800      	ldr	r0, [sp, #0]
 800d750:	f7f2 ff08 	bl	8000564 <__aeabi_i2d>
 800d754:	4632      	mov	r2, r6
 800d756:	463b      	mov	r3, r7
 800d758:	f7f3 f9d6 	bl	8000b08 <__aeabi_dcmpeq>
 800d75c:	b910      	cbnz	r0, 800d764 <_dtoa_r+0x184>
 800d75e:	9b00      	ldr	r3, [sp, #0]
 800d760:	3b01      	subs	r3, #1
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	9b00      	ldr	r3, [sp, #0]
 800d766:	2b16      	cmp	r3, #22
 800d768:	d85a      	bhi.n	800d820 <_dtoa_r+0x240>
 800d76a:	9a00      	ldr	r2, [sp, #0]
 800d76c:	4b57      	ldr	r3, [pc, #348]	; (800d8cc <_dtoa_r+0x2ec>)
 800d76e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d776:	ec51 0b19 	vmov	r0, r1, d9
 800d77a:	f7f3 f9cf 	bl	8000b1c <__aeabi_dcmplt>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d050      	beq.n	800d824 <_dtoa_r+0x244>
 800d782:	9b00      	ldr	r3, [sp, #0]
 800d784:	3b01      	subs	r3, #1
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	2300      	movs	r3, #0
 800d78a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d78e:	1b5d      	subs	r5, r3, r5
 800d790:	1e6b      	subs	r3, r5, #1
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	bf45      	ittet	mi
 800d796:	f1c5 0301 	rsbmi	r3, r5, #1
 800d79a:	9304      	strmi	r3, [sp, #16]
 800d79c:	2300      	movpl	r3, #0
 800d79e:	2300      	movmi	r3, #0
 800d7a0:	bf4c      	ite	mi
 800d7a2:	9305      	strmi	r3, [sp, #20]
 800d7a4:	9304      	strpl	r3, [sp, #16]
 800d7a6:	9b00      	ldr	r3, [sp, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	db3d      	blt.n	800d828 <_dtoa_r+0x248>
 800d7ac:	9b05      	ldr	r3, [sp, #20]
 800d7ae:	9a00      	ldr	r2, [sp, #0]
 800d7b0:	920a      	str	r2, [sp, #40]	; 0x28
 800d7b2:	4413      	add	r3, r2
 800d7b4:	9305      	str	r3, [sp, #20]
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	9307      	str	r3, [sp, #28]
 800d7ba:	9b06      	ldr	r3, [sp, #24]
 800d7bc:	2b09      	cmp	r3, #9
 800d7be:	f200 8089 	bhi.w	800d8d4 <_dtoa_r+0x2f4>
 800d7c2:	2b05      	cmp	r3, #5
 800d7c4:	bfc4      	itt	gt
 800d7c6:	3b04      	subgt	r3, #4
 800d7c8:	9306      	strgt	r3, [sp, #24]
 800d7ca:	9b06      	ldr	r3, [sp, #24]
 800d7cc:	f1a3 0302 	sub.w	r3, r3, #2
 800d7d0:	bfcc      	ite	gt
 800d7d2:	2500      	movgt	r5, #0
 800d7d4:	2501      	movle	r5, #1
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	f200 8087 	bhi.w	800d8ea <_dtoa_r+0x30a>
 800d7dc:	e8df f003 	tbb	[pc, r3]
 800d7e0:	59383a2d 	.word	0x59383a2d
 800d7e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d7e8:	441d      	add	r5, r3
 800d7ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7ee:	2b20      	cmp	r3, #32
 800d7f0:	bfc1      	itttt	gt
 800d7f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d7fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800d7fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d802:	bfda      	itte	le
 800d804:	f1c3 0320 	rsble	r3, r3, #32
 800d808:	fa06 f003 	lslle.w	r0, r6, r3
 800d80c:	4318      	orrgt	r0, r3
 800d80e:	f7f2 fe99 	bl	8000544 <__aeabi_ui2d>
 800d812:	2301      	movs	r3, #1
 800d814:	4606      	mov	r6, r0
 800d816:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d81a:	3d01      	subs	r5, #1
 800d81c:	930e      	str	r3, [sp, #56]	; 0x38
 800d81e:	e76a      	b.n	800d6f6 <_dtoa_r+0x116>
 800d820:	2301      	movs	r3, #1
 800d822:	e7b2      	b.n	800d78a <_dtoa_r+0x1aa>
 800d824:	900b      	str	r0, [sp, #44]	; 0x2c
 800d826:	e7b1      	b.n	800d78c <_dtoa_r+0x1ac>
 800d828:	9b04      	ldr	r3, [sp, #16]
 800d82a:	9a00      	ldr	r2, [sp, #0]
 800d82c:	1a9b      	subs	r3, r3, r2
 800d82e:	9304      	str	r3, [sp, #16]
 800d830:	4253      	negs	r3, r2
 800d832:	9307      	str	r3, [sp, #28]
 800d834:	2300      	movs	r3, #0
 800d836:	930a      	str	r3, [sp, #40]	; 0x28
 800d838:	e7bf      	b.n	800d7ba <_dtoa_r+0x1da>
 800d83a:	2300      	movs	r3, #0
 800d83c:	9308      	str	r3, [sp, #32]
 800d83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d840:	2b00      	cmp	r3, #0
 800d842:	dc55      	bgt.n	800d8f0 <_dtoa_r+0x310>
 800d844:	2301      	movs	r3, #1
 800d846:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d84a:	461a      	mov	r2, r3
 800d84c:	9209      	str	r2, [sp, #36]	; 0x24
 800d84e:	e00c      	b.n	800d86a <_dtoa_r+0x28a>
 800d850:	2301      	movs	r3, #1
 800d852:	e7f3      	b.n	800d83c <_dtoa_r+0x25c>
 800d854:	2300      	movs	r3, #0
 800d856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d858:	9308      	str	r3, [sp, #32]
 800d85a:	9b00      	ldr	r3, [sp, #0]
 800d85c:	4413      	add	r3, r2
 800d85e:	9302      	str	r3, [sp, #8]
 800d860:	3301      	adds	r3, #1
 800d862:	2b01      	cmp	r3, #1
 800d864:	9303      	str	r3, [sp, #12]
 800d866:	bfb8      	it	lt
 800d868:	2301      	movlt	r3, #1
 800d86a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d86c:	2200      	movs	r2, #0
 800d86e:	6042      	str	r2, [r0, #4]
 800d870:	2204      	movs	r2, #4
 800d872:	f102 0614 	add.w	r6, r2, #20
 800d876:	429e      	cmp	r6, r3
 800d878:	6841      	ldr	r1, [r0, #4]
 800d87a:	d93d      	bls.n	800d8f8 <_dtoa_r+0x318>
 800d87c:	4620      	mov	r0, r4
 800d87e:	f001 fa49 	bl	800ed14 <_Balloc>
 800d882:	9001      	str	r0, [sp, #4]
 800d884:	2800      	cmp	r0, #0
 800d886:	d13b      	bne.n	800d900 <_dtoa_r+0x320>
 800d888:	4b11      	ldr	r3, [pc, #68]	; (800d8d0 <_dtoa_r+0x2f0>)
 800d88a:	4602      	mov	r2, r0
 800d88c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d890:	e6c0      	b.n	800d614 <_dtoa_r+0x34>
 800d892:	2301      	movs	r3, #1
 800d894:	e7df      	b.n	800d856 <_dtoa_r+0x276>
 800d896:	bf00      	nop
 800d898:	636f4361 	.word	0x636f4361
 800d89c:	3fd287a7 	.word	0x3fd287a7
 800d8a0:	8b60c8b3 	.word	0x8b60c8b3
 800d8a4:	3fc68a28 	.word	0x3fc68a28
 800d8a8:	509f79fb 	.word	0x509f79fb
 800d8ac:	3fd34413 	.word	0x3fd34413
 800d8b0:	08011b66 	.word	0x08011b66
 800d8b4:	08011b7d 	.word	0x08011b7d
 800d8b8:	7ff00000 	.word	0x7ff00000
 800d8bc:	08011b62 	.word	0x08011b62
 800d8c0:	08011b59 	.word	0x08011b59
 800d8c4:	080119e1 	.word	0x080119e1
 800d8c8:	3ff80000 	.word	0x3ff80000
 800d8cc:	08011d50 	.word	0x08011d50
 800d8d0:	08011bd8 	.word	0x08011bd8
 800d8d4:	2501      	movs	r5, #1
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	9306      	str	r3, [sp, #24]
 800d8da:	9508      	str	r5, [sp, #32]
 800d8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2312      	movs	r3, #18
 800d8e8:	e7b0      	b.n	800d84c <_dtoa_r+0x26c>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	9308      	str	r3, [sp, #32]
 800d8ee:	e7f5      	b.n	800d8dc <_dtoa_r+0x2fc>
 800d8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8f6:	e7b8      	b.n	800d86a <_dtoa_r+0x28a>
 800d8f8:	3101      	adds	r1, #1
 800d8fa:	6041      	str	r1, [r0, #4]
 800d8fc:	0052      	lsls	r2, r2, #1
 800d8fe:	e7b8      	b.n	800d872 <_dtoa_r+0x292>
 800d900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d902:	9a01      	ldr	r2, [sp, #4]
 800d904:	601a      	str	r2, [r3, #0]
 800d906:	9b03      	ldr	r3, [sp, #12]
 800d908:	2b0e      	cmp	r3, #14
 800d90a:	f200 809d 	bhi.w	800da48 <_dtoa_r+0x468>
 800d90e:	2d00      	cmp	r5, #0
 800d910:	f000 809a 	beq.w	800da48 <_dtoa_r+0x468>
 800d914:	9b00      	ldr	r3, [sp, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	dd32      	ble.n	800d980 <_dtoa_r+0x3a0>
 800d91a:	4ab7      	ldr	r2, [pc, #732]	; (800dbf8 <_dtoa_r+0x618>)
 800d91c:	f003 030f 	and.w	r3, r3, #15
 800d920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d924:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d928:	9b00      	ldr	r3, [sp, #0]
 800d92a:	05d8      	lsls	r0, r3, #23
 800d92c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d930:	d516      	bpl.n	800d960 <_dtoa_r+0x380>
 800d932:	4bb2      	ldr	r3, [pc, #712]	; (800dbfc <_dtoa_r+0x61c>)
 800d934:	ec51 0b19 	vmov	r0, r1, d9
 800d938:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d93c:	f7f2 ffa6 	bl	800088c <__aeabi_ddiv>
 800d940:	f007 070f 	and.w	r7, r7, #15
 800d944:	4682      	mov	sl, r0
 800d946:	468b      	mov	fp, r1
 800d948:	2503      	movs	r5, #3
 800d94a:	4eac      	ldr	r6, [pc, #688]	; (800dbfc <_dtoa_r+0x61c>)
 800d94c:	b957      	cbnz	r7, 800d964 <_dtoa_r+0x384>
 800d94e:	4642      	mov	r2, r8
 800d950:	464b      	mov	r3, r9
 800d952:	4650      	mov	r0, sl
 800d954:	4659      	mov	r1, fp
 800d956:	f7f2 ff99 	bl	800088c <__aeabi_ddiv>
 800d95a:	4682      	mov	sl, r0
 800d95c:	468b      	mov	fp, r1
 800d95e:	e028      	b.n	800d9b2 <_dtoa_r+0x3d2>
 800d960:	2502      	movs	r5, #2
 800d962:	e7f2      	b.n	800d94a <_dtoa_r+0x36a>
 800d964:	07f9      	lsls	r1, r7, #31
 800d966:	d508      	bpl.n	800d97a <_dtoa_r+0x39a>
 800d968:	4640      	mov	r0, r8
 800d96a:	4649      	mov	r1, r9
 800d96c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d970:	f7f2 fe62 	bl	8000638 <__aeabi_dmul>
 800d974:	3501      	adds	r5, #1
 800d976:	4680      	mov	r8, r0
 800d978:	4689      	mov	r9, r1
 800d97a:	107f      	asrs	r7, r7, #1
 800d97c:	3608      	adds	r6, #8
 800d97e:	e7e5      	b.n	800d94c <_dtoa_r+0x36c>
 800d980:	f000 809b 	beq.w	800daba <_dtoa_r+0x4da>
 800d984:	9b00      	ldr	r3, [sp, #0]
 800d986:	4f9d      	ldr	r7, [pc, #628]	; (800dbfc <_dtoa_r+0x61c>)
 800d988:	425e      	negs	r6, r3
 800d98a:	4b9b      	ldr	r3, [pc, #620]	; (800dbf8 <_dtoa_r+0x618>)
 800d98c:	f006 020f 	and.w	r2, r6, #15
 800d990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d998:	ec51 0b19 	vmov	r0, r1, d9
 800d99c:	f7f2 fe4c 	bl	8000638 <__aeabi_dmul>
 800d9a0:	1136      	asrs	r6, r6, #4
 800d9a2:	4682      	mov	sl, r0
 800d9a4:	468b      	mov	fp, r1
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2502      	movs	r5, #2
 800d9aa:	2e00      	cmp	r6, #0
 800d9ac:	d17a      	bne.n	800daa4 <_dtoa_r+0x4c4>
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1d3      	bne.n	800d95a <_dtoa_r+0x37a>
 800d9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 8082 	beq.w	800dabe <_dtoa_r+0x4de>
 800d9ba:	4b91      	ldr	r3, [pc, #580]	; (800dc00 <_dtoa_r+0x620>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	4650      	mov	r0, sl
 800d9c0:	4659      	mov	r1, fp
 800d9c2:	f7f3 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d079      	beq.n	800dabe <_dtoa_r+0x4de>
 800d9ca:	9b03      	ldr	r3, [sp, #12]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d076      	beq.n	800dabe <_dtoa_r+0x4de>
 800d9d0:	9b02      	ldr	r3, [sp, #8]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	dd36      	ble.n	800da44 <_dtoa_r+0x464>
 800d9d6:	9b00      	ldr	r3, [sp, #0]
 800d9d8:	4650      	mov	r0, sl
 800d9da:	4659      	mov	r1, fp
 800d9dc:	1e5f      	subs	r7, r3, #1
 800d9de:	2200      	movs	r2, #0
 800d9e0:	4b88      	ldr	r3, [pc, #544]	; (800dc04 <_dtoa_r+0x624>)
 800d9e2:	f7f2 fe29 	bl	8000638 <__aeabi_dmul>
 800d9e6:	9e02      	ldr	r6, [sp, #8]
 800d9e8:	4682      	mov	sl, r0
 800d9ea:	468b      	mov	fp, r1
 800d9ec:	3501      	adds	r5, #1
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f7f2 fdb8 	bl	8000564 <__aeabi_i2d>
 800d9f4:	4652      	mov	r2, sl
 800d9f6:	465b      	mov	r3, fp
 800d9f8:	f7f2 fe1e 	bl	8000638 <__aeabi_dmul>
 800d9fc:	4b82      	ldr	r3, [pc, #520]	; (800dc08 <_dtoa_r+0x628>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	f7f2 fc64 	bl	80002cc <__adddf3>
 800da04:	46d0      	mov	r8, sl
 800da06:	46d9      	mov	r9, fp
 800da08:	4682      	mov	sl, r0
 800da0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800da0e:	2e00      	cmp	r6, #0
 800da10:	d158      	bne.n	800dac4 <_dtoa_r+0x4e4>
 800da12:	4b7e      	ldr	r3, [pc, #504]	; (800dc0c <_dtoa_r+0x62c>)
 800da14:	2200      	movs	r2, #0
 800da16:	4640      	mov	r0, r8
 800da18:	4649      	mov	r1, r9
 800da1a:	f7f2 fc55 	bl	80002c8 <__aeabi_dsub>
 800da1e:	4652      	mov	r2, sl
 800da20:	465b      	mov	r3, fp
 800da22:	4680      	mov	r8, r0
 800da24:	4689      	mov	r9, r1
 800da26:	f7f3 f897 	bl	8000b58 <__aeabi_dcmpgt>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	f040 8295 	bne.w	800df5a <_dtoa_r+0x97a>
 800da30:	4652      	mov	r2, sl
 800da32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da36:	4640      	mov	r0, r8
 800da38:	4649      	mov	r1, r9
 800da3a:	f7f3 f86f 	bl	8000b1c <__aeabi_dcmplt>
 800da3e:	2800      	cmp	r0, #0
 800da40:	f040 8289 	bne.w	800df56 <_dtoa_r+0x976>
 800da44:	ec5b ab19 	vmov	sl, fp, d9
 800da48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f2c0 8148 	blt.w	800dce0 <_dtoa_r+0x700>
 800da50:	9a00      	ldr	r2, [sp, #0]
 800da52:	2a0e      	cmp	r2, #14
 800da54:	f300 8144 	bgt.w	800dce0 <_dtoa_r+0x700>
 800da58:	4b67      	ldr	r3, [pc, #412]	; (800dbf8 <_dtoa_r+0x618>)
 800da5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da64:	2b00      	cmp	r3, #0
 800da66:	f280 80d5 	bge.w	800dc14 <_dtoa_r+0x634>
 800da6a:	9b03      	ldr	r3, [sp, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f300 80d1 	bgt.w	800dc14 <_dtoa_r+0x634>
 800da72:	f040 826f 	bne.w	800df54 <_dtoa_r+0x974>
 800da76:	4b65      	ldr	r3, [pc, #404]	; (800dc0c <_dtoa_r+0x62c>)
 800da78:	2200      	movs	r2, #0
 800da7a:	4640      	mov	r0, r8
 800da7c:	4649      	mov	r1, r9
 800da7e:	f7f2 fddb 	bl	8000638 <__aeabi_dmul>
 800da82:	4652      	mov	r2, sl
 800da84:	465b      	mov	r3, fp
 800da86:	f7f3 f85d 	bl	8000b44 <__aeabi_dcmpge>
 800da8a:	9e03      	ldr	r6, [sp, #12]
 800da8c:	4637      	mov	r7, r6
 800da8e:	2800      	cmp	r0, #0
 800da90:	f040 8245 	bne.w	800df1e <_dtoa_r+0x93e>
 800da94:	9d01      	ldr	r5, [sp, #4]
 800da96:	2331      	movs	r3, #49	; 0x31
 800da98:	f805 3b01 	strb.w	r3, [r5], #1
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	3301      	adds	r3, #1
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	e240      	b.n	800df26 <_dtoa_r+0x946>
 800daa4:	07f2      	lsls	r2, r6, #31
 800daa6:	d505      	bpl.n	800dab4 <_dtoa_r+0x4d4>
 800daa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daac:	f7f2 fdc4 	bl	8000638 <__aeabi_dmul>
 800dab0:	3501      	adds	r5, #1
 800dab2:	2301      	movs	r3, #1
 800dab4:	1076      	asrs	r6, r6, #1
 800dab6:	3708      	adds	r7, #8
 800dab8:	e777      	b.n	800d9aa <_dtoa_r+0x3ca>
 800daba:	2502      	movs	r5, #2
 800dabc:	e779      	b.n	800d9b2 <_dtoa_r+0x3d2>
 800dabe:	9f00      	ldr	r7, [sp, #0]
 800dac0:	9e03      	ldr	r6, [sp, #12]
 800dac2:	e794      	b.n	800d9ee <_dtoa_r+0x40e>
 800dac4:	9901      	ldr	r1, [sp, #4]
 800dac6:	4b4c      	ldr	r3, [pc, #304]	; (800dbf8 <_dtoa_r+0x618>)
 800dac8:	4431      	add	r1, r6
 800daca:	910d      	str	r1, [sp, #52]	; 0x34
 800dacc:	9908      	ldr	r1, [sp, #32]
 800dace:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dad2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dad6:	2900      	cmp	r1, #0
 800dad8:	d043      	beq.n	800db62 <_dtoa_r+0x582>
 800dada:	494d      	ldr	r1, [pc, #308]	; (800dc10 <_dtoa_r+0x630>)
 800dadc:	2000      	movs	r0, #0
 800dade:	f7f2 fed5 	bl	800088c <__aeabi_ddiv>
 800dae2:	4652      	mov	r2, sl
 800dae4:	465b      	mov	r3, fp
 800dae6:	f7f2 fbef 	bl	80002c8 <__aeabi_dsub>
 800daea:	9d01      	ldr	r5, [sp, #4]
 800daec:	4682      	mov	sl, r0
 800daee:	468b      	mov	fp, r1
 800daf0:	4649      	mov	r1, r9
 800daf2:	4640      	mov	r0, r8
 800daf4:	f7f3 f850 	bl	8000b98 <__aeabi_d2iz>
 800daf8:	4606      	mov	r6, r0
 800dafa:	f7f2 fd33 	bl	8000564 <__aeabi_i2d>
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	4640      	mov	r0, r8
 800db04:	4649      	mov	r1, r9
 800db06:	f7f2 fbdf 	bl	80002c8 <__aeabi_dsub>
 800db0a:	3630      	adds	r6, #48	; 0x30
 800db0c:	f805 6b01 	strb.w	r6, [r5], #1
 800db10:	4652      	mov	r2, sl
 800db12:	465b      	mov	r3, fp
 800db14:	4680      	mov	r8, r0
 800db16:	4689      	mov	r9, r1
 800db18:	f7f3 f800 	bl	8000b1c <__aeabi_dcmplt>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d163      	bne.n	800dbe8 <_dtoa_r+0x608>
 800db20:	4642      	mov	r2, r8
 800db22:	464b      	mov	r3, r9
 800db24:	4936      	ldr	r1, [pc, #216]	; (800dc00 <_dtoa_r+0x620>)
 800db26:	2000      	movs	r0, #0
 800db28:	f7f2 fbce 	bl	80002c8 <__aeabi_dsub>
 800db2c:	4652      	mov	r2, sl
 800db2e:	465b      	mov	r3, fp
 800db30:	f7f2 fff4 	bl	8000b1c <__aeabi_dcmplt>
 800db34:	2800      	cmp	r0, #0
 800db36:	f040 80b5 	bne.w	800dca4 <_dtoa_r+0x6c4>
 800db3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db3c:	429d      	cmp	r5, r3
 800db3e:	d081      	beq.n	800da44 <_dtoa_r+0x464>
 800db40:	4b30      	ldr	r3, [pc, #192]	; (800dc04 <_dtoa_r+0x624>)
 800db42:	2200      	movs	r2, #0
 800db44:	4650      	mov	r0, sl
 800db46:	4659      	mov	r1, fp
 800db48:	f7f2 fd76 	bl	8000638 <__aeabi_dmul>
 800db4c:	4b2d      	ldr	r3, [pc, #180]	; (800dc04 <_dtoa_r+0x624>)
 800db4e:	4682      	mov	sl, r0
 800db50:	468b      	mov	fp, r1
 800db52:	4640      	mov	r0, r8
 800db54:	4649      	mov	r1, r9
 800db56:	2200      	movs	r2, #0
 800db58:	f7f2 fd6e 	bl	8000638 <__aeabi_dmul>
 800db5c:	4680      	mov	r8, r0
 800db5e:	4689      	mov	r9, r1
 800db60:	e7c6      	b.n	800daf0 <_dtoa_r+0x510>
 800db62:	4650      	mov	r0, sl
 800db64:	4659      	mov	r1, fp
 800db66:	f7f2 fd67 	bl	8000638 <__aeabi_dmul>
 800db6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db6c:	9d01      	ldr	r5, [sp, #4]
 800db6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db70:	4682      	mov	sl, r0
 800db72:	468b      	mov	fp, r1
 800db74:	4649      	mov	r1, r9
 800db76:	4640      	mov	r0, r8
 800db78:	f7f3 f80e 	bl	8000b98 <__aeabi_d2iz>
 800db7c:	4606      	mov	r6, r0
 800db7e:	f7f2 fcf1 	bl	8000564 <__aeabi_i2d>
 800db82:	3630      	adds	r6, #48	; 0x30
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	4640      	mov	r0, r8
 800db8a:	4649      	mov	r1, r9
 800db8c:	f7f2 fb9c 	bl	80002c8 <__aeabi_dsub>
 800db90:	f805 6b01 	strb.w	r6, [r5], #1
 800db94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db96:	429d      	cmp	r5, r3
 800db98:	4680      	mov	r8, r0
 800db9a:	4689      	mov	r9, r1
 800db9c:	f04f 0200 	mov.w	r2, #0
 800dba0:	d124      	bne.n	800dbec <_dtoa_r+0x60c>
 800dba2:	4b1b      	ldr	r3, [pc, #108]	; (800dc10 <_dtoa_r+0x630>)
 800dba4:	4650      	mov	r0, sl
 800dba6:	4659      	mov	r1, fp
 800dba8:	f7f2 fb90 	bl	80002cc <__adddf3>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4640      	mov	r0, r8
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	f7f2 ffd0 	bl	8000b58 <__aeabi_dcmpgt>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d173      	bne.n	800dca4 <_dtoa_r+0x6c4>
 800dbbc:	4652      	mov	r2, sl
 800dbbe:	465b      	mov	r3, fp
 800dbc0:	4913      	ldr	r1, [pc, #76]	; (800dc10 <_dtoa_r+0x630>)
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	f7f2 fb80 	bl	80002c8 <__aeabi_dsub>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4640      	mov	r0, r8
 800dbce:	4649      	mov	r1, r9
 800dbd0:	f7f2 ffa4 	bl	8000b1c <__aeabi_dcmplt>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	f43f af35 	beq.w	800da44 <_dtoa_r+0x464>
 800dbda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbdc:	1e6b      	subs	r3, r5, #1
 800dbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbe0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbe4:	2b30      	cmp	r3, #48	; 0x30
 800dbe6:	d0f8      	beq.n	800dbda <_dtoa_r+0x5fa>
 800dbe8:	9700      	str	r7, [sp, #0]
 800dbea:	e049      	b.n	800dc80 <_dtoa_r+0x6a0>
 800dbec:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <_dtoa_r+0x624>)
 800dbee:	f7f2 fd23 	bl	8000638 <__aeabi_dmul>
 800dbf2:	4680      	mov	r8, r0
 800dbf4:	4689      	mov	r9, r1
 800dbf6:	e7bd      	b.n	800db74 <_dtoa_r+0x594>
 800dbf8:	08011d50 	.word	0x08011d50
 800dbfc:	08011d28 	.word	0x08011d28
 800dc00:	3ff00000 	.word	0x3ff00000
 800dc04:	40240000 	.word	0x40240000
 800dc08:	401c0000 	.word	0x401c0000
 800dc0c:	40140000 	.word	0x40140000
 800dc10:	3fe00000 	.word	0x3fe00000
 800dc14:	9d01      	ldr	r5, [sp, #4]
 800dc16:	4656      	mov	r6, sl
 800dc18:	465f      	mov	r7, fp
 800dc1a:	4642      	mov	r2, r8
 800dc1c:	464b      	mov	r3, r9
 800dc1e:	4630      	mov	r0, r6
 800dc20:	4639      	mov	r1, r7
 800dc22:	f7f2 fe33 	bl	800088c <__aeabi_ddiv>
 800dc26:	f7f2 ffb7 	bl	8000b98 <__aeabi_d2iz>
 800dc2a:	4682      	mov	sl, r0
 800dc2c:	f7f2 fc9a 	bl	8000564 <__aeabi_i2d>
 800dc30:	4642      	mov	r2, r8
 800dc32:	464b      	mov	r3, r9
 800dc34:	f7f2 fd00 	bl	8000638 <__aeabi_dmul>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	4639      	mov	r1, r7
 800dc40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc44:	f7f2 fb40 	bl	80002c8 <__aeabi_dsub>
 800dc48:	f805 6b01 	strb.w	r6, [r5], #1
 800dc4c:	9e01      	ldr	r6, [sp, #4]
 800dc4e:	9f03      	ldr	r7, [sp, #12]
 800dc50:	1bae      	subs	r6, r5, r6
 800dc52:	42b7      	cmp	r7, r6
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	d135      	bne.n	800dcc6 <_dtoa_r+0x6e6>
 800dc5a:	f7f2 fb37 	bl	80002cc <__adddf3>
 800dc5e:	4642      	mov	r2, r8
 800dc60:	464b      	mov	r3, r9
 800dc62:	4606      	mov	r6, r0
 800dc64:	460f      	mov	r7, r1
 800dc66:	f7f2 ff77 	bl	8000b58 <__aeabi_dcmpgt>
 800dc6a:	b9d0      	cbnz	r0, 800dca2 <_dtoa_r+0x6c2>
 800dc6c:	4642      	mov	r2, r8
 800dc6e:	464b      	mov	r3, r9
 800dc70:	4630      	mov	r0, r6
 800dc72:	4639      	mov	r1, r7
 800dc74:	f7f2 ff48 	bl	8000b08 <__aeabi_dcmpeq>
 800dc78:	b110      	cbz	r0, 800dc80 <_dtoa_r+0x6a0>
 800dc7a:	f01a 0f01 	tst.w	sl, #1
 800dc7e:	d110      	bne.n	800dca2 <_dtoa_r+0x6c2>
 800dc80:	4620      	mov	r0, r4
 800dc82:	ee18 1a10 	vmov	r1, s16
 800dc86:	f001 f885 	bl	800ed94 <_Bfree>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9800      	ldr	r0, [sp, #0]
 800dc8e:	702b      	strb	r3, [r5, #0]
 800dc90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc92:	3001      	adds	r0, #1
 800dc94:	6018      	str	r0, [r3, #0]
 800dc96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f43f acf1 	beq.w	800d680 <_dtoa_r+0xa0>
 800dc9e:	601d      	str	r5, [r3, #0]
 800dca0:	e4ee      	b.n	800d680 <_dtoa_r+0xa0>
 800dca2:	9f00      	ldr	r7, [sp, #0]
 800dca4:	462b      	mov	r3, r5
 800dca6:	461d      	mov	r5, r3
 800dca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcac:	2a39      	cmp	r2, #57	; 0x39
 800dcae:	d106      	bne.n	800dcbe <_dtoa_r+0x6de>
 800dcb0:	9a01      	ldr	r2, [sp, #4]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d1f7      	bne.n	800dca6 <_dtoa_r+0x6c6>
 800dcb6:	9901      	ldr	r1, [sp, #4]
 800dcb8:	2230      	movs	r2, #48	; 0x30
 800dcba:	3701      	adds	r7, #1
 800dcbc:	700a      	strb	r2, [r1, #0]
 800dcbe:	781a      	ldrb	r2, [r3, #0]
 800dcc0:	3201      	adds	r2, #1
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	e790      	b.n	800dbe8 <_dtoa_r+0x608>
 800dcc6:	4ba6      	ldr	r3, [pc, #664]	; (800df60 <_dtoa_r+0x980>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f7f2 fcb5 	bl	8000638 <__aeabi_dmul>
 800dcce:	2200      	movs	r2, #0
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	f7f2 ff17 	bl	8000b08 <__aeabi_dcmpeq>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d09d      	beq.n	800dc1a <_dtoa_r+0x63a>
 800dcde:	e7cf      	b.n	800dc80 <_dtoa_r+0x6a0>
 800dce0:	9a08      	ldr	r2, [sp, #32]
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	f000 80d7 	beq.w	800de96 <_dtoa_r+0x8b6>
 800dce8:	9a06      	ldr	r2, [sp, #24]
 800dcea:	2a01      	cmp	r2, #1
 800dcec:	f300 80ba 	bgt.w	800de64 <_dtoa_r+0x884>
 800dcf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcf2:	2a00      	cmp	r2, #0
 800dcf4:	f000 80b2 	beq.w	800de5c <_dtoa_r+0x87c>
 800dcf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dcfc:	9e07      	ldr	r6, [sp, #28]
 800dcfe:	9d04      	ldr	r5, [sp, #16]
 800dd00:	9a04      	ldr	r2, [sp, #16]
 800dd02:	441a      	add	r2, r3
 800dd04:	9204      	str	r2, [sp, #16]
 800dd06:	9a05      	ldr	r2, [sp, #20]
 800dd08:	2101      	movs	r1, #1
 800dd0a:	441a      	add	r2, r3
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	9205      	str	r2, [sp, #20]
 800dd10:	f001 f942 	bl	800ef98 <__i2b>
 800dd14:	4607      	mov	r7, r0
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	dd0c      	ble.n	800dd34 <_dtoa_r+0x754>
 800dd1a:	9b05      	ldr	r3, [sp, #20]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	dd09      	ble.n	800dd34 <_dtoa_r+0x754>
 800dd20:	42ab      	cmp	r3, r5
 800dd22:	9a04      	ldr	r2, [sp, #16]
 800dd24:	bfa8      	it	ge
 800dd26:	462b      	movge	r3, r5
 800dd28:	1ad2      	subs	r2, r2, r3
 800dd2a:	9204      	str	r2, [sp, #16]
 800dd2c:	9a05      	ldr	r2, [sp, #20]
 800dd2e:	1aed      	subs	r5, r5, r3
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	9305      	str	r3, [sp, #20]
 800dd34:	9b07      	ldr	r3, [sp, #28]
 800dd36:	b31b      	cbz	r3, 800dd80 <_dtoa_r+0x7a0>
 800dd38:	9b08      	ldr	r3, [sp, #32]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f000 80af 	beq.w	800de9e <_dtoa_r+0x8be>
 800dd40:	2e00      	cmp	r6, #0
 800dd42:	dd13      	ble.n	800dd6c <_dtoa_r+0x78c>
 800dd44:	4639      	mov	r1, r7
 800dd46:	4632      	mov	r2, r6
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f001 f9e5 	bl	800f118 <__pow5mult>
 800dd4e:	ee18 2a10 	vmov	r2, s16
 800dd52:	4601      	mov	r1, r0
 800dd54:	4607      	mov	r7, r0
 800dd56:	4620      	mov	r0, r4
 800dd58:	f001 f934 	bl	800efc4 <__multiply>
 800dd5c:	ee18 1a10 	vmov	r1, s16
 800dd60:	4680      	mov	r8, r0
 800dd62:	4620      	mov	r0, r4
 800dd64:	f001 f816 	bl	800ed94 <_Bfree>
 800dd68:	ee08 8a10 	vmov	s16, r8
 800dd6c:	9b07      	ldr	r3, [sp, #28]
 800dd6e:	1b9a      	subs	r2, r3, r6
 800dd70:	d006      	beq.n	800dd80 <_dtoa_r+0x7a0>
 800dd72:	ee18 1a10 	vmov	r1, s16
 800dd76:	4620      	mov	r0, r4
 800dd78:	f001 f9ce 	bl	800f118 <__pow5mult>
 800dd7c:	ee08 0a10 	vmov	s16, r0
 800dd80:	2101      	movs	r1, #1
 800dd82:	4620      	mov	r0, r4
 800dd84:	f001 f908 	bl	800ef98 <__i2b>
 800dd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	4606      	mov	r6, r0
 800dd8e:	f340 8088 	ble.w	800dea2 <_dtoa_r+0x8c2>
 800dd92:	461a      	mov	r2, r3
 800dd94:	4601      	mov	r1, r0
 800dd96:	4620      	mov	r0, r4
 800dd98:	f001 f9be 	bl	800f118 <__pow5mult>
 800dd9c:	9b06      	ldr	r3, [sp, #24]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	4606      	mov	r6, r0
 800dda2:	f340 8081 	ble.w	800dea8 <_dtoa_r+0x8c8>
 800dda6:	f04f 0800 	mov.w	r8, #0
 800ddaa:	6933      	ldr	r3, [r6, #16]
 800ddac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ddb0:	6918      	ldr	r0, [r3, #16]
 800ddb2:	f001 f8a1 	bl	800eef8 <__hi0bits>
 800ddb6:	f1c0 0020 	rsb	r0, r0, #32
 800ddba:	9b05      	ldr	r3, [sp, #20]
 800ddbc:	4418      	add	r0, r3
 800ddbe:	f010 001f 	ands.w	r0, r0, #31
 800ddc2:	f000 8092 	beq.w	800deea <_dtoa_r+0x90a>
 800ddc6:	f1c0 0320 	rsb	r3, r0, #32
 800ddca:	2b04      	cmp	r3, #4
 800ddcc:	f340 808a 	ble.w	800dee4 <_dtoa_r+0x904>
 800ddd0:	f1c0 001c 	rsb	r0, r0, #28
 800ddd4:	9b04      	ldr	r3, [sp, #16]
 800ddd6:	4403      	add	r3, r0
 800ddd8:	9304      	str	r3, [sp, #16]
 800ddda:	9b05      	ldr	r3, [sp, #20]
 800dddc:	4403      	add	r3, r0
 800ddde:	4405      	add	r5, r0
 800dde0:	9305      	str	r3, [sp, #20]
 800dde2:	9b04      	ldr	r3, [sp, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd07      	ble.n	800ddf8 <_dtoa_r+0x818>
 800dde8:	ee18 1a10 	vmov	r1, s16
 800ddec:	461a      	mov	r2, r3
 800ddee:	4620      	mov	r0, r4
 800ddf0:	f001 f9ec 	bl	800f1cc <__lshift>
 800ddf4:	ee08 0a10 	vmov	s16, r0
 800ddf8:	9b05      	ldr	r3, [sp, #20]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	dd05      	ble.n	800de0a <_dtoa_r+0x82a>
 800ddfe:	4631      	mov	r1, r6
 800de00:	461a      	mov	r2, r3
 800de02:	4620      	mov	r0, r4
 800de04:	f001 f9e2 	bl	800f1cc <__lshift>
 800de08:	4606      	mov	r6, r0
 800de0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d06e      	beq.n	800deee <_dtoa_r+0x90e>
 800de10:	ee18 0a10 	vmov	r0, s16
 800de14:	4631      	mov	r1, r6
 800de16:	f001 fa49 	bl	800f2ac <__mcmp>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	da67      	bge.n	800deee <_dtoa_r+0x90e>
 800de1e:	9b00      	ldr	r3, [sp, #0]
 800de20:	3b01      	subs	r3, #1
 800de22:	ee18 1a10 	vmov	r1, s16
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	220a      	movs	r2, #10
 800de2a:	2300      	movs	r3, #0
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 ffd3 	bl	800edd8 <__multadd>
 800de32:	9b08      	ldr	r3, [sp, #32]
 800de34:	ee08 0a10 	vmov	s16, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 81b1 	beq.w	800e1a0 <_dtoa_r+0xbc0>
 800de3e:	2300      	movs	r3, #0
 800de40:	4639      	mov	r1, r7
 800de42:	220a      	movs	r2, #10
 800de44:	4620      	mov	r0, r4
 800de46:	f000 ffc7 	bl	800edd8 <__multadd>
 800de4a:	9b02      	ldr	r3, [sp, #8]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	4607      	mov	r7, r0
 800de50:	f300 808e 	bgt.w	800df70 <_dtoa_r+0x990>
 800de54:	9b06      	ldr	r3, [sp, #24]
 800de56:	2b02      	cmp	r3, #2
 800de58:	dc51      	bgt.n	800defe <_dtoa_r+0x91e>
 800de5a:	e089      	b.n	800df70 <_dtoa_r+0x990>
 800de5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de62:	e74b      	b.n	800dcfc <_dtoa_r+0x71c>
 800de64:	9b03      	ldr	r3, [sp, #12]
 800de66:	1e5e      	subs	r6, r3, #1
 800de68:	9b07      	ldr	r3, [sp, #28]
 800de6a:	42b3      	cmp	r3, r6
 800de6c:	bfbf      	itttt	lt
 800de6e:	9b07      	ldrlt	r3, [sp, #28]
 800de70:	9607      	strlt	r6, [sp, #28]
 800de72:	1af2      	sublt	r2, r6, r3
 800de74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de76:	bfb6      	itet	lt
 800de78:	189b      	addlt	r3, r3, r2
 800de7a:	1b9e      	subge	r6, r3, r6
 800de7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800de7e:	9b03      	ldr	r3, [sp, #12]
 800de80:	bfb8      	it	lt
 800de82:	2600      	movlt	r6, #0
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfb7      	itett	lt
 800de88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800de8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800de90:	1a9d      	sublt	r5, r3, r2
 800de92:	2300      	movlt	r3, #0
 800de94:	e734      	b.n	800dd00 <_dtoa_r+0x720>
 800de96:	9e07      	ldr	r6, [sp, #28]
 800de98:	9d04      	ldr	r5, [sp, #16]
 800de9a:	9f08      	ldr	r7, [sp, #32]
 800de9c:	e73b      	b.n	800dd16 <_dtoa_r+0x736>
 800de9e:	9a07      	ldr	r2, [sp, #28]
 800dea0:	e767      	b.n	800dd72 <_dtoa_r+0x792>
 800dea2:	9b06      	ldr	r3, [sp, #24]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	dc18      	bgt.n	800deda <_dtoa_r+0x8fa>
 800dea8:	f1ba 0f00 	cmp.w	sl, #0
 800deac:	d115      	bne.n	800deda <_dtoa_r+0x8fa>
 800deae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deb2:	b993      	cbnz	r3, 800deda <_dtoa_r+0x8fa>
 800deb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800deb8:	0d1b      	lsrs	r3, r3, #20
 800deba:	051b      	lsls	r3, r3, #20
 800debc:	b183      	cbz	r3, 800dee0 <_dtoa_r+0x900>
 800debe:	9b04      	ldr	r3, [sp, #16]
 800dec0:	3301      	adds	r3, #1
 800dec2:	9304      	str	r3, [sp, #16]
 800dec4:	9b05      	ldr	r3, [sp, #20]
 800dec6:	3301      	adds	r3, #1
 800dec8:	9305      	str	r3, [sp, #20]
 800deca:	f04f 0801 	mov.w	r8, #1
 800dece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f47f af6a 	bne.w	800ddaa <_dtoa_r+0x7ca>
 800ded6:	2001      	movs	r0, #1
 800ded8:	e76f      	b.n	800ddba <_dtoa_r+0x7da>
 800deda:	f04f 0800 	mov.w	r8, #0
 800dede:	e7f6      	b.n	800dece <_dtoa_r+0x8ee>
 800dee0:	4698      	mov	r8, r3
 800dee2:	e7f4      	b.n	800dece <_dtoa_r+0x8ee>
 800dee4:	f43f af7d 	beq.w	800dde2 <_dtoa_r+0x802>
 800dee8:	4618      	mov	r0, r3
 800deea:	301c      	adds	r0, #28
 800deec:	e772      	b.n	800ddd4 <_dtoa_r+0x7f4>
 800deee:	9b03      	ldr	r3, [sp, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	dc37      	bgt.n	800df64 <_dtoa_r+0x984>
 800def4:	9b06      	ldr	r3, [sp, #24]
 800def6:	2b02      	cmp	r3, #2
 800def8:	dd34      	ble.n	800df64 <_dtoa_r+0x984>
 800defa:	9b03      	ldr	r3, [sp, #12]
 800defc:	9302      	str	r3, [sp, #8]
 800defe:	9b02      	ldr	r3, [sp, #8]
 800df00:	b96b      	cbnz	r3, 800df1e <_dtoa_r+0x93e>
 800df02:	4631      	mov	r1, r6
 800df04:	2205      	movs	r2, #5
 800df06:	4620      	mov	r0, r4
 800df08:	f000 ff66 	bl	800edd8 <__multadd>
 800df0c:	4601      	mov	r1, r0
 800df0e:	4606      	mov	r6, r0
 800df10:	ee18 0a10 	vmov	r0, s16
 800df14:	f001 f9ca 	bl	800f2ac <__mcmp>
 800df18:	2800      	cmp	r0, #0
 800df1a:	f73f adbb 	bgt.w	800da94 <_dtoa_r+0x4b4>
 800df1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df20:	9d01      	ldr	r5, [sp, #4]
 800df22:	43db      	mvns	r3, r3
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	f04f 0800 	mov.w	r8, #0
 800df2a:	4631      	mov	r1, r6
 800df2c:	4620      	mov	r0, r4
 800df2e:	f000 ff31 	bl	800ed94 <_Bfree>
 800df32:	2f00      	cmp	r7, #0
 800df34:	f43f aea4 	beq.w	800dc80 <_dtoa_r+0x6a0>
 800df38:	f1b8 0f00 	cmp.w	r8, #0
 800df3c:	d005      	beq.n	800df4a <_dtoa_r+0x96a>
 800df3e:	45b8      	cmp	r8, r7
 800df40:	d003      	beq.n	800df4a <_dtoa_r+0x96a>
 800df42:	4641      	mov	r1, r8
 800df44:	4620      	mov	r0, r4
 800df46:	f000 ff25 	bl	800ed94 <_Bfree>
 800df4a:	4639      	mov	r1, r7
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 ff21 	bl	800ed94 <_Bfree>
 800df52:	e695      	b.n	800dc80 <_dtoa_r+0x6a0>
 800df54:	2600      	movs	r6, #0
 800df56:	4637      	mov	r7, r6
 800df58:	e7e1      	b.n	800df1e <_dtoa_r+0x93e>
 800df5a:	9700      	str	r7, [sp, #0]
 800df5c:	4637      	mov	r7, r6
 800df5e:	e599      	b.n	800da94 <_dtoa_r+0x4b4>
 800df60:	40240000 	.word	0x40240000
 800df64:	9b08      	ldr	r3, [sp, #32]
 800df66:	2b00      	cmp	r3, #0
 800df68:	f000 80ca 	beq.w	800e100 <_dtoa_r+0xb20>
 800df6c:	9b03      	ldr	r3, [sp, #12]
 800df6e:	9302      	str	r3, [sp, #8]
 800df70:	2d00      	cmp	r5, #0
 800df72:	dd05      	ble.n	800df80 <_dtoa_r+0x9a0>
 800df74:	4639      	mov	r1, r7
 800df76:	462a      	mov	r2, r5
 800df78:	4620      	mov	r0, r4
 800df7a:	f001 f927 	bl	800f1cc <__lshift>
 800df7e:	4607      	mov	r7, r0
 800df80:	f1b8 0f00 	cmp.w	r8, #0
 800df84:	d05b      	beq.n	800e03e <_dtoa_r+0xa5e>
 800df86:	6879      	ldr	r1, [r7, #4]
 800df88:	4620      	mov	r0, r4
 800df8a:	f000 fec3 	bl	800ed14 <_Balloc>
 800df8e:	4605      	mov	r5, r0
 800df90:	b928      	cbnz	r0, 800df9e <_dtoa_r+0x9be>
 800df92:	4b87      	ldr	r3, [pc, #540]	; (800e1b0 <_dtoa_r+0xbd0>)
 800df94:	4602      	mov	r2, r0
 800df96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df9a:	f7ff bb3b 	b.w	800d614 <_dtoa_r+0x34>
 800df9e:	693a      	ldr	r2, [r7, #16]
 800dfa0:	3202      	adds	r2, #2
 800dfa2:	0092      	lsls	r2, r2, #2
 800dfa4:	f107 010c 	add.w	r1, r7, #12
 800dfa8:	300c      	adds	r0, #12
 800dfaa:	f7fd fe01 	bl	800bbb0 <memcpy>
 800dfae:	2201      	movs	r2, #1
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f001 f90a 	bl	800f1cc <__lshift>
 800dfb8:	9b01      	ldr	r3, [sp, #4]
 800dfba:	f103 0901 	add.w	r9, r3, #1
 800dfbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	9305      	str	r3, [sp, #20]
 800dfc6:	f00a 0301 	and.w	r3, sl, #1
 800dfca:	46b8      	mov	r8, r7
 800dfcc:	9304      	str	r3, [sp, #16]
 800dfce:	4607      	mov	r7, r0
 800dfd0:	4631      	mov	r1, r6
 800dfd2:	ee18 0a10 	vmov	r0, s16
 800dfd6:	f7ff fa75 	bl	800d4c4 <quorem>
 800dfda:	4641      	mov	r1, r8
 800dfdc:	9002      	str	r0, [sp, #8]
 800dfde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfe2:	ee18 0a10 	vmov	r0, s16
 800dfe6:	f001 f961 	bl	800f2ac <__mcmp>
 800dfea:	463a      	mov	r2, r7
 800dfec:	9003      	str	r0, [sp, #12]
 800dfee:	4631      	mov	r1, r6
 800dff0:	4620      	mov	r0, r4
 800dff2:	f001 f977 	bl	800f2e4 <__mdiff>
 800dff6:	68c2      	ldr	r2, [r0, #12]
 800dff8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800dffc:	4605      	mov	r5, r0
 800dffe:	bb02      	cbnz	r2, 800e042 <_dtoa_r+0xa62>
 800e000:	4601      	mov	r1, r0
 800e002:	ee18 0a10 	vmov	r0, s16
 800e006:	f001 f951 	bl	800f2ac <__mcmp>
 800e00a:	4602      	mov	r2, r0
 800e00c:	4629      	mov	r1, r5
 800e00e:	4620      	mov	r0, r4
 800e010:	9207      	str	r2, [sp, #28]
 800e012:	f000 febf 	bl	800ed94 <_Bfree>
 800e016:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e01a:	ea43 0102 	orr.w	r1, r3, r2
 800e01e:	9b04      	ldr	r3, [sp, #16]
 800e020:	430b      	orrs	r3, r1
 800e022:	464d      	mov	r5, r9
 800e024:	d10f      	bne.n	800e046 <_dtoa_r+0xa66>
 800e026:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e02a:	d02a      	beq.n	800e082 <_dtoa_r+0xaa2>
 800e02c:	9b03      	ldr	r3, [sp, #12]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	dd02      	ble.n	800e038 <_dtoa_r+0xa58>
 800e032:	9b02      	ldr	r3, [sp, #8]
 800e034:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e038:	f88b a000 	strb.w	sl, [fp]
 800e03c:	e775      	b.n	800df2a <_dtoa_r+0x94a>
 800e03e:	4638      	mov	r0, r7
 800e040:	e7ba      	b.n	800dfb8 <_dtoa_r+0x9d8>
 800e042:	2201      	movs	r2, #1
 800e044:	e7e2      	b.n	800e00c <_dtoa_r+0xa2c>
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	db04      	blt.n	800e056 <_dtoa_r+0xa76>
 800e04c:	9906      	ldr	r1, [sp, #24]
 800e04e:	430b      	orrs	r3, r1
 800e050:	9904      	ldr	r1, [sp, #16]
 800e052:	430b      	orrs	r3, r1
 800e054:	d122      	bne.n	800e09c <_dtoa_r+0xabc>
 800e056:	2a00      	cmp	r2, #0
 800e058:	ddee      	ble.n	800e038 <_dtoa_r+0xa58>
 800e05a:	ee18 1a10 	vmov	r1, s16
 800e05e:	2201      	movs	r2, #1
 800e060:	4620      	mov	r0, r4
 800e062:	f001 f8b3 	bl	800f1cc <__lshift>
 800e066:	4631      	mov	r1, r6
 800e068:	ee08 0a10 	vmov	s16, r0
 800e06c:	f001 f91e 	bl	800f2ac <__mcmp>
 800e070:	2800      	cmp	r0, #0
 800e072:	dc03      	bgt.n	800e07c <_dtoa_r+0xa9c>
 800e074:	d1e0      	bne.n	800e038 <_dtoa_r+0xa58>
 800e076:	f01a 0f01 	tst.w	sl, #1
 800e07a:	d0dd      	beq.n	800e038 <_dtoa_r+0xa58>
 800e07c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e080:	d1d7      	bne.n	800e032 <_dtoa_r+0xa52>
 800e082:	2339      	movs	r3, #57	; 0x39
 800e084:	f88b 3000 	strb.w	r3, [fp]
 800e088:	462b      	mov	r3, r5
 800e08a:	461d      	mov	r5, r3
 800e08c:	3b01      	subs	r3, #1
 800e08e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e092:	2a39      	cmp	r2, #57	; 0x39
 800e094:	d071      	beq.n	800e17a <_dtoa_r+0xb9a>
 800e096:	3201      	adds	r2, #1
 800e098:	701a      	strb	r2, [r3, #0]
 800e09a:	e746      	b.n	800df2a <_dtoa_r+0x94a>
 800e09c:	2a00      	cmp	r2, #0
 800e09e:	dd07      	ble.n	800e0b0 <_dtoa_r+0xad0>
 800e0a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0a4:	d0ed      	beq.n	800e082 <_dtoa_r+0xaa2>
 800e0a6:	f10a 0301 	add.w	r3, sl, #1
 800e0aa:	f88b 3000 	strb.w	r3, [fp]
 800e0ae:	e73c      	b.n	800df2a <_dtoa_r+0x94a>
 800e0b0:	9b05      	ldr	r3, [sp, #20]
 800e0b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e0b6:	4599      	cmp	r9, r3
 800e0b8:	d047      	beq.n	800e14a <_dtoa_r+0xb6a>
 800e0ba:	ee18 1a10 	vmov	r1, s16
 800e0be:	2300      	movs	r3, #0
 800e0c0:	220a      	movs	r2, #10
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f000 fe88 	bl	800edd8 <__multadd>
 800e0c8:	45b8      	cmp	r8, r7
 800e0ca:	ee08 0a10 	vmov	s16, r0
 800e0ce:	f04f 0300 	mov.w	r3, #0
 800e0d2:	f04f 020a 	mov.w	r2, #10
 800e0d6:	4641      	mov	r1, r8
 800e0d8:	4620      	mov	r0, r4
 800e0da:	d106      	bne.n	800e0ea <_dtoa_r+0xb0a>
 800e0dc:	f000 fe7c 	bl	800edd8 <__multadd>
 800e0e0:	4680      	mov	r8, r0
 800e0e2:	4607      	mov	r7, r0
 800e0e4:	f109 0901 	add.w	r9, r9, #1
 800e0e8:	e772      	b.n	800dfd0 <_dtoa_r+0x9f0>
 800e0ea:	f000 fe75 	bl	800edd8 <__multadd>
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	4680      	mov	r8, r0
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	220a      	movs	r2, #10
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fe6e 	bl	800edd8 <__multadd>
 800e0fc:	4607      	mov	r7, r0
 800e0fe:	e7f1      	b.n	800e0e4 <_dtoa_r+0xb04>
 800e100:	9b03      	ldr	r3, [sp, #12]
 800e102:	9302      	str	r3, [sp, #8]
 800e104:	9d01      	ldr	r5, [sp, #4]
 800e106:	ee18 0a10 	vmov	r0, s16
 800e10a:	4631      	mov	r1, r6
 800e10c:	f7ff f9da 	bl	800d4c4 <quorem>
 800e110:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e114:	9b01      	ldr	r3, [sp, #4]
 800e116:	f805 ab01 	strb.w	sl, [r5], #1
 800e11a:	1aea      	subs	r2, r5, r3
 800e11c:	9b02      	ldr	r3, [sp, #8]
 800e11e:	4293      	cmp	r3, r2
 800e120:	dd09      	ble.n	800e136 <_dtoa_r+0xb56>
 800e122:	ee18 1a10 	vmov	r1, s16
 800e126:	2300      	movs	r3, #0
 800e128:	220a      	movs	r2, #10
 800e12a:	4620      	mov	r0, r4
 800e12c:	f000 fe54 	bl	800edd8 <__multadd>
 800e130:	ee08 0a10 	vmov	s16, r0
 800e134:	e7e7      	b.n	800e106 <_dtoa_r+0xb26>
 800e136:	9b02      	ldr	r3, [sp, #8]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	bfc8      	it	gt
 800e13c:	461d      	movgt	r5, r3
 800e13e:	9b01      	ldr	r3, [sp, #4]
 800e140:	bfd8      	it	le
 800e142:	2501      	movle	r5, #1
 800e144:	441d      	add	r5, r3
 800e146:	f04f 0800 	mov.w	r8, #0
 800e14a:	ee18 1a10 	vmov	r1, s16
 800e14e:	2201      	movs	r2, #1
 800e150:	4620      	mov	r0, r4
 800e152:	f001 f83b 	bl	800f1cc <__lshift>
 800e156:	4631      	mov	r1, r6
 800e158:	ee08 0a10 	vmov	s16, r0
 800e15c:	f001 f8a6 	bl	800f2ac <__mcmp>
 800e160:	2800      	cmp	r0, #0
 800e162:	dc91      	bgt.n	800e088 <_dtoa_r+0xaa8>
 800e164:	d102      	bne.n	800e16c <_dtoa_r+0xb8c>
 800e166:	f01a 0f01 	tst.w	sl, #1
 800e16a:	d18d      	bne.n	800e088 <_dtoa_r+0xaa8>
 800e16c:	462b      	mov	r3, r5
 800e16e:	461d      	mov	r5, r3
 800e170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e174:	2a30      	cmp	r2, #48	; 0x30
 800e176:	d0fa      	beq.n	800e16e <_dtoa_r+0xb8e>
 800e178:	e6d7      	b.n	800df2a <_dtoa_r+0x94a>
 800e17a:	9a01      	ldr	r2, [sp, #4]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d184      	bne.n	800e08a <_dtoa_r+0xaaa>
 800e180:	9b00      	ldr	r3, [sp, #0]
 800e182:	3301      	adds	r3, #1
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	2331      	movs	r3, #49	; 0x31
 800e188:	7013      	strb	r3, [r2, #0]
 800e18a:	e6ce      	b.n	800df2a <_dtoa_r+0x94a>
 800e18c:	4b09      	ldr	r3, [pc, #36]	; (800e1b4 <_dtoa_r+0xbd4>)
 800e18e:	f7ff ba95 	b.w	800d6bc <_dtoa_r+0xdc>
 800e192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e194:	2b00      	cmp	r3, #0
 800e196:	f47f aa6e 	bne.w	800d676 <_dtoa_r+0x96>
 800e19a:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <_dtoa_r+0xbd8>)
 800e19c:	f7ff ba8e 	b.w	800d6bc <_dtoa_r+0xdc>
 800e1a0:	9b02      	ldr	r3, [sp, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	dcae      	bgt.n	800e104 <_dtoa_r+0xb24>
 800e1a6:	9b06      	ldr	r3, [sp, #24]
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	f73f aea8 	bgt.w	800defe <_dtoa_r+0x91e>
 800e1ae:	e7a9      	b.n	800e104 <_dtoa_r+0xb24>
 800e1b0:	08011bd8 	.word	0x08011bd8
 800e1b4:	080119e0 	.word	0x080119e0
 800e1b8:	08011b59 	.word	0x08011b59

0800e1bc <__sflush_r>:
 800e1bc:	898a      	ldrh	r2, [r1, #12]
 800e1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	0710      	lsls	r0, r2, #28
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	d458      	bmi.n	800e27c <__sflush_r+0xc0>
 800e1ca:	684b      	ldr	r3, [r1, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	dc05      	bgt.n	800e1dc <__sflush_r+0x20>
 800e1d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	dc02      	bgt.n	800e1dc <__sflush_r+0x20>
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1de:	2e00      	cmp	r6, #0
 800e1e0:	d0f9      	beq.n	800e1d6 <__sflush_r+0x1a>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1e8:	682f      	ldr	r7, [r5, #0]
 800e1ea:	602b      	str	r3, [r5, #0]
 800e1ec:	d032      	beq.n	800e254 <__sflush_r+0x98>
 800e1ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1f0:	89a3      	ldrh	r3, [r4, #12]
 800e1f2:	075a      	lsls	r2, r3, #29
 800e1f4:	d505      	bpl.n	800e202 <__sflush_r+0x46>
 800e1f6:	6863      	ldr	r3, [r4, #4]
 800e1f8:	1ac0      	subs	r0, r0, r3
 800e1fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1fc:	b10b      	cbz	r3, 800e202 <__sflush_r+0x46>
 800e1fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e200:	1ac0      	subs	r0, r0, r3
 800e202:	2300      	movs	r3, #0
 800e204:	4602      	mov	r2, r0
 800e206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e208:	6a21      	ldr	r1, [r4, #32]
 800e20a:	4628      	mov	r0, r5
 800e20c:	47b0      	blx	r6
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	d106      	bne.n	800e222 <__sflush_r+0x66>
 800e214:	6829      	ldr	r1, [r5, #0]
 800e216:	291d      	cmp	r1, #29
 800e218:	d82c      	bhi.n	800e274 <__sflush_r+0xb8>
 800e21a:	4a2a      	ldr	r2, [pc, #168]	; (800e2c4 <__sflush_r+0x108>)
 800e21c:	40ca      	lsrs	r2, r1
 800e21e:	07d6      	lsls	r6, r2, #31
 800e220:	d528      	bpl.n	800e274 <__sflush_r+0xb8>
 800e222:	2200      	movs	r2, #0
 800e224:	6062      	str	r2, [r4, #4]
 800e226:	04d9      	lsls	r1, r3, #19
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	6022      	str	r2, [r4, #0]
 800e22c:	d504      	bpl.n	800e238 <__sflush_r+0x7c>
 800e22e:	1c42      	adds	r2, r0, #1
 800e230:	d101      	bne.n	800e236 <__sflush_r+0x7a>
 800e232:	682b      	ldr	r3, [r5, #0]
 800e234:	b903      	cbnz	r3, 800e238 <__sflush_r+0x7c>
 800e236:	6560      	str	r0, [r4, #84]	; 0x54
 800e238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e23a:	602f      	str	r7, [r5, #0]
 800e23c:	2900      	cmp	r1, #0
 800e23e:	d0ca      	beq.n	800e1d6 <__sflush_r+0x1a>
 800e240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e244:	4299      	cmp	r1, r3
 800e246:	d002      	beq.n	800e24e <__sflush_r+0x92>
 800e248:	4628      	mov	r0, r5
 800e24a:	f001 fa3b 	bl	800f6c4 <_free_r>
 800e24e:	2000      	movs	r0, #0
 800e250:	6360      	str	r0, [r4, #52]	; 0x34
 800e252:	e7c1      	b.n	800e1d8 <__sflush_r+0x1c>
 800e254:	6a21      	ldr	r1, [r4, #32]
 800e256:	2301      	movs	r3, #1
 800e258:	4628      	mov	r0, r5
 800e25a:	47b0      	blx	r6
 800e25c:	1c41      	adds	r1, r0, #1
 800e25e:	d1c7      	bne.n	800e1f0 <__sflush_r+0x34>
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d0c4      	beq.n	800e1f0 <__sflush_r+0x34>
 800e266:	2b1d      	cmp	r3, #29
 800e268:	d001      	beq.n	800e26e <__sflush_r+0xb2>
 800e26a:	2b16      	cmp	r3, #22
 800e26c:	d101      	bne.n	800e272 <__sflush_r+0xb6>
 800e26e:	602f      	str	r7, [r5, #0]
 800e270:	e7b1      	b.n	800e1d6 <__sflush_r+0x1a>
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	e7ad      	b.n	800e1d8 <__sflush_r+0x1c>
 800e27c:	690f      	ldr	r7, [r1, #16]
 800e27e:	2f00      	cmp	r7, #0
 800e280:	d0a9      	beq.n	800e1d6 <__sflush_r+0x1a>
 800e282:	0793      	lsls	r3, r2, #30
 800e284:	680e      	ldr	r6, [r1, #0]
 800e286:	bf08      	it	eq
 800e288:	694b      	ldreq	r3, [r1, #20]
 800e28a:	600f      	str	r7, [r1, #0]
 800e28c:	bf18      	it	ne
 800e28e:	2300      	movne	r3, #0
 800e290:	eba6 0807 	sub.w	r8, r6, r7
 800e294:	608b      	str	r3, [r1, #8]
 800e296:	f1b8 0f00 	cmp.w	r8, #0
 800e29a:	dd9c      	ble.n	800e1d6 <__sflush_r+0x1a>
 800e29c:	6a21      	ldr	r1, [r4, #32]
 800e29e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2a0:	4643      	mov	r3, r8
 800e2a2:	463a      	mov	r2, r7
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	47b0      	blx	r6
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	dc06      	bgt.n	800e2ba <__sflush_r+0xfe>
 800e2ac:	89a3      	ldrh	r3, [r4, #12]
 800e2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2b8:	e78e      	b.n	800e1d8 <__sflush_r+0x1c>
 800e2ba:	4407      	add	r7, r0
 800e2bc:	eba8 0800 	sub.w	r8, r8, r0
 800e2c0:	e7e9      	b.n	800e296 <__sflush_r+0xda>
 800e2c2:	bf00      	nop
 800e2c4:	20400001 	.word	0x20400001

0800e2c8 <_fflush_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	690b      	ldr	r3, [r1, #16]
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	b913      	cbnz	r3, 800e2d8 <_fflush_r+0x10>
 800e2d2:	2500      	movs	r5, #0
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	b118      	cbz	r0, 800e2e2 <_fflush_r+0x1a>
 800e2da:	6983      	ldr	r3, [r0, #24]
 800e2dc:	b90b      	cbnz	r3, 800e2e2 <_fflush_r+0x1a>
 800e2de:	f000 f887 	bl	800e3f0 <__sinit>
 800e2e2:	4b14      	ldr	r3, [pc, #80]	; (800e334 <_fflush_r+0x6c>)
 800e2e4:	429c      	cmp	r4, r3
 800e2e6:	d11b      	bne.n	800e320 <_fflush_r+0x58>
 800e2e8:	686c      	ldr	r4, [r5, #4]
 800e2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d0ef      	beq.n	800e2d2 <_fflush_r+0xa>
 800e2f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2f4:	07d0      	lsls	r0, r2, #31
 800e2f6:	d404      	bmi.n	800e302 <_fflush_r+0x3a>
 800e2f8:	0599      	lsls	r1, r3, #22
 800e2fa:	d402      	bmi.n	800e302 <_fflush_r+0x3a>
 800e2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2fe:	f000 fc88 	bl	800ec12 <__retarget_lock_acquire_recursive>
 800e302:	4628      	mov	r0, r5
 800e304:	4621      	mov	r1, r4
 800e306:	f7ff ff59 	bl	800e1bc <__sflush_r>
 800e30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e30c:	07da      	lsls	r2, r3, #31
 800e30e:	4605      	mov	r5, r0
 800e310:	d4e0      	bmi.n	800e2d4 <_fflush_r+0xc>
 800e312:	89a3      	ldrh	r3, [r4, #12]
 800e314:	059b      	lsls	r3, r3, #22
 800e316:	d4dd      	bmi.n	800e2d4 <_fflush_r+0xc>
 800e318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e31a:	f000 fc7b 	bl	800ec14 <__retarget_lock_release_recursive>
 800e31e:	e7d9      	b.n	800e2d4 <_fflush_r+0xc>
 800e320:	4b05      	ldr	r3, [pc, #20]	; (800e338 <_fflush_r+0x70>)
 800e322:	429c      	cmp	r4, r3
 800e324:	d101      	bne.n	800e32a <_fflush_r+0x62>
 800e326:	68ac      	ldr	r4, [r5, #8]
 800e328:	e7df      	b.n	800e2ea <_fflush_r+0x22>
 800e32a:	4b04      	ldr	r3, [pc, #16]	; (800e33c <_fflush_r+0x74>)
 800e32c:	429c      	cmp	r4, r3
 800e32e:	bf08      	it	eq
 800e330:	68ec      	ldreq	r4, [r5, #12]
 800e332:	e7da      	b.n	800e2ea <_fflush_r+0x22>
 800e334:	08011c0c 	.word	0x08011c0c
 800e338:	08011c2c 	.word	0x08011c2c
 800e33c:	08011bec 	.word	0x08011bec

0800e340 <std>:
 800e340:	2300      	movs	r3, #0
 800e342:	b510      	push	{r4, lr}
 800e344:	4604      	mov	r4, r0
 800e346:	e9c0 3300 	strd	r3, r3, [r0]
 800e34a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e34e:	6083      	str	r3, [r0, #8]
 800e350:	8181      	strh	r1, [r0, #12]
 800e352:	6643      	str	r3, [r0, #100]	; 0x64
 800e354:	81c2      	strh	r2, [r0, #14]
 800e356:	6183      	str	r3, [r0, #24]
 800e358:	4619      	mov	r1, r3
 800e35a:	2208      	movs	r2, #8
 800e35c:	305c      	adds	r0, #92	; 0x5c
 800e35e:	f7fd fc35 	bl	800bbcc <memset>
 800e362:	4b05      	ldr	r3, [pc, #20]	; (800e378 <std+0x38>)
 800e364:	6263      	str	r3, [r4, #36]	; 0x24
 800e366:	4b05      	ldr	r3, [pc, #20]	; (800e37c <std+0x3c>)
 800e368:	62a3      	str	r3, [r4, #40]	; 0x28
 800e36a:	4b05      	ldr	r3, [pc, #20]	; (800e380 <std+0x40>)
 800e36c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e36e:	4b05      	ldr	r3, [pc, #20]	; (800e384 <std+0x44>)
 800e370:	6224      	str	r4, [r4, #32]
 800e372:	6323      	str	r3, [r4, #48]	; 0x30
 800e374:	bd10      	pop	{r4, pc}
 800e376:	bf00      	nop
 800e378:	0800fb69 	.word	0x0800fb69
 800e37c:	0800fb8b 	.word	0x0800fb8b
 800e380:	0800fbc3 	.word	0x0800fbc3
 800e384:	0800fbe7 	.word	0x0800fbe7

0800e388 <_cleanup_r>:
 800e388:	4901      	ldr	r1, [pc, #4]	; (800e390 <_cleanup_r+0x8>)
 800e38a:	f000 b8af 	b.w	800e4ec <_fwalk_reent>
 800e38e:	bf00      	nop
 800e390:	0800e2c9 	.word	0x0800e2c9

0800e394 <__sfmoreglue>:
 800e394:	b570      	push	{r4, r5, r6, lr}
 800e396:	2268      	movs	r2, #104	; 0x68
 800e398:	1e4d      	subs	r5, r1, #1
 800e39a:	4355      	muls	r5, r2
 800e39c:	460e      	mov	r6, r1
 800e39e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3a2:	f001 f9fb 	bl	800f79c <_malloc_r>
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	b140      	cbz	r0, 800e3bc <__sfmoreglue+0x28>
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	e9c0 1600 	strd	r1, r6, [r0]
 800e3b0:	300c      	adds	r0, #12
 800e3b2:	60a0      	str	r0, [r4, #8]
 800e3b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3b8:	f7fd fc08 	bl	800bbcc <memset>
 800e3bc:	4620      	mov	r0, r4
 800e3be:	bd70      	pop	{r4, r5, r6, pc}

0800e3c0 <__sfp_lock_acquire>:
 800e3c0:	4801      	ldr	r0, [pc, #4]	; (800e3c8 <__sfp_lock_acquire+0x8>)
 800e3c2:	f000 bc26 	b.w	800ec12 <__retarget_lock_acquire_recursive>
 800e3c6:	bf00      	nop
 800e3c8:	20009695 	.word	0x20009695

0800e3cc <__sfp_lock_release>:
 800e3cc:	4801      	ldr	r0, [pc, #4]	; (800e3d4 <__sfp_lock_release+0x8>)
 800e3ce:	f000 bc21 	b.w	800ec14 <__retarget_lock_release_recursive>
 800e3d2:	bf00      	nop
 800e3d4:	20009695 	.word	0x20009695

0800e3d8 <__sinit_lock_acquire>:
 800e3d8:	4801      	ldr	r0, [pc, #4]	; (800e3e0 <__sinit_lock_acquire+0x8>)
 800e3da:	f000 bc1a 	b.w	800ec12 <__retarget_lock_acquire_recursive>
 800e3de:	bf00      	nop
 800e3e0:	20009696 	.word	0x20009696

0800e3e4 <__sinit_lock_release>:
 800e3e4:	4801      	ldr	r0, [pc, #4]	; (800e3ec <__sinit_lock_release+0x8>)
 800e3e6:	f000 bc15 	b.w	800ec14 <__retarget_lock_release_recursive>
 800e3ea:	bf00      	nop
 800e3ec:	20009696 	.word	0x20009696

0800e3f0 <__sinit>:
 800e3f0:	b510      	push	{r4, lr}
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	f7ff fff0 	bl	800e3d8 <__sinit_lock_acquire>
 800e3f8:	69a3      	ldr	r3, [r4, #24]
 800e3fa:	b11b      	cbz	r3, 800e404 <__sinit+0x14>
 800e3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e400:	f7ff bff0 	b.w	800e3e4 <__sinit_lock_release>
 800e404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e408:	6523      	str	r3, [r4, #80]	; 0x50
 800e40a:	4b13      	ldr	r3, [pc, #76]	; (800e458 <__sinit+0x68>)
 800e40c:	4a13      	ldr	r2, [pc, #76]	; (800e45c <__sinit+0x6c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	62a2      	str	r2, [r4, #40]	; 0x28
 800e412:	42a3      	cmp	r3, r4
 800e414:	bf04      	itt	eq
 800e416:	2301      	moveq	r3, #1
 800e418:	61a3      	streq	r3, [r4, #24]
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 f820 	bl	800e460 <__sfp>
 800e420:	6060      	str	r0, [r4, #4]
 800e422:	4620      	mov	r0, r4
 800e424:	f000 f81c 	bl	800e460 <__sfp>
 800e428:	60a0      	str	r0, [r4, #8]
 800e42a:	4620      	mov	r0, r4
 800e42c:	f000 f818 	bl	800e460 <__sfp>
 800e430:	2200      	movs	r2, #0
 800e432:	60e0      	str	r0, [r4, #12]
 800e434:	2104      	movs	r1, #4
 800e436:	6860      	ldr	r0, [r4, #4]
 800e438:	f7ff ff82 	bl	800e340 <std>
 800e43c:	68a0      	ldr	r0, [r4, #8]
 800e43e:	2201      	movs	r2, #1
 800e440:	2109      	movs	r1, #9
 800e442:	f7ff ff7d 	bl	800e340 <std>
 800e446:	68e0      	ldr	r0, [r4, #12]
 800e448:	2202      	movs	r2, #2
 800e44a:	2112      	movs	r1, #18
 800e44c:	f7ff ff78 	bl	800e340 <std>
 800e450:	2301      	movs	r3, #1
 800e452:	61a3      	str	r3, [r4, #24]
 800e454:	e7d2      	b.n	800e3fc <__sinit+0xc>
 800e456:	bf00      	nop
 800e458:	080119cc 	.word	0x080119cc
 800e45c:	0800e389 	.word	0x0800e389

0800e460 <__sfp>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	4607      	mov	r7, r0
 800e464:	f7ff ffac 	bl	800e3c0 <__sfp_lock_acquire>
 800e468:	4b1e      	ldr	r3, [pc, #120]	; (800e4e4 <__sfp+0x84>)
 800e46a:	681e      	ldr	r6, [r3, #0]
 800e46c:	69b3      	ldr	r3, [r6, #24]
 800e46e:	b913      	cbnz	r3, 800e476 <__sfp+0x16>
 800e470:	4630      	mov	r0, r6
 800e472:	f7ff ffbd 	bl	800e3f0 <__sinit>
 800e476:	3648      	adds	r6, #72	; 0x48
 800e478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e47c:	3b01      	subs	r3, #1
 800e47e:	d503      	bpl.n	800e488 <__sfp+0x28>
 800e480:	6833      	ldr	r3, [r6, #0]
 800e482:	b30b      	cbz	r3, 800e4c8 <__sfp+0x68>
 800e484:	6836      	ldr	r6, [r6, #0]
 800e486:	e7f7      	b.n	800e478 <__sfp+0x18>
 800e488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e48c:	b9d5      	cbnz	r5, 800e4c4 <__sfp+0x64>
 800e48e:	4b16      	ldr	r3, [pc, #88]	; (800e4e8 <__sfp+0x88>)
 800e490:	60e3      	str	r3, [r4, #12]
 800e492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e496:	6665      	str	r5, [r4, #100]	; 0x64
 800e498:	f000 fbba 	bl	800ec10 <__retarget_lock_init_recursive>
 800e49c:	f7ff ff96 	bl	800e3cc <__sfp_lock_release>
 800e4a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4a8:	6025      	str	r5, [r4, #0]
 800e4aa:	61a5      	str	r5, [r4, #24]
 800e4ac:	2208      	movs	r2, #8
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4b4:	f7fd fb8a 	bl	800bbcc <memset>
 800e4b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4c4:	3468      	adds	r4, #104	; 0x68
 800e4c6:	e7d9      	b.n	800e47c <__sfp+0x1c>
 800e4c8:	2104      	movs	r1, #4
 800e4ca:	4638      	mov	r0, r7
 800e4cc:	f7ff ff62 	bl	800e394 <__sfmoreglue>
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	6030      	str	r0, [r6, #0]
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d1d5      	bne.n	800e484 <__sfp+0x24>
 800e4d8:	f7ff ff78 	bl	800e3cc <__sfp_lock_release>
 800e4dc:	230c      	movs	r3, #12
 800e4de:	603b      	str	r3, [r7, #0]
 800e4e0:	e7ee      	b.n	800e4c0 <__sfp+0x60>
 800e4e2:	bf00      	nop
 800e4e4:	080119cc 	.word	0x080119cc
 800e4e8:	ffff0001 	.word	0xffff0001

0800e4ec <_fwalk_reent>:
 800e4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f0:	4606      	mov	r6, r0
 800e4f2:	4688      	mov	r8, r1
 800e4f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e4f8:	2700      	movs	r7, #0
 800e4fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e4fe:	f1b9 0901 	subs.w	r9, r9, #1
 800e502:	d505      	bpl.n	800e510 <_fwalk_reent+0x24>
 800e504:	6824      	ldr	r4, [r4, #0]
 800e506:	2c00      	cmp	r4, #0
 800e508:	d1f7      	bne.n	800e4fa <_fwalk_reent+0xe>
 800e50a:	4638      	mov	r0, r7
 800e50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e510:	89ab      	ldrh	r3, [r5, #12]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d907      	bls.n	800e526 <_fwalk_reent+0x3a>
 800e516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e51a:	3301      	adds	r3, #1
 800e51c:	d003      	beq.n	800e526 <_fwalk_reent+0x3a>
 800e51e:	4629      	mov	r1, r5
 800e520:	4630      	mov	r0, r6
 800e522:	47c0      	blx	r8
 800e524:	4307      	orrs	r7, r0
 800e526:	3568      	adds	r5, #104	; 0x68
 800e528:	e7e9      	b.n	800e4fe <_fwalk_reent+0x12>

0800e52a <rshift>:
 800e52a:	6903      	ldr	r3, [r0, #16]
 800e52c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e534:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e538:	f100 0414 	add.w	r4, r0, #20
 800e53c:	dd45      	ble.n	800e5ca <rshift+0xa0>
 800e53e:	f011 011f 	ands.w	r1, r1, #31
 800e542:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e546:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e54a:	d10c      	bne.n	800e566 <rshift+0x3c>
 800e54c:	f100 0710 	add.w	r7, r0, #16
 800e550:	4629      	mov	r1, r5
 800e552:	42b1      	cmp	r1, r6
 800e554:	d334      	bcc.n	800e5c0 <rshift+0x96>
 800e556:	1a9b      	subs	r3, r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	1eea      	subs	r2, r5, #3
 800e55c:	4296      	cmp	r6, r2
 800e55e:	bf38      	it	cc
 800e560:	2300      	movcc	r3, #0
 800e562:	4423      	add	r3, r4
 800e564:	e015      	b.n	800e592 <rshift+0x68>
 800e566:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e56a:	f1c1 0820 	rsb	r8, r1, #32
 800e56e:	40cf      	lsrs	r7, r1
 800e570:	f105 0e04 	add.w	lr, r5, #4
 800e574:	46a1      	mov	r9, r4
 800e576:	4576      	cmp	r6, lr
 800e578:	46f4      	mov	ip, lr
 800e57a:	d815      	bhi.n	800e5a8 <rshift+0x7e>
 800e57c:	1a9a      	subs	r2, r3, r2
 800e57e:	0092      	lsls	r2, r2, #2
 800e580:	3a04      	subs	r2, #4
 800e582:	3501      	adds	r5, #1
 800e584:	42ae      	cmp	r6, r5
 800e586:	bf38      	it	cc
 800e588:	2200      	movcc	r2, #0
 800e58a:	18a3      	adds	r3, r4, r2
 800e58c:	50a7      	str	r7, [r4, r2]
 800e58e:	b107      	cbz	r7, 800e592 <rshift+0x68>
 800e590:	3304      	adds	r3, #4
 800e592:	1b1a      	subs	r2, r3, r4
 800e594:	42a3      	cmp	r3, r4
 800e596:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e59a:	bf08      	it	eq
 800e59c:	2300      	moveq	r3, #0
 800e59e:	6102      	str	r2, [r0, #16]
 800e5a0:	bf08      	it	eq
 800e5a2:	6143      	streq	r3, [r0, #20]
 800e5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5a8:	f8dc c000 	ldr.w	ip, [ip]
 800e5ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800e5b0:	ea4c 0707 	orr.w	r7, ip, r7
 800e5b4:	f849 7b04 	str.w	r7, [r9], #4
 800e5b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e5bc:	40cf      	lsrs	r7, r1
 800e5be:	e7da      	b.n	800e576 <rshift+0x4c>
 800e5c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800e5c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800e5c8:	e7c3      	b.n	800e552 <rshift+0x28>
 800e5ca:	4623      	mov	r3, r4
 800e5cc:	e7e1      	b.n	800e592 <rshift+0x68>

0800e5ce <__hexdig_fun>:
 800e5ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e5d2:	2b09      	cmp	r3, #9
 800e5d4:	d802      	bhi.n	800e5dc <__hexdig_fun+0xe>
 800e5d6:	3820      	subs	r0, #32
 800e5d8:	b2c0      	uxtb	r0, r0
 800e5da:	4770      	bx	lr
 800e5dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e5e0:	2b05      	cmp	r3, #5
 800e5e2:	d801      	bhi.n	800e5e8 <__hexdig_fun+0x1a>
 800e5e4:	3847      	subs	r0, #71	; 0x47
 800e5e6:	e7f7      	b.n	800e5d8 <__hexdig_fun+0xa>
 800e5e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e5ec:	2b05      	cmp	r3, #5
 800e5ee:	d801      	bhi.n	800e5f4 <__hexdig_fun+0x26>
 800e5f0:	3827      	subs	r0, #39	; 0x27
 800e5f2:	e7f1      	b.n	800e5d8 <__hexdig_fun+0xa>
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	4770      	bx	lr

0800e5f8 <__gethex>:
 800e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5fc:	ed2d 8b02 	vpush	{d8}
 800e600:	b089      	sub	sp, #36	; 0x24
 800e602:	ee08 0a10 	vmov	s16, r0
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	4bb4      	ldr	r3, [pc, #720]	; (800e8dc <__gethex+0x2e4>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	4618      	mov	r0, r3
 800e610:	468b      	mov	fp, r1
 800e612:	4690      	mov	r8, r2
 800e614:	f7f1 fdfc 	bl	8000210 <strlen>
 800e618:	9b01      	ldr	r3, [sp, #4]
 800e61a:	f8db 2000 	ldr.w	r2, [fp]
 800e61e:	4403      	add	r3, r0
 800e620:	4682      	mov	sl, r0
 800e622:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e626:	9305      	str	r3, [sp, #20]
 800e628:	1c93      	adds	r3, r2, #2
 800e62a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e62e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e632:	32fe      	adds	r2, #254	; 0xfe
 800e634:	18d1      	adds	r1, r2, r3
 800e636:	461f      	mov	r7, r3
 800e638:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e63c:	9100      	str	r1, [sp, #0]
 800e63e:	2830      	cmp	r0, #48	; 0x30
 800e640:	d0f8      	beq.n	800e634 <__gethex+0x3c>
 800e642:	f7ff ffc4 	bl	800e5ce <__hexdig_fun>
 800e646:	4604      	mov	r4, r0
 800e648:	2800      	cmp	r0, #0
 800e64a:	d13a      	bne.n	800e6c2 <__gethex+0xca>
 800e64c:	9901      	ldr	r1, [sp, #4]
 800e64e:	4652      	mov	r2, sl
 800e650:	4638      	mov	r0, r7
 800e652:	f001 facc 	bl	800fbee <strncmp>
 800e656:	4605      	mov	r5, r0
 800e658:	2800      	cmp	r0, #0
 800e65a:	d168      	bne.n	800e72e <__gethex+0x136>
 800e65c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e660:	eb07 060a 	add.w	r6, r7, sl
 800e664:	f7ff ffb3 	bl	800e5ce <__hexdig_fun>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d062      	beq.n	800e732 <__gethex+0x13a>
 800e66c:	4633      	mov	r3, r6
 800e66e:	7818      	ldrb	r0, [r3, #0]
 800e670:	2830      	cmp	r0, #48	; 0x30
 800e672:	461f      	mov	r7, r3
 800e674:	f103 0301 	add.w	r3, r3, #1
 800e678:	d0f9      	beq.n	800e66e <__gethex+0x76>
 800e67a:	f7ff ffa8 	bl	800e5ce <__hexdig_fun>
 800e67e:	2301      	movs	r3, #1
 800e680:	fab0 f480 	clz	r4, r0
 800e684:	0964      	lsrs	r4, r4, #5
 800e686:	4635      	mov	r5, r6
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	463a      	mov	r2, r7
 800e68c:	4616      	mov	r6, r2
 800e68e:	3201      	adds	r2, #1
 800e690:	7830      	ldrb	r0, [r6, #0]
 800e692:	f7ff ff9c 	bl	800e5ce <__hexdig_fun>
 800e696:	2800      	cmp	r0, #0
 800e698:	d1f8      	bne.n	800e68c <__gethex+0x94>
 800e69a:	9901      	ldr	r1, [sp, #4]
 800e69c:	4652      	mov	r2, sl
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f001 faa5 	bl	800fbee <strncmp>
 800e6a4:	b980      	cbnz	r0, 800e6c8 <__gethex+0xd0>
 800e6a6:	b94d      	cbnz	r5, 800e6bc <__gethex+0xc4>
 800e6a8:	eb06 050a 	add.w	r5, r6, sl
 800e6ac:	462a      	mov	r2, r5
 800e6ae:	4616      	mov	r6, r2
 800e6b0:	3201      	adds	r2, #1
 800e6b2:	7830      	ldrb	r0, [r6, #0]
 800e6b4:	f7ff ff8b 	bl	800e5ce <__hexdig_fun>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d1f8      	bne.n	800e6ae <__gethex+0xb6>
 800e6bc:	1bad      	subs	r5, r5, r6
 800e6be:	00ad      	lsls	r5, r5, #2
 800e6c0:	e004      	b.n	800e6cc <__gethex+0xd4>
 800e6c2:	2400      	movs	r4, #0
 800e6c4:	4625      	mov	r5, r4
 800e6c6:	e7e0      	b.n	800e68a <__gethex+0x92>
 800e6c8:	2d00      	cmp	r5, #0
 800e6ca:	d1f7      	bne.n	800e6bc <__gethex+0xc4>
 800e6cc:	7833      	ldrb	r3, [r6, #0]
 800e6ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e6d2:	2b50      	cmp	r3, #80	; 0x50
 800e6d4:	d13b      	bne.n	800e74e <__gethex+0x156>
 800e6d6:	7873      	ldrb	r3, [r6, #1]
 800e6d8:	2b2b      	cmp	r3, #43	; 0x2b
 800e6da:	d02c      	beq.n	800e736 <__gethex+0x13e>
 800e6dc:	2b2d      	cmp	r3, #45	; 0x2d
 800e6de:	d02e      	beq.n	800e73e <__gethex+0x146>
 800e6e0:	1c71      	adds	r1, r6, #1
 800e6e2:	f04f 0900 	mov.w	r9, #0
 800e6e6:	7808      	ldrb	r0, [r1, #0]
 800e6e8:	f7ff ff71 	bl	800e5ce <__hexdig_fun>
 800e6ec:	1e43      	subs	r3, r0, #1
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b18      	cmp	r3, #24
 800e6f2:	d82c      	bhi.n	800e74e <__gethex+0x156>
 800e6f4:	f1a0 0210 	sub.w	r2, r0, #16
 800e6f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e6fc:	f7ff ff67 	bl	800e5ce <__hexdig_fun>
 800e700:	1e43      	subs	r3, r0, #1
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b18      	cmp	r3, #24
 800e706:	d91d      	bls.n	800e744 <__gethex+0x14c>
 800e708:	f1b9 0f00 	cmp.w	r9, #0
 800e70c:	d000      	beq.n	800e710 <__gethex+0x118>
 800e70e:	4252      	negs	r2, r2
 800e710:	4415      	add	r5, r2
 800e712:	f8cb 1000 	str.w	r1, [fp]
 800e716:	b1e4      	cbz	r4, 800e752 <__gethex+0x15a>
 800e718:	9b00      	ldr	r3, [sp, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	bf14      	ite	ne
 800e71e:	2700      	movne	r7, #0
 800e720:	2706      	moveq	r7, #6
 800e722:	4638      	mov	r0, r7
 800e724:	b009      	add	sp, #36	; 0x24
 800e726:	ecbd 8b02 	vpop	{d8}
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	463e      	mov	r6, r7
 800e730:	4625      	mov	r5, r4
 800e732:	2401      	movs	r4, #1
 800e734:	e7ca      	b.n	800e6cc <__gethex+0xd4>
 800e736:	f04f 0900 	mov.w	r9, #0
 800e73a:	1cb1      	adds	r1, r6, #2
 800e73c:	e7d3      	b.n	800e6e6 <__gethex+0xee>
 800e73e:	f04f 0901 	mov.w	r9, #1
 800e742:	e7fa      	b.n	800e73a <__gethex+0x142>
 800e744:	230a      	movs	r3, #10
 800e746:	fb03 0202 	mla	r2, r3, r2, r0
 800e74a:	3a10      	subs	r2, #16
 800e74c:	e7d4      	b.n	800e6f8 <__gethex+0x100>
 800e74e:	4631      	mov	r1, r6
 800e750:	e7df      	b.n	800e712 <__gethex+0x11a>
 800e752:	1bf3      	subs	r3, r6, r7
 800e754:	3b01      	subs	r3, #1
 800e756:	4621      	mov	r1, r4
 800e758:	2b07      	cmp	r3, #7
 800e75a:	dc0b      	bgt.n	800e774 <__gethex+0x17c>
 800e75c:	ee18 0a10 	vmov	r0, s16
 800e760:	f000 fad8 	bl	800ed14 <_Balloc>
 800e764:	4604      	mov	r4, r0
 800e766:	b940      	cbnz	r0, 800e77a <__gethex+0x182>
 800e768:	4b5d      	ldr	r3, [pc, #372]	; (800e8e0 <__gethex+0x2e8>)
 800e76a:	4602      	mov	r2, r0
 800e76c:	21de      	movs	r1, #222	; 0xde
 800e76e:	485d      	ldr	r0, [pc, #372]	; (800e8e4 <__gethex+0x2ec>)
 800e770:	f001 fa70 	bl	800fc54 <__assert_func>
 800e774:	3101      	adds	r1, #1
 800e776:	105b      	asrs	r3, r3, #1
 800e778:	e7ee      	b.n	800e758 <__gethex+0x160>
 800e77a:	f100 0914 	add.w	r9, r0, #20
 800e77e:	f04f 0b00 	mov.w	fp, #0
 800e782:	f1ca 0301 	rsb	r3, sl, #1
 800e786:	f8cd 9008 	str.w	r9, [sp, #8]
 800e78a:	f8cd b000 	str.w	fp, [sp]
 800e78e:	9306      	str	r3, [sp, #24]
 800e790:	42b7      	cmp	r7, r6
 800e792:	d340      	bcc.n	800e816 <__gethex+0x21e>
 800e794:	9802      	ldr	r0, [sp, #8]
 800e796:	9b00      	ldr	r3, [sp, #0]
 800e798:	f840 3b04 	str.w	r3, [r0], #4
 800e79c:	eba0 0009 	sub.w	r0, r0, r9
 800e7a0:	1080      	asrs	r0, r0, #2
 800e7a2:	0146      	lsls	r6, r0, #5
 800e7a4:	6120      	str	r0, [r4, #16]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 fba6 	bl	800eef8 <__hi0bits>
 800e7ac:	1a30      	subs	r0, r6, r0
 800e7ae:	f8d8 6000 	ldr.w	r6, [r8]
 800e7b2:	42b0      	cmp	r0, r6
 800e7b4:	dd63      	ble.n	800e87e <__gethex+0x286>
 800e7b6:	1b87      	subs	r7, r0, r6
 800e7b8:	4639      	mov	r1, r7
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 ff4a 	bl	800f654 <__any_on>
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	b1a8      	cbz	r0, 800e7f0 <__gethex+0x1f8>
 800e7c4:	1e7b      	subs	r3, r7, #1
 800e7c6:	1159      	asrs	r1, r3, #5
 800e7c8:	f003 021f 	and.w	r2, r3, #31
 800e7cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e7d0:	f04f 0a01 	mov.w	sl, #1
 800e7d4:	fa0a f202 	lsl.w	r2, sl, r2
 800e7d8:	420a      	tst	r2, r1
 800e7da:	d009      	beq.n	800e7f0 <__gethex+0x1f8>
 800e7dc:	4553      	cmp	r3, sl
 800e7de:	dd05      	ble.n	800e7ec <__gethex+0x1f4>
 800e7e0:	1eb9      	subs	r1, r7, #2
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 ff36 	bl	800f654 <__any_on>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d145      	bne.n	800e878 <__gethex+0x280>
 800e7ec:	f04f 0a02 	mov.w	sl, #2
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f7ff fe99 	bl	800e52a <rshift>
 800e7f8:	443d      	add	r5, r7
 800e7fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7fe:	42ab      	cmp	r3, r5
 800e800:	da4c      	bge.n	800e89c <__gethex+0x2a4>
 800e802:	ee18 0a10 	vmov	r0, s16
 800e806:	4621      	mov	r1, r4
 800e808:	f000 fac4 	bl	800ed94 <_Bfree>
 800e80c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e80e:	2300      	movs	r3, #0
 800e810:	6013      	str	r3, [r2, #0]
 800e812:	27a3      	movs	r7, #163	; 0xa3
 800e814:	e785      	b.n	800e722 <__gethex+0x12a>
 800e816:	1e73      	subs	r3, r6, #1
 800e818:	9a05      	ldr	r2, [sp, #20]
 800e81a:	9303      	str	r3, [sp, #12]
 800e81c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e820:	4293      	cmp	r3, r2
 800e822:	d019      	beq.n	800e858 <__gethex+0x260>
 800e824:	f1bb 0f20 	cmp.w	fp, #32
 800e828:	d107      	bne.n	800e83a <__gethex+0x242>
 800e82a:	9b02      	ldr	r3, [sp, #8]
 800e82c:	9a00      	ldr	r2, [sp, #0]
 800e82e:	f843 2b04 	str.w	r2, [r3], #4
 800e832:	9302      	str	r3, [sp, #8]
 800e834:	2300      	movs	r3, #0
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	469b      	mov	fp, r3
 800e83a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e83e:	f7ff fec6 	bl	800e5ce <__hexdig_fun>
 800e842:	9b00      	ldr	r3, [sp, #0]
 800e844:	f000 000f 	and.w	r0, r0, #15
 800e848:	fa00 f00b 	lsl.w	r0, r0, fp
 800e84c:	4303      	orrs	r3, r0
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	f10b 0b04 	add.w	fp, fp, #4
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	e00d      	b.n	800e874 <__gethex+0x27c>
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	9a06      	ldr	r2, [sp, #24]
 800e85c:	4413      	add	r3, r2
 800e85e:	42bb      	cmp	r3, r7
 800e860:	d3e0      	bcc.n	800e824 <__gethex+0x22c>
 800e862:	4618      	mov	r0, r3
 800e864:	9901      	ldr	r1, [sp, #4]
 800e866:	9307      	str	r3, [sp, #28]
 800e868:	4652      	mov	r2, sl
 800e86a:	f001 f9c0 	bl	800fbee <strncmp>
 800e86e:	9b07      	ldr	r3, [sp, #28]
 800e870:	2800      	cmp	r0, #0
 800e872:	d1d7      	bne.n	800e824 <__gethex+0x22c>
 800e874:	461e      	mov	r6, r3
 800e876:	e78b      	b.n	800e790 <__gethex+0x198>
 800e878:	f04f 0a03 	mov.w	sl, #3
 800e87c:	e7b8      	b.n	800e7f0 <__gethex+0x1f8>
 800e87e:	da0a      	bge.n	800e896 <__gethex+0x29e>
 800e880:	1a37      	subs	r7, r6, r0
 800e882:	4621      	mov	r1, r4
 800e884:	ee18 0a10 	vmov	r0, s16
 800e888:	463a      	mov	r2, r7
 800e88a:	f000 fc9f 	bl	800f1cc <__lshift>
 800e88e:	1bed      	subs	r5, r5, r7
 800e890:	4604      	mov	r4, r0
 800e892:	f100 0914 	add.w	r9, r0, #20
 800e896:	f04f 0a00 	mov.w	sl, #0
 800e89a:	e7ae      	b.n	800e7fa <__gethex+0x202>
 800e89c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e8a0:	42a8      	cmp	r0, r5
 800e8a2:	dd72      	ble.n	800e98a <__gethex+0x392>
 800e8a4:	1b45      	subs	r5, r0, r5
 800e8a6:	42ae      	cmp	r6, r5
 800e8a8:	dc36      	bgt.n	800e918 <__gethex+0x320>
 800e8aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d02a      	beq.n	800e908 <__gethex+0x310>
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d02c      	beq.n	800e910 <__gethex+0x318>
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d11c      	bne.n	800e8f4 <__gethex+0x2fc>
 800e8ba:	42ae      	cmp	r6, r5
 800e8bc:	d11a      	bne.n	800e8f4 <__gethex+0x2fc>
 800e8be:	2e01      	cmp	r6, #1
 800e8c0:	d112      	bne.n	800e8e8 <__gethex+0x2f0>
 800e8c2:	9a04      	ldr	r2, [sp, #16]
 800e8c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8c8:	6013      	str	r3, [r2, #0]
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	6123      	str	r3, [r4, #16]
 800e8ce:	f8c9 3000 	str.w	r3, [r9]
 800e8d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8d4:	2762      	movs	r7, #98	; 0x62
 800e8d6:	601c      	str	r4, [r3, #0]
 800e8d8:	e723      	b.n	800e722 <__gethex+0x12a>
 800e8da:	bf00      	nop
 800e8dc:	08011cb4 	.word	0x08011cb4
 800e8e0:	08011bd8 	.word	0x08011bd8
 800e8e4:	08011c4c 	.word	0x08011c4c
 800e8e8:	1e71      	subs	r1, r6, #1
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 feb2 	bl	800f654 <__any_on>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d1e6      	bne.n	800e8c2 <__gethex+0x2ca>
 800e8f4:	ee18 0a10 	vmov	r0, s16
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	f000 fa4b 	bl	800ed94 <_Bfree>
 800e8fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e900:	2300      	movs	r3, #0
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	2750      	movs	r7, #80	; 0x50
 800e906:	e70c      	b.n	800e722 <__gethex+0x12a>
 800e908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1f2      	bne.n	800e8f4 <__gethex+0x2fc>
 800e90e:	e7d8      	b.n	800e8c2 <__gethex+0x2ca>
 800e910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1d5      	bne.n	800e8c2 <__gethex+0x2ca>
 800e916:	e7ed      	b.n	800e8f4 <__gethex+0x2fc>
 800e918:	1e6f      	subs	r7, r5, #1
 800e91a:	f1ba 0f00 	cmp.w	sl, #0
 800e91e:	d131      	bne.n	800e984 <__gethex+0x38c>
 800e920:	b127      	cbz	r7, 800e92c <__gethex+0x334>
 800e922:	4639      	mov	r1, r7
 800e924:	4620      	mov	r0, r4
 800e926:	f000 fe95 	bl	800f654 <__any_on>
 800e92a:	4682      	mov	sl, r0
 800e92c:	117b      	asrs	r3, r7, #5
 800e92e:	2101      	movs	r1, #1
 800e930:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e934:	f007 071f 	and.w	r7, r7, #31
 800e938:	fa01 f707 	lsl.w	r7, r1, r7
 800e93c:	421f      	tst	r7, r3
 800e93e:	4629      	mov	r1, r5
 800e940:	4620      	mov	r0, r4
 800e942:	bf18      	it	ne
 800e944:	f04a 0a02 	orrne.w	sl, sl, #2
 800e948:	1b76      	subs	r6, r6, r5
 800e94a:	f7ff fdee 	bl	800e52a <rshift>
 800e94e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e952:	2702      	movs	r7, #2
 800e954:	f1ba 0f00 	cmp.w	sl, #0
 800e958:	d048      	beq.n	800e9ec <__gethex+0x3f4>
 800e95a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d015      	beq.n	800e98e <__gethex+0x396>
 800e962:	2b03      	cmp	r3, #3
 800e964:	d017      	beq.n	800e996 <__gethex+0x39e>
 800e966:	2b01      	cmp	r3, #1
 800e968:	d109      	bne.n	800e97e <__gethex+0x386>
 800e96a:	f01a 0f02 	tst.w	sl, #2
 800e96e:	d006      	beq.n	800e97e <__gethex+0x386>
 800e970:	f8d9 0000 	ldr.w	r0, [r9]
 800e974:	ea4a 0a00 	orr.w	sl, sl, r0
 800e978:	f01a 0f01 	tst.w	sl, #1
 800e97c:	d10e      	bne.n	800e99c <__gethex+0x3a4>
 800e97e:	f047 0710 	orr.w	r7, r7, #16
 800e982:	e033      	b.n	800e9ec <__gethex+0x3f4>
 800e984:	f04f 0a01 	mov.w	sl, #1
 800e988:	e7d0      	b.n	800e92c <__gethex+0x334>
 800e98a:	2701      	movs	r7, #1
 800e98c:	e7e2      	b.n	800e954 <__gethex+0x35c>
 800e98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e990:	f1c3 0301 	rsb	r3, r3, #1
 800e994:	9315      	str	r3, [sp, #84]	; 0x54
 800e996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d0f0      	beq.n	800e97e <__gethex+0x386>
 800e99c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e9a0:	f104 0314 	add.w	r3, r4, #20
 800e9a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e9a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e9ac:	f04f 0c00 	mov.w	ip, #0
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800e9ba:	d01c      	beq.n	800e9f6 <__gethex+0x3fe>
 800e9bc:	3201      	adds	r2, #1
 800e9be:	6002      	str	r2, [r0, #0]
 800e9c0:	2f02      	cmp	r7, #2
 800e9c2:	f104 0314 	add.w	r3, r4, #20
 800e9c6:	d13f      	bne.n	800ea48 <__gethex+0x450>
 800e9c8:	f8d8 2000 	ldr.w	r2, [r8]
 800e9cc:	3a01      	subs	r2, #1
 800e9ce:	42b2      	cmp	r2, r6
 800e9d0:	d10a      	bne.n	800e9e8 <__gethex+0x3f0>
 800e9d2:	1171      	asrs	r1, r6, #5
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9da:	f006 061f 	and.w	r6, r6, #31
 800e9de:	fa02 f606 	lsl.w	r6, r2, r6
 800e9e2:	421e      	tst	r6, r3
 800e9e4:	bf18      	it	ne
 800e9e6:	4617      	movne	r7, r2
 800e9e8:	f047 0720 	orr.w	r7, r7, #32
 800e9ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9ee:	601c      	str	r4, [r3, #0]
 800e9f0:	9b04      	ldr	r3, [sp, #16]
 800e9f2:	601d      	str	r5, [r3, #0]
 800e9f4:	e695      	b.n	800e722 <__gethex+0x12a>
 800e9f6:	4299      	cmp	r1, r3
 800e9f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9fc:	d8d8      	bhi.n	800e9b0 <__gethex+0x3b8>
 800e9fe:	68a3      	ldr	r3, [r4, #8]
 800ea00:	459b      	cmp	fp, r3
 800ea02:	db19      	blt.n	800ea38 <__gethex+0x440>
 800ea04:	6861      	ldr	r1, [r4, #4]
 800ea06:	ee18 0a10 	vmov	r0, s16
 800ea0a:	3101      	adds	r1, #1
 800ea0c:	f000 f982 	bl	800ed14 <_Balloc>
 800ea10:	4681      	mov	r9, r0
 800ea12:	b918      	cbnz	r0, 800ea1c <__gethex+0x424>
 800ea14:	4b1a      	ldr	r3, [pc, #104]	; (800ea80 <__gethex+0x488>)
 800ea16:	4602      	mov	r2, r0
 800ea18:	2184      	movs	r1, #132	; 0x84
 800ea1a:	e6a8      	b.n	800e76e <__gethex+0x176>
 800ea1c:	6922      	ldr	r2, [r4, #16]
 800ea1e:	3202      	adds	r2, #2
 800ea20:	f104 010c 	add.w	r1, r4, #12
 800ea24:	0092      	lsls	r2, r2, #2
 800ea26:	300c      	adds	r0, #12
 800ea28:	f7fd f8c2 	bl	800bbb0 <memcpy>
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	ee18 0a10 	vmov	r0, s16
 800ea32:	f000 f9af 	bl	800ed94 <_Bfree>
 800ea36:	464c      	mov	r4, r9
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea40:	6122      	str	r2, [r4, #16]
 800ea42:	2201      	movs	r2, #1
 800ea44:	615a      	str	r2, [r3, #20]
 800ea46:	e7bb      	b.n	800e9c0 <__gethex+0x3c8>
 800ea48:	6922      	ldr	r2, [r4, #16]
 800ea4a:	455a      	cmp	r2, fp
 800ea4c:	dd0b      	ble.n	800ea66 <__gethex+0x46e>
 800ea4e:	2101      	movs	r1, #1
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7ff fd6a 	bl	800e52a <rshift>
 800ea56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea5a:	3501      	adds	r5, #1
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	f6ff aed0 	blt.w	800e802 <__gethex+0x20a>
 800ea62:	2701      	movs	r7, #1
 800ea64:	e7c0      	b.n	800e9e8 <__gethex+0x3f0>
 800ea66:	f016 061f 	ands.w	r6, r6, #31
 800ea6a:	d0fa      	beq.n	800ea62 <__gethex+0x46a>
 800ea6c:	4453      	add	r3, sl
 800ea6e:	f1c6 0620 	rsb	r6, r6, #32
 800ea72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea76:	f000 fa3f 	bl	800eef8 <__hi0bits>
 800ea7a:	42b0      	cmp	r0, r6
 800ea7c:	dbe7      	blt.n	800ea4e <__gethex+0x456>
 800ea7e:	e7f0      	b.n	800ea62 <__gethex+0x46a>
 800ea80:	08011bd8 	.word	0x08011bd8

0800ea84 <L_shift>:
 800ea84:	f1c2 0208 	rsb	r2, r2, #8
 800ea88:	0092      	lsls	r2, r2, #2
 800ea8a:	b570      	push	{r4, r5, r6, lr}
 800ea8c:	f1c2 0620 	rsb	r6, r2, #32
 800ea90:	6843      	ldr	r3, [r0, #4]
 800ea92:	6804      	ldr	r4, [r0, #0]
 800ea94:	fa03 f506 	lsl.w	r5, r3, r6
 800ea98:	432c      	orrs	r4, r5
 800ea9a:	40d3      	lsrs	r3, r2
 800ea9c:	6004      	str	r4, [r0, #0]
 800ea9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eaa2:	4288      	cmp	r0, r1
 800eaa4:	d3f4      	bcc.n	800ea90 <L_shift+0xc>
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}

0800eaa8 <__match>:
 800eaa8:	b530      	push	{r4, r5, lr}
 800eaaa:	6803      	ldr	r3, [r0, #0]
 800eaac:	3301      	adds	r3, #1
 800eaae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eab2:	b914      	cbnz	r4, 800eaba <__match+0x12>
 800eab4:	6003      	str	r3, [r0, #0]
 800eab6:	2001      	movs	r0, #1
 800eab8:	bd30      	pop	{r4, r5, pc}
 800eaba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eac2:	2d19      	cmp	r5, #25
 800eac4:	bf98      	it	ls
 800eac6:	3220      	addls	r2, #32
 800eac8:	42a2      	cmp	r2, r4
 800eaca:	d0f0      	beq.n	800eaae <__match+0x6>
 800eacc:	2000      	movs	r0, #0
 800eace:	e7f3      	b.n	800eab8 <__match+0x10>

0800ead0 <__hexnan>:
 800ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	680b      	ldr	r3, [r1, #0]
 800ead6:	115e      	asrs	r6, r3, #5
 800ead8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eadc:	f013 031f 	ands.w	r3, r3, #31
 800eae0:	b087      	sub	sp, #28
 800eae2:	bf18      	it	ne
 800eae4:	3604      	addne	r6, #4
 800eae6:	2500      	movs	r5, #0
 800eae8:	1f37      	subs	r7, r6, #4
 800eaea:	4690      	mov	r8, r2
 800eaec:	6802      	ldr	r2, [r0, #0]
 800eaee:	9301      	str	r3, [sp, #4]
 800eaf0:	4682      	mov	sl, r0
 800eaf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800eaf6:	46b9      	mov	r9, r7
 800eaf8:	463c      	mov	r4, r7
 800eafa:	9502      	str	r5, [sp, #8]
 800eafc:	46ab      	mov	fp, r5
 800eafe:	7851      	ldrb	r1, [r2, #1]
 800eb00:	1c53      	adds	r3, r2, #1
 800eb02:	9303      	str	r3, [sp, #12]
 800eb04:	b341      	cbz	r1, 800eb58 <__hexnan+0x88>
 800eb06:	4608      	mov	r0, r1
 800eb08:	9205      	str	r2, [sp, #20]
 800eb0a:	9104      	str	r1, [sp, #16]
 800eb0c:	f7ff fd5f 	bl	800e5ce <__hexdig_fun>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d14f      	bne.n	800ebb4 <__hexnan+0xe4>
 800eb14:	9904      	ldr	r1, [sp, #16]
 800eb16:	9a05      	ldr	r2, [sp, #20]
 800eb18:	2920      	cmp	r1, #32
 800eb1a:	d818      	bhi.n	800eb4e <__hexnan+0x7e>
 800eb1c:	9b02      	ldr	r3, [sp, #8]
 800eb1e:	459b      	cmp	fp, r3
 800eb20:	dd13      	ble.n	800eb4a <__hexnan+0x7a>
 800eb22:	454c      	cmp	r4, r9
 800eb24:	d206      	bcs.n	800eb34 <__hexnan+0x64>
 800eb26:	2d07      	cmp	r5, #7
 800eb28:	dc04      	bgt.n	800eb34 <__hexnan+0x64>
 800eb2a:	462a      	mov	r2, r5
 800eb2c:	4649      	mov	r1, r9
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f7ff ffa8 	bl	800ea84 <L_shift>
 800eb34:	4544      	cmp	r4, r8
 800eb36:	d950      	bls.n	800ebda <__hexnan+0x10a>
 800eb38:	2300      	movs	r3, #0
 800eb3a:	f1a4 0904 	sub.w	r9, r4, #4
 800eb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb42:	f8cd b008 	str.w	fp, [sp, #8]
 800eb46:	464c      	mov	r4, r9
 800eb48:	461d      	mov	r5, r3
 800eb4a:	9a03      	ldr	r2, [sp, #12]
 800eb4c:	e7d7      	b.n	800eafe <__hexnan+0x2e>
 800eb4e:	2929      	cmp	r1, #41	; 0x29
 800eb50:	d156      	bne.n	800ec00 <__hexnan+0x130>
 800eb52:	3202      	adds	r2, #2
 800eb54:	f8ca 2000 	str.w	r2, [sl]
 800eb58:	f1bb 0f00 	cmp.w	fp, #0
 800eb5c:	d050      	beq.n	800ec00 <__hexnan+0x130>
 800eb5e:	454c      	cmp	r4, r9
 800eb60:	d206      	bcs.n	800eb70 <__hexnan+0xa0>
 800eb62:	2d07      	cmp	r5, #7
 800eb64:	dc04      	bgt.n	800eb70 <__hexnan+0xa0>
 800eb66:	462a      	mov	r2, r5
 800eb68:	4649      	mov	r1, r9
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f7ff ff8a 	bl	800ea84 <L_shift>
 800eb70:	4544      	cmp	r4, r8
 800eb72:	d934      	bls.n	800ebde <__hexnan+0x10e>
 800eb74:	f1a8 0204 	sub.w	r2, r8, #4
 800eb78:	4623      	mov	r3, r4
 800eb7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800eb7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800eb82:	429f      	cmp	r7, r3
 800eb84:	d2f9      	bcs.n	800eb7a <__hexnan+0xaa>
 800eb86:	1b3b      	subs	r3, r7, r4
 800eb88:	f023 0303 	bic.w	r3, r3, #3
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	3401      	adds	r4, #1
 800eb90:	3e03      	subs	r6, #3
 800eb92:	42b4      	cmp	r4, r6
 800eb94:	bf88      	it	hi
 800eb96:	2304      	movhi	r3, #4
 800eb98:	4443      	add	r3, r8
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f843 2b04 	str.w	r2, [r3], #4
 800eba0:	429f      	cmp	r7, r3
 800eba2:	d2fb      	bcs.n	800eb9c <__hexnan+0xcc>
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	b91b      	cbnz	r3, 800ebb0 <__hexnan+0xe0>
 800eba8:	4547      	cmp	r7, r8
 800ebaa:	d127      	bne.n	800ebfc <__hexnan+0x12c>
 800ebac:	2301      	movs	r3, #1
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	2005      	movs	r0, #5
 800ebb2:	e026      	b.n	800ec02 <__hexnan+0x132>
 800ebb4:	3501      	adds	r5, #1
 800ebb6:	2d08      	cmp	r5, #8
 800ebb8:	f10b 0b01 	add.w	fp, fp, #1
 800ebbc:	dd06      	ble.n	800ebcc <__hexnan+0xfc>
 800ebbe:	4544      	cmp	r4, r8
 800ebc0:	d9c3      	bls.n	800eb4a <__hexnan+0x7a>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebc8:	2501      	movs	r5, #1
 800ebca:	3c04      	subs	r4, #4
 800ebcc:	6822      	ldr	r2, [r4, #0]
 800ebce:	f000 000f 	and.w	r0, r0, #15
 800ebd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ebd6:	6022      	str	r2, [r4, #0]
 800ebd8:	e7b7      	b.n	800eb4a <__hexnan+0x7a>
 800ebda:	2508      	movs	r5, #8
 800ebdc:	e7b5      	b.n	800eb4a <__hexnan+0x7a>
 800ebde:	9b01      	ldr	r3, [sp, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d0df      	beq.n	800eba4 <__hexnan+0xd4>
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebe8:	f1c3 0320 	rsb	r3, r3, #32
 800ebec:	fa22 f303 	lsr.w	r3, r2, r3
 800ebf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ebf4:	401a      	ands	r2, r3
 800ebf6:	f846 2c04 	str.w	r2, [r6, #-4]
 800ebfa:	e7d3      	b.n	800eba4 <__hexnan+0xd4>
 800ebfc:	3f04      	subs	r7, #4
 800ebfe:	e7d1      	b.n	800eba4 <__hexnan+0xd4>
 800ec00:	2004      	movs	r0, #4
 800ec02:	b007      	add	sp, #28
 800ec04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec08 <_localeconv_r>:
 800ec08:	4800      	ldr	r0, [pc, #0]	; (800ec0c <_localeconv_r+0x4>)
 800ec0a:	4770      	bx	lr
 800ec0c:	200001a4 	.word	0x200001a4

0800ec10 <__retarget_lock_init_recursive>:
 800ec10:	4770      	bx	lr

0800ec12 <__retarget_lock_acquire_recursive>:
 800ec12:	4770      	bx	lr

0800ec14 <__retarget_lock_release_recursive>:
 800ec14:	4770      	bx	lr

0800ec16 <__swhatbuf_r>:
 800ec16:	b570      	push	{r4, r5, r6, lr}
 800ec18:	460e      	mov	r6, r1
 800ec1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec1e:	2900      	cmp	r1, #0
 800ec20:	b096      	sub	sp, #88	; 0x58
 800ec22:	4614      	mov	r4, r2
 800ec24:	461d      	mov	r5, r3
 800ec26:	da08      	bge.n	800ec3a <__swhatbuf_r+0x24>
 800ec28:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	602a      	str	r2, [r5, #0]
 800ec30:	061a      	lsls	r2, r3, #24
 800ec32:	d410      	bmi.n	800ec56 <__swhatbuf_r+0x40>
 800ec34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec38:	e00e      	b.n	800ec58 <__swhatbuf_r+0x42>
 800ec3a:	466a      	mov	r2, sp
 800ec3c:	f001 f84a 	bl	800fcd4 <_fstat_r>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	dbf1      	blt.n	800ec28 <__swhatbuf_r+0x12>
 800ec44:	9a01      	ldr	r2, [sp, #4]
 800ec46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec4e:	425a      	negs	r2, r3
 800ec50:	415a      	adcs	r2, r3
 800ec52:	602a      	str	r2, [r5, #0]
 800ec54:	e7ee      	b.n	800ec34 <__swhatbuf_r+0x1e>
 800ec56:	2340      	movs	r3, #64	; 0x40
 800ec58:	2000      	movs	r0, #0
 800ec5a:	6023      	str	r3, [r4, #0]
 800ec5c:	b016      	add	sp, #88	; 0x58
 800ec5e:	bd70      	pop	{r4, r5, r6, pc}

0800ec60 <__smakebuf_r>:
 800ec60:	898b      	ldrh	r3, [r1, #12]
 800ec62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec64:	079d      	lsls	r5, r3, #30
 800ec66:	4606      	mov	r6, r0
 800ec68:	460c      	mov	r4, r1
 800ec6a:	d507      	bpl.n	800ec7c <__smakebuf_r+0x1c>
 800ec6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	6123      	str	r3, [r4, #16]
 800ec74:	2301      	movs	r3, #1
 800ec76:	6163      	str	r3, [r4, #20]
 800ec78:	b002      	add	sp, #8
 800ec7a:	bd70      	pop	{r4, r5, r6, pc}
 800ec7c:	ab01      	add	r3, sp, #4
 800ec7e:	466a      	mov	r2, sp
 800ec80:	f7ff ffc9 	bl	800ec16 <__swhatbuf_r>
 800ec84:	9900      	ldr	r1, [sp, #0]
 800ec86:	4605      	mov	r5, r0
 800ec88:	4630      	mov	r0, r6
 800ec8a:	f000 fd87 	bl	800f79c <_malloc_r>
 800ec8e:	b948      	cbnz	r0, 800eca4 <__smakebuf_r+0x44>
 800ec90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec94:	059a      	lsls	r2, r3, #22
 800ec96:	d4ef      	bmi.n	800ec78 <__smakebuf_r+0x18>
 800ec98:	f023 0303 	bic.w	r3, r3, #3
 800ec9c:	f043 0302 	orr.w	r3, r3, #2
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	e7e3      	b.n	800ec6c <__smakebuf_r+0xc>
 800eca4:	4b0d      	ldr	r3, [pc, #52]	; (800ecdc <__smakebuf_r+0x7c>)
 800eca6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	6020      	str	r0, [r4, #0]
 800ecac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecb0:	81a3      	strh	r3, [r4, #12]
 800ecb2:	9b00      	ldr	r3, [sp, #0]
 800ecb4:	6163      	str	r3, [r4, #20]
 800ecb6:	9b01      	ldr	r3, [sp, #4]
 800ecb8:	6120      	str	r0, [r4, #16]
 800ecba:	b15b      	cbz	r3, 800ecd4 <__smakebuf_r+0x74>
 800ecbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	f001 f819 	bl	800fcf8 <_isatty_r>
 800ecc6:	b128      	cbz	r0, 800ecd4 <__smakebuf_r+0x74>
 800ecc8:	89a3      	ldrh	r3, [r4, #12]
 800ecca:	f023 0303 	bic.w	r3, r3, #3
 800ecce:	f043 0301 	orr.w	r3, r3, #1
 800ecd2:	81a3      	strh	r3, [r4, #12]
 800ecd4:	89a0      	ldrh	r0, [r4, #12]
 800ecd6:	4305      	orrs	r5, r0
 800ecd8:	81a5      	strh	r5, [r4, #12]
 800ecda:	e7cd      	b.n	800ec78 <__smakebuf_r+0x18>
 800ecdc:	0800e389 	.word	0x0800e389

0800ece0 <malloc>:
 800ece0:	4b02      	ldr	r3, [pc, #8]	; (800ecec <malloc+0xc>)
 800ece2:	4601      	mov	r1, r0
 800ece4:	6818      	ldr	r0, [r3, #0]
 800ece6:	f000 bd59 	b.w	800f79c <_malloc_r>
 800ecea:	bf00      	nop
 800ecec:	2000004c 	.word	0x2000004c

0800ecf0 <__ascii_mbtowc>:
 800ecf0:	b082      	sub	sp, #8
 800ecf2:	b901      	cbnz	r1, 800ecf6 <__ascii_mbtowc+0x6>
 800ecf4:	a901      	add	r1, sp, #4
 800ecf6:	b142      	cbz	r2, 800ed0a <__ascii_mbtowc+0x1a>
 800ecf8:	b14b      	cbz	r3, 800ed0e <__ascii_mbtowc+0x1e>
 800ecfa:	7813      	ldrb	r3, [r2, #0]
 800ecfc:	600b      	str	r3, [r1, #0]
 800ecfe:	7812      	ldrb	r2, [r2, #0]
 800ed00:	1e10      	subs	r0, r2, #0
 800ed02:	bf18      	it	ne
 800ed04:	2001      	movne	r0, #1
 800ed06:	b002      	add	sp, #8
 800ed08:	4770      	bx	lr
 800ed0a:	4610      	mov	r0, r2
 800ed0c:	e7fb      	b.n	800ed06 <__ascii_mbtowc+0x16>
 800ed0e:	f06f 0001 	mvn.w	r0, #1
 800ed12:	e7f8      	b.n	800ed06 <__ascii_mbtowc+0x16>

0800ed14 <_Balloc>:
 800ed14:	b570      	push	{r4, r5, r6, lr}
 800ed16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed18:	4604      	mov	r4, r0
 800ed1a:	460d      	mov	r5, r1
 800ed1c:	b976      	cbnz	r6, 800ed3c <_Balloc+0x28>
 800ed1e:	2010      	movs	r0, #16
 800ed20:	f7ff ffde 	bl	800ece0 <malloc>
 800ed24:	4602      	mov	r2, r0
 800ed26:	6260      	str	r0, [r4, #36]	; 0x24
 800ed28:	b920      	cbnz	r0, 800ed34 <_Balloc+0x20>
 800ed2a:	4b18      	ldr	r3, [pc, #96]	; (800ed8c <_Balloc+0x78>)
 800ed2c:	4818      	ldr	r0, [pc, #96]	; (800ed90 <_Balloc+0x7c>)
 800ed2e:	2166      	movs	r1, #102	; 0x66
 800ed30:	f000 ff90 	bl	800fc54 <__assert_func>
 800ed34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed38:	6006      	str	r6, [r0, #0]
 800ed3a:	60c6      	str	r6, [r0, #12]
 800ed3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed3e:	68f3      	ldr	r3, [r6, #12]
 800ed40:	b183      	cbz	r3, 800ed64 <_Balloc+0x50>
 800ed42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed4a:	b9b8      	cbnz	r0, 800ed7c <_Balloc+0x68>
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ed52:	1d72      	adds	r2, r6, #5
 800ed54:	0092      	lsls	r2, r2, #2
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 fc9d 	bl	800f696 <_calloc_r>
 800ed5c:	b160      	cbz	r0, 800ed78 <_Balloc+0x64>
 800ed5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed62:	e00e      	b.n	800ed82 <_Balloc+0x6e>
 800ed64:	2221      	movs	r2, #33	; 0x21
 800ed66:	2104      	movs	r1, #4
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f000 fc94 	bl	800f696 <_calloc_r>
 800ed6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed70:	60f0      	str	r0, [r6, #12]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1e4      	bne.n	800ed42 <_Balloc+0x2e>
 800ed78:	2000      	movs	r0, #0
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	6802      	ldr	r2, [r0, #0]
 800ed7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed82:	2300      	movs	r3, #0
 800ed84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed88:	e7f7      	b.n	800ed7a <_Balloc+0x66>
 800ed8a:	bf00      	nop
 800ed8c:	08011b66 	.word	0x08011b66
 800ed90:	08011cc8 	.word	0x08011cc8

0800ed94 <_Bfree>:
 800ed94:	b570      	push	{r4, r5, r6, lr}
 800ed96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed98:	4605      	mov	r5, r0
 800ed9a:	460c      	mov	r4, r1
 800ed9c:	b976      	cbnz	r6, 800edbc <_Bfree+0x28>
 800ed9e:	2010      	movs	r0, #16
 800eda0:	f7ff ff9e 	bl	800ece0 <malloc>
 800eda4:	4602      	mov	r2, r0
 800eda6:	6268      	str	r0, [r5, #36]	; 0x24
 800eda8:	b920      	cbnz	r0, 800edb4 <_Bfree+0x20>
 800edaa:	4b09      	ldr	r3, [pc, #36]	; (800edd0 <_Bfree+0x3c>)
 800edac:	4809      	ldr	r0, [pc, #36]	; (800edd4 <_Bfree+0x40>)
 800edae:	218a      	movs	r1, #138	; 0x8a
 800edb0:	f000 ff50 	bl	800fc54 <__assert_func>
 800edb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edb8:	6006      	str	r6, [r0, #0]
 800edba:	60c6      	str	r6, [r0, #12]
 800edbc:	b13c      	cbz	r4, 800edce <_Bfree+0x3a>
 800edbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800edc0:	6862      	ldr	r2, [r4, #4]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800edc8:	6021      	str	r1, [r4, #0]
 800edca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	08011b66 	.word	0x08011b66
 800edd4:	08011cc8 	.word	0x08011cc8

0800edd8 <__multadd>:
 800edd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eddc:	690d      	ldr	r5, [r1, #16]
 800edde:	4607      	mov	r7, r0
 800ede0:	460c      	mov	r4, r1
 800ede2:	461e      	mov	r6, r3
 800ede4:	f101 0c14 	add.w	ip, r1, #20
 800ede8:	2000      	movs	r0, #0
 800edea:	f8dc 3000 	ldr.w	r3, [ip]
 800edee:	b299      	uxth	r1, r3
 800edf0:	fb02 6101 	mla	r1, r2, r1, r6
 800edf4:	0c1e      	lsrs	r6, r3, #16
 800edf6:	0c0b      	lsrs	r3, r1, #16
 800edf8:	fb02 3306 	mla	r3, r2, r6, r3
 800edfc:	b289      	uxth	r1, r1
 800edfe:	3001      	adds	r0, #1
 800ee00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee04:	4285      	cmp	r5, r0
 800ee06:	f84c 1b04 	str.w	r1, [ip], #4
 800ee0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee0e:	dcec      	bgt.n	800edea <__multadd+0x12>
 800ee10:	b30e      	cbz	r6, 800ee56 <__multadd+0x7e>
 800ee12:	68a3      	ldr	r3, [r4, #8]
 800ee14:	42ab      	cmp	r3, r5
 800ee16:	dc19      	bgt.n	800ee4c <__multadd+0x74>
 800ee18:	6861      	ldr	r1, [r4, #4]
 800ee1a:	4638      	mov	r0, r7
 800ee1c:	3101      	adds	r1, #1
 800ee1e:	f7ff ff79 	bl	800ed14 <_Balloc>
 800ee22:	4680      	mov	r8, r0
 800ee24:	b928      	cbnz	r0, 800ee32 <__multadd+0x5a>
 800ee26:	4602      	mov	r2, r0
 800ee28:	4b0c      	ldr	r3, [pc, #48]	; (800ee5c <__multadd+0x84>)
 800ee2a:	480d      	ldr	r0, [pc, #52]	; (800ee60 <__multadd+0x88>)
 800ee2c:	21b5      	movs	r1, #181	; 0xb5
 800ee2e:	f000 ff11 	bl	800fc54 <__assert_func>
 800ee32:	6922      	ldr	r2, [r4, #16]
 800ee34:	3202      	adds	r2, #2
 800ee36:	f104 010c 	add.w	r1, r4, #12
 800ee3a:	0092      	lsls	r2, r2, #2
 800ee3c:	300c      	adds	r0, #12
 800ee3e:	f7fc feb7 	bl	800bbb0 <memcpy>
 800ee42:	4621      	mov	r1, r4
 800ee44:	4638      	mov	r0, r7
 800ee46:	f7ff ffa5 	bl	800ed94 <_Bfree>
 800ee4a:	4644      	mov	r4, r8
 800ee4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee50:	3501      	adds	r5, #1
 800ee52:	615e      	str	r6, [r3, #20]
 800ee54:	6125      	str	r5, [r4, #16]
 800ee56:	4620      	mov	r0, r4
 800ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee5c:	08011bd8 	.word	0x08011bd8
 800ee60:	08011cc8 	.word	0x08011cc8

0800ee64 <__s2b>:
 800ee64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee68:	460c      	mov	r4, r1
 800ee6a:	4615      	mov	r5, r2
 800ee6c:	461f      	mov	r7, r3
 800ee6e:	2209      	movs	r2, #9
 800ee70:	3308      	adds	r3, #8
 800ee72:	4606      	mov	r6, r0
 800ee74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee78:	2100      	movs	r1, #0
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	db09      	blt.n	800ee94 <__s2b+0x30>
 800ee80:	4630      	mov	r0, r6
 800ee82:	f7ff ff47 	bl	800ed14 <_Balloc>
 800ee86:	b940      	cbnz	r0, 800ee9a <__s2b+0x36>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	4b19      	ldr	r3, [pc, #100]	; (800eef0 <__s2b+0x8c>)
 800ee8c:	4819      	ldr	r0, [pc, #100]	; (800eef4 <__s2b+0x90>)
 800ee8e:	21ce      	movs	r1, #206	; 0xce
 800ee90:	f000 fee0 	bl	800fc54 <__assert_func>
 800ee94:	0052      	lsls	r2, r2, #1
 800ee96:	3101      	adds	r1, #1
 800ee98:	e7f0      	b.n	800ee7c <__s2b+0x18>
 800ee9a:	9b08      	ldr	r3, [sp, #32]
 800ee9c:	6143      	str	r3, [r0, #20]
 800ee9e:	2d09      	cmp	r5, #9
 800eea0:	f04f 0301 	mov.w	r3, #1
 800eea4:	6103      	str	r3, [r0, #16]
 800eea6:	dd16      	ble.n	800eed6 <__s2b+0x72>
 800eea8:	f104 0909 	add.w	r9, r4, #9
 800eeac:	46c8      	mov	r8, r9
 800eeae:	442c      	add	r4, r5
 800eeb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eeb4:	4601      	mov	r1, r0
 800eeb6:	3b30      	subs	r3, #48	; 0x30
 800eeb8:	220a      	movs	r2, #10
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7ff ff8c 	bl	800edd8 <__multadd>
 800eec0:	45a0      	cmp	r8, r4
 800eec2:	d1f5      	bne.n	800eeb0 <__s2b+0x4c>
 800eec4:	f1a5 0408 	sub.w	r4, r5, #8
 800eec8:	444c      	add	r4, r9
 800eeca:	1b2d      	subs	r5, r5, r4
 800eecc:	1963      	adds	r3, r4, r5
 800eece:	42bb      	cmp	r3, r7
 800eed0:	db04      	blt.n	800eedc <__s2b+0x78>
 800eed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eed6:	340a      	adds	r4, #10
 800eed8:	2509      	movs	r5, #9
 800eeda:	e7f6      	b.n	800eeca <__s2b+0x66>
 800eedc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eee0:	4601      	mov	r1, r0
 800eee2:	3b30      	subs	r3, #48	; 0x30
 800eee4:	220a      	movs	r2, #10
 800eee6:	4630      	mov	r0, r6
 800eee8:	f7ff ff76 	bl	800edd8 <__multadd>
 800eeec:	e7ee      	b.n	800eecc <__s2b+0x68>
 800eeee:	bf00      	nop
 800eef0:	08011bd8 	.word	0x08011bd8
 800eef4:	08011cc8 	.word	0x08011cc8

0800eef8 <__hi0bits>:
 800eef8:	0c03      	lsrs	r3, r0, #16
 800eefa:	041b      	lsls	r3, r3, #16
 800eefc:	b9d3      	cbnz	r3, 800ef34 <__hi0bits+0x3c>
 800eefe:	0400      	lsls	r0, r0, #16
 800ef00:	2310      	movs	r3, #16
 800ef02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ef06:	bf04      	itt	eq
 800ef08:	0200      	lsleq	r0, r0, #8
 800ef0a:	3308      	addeq	r3, #8
 800ef0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef10:	bf04      	itt	eq
 800ef12:	0100      	lsleq	r0, r0, #4
 800ef14:	3304      	addeq	r3, #4
 800ef16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ef1a:	bf04      	itt	eq
 800ef1c:	0080      	lsleq	r0, r0, #2
 800ef1e:	3302      	addeq	r3, #2
 800ef20:	2800      	cmp	r0, #0
 800ef22:	db05      	blt.n	800ef30 <__hi0bits+0x38>
 800ef24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ef28:	f103 0301 	add.w	r3, r3, #1
 800ef2c:	bf08      	it	eq
 800ef2e:	2320      	moveq	r3, #32
 800ef30:	4618      	mov	r0, r3
 800ef32:	4770      	bx	lr
 800ef34:	2300      	movs	r3, #0
 800ef36:	e7e4      	b.n	800ef02 <__hi0bits+0xa>

0800ef38 <__lo0bits>:
 800ef38:	6803      	ldr	r3, [r0, #0]
 800ef3a:	f013 0207 	ands.w	r2, r3, #7
 800ef3e:	4601      	mov	r1, r0
 800ef40:	d00b      	beq.n	800ef5a <__lo0bits+0x22>
 800ef42:	07da      	lsls	r2, r3, #31
 800ef44:	d423      	bmi.n	800ef8e <__lo0bits+0x56>
 800ef46:	0798      	lsls	r0, r3, #30
 800ef48:	bf49      	itett	mi
 800ef4a:	085b      	lsrmi	r3, r3, #1
 800ef4c:	089b      	lsrpl	r3, r3, #2
 800ef4e:	2001      	movmi	r0, #1
 800ef50:	600b      	strmi	r3, [r1, #0]
 800ef52:	bf5c      	itt	pl
 800ef54:	600b      	strpl	r3, [r1, #0]
 800ef56:	2002      	movpl	r0, #2
 800ef58:	4770      	bx	lr
 800ef5a:	b298      	uxth	r0, r3
 800ef5c:	b9a8      	cbnz	r0, 800ef8a <__lo0bits+0x52>
 800ef5e:	0c1b      	lsrs	r3, r3, #16
 800ef60:	2010      	movs	r0, #16
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	b90a      	cbnz	r2, 800ef6a <__lo0bits+0x32>
 800ef66:	3008      	adds	r0, #8
 800ef68:	0a1b      	lsrs	r3, r3, #8
 800ef6a:	071a      	lsls	r2, r3, #28
 800ef6c:	bf04      	itt	eq
 800ef6e:	091b      	lsreq	r3, r3, #4
 800ef70:	3004      	addeq	r0, #4
 800ef72:	079a      	lsls	r2, r3, #30
 800ef74:	bf04      	itt	eq
 800ef76:	089b      	lsreq	r3, r3, #2
 800ef78:	3002      	addeq	r0, #2
 800ef7a:	07da      	lsls	r2, r3, #31
 800ef7c:	d403      	bmi.n	800ef86 <__lo0bits+0x4e>
 800ef7e:	085b      	lsrs	r3, r3, #1
 800ef80:	f100 0001 	add.w	r0, r0, #1
 800ef84:	d005      	beq.n	800ef92 <__lo0bits+0x5a>
 800ef86:	600b      	str	r3, [r1, #0]
 800ef88:	4770      	bx	lr
 800ef8a:	4610      	mov	r0, r2
 800ef8c:	e7e9      	b.n	800ef62 <__lo0bits+0x2a>
 800ef8e:	2000      	movs	r0, #0
 800ef90:	4770      	bx	lr
 800ef92:	2020      	movs	r0, #32
 800ef94:	4770      	bx	lr
	...

0800ef98 <__i2b>:
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	f7ff feb9 	bl	800ed14 <_Balloc>
 800efa2:	4602      	mov	r2, r0
 800efa4:	b928      	cbnz	r0, 800efb2 <__i2b+0x1a>
 800efa6:	4b05      	ldr	r3, [pc, #20]	; (800efbc <__i2b+0x24>)
 800efa8:	4805      	ldr	r0, [pc, #20]	; (800efc0 <__i2b+0x28>)
 800efaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800efae:	f000 fe51 	bl	800fc54 <__assert_func>
 800efb2:	2301      	movs	r3, #1
 800efb4:	6144      	str	r4, [r0, #20]
 800efb6:	6103      	str	r3, [r0, #16]
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	bf00      	nop
 800efbc:	08011bd8 	.word	0x08011bd8
 800efc0:	08011cc8 	.word	0x08011cc8

0800efc4 <__multiply>:
 800efc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc8:	4691      	mov	r9, r2
 800efca:	690a      	ldr	r2, [r1, #16]
 800efcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	bfb8      	it	lt
 800efd4:	460b      	movlt	r3, r1
 800efd6:	460c      	mov	r4, r1
 800efd8:	bfbc      	itt	lt
 800efda:	464c      	movlt	r4, r9
 800efdc:	4699      	movlt	r9, r3
 800efde:	6927      	ldr	r7, [r4, #16]
 800efe0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800efe4:	68a3      	ldr	r3, [r4, #8]
 800efe6:	6861      	ldr	r1, [r4, #4]
 800efe8:	eb07 060a 	add.w	r6, r7, sl
 800efec:	42b3      	cmp	r3, r6
 800efee:	b085      	sub	sp, #20
 800eff0:	bfb8      	it	lt
 800eff2:	3101      	addlt	r1, #1
 800eff4:	f7ff fe8e 	bl	800ed14 <_Balloc>
 800eff8:	b930      	cbnz	r0, 800f008 <__multiply+0x44>
 800effa:	4602      	mov	r2, r0
 800effc:	4b44      	ldr	r3, [pc, #272]	; (800f110 <__multiply+0x14c>)
 800effe:	4845      	ldr	r0, [pc, #276]	; (800f114 <__multiply+0x150>)
 800f000:	f240 115d 	movw	r1, #349	; 0x15d
 800f004:	f000 fe26 	bl	800fc54 <__assert_func>
 800f008:	f100 0514 	add.w	r5, r0, #20
 800f00c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f010:	462b      	mov	r3, r5
 800f012:	2200      	movs	r2, #0
 800f014:	4543      	cmp	r3, r8
 800f016:	d321      	bcc.n	800f05c <__multiply+0x98>
 800f018:	f104 0314 	add.w	r3, r4, #20
 800f01c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f020:	f109 0314 	add.w	r3, r9, #20
 800f024:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f028:	9202      	str	r2, [sp, #8]
 800f02a:	1b3a      	subs	r2, r7, r4
 800f02c:	3a15      	subs	r2, #21
 800f02e:	f022 0203 	bic.w	r2, r2, #3
 800f032:	3204      	adds	r2, #4
 800f034:	f104 0115 	add.w	r1, r4, #21
 800f038:	428f      	cmp	r7, r1
 800f03a:	bf38      	it	cc
 800f03c:	2204      	movcc	r2, #4
 800f03e:	9201      	str	r2, [sp, #4]
 800f040:	9a02      	ldr	r2, [sp, #8]
 800f042:	9303      	str	r3, [sp, #12]
 800f044:	429a      	cmp	r2, r3
 800f046:	d80c      	bhi.n	800f062 <__multiply+0x9e>
 800f048:	2e00      	cmp	r6, #0
 800f04a:	dd03      	ble.n	800f054 <__multiply+0x90>
 800f04c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f050:	2b00      	cmp	r3, #0
 800f052:	d05a      	beq.n	800f10a <__multiply+0x146>
 800f054:	6106      	str	r6, [r0, #16]
 800f056:	b005      	add	sp, #20
 800f058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f05c:	f843 2b04 	str.w	r2, [r3], #4
 800f060:	e7d8      	b.n	800f014 <__multiply+0x50>
 800f062:	f8b3 a000 	ldrh.w	sl, [r3]
 800f066:	f1ba 0f00 	cmp.w	sl, #0
 800f06a:	d024      	beq.n	800f0b6 <__multiply+0xf2>
 800f06c:	f104 0e14 	add.w	lr, r4, #20
 800f070:	46a9      	mov	r9, r5
 800f072:	f04f 0c00 	mov.w	ip, #0
 800f076:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f07a:	f8d9 1000 	ldr.w	r1, [r9]
 800f07e:	fa1f fb82 	uxth.w	fp, r2
 800f082:	b289      	uxth	r1, r1
 800f084:	fb0a 110b 	mla	r1, sl, fp, r1
 800f088:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f08c:	f8d9 2000 	ldr.w	r2, [r9]
 800f090:	4461      	add	r1, ip
 800f092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f096:	fb0a c20b 	mla	r2, sl, fp, ip
 800f09a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f09e:	b289      	uxth	r1, r1
 800f0a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f0a4:	4577      	cmp	r7, lr
 800f0a6:	f849 1b04 	str.w	r1, [r9], #4
 800f0aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0ae:	d8e2      	bhi.n	800f076 <__multiply+0xb2>
 800f0b0:	9a01      	ldr	r2, [sp, #4]
 800f0b2:	f845 c002 	str.w	ip, [r5, r2]
 800f0b6:	9a03      	ldr	r2, [sp, #12]
 800f0b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f0bc:	3304      	adds	r3, #4
 800f0be:	f1b9 0f00 	cmp.w	r9, #0
 800f0c2:	d020      	beq.n	800f106 <__multiply+0x142>
 800f0c4:	6829      	ldr	r1, [r5, #0]
 800f0c6:	f104 0c14 	add.w	ip, r4, #20
 800f0ca:	46ae      	mov	lr, r5
 800f0cc:	f04f 0a00 	mov.w	sl, #0
 800f0d0:	f8bc b000 	ldrh.w	fp, [ip]
 800f0d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f0d8:	fb09 220b 	mla	r2, r9, fp, r2
 800f0dc:	4492      	add	sl, r2
 800f0de:	b289      	uxth	r1, r1
 800f0e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f0e4:	f84e 1b04 	str.w	r1, [lr], #4
 800f0e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f0ec:	f8be 1000 	ldrh.w	r1, [lr]
 800f0f0:	0c12      	lsrs	r2, r2, #16
 800f0f2:	fb09 1102 	mla	r1, r9, r2, r1
 800f0f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f0fa:	4567      	cmp	r7, ip
 800f0fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f100:	d8e6      	bhi.n	800f0d0 <__multiply+0x10c>
 800f102:	9a01      	ldr	r2, [sp, #4]
 800f104:	50a9      	str	r1, [r5, r2]
 800f106:	3504      	adds	r5, #4
 800f108:	e79a      	b.n	800f040 <__multiply+0x7c>
 800f10a:	3e01      	subs	r6, #1
 800f10c:	e79c      	b.n	800f048 <__multiply+0x84>
 800f10e:	bf00      	nop
 800f110:	08011bd8 	.word	0x08011bd8
 800f114:	08011cc8 	.word	0x08011cc8

0800f118 <__pow5mult>:
 800f118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f11c:	4615      	mov	r5, r2
 800f11e:	f012 0203 	ands.w	r2, r2, #3
 800f122:	4606      	mov	r6, r0
 800f124:	460f      	mov	r7, r1
 800f126:	d007      	beq.n	800f138 <__pow5mult+0x20>
 800f128:	4c25      	ldr	r4, [pc, #148]	; (800f1c0 <__pow5mult+0xa8>)
 800f12a:	3a01      	subs	r2, #1
 800f12c:	2300      	movs	r3, #0
 800f12e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f132:	f7ff fe51 	bl	800edd8 <__multadd>
 800f136:	4607      	mov	r7, r0
 800f138:	10ad      	asrs	r5, r5, #2
 800f13a:	d03d      	beq.n	800f1b8 <__pow5mult+0xa0>
 800f13c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f13e:	b97c      	cbnz	r4, 800f160 <__pow5mult+0x48>
 800f140:	2010      	movs	r0, #16
 800f142:	f7ff fdcd 	bl	800ece0 <malloc>
 800f146:	4602      	mov	r2, r0
 800f148:	6270      	str	r0, [r6, #36]	; 0x24
 800f14a:	b928      	cbnz	r0, 800f158 <__pow5mult+0x40>
 800f14c:	4b1d      	ldr	r3, [pc, #116]	; (800f1c4 <__pow5mult+0xac>)
 800f14e:	481e      	ldr	r0, [pc, #120]	; (800f1c8 <__pow5mult+0xb0>)
 800f150:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f154:	f000 fd7e 	bl	800fc54 <__assert_func>
 800f158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f15c:	6004      	str	r4, [r0, #0]
 800f15e:	60c4      	str	r4, [r0, #12]
 800f160:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f168:	b94c      	cbnz	r4, 800f17e <__pow5mult+0x66>
 800f16a:	f240 2171 	movw	r1, #625	; 0x271
 800f16e:	4630      	mov	r0, r6
 800f170:	f7ff ff12 	bl	800ef98 <__i2b>
 800f174:	2300      	movs	r3, #0
 800f176:	f8c8 0008 	str.w	r0, [r8, #8]
 800f17a:	4604      	mov	r4, r0
 800f17c:	6003      	str	r3, [r0, #0]
 800f17e:	f04f 0900 	mov.w	r9, #0
 800f182:	07eb      	lsls	r3, r5, #31
 800f184:	d50a      	bpl.n	800f19c <__pow5mult+0x84>
 800f186:	4639      	mov	r1, r7
 800f188:	4622      	mov	r2, r4
 800f18a:	4630      	mov	r0, r6
 800f18c:	f7ff ff1a 	bl	800efc4 <__multiply>
 800f190:	4639      	mov	r1, r7
 800f192:	4680      	mov	r8, r0
 800f194:	4630      	mov	r0, r6
 800f196:	f7ff fdfd 	bl	800ed94 <_Bfree>
 800f19a:	4647      	mov	r7, r8
 800f19c:	106d      	asrs	r5, r5, #1
 800f19e:	d00b      	beq.n	800f1b8 <__pow5mult+0xa0>
 800f1a0:	6820      	ldr	r0, [r4, #0]
 800f1a2:	b938      	cbnz	r0, 800f1b4 <__pow5mult+0x9c>
 800f1a4:	4622      	mov	r2, r4
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	f7ff ff0b 	bl	800efc4 <__multiply>
 800f1ae:	6020      	str	r0, [r4, #0]
 800f1b0:	f8c0 9000 	str.w	r9, [r0]
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	e7e4      	b.n	800f182 <__pow5mult+0x6a>
 800f1b8:	4638      	mov	r0, r7
 800f1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1be:	bf00      	nop
 800f1c0:	08011e18 	.word	0x08011e18
 800f1c4:	08011b66 	.word	0x08011b66
 800f1c8:	08011cc8 	.word	0x08011cc8

0800f1cc <__lshift>:
 800f1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1d0:	460c      	mov	r4, r1
 800f1d2:	6849      	ldr	r1, [r1, #4]
 800f1d4:	6923      	ldr	r3, [r4, #16]
 800f1d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f1da:	68a3      	ldr	r3, [r4, #8]
 800f1dc:	4607      	mov	r7, r0
 800f1de:	4691      	mov	r9, r2
 800f1e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f1e4:	f108 0601 	add.w	r6, r8, #1
 800f1e8:	42b3      	cmp	r3, r6
 800f1ea:	db0b      	blt.n	800f204 <__lshift+0x38>
 800f1ec:	4638      	mov	r0, r7
 800f1ee:	f7ff fd91 	bl	800ed14 <_Balloc>
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	b948      	cbnz	r0, 800f20a <__lshift+0x3e>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	4b2a      	ldr	r3, [pc, #168]	; (800f2a4 <__lshift+0xd8>)
 800f1fa:	482b      	ldr	r0, [pc, #172]	; (800f2a8 <__lshift+0xdc>)
 800f1fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f200:	f000 fd28 	bl	800fc54 <__assert_func>
 800f204:	3101      	adds	r1, #1
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	e7ee      	b.n	800f1e8 <__lshift+0x1c>
 800f20a:	2300      	movs	r3, #0
 800f20c:	f100 0114 	add.w	r1, r0, #20
 800f210:	f100 0210 	add.w	r2, r0, #16
 800f214:	4618      	mov	r0, r3
 800f216:	4553      	cmp	r3, sl
 800f218:	db37      	blt.n	800f28a <__lshift+0xbe>
 800f21a:	6920      	ldr	r0, [r4, #16]
 800f21c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f220:	f104 0314 	add.w	r3, r4, #20
 800f224:	f019 091f 	ands.w	r9, r9, #31
 800f228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f22c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f230:	d02f      	beq.n	800f292 <__lshift+0xc6>
 800f232:	f1c9 0e20 	rsb	lr, r9, #32
 800f236:	468a      	mov	sl, r1
 800f238:	f04f 0c00 	mov.w	ip, #0
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	fa02 f209 	lsl.w	r2, r2, r9
 800f242:	ea42 020c 	orr.w	r2, r2, ip
 800f246:	f84a 2b04 	str.w	r2, [sl], #4
 800f24a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f24e:	4298      	cmp	r0, r3
 800f250:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f254:	d8f2      	bhi.n	800f23c <__lshift+0x70>
 800f256:	1b03      	subs	r3, r0, r4
 800f258:	3b15      	subs	r3, #21
 800f25a:	f023 0303 	bic.w	r3, r3, #3
 800f25e:	3304      	adds	r3, #4
 800f260:	f104 0215 	add.w	r2, r4, #21
 800f264:	4290      	cmp	r0, r2
 800f266:	bf38      	it	cc
 800f268:	2304      	movcc	r3, #4
 800f26a:	f841 c003 	str.w	ip, [r1, r3]
 800f26e:	f1bc 0f00 	cmp.w	ip, #0
 800f272:	d001      	beq.n	800f278 <__lshift+0xac>
 800f274:	f108 0602 	add.w	r6, r8, #2
 800f278:	3e01      	subs	r6, #1
 800f27a:	4638      	mov	r0, r7
 800f27c:	612e      	str	r6, [r5, #16]
 800f27e:	4621      	mov	r1, r4
 800f280:	f7ff fd88 	bl	800ed94 <_Bfree>
 800f284:	4628      	mov	r0, r5
 800f286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f28a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f28e:	3301      	adds	r3, #1
 800f290:	e7c1      	b.n	800f216 <__lshift+0x4a>
 800f292:	3904      	subs	r1, #4
 800f294:	f853 2b04 	ldr.w	r2, [r3], #4
 800f298:	f841 2f04 	str.w	r2, [r1, #4]!
 800f29c:	4298      	cmp	r0, r3
 800f29e:	d8f9      	bhi.n	800f294 <__lshift+0xc8>
 800f2a0:	e7ea      	b.n	800f278 <__lshift+0xac>
 800f2a2:	bf00      	nop
 800f2a4:	08011bd8 	.word	0x08011bd8
 800f2a8:	08011cc8 	.word	0x08011cc8

0800f2ac <__mcmp>:
 800f2ac:	b530      	push	{r4, r5, lr}
 800f2ae:	6902      	ldr	r2, [r0, #16]
 800f2b0:	690c      	ldr	r4, [r1, #16]
 800f2b2:	1b12      	subs	r2, r2, r4
 800f2b4:	d10e      	bne.n	800f2d4 <__mcmp+0x28>
 800f2b6:	f100 0314 	add.w	r3, r0, #20
 800f2ba:	3114      	adds	r1, #20
 800f2bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f2c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f2c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f2c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f2cc:	42a5      	cmp	r5, r4
 800f2ce:	d003      	beq.n	800f2d8 <__mcmp+0x2c>
 800f2d0:	d305      	bcc.n	800f2de <__mcmp+0x32>
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	4610      	mov	r0, r2
 800f2d6:	bd30      	pop	{r4, r5, pc}
 800f2d8:	4283      	cmp	r3, r0
 800f2da:	d3f3      	bcc.n	800f2c4 <__mcmp+0x18>
 800f2dc:	e7fa      	b.n	800f2d4 <__mcmp+0x28>
 800f2de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2e2:	e7f7      	b.n	800f2d4 <__mcmp+0x28>

0800f2e4 <__mdiff>:
 800f2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e8:	460c      	mov	r4, r1
 800f2ea:	4606      	mov	r6, r0
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	4690      	mov	r8, r2
 800f2f2:	f7ff ffdb 	bl	800f2ac <__mcmp>
 800f2f6:	1e05      	subs	r5, r0, #0
 800f2f8:	d110      	bne.n	800f31c <__mdiff+0x38>
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	4630      	mov	r0, r6
 800f2fe:	f7ff fd09 	bl	800ed14 <_Balloc>
 800f302:	b930      	cbnz	r0, 800f312 <__mdiff+0x2e>
 800f304:	4b3a      	ldr	r3, [pc, #232]	; (800f3f0 <__mdiff+0x10c>)
 800f306:	4602      	mov	r2, r0
 800f308:	f240 2132 	movw	r1, #562	; 0x232
 800f30c:	4839      	ldr	r0, [pc, #228]	; (800f3f4 <__mdiff+0x110>)
 800f30e:	f000 fca1 	bl	800fc54 <__assert_func>
 800f312:	2301      	movs	r3, #1
 800f314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	bfa4      	itt	ge
 800f31e:	4643      	movge	r3, r8
 800f320:	46a0      	movge	r8, r4
 800f322:	4630      	mov	r0, r6
 800f324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f328:	bfa6      	itte	ge
 800f32a:	461c      	movge	r4, r3
 800f32c:	2500      	movge	r5, #0
 800f32e:	2501      	movlt	r5, #1
 800f330:	f7ff fcf0 	bl	800ed14 <_Balloc>
 800f334:	b920      	cbnz	r0, 800f340 <__mdiff+0x5c>
 800f336:	4b2e      	ldr	r3, [pc, #184]	; (800f3f0 <__mdiff+0x10c>)
 800f338:	4602      	mov	r2, r0
 800f33a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f33e:	e7e5      	b.n	800f30c <__mdiff+0x28>
 800f340:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f344:	6926      	ldr	r6, [r4, #16]
 800f346:	60c5      	str	r5, [r0, #12]
 800f348:	f104 0914 	add.w	r9, r4, #20
 800f34c:	f108 0514 	add.w	r5, r8, #20
 800f350:	f100 0e14 	add.w	lr, r0, #20
 800f354:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f358:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f35c:	f108 0210 	add.w	r2, r8, #16
 800f360:	46f2      	mov	sl, lr
 800f362:	2100      	movs	r1, #0
 800f364:	f859 3b04 	ldr.w	r3, [r9], #4
 800f368:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f36c:	fa1f f883 	uxth.w	r8, r3
 800f370:	fa11 f18b 	uxtah	r1, r1, fp
 800f374:	0c1b      	lsrs	r3, r3, #16
 800f376:	eba1 0808 	sub.w	r8, r1, r8
 800f37a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f37e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f382:	fa1f f888 	uxth.w	r8, r8
 800f386:	1419      	asrs	r1, r3, #16
 800f388:	454e      	cmp	r6, r9
 800f38a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f38e:	f84a 3b04 	str.w	r3, [sl], #4
 800f392:	d8e7      	bhi.n	800f364 <__mdiff+0x80>
 800f394:	1b33      	subs	r3, r6, r4
 800f396:	3b15      	subs	r3, #21
 800f398:	f023 0303 	bic.w	r3, r3, #3
 800f39c:	3304      	adds	r3, #4
 800f39e:	3415      	adds	r4, #21
 800f3a0:	42a6      	cmp	r6, r4
 800f3a2:	bf38      	it	cc
 800f3a4:	2304      	movcc	r3, #4
 800f3a6:	441d      	add	r5, r3
 800f3a8:	4473      	add	r3, lr
 800f3aa:	469e      	mov	lr, r3
 800f3ac:	462e      	mov	r6, r5
 800f3ae:	4566      	cmp	r6, ip
 800f3b0:	d30e      	bcc.n	800f3d0 <__mdiff+0xec>
 800f3b2:	f10c 0203 	add.w	r2, ip, #3
 800f3b6:	1b52      	subs	r2, r2, r5
 800f3b8:	f022 0203 	bic.w	r2, r2, #3
 800f3bc:	3d03      	subs	r5, #3
 800f3be:	45ac      	cmp	ip, r5
 800f3c0:	bf38      	it	cc
 800f3c2:	2200      	movcc	r2, #0
 800f3c4:	441a      	add	r2, r3
 800f3c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f3ca:	b17b      	cbz	r3, 800f3ec <__mdiff+0x108>
 800f3cc:	6107      	str	r7, [r0, #16]
 800f3ce:	e7a3      	b.n	800f318 <__mdiff+0x34>
 800f3d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800f3d4:	fa11 f288 	uxtah	r2, r1, r8
 800f3d8:	1414      	asrs	r4, r2, #16
 800f3da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f3de:	b292      	uxth	r2, r2
 800f3e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f3e4:	f84e 2b04 	str.w	r2, [lr], #4
 800f3e8:	1421      	asrs	r1, r4, #16
 800f3ea:	e7e0      	b.n	800f3ae <__mdiff+0xca>
 800f3ec:	3f01      	subs	r7, #1
 800f3ee:	e7ea      	b.n	800f3c6 <__mdiff+0xe2>
 800f3f0:	08011bd8 	.word	0x08011bd8
 800f3f4:	08011cc8 	.word	0x08011cc8

0800f3f8 <__ulp>:
 800f3f8:	b082      	sub	sp, #8
 800f3fa:	ed8d 0b00 	vstr	d0, [sp]
 800f3fe:	9b01      	ldr	r3, [sp, #4]
 800f400:	4912      	ldr	r1, [pc, #72]	; (800f44c <__ulp+0x54>)
 800f402:	4019      	ands	r1, r3
 800f404:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f408:	2900      	cmp	r1, #0
 800f40a:	dd05      	ble.n	800f418 <__ulp+0x20>
 800f40c:	2200      	movs	r2, #0
 800f40e:	460b      	mov	r3, r1
 800f410:	ec43 2b10 	vmov	d0, r2, r3
 800f414:	b002      	add	sp, #8
 800f416:	4770      	bx	lr
 800f418:	4249      	negs	r1, r1
 800f41a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f41e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	f04f 0300 	mov.w	r3, #0
 800f42a:	da04      	bge.n	800f436 <__ulp+0x3e>
 800f42c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f430:	fa41 f300 	asr.w	r3, r1, r0
 800f434:	e7ec      	b.n	800f410 <__ulp+0x18>
 800f436:	f1a0 0114 	sub.w	r1, r0, #20
 800f43a:	291e      	cmp	r1, #30
 800f43c:	bfda      	itte	le
 800f43e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f442:	fa20 f101 	lsrle.w	r1, r0, r1
 800f446:	2101      	movgt	r1, #1
 800f448:	460a      	mov	r2, r1
 800f44a:	e7e1      	b.n	800f410 <__ulp+0x18>
 800f44c:	7ff00000 	.word	0x7ff00000

0800f450 <__b2d>:
 800f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f452:	6905      	ldr	r5, [r0, #16]
 800f454:	f100 0714 	add.w	r7, r0, #20
 800f458:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f45c:	1f2e      	subs	r6, r5, #4
 800f45e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f462:	4620      	mov	r0, r4
 800f464:	f7ff fd48 	bl	800eef8 <__hi0bits>
 800f468:	f1c0 0320 	rsb	r3, r0, #32
 800f46c:	280a      	cmp	r0, #10
 800f46e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f4ec <__b2d+0x9c>
 800f472:	600b      	str	r3, [r1, #0]
 800f474:	dc14      	bgt.n	800f4a0 <__b2d+0x50>
 800f476:	f1c0 0e0b 	rsb	lr, r0, #11
 800f47a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f47e:	42b7      	cmp	r7, r6
 800f480:	ea41 030c 	orr.w	r3, r1, ip
 800f484:	bf34      	ite	cc
 800f486:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f48a:	2100      	movcs	r1, #0
 800f48c:	3015      	adds	r0, #21
 800f48e:	fa04 f000 	lsl.w	r0, r4, r0
 800f492:	fa21 f10e 	lsr.w	r1, r1, lr
 800f496:	ea40 0201 	orr.w	r2, r0, r1
 800f49a:	ec43 2b10 	vmov	d0, r2, r3
 800f49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4a0:	42b7      	cmp	r7, r6
 800f4a2:	bf3a      	itte	cc
 800f4a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f4a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f4ac:	2100      	movcs	r1, #0
 800f4ae:	380b      	subs	r0, #11
 800f4b0:	d017      	beq.n	800f4e2 <__b2d+0x92>
 800f4b2:	f1c0 0c20 	rsb	ip, r0, #32
 800f4b6:	fa04 f500 	lsl.w	r5, r4, r0
 800f4ba:	42be      	cmp	r6, r7
 800f4bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800f4c0:	ea45 0504 	orr.w	r5, r5, r4
 800f4c4:	bf8c      	ite	hi
 800f4c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f4ca:	2400      	movls	r4, #0
 800f4cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f4d0:	fa01 f000 	lsl.w	r0, r1, r0
 800f4d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800f4d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f4dc:	ea40 0204 	orr.w	r2, r0, r4
 800f4e0:	e7db      	b.n	800f49a <__b2d+0x4a>
 800f4e2:	ea44 030c 	orr.w	r3, r4, ip
 800f4e6:	460a      	mov	r2, r1
 800f4e8:	e7d7      	b.n	800f49a <__b2d+0x4a>
 800f4ea:	bf00      	nop
 800f4ec:	3ff00000 	.word	0x3ff00000

0800f4f0 <__d2b>:
 800f4f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4f4:	4689      	mov	r9, r1
 800f4f6:	2101      	movs	r1, #1
 800f4f8:	ec57 6b10 	vmov	r6, r7, d0
 800f4fc:	4690      	mov	r8, r2
 800f4fe:	f7ff fc09 	bl	800ed14 <_Balloc>
 800f502:	4604      	mov	r4, r0
 800f504:	b930      	cbnz	r0, 800f514 <__d2b+0x24>
 800f506:	4602      	mov	r2, r0
 800f508:	4b25      	ldr	r3, [pc, #148]	; (800f5a0 <__d2b+0xb0>)
 800f50a:	4826      	ldr	r0, [pc, #152]	; (800f5a4 <__d2b+0xb4>)
 800f50c:	f240 310a 	movw	r1, #778	; 0x30a
 800f510:	f000 fba0 	bl	800fc54 <__assert_func>
 800f514:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f51c:	bb35      	cbnz	r5, 800f56c <__d2b+0x7c>
 800f51e:	2e00      	cmp	r6, #0
 800f520:	9301      	str	r3, [sp, #4]
 800f522:	d028      	beq.n	800f576 <__d2b+0x86>
 800f524:	4668      	mov	r0, sp
 800f526:	9600      	str	r6, [sp, #0]
 800f528:	f7ff fd06 	bl	800ef38 <__lo0bits>
 800f52c:	9900      	ldr	r1, [sp, #0]
 800f52e:	b300      	cbz	r0, 800f572 <__d2b+0x82>
 800f530:	9a01      	ldr	r2, [sp, #4]
 800f532:	f1c0 0320 	rsb	r3, r0, #32
 800f536:	fa02 f303 	lsl.w	r3, r2, r3
 800f53a:	430b      	orrs	r3, r1
 800f53c:	40c2      	lsrs	r2, r0
 800f53e:	6163      	str	r3, [r4, #20]
 800f540:	9201      	str	r2, [sp, #4]
 800f542:	9b01      	ldr	r3, [sp, #4]
 800f544:	61a3      	str	r3, [r4, #24]
 800f546:	2b00      	cmp	r3, #0
 800f548:	bf14      	ite	ne
 800f54a:	2202      	movne	r2, #2
 800f54c:	2201      	moveq	r2, #1
 800f54e:	6122      	str	r2, [r4, #16]
 800f550:	b1d5      	cbz	r5, 800f588 <__d2b+0x98>
 800f552:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f556:	4405      	add	r5, r0
 800f558:	f8c9 5000 	str.w	r5, [r9]
 800f55c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f560:	f8c8 0000 	str.w	r0, [r8]
 800f564:	4620      	mov	r0, r4
 800f566:	b003      	add	sp, #12
 800f568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f56c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f570:	e7d5      	b.n	800f51e <__d2b+0x2e>
 800f572:	6161      	str	r1, [r4, #20]
 800f574:	e7e5      	b.n	800f542 <__d2b+0x52>
 800f576:	a801      	add	r0, sp, #4
 800f578:	f7ff fcde 	bl	800ef38 <__lo0bits>
 800f57c:	9b01      	ldr	r3, [sp, #4]
 800f57e:	6163      	str	r3, [r4, #20]
 800f580:	2201      	movs	r2, #1
 800f582:	6122      	str	r2, [r4, #16]
 800f584:	3020      	adds	r0, #32
 800f586:	e7e3      	b.n	800f550 <__d2b+0x60>
 800f588:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f58c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f590:	f8c9 0000 	str.w	r0, [r9]
 800f594:	6918      	ldr	r0, [r3, #16]
 800f596:	f7ff fcaf 	bl	800eef8 <__hi0bits>
 800f59a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f59e:	e7df      	b.n	800f560 <__d2b+0x70>
 800f5a0:	08011bd8 	.word	0x08011bd8
 800f5a4:	08011cc8 	.word	0x08011cc8

0800f5a8 <__ratio>:
 800f5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ac:	4688      	mov	r8, r1
 800f5ae:	4669      	mov	r1, sp
 800f5b0:	4681      	mov	r9, r0
 800f5b2:	f7ff ff4d 	bl	800f450 <__b2d>
 800f5b6:	a901      	add	r1, sp, #4
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	ec55 4b10 	vmov	r4, r5, d0
 800f5be:	f7ff ff47 	bl	800f450 <__b2d>
 800f5c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f5c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f5ca:	eba3 0c02 	sub.w	ip, r3, r2
 800f5ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f5d2:	1a9b      	subs	r3, r3, r2
 800f5d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f5d8:	ec51 0b10 	vmov	r0, r1, d0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	bfd6      	itet	le
 800f5e0:	460a      	movle	r2, r1
 800f5e2:	462a      	movgt	r2, r5
 800f5e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f5e8:	468b      	mov	fp, r1
 800f5ea:	462f      	mov	r7, r5
 800f5ec:	bfd4      	ite	le
 800f5ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f5f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	ee10 2a10 	vmov	r2, s0
 800f5fc:	465b      	mov	r3, fp
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f1 f944 	bl	800088c <__aeabi_ddiv>
 800f604:	ec41 0b10 	vmov	d0, r0, r1
 800f608:	b003      	add	sp, #12
 800f60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f60e <__copybits>:
 800f60e:	3901      	subs	r1, #1
 800f610:	b570      	push	{r4, r5, r6, lr}
 800f612:	1149      	asrs	r1, r1, #5
 800f614:	6914      	ldr	r4, [r2, #16]
 800f616:	3101      	adds	r1, #1
 800f618:	f102 0314 	add.w	r3, r2, #20
 800f61c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f620:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f624:	1f05      	subs	r5, r0, #4
 800f626:	42a3      	cmp	r3, r4
 800f628:	d30c      	bcc.n	800f644 <__copybits+0x36>
 800f62a:	1aa3      	subs	r3, r4, r2
 800f62c:	3b11      	subs	r3, #17
 800f62e:	f023 0303 	bic.w	r3, r3, #3
 800f632:	3211      	adds	r2, #17
 800f634:	42a2      	cmp	r2, r4
 800f636:	bf88      	it	hi
 800f638:	2300      	movhi	r3, #0
 800f63a:	4418      	add	r0, r3
 800f63c:	2300      	movs	r3, #0
 800f63e:	4288      	cmp	r0, r1
 800f640:	d305      	bcc.n	800f64e <__copybits+0x40>
 800f642:	bd70      	pop	{r4, r5, r6, pc}
 800f644:	f853 6b04 	ldr.w	r6, [r3], #4
 800f648:	f845 6f04 	str.w	r6, [r5, #4]!
 800f64c:	e7eb      	b.n	800f626 <__copybits+0x18>
 800f64e:	f840 3b04 	str.w	r3, [r0], #4
 800f652:	e7f4      	b.n	800f63e <__copybits+0x30>

0800f654 <__any_on>:
 800f654:	f100 0214 	add.w	r2, r0, #20
 800f658:	6900      	ldr	r0, [r0, #16]
 800f65a:	114b      	asrs	r3, r1, #5
 800f65c:	4298      	cmp	r0, r3
 800f65e:	b510      	push	{r4, lr}
 800f660:	db11      	blt.n	800f686 <__any_on+0x32>
 800f662:	dd0a      	ble.n	800f67a <__any_on+0x26>
 800f664:	f011 011f 	ands.w	r1, r1, #31
 800f668:	d007      	beq.n	800f67a <__any_on+0x26>
 800f66a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f66e:	fa24 f001 	lsr.w	r0, r4, r1
 800f672:	fa00 f101 	lsl.w	r1, r0, r1
 800f676:	428c      	cmp	r4, r1
 800f678:	d10b      	bne.n	800f692 <__any_on+0x3e>
 800f67a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f67e:	4293      	cmp	r3, r2
 800f680:	d803      	bhi.n	800f68a <__any_on+0x36>
 800f682:	2000      	movs	r0, #0
 800f684:	bd10      	pop	{r4, pc}
 800f686:	4603      	mov	r3, r0
 800f688:	e7f7      	b.n	800f67a <__any_on+0x26>
 800f68a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f68e:	2900      	cmp	r1, #0
 800f690:	d0f5      	beq.n	800f67e <__any_on+0x2a>
 800f692:	2001      	movs	r0, #1
 800f694:	e7f6      	b.n	800f684 <__any_on+0x30>

0800f696 <_calloc_r>:
 800f696:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f698:	fba1 2402 	umull	r2, r4, r1, r2
 800f69c:	b94c      	cbnz	r4, 800f6b2 <_calloc_r+0x1c>
 800f69e:	4611      	mov	r1, r2
 800f6a0:	9201      	str	r2, [sp, #4]
 800f6a2:	f000 f87b 	bl	800f79c <_malloc_r>
 800f6a6:	9a01      	ldr	r2, [sp, #4]
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	b930      	cbnz	r0, 800f6ba <_calloc_r+0x24>
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	b003      	add	sp, #12
 800f6b0:	bd30      	pop	{r4, r5, pc}
 800f6b2:	220c      	movs	r2, #12
 800f6b4:	6002      	str	r2, [r0, #0]
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	e7f8      	b.n	800f6ac <_calloc_r+0x16>
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	f7fc fa86 	bl	800bbcc <memset>
 800f6c0:	e7f4      	b.n	800f6ac <_calloc_r+0x16>
	...

0800f6c4 <_free_r>:
 800f6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6c6:	2900      	cmp	r1, #0
 800f6c8:	d044      	beq.n	800f754 <_free_r+0x90>
 800f6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6ce:	9001      	str	r0, [sp, #4]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f1a1 0404 	sub.w	r4, r1, #4
 800f6d6:	bfb8      	it	lt
 800f6d8:	18e4      	addlt	r4, r4, r3
 800f6da:	f000 fb2f 	bl	800fd3c <__malloc_lock>
 800f6de:	4a1e      	ldr	r2, [pc, #120]	; (800f758 <_free_r+0x94>)
 800f6e0:	9801      	ldr	r0, [sp, #4]
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	b933      	cbnz	r3, 800f6f4 <_free_r+0x30>
 800f6e6:	6063      	str	r3, [r4, #4]
 800f6e8:	6014      	str	r4, [r2, #0]
 800f6ea:	b003      	add	sp, #12
 800f6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6f0:	f000 bb2a 	b.w	800fd48 <__malloc_unlock>
 800f6f4:	42a3      	cmp	r3, r4
 800f6f6:	d908      	bls.n	800f70a <_free_r+0x46>
 800f6f8:	6825      	ldr	r5, [r4, #0]
 800f6fa:	1961      	adds	r1, r4, r5
 800f6fc:	428b      	cmp	r3, r1
 800f6fe:	bf01      	itttt	eq
 800f700:	6819      	ldreq	r1, [r3, #0]
 800f702:	685b      	ldreq	r3, [r3, #4]
 800f704:	1949      	addeq	r1, r1, r5
 800f706:	6021      	streq	r1, [r4, #0]
 800f708:	e7ed      	b.n	800f6e6 <_free_r+0x22>
 800f70a:	461a      	mov	r2, r3
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	b10b      	cbz	r3, 800f714 <_free_r+0x50>
 800f710:	42a3      	cmp	r3, r4
 800f712:	d9fa      	bls.n	800f70a <_free_r+0x46>
 800f714:	6811      	ldr	r1, [r2, #0]
 800f716:	1855      	adds	r5, r2, r1
 800f718:	42a5      	cmp	r5, r4
 800f71a:	d10b      	bne.n	800f734 <_free_r+0x70>
 800f71c:	6824      	ldr	r4, [r4, #0]
 800f71e:	4421      	add	r1, r4
 800f720:	1854      	adds	r4, r2, r1
 800f722:	42a3      	cmp	r3, r4
 800f724:	6011      	str	r1, [r2, #0]
 800f726:	d1e0      	bne.n	800f6ea <_free_r+0x26>
 800f728:	681c      	ldr	r4, [r3, #0]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	6053      	str	r3, [r2, #4]
 800f72e:	4421      	add	r1, r4
 800f730:	6011      	str	r1, [r2, #0]
 800f732:	e7da      	b.n	800f6ea <_free_r+0x26>
 800f734:	d902      	bls.n	800f73c <_free_r+0x78>
 800f736:	230c      	movs	r3, #12
 800f738:	6003      	str	r3, [r0, #0]
 800f73a:	e7d6      	b.n	800f6ea <_free_r+0x26>
 800f73c:	6825      	ldr	r5, [r4, #0]
 800f73e:	1961      	adds	r1, r4, r5
 800f740:	428b      	cmp	r3, r1
 800f742:	bf04      	itt	eq
 800f744:	6819      	ldreq	r1, [r3, #0]
 800f746:	685b      	ldreq	r3, [r3, #4]
 800f748:	6063      	str	r3, [r4, #4]
 800f74a:	bf04      	itt	eq
 800f74c:	1949      	addeq	r1, r1, r5
 800f74e:	6021      	streq	r1, [r4, #0]
 800f750:	6054      	str	r4, [r2, #4]
 800f752:	e7ca      	b.n	800f6ea <_free_r+0x26>
 800f754:	b003      	add	sp, #12
 800f756:	bd30      	pop	{r4, r5, pc}
 800f758:	20009698 	.word	0x20009698

0800f75c <sbrk_aligned>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	4e0e      	ldr	r6, [pc, #56]	; (800f798 <sbrk_aligned+0x3c>)
 800f760:	460c      	mov	r4, r1
 800f762:	6831      	ldr	r1, [r6, #0]
 800f764:	4605      	mov	r5, r0
 800f766:	b911      	cbnz	r1, 800f76e <sbrk_aligned+0x12>
 800f768:	f000 f9ee 	bl	800fb48 <_sbrk_r>
 800f76c:	6030      	str	r0, [r6, #0]
 800f76e:	4621      	mov	r1, r4
 800f770:	4628      	mov	r0, r5
 800f772:	f000 f9e9 	bl	800fb48 <_sbrk_r>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	d00a      	beq.n	800f790 <sbrk_aligned+0x34>
 800f77a:	1cc4      	adds	r4, r0, #3
 800f77c:	f024 0403 	bic.w	r4, r4, #3
 800f780:	42a0      	cmp	r0, r4
 800f782:	d007      	beq.n	800f794 <sbrk_aligned+0x38>
 800f784:	1a21      	subs	r1, r4, r0
 800f786:	4628      	mov	r0, r5
 800f788:	f000 f9de 	bl	800fb48 <_sbrk_r>
 800f78c:	3001      	adds	r0, #1
 800f78e:	d101      	bne.n	800f794 <sbrk_aligned+0x38>
 800f790:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f794:	4620      	mov	r0, r4
 800f796:	bd70      	pop	{r4, r5, r6, pc}
 800f798:	2000969c 	.word	0x2000969c

0800f79c <_malloc_r>:
 800f79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a0:	1ccd      	adds	r5, r1, #3
 800f7a2:	f025 0503 	bic.w	r5, r5, #3
 800f7a6:	3508      	adds	r5, #8
 800f7a8:	2d0c      	cmp	r5, #12
 800f7aa:	bf38      	it	cc
 800f7ac:	250c      	movcc	r5, #12
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	4607      	mov	r7, r0
 800f7b2:	db01      	blt.n	800f7b8 <_malloc_r+0x1c>
 800f7b4:	42a9      	cmp	r1, r5
 800f7b6:	d905      	bls.n	800f7c4 <_malloc_r+0x28>
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	603b      	str	r3, [r7, #0]
 800f7bc:	2600      	movs	r6, #0
 800f7be:	4630      	mov	r0, r6
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	4e2e      	ldr	r6, [pc, #184]	; (800f880 <_malloc_r+0xe4>)
 800f7c6:	f000 fab9 	bl	800fd3c <__malloc_lock>
 800f7ca:	6833      	ldr	r3, [r6, #0]
 800f7cc:	461c      	mov	r4, r3
 800f7ce:	bb34      	cbnz	r4, 800f81e <_malloc_r+0x82>
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	f7ff ffc2 	bl	800f75c <sbrk_aligned>
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	4604      	mov	r4, r0
 800f7dc:	d14d      	bne.n	800f87a <_malloc_r+0xde>
 800f7de:	6834      	ldr	r4, [r6, #0]
 800f7e0:	4626      	mov	r6, r4
 800f7e2:	2e00      	cmp	r6, #0
 800f7e4:	d140      	bne.n	800f868 <_malloc_r+0xcc>
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	eb04 0803 	add.w	r8, r4, r3
 800f7f0:	f000 f9aa 	bl	800fb48 <_sbrk_r>
 800f7f4:	4580      	cmp	r8, r0
 800f7f6:	d13a      	bne.n	800f86e <_malloc_r+0xd2>
 800f7f8:	6821      	ldr	r1, [r4, #0]
 800f7fa:	3503      	adds	r5, #3
 800f7fc:	1a6d      	subs	r5, r5, r1
 800f7fe:	f025 0503 	bic.w	r5, r5, #3
 800f802:	3508      	adds	r5, #8
 800f804:	2d0c      	cmp	r5, #12
 800f806:	bf38      	it	cc
 800f808:	250c      	movcc	r5, #12
 800f80a:	4629      	mov	r1, r5
 800f80c:	4638      	mov	r0, r7
 800f80e:	f7ff ffa5 	bl	800f75c <sbrk_aligned>
 800f812:	3001      	adds	r0, #1
 800f814:	d02b      	beq.n	800f86e <_malloc_r+0xd2>
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	442b      	add	r3, r5
 800f81a:	6023      	str	r3, [r4, #0]
 800f81c:	e00e      	b.n	800f83c <_malloc_r+0xa0>
 800f81e:	6822      	ldr	r2, [r4, #0]
 800f820:	1b52      	subs	r2, r2, r5
 800f822:	d41e      	bmi.n	800f862 <_malloc_r+0xc6>
 800f824:	2a0b      	cmp	r2, #11
 800f826:	d916      	bls.n	800f856 <_malloc_r+0xba>
 800f828:	1961      	adds	r1, r4, r5
 800f82a:	42a3      	cmp	r3, r4
 800f82c:	6025      	str	r5, [r4, #0]
 800f82e:	bf18      	it	ne
 800f830:	6059      	strne	r1, [r3, #4]
 800f832:	6863      	ldr	r3, [r4, #4]
 800f834:	bf08      	it	eq
 800f836:	6031      	streq	r1, [r6, #0]
 800f838:	5162      	str	r2, [r4, r5]
 800f83a:	604b      	str	r3, [r1, #4]
 800f83c:	4638      	mov	r0, r7
 800f83e:	f104 060b 	add.w	r6, r4, #11
 800f842:	f000 fa81 	bl	800fd48 <__malloc_unlock>
 800f846:	f026 0607 	bic.w	r6, r6, #7
 800f84a:	1d23      	adds	r3, r4, #4
 800f84c:	1af2      	subs	r2, r6, r3
 800f84e:	d0b6      	beq.n	800f7be <_malloc_r+0x22>
 800f850:	1b9b      	subs	r3, r3, r6
 800f852:	50a3      	str	r3, [r4, r2]
 800f854:	e7b3      	b.n	800f7be <_malloc_r+0x22>
 800f856:	6862      	ldr	r2, [r4, #4]
 800f858:	42a3      	cmp	r3, r4
 800f85a:	bf0c      	ite	eq
 800f85c:	6032      	streq	r2, [r6, #0]
 800f85e:	605a      	strne	r2, [r3, #4]
 800f860:	e7ec      	b.n	800f83c <_malloc_r+0xa0>
 800f862:	4623      	mov	r3, r4
 800f864:	6864      	ldr	r4, [r4, #4]
 800f866:	e7b2      	b.n	800f7ce <_malloc_r+0x32>
 800f868:	4634      	mov	r4, r6
 800f86a:	6876      	ldr	r6, [r6, #4]
 800f86c:	e7b9      	b.n	800f7e2 <_malloc_r+0x46>
 800f86e:	230c      	movs	r3, #12
 800f870:	603b      	str	r3, [r7, #0]
 800f872:	4638      	mov	r0, r7
 800f874:	f000 fa68 	bl	800fd48 <__malloc_unlock>
 800f878:	e7a1      	b.n	800f7be <_malloc_r+0x22>
 800f87a:	6025      	str	r5, [r4, #0]
 800f87c:	e7de      	b.n	800f83c <_malloc_r+0xa0>
 800f87e:	bf00      	nop
 800f880:	20009698 	.word	0x20009698

0800f884 <__sfputc_r>:
 800f884:	6893      	ldr	r3, [r2, #8]
 800f886:	3b01      	subs	r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	b410      	push	{r4}
 800f88c:	6093      	str	r3, [r2, #8]
 800f88e:	da08      	bge.n	800f8a2 <__sfputc_r+0x1e>
 800f890:	6994      	ldr	r4, [r2, #24]
 800f892:	42a3      	cmp	r3, r4
 800f894:	db01      	blt.n	800f89a <__sfputc_r+0x16>
 800f896:	290a      	cmp	r1, #10
 800f898:	d103      	bne.n	800f8a2 <__sfputc_r+0x1e>
 800f89a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f89e:	f7fd bd51 	b.w	800d344 <__swbuf_r>
 800f8a2:	6813      	ldr	r3, [r2, #0]
 800f8a4:	1c58      	adds	r0, r3, #1
 800f8a6:	6010      	str	r0, [r2, #0]
 800f8a8:	7019      	strb	r1, [r3, #0]
 800f8aa:	4608      	mov	r0, r1
 800f8ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <__sfputs_r>:
 800f8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b4:	4606      	mov	r6, r0
 800f8b6:	460f      	mov	r7, r1
 800f8b8:	4614      	mov	r4, r2
 800f8ba:	18d5      	adds	r5, r2, r3
 800f8bc:	42ac      	cmp	r4, r5
 800f8be:	d101      	bne.n	800f8c4 <__sfputs_r+0x12>
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	e007      	b.n	800f8d4 <__sfputs_r+0x22>
 800f8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c8:	463a      	mov	r2, r7
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f7ff ffda 	bl	800f884 <__sfputc_r>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d1f3      	bne.n	800f8bc <__sfputs_r+0xa>
 800f8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8d8 <_vfiprintf_r>:
 800f8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8dc:	460d      	mov	r5, r1
 800f8de:	b09d      	sub	sp, #116	; 0x74
 800f8e0:	4614      	mov	r4, r2
 800f8e2:	4698      	mov	r8, r3
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	b118      	cbz	r0, 800f8f0 <_vfiprintf_r+0x18>
 800f8e8:	6983      	ldr	r3, [r0, #24]
 800f8ea:	b90b      	cbnz	r3, 800f8f0 <_vfiprintf_r+0x18>
 800f8ec:	f7fe fd80 	bl	800e3f0 <__sinit>
 800f8f0:	4b89      	ldr	r3, [pc, #548]	; (800fb18 <_vfiprintf_r+0x240>)
 800f8f2:	429d      	cmp	r5, r3
 800f8f4:	d11b      	bne.n	800f92e <_vfiprintf_r+0x56>
 800f8f6:	6875      	ldr	r5, [r6, #4]
 800f8f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8fa:	07d9      	lsls	r1, r3, #31
 800f8fc:	d405      	bmi.n	800f90a <_vfiprintf_r+0x32>
 800f8fe:	89ab      	ldrh	r3, [r5, #12]
 800f900:	059a      	lsls	r2, r3, #22
 800f902:	d402      	bmi.n	800f90a <_vfiprintf_r+0x32>
 800f904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f906:	f7ff f984 	bl	800ec12 <__retarget_lock_acquire_recursive>
 800f90a:	89ab      	ldrh	r3, [r5, #12]
 800f90c:	071b      	lsls	r3, r3, #28
 800f90e:	d501      	bpl.n	800f914 <_vfiprintf_r+0x3c>
 800f910:	692b      	ldr	r3, [r5, #16]
 800f912:	b9eb      	cbnz	r3, 800f950 <_vfiprintf_r+0x78>
 800f914:	4629      	mov	r1, r5
 800f916:	4630      	mov	r0, r6
 800f918:	f7fd fd66 	bl	800d3e8 <__swsetup_r>
 800f91c:	b1c0      	cbz	r0, 800f950 <_vfiprintf_r+0x78>
 800f91e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f920:	07dc      	lsls	r4, r3, #31
 800f922:	d50e      	bpl.n	800f942 <_vfiprintf_r+0x6a>
 800f924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f928:	b01d      	add	sp, #116	; 0x74
 800f92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f92e:	4b7b      	ldr	r3, [pc, #492]	; (800fb1c <_vfiprintf_r+0x244>)
 800f930:	429d      	cmp	r5, r3
 800f932:	d101      	bne.n	800f938 <_vfiprintf_r+0x60>
 800f934:	68b5      	ldr	r5, [r6, #8]
 800f936:	e7df      	b.n	800f8f8 <_vfiprintf_r+0x20>
 800f938:	4b79      	ldr	r3, [pc, #484]	; (800fb20 <_vfiprintf_r+0x248>)
 800f93a:	429d      	cmp	r5, r3
 800f93c:	bf08      	it	eq
 800f93e:	68f5      	ldreq	r5, [r6, #12]
 800f940:	e7da      	b.n	800f8f8 <_vfiprintf_r+0x20>
 800f942:	89ab      	ldrh	r3, [r5, #12]
 800f944:	0598      	lsls	r0, r3, #22
 800f946:	d4ed      	bmi.n	800f924 <_vfiprintf_r+0x4c>
 800f948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f94a:	f7ff f963 	bl	800ec14 <__retarget_lock_release_recursive>
 800f94e:	e7e9      	b.n	800f924 <_vfiprintf_r+0x4c>
 800f950:	2300      	movs	r3, #0
 800f952:	9309      	str	r3, [sp, #36]	; 0x24
 800f954:	2320      	movs	r3, #32
 800f956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f95a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f95e:	2330      	movs	r3, #48	; 0x30
 800f960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb24 <_vfiprintf_r+0x24c>
 800f964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f968:	f04f 0901 	mov.w	r9, #1
 800f96c:	4623      	mov	r3, r4
 800f96e:	469a      	mov	sl, r3
 800f970:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f974:	b10a      	cbz	r2, 800f97a <_vfiprintf_r+0xa2>
 800f976:	2a25      	cmp	r2, #37	; 0x25
 800f978:	d1f9      	bne.n	800f96e <_vfiprintf_r+0x96>
 800f97a:	ebba 0b04 	subs.w	fp, sl, r4
 800f97e:	d00b      	beq.n	800f998 <_vfiprintf_r+0xc0>
 800f980:	465b      	mov	r3, fp
 800f982:	4622      	mov	r2, r4
 800f984:	4629      	mov	r1, r5
 800f986:	4630      	mov	r0, r6
 800f988:	f7ff ff93 	bl	800f8b2 <__sfputs_r>
 800f98c:	3001      	adds	r0, #1
 800f98e:	f000 80aa 	beq.w	800fae6 <_vfiprintf_r+0x20e>
 800f992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f994:	445a      	add	r2, fp
 800f996:	9209      	str	r2, [sp, #36]	; 0x24
 800f998:	f89a 3000 	ldrb.w	r3, [sl]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 80a2 	beq.w	800fae6 <_vfiprintf_r+0x20e>
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9ac:	f10a 0a01 	add.w	sl, sl, #1
 800f9b0:	9304      	str	r3, [sp, #16]
 800f9b2:	9307      	str	r3, [sp, #28]
 800f9b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9b8:	931a      	str	r3, [sp, #104]	; 0x68
 800f9ba:	4654      	mov	r4, sl
 800f9bc:	2205      	movs	r2, #5
 800f9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c2:	4858      	ldr	r0, [pc, #352]	; (800fb24 <_vfiprintf_r+0x24c>)
 800f9c4:	f7f0 fc2c 	bl	8000220 <memchr>
 800f9c8:	9a04      	ldr	r2, [sp, #16]
 800f9ca:	b9d8      	cbnz	r0, 800fa04 <_vfiprintf_r+0x12c>
 800f9cc:	06d1      	lsls	r1, r2, #27
 800f9ce:	bf44      	itt	mi
 800f9d0:	2320      	movmi	r3, #32
 800f9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9d6:	0713      	lsls	r3, r2, #28
 800f9d8:	bf44      	itt	mi
 800f9da:	232b      	movmi	r3, #43	; 0x2b
 800f9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e4:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e6:	d015      	beq.n	800fa14 <_vfiprintf_r+0x13c>
 800f9e8:	9a07      	ldr	r2, [sp, #28]
 800f9ea:	4654      	mov	r4, sl
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	f04f 0c0a 	mov.w	ip, #10
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9f8:	3b30      	subs	r3, #48	; 0x30
 800f9fa:	2b09      	cmp	r3, #9
 800f9fc:	d94e      	bls.n	800fa9c <_vfiprintf_r+0x1c4>
 800f9fe:	b1b0      	cbz	r0, 800fa2e <_vfiprintf_r+0x156>
 800fa00:	9207      	str	r2, [sp, #28]
 800fa02:	e014      	b.n	800fa2e <_vfiprintf_r+0x156>
 800fa04:	eba0 0308 	sub.w	r3, r0, r8
 800fa08:	fa09 f303 	lsl.w	r3, r9, r3
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	9304      	str	r3, [sp, #16]
 800fa10:	46a2      	mov	sl, r4
 800fa12:	e7d2      	b.n	800f9ba <_vfiprintf_r+0xe2>
 800fa14:	9b03      	ldr	r3, [sp, #12]
 800fa16:	1d19      	adds	r1, r3, #4
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	9103      	str	r1, [sp, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	bfbb      	ittet	lt
 800fa20:	425b      	neglt	r3, r3
 800fa22:	f042 0202 	orrlt.w	r2, r2, #2
 800fa26:	9307      	strge	r3, [sp, #28]
 800fa28:	9307      	strlt	r3, [sp, #28]
 800fa2a:	bfb8      	it	lt
 800fa2c:	9204      	strlt	r2, [sp, #16]
 800fa2e:	7823      	ldrb	r3, [r4, #0]
 800fa30:	2b2e      	cmp	r3, #46	; 0x2e
 800fa32:	d10c      	bne.n	800fa4e <_vfiprintf_r+0x176>
 800fa34:	7863      	ldrb	r3, [r4, #1]
 800fa36:	2b2a      	cmp	r3, #42	; 0x2a
 800fa38:	d135      	bne.n	800faa6 <_vfiprintf_r+0x1ce>
 800fa3a:	9b03      	ldr	r3, [sp, #12]
 800fa3c:	1d1a      	adds	r2, r3, #4
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	9203      	str	r2, [sp, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	bfb8      	it	lt
 800fa46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fa4a:	3402      	adds	r4, #2
 800fa4c:	9305      	str	r3, [sp, #20]
 800fa4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb34 <_vfiprintf_r+0x25c>
 800fa52:	7821      	ldrb	r1, [r4, #0]
 800fa54:	2203      	movs	r2, #3
 800fa56:	4650      	mov	r0, sl
 800fa58:	f7f0 fbe2 	bl	8000220 <memchr>
 800fa5c:	b140      	cbz	r0, 800fa70 <_vfiprintf_r+0x198>
 800fa5e:	2340      	movs	r3, #64	; 0x40
 800fa60:	eba0 000a 	sub.w	r0, r0, sl
 800fa64:	fa03 f000 	lsl.w	r0, r3, r0
 800fa68:	9b04      	ldr	r3, [sp, #16]
 800fa6a:	4303      	orrs	r3, r0
 800fa6c:	3401      	adds	r4, #1
 800fa6e:	9304      	str	r3, [sp, #16]
 800fa70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa74:	482c      	ldr	r0, [pc, #176]	; (800fb28 <_vfiprintf_r+0x250>)
 800fa76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa7a:	2206      	movs	r2, #6
 800fa7c:	f7f0 fbd0 	bl	8000220 <memchr>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d03f      	beq.n	800fb04 <_vfiprintf_r+0x22c>
 800fa84:	4b29      	ldr	r3, [pc, #164]	; (800fb2c <_vfiprintf_r+0x254>)
 800fa86:	bb1b      	cbnz	r3, 800fad0 <_vfiprintf_r+0x1f8>
 800fa88:	9b03      	ldr	r3, [sp, #12]
 800fa8a:	3307      	adds	r3, #7
 800fa8c:	f023 0307 	bic.w	r3, r3, #7
 800fa90:	3308      	adds	r3, #8
 800fa92:	9303      	str	r3, [sp, #12]
 800fa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa96:	443b      	add	r3, r7
 800fa98:	9309      	str	r3, [sp, #36]	; 0x24
 800fa9a:	e767      	b.n	800f96c <_vfiprintf_r+0x94>
 800fa9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800faa0:	460c      	mov	r4, r1
 800faa2:	2001      	movs	r0, #1
 800faa4:	e7a5      	b.n	800f9f2 <_vfiprintf_r+0x11a>
 800faa6:	2300      	movs	r3, #0
 800faa8:	3401      	adds	r4, #1
 800faaa:	9305      	str	r3, [sp, #20]
 800faac:	4619      	mov	r1, r3
 800faae:	f04f 0c0a 	mov.w	ip, #10
 800fab2:	4620      	mov	r0, r4
 800fab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fab8:	3a30      	subs	r2, #48	; 0x30
 800faba:	2a09      	cmp	r2, #9
 800fabc:	d903      	bls.n	800fac6 <_vfiprintf_r+0x1ee>
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d0c5      	beq.n	800fa4e <_vfiprintf_r+0x176>
 800fac2:	9105      	str	r1, [sp, #20]
 800fac4:	e7c3      	b.n	800fa4e <_vfiprintf_r+0x176>
 800fac6:	fb0c 2101 	mla	r1, ip, r1, r2
 800faca:	4604      	mov	r4, r0
 800facc:	2301      	movs	r3, #1
 800face:	e7f0      	b.n	800fab2 <_vfiprintf_r+0x1da>
 800fad0:	ab03      	add	r3, sp, #12
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	462a      	mov	r2, r5
 800fad6:	4b16      	ldr	r3, [pc, #88]	; (800fb30 <_vfiprintf_r+0x258>)
 800fad8:	a904      	add	r1, sp, #16
 800fada:	4630      	mov	r0, r6
 800fadc:	f7fc f91e 	bl	800bd1c <_printf_float>
 800fae0:	4607      	mov	r7, r0
 800fae2:	1c78      	adds	r0, r7, #1
 800fae4:	d1d6      	bne.n	800fa94 <_vfiprintf_r+0x1bc>
 800fae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fae8:	07d9      	lsls	r1, r3, #31
 800faea:	d405      	bmi.n	800faf8 <_vfiprintf_r+0x220>
 800faec:	89ab      	ldrh	r3, [r5, #12]
 800faee:	059a      	lsls	r2, r3, #22
 800faf0:	d402      	bmi.n	800faf8 <_vfiprintf_r+0x220>
 800faf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faf4:	f7ff f88e 	bl	800ec14 <__retarget_lock_release_recursive>
 800faf8:	89ab      	ldrh	r3, [r5, #12]
 800fafa:	065b      	lsls	r3, r3, #25
 800fafc:	f53f af12 	bmi.w	800f924 <_vfiprintf_r+0x4c>
 800fb00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb02:	e711      	b.n	800f928 <_vfiprintf_r+0x50>
 800fb04:	ab03      	add	r3, sp, #12
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	462a      	mov	r2, r5
 800fb0a:	4b09      	ldr	r3, [pc, #36]	; (800fb30 <_vfiprintf_r+0x258>)
 800fb0c:	a904      	add	r1, sp, #16
 800fb0e:	4630      	mov	r0, r6
 800fb10:	f7fc fba8 	bl	800c264 <_printf_i>
 800fb14:	e7e4      	b.n	800fae0 <_vfiprintf_r+0x208>
 800fb16:	bf00      	nop
 800fb18:	08011c0c 	.word	0x08011c0c
 800fb1c:	08011c2c 	.word	0x08011c2c
 800fb20:	08011bec 	.word	0x08011bec
 800fb24:	08011e24 	.word	0x08011e24
 800fb28:	08011e2e 	.word	0x08011e2e
 800fb2c:	0800bd1d 	.word	0x0800bd1d
 800fb30:	0800f8b3 	.word	0x0800f8b3
 800fb34:	08011e2a 	.word	0x08011e2a

0800fb38 <nan>:
 800fb38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fb40 <nan+0x8>
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	00000000 	.word	0x00000000
 800fb44:	7ff80000 	.word	0x7ff80000

0800fb48 <_sbrk_r>:
 800fb48:	b538      	push	{r3, r4, r5, lr}
 800fb4a:	4d06      	ldr	r5, [pc, #24]	; (800fb64 <_sbrk_r+0x1c>)
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	4604      	mov	r4, r0
 800fb50:	4608      	mov	r0, r1
 800fb52:	602b      	str	r3, [r5, #0]
 800fb54:	f7f6 fe3a 	bl	80067cc <_sbrk>
 800fb58:	1c43      	adds	r3, r0, #1
 800fb5a:	d102      	bne.n	800fb62 <_sbrk_r+0x1a>
 800fb5c:	682b      	ldr	r3, [r5, #0]
 800fb5e:	b103      	cbz	r3, 800fb62 <_sbrk_r+0x1a>
 800fb60:	6023      	str	r3, [r4, #0]
 800fb62:	bd38      	pop	{r3, r4, r5, pc}
 800fb64:	200096a0 	.word	0x200096a0

0800fb68 <__sread>:
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb70:	f000 f8f0 	bl	800fd54 <_read_r>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	bfab      	itete	ge
 800fb78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb7a:	89a3      	ldrhlt	r3, [r4, #12]
 800fb7c:	181b      	addge	r3, r3, r0
 800fb7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb82:	bfac      	ite	ge
 800fb84:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb86:	81a3      	strhlt	r3, [r4, #12]
 800fb88:	bd10      	pop	{r4, pc}

0800fb8a <__swrite>:
 800fb8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb8e:	461f      	mov	r7, r3
 800fb90:	898b      	ldrh	r3, [r1, #12]
 800fb92:	05db      	lsls	r3, r3, #23
 800fb94:	4605      	mov	r5, r0
 800fb96:	460c      	mov	r4, r1
 800fb98:	4616      	mov	r6, r2
 800fb9a:	d505      	bpl.n	800fba8 <__swrite+0x1e>
 800fb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fba0:	2302      	movs	r3, #2
 800fba2:	2200      	movs	r2, #0
 800fba4:	f000 f8b8 	bl	800fd18 <_lseek_r>
 800fba8:	89a3      	ldrh	r3, [r4, #12]
 800fbaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbb2:	81a3      	strh	r3, [r4, #12]
 800fbb4:	4632      	mov	r2, r6
 800fbb6:	463b      	mov	r3, r7
 800fbb8:	4628      	mov	r0, r5
 800fbba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbe:	f000 b837 	b.w	800fc30 <_write_r>

0800fbc2 <__sseek>:
 800fbc2:	b510      	push	{r4, lr}
 800fbc4:	460c      	mov	r4, r1
 800fbc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbca:	f000 f8a5 	bl	800fd18 <_lseek_r>
 800fbce:	1c43      	adds	r3, r0, #1
 800fbd0:	89a3      	ldrh	r3, [r4, #12]
 800fbd2:	bf15      	itete	ne
 800fbd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fbd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fbda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fbde:	81a3      	strheq	r3, [r4, #12]
 800fbe0:	bf18      	it	ne
 800fbe2:	81a3      	strhne	r3, [r4, #12]
 800fbe4:	bd10      	pop	{r4, pc}

0800fbe6 <__sclose>:
 800fbe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbea:	f000 b851 	b.w	800fc90 <_close_r>

0800fbee <strncmp>:
 800fbee:	b510      	push	{r4, lr}
 800fbf0:	b17a      	cbz	r2, 800fc12 <strncmp+0x24>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	3901      	subs	r1, #1
 800fbf6:	1884      	adds	r4, r0, r2
 800fbf8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fc00:	4290      	cmp	r0, r2
 800fc02:	d101      	bne.n	800fc08 <strncmp+0x1a>
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d101      	bne.n	800fc0c <strncmp+0x1e>
 800fc08:	1a80      	subs	r0, r0, r2
 800fc0a:	bd10      	pop	{r4, pc}
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d1f3      	bne.n	800fbf8 <strncmp+0xa>
 800fc10:	e7fa      	b.n	800fc08 <strncmp+0x1a>
 800fc12:	4610      	mov	r0, r2
 800fc14:	e7f9      	b.n	800fc0a <strncmp+0x1c>

0800fc16 <__ascii_wctomb>:
 800fc16:	b149      	cbz	r1, 800fc2c <__ascii_wctomb+0x16>
 800fc18:	2aff      	cmp	r2, #255	; 0xff
 800fc1a:	bf85      	ittet	hi
 800fc1c:	238a      	movhi	r3, #138	; 0x8a
 800fc1e:	6003      	strhi	r3, [r0, #0]
 800fc20:	700a      	strbls	r2, [r1, #0]
 800fc22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fc26:	bf98      	it	ls
 800fc28:	2001      	movls	r0, #1
 800fc2a:	4770      	bx	lr
 800fc2c:	4608      	mov	r0, r1
 800fc2e:	4770      	bx	lr

0800fc30 <_write_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d07      	ldr	r5, [pc, #28]	; (800fc50 <_write_r+0x20>)
 800fc34:	4604      	mov	r4, r0
 800fc36:	4608      	mov	r0, r1
 800fc38:	4611      	mov	r1, r2
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	602a      	str	r2, [r5, #0]
 800fc3e:	461a      	mov	r2, r3
 800fc40:	f7f6 fd73 	bl	800672a <_write>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	d102      	bne.n	800fc4e <_write_r+0x1e>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	b103      	cbz	r3, 800fc4e <_write_r+0x1e>
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	200096a0 	.word	0x200096a0

0800fc54 <__assert_func>:
 800fc54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc56:	4614      	mov	r4, r2
 800fc58:	461a      	mov	r2, r3
 800fc5a:	4b09      	ldr	r3, [pc, #36]	; (800fc80 <__assert_func+0x2c>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4605      	mov	r5, r0
 800fc60:	68d8      	ldr	r0, [r3, #12]
 800fc62:	b14c      	cbz	r4, 800fc78 <__assert_func+0x24>
 800fc64:	4b07      	ldr	r3, [pc, #28]	; (800fc84 <__assert_func+0x30>)
 800fc66:	9100      	str	r1, [sp, #0]
 800fc68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc6c:	4906      	ldr	r1, [pc, #24]	; (800fc88 <__assert_func+0x34>)
 800fc6e:	462b      	mov	r3, r5
 800fc70:	f000 f81e 	bl	800fcb0 <fiprintf>
 800fc74:	f000 f880 	bl	800fd78 <abort>
 800fc78:	4b04      	ldr	r3, [pc, #16]	; (800fc8c <__assert_func+0x38>)
 800fc7a:	461c      	mov	r4, r3
 800fc7c:	e7f3      	b.n	800fc66 <__assert_func+0x12>
 800fc7e:	bf00      	nop
 800fc80:	2000004c 	.word	0x2000004c
 800fc84:	08011e35 	.word	0x08011e35
 800fc88:	08011e42 	.word	0x08011e42
 800fc8c:	08011e70 	.word	0x08011e70

0800fc90 <_close_r>:
 800fc90:	b538      	push	{r3, r4, r5, lr}
 800fc92:	4d06      	ldr	r5, [pc, #24]	; (800fcac <_close_r+0x1c>)
 800fc94:	2300      	movs	r3, #0
 800fc96:	4604      	mov	r4, r0
 800fc98:	4608      	mov	r0, r1
 800fc9a:	602b      	str	r3, [r5, #0]
 800fc9c:	f7f6 fd61 	bl	8006762 <_close>
 800fca0:	1c43      	adds	r3, r0, #1
 800fca2:	d102      	bne.n	800fcaa <_close_r+0x1a>
 800fca4:	682b      	ldr	r3, [r5, #0]
 800fca6:	b103      	cbz	r3, 800fcaa <_close_r+0x1a>
 800fca8:	6023      	str	r3, [r4, #0]
 800fcaa:	bd38      	pop	{r3, r4, r5, pc}
 800fcac:	200096a0 	.word	0x200096a0

0800fcb0 <fiprintf>:
 800fcb0:	b40e      	push	{r1, r2, r3}
 800fcb2:	b503      	push	{r0, r1, lr}
 800fcb4:	4601      	mov	r1, r0
 800fcb6:	ab03      	add	r3, sp, #12
 800fcb8:	4805      	ldr	r0, [pc, #20]	; (800fcd0 <fiprintf+0x20>)
 800fcba:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcbe:	6800      	ldr	r0, [r0, #0]
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	f7ff fe09 	bl	800f8d8 <_vfiprintf_r>
 800fcc6:	b002      	add	sp, #8
 800fcc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fccc:	b003      	add	sp, #12
 800fcce:	4770      	bx	lr
 800fcd0:	2000004c 	.word	0x2000004c

0800fcd4 <_fstat_r>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	4d07      	ldr	r5, [pc, #28]	; (800fcf4 <_fstat_r+0x20>)
 800fcd8:	2300      	movs	r3, #0
 800fcda:	4604      	mov	r4, r0
 800fcdc:	4608      	mov	r0, r1
 800fcde:	4611      	mov	r1, r2
 800fce0:	602b      	str	r3, [r5, #0]
 800fce2:	f7f6 fd4a 	bl	800677a <_fstat>
 800fce6:	1c43      	adds	r3, r0, #1
 800fce8:	d102      	bne.n	800fcf0 <_fstat_r+0x1c>
 800fcea:	682b      	ldr	r3, [r5, #0]
 800fcec:	b103      	cbz	r3, 800fcf0 <_fstat_r+0x1c>
 800fcee:	6023      	str	r3, [r4, #0]
 800fcf0:	bd38      	pop	{r3, r4, r5, pc}
 800fcf2:	bf00      	nop
 800fcf4:	200096a0 	.word	0x200096a0

0800fcf8 <_isatty_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	4d06      	ldr	r5, [pc, #24]	; (800fd14 <_isatty_r+0x1c>)
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	4604      	mov	r4, r0
 800fd00:	4608      	mov	r0, r1
 800fd02:	602b      	str	r3, [r5, #0]
 800fd04:	f7f6 fd49 	bl	800679a <_isatty>
 800fd08:	1c43      	adds	r3, r0, #1
 800fd0a:	d102      	bne.n	800fd12 <_isatty_r+0x1a>
 800fd0c:	682b      	ldr	r3, [r5, #0]
 800fd0e:	b103      	cbz	r3, 800fd12 <_isatty_r+0x1a>
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	bd38      	pop	{r3, r4, r5, pc}
 800fd14:	200096a0 	.word	0x200096a0

0800fd18 <_lseek_r>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	4d07      	ldr	r5, [pc, #28]	; (800fd38 <_lseek_r+0x20>)
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	4608      	mov	r0, r1
 800fd20:	4611      	mov	r1, r2
 800fd22:	2200      	movs	r2, #0
 800fd24:	602a      	str	r2, [r5, #0]
 800fd26:	461a      	mov	r2, r3
 800fd28:	f7f6 fd42 	bl	80067b0 <_lseek>
 800fd2c:	1c43      	adds	r3, r0, #1
 800fd2e:	d102      	bne.n	800fd36 <_lseek_r+0x1e>
 800fd30:	682b      	ldr	r3, [r5, #0]
 800fd32:	b103      	cbz	r3, 800fd36 <_lseek_r+0x1e>
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	bd38      	pop	{r3, r4, r5, pc}
 800fd38:	200096a0 	.word	0x200096a0

0800fd3c <__malloc_lock>:
 800fd3c:	4801      	ldr	r0, [pc, #4]	; (800fd44 <__malloc_lock+0x8>)
 800fd3e:	f7fe bf68 	b.w	800ec12 <__retarget_lock_acquire_recursive>
 800fd42:	bf00      	nop
 800fd44:	20009694 	.word	0x20009694

0800fd48 <__malloc_unlock>:
 800fd48:	4801      	ldr	r0, [pc, #4]	; (800fd50 <__malloc_unlock+0x8>)
 800fd4a:	f7fe bf63 	b.w	800ec14 <__retarget_lock_release_recursive>
 800fd4e:	bf00      	nop
 800fd50:	20009694 	.word	0x20009694

0800fd54 <_read_r>:
 800fd54:	b538      	push	{r3, r4, r5, lr}
 800fd56:	4d07      	ldr	r5, [pc, #28]	; (800fd74 <_read_r+0x20>)
 800fd58:	4604      	mov	r4, r0
 800fd5a:	4608      	mov	r0, r1
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	602a      	str	r2, [r5, #0]
 800fd62:	461a      	mov	r2, r3
 800fd64:	f7f6 fcc4 	bl	80066f0 <_read>
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	d102      	bne.n	800fd72 <_read_r+0x1e>
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	b103      	cbz	r3, 800fd72 <_read_r+0x1e>
 800fd70:	6023      	str	r3, [r4, #0]
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
 800fd74:	200096a0 	.word	0x200096a0

0800fd78 <abort>:
 800fd78:	b508      	push	{r3, lr}
 800fd7a:	2006      	movs	r0, #6
 800fd7c:	f000 f82c 	bl	800fdd8 <raise>
 800fd80:	2001      	movs	r0, #1
 800fd82:	f7f6 fcab 	bl	80066dc <_exit>

0800fd86 <_raise_r>:
 800fd86:	291f      	cmp	r1, #31
 800fd88:	b538      	push	{r3, r4, r5, lr}
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	460d      	mov	r5, r1
 800fd8e:	d904      	bls.n	800fd9a <_raise_r+0x14>
 800fd90:	2316      	movs	r3, #22
 800fd92:	6003      	str	r3, [r0, #0]
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd98:	bd38      	pop	{r3, r4, r5, pc}
 800fd9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd9c:	b112      	cbz	r2, 800fda4 <_raise_r+0x1e>
 800fd9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fda2:	b94b      	cbnz	r3, 800fdb8 <_raise_r+0x32>
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 f831 	bl	800fe0c <_getpid_r>
 800fdaa:	462a      	mov	r2, r5
 800fdac:	4601      	mov	r1, r0
 800fdae:	4620      	mov	r0, r4
 800fdb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdb4:	f000 b818 	b.w	800fde8 <_kill_r>
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d00a      	beq.n	800fdd2 <_raise_r+0x4c>
 800fdbc:	1c59      	adds	r1, r3, #1
 800fdbe:	d103      	bne.n	800fdc8 <_raise_r+0x42>
 800fdc0:	2316      	movs	r3, #22
 800fdc2:	6003      	str	r3, [r0, #0]
 800fdc4:	2001      	movs	r0, #1
 800fdc6:	e7e7      	b.n	800fd98 <_raise_r+0x12>
 800fdc8:	2400      	movs	r4, #0
 800fdca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fdce:	4628      	mov	r0, r5
 800fdd0:	4798      	blx	r3
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	e7e0      	b.n	800fd98 <_raise_r+0x12>
	...

0800fdd8 <raise>:
 800fdd8:	4b02      	ldr	r3, [pc, #8]	; (800fde4 <raise+0xc>)
 800fdda:	4601      	mov	r1, r0
 800fddc:	6818      	ldr	r0, [r3, #0]
 800fdde:	f7ff bfd2 	b.w	800fd86 <_raise_r>
 800fde2:	bf00      	nop
 800fde4:	2000004c 	.word	0x2000004c

0800fde8 <_kill_r>:
 800fde8:	b538      	push	{r3, r4, r5, lr}
 800fdea:	4d07      	ldr	r5, [pc, #28]	; (800fe08 <_kill_r+0x20>)
 800fdec:	2300      	movs	r3, #0
 800fdee:	4604      	mov	r4, r0
 800fdf0:	4608      	mov	r0, r1
 800fdf2:	4611      	mov	r1, r2
 800fdf4:	602b      	str	r3, [r5, #0]
 800fdf6:	f7f6 fc61 	bl	80066bc <_kill>
 800fdfa:	1c43      	adds	r3, r0, #1
 800fdfc:	d102      	bne.n	800fe04 <_kill_r+0x1c>
 800fdfe:	682b      	ldr	r3, [r5, #0]
 800fe00:	b103      	cbz	r3, 800fe04 <_kill_r+0x1c>
 800fe02:	6023      	str	r3, [r4, #0]
 800fe04:	bd38      	pop	{r3, r4, r5, pc}
 800fe06:	bf00      	nop
 800fe08:	200096a0 	.word	0x200096a0

0800fe0c <_getpid_r>:
 800fe0c:	f7f6 bc4e 	b.w	80066ac <_getpid>

0800fe10 <round>:
 800fe10:	ec51 0b10 	vmov	r0, r1, d0
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800fe1a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800fe1e:	2c13      	cmp	r4, #19
 800fe20:	ee10 2a10 	vmov	r2, s0
 800fe24:	460b      	mov	r3, r1
 800fe26:	dc19      	bgt.n	800fe5c <round+0x4c>
 800fe28:	2c00      	cmp	r4, #0
 800fe2a:	da09      	bge.n	800fe40 <round+0x30>
 800fe2c:	3401      	adds	r4, #1
 800fe2e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fe32:	d103      	bne.n	800fe3c <round+0x2c>
 800fe34:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fe38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	e028      	b.n	800fe92 <round+0x82>
 800fe40:	4d15      	ldr	r5, [pc, #84]	; (800fe98 <round+0x88>)
 800fe42:	4125      	asrs	r5, r4
 800fe44:	ea01 0605 	and.w	r6, r1, r5
 800fe48:	4332      	orrs	r2, r6
 800fe4a:	d00e      	beq.n	800fe6a <round+0x5a>
 800fe4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fe50:	fa42 f404 	asr.w	r4, r2, r4
 800fe54:	4423      	add	r3, r4
 800fe56:	ea23 0305 	bic.w	r3, r3, r5
 800fe5a:	e7ef      	b.n	800fe3c <round+0x2c>
 800fe5c:	2c33      	cmp	r4, #51	; 0x33
 800fe5e:	dd07      	ble.n	800fe70 <round+0x60>
 800fe60:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fe64:	d101      	bne.n	800fe6a <round+0x5a>
 800fe66:	f7f0 fa31 	bl	80002cc <__adddf3>
 800fe6a:	ec41 0b10 	vmov	d0, r0, r1
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}
 800fe70:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800fe74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fe78:	40f5      	lsrs	r5, r6
 800fe7a:	4228      	tst	r0, r5
 800fe7c:	d0f5      	beq.n	800fe6a <round+0x5a>
 800fe7e:	2101      	movs	r1, #1
 800fe80:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fe84:	fa01 f404 	lsl.w	r4, r1, r4
 800fe88:	1912      	adds	r2, r2, r4
 800fe8a:	bf28      	it	cs
 800fe8c:	185b      	addcs	r3, r3, r1
 800fe8e:	ea22 0205 	bic.w	r2, r2, r5
 800fe92:	4619      	mov	r1, r3
 800fe94:	4610      	mov	r0, r2
 800fe96:	e7e8      	b.n	800fe6a <round+0x5a>
 800fe98:	000fffff 	.word	0x000fffff

0800fe9c <fmaxf>:
 800fe9c:	b508      	push	{r3, lr}
 800fe9e:	ed2d 8b02 	vpush	{d8}
 800fea2:	eeb0 8a40 	vmov.f32	s16, s0
 800fea6:	eef0 8a60 	vmov.f32	s17, s1
 800feaa:	f000 f82d 	bl	800ff08 <__fpclassifyf>
 800feae:	b148      	cbz	r0, 800fec4 <fmaxf+0x28>
 800feb0:	eeb0 0a68 	vmov.f32	s0, s17
 800feb4:	f000 f828 	bl	800ff08 <__fpclassifyf>
 800feb8:	b130      	cbz	r0, 800fec8 <fmaxf+0x2c>
 800feba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800febe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec2:	dc01      	bgt.n	800fec8 <fmaxf+0x2c>
 800fec4:	eeb0 8a68 	vmov.f32	s16, s17
 800fec8:	eeb0 0a48 	vmov.f32	s0, s16
 800fecc:	ecbd 8b02 	vpop	{d8}
 800fed0:	bd08      	pop	{r3, pc}

0800fed2 <fminf>:
 800fed2:	b508      	push	{r3, lr}
 800fed4:	ed2d 8b02 	vpush	{d8}
 800fed8:	eeb0 8a40 	vmov.f32	s16, s0
 800fedc:	eef0 8a60 	vmov.f32	s17, s1
 800fee0:	f000 f812 	bl	800ff08 <__fpclassifyf>
 800fee4:	b148      	cbz	r0, 800fefa <fminf+0x28>
 800fee6:	eeb0 0a68 	vmov.f32	s0, s17
 800feea:	f000 f80d 	bl	800ff08 <__fpclassifyf>
 800feee:	b130      	cbz	r0, 800fefe <fminf+0x2c>
 800fef0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef8:	d401      	bmi.n	800fefe <fminf+0x2c>
 800fefa:	eeb0 8a68 	vmov.f32	s16, s17
 800fefe:	eeb0 0a48 	vmov.f32	s0, s16
 800ff02:	ecbd 8b02 	vpop	{d8}
 800ff06:	bd08      	pop	{r3, pc}

0800ff08 <__fpclassifyf>:
 800ff08:	ee10 3a10 	vmov	r3, s0
 800ff0c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800ff10:	d00d      	beq.n	800ff2e <__fpclassifyf+0x26>
 800ff12:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800ff16:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ff1a:	d30a      	bcc.n	800ff32 <__fpclassifyf+0x2a>
 800ff1c:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <__fpclassifyf+0x34>)
 800ff1e:	1e42      	subs	r2, r0, #1
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d908      	bls.n	800ff36 <__fpclassifyf+0x2e>
 800ff24:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800ff28:	4258      	negs	r0, r3
 800ff2a:	4158      	adcs	r0, r3
 800ff2c:	4770      	bx	lr
 800ff2e:	2002      	movs	r0, #2
 800ff30:	4770      	bx	lr
 800ff32:	2004      	movs	r0, #4
 800ff34:	4770      	bx	lr
 800ff36:	2003      	movs	r0, #3
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	007ffffe 	.word	0x007ffffe

0800ff40 <exp>:
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	ed2d 8b02 	vpush	{d8}
 800ff46:	ec55 4b10 	vmov	r4, r5, d0
 800ff4a:	f000 f881 	bl	8010050 <__ieee754_exp>
 800ff4e:	eeb0 8a40 	vmov.f32	s16, s0
 800ff52:	eef0 8a60 	vmov.f32	s17, s1
 800ff56:	ec45 4b10 	vmov	d0, r4, r5
 800ff5a:	f000 fab0 	bl	80104be <finite>
 800ff5e:	b168      	cbz	r0, 800ff7c <exp+0x3c>
 800ff60:	a317      	add	r3, pc, #92	; (adr r3, 800ffc0 <exp+0x80>)
 800ff62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff66:	4620      	mov	r0, r4
 800ff68:	4629      	mov	r1, r5
 800ff6a:	f7f0 fdf5 	bl	8000b58 <__aeabi_dcmpgt>
 800ff6e:	b160      	cbz	r0, 800ff8a <exp+0x4a>
 800ff70:	f7fb fdf4 	bl	800bb5c <__errno>
 800ff74:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800ffb0 <exp+0x70>
 800ff78:	2322      	movs	r3, #34	; 0x22
 800ff7a:	6003      	str	r3, [r0, #0]
 800ff7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ff80:	eef0 0a68 	vmov.f32	s1, s17
 800ff84:	ecbd 8b02 	vpop	{d8}
 800ff88:	bd38      	pop	{r3, r4, r5, pc}
 800ff8a:	a30f      	add	r3, pc, #60	; (adr r3, 800ffc8 <exp+0x88>)
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	4620      	mov	r0, r4
 800ff92:	4629      	mov	r1, r5
 800ff94:	f7f0 fdc2 	bl	8000b1c <__aeabi_dcmplt>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d0ef      	beq.n	800ff7c <exp+0x3c>
 800ff9c:	f7fb fdde 	bl	800bb5c <__errno>
 800ffa0:	2322      	movs	r3, #34	; 0x22
 800ffa2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800ffb8 <exp+0x78>
 800ffa6:	6003      	str	r3, [r0, #0]
 800ffa8:	e7e8      	b.n	800ff7c <exp+0x3c>
 800ffaa:	bf00      	nop
 800ffac:	f3af 8000 	nop.w
 800ffb0:	00000000 	.word	0x00000000
 800ffb4:	7ff00000 	.word	0x7ff00000
	...
 800ffc0:	fefa39ef 	.word	0xfefa39ef
 800ffc4:	40862e42 	.word	0x40862e42
 800ffc8:	d52d3051 	.word	0xd52d3051
 800ffcc:	c0874910 	.word	0xc0874910

0800ffd0 <fmodf>:
 800ffd0:	b508      	push	{r3, lr}
 800ffd2:	ed2d 8b02 	vpush	{d8}
 800ffd6:	eef0 8a40 	vmov.f32	s17, s0
 800ffda:	eeb0 8a60 	vmov.f32	s16, s1
 800ffde:	f000 f9b9 	bl	8010354 <__ieee754_fmodf>
 800ffe2:	eef4 8a48 	vcmp.f32	s17, s16
 800ffe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffea:	d60c      	bvs.n	8010006 <fmodf+0x36>
 800ffec:	eddf 8a07 	vldr	s17, [pc, #28]	; 801000c <fmodf+0x3c>
 800fff0:	eeb4 8a68 	vcmp.f32	s16, s17
 800fff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff8:	d105      	bne.n	8010006 <fmodf+0x36>
 800fffa:	f7fb fdaf 	bl	800bb5c <__errno>
 800fffe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010002:	2321      	movs	r3, #33	; 0x21
 8010004:	6003      	str	r3, [r0, #0]
 8010006:	ecbd 8b02 	vpop	{d8}
 801000a:	bd08      	pop	{r3, pc}
 801000c:	00000000 	.word	0x00000000

08010010 <sqrtf>:
 8010010:	b508      	push	{r3, lr}
 8010012:	ed2d 8b02 	vpush	{d8}
 8010016:	eeb0 8a40 	vmov.f32	s16, s0
 801001a:	f000 fa1d 	bl	8010458 <__ieee754_sqrtf>
 801001e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010026:	d60c      	bvs.n	8010042 <sqrtf+0x32>
 8010028:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010048 <sqrtf+0x38>
 801002c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010034:	d505      	bpl.n	8010042 <sqrtf+0x32>
 8010036:	f7fb fd91 	bl	800bb5c <__errno>
 801003a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801003e:	2321      	movs	r3, #33	; 0x21
 8010040:	6003      	str	r3, [r0, #0]
 8010042:	ecbd 8b02 	vpop	{d8}
 8010046:	bd08      	pop	{r3, pc}
	...

08010050 <__ieee754_exp>:
 8010050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010054:	ec55 4b10 	vmov	r4, r5, d0
 8010058:	49b5      	ldr	r1, [pc, #724]	; (8010330 <__ieee754_exp+0x2e0>)
 801005a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801005e:	428b      	cmp	r3, r1
 8010060:	ed2d 8b04 	vpush	{d8-d9}
 8010064:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010068:	d93d      	bls.n	80100e6 <__ieee754_exp+0x96>
 801006a:	49b2      	ldr	r1, [pc, #712]	; (8010334 <__ieee754_exp+0x2e4>)
 801006c:	428b      	cmp	r3, r1
 801006e:	d918      	bls.n	80100a2 <__ieee754_exp+0x52>
 8010070:	ee10 3a10 	vmov	r3, s0
 8010074:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8010078:	4313      	orrs	r3, r2
 801007a:	d009      	beq.n	8010090 <__ieee754_exp+0x40>
 801007c:	ee10 2a10 	vmov	r2, s0
 8010080:	462b      	mov	r3, r5
 8010082:	4620      	mov	r0, r4
 8010084:	4629      	mov	r1, r5
 8010086:	f7f0 f921 	bl	80002cc <__adddf3>
 801008a:	4604      	mov	r4, r0
 801008c:	460d      	mov	r5, r1
 801008e:	e002      	b.n	8010096 <__ieee754_exp+0x46>
 8010090:	b10e      	cbz	r6, 8010096 <__ieee754_exp+0x46>
 8010092:	2400      	movs	r4, #0
 8010094:	2500      	movs	r5, #0
 8010096:	ecbd 8b04 	vpop	{d8-d9}
 801009a:	ec45 4b10 	vmov	d0, r4, r5
 801009e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a2:	a38d      	add	r3, pc, #564	; (adr r3, 80102d8 <__ieee754_exp+0x288>)
 80100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a8:	ee10 0a10 	vmov	r0, s0
 80100ac:	4629      	mov	r1, r5
 80100ae:	f7f0 fd53 	bl	8000b58 <__aeabi_dcmpgt>
 80100b2:	4607      	mov	r7, r0
 80100b4:	b130      	cbz	r0, 80100c4 <__ieee754_exp+0x74>
 80100b6:	ecbd 8b04 	vpop	{d8-d9}
 80100ba:	2000      	movs	r0, #0
 80100bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c0:	f000 b9f4 	b.w	80104ac <__math_oflow>
 80100c4:	a386      	add	r3, pc, #536	; (adr r3, 80102e0 <__ieee754_exp+0x290>)
 80100c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ca:	4620      	mov	r0, r4
 80100cc:	4629      	mov	r1, r5
 80100ce:	f7f0 fd25 	bl	8000b1c <__aeabi_dcmplt>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	f000 808b 	beq.w	80101ee <__ieee754_exp+0x19e>
 80100d8:	ecbd 8b04 	vpop	{d8-d9}
 80100dc:	4638      	mov	r0, r7
 80100de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e2:	f000 b9da 	b.w	801049a <__math_uflow>
 80100e6:	4a94      	ldr	r2, [pc, #592]	; (8010338 <__ieee754_exp+0x2e8>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	f240 80ac 	bls.w	8010246 <__ieee754_exp+0x1f6>
 80100ee:	4a93      	ldr	r2, [pc, #588]	; (801033c <__ieee754_exp+0x2ec>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d87c      	bhi.n	80101ee <__ieee754_exp+0x19e>
 80100f4:	4b92      	ldr	r3, [pc, #584]	; (8010340 <__ieee754_exp+0x2f0>)
 80100f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80100fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fe:	ee10 0a10 	vmov	r0, s0
 8010102:	4629      	mov	r1, r5
 8010104:	f7f0 f8e0 	bl	80002c8 <__aeabi_dsub>
 8010108:	4b8e      	ldr	r3, [pc, #568]	; (8010344 <__ieee754_exp+0x2f4>)
 801010a:	00f7      	lsls	r7, r6, #3
 801010c:	443b      	add	r3, r7
 801010e:	ed93 7b00 	vldr	d7, [r3]
 8010112:	f1c6 0a01 	rsb	sl, r6, #1
 8010116:	4680      	mov	r8, r0
 8010118:	4689      	mov	r9, r1
 801011a:	ebaa 0a06 	sub.w	sl, sl, r6
 801011e:	eeb0 8a47 	vmov.f32	s16, s14
 8010122:	eef0 8a67 	vmov.f32	s17, s15
 8010126:	ec53 2b18 	vmov	r2, r3, d8
 801012a:	4640      	mov	r0, r8
 801012c:	4649      	mov	r1, r9
 801012e:	f7f0 f8cb 	bl	80002c8 <__aeabi_dsub>
 8010132:	4604      	mov	r4, r0
 8010134:	460d      	mov	r5, r1
 8010136:	4622      	mov	r2, r4
 8010138:	462b      	mov	r3, r5
 801013a:	4620      	mov	r0, r4
 801013c:	4629      	mov	r1, r5
 801013e:	f7f0 fa7b 	bl	8000638 <__aeabi_dmul>
 8010142:	a369      	add	r3, pc, #420	; (adr r3, 80102e8 <__ieee754_exp+0x298>)
 8010144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010148:	4606      	mov	r6, r0
 801014a:	460f      	mov	r7, r1
 801014c:	f7f0 fa74 	bl	8000638 <__aeabi_dmul>
 8010150:	a367      	add	r3, pc, #412	; (adr r3, 80102f0 <__ieee754_exp+0x2a0>)
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	f7f0 f8b7 	bl	80002c8 <__aeabi_dsub>
 801015a:	4632      	mov	r2, r6
 801015c:	463b      	mov	r3, r7
 801015e:	f7f0 fa6b 	bl	8000638 <__aeabi_dmul>
 8010162:	a365      	add	r3, pc, #404	; (adr r3, 80102f8 <__ieee754_exp+0x2a8>)
 8010164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010168:	f7f0 f8b0 	bl	80002cc <__adddf3>
 801016c:	4632      	mov	r2, r6
 801016e:	463b      	mov	r3, r7
 8010170:	f7f0 fa62 	bl	8000638 <__aeabi_dmul>
 8010174:	a362      	add	r3, pc, #392	; (adr r3, 8010300 <__ieee754_exp+0x2b0>)
 8010176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017a:	f7f0 f8a5 	bl	80002c8 <__aeabi_dsub>
 801017e:	4632      	mov	r2, r6
 8010180:	463b      	mov	r3, r7
 8010182:	f7f0 fa59 	bl	8000638 <__aeabi_dmul>
 8010186:	a360      	add	r3, pc, #384	; (adr r3, 8010308 <__ieee754_exp+0x2b8>)
 8010188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018c:	f7f0 f89e 	bl	80002cc <__adddf3>
 8010190:	4632      	mov	r2, r6
 8010192:	463b      	mov	r3, r7
 8010194:	f7f0 fa50 	bl	8000638 <__aeabi_dmul>
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	4620      	mov	r0, r4
 801019e:	4629      	mov	r1, r5
 80101a0:	f7f0 f892 	bl	80002c8 <__aeabi_dsub>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	4606      	mov	r6, r0
 80101aa:	460f      	mov	r7, r1
 80101ac:	4620      	mov	r0, r4
 80101ae:	4629      	mov	r1, r5
 80101b0:	f7f0 fa42 	bl	8000638 <__aeabi_dmul>
 80101b4:	ec41 0b19 	vmov	d9, r0, r1
 80101b8:	f1ba 0f00 	cmp.w	sl, #0
 80101bc:	d15d      	bne.n	801027a <__ieee754_exp+0x22a>
 80101be:	2200      	movs	r2, #0
 80101c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101c4:	4630      	mov	r0, r6
 80101c6:	4639      	mov	r1, r7
 80101c8:	f7f0 f87e 	bl	80002c8 <__aeabi_dsub>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	ec51 0b19 	vmov	r0, r1, d9
 80101d4:	f7f0 fb5a 	bl	800088c <__aeabi_ddiv>
 80101d8:	4622      	mov	r2, r4
 80101da:	462b      	mov	r3, r5
 80101dc:	f7f0 f874 	bl	80002c8 <__aeabi_dsub>
 80101e0:	4602      	mov	r2, r0
 80101e2:	460b      	mov	r3, r1
 80101e4:	2000      	movs	r0, #0
 80101e6:	4958      	ldr	r1, [pc, #352]	; (8010348 <__ieee754_exp+0x2f8>)
 80101e8:	f7f0 f86e 	bl	80002c8 <__aeabi_dsub>
 80101ec:	e74d      	b.n	801008a <__ieee754_exp+0x3a>
 80101ee:	4857      	ldr	r0, [pc, #348]	; (801034c <__ieee754_exp+0x2fc>)
 80101f0:	a347      	add	r3, pc, #284	; (adr r3, 8010310 <__ieee754_exp+0x2c0>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80101fa:	4629      	mov	r1, r5
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7f0 fa1b 	bl	8000638 <__aeabi_dmul>
 8010202:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010206:	f7f0 f861 	bl	80002cc <__adddf3>
 801020a:	f7f0 fcc5 	bl	8000b98 <__aeabi_d2iz>
 801020e:	4682      	mov	sl, r0
 8010210:	f7f0 f9a8 	bl	8000564 <__aeabi_i2d>
 8010214:	a340      	add	r3, pc, #256	; (adr r3, 8010318 <__ieee754_exp+0x2c8>)
 8010216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021a:	4606      	mov	r6, r0
 801021c:	460f      	mov	r7, r1
 801021e:	f7f0 fa0b 	bl	8000638 <__aeabi_dmul>
 8010222:	4602      	mov	r2, r0
 8010224:	460b      	mov	r3, r1
 8010226:	4620      	mov	r0, r4
 8010228:	4629      	mov	r1, r5
 801022a:	f7f0 f84d 	bl	80002c8 <__aeabi_dsub>
 801022e:	a33c      	add	r3, pc, #240	; (adr r3, 8010320 <__ieee754_exp+0x2d0>)
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	4680      	mov	r8, r0
 8010236:	4689      	mov	r9, r1
 8010238:	4630      	mov	r0, r6
 801023a:	4639      	mov	r1, r7
 801023c:	f7f0 f9fc 	bl	8000638 <__aeabi_dmul>
 8010240:	ec41 0b18 	vmov	d8, r0, r1
 8010244:	e76f      	b.n	8010126 <__ieee754_exp+0xd6>
 8010246:	4a42      	ldr	r2, [pc, #264]	; (8010350 <__ieee754_exp+0x300>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d811      	bhi.n	8010270 <__ieee754_exp+0x220>
 801024c:	a336      	add	r3, pc, #216	; (adr r3, 8010328 <__ieee754_exp+0x2d8>)
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	ee10 0a10 	vmov	r0, s0
 8010256:	4629      	mov	r1, r5
 8010258:	f7f0 f838 	bl	80002cc <__adddf3>
 801025c:	4b3a      	ldr	r3, [pc, #232]	; (8010348 <__ieee754_exp+0x2f8>)
 801025e:	2200      	movs	r2, #0
 8010260:	f7f0 fc7a 	bl	8000b58 <__aeabi_dcmpgt>
 8010264:	b138      	cbz	r0, 8010276 <__ieee754_exp+0x226>
 8010266:	4b38      	ldr	r3, [pc, #224]	; (8010348 <__ieee754_exp+0x2f8>)
 8010268:	2200      	movs	r2, #0
 801026a:	4620      	mov	r0, r4
 801026c:	4629      	mov	r1, r5
 801026e:	e70a      	b.n	8010086 <__ieee754_exp+0x36>
 8010270:	f04f 0a00 	mov.w	sl, #0
 8010274:	e75f      	b.n	8010136 <__ieee754_exp+0xe6>
 8010276:	4682      	mov	sl, r0
 8010278:	e75d      	b.n	8010136 <__ieee754_exp+0xe6>
 801027a:	4632      	mov	r2, r6
 801027c:	463b      	mov	r3, r7
 801027e:	2000      	movs	r0, #0
 8010280:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010284:	f7f0 f820 	bl	80002c8 <__aeabi_dsub>
 8010288:	4602      	mov	r2, r0
 801028a:	460b      	mov	r3, r1
 801028c:	ec51 0b19 	vmov	r0, r1, d9
 8010290:	f7f0 fafc 	bl	800088c <__aeabi_ddiv>
 8010294:	4602      	mov	r2, r0
 8010296:	460b      	mov	r3, r1
 8010298:	ec51 0b18 	vmov	r0, r1, d8
 801029c:	f7f0 f814 	bl	80002c8 <__aeabi_dsub>
 80102a0:	4642      	mov	r2, r8
 80102a2:	464b      	mov	r3, r9
 80102a4:	f7f0 f810 	bl	80002c8 <__aeabi_dsub>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	2000      	movs	r0, #0
 80102ae:	4926      	ldr	r1, [pc, #152]	; (8010348 <__ieee754_exp+0x2f8>)
 80102b0:	f7f0 f80a 	bl	80002c8 <__aeabi_dsub>
 80102b4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80102b8:	4592      	cmp	sl, r2
 80102ba:	db02      	blt.n	80102c2 <__ieee754_exp+0x272>
 80102bc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80102c0:	e6e3      	b.n	801008a <__ieee754_exp+0x3a>
 80102c2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80102c6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80102ca:	2200      	movs	r2, #0
 80102cc:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80102d0:	f7f0 f9b2 	bl	8000638 <__aeabi_dmul>
 80102d4:	e6d9      	b.n	801008a <__ieee754_exp+0x3a>
 80102d6:	bf00      	nop
 80102d8:	fefa39ef 	.word	0xfefa39ef
 80102dc:	40862e42 	.word	0x40862e42
 80102e0:	d52d3051 	.word	0xd52d3051
 80102e4:	c0874910 	.word	0xc0874910
 80102e8:	72bea4d0 	.word	0x72bea4d0
 80102ec:	3e663769 	.word	0x3e663769
 80102f0:	c5d26bf1 	.word	0xc5d26bf1
 80102f4:	3ebbbd41 	.word	0x3ebbbd41
 80102f8:	af25de2c 	.word	0xaf25de2c
 80102fc:	3f11566a 	.word	0x3f11566a
 8010300:	16bebd93 	.word	0x16bebd93
 8010304:	3f66c16c 	.word	0x3f66c16c
 8010308:	5555553e 	.word	0x5555553e
 801030c:	3fc55555 	.word	0x3fc55555
 8010310:	652b82fe 	.word	0x652b82fe
 8010314:	3ff71547 	.word	0x3ff71547
 8010318:	fee00000 	.word	0xfee00000
 801031c:	3fe62e42 	.word	0x3fe62e42
 8010320:	35793c76 	.word	0x35793c76
 8010324:	3dea39ef 	.word	0x3dea39ef
 8010328:	8800759c 	.word	0x8800759c
 801032c:	7e37e43c 	.word	0x7e37e43c
 8010330:	40862e41 	.word	0x40862e41
 8010334:	7fefffff 	.word	0x7fefffff
 8010338:	3fd62e42 	.word	0x3fd62e42
 801033c:	3ff0a2b1 	.word	0x3ff0a2b1
 8010340:	08011e88 	.word	0x08011e88
 8010344:	08011e98 	.word	0x08011e98
 8010348:	3ff00000 	.word	0x3ff00000
 801034c:	08011e78 	.word	0x08011e78
 8010350:	3defffff 	.word	0x3defffff

08010354 <__ieee754_fmodf>:
 8010354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010356:	ee10 5a90 	vmov	r5, s1
 801035a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801035e:	d009      	beq.n	8010374 <__ieee754_fmodf+0x20>
 8010360:	ee10 2a10 	vmov	r2, s0
 8010364:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010368:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801036c:	da02      	bge.n	8010374 <__ieee754_fmodf+0x20>
 801036e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010372:	dd04      	ble.n	801037e <__ieee754_fmodf+0x2a>
 8010374:	ee60 0a20 	vmul.f32	s1, s0, s1
 8010378:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801037c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801037e:	42a3      	cmp	r3, r4
 8010380:	dbfc      	blt.n	801037c <__ieee754_fmodf+0x28>
 8010382:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8010386:	d105      	bne.n	8010394 <__ieee754_fmodf+0x40>
 8010388:	4b32      	ldr	r3, [pc, #200]	; (8010454 <__ieee754_fmodf+0x100>)
 801038a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801038e:	ed93 0a00 	vldr	s0, [r3]
 8010392:	e7f3      	b.n	801037c <__ieee754_fmodf+0x28>
 8010394:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8010398:	d13f      	bne.n	801041a <__ieee754_fmodf+0xc6>
 801039a:	0219      	lsls	r1, r3, #8
 801039c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80103a0:	2900      	cmp	r1, #0
 80103a2:	dc37      	bgt.n	8010414 <__ieee754_fmodf+0xc0>
 80103a4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80103a8:	d13d      	bne.n	8010426 <__ieee754_fmodf+0xd2>
 80103aa:	0227      	lsls	r7, r4, #8
 80103ac:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80103b0:	2f00      	cmp	r7, #0
 80103b2:	da35      	bge.n	8010420 <__ieee754_fmodf+0xcc>
 80103b4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80103b8:	bfbb      	ittet	lt
 80103ba:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80103be:	1a12      	sublt	r2, r2, r0
 80103c0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80103c4:	4093      	lsllt	r3, r2
 80103c6:	bfa8      	it	ge
 80103c8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80103cc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80103d0:	bfb5      	itete	lt
 80103d2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80103d6:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80103da:	1a52      	sublt	r2, r2, r1
 80103dc:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80103e0:	bfb8      	it	lt
 80103e2:	4094      	lsllt	r4, r2
 80103e4:	1a40      	subs	r0, r0, r1
 80103e6:	1b1a      	subs	r2, r3, r4
 80103e8:	bb00      	cbnz	r0, 801042c <__ieee754_fmodf+0xd8>
 80103ea:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80103ee:	bf38      	it	cc
 80103f0:	4613      	movcc	r3, r2
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d0c8      	beq.n	8010388 <__ieee754_fmodf+0x34>
 80103f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80103fa:	db1f      	blt.n	801043c <__ieee754_fmodf+0xe8>
 80103fc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8010400:	db1f      	blt.n	8010442 <__ieee754_fmodf+0xee>
 8010402:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8010406:	317f      	adds	r1, #127	; 0x7f
 8010408:	4333      	orrs	r3, r6
 801040a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801040e:	ee00 3a10 	vmov	s0, r3
 8010412:	e7b3      	b.n	801037c <__ieee754_fmodf+0x28>
 8010414:	3801      	subs	r0, #1
 8010416:	0049      	lsls	r1, r1, #1
 8010418:	e7c2      	b.n	80103a0 <__ieee754_fmodf+0x4c>
 801041a:	15d8      	asrs	r0, r3, #23
 801041c:	387f      	subs	r0, #127	; 0x7f
 801041e:	e7c1      	b.n	80103a4 <__ieee754_fmodf+0x50>
 8010420:	3901      	subs	r1, #1
 8010422:	007f      	lsls	r7, r7, #1
 8010424:	e7c4      	b.n	80103b0 <__ieee754_fmodf+0x5c>
 8010426:	15e1      	asrs	r1, r4, #23
 8010428:	397f      	subs	r1, #127	; 0x7f
 801042a:	e7c3      	b.n	80103b4 <__ieee754_fmodf+0x60>
 801042c:	2a00      	cmp	r2, #0
 801042e:	da02      	bge.n	8010436 <__ieee754_fmodf+0xe2>
 8010430:	005b      	lsls	r3, r3, #1
 8010432:	3801      	subs	r0, #1
 8010434:	e7d7      	b.n	80103e6 <__ieee754_fmodf+0x92>
 8010436:	d0a7      	beq.n	8010388 <__ieee754_fmodf+0x34>
 8010438:	0053      	lsls	r3, r2, #1
 801043a:	e7fa      	b.n	8010432 <__ieee754_fmodf+0xde>
 801043c:	005b      	lsls	r3, r3, #1
 801043e:	3901      	subs	r1, #1
 8010440:	e7d9      	b.n	80103f6 <__ieee754_fmodf+0xa2>
 8010442:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8010446:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801044a:	3182      	adds	r1, #130	; 0x82
 801044c:	410b      	asrs	r3, r1
 801044e:	4333      	orrs	r3, r6
 8010450:	e7dd      	b.n	801040e <__ieee754_fmodf+0xba>
 8010452:	bf00      	nop
 8010454:	08011ea8 	.word	0x08011ea8

08010458 <__ieee754_sqrtf>:
 8010458:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801045c:	4770      	bx	lr

0801045e <with_errno>:
 801045e:	b570      	push	{r4, r5, r6, lr}
 8010460:	4604      	mov	r4, r0
 8010462:	460d      	mov	r5, r1
 8010464:	4616      	mov	r6, r2
 8010466:	f7fb fb79 	bl	800bb5c <__errno>
 801046a:	4629      	mov	r1, r5
 801046c:	6006      	str	r6, [r0, #0]
 801046e:	4620      	mov	r0, r4
 8010470:	bd70      	pop	{r4, r5, r6, pc}

08010472 <xflow>:
 8010472:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010474:	4614      	mov	r4, r2
 8010476:	461d      	mov	r5, r3
 8010478:	b108      	cbz	r0, 801047e <xflow+0xc>
 801047a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801047e:	e9cd 2300 	strd	r2, r3, [sp]
 8010482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010486:	4620      	mov	r0, r4
 8010488:	4629      	mov	r1, r5
 801048a:	f7f0 f8d5 	bl	8000638 <__aeabi_dmul>
 801048e:	2222      	movs	r2, #34	; 0x22
 8010490:	b003      	add	sp, #12
 8010492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010496:	f7ff bfe2 	b.w	801045e <with_errno>

0801049a <__math_uflow>:
 801049a:	b508      	push	{r3, lr}
 801049c:	2200      	movs	r2, #0
 801049e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80104a2:	f7ff ffe6 	bl	8010472 <xflow>
 80104a6:	ec41 0b10 	vmov	d0, r0, r1
 80104aa:	bd08      	pop	{r3, pc}

080104ac <__math_oflow>:
 80104ac:	b508      	push	{r3, lr}
 80104ae:	2200      	movs	r2, #0
 80104b0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80104b4:	f7ff ffdd 	bl	8010472 <xflow>
 80104b8:	ec41 0b10 	vmov	d0, r0, r1
 80104bc:	bd08      	pop	{r3, pc}

080104be <finite>:
 80104be:	b082      	sub	sp, #8
 80104c0:	ed8d 0b00 	vstr	d0, [sp]
 80104c4:	9801      	ldr	r0, [sp, #4]
 80104c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104ce:	0fc0      	lsrs	r0, r0, #31
 80104d0:	b002      	add	sp, #8
 80104d2:	4770      	bx	lr

080104d4 <_init>:
 80104d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d6:	bf00      	nop
 80104d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104da:	bc08      	pop	{r3}
 80104dc:	469e      	mov	lr, r3
 80104de:	4770      	bx	lr

080104e0 <_fini>:
 80104e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e2:	bf00      	nop
 80104e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104e6:	bc08      	pop	{r3}
 80104e8:	469e      	mov	lr, r3
 80104ea:	4770      	bx	lr
